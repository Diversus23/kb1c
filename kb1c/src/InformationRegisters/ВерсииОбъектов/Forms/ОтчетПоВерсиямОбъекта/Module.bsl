////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	СсылкаНаОбъект = Параметры.Ссылка;
	
	ОбщийШаблон = РегистрыСведений.ВерсииОбъектов.ПолучитьМакет("СтандартныйМакетПредставленияОбъекта");
	
	ЦветСветлоСерый = ЦветаСтиля.НедоступныеДанныеЦвет;
	ЦветКрасноФиолетовый = ЦветаСтиля.ЗаголовокУдаленногоРеквизитаФон;
	
	Если ТипЗнч(Параметры.СравниваемыеВерсии) = Тип("Массив") Тогда
		// номера версий из регистра ВерсииОбъектов для сравнения,
		// или одна версия если отчет по одному объекту
		СравниваемыеВерсии = Новый ФиксированныйМассив(СортироватьПоВозрастанию(Параметры.СравниваемыеВерсии));
		
		Если СравниваемыеВерсии.Количество() > 1 Тогда
			СтрокаНомераВерсий = "";
			
			СравниваемыеВерсииСЗ = Новый СписокЗначений;
			СравниваемыеВерсииСЗ.ЗагрузитьЗначения(Параметры.СравниваемыеВерсии);
			СравниваемыеВерсииСЗ.СортироватьПоЗначению();
			
			Для Каждого ЭлементСпискаВерсий Из СравниваемыеВерсииСЗ Цикл
				СтрокаНомераВерсий = СтрокаНомераВерсий + Строка(ЭлементСпискаВерсий.Значение) + ", ";
			КонецЦикла;
			
			СтрокаНомераВерсий = Лев(СтрокаНомераВерсий, СтрДлина(СтрокаНомераВерсий) - 2);
			
			Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			                 НСтр("ru = 'Сравнение версий ""%1"" (№№ %2)'"),
			                 ОбщегоНазначения.ПредметСтрокой(СсылкаНаОбъект),
			                 СтрокаНомераВерсий);
		Иначе
			Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			                 НСтр("ru = 'Версия объекта ""%1"" №%2'"),
			                 СсылкаНаОбъект,
			                 Строка(СравниваемыеВерсии[0]));
		КонецЕсли;
		
		СформироватьОтчет(ТаблицаОтчета, СравниваемыеВерсии);
		
	Иначе // используется переданная версия объекта
		
		
		СериализованныйXML = ПолучитьИзВременногоХранилища(Параметры.АдресСериализованногоОбъекта);
		
		Если Параметры.ПоВерсии Тогда // используется отчет по одной версии
			СформироватьОтчетПоПереданнойВерсии(ТаблицаОтчета, СериализованныйXML);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Основная функция модуля, отвечающая за формирование отчета.
// В зависимости от числа версий в массиве вызывает либо функциональность
// формирования отчета по одной версии либо функциональность формирования
// отчета по изменениям между несколькими версиями.
//
Процедура СформироватьОтчет(ТЧОтчета, СравниваемыеВерсии)
	
	Если СравниваемыеВерсии.Количество() = 1 Тогда
		СформироватьОтчетПоВерсииОбъекта(ТЧОтчета, СравниваемыеВерсии[0]);
	Иначе
		СформироватьОтчетПоИзменениям(ТЧОтчета, СравниваемыеВерсии);
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьОтчетПоПереданнойВерсии(ТЧОтчета, СериализованныйXML)
	
	Если СсылкаНаОбъект.Метаданные().Макеты.Найти("МакетОбъекта") <> Неопределено Тогда
		Макет = ОбщегоНазначения.МенеджерОбъектаПоСсылке(СсылкаНаОбъект).ПолучитьМакет("МакетОбъекта");
	Иначе
		Макет = Неопределено;
	КонецЕсли;
	
	Если Макет = Неопределено Тогда
		
		ВерсияОбъекта = РазборПредставленияОбъектаXML(СериализованныйXML, СсылкаНаОбъект);
		ВерсияОбъекта.Вставить("ИмяОбъекта",     Строка(СсылкаНаОбъект));
		ВерсияОбъекта.Вставить("АвторИзменения", "");
		ВерсияОбъекта.Вставить("ДатаИзменения",  ТекущаяДатаСеанса());
		
		Секция = ТЧОтчета.ПолучитьОбласть("R2");
		ВывестиТекстВОтчет(ТЧОтчета, Секция, "R2C2", СсылкаНаОбъект.Метаданные().Синоним,,,16, Истина);
		
		///////////////////////////////////////////////////////////////////////////////
		// вывод списка изменившихся реквизитов
		
		ТЧОтчета.Область("C2").ШиринаКолонки = 30;
		ТЧОтчета.Область("C3").ШиринаКолонки = 50;
		
		ЧислоВыведенныхСтрок = ВывестиРеквизитыПоРазобранномуОбъекту(ТЧОтчета, ВерсияОбъекта);
		ЧислоВыведенныхСтрок = ВывестиТабличныеЧастиПоРазобранномуОбъекту(ТЧОтчета, ВерсияОбъекта, ЧислоВыведенныхСтрок+7);
	Иначе
		СформироватьПоСтандартномуМакету(ТЧОтчета, Макет, ПолучитьОбъектИзXML(СериализованныйXML), "");
	КонецЕсли;
	
КонецПроцедуры

// Функция предназначена для формирования отчета по версии объекта
//
// Параметры:
// ТЧОтчета - ТабличныйДокумент - табличный документ, в который будет выводится отчет
// ИдентификаторВерсии - строка/число - номер версии объекта
//
Процедура СформироватьОтчетПоВерсииОбъекта(ТЧОтчета, ИдентификаторВерсии)
	
	Если СсылкаНаОбъект.Метаданные().Макеты.Найти("МакетОбъекта") <> Неопределено Тогда
		Макет = ОбщегоНазначения.МенеджерОбъектаПоСсылке(СсылкаНаОбъект).ПолучитьМакет("МакетОбъекта");
	Иначе
		Макет = Неопределено;
	КонецЕсли;
	
	ОписаниеВерсии = ПолучитьОписаниеПоВерсии(ИдентификаторВерсии).Описание;
	
	Если Макет = Неопределено Тогда
		ВерсияОбъекта = РазборВерсии(ИдентификаторВерсии, СсылкаНаОбъект);
		
		Секция = ТЧОтчета.ПолучитьОбласть("R2");
		ВывестиТекстВОтчет(ТЧОтчета, Секция, "R2C2", СсылкаНаОбъект.Метаданные().Синоним,,,16, Истина);
		
		///////////////////////////////////////////////////////////////////////////////
		// вывод списка изменившихся реквизитов
		
		ТЧОтчета.Область("C2").ШиринаКолонки = 30;
		ВывестиШапкуПоВерсии(ТЧОтчета, ОписаниеВерсии, 4, 3);
		ВывестиШапкуПоВерсии(ТЧОтчета, ВерсияОбъекта.Комментарий, 5, 3);
		
		ЧислоВыведенныхСтрок = ВывестиРеквизитыПоРазобранномуОбъекту(ТЧОтчета, ВерсияОбъекта);
		ЧислоВыведенныхСтрок = ВывестиТабличныеЧастиПоРазобранномуОбъекту(ТЧОтчета, ВерсияОбъекта, ЧислоВыведенныхСтрок+7);
	Иначе
		СведенияОВерсии = ПолучитьОбъектИзXML(ВерсионированиеОбъектов.СведенияОВерсииОбъекта(СсылкаНаОбъект, ИдентификаторВерсии).ВерсияОбъекта);
		СформироватьПоСтандартномуМакету(ТЧОтчета, Макет, СведенияОВерсии, ОписаниеВерсии);
	КонецЕсли;
	
КонецПроцедуры

// Формирует отчет по объекту, используя стандартный макет.
//
// Параметры:
// ТЧОтчета - ТабличныйДокумент - табличный документ, в который будет выводится отчет
// ВерсияОбъекта - СправочникОбъект,ДокументОбъект - объект, данные которого необходимо отобразить в отчете
// НаименованиеОбъекта - Строка - наименование объекта, по которому 
//
Процедура СформироватьПоСтандартномуМакету(ТЧОтчета, Макет, ВерсияОбъекта, знач ОписаниеВерсии)
	
	МетаданныеОбъекта = СсылкаНаОбъект.Метаданные();
	
	НаименованиеОбъекта = МетаданныеОбъекта.Имя;
	
	ТЧОтчета = Новый ТабличныйДокумент;
	
	Если Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(СсылкаНаОбъект)) Тогда
		Макет = Справочники[НаименованиеОбъекта].ПолучитьМакет("МакетОбъекта");
	Иначе
		Макет = Документы[НаименованиеОбъекта].ПолучитьМакет("МакетОбъекта");
	КонецЕсли;
	
	// Заголовок
	Область = Макет.ПолучитьОбласть("Заголовок");
	ТЧОтчета.Вывести(Область);
	
	Область = ТЧОтчета.ПолучитьОбласть("R3");
	УстановитьСвойстваТекста(Область.Область("R1C2"), ОписаниеВерсии, , , , Истина);
	ТЧОтчета.Вывести(Область);
	
	Область = ТЧОтчета.ПолучитьОбласть("R5");
	ТЧОтчета.Вывести(Область);
	
	// Шапка
	Шапка = Макет.ПолучитьОбласть("Шапка");
	Шапка.Параметры.Заполнить(ВерсияОбъекта);
	ТЧОтчета.Вывести(Шапка);
	
	Для Каждого МетаданныеТЧ Из МетаданныеОбъекта.ТабличныеЧасти Цикл
		Если ВерсияОбъекта[МетаданныеТЧ.Имя].Количество() > 0 Тогда
			Область = Макет.ПолучитьОбласть(МетаданныеТЧ.Имя+"Шапка");
			ТЧОтчета.Вывести(Область);
			
			ОбластьДеталиПриходаТовара = Макет.ПолучитьОбласть(МетаданныеТЧ.Имя);
			Для Каждого ТекСтрокаДеталиПриходаТовара Из ВерсияОбъекта[МетаданныеТЧ.Имя] Цикл
				ОбластьДеталиПриходаТовара.Параметры.Заполнить(ТекСтрокаДеталиПриходаТовара);
				ТЧОтчета.Вывести(ОбластьДеталиПриходаТовара);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	ТЧОтчета.ОтображатьСетку = Ложь;
	ТЧОтчета.Защита = Истина;
	ТЧОтчета.ТолькоПросмотр = Истина;
	ТЧОтчета.ОтображатьЗаголовки = Ложь;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Функции для получения отчета по объекту

// Выводит изменившиеся реквизиты в отчет. При этом получает их представление.
//
Функция ВывестиРеквизитыПоРазобранномуОбъекту(ТЧОтчета, ВерсияОбъекта)
	
	Секция = ТЧОтчета.ПолучитьОбласть("R6");
	ВывестиТекстВОтчет(ТЧОтчета, Секция, "R1C1:R1C3", " ");
	ВывестиТекстВОтчет(ТЧОтчета, Секция, "R1C2", "Реквизиты", , , 11, Истина);
	ТЧОтчета.НачатьГруппуСтрок("ГруппаРеквизитов");
	ВывестиТекстВОтчет(ТЧОтчета, Секция, "R1C1:R1C3", " ");
	
	ЧислоВыводимыхСтрок = 0;
	
	Для Каждого ЭлементРеквизит Из ВерсияОбъекта.Реквизиты Цикл
		
		НаименованиеРеквизита = ПолучитьПредставлениеРеквизитаНаЯзыке(ЭлементРеквизит.НаименованиеРеквизита);
		
		ОписаниеРеквизита = СсылкаНаОбъект.Метаданные().Реквизиты.Найти(НаименованиеРеквизита);
		
		Если ОписаниеРеквизита = Неопределено Тогда
			Для Каждого ОписаниеСтандартногоРеквизита Из СсылкаНаОбъект.Метаданные().СтандартныеРеквизиты Цикл
				Если ОписаниеСтандартногоРеквизита.Имя = НаименованиеРеквизита Тогда
					ОписаниеРеквизита = ОписаниеСтандартногоРеквизита;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ЗначениеРеквизита = ?(ЭлементРеквизит.ЗначениеРеквизита = Неопределено, "", ЭлементРеквизит.ЗначениеРеквизита);
		
		ВыводимоеНаименование = НаименованиеРеквизита;
		ПредставлениеЗначения = Строка(ЗначениеРеквизита);
		
		УстановитьСвойстваТекста(Секция.Область("R1C2"), ВыводимоеНаименование, , , , Истина);
		УстановитьСвойстваТекста(Секция.Область("R1C3"), ПредставлениеЗначения);
		Секция.Область("R1C2:R1C3").ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1, 0);
		Секция.Область("R1C2:R1C3").ЦветРамки = ЦветСветлоСерый;
		
		ТЧОтчета.Вывести(Секция);
		
		ЧислоВыводимыхСтрок = ЧислоВыводимыхСтрок + 1;
	КонецЦикла;
	
	ТЧОтчета.ЗакончитьГруппуСтрок();
	
	Возврат ЧислоВыводимыхСтрок;
	
КонецФункции

// Выводит табличные части по разобранному объекту, при выводе единственного объекта
//
Функция ВывестиТабличныеЧастиПоРазобранномуОбъекту(ТЧОтчета, ВерсияОбъекта, НомерСтрокиВывода);
	
	ЧислоВыводимыхСтрок = 0;
	
	Если ВерсияОбъекта.ТабличныеЧасти.Количество() <> 0 Тогда
		
		Для Каждого СтрокаТабличнаяЧасть Из ВерсияОбъекта.ТабличныеЧасти Цикл
			НаименованиеТабличнойЧасти = СтрокаТабличнаяЧасть.Ключ;
			ТабличнаяЧасть             = СтрокаТабличнаяЧасть.Значение;
			Если ТабличнаяЧасть.Количество() > 0 Тогда
				
				МетаданныеТЧ = СсылкаНаОбъект.Метаданные().ТабличныеЧасти.Найти(НаименованиеТабличнойЧасти);
				
				СинонимТЧ = Неопределено;
				Если МетаданныеТЧ <> Неопределено Тогда
					СинонимТЧ = МетаданныеТЧ.Синоним;
				КонецЕсли;
				СинонимТЧ = ?(ЗначениеЗаполнено(СинонимТЧ), СинонимТЧ, НаименованиеТабличнойЧасти);
				
				Секция = ТЧОтчета.ПолучитьОбласть("R" + Строка(НомерСтрокиВывода));
				ВывестиТекстВОтчет(ТЧОтчета, Секция, "R1C1:R1C100", " ");
				ОбластьВывода = ВывестиТекстВОтчет(ТЧОтчета, Секция, "R1C2", СинонимТЧ, , , 11, Истина);
				ТЧОтчета.Область("R"+ОбластьВывода.Верх+"C2").СоздатьФорматСтрок();
				ТЧОтчета.Область("R"+ОбластьВывода.Верх+"C2").ШиринаКолонки = Окр(СтрДлина(СинонимТЧ)*2, 0, РежимОкругления.Окр15как20);
				ТЧОтчета.НачатьГруппуСтрок("ГруппаСтрок");
				
				ВывестиТекстВОтчет(ТЧОтчета, Секция, "R1C1:R1C3", " ");
				
				ЧислоВыводимыхСтрок = ЧислоВыводимыхСтрок + 1;
				
				НомерСтрокиВывода = НомерСтрокиВывода + 3;
				
				ДобавляемаяТЧ = Новый ТабличныйДокумент;
				
				ДобавляемаяТЧ.Присоединить(СформироватьПустойСектор(ТабличнаяЧасть.Количество()+1));
				
				НомерКолонки = 2;
				
				СоответствиеРазмерностиКолонок = Новый Соответствие;
				
				Секция = Новый ТабличныйДокумент;
				
				УстановитьСвойстваТекста(Секция.Область("R1C1"),"N", , ЦветСветлоСерый, , Истина, Истина);
				
				НомерСтроки = 1;
				Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
					НомерСтроки = НомерСтроки + 1;
					УстановитьСвойстваТекста(Секция.Область("R" + НомерСтроки + "C1"), Строка(НомерСтроки-1), , , , , Истина);
				КонецЦикла;
				ДобавляемаяТЧ.Присоединить(Секция);
				
				НомерКолонки = 3;
				
				Для Каждого КолонкаТабличнойЧасти Из ТабличнаяЧасть.Колонки Цикл
					Секция = Новый ТабличныйДокумент;
					НаименованиеПоля = КолонкаТабличнойЧасти.Имя;
					
					ОписаниеПоля = Неопределено;
					Если МетаданныеТЧ <> Неопределено Тогда
						ОписаниеПоля = МетаданныеТЧ.Реквизиты.Найти(НаименованиеПоля);
					КонецЕсли;
					
					Если ОписаниеПоля = Неопределено Или Не ЗначениеЗаполнено(ОписаниеПоля.Синоним) Тогда
						ВыводимоеНаименованиеПоля = НаименованиеПоля;
					Иначе
						ВыводимоеНаименованиеПоля = ОписаниеПоля.Синоним;
					КонецЕсли;
					ЦветЗаголовкаКолонки = ?(ОписаниеПоля = Неопределено, ЦветКрасноФиолетовый, ЦветСветлоСерый);
					УстановитьСвойстваТекста(Секция.Область("R1C1"), ВыводимоеНаименованиеПоля, , ЦветЗаголовкаКолонки, , Истина, Истина);
					СоответствиеРазмерностиКолонок.Вставить(НомерКолонки, СтрДлина(НаименованиеПоля) + 4);
					НомерСтроки = 1;
					Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
						НомерСтроки = НомерСтроки + 1;
						Значение = ?(СтрокаТабличнойЧасти[НаименованиеПоля] = Неопределено, "", СтрокаТабличнойЧасти[НаименованиеПоля]);
						ПредставлениеЗначения = Строка(Значение);
						
						УстановитьСвойстваТекста(Секция.Область("R" + НомерСтроки + "C1"), ПредставлениеЗначения, , , , , Истина);
						Если СтрДлина(ПредставлениеЗначения) > (СоответствиеРазмерностиКолонок[НомерКолонки] - 4) Тогда
							СоответствиеРазмерностиКолонок[НомерКолонки] = СтрДлина(ПредставлениеЗначения) + 4;
						КонецЕсли;
					КонецЦикла; // Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
					
					ДобавляемаяТЧ.Присоединить(Секция);
					НомерКолонки = НомерКолонки + 1;
				КонецЦикла; // Для Каждого КолонкаТабличнойЧасти Из ТабличнаяЧасть.Колонки Цикл
				
				ОбластьВывода = ТЧОтчета.Вывести(ДобавляемаяТЧ);
				ТЧОтчета.Область("R"+ОбластьВывода.Верх+"C1:R"+ОбластьВывода.Низ+"C"+НомерКолонки).СоздатьФорматСтрок();
				ТЧОтчета.Область("R"+ОбластьВывода.Верх+"C2").ШиринаКолонки = 7;
				Для ТекущийНомерКолонки = 3 По НомерКолонки-1 Цикл
					ТЧОтчета.Область("R"+ОбластьВывода.Верх+"C"+ТекущийНомерКолонки).ШиринаКолонки = СоответствиеРазмерностиКолонок[ТекущийНомерКолонки];
				КонецЦикла;
				ТЧОтчета.ЗакончитьГруппуСтрок();
				
			КонецЕсли; // Если ТабличнаяЧасть.Количество() > 0 Тогда
		КонецЦикла; // Для Каждого СтрокаТабличнаяЧасть Из ВерсияОбъекта.ТабличныеЧасти Цикл
		
	КонецЕсли;
	
КонецФункции

// Выводит шапку отчета при выводе отчета по версии объекта
//
Процедура ВывестиШапкуПоВерсии(ТЧОтчета, знач Текст, Знач НомерСтроки, Знач НомерКолонки)
	
	Если Не ПустаяСтрока(Текст) Тогда
		
		ТЧОтчета.Область("C"+Строка(НомерКолонки)).ШиринаКолонки = 50;
		
		Регион = "R" + Строка(НомерСтроки) + "C"+Строка(НомерКолонки);
		ТЧОтчета.Область(Регион).Текст = Текст;
		ТЧОтчета.Область(Регион).ЦветФона = ЦветСветлоСерый;
		ТЧОтчета.Область(Регион).Шрифт = Новый Шрифт(, 8, Истина, , , );
		ТЧОтчета.Область(Регион).ГраницаСверху = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
		ТЧОтчета.Область(Регион).ГраницаСнизу  = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
		ТЧОтчета.Область(Регион).ГраницаСлева  = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
		ТЧОтчета.Область(Регион).ГраницаСправа = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Функции для получения отчета по изменениям

// Основная управляющая функция для формирование отчета по изменениям.
// Состоит из трех этапов:
// 1. Получение XML представления хранимых версий объекта. Формирование
//    специальных структур данных для сравнения объектов.
// 2. Получение 
//
Процедура СформироватьОтчетПоИзменениям(ТЧОтчета, знач МассивВерсий)
	
	// Хранит переходную разобранную версию объекта,
	// что бы сократить число разборов XML
	Перем ВерсияОбъекта;
	
	// "Сквозной" идентификатор измененных строк в версиях
	Перем счетчикУникальныйИд;
	
	ТЧОтчета.Очистить();
	
	// Формируем массив номеров версий (так как некоторые могут отсутствовать
	// и иметь непоследовательную нумерацию), массив отсортирован по возрастанию.
	МассивНомеровВерсий = МассивВерсий;
	
	// Количество версий объекта хранящихся в базе (k).
	// Для формирования отчета необходимо сделать (k-1) сравнений.
	// Фактически это означает, что у таблиц изменений будет (k) колонок
	//КоличествоВерсийОбъекта = КоличествоВерсий;
	КоличествоВерсийОбъекта = МассивНомеровВерсий.Количество();
	
	// Хранит в себе все изменения реквизитов имеет две размерности:
	// первая (строки) содержит значения наименований реквизитов объекта
	// вторая (столбцы) содержит идентификацию версии объекта и характеристику
	// изменения идентификация версии это строка которая однозначно идентифицирует
	// версию объекта среди остальных и сообщает дополнительную информацию по изменению
	ТаблицаИзмененийРеквизитов = Новый ТаблицаЗначений;
	ПодготовитьКолонкиТаблицИзмененийРеквизитов(ТаблицаИзмененийРеквизитов, МассивНомеровВерсий);
	
	// Хранит в себе изменения табличных частей в виде соответствий имен
	// таблиц значений объекта истории изменений этой таблицы значений
	// каждое соответствие - табличная часть
	// первая (строки) содержит значения наименований полей табличной части
	// вторая (столбцы) содержит идентификацию версии объекта
	// идентификация версии это строка которая однозначно идентифицирует версию
	// объекта среди остальных и сообщает дополнительную информацию по изменению
	ТаблицаИзмененийТабличныхЧастей = Новый Соответствие;
	
	// формируем начальные версии объекта, значения которых показываются всегда
	// (при наличии последующих изменений)
	ВерсияОбъекта_Пред = СчитатьНачальныеЗначенияРеквизитовИТабличныхЧастей(
	                               ТаблицаИзмененийРеквизитов,
	                               ТаблицаИзмененийТабличныхЧастей,
	                               КоличествоВерсийОбъекта,
	                               МассивНомеровВерсий);
	
	счетчикУникальныйИд = ПолучитьУникальныеУникальныйИд(ТаблицаИзмененийТабличныхЧастей, "Вер" + Формат(МассивНомеровВерсий[0], "ЧГ=0"));
	
	Для ИндексВерсии = 2 По МассивНомеровВерсий.Количество() Цикл
		НомерВерсии = МассивНомеровВерсий[ИндексВерсии-1];
		НомерПредыдущейВерсии = "Вер" + (Формат(МассивНомеровВерсий[ИндексВерсии-2], "ЧГ=0"));
		ИмяКолонкиТекущейВерсии = "Вер" + Формат(НомерВерсии, "ЧГ=0");
		
		РезультатСравнения = РассчитатьИзменения(НомерВерсии, ВерсияОбъекта_Пред, ВерсияОбъекта);
		
		ИзмРек = РезультатСравнения["Реквизиты"]["и"];
		ДобРек = РезультатСравнения["Реквизиты"]["д"];
		УдлРек = РезультатСравнения["Реквизиты"]["у"];
		
		// заполнение таблицы отчета по реквизитам
		ЗаполнитьХарактеристикуИзмененияРеквизита(ИзмРек, "И", ТаблицаИзмененийРеквизитов, ИмяКолонкиТекущейВерсии, ВерсияОбъекта);
		ЗаполнитьХарактеристикуИзмененияРеквизита(ДобРек, "Д", ТаблицаИзмененийРеквизитов, ИмяКолонкиТекущейВерсии, ВерсияОбъекта);
		ЗаполнитьХарактеристикуИзмененияРеквизита(УдлРек, "У", ТаблицаИзмененийРеквизитов, ИмяКолонкиТекущейВерсии, ВерсияОбъекта);
		
		// Изменения в табличных частях
		ИзмТЧ = РезультатСравнения["ТабличныеЧасти"]["и"];
		
		// Данная функциональность пока не реализуется
		ДобТЧ = РезультатСравнения["ТабличныеЧасти"]["д"];
		УдлТЧ = РезультатСравнения["ТабличныеЧасти"]["у"];
		
		Для Каждого ЭлементСоответствия Из ВерсияОбъекта.ТабличныеЧасти Цикл
			ИмяТаблицы = ЭлементСоответствия.Ключ;
			
			Если ЗначениеЗаполнено(ДобТЧ.Найти(ИмяТаблицы))
			 Или ЗначениеЗаполнено(УдлТЧ.Найти(ИмяТаблицы)) Тогда
				Продолжить;
			КонецЕсли;
			
			ТаблицаИзмененийТабличныхЧастей[ИмяТаблицы][ИмяКолонкиТекущейВерсии] = 
			        ВерсияОбъекта.ТабличныеЧасти[ИмяТаблицы].Скопировать();
			СсылкаНаВерсиюТаблицы = ТаблицаИзмененийТабличныхЧастей[ИмяТаблицы][ИмяКолонкиТекущейВерсии];
			СсылкаНаВерсиюТаблицы.Колонки.Добавить("Версионирование_ИдСтроки");
			СсылкаНаВерсиюТаблицы.ЗаполнитьЗначения(Неопределено, "Версионирование_ИдСтроки");
			СсылкаНаВерсиюТаблицы.Колонки.Добавить("Версионирование_Модификация");
			СсылкаНаВерсиюТаблицы.ЗаполнитьЗначения(Неопределено, "Версионирование_Модификация");
			ТаблицаСИзменениями = ИзмТЧ.Получить(ИмяТаблицы);
			Если ТаблицаСИзменениями <> Неопределено Тогда
				ИзмТЧ_СтрокиИ = ТаблицаСИзменениями["И"];
				ИзмТЧ_СтрокиД = ТаблицаСИзменениями["Д"];
				ИзмТЧ_СтрокиУ = ТаблицаСИзменениями["У"];
				
				РазмерностьВТЧ0 = ВерсияОбъекта_Пред.ТабличныеЧасти[ИмяТаблицы].Количество();
				Если РазмерностьВТЧ0 = 0 Тогда
					ПомеченныеВТЧ0 = Новый Массив;
				Иначе
					ПомеченныеВТЧ0 = Новый Массив(РазмерностьВТЧ0);
				КонецЕсли;
				
				РазмерностьВТЧ1 = ВерсияОбъекта.ТабличныеЧасти[ИмяТаблицы].Количество();
				Если РазмерностьВТЧ1 = 0 Тогда
					ПомеченныеВТЧ1 = Новый Массив;
				Иначе
					ПомеченныеВТЧ1 = Новый Массив(РазмерностьВТЧ1);
				КонецЕсли;
				
				Для Каждого ЭлементТЧ Из ИзмТЧ_СтрокиИ Цикл
					СтрокаТИЗ = ТаблицаИзмененийТабличныхЧастей[ИмяТаблицы][НомерПредыдущейВерсии][ЭлементТЧ.ИндексВТЧ0-1];
					СсылкаНаВерсиюТаблицы[ЭлементТЧ.ИндексВТЧ1-1].Версионирование_ИдСтроки = СтрокаТИЗ.Версионирование_ИдСтроки;
					СсылкаНаВерсиюТаблицы[ЭлементТЧ.ИндексВТЧ1-1].Версионирование_Модификация = "И";
				КонецЦикла;
				
				Для Каждого ЭлементТЧ Из ИзмТЧ_СтрокиД Цикл
					СсылкаНаВерсиюТаблицы[ЭлементТЧ.ИндексВТЧ1-1].Версионирование_ИдСтроки = УвеличитьСчетчик(счетчикУникальныйИд, ИмяТаблицы);
					СсылкаНаВерсиюТаблицы[ЭлементТЧ.ИндексВТЧ1-1].Версионирование_Модификация = "Д";
				КонецЦикла;
				
				// необходимо заполнить всем элементам УникальныйИд (сопоставить с предыдущей версией)
				Для Индекс = 1 По СсылкаНаВерсиюТаблицы.Количество() Цикл
					Если СсылкаНаВерсиюТаблицы[Индекс-1].Версионирование_ИдСтроки = Неопределено Тогда
						// найдена строка, для которой необходимо найти соответствие в предыдущей таблице
						СтрокаТЧ = СсылкаНаВерсиюТаблицы[Индекс-1];
						
						ПараметрыОтбора = Новый Структура;
						ОбщиеКолонки = НайтиОбщиеКолонки(СсылкаНаВерсиюТаблицы, ТаблицаИзмененийТабличныхЧастей[ИмяТаблицы][НомерПредыдущейВерсии]);
						Для Каждого ИмяКолонки Из ОбщиеКолонки Цикл
							Если (ИмяКолонки <> "Версионирование_ИдСтроки") И (ИмяКолонки <> "Версионирование_Модификация") Тогда
								ПараметрыОтбора.Вставить(ИмяКолонки, СтрокаТЧ[ИмяКолонки]);
							КонецЕсли;
						КонецЦикла;
						
						МассивСтрокПредыдущейТЧ = ТаблицаИзмененийТабличныхЧастей[ИмяТаблицы][НомерПредыдущейВерсии].НайтиСтроки(ПараметрыОтбора);
						
						ПараметрыОтбора.Вставить("Версионирование_Модификация", Неопределено);
						МассивСтрокТекущейТЧ = СсылкаНаВерсиюТаблицы.НайтиСтроки(ПараметрыОтбора);
						
						Для ИндПоТЗ_Текущей = 1 По МассивСтрокТекущейТЧ.Количество() Цикл
							Если ИндПоТЗ_Текущей <= МассивСтрокПредыдущейТЧ.Количество() Тогда
								МассивСтрокТекущейТЧ[ИндПоТЗ_Текущей-1].Версионирование_ИдСтроки = МассивСтрокПредыдущейТЧ[ИндПоТЗ_Текущей-1].Версионирование_ИдСтроки;
							КонецЕсли;
							МассивСтрокТекущейТЧ[ИндПоТЗ_Текущей-1].Версионирование_Модификация = Ложь;
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
				Для Каждого ЭлементТЧ Из ИзмТЧ_СтрокиУ Цикл
					СтрокаМнимая = СсылкаНаВерсиюТаблицы.Добавить();
					СтрокаМнимая.Версионирование_ИдСтроки = ТаблицаИзмененийТабличныхЧастей[ИмяТаблицы][НомерПредыдущейВерсии][ЭлементТЧ.ИндексВТЧ0-1].Версионирование_ИдСтроки;
					СтрокаМнимая.Версионирование_Модификация = "У";
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		ВерсияОбъекта_Пред = ВерсияОбъекта;
	КонецЦикла;
	
	// передаем скомпонованную информацию в спец блок для вывода данных в отчет
	ВывестиРезультатыКомпоновкиВОтчет(ТаблицаИзмененийРеквизитов,
									  ТаблицаИзмененийТабличныхЧастей,
									  счетчикУникальныйИд,
									  МассивНомеровВерсий,
									  ТЧОтчета);
	
	ШаблонЛегенда = ОбщийШаблон.ПолучитьОбласть("Легенда");
	ТЧОтчета.Вывести(ШаблонЛегенда);
	
КонецПроцедуры

Процедура ВывестиИзмененияРеквизитов(ТЧОтчета,
                                     ТаблицаИзмененийРеквизитов,
                                     МассивНомеровВерсий)
	
	ОбластьШапкаРеквизитов = ОбщийШаблон.ПолучитьОбласть("ШапкаРеквизитов");
	ТЧОтчета.Вывести(ОбластьШапкаРеквизитов);
	ТЧОтчета.НачатьГруппуСтрок("ГруппаРеквизитов");
	
	Для Каждого ЭлементМодРеквизит Из ТаблицаИзмененийРеквизитов Цикл
		Если ЭлементМодРеквизит.Версионирование_Модификация = Истина Тогда
			// получаем имя реквизита
			НаименованиеРеквизита = ЭлементМодРеквизит.Наименование;
			// выводим наименование, предварительно заменяя его на другое, если 
			// оно является предопределенным
			ВыводимоеНаименование = ПолучитьПредставлениеРеквизитаНаЯзыке(НаименованиеРеквизита);
			
			ОписаниеРеквизита = СсылкаНаОбъект.Метаданные().Реквизиты.Найти(ВыводимоеНаименование);
			
			Если ОписаниеРеквизита = Неопределено Тогда
				Для Каждого ОписаниеСтандартногоРеквизита Из СсылкаНаОбъект.Метаданные().СтандартныеРеквизиты Цикл
					Если ОписаниеСтандартногоРеквизита.Имя = ПолучитьПредставлениеРеквизитаНаЯзыке(НаименованиеРеквизита) Тогда
						ОписаниеРеквизита = ОписаниеСтандартногоРеквизита;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			ПустаяЯчейка = ОбщийШаблон.ПолучитьОбласть("ПустаяЯчейка");
			ТЧОтчета.Вывести(ПустаяЯчейка);;
			
			НаименованиеРеквизита = ОбщийШаблон.ПолучитьОбласть("НаименованиеРеквизитаПоля");
			НаименованиеРеквизита.Параметры.НаименованиеРеквизитаПоля = ВыводимоеНаименование;
			ТЧОтчета.Присоединить(НаименованиеРеквизита);
			
			ИндексПоВерсиямРеквизитов = МассивНомеровВерсий.Количество();
			
			Пока ИндексПоВерсиямРеквизитов >= 1 Цикл
				СтруктураХарактеристикаИзменения = ЭлементМодРеквизит["Вер" + Формат(МассивНомеровВерсий[ИндексПоВерсиямРеквизитов-1], "ЧГ=0")];
				
				ПредставлениеЗначенияРеквизита = "";
				ЗначениеРеквизита = "";
				Изменение = Неопределено;
				ТипЗначения = "";
				
				// если в текущей версии не было изменений реквизита, то пропускаем до следующей версии
				Если ТипЗнч(СтруктураХарактеристикаИзменения) = Тип("Строка") Тогда
					
					ПредставлениеЗначенияРеквизита = Строка(ЗначениеРеквизита);
					
				ИначеЕсли СтруктураХарактеристикаИзменения <> Неопределено Тогда
					Если СтруктураХарактеристикаИзменения.ТипИзменения = "У" Тогда
					Иначе
						ЗначениеРеквизита = СтруктураХарактеристикаИзменения.Значение.ЗначениеРеквизита;
						ПредставлениеЗначенияРеквизита = Строка(ЗначениеРеквизита);
					КонецЕсли;
					// получаем структуру изменения реквизита в текущей версии
					Изменение = СтруктураХарактеристикаИзменения.ТипИзменения;
				КонецЕсли;
				
				Если ПредставлениеЗначенияРеквизита = "" Тогда
					ПредставлениеЗначенияРеквизита = ЗначениеРеквизита;
					Если ПредставлениеЗначенияРеквизита = "" Тогда
						ПредставлениеЗначенияРеквизита = " ";
					КонецЕсли;
				КонецЕсли;
				
				Если      Изменение = Неопределено Тогда
					ОбластьЗначениеРеквизита = ОбщийШаблон.ПолучитьОбласть("ИсходноеЗначениеРеквизита");
					ОбластьЗначениеРеквизита.Параметры.ЗначениеРеквизита = ПредставлениеЗначенияРеквизита;
				ИначеЕсли Изменение = "И" Тогда
					ОбластьЗначениеРеквизита = ОбщийШаблон.ПолучитьОбласть("ИзмененноеЗначениеРеквизита");
					ОбластьЗначениеРеквизита.Параметры.ЗначениеРеквизита = ПредставлениеЗначенияРеквизита;
				ИначеЕсли Изменение = "У" Тогда
					ОбластьЗначениеРеквизита = ОбщийШаблон.ПолучитьОбласть("УдаленныйРеквизит");
					ОбластьЗначениеРеквизита.Параметры.ЗначениеРеквизита = ПредставлениеЗначенияРеквизита;
				ИначеЕсли Изменение = "Д" Тогда
					ОбластьЗначениеРеквизита = ОбщийШаблон.ПолучитьОбласть("ДобавленныйРеквизит");
					ОбластьЗначениеРеквизита.Параметры.ЗначениеРеквизита = ПредставлениеЗначенияРеквизита;
				КонецЕсли;
				
				ТЧОтчета.Присоединить(ОбластьЗначениеРеквизита);
				
				ИндексПоВерсиямРеквизитов = ИндексПоВерсиямРеквизитов - 1;
			КонецЦикла;
		КонецЕсли; // Если ЭлементМодРеквизит.Версионирование_Модификация = Истина Тогда
	КонецЦикла;
	
	ТЧОтчета.ЗакончитьГруппуСтрок();
	
КонецПроцедуры

Процедура ВывестиИзмененияТабличныхЧастей(ТЧОтчета,
                                          ТаблицаИзмененийТабличныхЧастей,
                                          МассивНомеровВерсий,
                                          счетчикУникальныйИд)
	
	ЗаголовокСекцииТабличныхЧастейВыводился = Ложь;
	
	ШаблонСвободнаяСтрока = ОбщийШаблон.ПолучитьОбласть("СвободнаяСтрока");
	ШаблонОчереднаяСтрокаТЧ = ОбщийШаблон.ПолучитьОбласть("ШапкаСтрокиТабличнойЧасти");
	
	ТЧОтчета.Вывести(ШаблонСвободнаяСтрока);
	
	// цикл по всем измененным 
	Для Каждого ЭлементИзмененнаяТЧ Из ТаблицаИзмененийТабличныхЧастей Цикл
		ИмяТабличнойЧасти = ЭлементИзмененнаяТЧ.Ключ;
		ВерсииТекущейТЧ = ЭлементИзмененнаяТЧ.Значение;
		
		ТекущаяТабличнаяЧастьИзменилась = Ложь;
		
		Для ТекСчетчикУникальныйИд = 1 По СчетчикУникальныйИд[ИмяТабличнойЧасти] Цикл
			
			СтрокаУникальныйИдИзменена = Ложь;
			// в случае если найдено изменение, необходимо так же показать изначальную версию,
			// от которой происходят изменения
			НачальнаяВерсияЗаполнена = Ложь;
			
			// поиск по всем версиям изменений по текущей строке (УникальныйИд = ТекСчетчикУникальныйИд) 
			// если строка была удалена, то поиск можно прервать и перейти к следующей
			// строке, предварительно подсветив "удалено" цветом удаленной сущности
			ИндексПоВерсиям = МассивНомеровВерсий.Количество();
			
			// ---------------------------------------------------------------------------------
			// просмотрим версии наперед, что бы быть уверенными, что изменения встречаются ---
			
			МодифицированностьСтроки = Ложь;
			
			Пока ИндексПоВерсиям >= 1 Цикл
				ТекущаяКолонкаВерсииТЧ = "Вер" + Формат(МассивНомеровВерсий[ИндексПоВерсиям-1], "ЧГ=0");
				ТекущаяТЧВерсии = ВерсииТекущейТЧ[ТекущаяКолонкаВерсииТЧ];
				
				НайденнаяСтрока = Неопределено;
				Если ТекущаяТЧВерсии.Колонки.Найти("Версионирование_ИдСтроки") <> Неопределено Тогда
					НайденнаяСтрока = ТекущаяТЧВерсии.Найти(ТекСчетчикУникальныйИд, "Версионирование_ИдСтроки");
				КонецЕсли;
				
				Если НайденнаяСтрока <> Неопределено Тогда
					Если (НайденнаяСтрока.Версионирование_Модификация <> Неопределено) Тогда
						Если (ТипЗнч(НайденнаяСтрока.Версионирование_Модификация) = Тип("Строка")
							ИЛИ (ТипЗнч(НайденнаяСтрока.Версионирование_Модификация) = Тип("Булево")
							      И НайденнаяСтрока.Версионирование_Модификация = Истина)) Тогда
							МодифицированностьСтроки = Истина;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				ИндексПоВерсиям = ИндексПоВерсиям - 1;
			КонецЦикла;
			
			Если Не МодифицированностьСтроки Тогда
				Продолжить;
			КонецЕсли;
			
			// ---------------------------------------------------------------------------------
			
			// приступаем к отображению версий в табличный документ
			ИндексПоВерсиям = МассивНомеровВерсий.Количество();
			
			ПромежутокМеждуЗаполнениями = 0;
			
			// Цикл по всем версиям. Пытаемся найти изменения по строку в каждой версии
			// по ее УникальныйИд.
			Пока ИндексПоВерсиям >= 1 Цикл
				ПромежутокМеждуЗаполнениями = ПромежутокМеждуЗаполнениями + 1;
				ТекущаяКолонкаВерсииТЧ = "Вер" + Формат(МассивНомеровВерсий[ИндексПоВерсиям-1]);
				// табличная часть текущей версии (таблица значений с признаками модификации)
				ТекущаяТЧВерсии = ВерсииТекущейТЧ[ТекущаяКолонкаВерсииТЧ];
				НайденнаяСтрока = ТекущаяТЧВерсии.Найти(ТекСчетчикУникальныйИд, "Версионирование_ИдСтроки");
				
				// в очередной версии найдено изменение строки (возможно это первое изменение с конца)
				Если НайденнаяСтрока <> Неопределено Тогда
					
					// блок для вывода шапки секции всех табличных частей
					Если Не ЗаголовокСекцииТабличныхЧастейВыводился Тогда
						ЗаголовокСекцииТабличныхЧастейВыводился = Истина;
						ШаблонОбщаяШапкаСекцииТЧ = ОбщийШаблон.ПолучитьОбласть("ШапкаТабличныхЧастей");
						ТЧОтчета.Вывести(ШаблонОбщаяШапкаСекцииТЧ);
						ТЧОтчета.НачатьГруппуСтрок("ГруппаТабличныхЧастей");
						ТЧОтчета.Вывести(ШаблонСвободнаяСтрока);
					КонецЕсли;
					
					// блок для вывода шапки текущей обрабатываемой табличной части
					Если Не ТекущаяТабличнаяЧастьИзменилась Тогда
						ТекущаяТабличнаяЧастьИзменилась = Истина;
						ШаблонШапкаТекущейТЧ = ОбщийШаблон.ПолучитьОбласть("ШапкаТабличнойЧасти");
						ШаблонШапкаТекущейТЧ.Параметры.НаименованиеТабличнойЧасти = ИмяТабличнойЧасти;
						ТЧОтчета.Вывести(ШаблонШапкаТекущейТЧ);
						ТЧОтчета.НачатьГруппуСтрок("ТабличнаяЧасть"+ИмяТабличнойЧасти);
						ТЧОтчета.Вывести(ШаблонСвободнаяСтрока);
					КонецЕсли;
					
					Модификация = НайденнаяСтрока.Версионирование_Модификация;
					
					Если СтрокаУникальныйИдИзменена = Ложь Тогда
						СтрокаУникальныйИдИзменена = Истина;
						
						ШаблонШапкаСтрокиТЧ = ОбщийШаблон.ПолучитьОбласть("ШапкаСтрокиТабличнойЧасти");
						ШаблонШапкаСтрокиТЧ.Параметры.НомерСтрокиТабличнойЧасти = ТекСчетчикУникальныйИд;
						ТЧОтчета.Вывести(ШаблонШапкаСтрокиТЧ);
						ТЧОтчета.НачатьГруппуСтрок("ГруппаСтрок"+ИмяТабличнойЧасти+ТекСчетчикУникальныйИд);
						
						ТипВывода = "";
						Если Модификация = "У" Тогда
							ТипВывода = "У"
						КонецЕсли;
						МассивЗаполнения = Новый Массив;
						Для Каждого Колонка Из ТекущаяТЧВерсии.Колонки Цикл
							Если Колонка.Имя = "Версионирование_ИдСтроки"
							 Или Колонка.Имя = "Версионирование_Модификация" Тогда
								Продолжить;
							КонецЕсли;
							МассивЗаполнения.Добавить(Колонка.Имя);
						КонецЦикла;
						
						ПустойСектор = СформироватьПустойСектор(ТекущаяТЧВерсии.Колонки.Количество()-2);
						ПустойСекторЗаполняемый = СформироватьПустойСектор(ТекущаяТЧВерсии.Колонки.Количество()-2, ТипВывода);
						Секция = СформироватьСекторСтрокиТЧ(МассивЗаполнения, ТипВывода);
						
						ТЧОтчета.Присоединить(ПустойСектор);
						ТЧОтчета.Присоединить(Секция);
					КонецЕсли;
					
					Пока ПромежутокМеждуЗаполнениями > 1 Цикл
						ТЧОтчета.Присоединить(ПустойСекторЗаполняемый);
						ПромежутокМеждуЗаполнениями = ПромежутокМеждуЗаполнениями - 1;
					КонецЦикла;
					
					ПромежутокМеждуЗаполнениями = 0;
					
					// теперь заполняем очередную измененную табличную строку
					МассивЗаполнения = Новый Массив;
					Для Каждого Колонка Из ТекущаяТЧВерсии.Колонки Цикл
						Если Колонка.Имя = "Версионирование_ИдСтроки"
						 Или Колонка.Имя = "Версионирование_Модификация" Тогда
							Продолжить;
						КонецЕсли;
						
						Представление = Строка(НайденнаяСтрока[Колонка.Имя]);
						МассивЗаполнения.Добавить(Представление);
						
					КонецЦикла;
					
					Если ТипЗнч(Модификация) = Тип("Булево") Тогда
						ТипВывода = "";
					Иначе
						ТипВывода = Модификация;
					КонецЕсли;
					
					Секция = СформироватьСекторСтрокиТЧ(МассивЗаполнения, ТипВывода);
					
					ТЧОтчета.Присоединить(Секция);
					
				КонецЕсли; // НайденнаяСтрока <> Неопределено
				ИндексПоВерсиям = ИндексПоВерсиям - 1;
			КонецЦикла;
			
			Если СтрокаУникальныйИдИзменена Тогда
				ТЧОтчета.ЗакончитьГруппуСтрок();
				ТЧОтчета.Вывести(ШаблонСвободнаяСтрока);
			КонецЕсли;
			
		КонецЦикла;
		
		Если ТекущаяТабличнаяЧастьИзменилась Тогда
			ТЧОтчета.ЗакончитьГруппуСтрок();
			ТЧОтчета.Вывести(ШаблонСвободнаяСтрока);
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЗаголовокСекцииТабличныхЧастейВыводился Тогда
		ТЧОтчета.ЗакончитьГруппуСтрок();
		ТЧОтчета.Вывести(ШаблонСвободнаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

Функция ВывестиРезультатыКомпоновкиВОтчет(ТаблицаИзмененийРеквизитов,
                                          ТаблицаИзмененийТабличныхЧастей,
                                          счетчикУникальныйИд,
                                          МассивНомеровВерсий,
                                          ТЧОтчета)
	
	ЧислоИзменившихсяРеквизитов = РассчитатьЧислоИзменившихсяРеквизитов(ТаблицаИзмененийРеквизитов, МассивНомеровВерсий);
	ЧислоВерсий = МассивНомеровВерсий.Количество();
	
	///////////////////////////////////////////////////////////////////////////////
	//                           ВЫВОДИМ ОТЧЕТ                                   //
	///////////////////////////////////////////////////////////////////////////////
	
	ТЧОтчета.Очистить();
	
	ВывестиШапку(ТЧОтчета, МассивНомеровВерсий, ЧислоВерсий);
	
	Если ЧислоИзменившихсяРеквизитов = 0 Тогда
		ОбластьШапкаРеквизитов = ОбщийШаблон.ПолучитьОбласть("ШапкаРеквизитов");
		ТЧОтчета.Вывести(ОбластьШапкаРеквизитов);
		ТЧОтчета.НачатьГруппуСтрок("ГруппаРеквизитов");
		ОбластьРеквизитыНеИзменялись = ОбщийШаблон.ПолучитьОбласть("РеквизитыНеИзменялись");
		ТЧОтчета.Вывести(ОбластьРеквизитыНеИзменялись);
		ТЧОтчета.ЗакончитьГруппуСтрок();
	Иначе
		ВывестиИзмененияРеквизитов(ТЧОтчета,
		                           ТаблицаИзмененийРеквизитов,
		                           МассивНомеровВерсий);
		
	КонецЕсли;
	
	ВывестиИзмененияТабличныхЧастей(ТЧОтчета,
	                                ТаблицаИзмененийТабличныхЧастей,
	                                МассивНомеровВерсий,
	                                счетчикУникальныйИд);
	
	ТЧОтчета.ИтогиСнизу = Ложь;
	ТЧОтчета.ОтображатьСетку = Ложь;
	ТЧОтчета.Защита = Ложь;
	ТЧОтчета.ТолькоПросмотр = Истина;
	
КонецФункции

Функция ВывестиШапку(ТЧОтчета, МассивНомеровВерсий, ЧислоВерсий)
	
	ОбластьШапка = ОбщийШаблон.ПолучитьОбласть("Шапка");
	ОбластьШапка.Параметры.НаименованиеОтчета = НСтр("ru = 'Отчет по изменениям версий объекта'");
	ОбластьШапка.Параметры.НаименованиеОбъекта = Строка(СсылкаНаОбъект);
	
	ТЧОтчета.Вывести(ОбластьШапка);
	
	ПустаяЯчейка = ОбщийШаблон.ПолучитьОбласть("ПустаяЯчейка");
	ОбластьВерсии = ОбщийШаблон.ПолучитьОбласть("ЗаголовокВерсии");
	ТЧОтчета.Присоединить(ПустаяЯчейка);
	ТЧОтчета.Присоединить(ОбластьВерсии);
	ОбластьВерсии = ОбщийШаблон.ПолучитьОбласть("ПредставлениеВерсии");
	
	КомментарииКВерсиям = Новый Структура;
	ЕстьКомментарии = Ложь;
	
	ИндексПоВерсиям = ЧислоВерсий;
	Пока ИндексПоВерсиям > 0 Цикл
		
		СведенияОВерсии = ПолучитьОписаниеПоВерсии(МассивНомеровВерсий[ИндексПоВерсиям-1]);
		ОбластьВерсии.Параметры.ПредставлениеВерсии = СведенияОВерсии.Описание;
		
		КомментарииКВерсиям.Вставить("Комментарий" + ИндексПоВерсиям, СведенияОВерсии.Комментарий);
		Если Не ПустаяСтрока(СведенияОВерсии.Комментарий) Тогда
			ЕстьКомментарии = Истина;
		КонецЕсли;
		
		ТЧОтчета.Присоединить(ОбластьВерсии);
		ТЧОтчета.Область("C"+Строка(ИндексПоВерсиям+2)).ШиринаКолонки = 50;
		ИндексПоВерсиям = ИндексПоВерсиям - 1;
		
	КонецЦикла;
	
	Если ЕстьКомментарии Тогда
		
		ОбластьКомментарий = ОбщийШаблон.ПолучитьОбласть("ЗаголовокКомментарий");
		ТЧОтчета.Вывести(ПустаяЯчейка);
		ТЧОтчета.Присоединить(ОбластьКомментарий);
		ОбластьКомментарий = ОбщийШаблон.ПолучитьОбласть("Комментарий");
		
		ИндексПоВерсиям = ЧислоВерсий;
		Пока ИндексПоВерсиям > 0 Цикл
			
			ОбластьКомментарий.Параметры.Комментарий = КомментарииКВерсиям["Комментарий" + ИндексПоВерсиям];
			ТЧОтчета.Присоединить(ОбластьКомментарий);
			ИндексПоВерсиям = ИндексПоВерсиям - 1;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ОбластьСвободнаяСтрока = ОбщийШаблон.ПолучитьОбласть("СвободнаяСтрока");
	ТЧОтчета.Вывести(ОбластьСвободнаяСтрока);
	
КонецФункции

// Движок отчета. Заполняет отчет по номеру переданной версии.
// Выполняется сравнение между версиями переданной в качестве параметра РезультатРазбораВерсии_0
// и заданной по НомерВерсии
// Последовательность выполнения:
// 1. Получение результата разбора версий сравниваемых объектов
// 2. Формирование списка реквизитов и табличных частей, которые были
//    - изменены
//    - добавлены
//    - удалены
//
Функция РассчитатьИзменения(НомерВерсии,
                           РезультатРазбораВерсии_0,
                           РезультатРазбораВерсии_1)
	
	ЭтоДокумент = Ложь;
	
	Если Метаданные.Документы.Содержит(СсылкаНаОбъект.Метаданные()) Тогда
		ЭтоДокумент = Истина;
	КонецЕсли;
	
	// Выполняем разбор предпоследней версии
	Реквизиты_0      = РезультатРазбораВерсии_0.Реквизиты;
	ТабличныеЧасти_0 = РезультатРазбораВерсии_0.ТабличныеЧасти;
	
	// Выполняем разбор последней версии
	РезультатРазбораВерсии_1 = РазборВерсии(НомерВерсии, СсылкаНаОбъект);
	ДобавитьНомераСтрокВТабличныеЧасти(РезультатРазбораВерсии_1.ТабличныеЧасти);
	
	Реквизиты_1      = РезультатРазбораВерсии_1.Реквизиты;
	ТабличныеЧасти_1 = РезультатРазбораВерсии_1.ТабличныеЧасти;
	
	///////////////////////////////////////////////////////////////////////////////
	//           Формируем список табличных частей, которые изменились           //
	///////////////////////////////////////////////////////////////////////////////
	СписокТабличныхЧастей_0	= СоздатьТаблицуСравнения();
	Для Каждого Элемент Из ТабличныеЧасти_0 Цикл
		НоваяСтрока = СписокТабличныхЧастей_0.Добавить();
		НоваяСтрока.Установить(0, СокрЛП(Элемент.Ключ));
	КонецЦикла;
	
	СписокТабличныхЧастей_1	= СоздатьТаблицуСравнения();
	Для Каждого Элемент Из ТабличныеЧасти_1 Цикл
		НоваяСтрока = СписокТабличныхЧастей_1.Добавить();
		НоваяСтрока.Установить(0, СокрЛП(Элемент.Ключ));
	КонецЦикла;
	
	// возможно была изменена структура метаданных - добавились или были удалены реквизиты
	СписокДобавленныхТЧ = ВычестьТаблицу(СписокТабличныхЧастей_1, СписокТабличныхЧастей_0);
	СписокУдаленныхТЧ  = ВычестьТаблицу(СписокТабличныхЧастей_0, СписокТабличныхЧастей_1);
	
	// список не изменившихся реквизитов, по которым будем искать совпадения / расхождения
	СписокОставшихсяТЧ = ВычестьТаблицу(СписокТабличныхЧастей_1, СписокДобавленныхТЧ);
	
	// список реквизитов, которые были изменены
	СписокИзменившихсяТЧ = НайтиИзменившиесяТабличныеЧасти(СписокОставшихсяТЧ,
	                                                       ТабличныеЧасти_0,
	                                                       ТабличныеЧасти_1);
	
	///////////////////////////////////////////////////////////////////////////////
	//           Формируем список реквизитов, которые изменились                 //
	///////////////////////////////////////////////////////////////////////////////
	СписокРеквизитов0 = СоздатьТаблицуСравнения();
	Для Каждого Реквизит Из РезультатРазбораВерсии_0.Реквизиты Цикл
		НоваяСтрока = СписокРеквизитов0.Добавить();		
		НоваяСтрока.Установить(0, СокрЛП(Строка(Реквизит.НаименованиеРеквизита)));
	КонецЦикла;
	
	СписокРеквизитов1 = СоздатьТаблицуСравнения();
	Для Каждого Реквизит Из РезультатРазбораВерсии_1.Реквизиты Цикл
		НоваяСтрока = СписокРеквизитов1.Добавить();
		НоваяСтрока.Установить(0, СокрЛП(Строка(Реквизит.НаименованиеРеквизита)));
	КонецЦикла;
	
	// возможно была изменена структура метаданных - добавились или были удалены реквизиты
	СписокДобавленныхРеквизитов = ВычестьТаблицу(СписокРеквизитов1, СписокРеквизитов0);
	СписокУдаленныхРеквизитов  = ВычестьТаблицу(СписокРеквизитов0, СписокРеквизитов1);
	
	// список не изменившихся реквизитов, по которым будем искать совпадения / расхождения
	СписокОставшихсяРеквизитов = ВычестьТаблицу(СписокРеквизитов1, СписокДобавленныхРеквизитов);
	
	// список реквизитов, которые были изменены
	СписокИзменившихсяРеквизитов = СоздатьТаблицуСравнения();
	
	ИзмененияВРеквизитах = Новый Соответствие;
	ИзмененияВРеквизитах.Вставить("д", СписокДобавленныхРеквизитов);
	ИзмененияВРеквизитах.Вставить("у", СписокУдаленныхРеквизитов);
	ИзмененияВРеквизитах.Вставить("и", СписокИзменившихсяРеквизитов);
	
	Для Каждого СтрокаТаблицыЗначений Из СписокОставшихсяРеквизитов Цикл
		
		Реквизит = СтрокаТаблицыЗначений.Значение;
		Зн_0 = Реквизиты_0.Найти(Реквизит, "НаименованиеРеквизита").ЗначениеРеквизита;
		Зн_1 = Реквизиты_1.Найти(Реквизит, "НаименованиеРеквизита").ЗначениеРеквизита;
		
		Если ТипЗнч(Зн_0) <> Тип("ХранилищеЗначения")
			И ТипЗнч(Зн_1) <> Тип("ХранилищеЗначения") Тогда
			Если Зн_0 <> Зн_1 Тогда
				НоваяСтрока = СписокИзменившихсяРеквизитов.Добавить();
				НоваяСтрока.Установить(0, Реквизит);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ИзмененияВТаблицах = РассчитатьИзмененияТабличныхЧастей(
	                              СписокИзменившихсяТЧ,
	                              ТабличныеЧасти_0,
	                              ТабличныеЧасти_1);
	
	МодификацииТабличныхЧастей = Новый Структура;
	МодификацииТабличныхЧастей.Вставить("д", СписокДобавленныхТЧ);
	МодификацииТабличныхЧастей.Вставить("у", СписокУдаленныхТЧ);
	МодификацииТабличныхЧастей.Вставить("и", ИзмененияВТаблицах);
	
	КомпоновкаИзменений = Новый Соответствие;
	КомпоновкаИзменений.Вставить("Реквизиты",      ИзмененияВРеквизитах);
	КомпоновкаИзменений.Вставить("ТабличныеЧасти", МодификацииТабличныхЧастей);
	
	Возврат КомпоновкаИзменений;
	
КонецФункции

// Функция добавляет колонки, соответственно количеству версий объекта
// Колонки имеют называния в виде "Вер<Номер>", где <Номер> принимает
// значения от 1 до количества сохраненных версий объекта. Нумерация
// является условной, т.е. например название "Вер1" может не соответствовать
// сохраненной версии объекта с версией 0.
//
Процедура ПодготовитьКолонкиТаблицИзмененийРеквизитов(ТаблицаЗначений,
                                                      МассивНомеровВерсий)
	
	ТаблицаЗначений = Новый ТаблицаЗначений;
	
	ТаблицаЗначений.Колонки.Добавить("Наименование");
	ТаблицаЗначений.Колонки.Добавить("Версионирование_Модификация");
	ТаблицаЗначений.Колонки.Добавить("Версионирование_ТипЗначения"); // предполагаемый тип значения
	
	Для Индекс = 1 По МассивНомеровВерсий.Количество() Цикл
		ТаблицаЗначений.Колонки.Добавить("Вер" + Формат(МассивНомеровВерсий[Индекс-1], "ЧГ=0"));
	КонецЦикла;
	
КонецПроцедуры

Функция РассчитатьИзмененияТабличныхЧастей(СписокИзменившихсяТЧ,
                                          ТабличныеЧасти_0,
                                          ТабличныеЧасти_1)
	
	ИзмененияВТаблицах = Новый Соответствие;
	
	// цикл по количеству табличных частей
	Для Индекс = 1 По СписокИзменившихсяТЧ.Количество() Цикл
		
		ИзмененияВТаблицах.Вставить(СписокИзменившихсяТЧ[Индекс-1].Значение, Новый Соответствие);
		
		ТаблицаДляАнализа = СписокИзменившихсяТЧ[Индекс-1].Значение;
		ТЧ0 = ТабличныеЧасти_0[ТаблицаДляАнализа];
		ТЧ1 = ТабличныеЧасти_1[ТаблицаДляАнализа];
		
		ТаблицаИзмененныхСтрок = Новый ТаблицаЗначений;
		ТаблицаИзмененныхСтрок.Колонки.Добавить("ИндексВТЧ0");
		ТаблицаИзмененныхСтрок.Колонки.Добавить("ИндексВТЧ1");
		
		СоответствиеСтрокТЧ0СтрокамТЧ1 = НайтиПохожиеСтрокиТаблиц(ТЧ0, ТЧ1);
		СоответствиеСтрокТЧ1СтрокамТЧ0 = Новый Соответствие;
		ПроверяемыеКолонки = НайтиОбщиеКолонки(ТЧ0, ТЧ1);
		Для Каждого Соответствие Из СоответствиеСтрокТЧ0СтрокамТЧ1 Цикл
			СтрокаТаблицы0 = Соответствие.Ключ;
			СтрокаТаблицы1 = Соответствие.Значение;
			Если СтрокиИмеютРазличия(СтрокаТаблицы0, СтрокаТаблицы1, ПроверяемыеКолонки) Тогда
					НоваяСтрока = ТаблицаИзмененныхСтрок.Добавить();
					НоваяСтрока["ИндексВТЧ0"] = ИндексСтроки(СтрокаТаблицы0) + 1;
					НоваяСтрока["ИндексВТЧ1"] = ИндексСтроки(СтрокаТаблицы1) + 1;
			КонецЕсли;
			СоответствиеСтрокТЧ1СтрокамТЧ0.Вставить(СтрокаТаблицы1, СтрокаТаблицы0);
		КонецЦикла;
		
		ТаблицаДобавленныхСтрок = Новый ТаблицаЗначений;
		ТаблицаДобавленныхСтрок.Колонки.Добавить("ИндексВТЧ1");
		
		Для Каждого СтрокаТаблицы Из ТЧ1 Цикл
			Если СоответствиеСтрокТЧ1СтрокамТЧ0[СтрокаТаблицы] = Неопределено Тогда
				НоваяСтрока = ТаблицаДобавленныхСтрок.Добавить();
				НоваяСтрока.ИндексВТЧ1 = ТЧ1.Индекс(СтрокаТаблицы) + 1;
			КонецЕсли;
		КонецЦикла;
		
		ТаблицаУдаленныхСтрок = Новый ТаблицаЗначений;
		ТаблицаУдаленныхСтрок.Колонки.Добавить("ИндексВТЧ0");
		
		Для Каждого СтрокаТаблицы Из ТЧ0 Цикл
			Если СоответствиеСтрокТЧ0СтрокамТЧ1[СтрокаТаблицы] = Неопределено Тогда
				НоваяСтрока = ТаблицаУдаленныхСтрок.Добавить();
				НоваяСтрока.ИндексВТЧ0 = ТЧ0.Индекс(СтрокаТаблицы) + 1;
			КонецЕсли;
		КонецЦикла;
		
		ИзмененияВТаблицах[СписокИзменившихсяТЧ[Индекс-1].Значение].Вставить("Д", ТаблицаДобавленныхСтрок);
		ИзмененияВТаблицах[СписокИзменившихсяТЧ[Индекс-1].Значение].Вставить("У", ТаблицаУдаленныхСтрок);
		ИзмененияВТаблицах[СписокИзменившихсяТЧ[Индекс-1].Значение].Вставить("И", ТаблицаИзмененныхСтрок);
		
	КонецЦикла;
	
	Возврат ИзмененияВТаблицах;
	
КонецФункции

// Сравнивает две табличные части, список которых передается в первом параметре
// и пытается найти расхождения в них (не совпадающие элементы). Если таковые
// таблицы есть, то формируется список таких табличных частей.
//
Функция НайтиИзменившиесяТабличныеЧасти(СписокОставшихсяТЧ,
                                        ТабличныеЧасти_0,
                                        ТабличныеЧасти_1)
	
	СписокИзменившихсяТЧ = СоздатьТаблицуСравнения();
	
	// Поиск Табличных частей, в которых изменились строки
	Для Каждого Элемент Из СписокОставшихсяТЧ Цикл
		
		ТЧ_0 = ТабличныеЧасти_0[Элемент.Значение];
		ТЧ_1 = ТабличныеЧасти_1[Элемент.Значение];
		
		Если ТЧ_0.Количество() = ТЧ_1.Количество() Тогда
			
			НайденоОтличие = Ложь;
			
			// проверяем, что структура колонок осталась прежней (эквивалентна)
			Если ТЧЭквиваленты (ТЧ_0.Колонки, ТЧ_1.Колонки) Тогда
				
				// ищем различающиеся элементы - строки
				Для Индекс = 0 По ТЧ_0.Количество() - 1 Цикл
					Строка_0 = ТЧ_0[Индекс];
					Строка_1 = ТЧ_1[Индекс];
					
					Если НЕ СтрокиТЧРавны(Строка_0, Строка_1, ТЧ_0.Колонки) Тогда
						НайденоОтличие = Истина;
						Прервать;
					КонецЕсли
				КонецЦикла;
				
			Иначе
				НайденоОтличие = Истина;
			КонецЕсли;
			
			Если НайденоОтличие Тогда
				НоваяСтрока = СписокИзменившихсяТЧ.Добавить();
				НоваяСтрока.Установить(0, Элемент.Значение);
			КонецЕсли;
			
		Иначе
			НоваяСтрока = СписокИзменившихсяТЧ.Добавить();
			НоваяСтрока.Установить(0, Элемент.Значение);
		КонецЕсли;
			
	КонецЦикла;
	
	Возврат СписокИзменившихсяТЧ;
	
КонецФункции

// Функция по номеру версии объекта и ссылке на него получает объект из
// регистра сведений, записывает его на диск и вызывает функцию разбора
// XML представления объекта.
// Параметры:
// НомерВерсии   - число - номер версии документа в регистре сведений
// Ссылка        - СправочникСсылка/ДокументСсылка - ссылка на экземпляр 
//                 объекта метаданных
// Возвращаемое значение:
// Структура:
//
Функция РазборВерсии(НомерВерсии, Ссылка)
	
	СведенияОВерсии = ВерсионированиеОбъектов.СведенияОВерсииОбъекта(Ссылка, НомерВерсии);
	
	Результат = РазборПредставленияОбъектаXML(СведенияОВерсии.ВерсияОбъекта, Ссылка);
	Результат.Вставить("ИмяОбъекта",     Строка(Ссылка));
	Результат.Вставить("АвторИзменения", СокрЛП(Строка(СведенияОВерсии.АвторВерсии)));
	Результат.Вставить("ДатаИзменения",  СведенияОВерсии.ДатаВерсии);
	Результат.Вставить("Комментарий",    СведенияОВерсии.Комментарий);
	
	Возврат Результат;
	
КонецФункции

// Функция считывает начальные значения реквизитов и табличных частей документа
// формат формируемой структуры данных для реквизитов:
// ТаблицаРеквизитов - ТаблицаЗначений
// Колонки 
// |-Вер<младший номер версии>
// |-...
// |-Вер<старший номер версии>
// |-Версионирование_Модификация (Булево)
// |-Наименование
//
// Строки содержат список реквизитов и их изменения во времени, в колонке Версионирование_Модификация
// содержится признак модифицированности строки:
// ложь - строка не была изменена
// "д"  - строка была добавлена
// "у"  - строка была удалена
// "и"  - строка была изменена
//
// Формат формируемой структуры данных для таблиц значений:
// ТаблицаТЧ - Соответствие
// |- <Имя табличной части1> - Соответствие
//    |-Вер<младший номер версии> - ТаблицаЗначений
//       Колонки
//       |- Базовые колонки соответствующей таблицы части объекта
//       |- Версионирование_ИдСтроки     - уникальный, в пределах таблицы, идентификатор данной строки
//       |- Версионирование_Модификация  - признак модифицированности строки
//           принимает следующие значения:
//           ложь - строка не была изменена
//           "д"  - строка была добавлена
//           "у"  - строка была удалена
//           "и"  - строка была изменена
//    |-...
//    |-Вер<старший номер версии>
// |-...
// |- <Имя табличной частиN>
//
Функция СчитатьНачальныеЗначенияРеквизитовИТабличныхЧастей(ТаблицаРеквизитов,
                                                           ТаблицаТЧ,
                                                           КоличествоВерсий,
                                                           МассивНомеровВерсий)
	
	МладшаяВерсияОбъекта = МассивНомеровВерсий[0];
	
	// Выполняем разбор первой версии
	ВерсияОбъекта  = РазборВерсии(МладшаяВерсияОбъекта, СсылкаНаОбъект);
	ДобавитьНомераСтрокВТабличныеЧасти(ВерсияОбъекта.ТабличныеЧасти);
	
	Реквизиты      = ВерсияОбъекта.Реквизиты;
	ТабличныеЧасти = ВерсияОбъекта.ТабличныеЧасти;
	
	Колонка = "Вер" + Формат(МассивНомеровВерсий[0], "ЧГ=0");
	
	Для Каждого СтрокаТаблицыЗначений Из Реквизиты Цикл
		
		НоваяСтрока = ТаблицаРеквизитов.Добавить();
		НоваяСтрока[Колонка] = Новый Структура("ТипИзменения, Значение", "И", СтрокаТаблицыЗначений);
		НоваяСтрока.Наименование = СтрокаТаблицыЗначений.НаименованиеРеквизита;
		НоваяСтрока.Версионирование_Модификация = Ложь;
		НоваяСтрока.Версионирование_ТипЗначения = СтрокаТаблицыЗначений.ТипРеквизита;
		
	КонецЦикла;
	
	Для Каждого ЭлементТЧ Из ТабличныеЧасти Цикл
		
		ТаблицаТЧ.Вставить(ЭлементТЧ.Ключ, Новый Соответствие);
		ПодготовитьКолонкиТаблицИзмененийДляСоответствия(ТаблицаТЧ[ЭлементТЧ.Ключ], МассивНомеровВерсий);
		ТаблицаТЧ[ЭлементТЧ.Ключ]["Вер" + Формат(МладшаяВерсияОбъекта, "ЧГ=0")] = ЭлементТЧ.Значение.Скопировать();
		
		ТекущаяТЗ = ТаблицаТЧ[ЭлементТЧ.Ключ]["Вер" + Формат(МладшаяВерсияОбъекта, "ЧГ=0")];
		
		// спец идентификатор строки что бы различать строки
		// значение является уникальным в пределах данной таблицы значений
		
		ТекущаяТЗ.Колонки.Добавить("Версионирование_ИдСтроки");
		ТекущаяТЗ.Колонки.Добавить("Версионирование_Модификация");
		
		Для Индекс = 1 По ТекущаяТЗ.Количество() Цикл
			ТекущаяТЗ[Индекс-1].Версионирование_ИдСтроки = Индекс;
			ТекущаяТЗ[Индекс-1].Версионирование_Модификация = Ложь;
		КонецЦикла;
	
	КонецЦикла;
	
	Возврат ВерсияОбъекта;
	
КонецФункции

// Процедура считывает данные XML из файла и заполняет структуры данных
//
// Возвращаемое значение:
// Структура, содержащая два соответствия: ТабличныеЧасти, Реквизиты
// Структура хранения данных:
// Соответствие ТабличныеЧасти, которое содержит в себе значения табличных частей
// формат: 
//          СоответствиеИмя1 -> ТаблицаЗначений1
//                            |      |     ... |
//                            Поле1  Поле2     ПолеM1
//
//          СоответствиеИмя2 -> ТаблицаЗначений2
//                            |      |     ... |
//                            Поле1  Поле2     ПолеM2
//
//
//          СоответствиеИмяN -> ТаблицаЗначенийN
//                            |      |     ... |
//                            Поле1  Поле2     ПолеM3
//
// Соответствие ЗначенияРеквизитов
//          ИмяРеквизита1 -> Значение1
//          ИмяРеквизита2 -> Значение2
//          ...
//          ИмяРеквизитаN -> ЗначениеN
//
Функция РазборПредставленияОбъектаXML(ДвоичныеДанные, Ссылка)
	
	// содержит имя метаданного измененного объекта
	Перем ИмяОбъекта;
	
	// Содержит положение маркера в дереве XML.
	// Требуется для идентификации текущего элемента.
	Перем УровеньЧтения;
	
	// Содержат значения реквизитов справочников / документов
	ЗначенияРеквизитов = Новый ТаблицаЗначений;
	
	ЗначенияРеквизитов.Колонки.Добавить("НаименованиеРеквизита");
	ЗначенияРеквизитов.Колонки.Добавить("ЗначениеРеквизита");
	ЗначенияРеквизитов.Колонки.Добавить("ТипРеквизита");
	ЗначенияРеквизитов.Колонки.Добавить("Тип");
	
	ТабличныеЧасти = Новый Соответствие;
	
	ЧтениеXML = Новый ЧтениеFastInfoSet;
	
	ЧтениеXML.УстановитьДвоичныеДанные(ДвоичныеДанные);
	
	// уровень позиции маркера в иерархии XML:
	// 0 - уровень не задан
	// 1 - первый элемент (имя объекта)
	// 2 - описание реквизита или табличной части
	// 3 - описание строки табличной части
	// 4 - описание поля строки табличной части
	УровеньЧтения = 0;
	
	МетаданныеОбъекта = Ссылка.Метаданные();
	ТабличныеЧастиМТД = МетаданныеОбъекта.ТабличныеЧасти;
	
	ТипЗначения = "";
	
	ТипЗначенияПоляТЧ = "";
	
	// основной цикл разбора по XML
	Пока ЧтениеXML.Прочитать() Цикл
		
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			УровеньЧтения = УровеньЧтения + 1;
			Если УровеньЧтения = 1 Тогда // указатель на первом элементе XML - корень XML
				ИмяОбъекта = ЧтениеXML.Имя;
			ИначеЕсли УровеньЧтения = 2 Тогда // указатель на втором уровне - это реквизит или имя табличной части
				ИмяРеквизита = ЧтениеXML.Имя;
				
				// любой реквизит "может оказаться" табличной частью, поэтому на всякий случай его запомним.
				ИмяТабличнойЧасти = ИмяРеквизита;
				Если МетаданныеОбъекта.ТабличныеЧасти.Найти(ИмяТабличнойЧасти) <> Неопределено И ТабличныеЧасти[ИмяТабличнойЧасти] = Неопределено Тогда
					ТабличныеЧасти.Вставить(ИмяТабличнойЧасти, Новый ТаблицаЗначений);
				КонецЕсли;
				
				НовоеЗР = ЗначенияРеквизитов.Добавить();
				НовоеЗР.НаименованиеРеквизита = ИмяРеквизита;
				
				Если ЧтениеXML.КоличествоАтрибутов() > 0 Тогда
					Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
						Если ЧтениеXML.ТипУзла = ТипУзлаXML.Атрибут 
						   И ЧтениеXML.Имя = "xsi:type" Тогда
							НовоеЗР.ТипРеквизита = ЧтениеXML.Значение;
							
							XMLТип = ЧтениеXML.Значение;
							
							Если Лев(XMLТип, 3) = "xs:" Тогда
								НовоеЗР.Тип = ИзXMLТипа(Новый ТипДанныхXML(Прав(XMLТип, СтрДлина(XMLТип)-3), "http://www.w3.org/2001/XMLSchema"));
							Иначе
								НовоеЗР.Тип = ИзXMLТипа(Новый ТипДанныхXML(XMLТип, ""));
							КонецЕсли;
							
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(НовоеЗР.Тип) Тогда
					
					ОписаниеРеквизита = МетаданныеОбъекта.Реквизиты.Найти(НовоеЗР.НаименованиеРеквизита);
					
					Если ОписаниеРеквизита = Неопределено Тогда
						
						НаименованиеРеквизита = ПолучитьПредставлениеРеквизитаНаЯзыке(НовоеЗР.НаименованиеРеквизита);
						
						Если ОбщегоНазначения.ЭтоСтандартныйРеквизит(МетаданныеОбъекта.СтандартныеРеквизиты, НаименованиеРеквизита) Тогда
							
							ОписаниеРеквизита = МетаданныеОбъекта.СтандартныеРеквизиты[НаименованиеРеквизита];
							
						КонецЕсли;
						
					КонецЕсли;
					
					Если ОписаниеРеквизита <> Неопределено
						И ОписаниеРеквизита.Тип.Типы().Количество() = 1 Тогда
						НовоеЗР.Тип = ОписаниеРеквизита.Тип.Типы()[0];
					КонецЕсли;
					
				КонецЕсли;
				
			ИначеЕсли (УровеньЧтения = 3) и (ЧтениеXML.Имя = "Row") Тогда // указатель на поле табличной части
				Если ТабличныеЧасти[ИмяТабличнойЧасти] = Неопределено Тогда
					ТабличныеЧасти.Вставить(ИмяТабличнойЧасти, Новый ТаблицаЗначений);
				КонецЕсли;
				
				ТабличныеЧасти[ИмяТабличнойЧасти].Добавить();
			ИначеЕсли УровеньЧтения = 4 Тогда // указатель на поле табличной части
				
				ТипЗначенияПоляТЧ = "";
				
				ИмяПоляТЧ = ЧтениеXML.Имя; // 
				Таблица   = ТабличныеЧасти[ИмяТабличнойЧасти];
				Если Таблица.Колонки.Найти(ИмяПоляТЧ)= Неопределено Тогда
					Таблица.Колонки.Добавить(ИмяПоляТЧ);
				КонецЕсли;
				
				Если ЧтениеXML.КоличествоАтрибутов() > 0 Тогда
					Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
						Если ЧтениеXML.ТипУзла = ТипУзлаXML.Атрибут 
						   И ЧтениеXML.Имя = "xsi:type" Тогда
							XMLТип = ЧтениеXML.Значение;
							
							Если Лев(XMLТип, 3) = "xs:" Тогда
								ТипЗначенияПоляТЧ = ИзXMLТипа(Новый ТипДанныхXML(Прав(XMLТип, СтрДлина(XMLТип)-3), "http://www.w3.org/2001/XMLSchema"));
							Иначе
								ТипЗначенияПоляТЧ = ИзXMLТипа(Новый ТипДанныхXML(XMLТип, ""));
							КонецЕсли;
							
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
			КонецЕсли;
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			УровеньЧтения = УровеньЧтения - 1;
			ТипЗначения = "";
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
			Если (УровеньЧтения = 2) Тогда // значение реквизита
				
				НовоеЗР.ЗначениеРеквизита = ?(ЗначениеЗаполнено(НовоеЗР.Тип), XMLЗначение(НовоеЗР.Тип, ЧтениеXML.Значение), ЧтениеXML.Значение);
				
			ИначеЕсли (УровеньЧтения = 4) Тогда // значение реквизита
				ПоследняяСтрока = ТабличныеЧасти[ИмяТабличнойЧасти].Получить(ТабличныеЧасти[ИмяТабличнойЧасти].Количество()-1);
				
				Если ТипЗначенияПоляТЧ = "" Тогда
					ОписаниеРТЧ = Неопределено;
					Если ТабличныеЧастиМТД.Найти(ИмяТабличнойЧасти) <> Неопределено Тогда
						ОписаниеРТЧ = ТабличныеЧастиМТД[ИмяТабличнойЧасти].Реквизиты.Найти(ИмяПоляТЧ);
						
						Если ОписаниеРТЧ <> Неопределено
						   И ОписаниеРТЧ.Тип.Типы().Количество() = 1 Тогда
							ТипЗначенияПоляТЧ = ОписаниеРТЧ.Тип.Типы()[0];
						КонецЕсли;
					КонецЕсли;					
				КонецЕсли;
				
				ПоследняяСтрока[ИмяПоляТЧ] = ?(ЗначениеЗаполнено(ТипЗначенияПоляТЧ), XMLЗначение(ТипЗначенияПоляТЧ, ЧтениеXML.Значение), ЧтениеXML.Значение);
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// 2-й этап: из списка реквизитов исключаем табличные части
	Для Каждого Элемент Из ТабличныеЧасти Цикл
		ЗначенияРеквизитов.Удалить(ЗначенияРеквизитов.Найти(Элемент.Ключ));
	КонецЦикла;
	//ТабличныеЧастиМТД
	Для Каждого ЭлементСоответствия Из ТабличныеЧасти Цикл
		Таблица = ЭлементСоответствия.Значение;
		Если Таблица.Колонки.Количество() = 0 Тогда
			ТаблицаМТД = ТабличныеЧастиМТД.Найти(ЭлементСоответствия.Ключ);
			Если ТаблицаМТД <> Неопределено Тогда
				Для Каждого ОписаниеКолонки Из ТаблицаМТД.Реквизиты Цикл
					Если Таблица.Колонки.Найти(ОписаниеКолонки.Имя)= Неопределено Тогда
						Таблица.Колонки.Добавить(ОписаниеКолонки.Имя);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("Реквизиты", ЗначенияРеквизитов);
	Результат.Вставить("ТабличныеЧасти", ТабличныеЧасти);
	
	Возврат Результат;
	
КонецФункции

Процедура ПодготовитьКолонкиТаблицИзмененийДляСоответствия(Соответствие, МассивНомеровВерсий)
	
	Количество = МассивНомеровВерсий.Количество();
	
	Для Индекс = 1 По Количество Цикл
		Соответствие.Вставить("Вер" + Формат(МассивНомеровВерсий[Индекс-1], "ЧГ=0"), Новый ТаблицаЗначений);
	КонецЦикла;
	
КонецПроцедуры

// Возвращает Истина или Ложь в зависимости от того, эквивалентны табличные
// части или нет. ТЧ считаются эквивалентными, если количество, наименование
// и тип их полей одинаков. Изменение порядка следования колонок не считается
// изменением табличной части.
//
Функция ТЧЭквиваленты(КолонкиПервойТаблицы, КолонкиВторойТаблицы)
	Если КолонкиПервойТаблицы.Количество() <> КолонкиВторойТаблицы.Количество() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого Колонка Из КолонкиПервойТаблицы Цикл
		Найденная = КолонкиВторойТаблицы.Найти(Колонка.Имя);
		Если Найденная = Неопределено Или Колонка.ТипЗначения <> Найденная.ТипЗначения Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
КонецФункции

// Функция сравнивает значения двух строк (по значению) и возвращает 
// Истина, в случае если строки равны, иначе возвращает Ложь
// Предполагается что структура метаданных табличных частей  эквивалентна.
//
Функция СтрокиТЧРавны(СтрокаТЧ1, СтрокаТЧ2, Колонки)
	
	Для Каждого Колонка Из Колонки Цикл
		ИмяКолонки = Колонка.Имя;
		Если СтрокаТЧ2.Владелец().Колонки.Найти(ИмяКолонки) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		ЗначениеИзТЧ1 = СтрокаТЧ1[ИмяКолонки];
		ЗначениеИзТЧ2 = СтрокаТЧ2[ИмяКолонки];
		Если ЗначениеИзТЧ1 <> ЗначениеИзТЧ2 Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Получает представление наименования системного реквизита
//
Функция ПолучитьПредставлениеРеквизитаНаЯзыке(знач ИмяРеквизита)
	
	Если      ИмяРеквизита = "Number" Тогда
		Возврат НСтр("ru = 'Номер'; en='Number'");
	ИначеЕсли ИмяРеквизита = "Name" Тогда
		Возврат НСтр("ru = 'Наименование'; en='Name'");
	ИначеЕсли ИмяРеквизита = "Code" Тогда
		Возврат НСтр("ru = 'Код'; en='Code'");
	ИначеЕсли ИмяРеквизита = "IsFolder" Тогда
		Возврат НСтр("ru = 'ЭтоГруппа'; en='Is folder'");
	ИначеЕсли ИмяРеквизита = "Description" Тогда
		Возврат НСтр("ru = 'Наименование'; en='Description'");
	ИначеЕсли ИмяРеквизита = "Date" Тогда
		Возврат НСтр("ru = 'Дата'; en='Date'");
	ИначеЕсли ИмяРеквизита = "Posted" Тогда
		Возврат НСтр("ru = 'Проведен'; en='Posted'");
	ИначеЕсли ИмяРеквизита = "DeletionMark" Тогда
		Возврат НСтр("ru = 'ПометкаУдаления'; en='Deletion mark'");
	ИначеЕсли ИмяРеквизита = "Ref" Тогда
		Возврат НСтр("ru = 'Ссылка'; en='Ref'");
	ИначеЕсли ИмяРеквизита = "Parent" Тогда
		Возврат НСтр("ru = 'Родитель'; en='Parent'");
	ИначеЕсли ИмяРеквизита = "Owner" Тогда
		Возврат НСтр("ru = 'Владелец'; en='Owner'");
	Иначе
		Возврат ИмяРеквизита;
	КонецЕсли;
	
КонецФункции

// Используется для вывода текста в область табличного документа
// с условным оформлением
//
Процедура УстановитьСвойстваТекста(ОбластьСекции, Текст,
                                   знач ЦветТекста = Неопределено,
                                   знач ЦветФона = Неопределено,
                                   знач Размер = 9,
                                   знач Жирный = Ложь,
                                   знач ПоказыватьГраницы = Ложь)
	
	ОбластьСекции.Текст = Текст;
	
	Если ЦветТекста <> Неопределено Тогда
		ОбластьСекции.ЦветТекста = ЦветТекста;
	КонецЕсли;
	
	Если ЦветФона <> Неопределено Тогда
		ОбластьСекции.ЦветФона = ЦветФона;
	КонецЕсли;
	
	ОбластьСекции.Шрифт = Новый Шрифт(, Размер, Жирный, , , );
	
	Если ПоказыватьГраницы Тогда
		ОбластьСекции.ГраницаСверху = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
		ОбластьСекции.ГраницаСнизу  = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
		ОбластьСекции.ГраницаСлева  = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
		ОбластьСекции.ГраницаСправа = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
		ОбластьСекции.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
	КонецЕсли;
	
КонецПроцедуры

// Получает описание хранимой версии объекта в виде строки
//
Функция ПолучитьОписаниеПоВерсии(НомерВерсии)
	
	СведенияОВерсии = ВерсионированиеОбъектов.СведенияОВерсииОбъекта(СсылкаНаОбъект, НомерВерсии);
	Описание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = '№ %1 / (%2) / %3'"), 
		НомерВерсии, Строка(СведенияОВерсии.ДатаВерсии), СокрЛП(Строка(СведенияОВерсии.АвторВерсии)));
	СведенияОВерсии.Вставить("Описание", Описание);
	
	Возврат СведенияОВерсии;
	
КонецФункции

// Подсчитывает число изменившихся реквизитов в таблице изменившихся реквизитов
//
Функция РассчитатьЧислоИзменившихсяРеквизитов(ТаблицаИзмененийРеквизитов, МассивНомеровВерсий)
	
	Результат = 0;
	
	Для Каждого ЭлементТЗ Из ТаблицаИзмененийРеквизитов Цикл
		Если ЭлементТЗ.Версионирование_Модификация <> Неопределено И ЭлементТЗ.Версионирование_Модификация = Истина Тогда
			Результат = Результат + 1;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Увеличивает значение сквозного счетчика для таблицы
//
Функция УвеличитьСчетчик(счетчикУникальныйИд, ИмяТаблицы);
	
	счетчикУникальныйИд[ИмяТаблицы] = счетчикУникальныйИд[ИмяТаблицы] + 1;
	
	Возврат счетчикУникальныйИд[ИмяТаблицы];
	
КонецФункции

// Возвращает уникальный номер для идентификации строки из таблицы по версии
//
Функция ПолучитьУникальныеУникальныйИд(ТаблицаИзмененийТЧ, ИмяКолонкиВерсии)
	
	СоответствиеУникальныйИд = Новый Соответствие;
	
	Для Каждого ЭлементСоотв Из ТаблицаИзмененийТЧ Цикл
		СоответствиеУникальныйИд[ЭлементСоотв.Ключ] = Число(ЭлементСоотв.Значение[ИмяКолонкиВерсии].Количество());
	КонецЦикла;
	
	Возврат СоответствиеУникальныйИд;
	
КонецФункции

// Заполняет таблицу отчета по результатам сравнения на некотором шаге
//
// Параметры:
// ПометкаИзменения - строка - "д" - реквизит добавлен
//                             "у" - реквизит удален
//                             "и" - реквизит изменен
//
Процедура ЗаполнитьХарактеристикуИзмененияРеквизита(ТаблицаИзмененийРеквизита, 
                                                    ПометкаИзменения,
                                                    ТаблицаИзмененийРеквизитов,
                                                    ИмяКолонкиТекущейВерсии,
                                                    ВерсияОбъекта)
	
	Для Каждого Элемент Из ТаблицаИзмененийРеквизита Цикл
		Наименование = Элемент.Значение;
		ИзменениеРеквизита = ТаблицаИзмененийРеквизитов.Найти (Наименование, "Наименование");
		
		Если ИзменениеРеквизита = Неопределено Тогда
			ИзменениеРеквизита = ТаблицаИзмененийРеквизитов.Добавить();
			ИзменениеРеквизита.Наименование = Наименование;
		КонецЕсли;
		
		ПараметрыИзменения = Новый Структура;
		ПараметрыИзменения.Вставить("ТипИзменения", ПометкаИзменения);
		
		Если ПометкаИзменения = "у" Тогда
			ПараметрыИзменения.Вставить("Значение", "удалено");
		Иначе
			ПараметрыИзменения.Вставить("Значение", ВерсияОбъекта.Реквизиты.Найти(Наименование, "НаименованиеРеквизита"));
		КонецЕсли;
		
		ИзменениеРеквизита[ИмяКолонкиТекущейВерсии] = ПараметрыИзменения;
		ИзменениеРеквизита.Версионирование_Модификация = Истина;
	КонецЦикла;
	
КонецПроцедуры

// Выводит текст в область табличного документа с определенным оформлением
//
Функция ВывестиТекстВОтчет(ТЧОтчета,
                             знач Секция,
                             знач Регион,
                             знач Текст,
                             знач ЦветТекста = Неопределено,
                             знач ЦветФона   = Неопределено,
                             знач Размер     = 9,
                             знач Жирный     = Ложь)
	
	ОбластьСекции = Секция.Область(Регион);
	
	Если ЦветТекста <> Неопределено Тогда
		ОбластьСекции.ЦветТекста = ЦветТекста;
	КонецЕсли;
	
	Если ЦветФона <> Неопределено Тогда
		ОбластьСекции.ЦветФона = ЦветФона;
	КонецЕсли;
	
	ОбластьСекции.Текст      = Текст;
	ОбластьСекции.Шрифт      = Новый Шрифт(, Размер, Жирный, , , );
	ОбластьСекции.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
	
	ОбластьСекции.ГраницаСверху = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
	ОбластьСекции.ГраницаСнизу  = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
	ОбластьСекции.ГраницаСлева  = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
	ОбластьСекции.ГраницаСправа = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
	
	Возврат ТЧОтчета.Вывести(Секция);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Прочие служебные процедуры и функции

// Восстанавливает сериализованный в XML объект. 
// Параметры
// ИмяФайла - строка - путь к файлу, в котором хранится сериализованное 
//                     представление объекта
//
Функция ПолучитьОбъектИзXML(ДвоичныеДанные)
	
	ЧтениеXML = Новый ЧтениеFastInfoSet;
	ЧтениеXML.УстановитьДвоичныеДанные(ДвоичныеДанные);
	Если ЧтениеXML.Прочитать() Тогда
		Если ВозможностьЧтенияXML(ЧтениеXML) Тогда
			Объект = ПрочитатьXML(ЧтениеXML);
			ЧтениеXML.Закрыть();
			Возврат Объект;
		Иначе
			ЧтениеXML.Закрыть();
			ВызватьИсключение НСтр("ru = 'Ошибка при восстановлении объекта'");
		КонецЕсли;
	Иначе
		ЧтениеXML.Закрыть();
		ВызватьИсключение НСтр("ru = 'Ошибка чтения данных'");
	КонецЕсли;
	
КонецФункции

// ЗначениеЗаполнения - массив строк
// ТипВывода - строка :
//           "и" - изменение
//           "д" - добавление
//           "у" - удаление
//           ""  - обычный вывод
Функция СформироватьСекторСтрокиТЧ(знач ЗначениеЗаполнения,знач ТипВывода = "")
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Если      ТипВывода = ""  Тогда
		Шаблон = ОбщийШаблон.ПолучитьОбласть("ИсходноеЗначениеРеквизита");
	ИначеЕсли ТипВывода = "И" Тогда
		Шаблон = ОбщийШаблон.ПолучитьОбласть("ИзмененноеЗначениеРеквизита");
	ИначеЕсли ТипВывода = "Д" Тогда
		Шаблон = ОбщийШаблон.ПолучитьОбласть("ДобавленныйРеквизит");
	ИначеЕсли ТипВывода = "У" Тогда
		Шаблон = ОбщийШаблон.ПолучитьОбласть("УдаленныйРеквизит");
	КонецЕсли;
	
	Для Каждого ОчередноеЗначение Из ЗначениеЗаполнения Цикл
		Шаблон.Параметры.ЗначениеРеквизита = ОчередноеЗначение;
		ТабличныйДокумент.Вывести(Шаблон);
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Формирует пустой сектор для вывода в отчет. Используется,
// если строка не была изменена в одной из версий.
//
Функция СформироватьПустойСектор(знач ЧислоСтрок, знач ТипВывода = "")
	
	ЗначениеЗаполнения = Новый Массив;
	
	Для Индекс = 1 По ЧислоСтрок Цикл
		ЗначениеЗаполнения.Добавить(" ");
	КонецЦикла;
	
	Возврат СформироватьСекторСтрокиТЧ(ЗначениеЗаполнения, ТипВывода);
	
КонецФункции

// Функция возвращает результат вычитания элементов множества таблицы
// ТаблицаВычитаемая из ТаблицаОсновная.
//
Функция ВычестьТаблицу(знач ТаблицаОсновная,
                       знач ТаблицаВычитаемая,
                       знач КолонкаСравненияОсновнойТаблицы = "",
                       знач КолонкаСравненияВычитаемойТаблицы = "")
	
	Если Не ЗначениеЗаполнено(КолонкаСравненияОсновнойТаблицы) Тогда
		КолонкаСравненияОсновнойТаблицы = "Значение";
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(КолонкаСравненияВычитаемойТаблицы) Тогда
		КолонкаСравненияВычитаемойТаблицы = "Значение";
	КонецЕсли;
	
	ТаблицаРезультат = Новый ТаблицаЗначений;
	ТаблицаРезультат = ТаблицаОсновная.Скопировать();
	
	Для Каждого Элемент Из ТаблицаВычитаемая Цикл
		Значение = Элемент[КолонкаСравненияОсновнойТаблицы];
		НайденнаяСтрока = ТаблицаРезультат.Найти(Значение, КолонкаСравненияОсновнойТаблицы);
		Если НайденнаяСтрока <> Неопределено Тогда
			ТаблицаРезультат.Удалить(НайденнаяСтрока);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаРезультат;
	
КонецФункции

// Функция возвращает таблицу созданную на основе ТаблицаИнициализации.
// Если ТаблицаИнициализации не указана, то создается пустая таблица.
//
Функция СоздатьТаблицуСравнения(ТаблицаИнициализации = Неопределено,
                                ИмяКолонкиСравнения = "Значение")
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить(ИмяКолонкиСравнения);
	
	Если ТаблицаИнициализации <> Неопределено Тогда
		
		МассивЗначений = ТаблицаИнициализации.ВыгрузитьКолонку(ИмяКолонкиСравнения);
		
		Для Каждого Элемент Из ТаблицаИнициализации Цикл
			НоваяСтрока = Таблица.Добавить();
			НоваяСтрока.Установить(0, Элемент[ИмяКолонкиСравнения]);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Таблица;

КонецФункции

&НаСервере
Функция СортироватьПоВозрастанию(Знач Массив)
	СписокЗначений = Новый СписокЗначений;
	СписокЗначений.ЗагрузитьЗначения(Массив);
	СписокЗначений.СортироватьПоЗначению(НаправлениеСортировки.Возр);
	Возврат СписокЗначений.ВыгрузитьЗначения();
КонецФункции

&НаСервере
Функция ИндексСтроки(СтрокаТаблицы)
	Возврат СтрокаТаблицы.Владелец().Индекс(СтрокаТаблицы);
КонецФункции

&НаСервере
Процедура ДобавитьНомераСтрокВТабличныеЧасти(ТабличныеЧасти)
	
	Для Каждого Соответствие Из ТабличныеЧасти Цикл
		Таблица = Соответствие.Значение;
		Если Таблица.Колонки.Найти("НомерСтроки") <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Таблица.Колонки.Вставить(0, "НомерСтроки",,НСтр("ru = '№ строки'"));
		Для НомерСтроки = 1 По Таблица.Количество() Цикл
			Таблица[НомерСтроки-1].НомерСтроки = НомерСтроки;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Алгоритм сравнения таблиц

// Сравнивает строки произвольных таблиц по значениям, с учетом совпадений имен колонок. Возвращает соответствие строк
// Таблицы1 строкам Таблицы2. Строки, соответствие которым не найдено, не включаются в результат. Соответствие
// устанавливается между "похожими" строками, то есть строками, где есть по меньшей мере одно совпадение значений.
// При сравнении значений в строках значения-коллекции сравниваются по ссылкам (по элементам коллекций не сравниваются).
//
// Параметры:
//  Таблица1, Таблица2 - ТаблицаЗначений - сравниваемые таблицы.
//
// Служебные параметры:
//  ТребуемоеКоличествоРазличий - Число - количество различий, которое должно быть между строками (строго).
//  МаксимумРазличий - Число - ограничивает инкремент параметра ТребуемоеКоличествоРазличий при рекурсивном вызове.
//  СоответствиеСтрокТаблицы1СтрокамТаблицы2 - Соответствие - уже найденное соответствие строк.
//
// Возвращаемое значение:
//  Соответствие - соответствия строк, где ключи - строки Таблицы1, значения - строки Таблицы2.
//
// Использование:
//
//    СоответствиеСтрок = НайтиПохожиеСтрокиТаблиц(Таблица1, Таблица2);
//
// Примечание:
//  Служебные параметры используются при рекурсивном вызове, задавать при вызове функции их не рекомендуется.
//  Для поиска строк с точным количеством расхождений, следует использовать одинаковые значения для параметров
//  ТребуемоеКоличествоРазличий и МаксимумРазличий.
//  Например, если требуется найти 100% одинаковые строки, то вызов будет такой:
//
//    СоответствиеСтрок = НайтиПохожиеСтрокиТаблиц(Таблица1, Таблица2, 0, 0);
//
&НаСервере
Функция НайтиПохожиеСтрокиТаблиц(Таблица1, Таблица2, Знач ТребуемоеКоличествоРазличий = 0, Знач МаксимумРазличий = Неопределено, СоответствиеСтрокТаблицы1СтрокамТаблицы2 = Неопределено)
	
	Если СоответствиеСтрокТаблицы1СтрокамТаблицы2 = Неопределено Тогда
		СоответствиеСтрокТаблицы1СтрокамТаблицы2 = Новый Соответствие;
	КонецЕсли;
	
	Если МаксимумРазличий = Неопределено Тогда
		МаксимумРазличий = МаксимальноеКоличествоРазличийМеждуСтрокамиТаблиц(Таблица1, Таблица2);
	КонецЕсли;
	
	// вычисляем обратное соответствие для быстрого поиска по значению
	СоответствиеСтрокТаблицы2СтрокамТаблицы1 = Новый Соответствие; // ключи - строки таблицы2, значения = строки таблицы1
	Для Каждого Элемент Из СоответствиеСтрокТаблицы1СтрокамТаблицы2 Цикл
		СоответствиеСтрокТаблицы2СтрокамТаблицы1.Вставить(Элемент.Значение, Элемент.Ключ);
	КонецЦикла;
	
	// сравниваем строки каждую с каждой
	Для Каждого СтрокаТаблицы1 Из Таблица1 Цикл
		Для Каждого СтрокаТаблицы2 Из Таблица2 Цикл
			Если СоответствиеСтрокТаблицы1СтрокамТаблицы2[СтрокаТаблицы1] = Неопределено 
			   И СоответствиеСтрокТаблицы2СтрокамТаблицы1[СтрокаТаблицы2] = Неопределено Тогда // пропускаем найденные строки
			
				// считаем различия
				КоличествоРазличий = КоличествоРазличийВСтрокахТаблиц(СтрокаТаблицы1, СтрокаТаблицы2);
				
				// анализируем результат сравнения строк
				Если КоличествоРазличий = ТребуемоеКоличествоРазличий Тогда
					СоответствиеСтрокТаблицы1СтрокамТаблицы2.Вставить(СтрокаТаблицы1, СтрокаТаблицы2);
					СоответствиеСтрокТаблицы2СтрокамТаблицы1.Вставить(СтрокаТаблицы2, СтрокаТаблицы1);
					Прервать;
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если ТребуемоеКоличествоРазличий < МаксимумРазличий Тогда
		НайтиПохожиеСтрокиТаблиц(Таблица1, Таблица2, ТребуемоеКоличествоРазличий + 1, МаксимумРазличий, СоответствиеСтрокТаблицы1СтрокамТаблицы2);
	КонецЕсли;
	
	Возврат СоответствиеСтрокТаблицы1СтрокамТаблицы2;
	
КонецФункции

&НаСервере
Функция МаксимальноеКоличествоРазличийМеждуСтрокамиТаблиц(Таблица1, Таблица2)
	
	МассивИменКолонокТаблицы1 = ПолучитьИменаКолонок(Таблица1);
	МассивИменКолонокТаблицы2 = ПолучитьИменаКолонок(Таблица2);
	МассивИменКолонокОбеихТаблиц = ОбъединениеМножеств(МассивИменКолонокТаблицы1, МассивИменКолонокТаблицы2);
	ВсегоКолонок = МассивИменКолонокОбеихТаблиц.Количество();
	
	Возврат ?(ВсегоКолонок = 0, 0, ВсегоКолонок - 1);

КонецФункции

&НаСервере
Функция ОбъединениеМножеств(Множество1, Множество2)
	
	Результат = Новый Массив;
	
	Для Каждого Элемент Из Множество1 Цикл
		Индекс = Результат.Найти(Элемент);
		Если Индекс = Неопределено Тогда
			Результат.Добавить(Элемент);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Элемент Из Множество2 Цикл
		Индекс = Результат.Найти(Элемент);
		Если Индекс = Неопределено Тогда
			Результат.Добавить(Элемент);
		КонецЕсли;
	КонецЦикла;	
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПолучитьИменаКолонок(Таблица)
	
	Результат = Новый Массив;
	
	Для Каждого Колонка Из Таблица.Колонки Цикл
		Результат.Добавить(Колонка.Имя);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция КоличествоРазличийВСтрокахТаблиц(СтрокаТаблицы1, СтрокаТаблицы2)
	
	Результат = 0;
	
	Таблица1 = СтрокаТаблицы1.Владелец();
	Таблица2 = СтрокаТаблицы2.Владелец();
	
	ОбщиеКолонки = НайтиОбщиеКолонки(Таблица1, Таблица2);
	ОстальныеКолонки = НайтиНесовпадающиеКолонки(Таблица1, Таблица2);
	
	// каждую колонку, не являющуюся общей считаем как одно различие
	Результат = Результат + ОстальныеКолонки.Количество();
	
	// различия считаем по несовпадающим значениям
	Для Каждого ИмяКолонки Из ОбщиеКолонки Цикл
		Если СтрокаТаблицы1[ИмяКолонки] <> СтрокаТаблицы2[ИмяКолонки] Тогда
			Результат = Результат + 1;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция НайтиОбщиеКолонки(Таблица1, Таблица2)
	МассивИмен1 = ПолучитьИменаКолонок(Таблица1);
	МассивИмен2 = ПолучитьИменаКолонок(Таблица2);
	Возврат ПересечениеМножеств(МассивИмен1, МассивИмен2);
КонецФункции

&НаСервере
Функция НайтиНесовпадающиеКолонки(Таблица1, Таблица2)
	МассивИмен1 = ПолучитьИменаКолонок(Таблица1);
	МассивИмен2 = ПолучитьИменаКолонок(Таблица2);
	Возврат РазностьМножеств(МассивИмен1, МассивИмен2, Истина);
КонецФункции

&НаСервере
Функция РазностьМножеств(Множество1, Знач Множество2, СимметричнаяРазность = Ложь)
	
	Результат = Новый Массив;
	Множество2 = СкопироватьМассив(Множество2);
	
	Для Каждого Элемент Из Множество1 Цикл
		Индекс = Множество2.Найти(Элемент);
		Если Индекс = Неопределено Тогда
			Результат.Добавить(Элемент);
		Иначе
			Множество2.Удалить(Индекс);
		КонецЕсли;
	КонецЦикла;
	
	Если СимметричнаяРазность Тогда
		Для Каждого Элемент Из Множество2 Цикл
			Результат.Добавить(Элемент);
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

&НаСервере
Функция ПересечениеМножеств(Множество1, Множество2)
	
	Результат = Новый Массив;
	
	Для Каждого Элемент Из Множество1 Цикл
		Индекс = Множество2.Найти(Элемент);
		Если Индекс <> Неопределено Тогда
			Результат.Добавить(Элемент);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция СкопироватьМассив(Массив)
	
	Результат = Новый Массив;
	
	Для Каждого Элемент Из Массив Цикл
		Результат.Добавить(Элемент);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция СтрокиИмеютРазличия(Строка1, Строка2, ПроверяемыеКолонки)
	Для Каждого Колонка Из ПроверяемыеКолонки Цикл
		Если ТипЗнч(Строка1[Колонка]) = Тип("ХранилищеЗначения") Тогда
			Продолжить; // реквизиты с типом ХранилищеЗначения не сравниваем.
		КонецЕсли;
		Если Строка1[Колонка] <> Строка2[Колонка] Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
КонецФункции

