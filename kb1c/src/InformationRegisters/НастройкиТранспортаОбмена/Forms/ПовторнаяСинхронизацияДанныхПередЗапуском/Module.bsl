&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ГлавныйУзел = ПланыОбмена.ГлавныйУзел();
	
	УстановитьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыПодключенияПриСинхронизацииДанныхНажатие(Элемент)
	
	Отбор              = Новый Структура("Узел", ГлавныйУзел);
	ЗначенияЗаполнения = Новый Структура("Узел", ГлавныйУзел);
	
	ОбменДаннымиКлиент.ОткрытьФормуЗаписиРегистраСведенийПоОтбору(
		Отбор, ЗначенияЗаполнения, "НастройкиТранспортаОбмена", Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ЖурналРегистрацииНажатие(Элемент)
	
	ПараметрыФормы = Новый Структура;
	
	ОткрытьФорму("Обработка.ЖурналРегистрации.Форма.ЖурналРегистрации", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура СинхронизироватьИПродолжить(Команда)
	
	ТекстПредупреждения = СинхронизироватьИПродолжитьНаСервере();
	
	Если ПустаяСтрока(ТекстПредупреждения) Тогда
		Закрыть("Продолжить");
	Иначе
		Предупреждение(ТекстПредупреждения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НеСинхронизироватьИПродолжить(Команда)
	
	НеСинхронизироватьИПродолжитьНаСервере();
	
	Закрыть("Продолжить");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьРаботу(Команда)
	
	Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура НеСинхронизироватьИПродолжитьНаСервере()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ ОбновлениеИнформационнойБазы.НеобходимоОбновлениеИнформационнойБазы() Тогда
		Если Константы.ЗагрузитьСообщениеОбменаДанными.Получить() = Истина Тогда
			Константы.ЗагрузитьСообщениеОбменаДанными.Установить(Ложь);
			Константы.СообщениеОбменаДаннымиИзГлавногоУзла.Установить(Новый ХранилищеЗначения(Неопределено));
		КонецЕсли;
	КонецЕсли;
	
	ОбменДаннымиСервер.УстановитьРежимЗагрузкиСообщенияОбменаДаннымиПередЗапуском(
		"ПропуститьЗагрузкуСообщенияОбменаДаннымиПередЗапуском", Истина);
	
КонецПроцедуры

&НаСервере
Функция СинхронизироватьИПродолжитьНаСервере()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если КонфигурацияИзменена() Тогда
		Возврат
			НСтр("ru = 'Из главного узла получены изменения, которые ещё не применены.
			           |Требуется открыть конфигуратор и обновить конфигурацию базы данных.'");
	КонецЕсли;
	
	Если ОбновлениеИнформационнойБазы.НеобходимоОбновлениеИнформационнойБазы() Тогда
		ТекстПредупреждения = СинхронизироватьИПродолжитьСОбновлениемИБ();
	Иначе
		ТекстПредупреждения = СинхронизироватьИПродолжитьБезОбновленияИБ();
	КонецЕсли;
	
	УстановитьДоступность();
	
	Возврат ТекстПредупреждения;
	
КонецФункции

&НаСервере
Функция СинхронизироватьИПродолжитьСОбновлениемИБ()
	
	Попытка
		Справочники.ИдентификаторыОбъектовМетаданных.ПроверкаИспользования();
	Исключение
		// Если ИдентификаторыОбъектовМетаданных не используются,
		// тогда предварительная синхронизация не требуется.
		Если Константы.ЗагрузитьСообщениеОбменаДанными.Получить() = Ложь Тогда
			Константы.ЗагрузитьСообщениеОбменаДанными.Установить(Истина);
		КонецЕсли;
		Возврат "";
	КонецПопытки;
	
	ТекстПредупреждения = "";
	Отказ = Ложь;
	Попытка
		ОбменДаннымиСервер.ПередПроверкойИдентификаторовОбъектовМетаданныхВПодчиненномУзлеРИБ(Отказ);
	Исключение
		Отказ = Истина;
	КонецПопытки;
	
	Если НЕ Отказ Тогда
		Если Константы.ЗагрузитьСообщениеОбменаДанными.Получить() = Ложь Тогда
			Константы.ЗагрузитьСообщениеОбменаДанными.Установить(Истина);
		КонецЕсли;
		ОбменДаннымиСервер.УстановитьРежимЗагрузкиСообщенияОбменаДаннымиПередЗапуском(
			"ПропуститьЗагрузкуИдентификаторовОбъектовМетаданныхПередЗапуском", Истина);
		
	ИначеЕсли КонфигурацияИзменена() Тогда
		Если Константы.ЗагрузитьСообщениеОбменаДанными.Получить() = Ложь Тогда
			Константы.ЗагрузитьСообщениеОбменаДанными.Установить(Истина);
		КонецЕсли;
		ТекстПредупреждения =
			НСтр("ru = 'Из главного узла получены изменения, которые нужно применить.
			           |Требуется открыть конфигуратор и обновить конфигурацию базы данных.'");
	Иначе
		ТекстПредупреждения =
			НСтр("ru = 'Получение данных из главного узла завершилось с ошибками.
			           |Подробности см. в журнале регистрации.'");
	КонецЕсли;
	
	Возврат ТекстПредупреждения;
	
КонецФункции

&НаСервере
Функция СинхронизироватьИПродолжитьБезОбновленияИБ()
	
	ТекстПредупреждения = "";
	Отказ = Ложь;
	Попытка
		ОбменДаннымиСервер.ЗагрузитьСообщениеПередОбновлениемИнформационнойБазы();
	Исключение
		Отказ = Истина;
	КонецПопытки;
	
	Если НЕ Отказ Тогда
		// Если сообщение загружено успешно, тогда повторная загрузка более не требуется.
		УстановитьПривилегированныйРежим(Истина);
		Если Константы.ЗагрузитьСообщениеОбменаДанными.Получить() = Истина Тогда
			Константы.ЗагрузитьСообщениеОбменаДанными.Установить(Ложь);
		КонецЕсли;
		Константы.ПовторитьЗагрузкуСообщенияОбменаДаннымиПередЗапуском.Установить(Ложь);
		УстановитьПривилегированныйРежим(Ложь);
		
		Попытка
			ОбменДаннымиСервер.ВыгрузитьСообщениеПослеОбновленияИнформационнойБазы();
		Исключение
			// Если выгрузка не удалась все равно можно продолжить запуск и
			// сделать выгрузку в режиме 1С:Предприятия.
		КонецПопытки;
		
	ИначеЕсли КонфигурацияИзменена() Тогда
		Если Константы.ЗагрузитьСообщениеОбменаДанными.Получить() = Ложь Тогда
			Константы.ЗагрузитьСообщениеОбменаДанными.Установить(Истина);
		КонецЕсли;
		ТекстПредупреждения =
			НСтр("ru = 'Из главного узла получены изменения, которые нужно применить.
			           |Требуется открыть конфигуратор и обновить конфигурацию базы данных.'");
	Иначе
		ТекстПредупреждения =
			НСтр("ru = 'Получение данных из главного узла завершилось с ошибками.
			           |Подробности см. в журнале регистрации.'");
	КонецЕсли;
	
	Возврат ТекстПредупреждения;
	
КонецФункции

&НаСервере
Процедура УстановитьДоступность()
	
	Если ОбменДаннымиСервер.ЗагрузитьСообщениеОбменаДанными()
	   И ОбновлениеИнформационнойБазы.НеобходимоОбновлениеИнформационнойБазы() Тогда
		
		Элементы.ФормаНеСинхронизироватьИПродолжить.Доступность = Ложь;
		Элементы.Пояснение2.Доступность = Ложь;
	Иначе
		Элементы.ФормаНеСинхронизироватьИПродолжить.Доступность = Истина;
		Элементы.Пояснение2.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры
