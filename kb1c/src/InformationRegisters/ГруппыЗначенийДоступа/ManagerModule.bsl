#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Обновляет группировки пользователей для проверки разрешенных значений
// по видам доступа Пользователи и ВнешниеПользователи.
// 
// Требуется вызывать:
// 1) При добавлении нового пользователя        (или внешнего пользователя),
//    При добавлении новой группы пользователей (или группы внешних пользователей),
//    при изменении состава групп пользователей (или групп  внешних пользователей).
//    Параметры = Структура с одним из свойств или сразу двумя свойствами:
//    - Пользователи:        один пользователь или массив.
//    - ГруппыПользователей: одна группа пользователей или массив.
//
// 2) При изменении групп исполнителей.
//    Параметры = Структура с одним свойством:
//    - ГруппыИсполнителей: Неопределено, одна группа исполнителей или массив.
//
// 3) При изменении объекта авторизации внешнего пользователя.
//    Параметры = Структура с одним свойством:
//    - ОбъектыАвторизации: Неопределено, один объект авторизации или массив.
//
// Типы, используемые в параметрах:
//
//  Пользователь         - СправочникСсылка.Пользователи,
//                         СправочникСсылка.ВнешниеПользователи.
//
//  Группа пользователей - СправочникСсылка.ГруппыПользователей,
//                         СправочникСсылка.ГруппыВнешнихПользователей.
//
//  Исполнитель          - СправочникСсылка.Пользователи,
//                         СправочникСсылка.ВнешниеПользователи.
// 
//  Группа исполнителей  - например, СправочникСсылка.ГруппыИсполнителейЗадач.
//
//  Объект авторизации   - например, СправочникСсылка.ФизическиеЛица.
//
// Параметры:
//  Параметры     - Неопределено - обновить все без отбора.
//                  Структура - см. варианты выше.
//
//  ЕстьИзменения - Булево (возвращаемое значение) - если производилась запись,
//                  устанавливается Истина, иначе не изменяется.
//
Процедура ОбновитьГруппировкиПользователей(Параметры = Неопределено, ЕстьИзменения = Неопределено) Экспорт
	
	ВидОбновления = "";
	
	Если Параметры = Неопределено Тогда
		ВидОбновления = "Все";
	
	ИначеЕсли Параметры.Количество() = 2
	        И Параметры.Свойство("Пользователи")
	        И Параметры.Свойство("ГруппыПользователей") Тогда
		
		ВидОбновления = "ПользователиИГруппыПользователей";
		
	ИначеЕсли Параметры.Количество() = 1
	        И Параметры.Свойство("Пользователи") Тогда
		
		ВидОбновления = "ПользователиИГруппыПользователей";
		
	ИначеЕсли Параметры.Количество() = 1
	        И Параметры.Свойство("ГруппыПользователей") Тогда
		
		ВидОбновления = "ПользователиИГруппыПользователей";
		
	ИначеЕсли Параметры.Количество() = 1
	        И Параметры.Свойство("ГруппыИсполнителей") Тогда
		
		ВидОбновления = "ГруппыИсполнителей";
		
	ИначеЕсли Параметры.Количество() = 1
	        И Параметры.Свойство("ОбъектыАвторизации") Тогда
		
		ВидОбновления = "ОбъектыАвторизации";
	Иначе
		ВызватьИсключение
			НСтр("ru = 'Ошибка в процедуре ОбновитьГруппировкиПользователей
			           |модуля менеджера регистра сведений Группы значений доступа.
			           |
			           |Указаны неверные параметры.'");
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		Если ОбновлениеИнформационнойБазы.ВыполняетсяОбновлениеИнформационнойБазы() Тогда
			УдалитьЗаписиСНеиспользуемымиГруппамиОбновляемыхДанных(ЕстьИзменения);
		КонецЕсли;
		
		Если ВидОбновления = "ПользователиИГруппыПользователей" Тогда
			
			Если Параметры.Свойство("Пользователи") Тогда
				
				ОбновитьПользователей     (   Параметры.Пользователи, ЕстьИзменения);
				ОбновитьГруппыИсполнителей( , Параметры.Пользователи, ЕстьИзменения);
			КонецЕсли;
			
			Если Параметры.Свойство("ГруппыПользователей") Тогда
				ОбновитьГруппыПользователей(Параметры.ГруппыПользователей, ЕстьИзменения);
			КонецЕсли;
			
		ИначеЕсли ВидОбновления = "ГруппыИсполнителей" Тогда
			ОбновитьГруппыИсполнителей(Параметры.ГруппыИсполнителей, , ЕстьИзменения);
			
		ИначеЕсли ВидОбновления = "ОбъектыАвторизации" Тогда
			ОбновитьОбъектыАвторизации(Параметры.ОбъектыАвторизации, ЕстьИзменения);
		Иначе
			ОбновитьПользователей      ( ,   ЕстьИзменения);
			ОбновитьГруппыПользователей( ,   ЕстьИзменения);
			ОбновитьГруппыИсполнителей ( , , ЕстьИзменения);
			ОбновитьОбъектыАвторизации ( ,   ЕстьИзменения);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура обновляет данные регистра при изменении значений доступа.
// 
// Параметры:
//  ЕстьИзменения - Булево (возвращаемое значение) - если производилась запись,
//                  устанавливается Истина, иначе не изменяется.
//
Процедура ОбновитьДанныеРегистра(ЕстьИзменения = Неопределено) Экспорт
	
	УдалитьЗаписиСНеиспользуемымиГруппамиОбновляемыхДанных(ЕстьИзменения);
	
	ОбновитьГруппировкиПользователей( , ЕстьИзменения);
	
	ОбновитьИерархиюВладельцевНастроекПравОбъектов( , ЕстьИзменения);
	
	ОбновитьГруппыЗначенийДоступа( , ЕстьИзменения);
	
КонецПроцедуры

// Обновляет иерархию владельцев настроек прав объектов.
// Например, справочник ПапкиФайлов.
//
// Параметры:
//  ВладельцыНастроекПрав - Ссылка, например, СправочникСсылка.ПапкиФайлов или другого типа,
//                          по которым права настраиваются непосредственно.
//                        - Тип владельца прав, например Тип("СправочникСсылка.ПапкиФайлов").
//                        - Массив значений указанных выше типов.
//                        - Неопределено - без отбора для всех типов.
//                        - Объект, например, СправочникОбъект.ПапкиФайлов, при передаче
//                          объекта обновление будет только если объект перед записью и
//                          он изменился (родитель изменен).
//
//  ЕстьИзменения         - Булево (возвращаемое значение) - если производилась запись,
//                          устанавливается Истина, иначе не изменяется.
//
Процедура ОбновитьИерархиюВладельцевНастроекПравОбъектов(Знач ВладельцыНастроекПрав = Неопределено,
                                                         ЕстьИзменения = Неопределено) Экспорт
	
	Если ВладельцыНастроекПрав = Неопределено Тогда
		
		ВозможныеПраваПоЗначениямДоступа = УправлениеДоступомСлужебныйПовтИсп.Параметры(
			).ВозможныеПраваПоЗначениямДоступа;
		
		Запрос = Новый Запрос;
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТекущаяТаблица.Ссылка
		|ИЗ
		|	&ТекущаяТаблица КАК ТекущаяТаблица";
		
		Для каждого КлючИЗначение Из ВозможныеПраваПоЗначениямДоступа.ПоПолнымИменам Цикл
			
			Запрос.Текст = СтрЗаменить(ТекстЗапроса, "&ТекущаяТаблица", КлючИЗначение.Ключ);
			Выборка = Запрос.Выполнить().Выбрать();
			
			Пока Выборка.Следующий() Цикл
				ОбновитьИерархиюВладельцаНастроекПравОбъектов(Выборка.Ссылка, ЕстьИзменения);
			КонецЦикла;
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(ВладельцыНастроекПрав) = Тип("Массив") Тогда
		
		Для каждого ВладелецНастроекПрав Из ВладельцыНастроекПрав Цикл
			ОбновитьИерархиюВладельцаНастроекПравОбъектов(ВладелецНастроекПрав, ЕстьИзменения);
		КонецЦикла;
	Иначе
		ОбновитьИерархиюВладельцаНастроекПравОбъектов(ВладельцыНастроекПрав, ЕстьИзменения);
	КонецЕсли;
	
КонецПроцедуры

// Обновляет группы значений доступа в РегистрСведений.ГруппыЗначенийДоступа.
//
// Параметры:
//  ЗначенияДоступа - СправочникОбъект,
//                  - СправочникСсылка.
//                  - Массив значений указанных выше типов.
//                  - Неопределено - без отбора.
//                    Тип значений должен быть в составе типов измерения Значение
//                    регистра сведений ГруппыЗначенийДоступа.
//                    Если передан Объект, то обновление будет только при его изменении.
//
//  ЕстьИзменения   - Булево (возвращаемое значение) - если производилась запись,
//                    устанавливается Истина, иначе не изменяется.
//
Процедура ОбновитьГруппыЗначенийДоступа(Знач ЗначенияДоступа = Неопределено,
                                        ЕстьИзменения   = Неопределено) Экспорт
	
	
	Если ЗначенияДоступа = Неопределено Тогда
		
		ЗначенияДоступаСГруппами = УправлениеДоступомСлужебныйПовтИсп.Параметры(
			).СвойстваВидовДоступа.ЗначенияДоступаСГруппами;
		
		Запрос = Новый Запрос;
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТекущаяТаблица.Ссылка
		|ИЗ
		|	&ТекущаяТаблица КАК ТекущаяТаблица";
		
		Для каждого КлючИЗначение Из ЗначенияДоступаСГруппами.ПоПолнымИменам Цикл
			
			Запрос.Текст = СтрЗаменить(ТекстЗапроса, "&ТекущаяТаблица", КлючИЗначение.Ключ);
			Выборка = Запрос.Выполнить().Выбрать();
			
			Пока Выборка.Следующий() Цикл
				ОбновитьГруппыЗначенияДоступа(Выборка.Ссылка, ЕстьИзменения);
			КонецЦикла;
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(ЗначенияДоступа) = Тип("Массив") Тогда
		
		Для каждого ЗначениеДоступа Из ЗначенияДоступа Цикл
			ОбновитьГруппыЗначенияДоступа(ЗначениеДоступа, ЕстьИзменения);
		КонецЦикла;
	Иначе
		ОбновитьГруппыЗначенияДоступа(ЗначенияДоступа, ЕстьИзменения);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры и функции

// Удаляет строки, которых не должно быть, если они добавлены каким-либо способом.
Функция УдалитьЗаписиСНеиспользуемымиГруппамиОбновляемыхДанных(ЕстьИзменения = Неопределено)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ГруппыЗначенийДоступа.ВидДоступа,
	|	ГруппыЗначенийДоступа.ГруппаОбновляемыхДанных
	|ИЗ
	|	РегистрСведений.ГруппыЗначенийДоступа КАК ГруппыЗначенийДоступа
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ГруппыЗначенийДоступа.ВидДоступа = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.ПустаяСсылка)
	|				ТОГДА ИСТИНА
	|			КОГДА ГруппыЗначенийДоступа.ВидДоступа = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.Пользователи)
	|					ИЛИ ГруппыЗначенийДоступа.ВидДоступа = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.ВнешниеПользователи)
	|				ТОГДА НЕ ГруппыЗначенийДоступа.ГруппаОбновляемыхДанных В (1, 2, 3, 4)
	|			ИНАЧЕ ГруппыЗначенийДоступа.ГруппаОбновляемыхДанных <> 0
	|		КОНЕЦ";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			НаборЗаписей = РегистрыСведений.ГруппыЗначенийДоступа.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ВидДоступа.Установить(Выборка.ВидДоступа);
			НаборЗаписей.Отбор.ГруппаОбновляемыхДанных.Установить(Выборка.ГруппаОбновляемыхДанных);
			НаборЗаписей.Записать();
			ЕстьИзменения = Истина;
		КонецЦикла;
	КонецЕсли;
	
КонецФункции

// Обновляет иерархию владельцев настроек прав объектов.
// Например, справочник ПапкиФайлов.
// 
// Параметры:
//  ВладелецНастроекПрав - Ссылка, например, СправочникСсылка.ПапкиФайлов или другого типа,
//                         по которым права настраиваются непосредственно.
//                       - Объект, например, СправочникОбъект.ПапкиФайлов, при передаче
//                         объекта обновление будет только если объект перед записью и
//                         он изменился (родитель изменен).
//
//  ЕстьИзменения        - Булево (возвращаемое значение) - если производилась запись,
//                         устанавливается Истина, иначе не изменяется.
//
Процедура ОбновитьИерархиюВладельцаНастроекПравОбъектов(ВладелецНастроекПрав, ЕстьИзменения)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Параметры = УправлениеДоступомСлужебныйПовтИсп.Параметры();
	ЗначенияДоступаСГруппами   = Параметры.СвойстваВидовДоступа.ЗначенияДоступаСГруппами;
	ВидыДоступаЗначенийДоступа = Параметры.СвойстваВидовДоступа.ВидыДоступаЗначенийДоступа;
	ТипВладельца = ТипЗнч(ВладелецНастроекПрав);
	
	ЗаголовокОшибки =
		НСтр("ru = 'Ошибка при обновлении иерархии владельцев прав по значениям доступа.
		           |
		           |'");
	
	Если Параметры.ВозможныеПраваПоЗначениямДоступа.ПоТипам.Получить(ТипВладельца) = Неопределено Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ЗаголовокОшибки +
			НСтр("ru = 'Для типа ""%1""
			           |не настроено использование прав по значениям доступа.'"),
			Строка(ТипВладельца));
	КонецЕсли;
	
	ВидДоступа = ВидыДоступаЗначенийДоступа.ПоТипам.Получить(ТипВладельца).Получить(0);
	
	Если Параметры.ВозможныеПраваПоЗначениямДоступа.ПоТипамСсылок.Получить(ТипВладельца) = Неопределено Тогда
		Ссылка = УправлениеДоступомСлужебный.СсылкаОбъекта(ВладелецНастроекПрав);
		Объект = ВладелецНастроекПрав;
	Иначе
		Ссылка = ВладелецНастроекПрав;
		Объект = Неопределено;
	КонецЕсли;
	
	СтарыйРодитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Родитель");
	
	// Проверка изменения объекта.
	ТребуетсяОбновление = Ложь;
	Если Объект <> Неопределено Тогда
		Если СтарыйРодитель <> Объект.Родитель Тогда
			ТребуетсяОбновление = Истина;
		КонецЕсли;
		НовыйРодитель = Объект.Родитель;
	Иначе
		ТребуетсяОбновление = Истина;
		НовыйРодитель = СтарыйРодитель;
	КонецЕсли;
	
	Если НЕ ТребуетсяОбновление Тогда
		Возврат;
	КонецЕсли;
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ГруппыЗначенийДоступа");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.УстановитьЗначение("ВидДоступа", ВидДоступа);
	
	Если Объект = Неопределено Тогда
		ДополнительныеСвойства = Неопределено;
	Иначе
		ДополнительныеСвойства = Новый Структура("ВедущийОбъектПередЗаписью", Объект);
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		Блокировка.Заблокировать();
		
		// Подготовка групп значений доступа (родителей) значения доступа.
		НовыеЗаписи = РодителиЗначенияДоступа(Ссылка, ВидДоступа, Ссылка, НовыйРодитель);
	
		НаборЗаписей = РегистрыСведений.ГруппыЗначенийДоступа.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ВидДоступа.Установить(ВидДоступа);
		НаборЗаписей.Отбор.ЗначениеДоступа.Установить(Ссылка);
		
		ЕстьТекущиеИзменения = Ложь;
		УправлениеДоступомСлужебный.ОбновитьНаборЗаписей(
			НаборЗаписей, НовыеЗаписи, , , , ЕстьТекущиеИзменения, , , , , , ДополнительныеСвойства);
		
		Если ЕстьТекущиеИзменения Тогда
			ЕстьИзменения = Истина;
			
			// Обновление состава родителей элементов в иерархии текущего значения.
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ЗначениеДоступа", Ссылка);
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ТаблицаСИерархией.Ссылка КАК ПодчиненнаяСсылка
			|ИЗ
			|	&ТаблицаСИерархией КАК ТаблицаСИерархией
			|ГДЕ
			|	ТаблицаСИерархией.Ссылка В ИЕРАРХИИ(&ЗначениеДоступа)
			|	И ТаблицаСИерархией.Ссылка <> &ЗначениеДоступа";
			
			Запрос.Текст = СтрЗаменить(
				Запрос.Текст, "&ТаблицаСИерархией", Ссылка.Метаданные().ПолноеИмя() );
			
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				
				НовыеЗаписи = РодителиЗначенияДоступа(
					Выборка.ПодчиненнаяСсылка, ВидДоступа, Ссылка, НовыйРодитель);
				
				НаборЗаписей = РегистрыСведений.ГруппыЗначенийДоступа.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.ВидДоступа.Установить(ВидДоступа);
				НаборЗаписей.Отбор.ЗначениеДоступа.Установить(Выборка.ПодчиненнаяСсылка);
				
				УправлениеДоступомСлужебный.ОбновитьНаборЗаписей(НаборЗаписей, НовыеЗаписи);
			КонецЦикла;
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Обновляет группы значения доступа в РегистрСведений.ГруппыЗначенийДоступа.
//
// Параметры:
//  ЗначениеДоступа - СправочникСсылка.
//                    СправочникОбъект.
//                    Если передан Объект, то обновление будет только при его изменении.
//
//  ЕстьИзменения   - Булево (возвращаемое значение) - если производилась запись,
//                    устанавливается Истина, иначе не изменяется.
//
Процедура ОбновитьГруппыЗначенияДоступа(ЗначениеДоступа, ЕстьИзменения)
	
	УстановитьПривилегированныйРежим(Истина);
	
	СвойстваВидовДоступа = УправлениеДоступомСлужебныйПовтИсп.Параметры().СвойстваВидовДоступа;
	ЗначенияДоступаСГруппами   = СвойстваВидовДоступа.ЗначенияДоступаСГруппами;
	ВидыДоступаЗначенийДоступа = СвойстваВидовДоступа.ВидыДоступаЗначенийДоступа;
	ТипЗначенияДоступа = ТипЗнч(ЗначениеДоступа);
	
	ЗаголовокОшибки =
		НСтр("ru = 'Ошибка при обновлении групп значений доступа.
		           |
		           |'");
	
	Если ЗначенияДоступаСГруппами.ПоТипам.Получить(ТипЗначенияДоступа) = Неопределено Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ЗаголовокОшибки +
			НСтр("ru = 'Для типа ""%1""
			           |не настроено использование групп значений доступа.'"),
			Строка(ТипЗначенияДоступа));
	КонецЕсли;
	
	Если ЗначенияДоступаСГруппами.ПоТипамСсылок.Получить(ТипЗначенияДоступа) = Неопределено Тогда
		Ссылка = УправлениеДоступомСлужебный.СсылкаОбъекта(ЗначениеДоступа);
		Объект = ЗначениеДоступа;
	Иначе
		Ссылка = ЗначениеДоступа;
		Объект = Неопределено;
	КонецЕсли;
	
	ВидыДоступаТаблицы = ВидыДоступаЗначенийДоступа.ПоТипам.Получить(ТипЗначенияДоступа);
	
	// Подготовка старых значений полей.
	Поля = Новый Структура;
	ПоляДляЗапроса = Новый Массив;
	Для каждого ВидДоступа Из ВидыДоступаТаблицы Цикл
		Свойства = УправлениеДоступомСлужебный.СвойстваВидаДоступа(ВидДоступа);
		ПостфиксИмени = ?(Свойства.ВидДоступаЕдинственныйДляТипаЗначенияДоступа, "", Свойства.Имя);
		
		Если НЕ Свойства.ВидДоступаЕдинственныйДляТипаЗначенияДоступа Тогда
			Поля.Вставить("ВидДоступа" + ПостфиксИмени, Ложь);
			ПоляДляЗапроса.Добавить("ВидДоступа" + ПостфиксИмени);
		КонецЕсли;
		
		Если Свойства.ВидДоступаСОднойГруппойЗначенияДоступа Тогда
			Поля.Вставить("ГруппаДоступа" + ПостфиксИмени, Ложь);
		Иначе
			Поля.Вставить("ГруппаДоступа" + ПостфиксИмени, Истина);
		КонецЕсли;
		
		ПоляДляЗапроса.Добавить("ГруппаДоступа" + ПостфиксИмени);
	КонецЦикла;
	СтарыеЗначения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, ПоляДляЗапроса);
	
	// Проверка изменения объекта.
	ТребуетсяОбновление = Ложь;
	Если Объект <> Неопределено Тогда
		Для каждого КлючИЗначение Из Поля Цикл
			Поле = КлючИЗначение.Ключ;
			
			Если КлючИЗначение.Значение Тогда
				Значение = Объект[Поле].Выгрузить();
			Иначе
				Значение = Объект[Поле];
			КонецЕсли;
			
			Если НЕ ОбщегоНазначения.ДанныеСовпадают(Значение, СтарыеЗначения[Поле]) Тогда
				ТребуетсяОбновление = Истина;
			КонецЕсли;
		КонецЦикла;
		НовыеЗначения = Объект;
	Иначе
		ТребуетсяОбновление = Истина;
		НовыеЗначения = СтарыеЗначения;
	КонецЕсли;
	
	Если НЕ ТребуетсяОбновление Тогда
		Возврат;
	КонецЕсли;
	
	// Подготовка новых записей для обновления.
	НовыеЗаписи = РегистрыСведений.ГруппыЗначенийДоступа.СоздатьНаборЗаписей().Выгрузить();
	
	Если УправлениеДоступом.ОграничиватьДоступНаУровнеЗаписей() Тогда
		
		// Заполнение группы значений для каждого вида доступа.
		Для каждого ВидДоступа Из ВидыДоступаТаблицы Цикл
			Свойства = УправлениеДоступомСлужебный.СвойстваВидаДоступа(ВидДоступа);
			
			ПостфиксИмени = ?(Свойства.ВидДоступаЕдинственныйДляТипаЗначенияДоступа, "", Свойства.Имя);
			
			Если НЕ Свойства.ВидДоступаЕдинственныйДляТипаЗначенияДоступа
			   И НовыеЗначения["ВидДоступа" + ПостфиксИмени] <> Истина Тогда
				
				// Когда значение не разрешено по виду доступа.
				Запись = НовыеЗаписи.Добавить();
				Запись.ВидДоступа            = ВидДоступа;
				Запись.ЗначениеДоступа       = Ссылка;
				Запись.ТолькоВидДоступа      = Истина;
				Запись.ГруппаЗначенийДоступа = Неопределено;
			
			ИначеЕсли Свойства.ВидДоступаСОднойГруппойЗначенияДоступа Тогда
				
				Запись = НовыеЗаписи.Добавить();
				Запись.ВидДоступа            = ВидДоступа;
				Запись.ЗначениеДоступа       = Ссылка;
				Запись.ТолькоВидДоступа      = Ложь;
				Запись.ГруппаЗначенийДоступа = НовыеЗначения["ГруппаДоступа" + ПостфиксИмени];
			Иначе
				Для каждого СтрокаТЧ Из НовыеЗначения["ГруппыДоступа" + ПостфиксИмени] Цикл
					Запись = НовыеЗаписи.Добавить();
					Запись.ВидДоступа            = ВидДоступа;
					Запись.ЗначениеДоступа       = Ссылка;
					Запись.ТолькоВидДоступа      = Ложь;
					Запись.ГруппаЗначенийДоступа = СтрокаТЧ["ГруппаДоступа" + ПостфиксИмени];
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		Если НовыеЗаписи.Количество() = 0 Тогда
			// Если это условие отключить, тогда зациклится регламентное задание
			// "Заполнение данных для ограничения доступа".
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ЗаголовокОшибки +
				НСтр("ru = 'Попытка записать пустой набор для значения доступа
				           |""%1"".'"),
				Строка(Ссылка) );
		КонецЕсли;
	КонецЕсли;
	
	Если Объект = Неопределено Тогда
		ДополнительныеСвойства = Неопределено;
	Иначе
		ДополнительныеСвойства = Новый Структура("ВедущийОбъектПередЗаписью", Объект);
	КонецЕсли;
	
	ФиксированныйОтбор = Новый Структура;
	ФиксированныйОтбор.Вставить("ЗначениеДоступа", Ссылка);
	
	НачатьТранзакцию();
	Попытка
		УправлениеДоступомСлужебный.ОбновитьНаборыЗаписей(
			РегистрыСведений.ГруппыЗначенийДоступа,
			НовыеЗаписи,
			,
			"ВидДоступа",
			ВидыДоступаТаблицы,
			,
			,
			,
			,
			,
			ФиксированныйОтбор,
			ЕстьИзменения,
			,
			ДополнительныеСвойства);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Заполняет НаборЗаписей родителями значения доступа, включая себя, как родителя.
//
// Параметры:
//  ЗначениеДоступа - СправочникСсылка, ПланВидовХарактеристикСсылка.
//  Родитель        - Ссылка на родитель значения доступа.
//  ВидДоступа      - ПланВидовХарактеристикСсылка.ВидыДоступа - для заполнения.
//
// Возвращаемое значение:
//  НаборЗаписей - РегистрСведенийНаборЗаписей.ГруппыЗначенийДоступа.
//
Функция РодителиЗначенияДоступа(ЗначениеДоступа, ВидДоступа, Ссылка, РодительСсылки)
	
	// Получение флажка наследования прав родителей для значения доступа.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗначениеДоступа", ЗначениеДоступа);
	Запрос.УстановитьПараметр("ВидДоступа", ВидДоступа);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ГруппыЗначенийДоступа.НаследоватьПраваРодителей
	|ИЗ
	|	РегистрСведений.ГруппыЗначенийДоступа КАК ГруппыЗначенийДоступа
	|ГДЕ
	|	ГруппыЗначенийДоступа.ВидДоступа = &ВидДоступа
	|	И ГруппыЗначенийДоступа.ЗначениеДоступа = &ЗначениеДоступа
	|	И ГруппыЗначенийДоступа.ГруппаЗначенийДоступа = &ЗначениеДоступа";
	Выборка = Запрос.Выполнить().Выбрать();
	НаследоватьПраваРодителей = ?(Выборка.Следующий(), Выборка.НаследоватьПраваРодителей, Истина);
	
	НовыеЗаписи = РегистрыСведений.ГруппыЗначенийДоступа.СоздатьНаборЗаписей().Выгрузить();
	
	ТекущийРодитель = ЗначениеДоступа;
	Пока ЗначениеЗаполнено(ТекущийРодитель) Цикл
	
		Строка = НовыеЗаписи.Добавить();
		Строка.ВидДоступа                = ВидДоступа;
		Строка.ЗначениеДоступа           = ЗначениеДоступа;
		Строка.ГруппаЗначенийДоступа     = ТекущийРодитель;
		Строка.НаследоватьПраваРодителей = ?(ЗначениеДоступа = Строка.ГруппаЗначенийДоступа, НаследоватьПраваРодителей, Ложь);
		Строка.ИспользоватьПраваСсылки   = ?(ЗначениеДоступа = Строка.ГруппаЗначенийДоступа, Истина, НаследоватьПраваРодителей);
		Строка.СвязьСРодителем           = ЗначениеДоступа <> Строка.ГруппаЗначенийДоступа;
		
		Если ТекущийРодитель = Ссылка Тогда
			ТекущийРодитель = РодительСсылки;
		Иначе
			ТекущийРодитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТекущийРодитель, "Родитель");
		КонецЕсли;
	КонецЦикла;
	
	Возврат НовыеЗаписи;
	
КонецФункции

// Обновляет группировки пользователей для проверки разрешенных значений
// по видам доступа Пользователи и ВнешниеПользователи.
//
// <Состав поля ЗначениеДоступа>    <Состав поля ГруппаЗначенийДоступа>
//                            <Состав поля ГруппаОбновляемыхДанных>
// а) для вида доступа
// Пользователи
// {cравнение с Т.<поле>}           {Сравнение с ЗначенияГруппДоступа.ЗначениеДоступа}
//                                  {Сравнение с &ТекущийПользователь}
//
// Пользователь                  1 - Тот же Пользователь.
//
//                               1 - Группа пользователей
//                                   того же пользователя.
//
// б) для вида доступа
// Внешние пользователи
// {cравнение с Т.<поле>}           {Сравнение с ЗначенияГруппДоступа.ЗначениеДоступа}
//                                  {Сравнение с &ТекущийВнешнийПользователь}
//
// Внешний пользователь          1 - Тот же Внешний пользователь.
//
//                               1 - Группа внешних пользователей
//                                   того же внешнего пользователя.
//
Процедура ОбновитьПользователей(Пользователи1 = Неопределено,
                                ЕстьИзменения = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.Пользователи) КАК ВидДоступа,
	|	СоставыГруппПользователей.Пользователь КАК ЗначениеДоступа,
	|	ЛОЖЬ КАК ТолькоВидДоступа,
	|	СоставыГруппПользователей.ГруппаПользователей КАК ГруппаЗначенийДоступа,
	|	1 КАК ГруппаОбновляемыхДанных,
	|	ЛОЖЬ КАК НаследоватьПраваРодителей,
	|	ЛОЖЬ КАК СвязьСРодителем,
	|	ЛОЖЬ КАК ИспользоватьПраваСсылки,
	|	&ПодстановкаПоляВидИзмененияСтроки
	|ИЗ
	|	РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(СоставыГруппПользователей.Пользователь) = ТИП(Справочник.Пользователи)
	|	И &УсловиеОтбораПользователей1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.ВнешниеПользователи),
	|	СоставыГруппПользователей.Пользователь,
	|	ЛОЖЬ,
	|	СоставыГруппПользователей.ГруппаПользователей,
	|	1,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	&ПодстановкаПоляВидИзмененияСтроки
	|ИЗ
	|	РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(СоставыГруппПользователей.Пользователь) = ТИП(Справочник.ВнешниеПользователи)
	|	И &УсловиеОтбораПользователей1";
	
	// Подготовка выбираемых полей с необязательным отбором.
	Поля = Новый Массив; 
	Поля.Добавить(Новый Структура("ВидДоступа"));
	Поля.Добавить(Новый Структура("ЗначениеДоступа",         "&УсловиеОтбораПользователей2"));
	Поля.Добавить(Новый Структура("ТолькоВидДоступа"));
	Поля.Добавить(Новый Структура("ГруппаЗначенийДоступа"));
	Поля.Добавить(Новый Структура("ГруппаОбновляемыхДанных", "&УсловиеОтбораГруппОбновляемыхДанных"));
	Поля.Добавить(Новый Структура("НаследоватьПраваРодителей"));
	Поля.Добавить(Новый Структура("СвязьСРодителем"));
	Поля.Добавить(Новый Структура("ИспользоватьПраваСсылки"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = УправлениеДоступомСлужебный.ТекстЗапросаВыбораИзменений(
		ТекстЗапроса, Поля, "РегистрСведений.ГруппыЗначенийДоступа");
	
	УправлениеДоступомСлужебный.УстановитьУсловиеОтбораВЗапросе(Запрос, Пользователи1, "Пользователи",
		"&УсловиеОтбораПользователей1:СоставыГруппПользователей.Пользователь
		|&УсловиеОтбораПользователей2:СтарыеДанные.ЗначениеДоступа");
	
	УправлениеДоступомСлужебный.УстановитьУсловиеОтбораВЗапросе(Запрос, 1, "ГруппаОбновляемыхДанных",
		"&УсловиеОтбораГруппОбновляемыхДанных:СтарыеДанные.ГруппаОбновляемыхДанных");
	
	Изменения = Запрос.Выполнить().Выгрузить();
	
	ФиксированныйОтбор = Новый Структура;
	ФиксированныйОтбор.Вставить("ТолькоВидДоступа", Ложь);
	ФиксированныйОтбор.Вставить("ГруппаОбновляемыхДанных", 1);
	
	УправлениеДоступомСлужебный.ОбновитьРегистрСведений(
		РегистрыСведений.ГруппыЗначенийДоступа, Изменения, ЕстьИзменения, ФиксированныйОтбор);
	
КонецПроцедуры

// Обновляет группировки пользователей для проверки разрешенных значений
// по видам доступа Пользователи и ВнешниеПользователи.
//
// <Состав поля ЗначениеДоступа>    <Состав поля ГруппаЗначенийДоступа>
//                            <Состав поля ГруппаОбновляемыхДанных>
// а) для вида доступа
// Пользователи
// {cравнение с Т.<поле>}           {Сравнение с ЗначенияГруппДоступа.ЗначениеДоступа}
//                                  {Сравнение с &ТекущийПользователь}
//
// Группа пользователей          2 - Та же Группа пользователей.
//
//                               2 - Пользователь
//                                   той же группы пользователей.
//
// б) для вида доступа
// Внешние пользователи
// {cравнение с Т.<поле>}           {Сравнение с ЗначенияГруппДоступа.ЗначениеДоступа}
//                                  {Сравнение с &ТекущийВнешнийПользователь}
//
// Группа внешних пользователей  2 - Та же Группа внешних пользователей.
//
//                               2 - Внешний пользователь
//                                   той же группы внешних пользователей.
//
//
Процедура ОбновитьГруппыПользователей(ГруппыПользователей = Неопределено,
                                      ЕстьИзменения       = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.Пользователи) КАК ВидДоступа,
	|	СоставыГруппПользователей.ГруппаПользователей КАК ЗначениеДоступа,
	|	ЛОЖЬ КАК ТолькоВидДоступа,
	|	СоставыГруппПользователей.ГруппаПользователей КАК ГруппаЗначенийДоступа,
	|	2 КАК ГруппаОбновляемыхДанных,
	|	ЛОЖЬ КАК НаследоватьПраваРодителей,
	|	ЛОЖЬ КАК СвязьСРодителем,
	|	ЛОЖЬ КАК ИспользоватьПраваСсылки,
	|	&ПодстановкаПоляВидИзмененияСтроки
	|ИЗ
	|	РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(СоставыГруппПользователей.ГруппаПользователей) = ТИП(Справочник.ГруппыПользователей)
	|	И &УсловиеОтбораГруппПользователей1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.Пользователи),
	|	СоставыГруппПользователей.ГруппаПользователей,
	|	ЛОЖЬ,
	|	СоставыГруппПользователей.Пользователь,
	|	2,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	&ПодстановкаПоляВидИзмененияСтроки
	|ИЗ
	|	РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(СоставыГруппПользователей.ГруппаПользователей) = ТИП(Справочник.ГруппыПользователей)
	|	И ТИПЗНАЧЕНИЯ(СоставыГруппПользователей.Пользователь) = ТИП(Справочник.Пользователи)
	|	И &УсловиеОтбораГруппПользователей1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.ВнешниеПользователи),
	|	СоставыГруппПользователей.ГруппаПользователей,
	|	ЛОЖЬ,
	|	СоставыГруппПользователей.ГруппаПользователей,
	|	2,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	&ПодстановкаПоляВидИзмененияСтроки
	|ИЗ
	|	РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(СоставыГруппПользователей.ГруппаПользователей) = ТИП(Справочник.ГруппыВнешнихПользователей)
	|	И &УсловиеОтбораГруппПользователей1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.ВнешниеПользователи),
	|	СоставыГруппПользователей.ГруппаПользователей,
	|	ЛОЖЬ,
	|	СоставыГруппПользователей.Пользователь,
	|	2,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	&ПодстановкаПоляВидИзмененияСтроки
	|ИЗ
	|	РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(СоставыГруппПользователей.ГруппаПользователей) = ТИП(Справочник.ГруппыВнешнихПользователей)
	|	И ТИПЗНАЧЕНИЯ(СоставыГруппПользователей.Пользователь) = ТИП(Справочник.ВнешниеПользователи)
	|	И &УсловиеОтбораГруппПользователей1";
	
	// Подготовка выбираемых полей с необязательным отбором.
	Поля = Новый Массив; 
	Поля.Добавить(Новый Структура("ВидДоступа"));
	Поля.Добавить(Новый Структура("ЗначениеДоступа",         "&УсловиеОтбораГруппПользователей2"));
	Поля.Добавить(Новый Структура("ТолькоВидДоступа"));
	Поля.Добавить(Новый Структура("ГруппаЗначенийДоступа"));
	Поля.Добавить(Новый Структура("ГруппаОбновляемыхДанных", "&УсловиеОтбораГруппОбновляемыхДанных"));
	Поля.Добавить(Новый Структура("НаследоватьПраваРодителей"));
	Поля.Добавить(Новый Структура("СвязьСРодителем"));
	Поля.Добавить(Новый Структура("ИспользоватьПраваСсылки"));
	
	Запрос = Новый Запрос;
	Запрос.Текст = УправлениеДоступомСлужебный.ТекстЗапросаВыбораИзменений(
		ТекстЗапроса, Поля, "РегистрСведений.ГруппыЗначенийДоступа");
	
	УправлениеДоступомСлужебный.УстановитьУсловиеОтбораВЗапросе(Запрос, ГруппыПользователей, "ГруппыПользователей",
		"&УсловиеОтбораГруппПользователей1:СоставыГруппПользователей.ГруппаПользователей
		|&УсловиеОтбораГруппПользователей2:СтарыеДанные.ЗначениеДоступа");
	
	УправлениеДоступомСлужебный.УстановитьУсловиеОтбораВЗапросе(Запрос, 2, "ГруппаОбновляемыхДанных",
		"&УсловиеОтбораГруппОбновляемыхДанных:СтарыеДанные.ГруппаОбновляемыхДанных");
	
	Изменения = Запрос.Выполнить().Выгрузить();
	
	ФиксированныйОтбор = Новый Структура;
	ФиксированныйОтбор.Вставить("ТолькоВидДоступа", Ложь);
	ФиксированныйОтбор.Вставить("ГруппаОбновляемыхДанных", 2);
	
	УправлениеДоступомСлужебный.ОбновитьРегистрСведений(
		РегистрыСведений.ГруппыЗначенийДоступа, Изменения, ЕстьИзменения, ФиксированныйОтбор);
	
КонецПроцедуры

// Обновляет группировки пользователей для проверки разрешенных значений
// по видам доступа Пользователи и ВнешниеПользователи.
//
// <Состав поля ЗначениеДоступа>    <Состав поля ГруппаЗначенийДоступа>
//                            <Состав поля ГруппаОбновляемыхДанных>
// а) для вида доступа
// Пользователи
// {cравнение с Т.<поле>}           {Сравнение с ЗначенияГруппДоступа.ЗначениеДоступа}
//                                  {Сравнение с &ТекущийПользователь}
//
// Группа исполнителей           3 - Пользователь
//                                   той же группы исполнителей.
//
//                               3 - Группа пользователей пользователя
//                                   той же группы исполнителей.
//
// б) для вида доступа
// Внешние пользователи
// {cравнение с Т.<поле>}           {Сравнение с ЗначенияГруппДоступа.ЗначениеДоступа}
//                                  {Сравнение с &ТекущийВнешнийПользователь}
//
// Группа исполнителей           3 - Внешний пользователь
//                                   той же группы исполнителей.
//
//                               3 - Группа внешних пользователей
//                                   внешнего пользователя
//                                   той же группы исполнителей.
//
Процедура ОбновитьГруппыИсполнителей(ГруппыИсполнителей = Неопределено,
                                     Исполнители        = Неопределено,
                                     ЕстьИзменения      = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Подготовка таблицы дополнительных групп пользователей -
	// групп исполнителей (например, задач).
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Если ГруппыИсполнителей = Неопределено
	   И Исполнители        = Неопределено Тогда
	
		СодержаниеПараметра = Неопределено;
		ЗначениеПараметра   = Неопределено;
	
	ИначеЕсли ГруппыИсполнителей <> Неопределено Тогда
		СодержаниеПараметра = "ГруппыИсполнителей";
		ЗначениеПараметра   = ГруппыИсполнителей;
		
	ИначеЕсли Исполнители <> Неопределено Тогда
		СодержаниеПараметра = "Исполнители";
		ЗначениеПараметра   = Исполнители;
	Иначе
		ВызватьИсключение
			НСтр("ru = 'Ошибка в процедуре ОбновитьГруппыИсполнителей
			           |модуля менеджера регистра сведений ГруппыЗначенийДоступа.
			           |
			           |Указаны неверные параметры.'");
	КонецЕсли;
	
	НетГруппИсполнителей = Истина;
	УправлениеДоступомСлужебный.ПриОпределенииГруппИсполнителей(
		Запрос.МенеджерВременныхТаблиц,
		СодержаниеПараметра,
		ЗначениеПараметра,
		НетГруппИсполнителей);
	
	Если НетГруппИсполнителей Тогда
		НаборЗаписей = РегистрыСведений.ГруппыЗначенийДоступа.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ГруппаОбновляемыхДанных.Установить(3);
		НаборЗаписей.Прочитать();
		Если НаборЗаписей.Количество() > 0 Тогда
			НаборЗаписей.Очистить();
			НаборЗаписей.Записать();
			ЕстьИзменения = Истина;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	// Подготовка отобранных связей исполнителей и групп исполнителей.
	Запрос.УстановитьПараметр("ВсеПустыеСсылки",
		УправлениеДоступомСлужебныйПовтИсп.Параметры().ВсеПустыеСсылки);
	
	ТекстЗапросовВременныхТаблиц =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаГруппИсполнителей.ГруппаИсполнителей,
	|	ТаблицаГруппИсполнителей.Пользователь
	|ПОМЕСТИТЬ ПользователиГруппИсполнителей
	|ИЗ
	|	ТаблицаГруппИсполнителей КАК ТаблицаГруппИсполнителей
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(ТаблицаГруппИсполнителей.ГруппаИсполнителей) <> ТИП(Справочник.ГруппыПользователей)
	|	И ТИПЗНАЧЕНИЯ(ТаблицаГруппИсполнителей.ГруппаИсполнителей) <> ТИП(Справочник.Пользователи)
	|	И ТИПЗНАЧЕНИЯ(ТаблицаГруппИсполнителей.ГруппаИсполнителей) <> ТИП(Справочник.ГруппыВнешнихПользователей)
	|	И ТИПЗНАЧЕНИЯ(ТаблицаГруппИсполнителей.ГруппаИсполнителей) <> ТИП(Справочник.ВнешниеПользователи)
	|	И НЕ ТаблицаГруппИсполнителей.ГруппаИсполнителей В (&ВсеПустыеСсылки)
	|	И ТИПЗНАЧЕНИЯ(ТаблицаГруппИсполнителей.Пользователь) = ТИП(Справочник.Пользователи)
	|	И ТаблицаГруппИсполнителей.Пользователь <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТаблицаГруппИсполнителей.ГруппаИсполнителей,
	|	ТаблицаГруппИсполнителей.Пользователь КАК ВнешнийПользователь
	|ПОМЕСТИТЬ ВнешниеПользователиГруппИсполнителей
	|ИЗ
	|	ТаблицаГруппИсполнителей КАК ТаблицаГруппИсполнителей
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(ТаблицаГруппИсполнителей.ГруппаИсполнителей) <> ТИП(Справочник.ГруппыПользователей)
	|	И ТИПЗНАЧЕНИЯ(ТаблицаГруппИсполнителей.ГруппаИсполнителей) <> ТИП(Справочник.Пользователи)
	|	И ТИПЗНАЧЕНИЯ(ТаблицаГруппИсполнителей.ГруппаИсполнителей) <> ТИП(Справочник.ГруппыВнешнихПользователей)
	|	И ТИПЗНАЧЕНИЯ(ТаблицаГруппИсполнителей.ГруппаИсполнителей) <> ТИП(Справочник.ВнешниеПользователи)
	|	И НЕ ТаблицаГруппИсполнителей.ГруппаИсполнителей В (&ВсеПустыеСсылки)
	|	И ТИПЗНАЧЕНИЯ(ТаблицаГруппИсполнителей.Пользователь) = ТИП(Справочник.ВнешниеПользователи)
	|	И ТаблицаГруппИсполнителей.Пользователь <> ЗНАЧЕНИЕ(Справочник.ВнешниеПользователи.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ТаблицаГруппИсполнителей";
	
	Если ГруппыИсполнителей = Неопределено
	   И Исполнители <> Неопределено Тогда
		
		Запрос.Текст = ТекстЗапросовВременныхТаблиц + "
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|" +
		"ВЫБРАТЬ
		|	ПользователиГруппИсполнителей.ГруппаИсполнителей
		|ИЗ
		|	ПользователиГруппИсполнителей КАК ПользователиГруппИсполнителей
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ВнешниеПользователиГруппИсполнителей.ГруппаИсполнителей
		|ИЗ
		|	ВнешниеПользователиГруппИсполнителей КАК ВнешниеПользователиГруппИсполнителей";
		
		РезультатыЗапросов = Запрос.ВыполнитьПакет();
		Количество = РезультатыЗапросов.Количество();
		
		ГруппыИсполнителей = РезультатыЗапросов[Количество-1].Выгрузить().ВыгрузитьКолонку("ГруппаИсполнителей");
		ТекстЗапросовВременныхТаблиц = Неопределено;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.Пользователи) КАК ВидДоступа,
	|	ПользователиГруппИсполнителей.ГруппаИсполнителей КАК ЗначениеДоступа,
	|	ЛОЖЬ КАК ТолькоВидДоступа,
	|	ПользователиГруппИсполнителей.Пользователь КАК ГруппаЗначенийДоступа,
	|	3 КАК ГруппаОбновляемыхДанных,
	|	ЛОЖЬ КАК НаследоватьПраваРодителей,
	|	ЛОЖЬ КАК СвязьСРодителем,
	|	ЛОЖЬ КАК ИспользоватьПраваСсылки,
	|	&ПодстановкаПоляВидИзмененияСтроки
	|ИЗ
	|	ПользователиГруппИсполнителей КАК ПользователиГруппИсполнителей
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.Пользователи),
	|	ПользователиГруппИсполнителей.ГруппаИсполнителей,
	|	ЛОЖЬ,
	|	СоставыГруппПользователей.ГруппаПользователей,
	|	3,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	&ПодстановкаПоляВидИзмененияСтроки
	|ИЗ
	|	ПользователиГруппИсполнителей КАК ПользователиГруппИсполнителей
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
	|		ПО ПользователиГруппИсполнителей.Пользователь = СоставыГруппПользователей.Пользователь
	|			И (ТИПЗНАЧЕНИЯ(СоставыГруппПользователей.ГруппаПользователей) = ТИП(Справочник.ГруппыПользователей))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.ВнешниеПользователи),
	|	ВнешниеПользователиГруппИсполнителей.ГруппаИсполнителей,
	|	ЛОЖЬ,
	|	ВнешниеПользователиГруппИсполнителей.ВнешнийПользователь,
	|	3,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	&ПодстановкаПоляВидИзмененияСтроки
	|ИЗ
	|	ВнешниеПользователиГруппИсполнителей КАК ВнешниеПользователиГруппИсполнителей
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.ВнешниеПользователи),
	|	ВнешниеПользователиГруппИсполнителей.ГруппаИсполнителей,
	|	ЛОЖЬ,
	|	СоставыГруппПользователей.ГруппаПользователей,
	|	3,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	&ПодстановкаПоляВидИзмененияСтроки
	|ИЗ
	|	ВнешниеПользователиГруппИсполнителей КАК ВнешниеПользователиГруппИсполнителей
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
	|		ПО ВнешниеПользователиГруппИсполнителей.ВнешнийПользователь = СоставыГруппПользователей.Пользователь
	|			И (ТИПЗНАЧЕНИЯ(СоставыГруппПользователей.ГруппаПользователей) = ТИП(Справочник.ГруппыВнешнихПользователей))";
	
	// Подготовка выбираемых полей с необязательным отбором.
	Поля = Новый Массив; 
	Поля.Добавить(Новый Структура("ВидДоступа"));
	Поля.Добавить(Новый Структура("ЗначениеДоступа",         "&УсловиеОтбораГруппИсполнителей"));
	Поля.Добавить(Новый Структура("ТолькоВидДоступа"));
	Поля.Добавить(Новый Структура("ГруппаЗначенийДоступа"));
	Поля.Добавить(Новый Структура("ГруппаОбновляемыхДанных", "&УсловиеОтбораГруппОбновляемыхДанных"));
	Поля.Добавить(Новый Структура("НаследоватьПраваРодителей"));
	Поля.Добавить(Новый Структура("СвязьСРодителем"));
	Поля.Добавить(Новый Структура("ИспользоватьПраваСсылки"));
	
	Запрос.Текст = УправлениеДоступомСлужебный.ТекстЗапросаВыбораИзменений(
		ТекстЗапроса, Поля, "РегистрСведений.ГруппыЗначенийДоступа", ТекстЗапросовВременныхТаблиц);
	
	УправлениеДоступомСлужебный.УстановитьУсловиеОтбораВЗапросе(Запрос, ГруппыИсполнителей, "ГруппыИсполнителей",
		"&УсловиеОтбораГруппИсполнителей:СтарыеДанные.ЗначениеДоступа");
	
	УправлениеДоступомСлужебный.УстановитьУсловиеОтбораВЗапросе(Запрос, 3, "ГруппаОбновляемыхДанных",
		"&УсловиеОтбораГруппОбновляемыхДанных:СтарыеДанные.ГруппаОбновляемыхДанных");
	
	Изменения = Запрос.Выполнить().Выгрузить();
	
	ФиксированныйОтбор = Новый Структура;
	ФиксированныйОтбор.Вставить("ТолькоВидДоступа", Ложь);
	ФиксированныйОтбор.Вставить("ГруппаОбновляемыхДанных", 3);
	
	УправлениеДоступомСлужебный.ОбновитьРегистрСведений(
		РегистрыСведений.ГруппыЗначенийДоступа, Изменения, ЕстьИзменения, ФиксированныйОтбор);
	
КонецПроцедуры

// Обновляет группировки пользователей для проверки разрешенных значений
// по видам доступа Пользователи и ВнешниеПользователи.
//
// <Состав поля ЗначениеДоступа>    <Состав поля ГруппаЗначенийДоступа>
//                            <Состав поля ГруппаОбновляемыхДанных>
// б) для вида доступа
// Внешние пользователи
// {cравнение с Т.<поле>}           {Сравнение с ЗначенияГруппДоступа.ЗначениеДоступа}
//                                  {Сравнение с &ТекущийВнешнийПользователь}
//
// Объект авторизации            4 - Внешний пользователь
//                                   того же объекта авторизации.
//
//                               4 - Группа внешних пользователей
//                                   внешнего пользователя
//                                   того же объекта авторизации.
//
Процедура ОбновитьОбъектыАвторизации(ОбъектыАвторизации = Неопределено, ЕстьИзменения = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.ВнешниеПользователи) КАК ВидДоступа,
	|	ВЫРАЗИТЬ(СоставыГруппПользователей.Пользователь КАК Справочник.ВнешниеПользователи).ОбъектАвторизации КАК ЗначениеДоступа,
	|	ЛОЖЬ КАК ТолькоВидДоступа,
	|	СоставыГруппПользователей.ГруппаПользователей КАК ГруппаЗначенийДоступа,
	|	4 КАК ГруппаОбновляемыхДанных,
	|	ЛОЖЬ КАК НаследоватьПраваРодителей,
	|	ЛОЖЬ КАК СвязьСРодителем,
	|	ЛОЖЬ КАК ИспользоватьПраваСсылки,
	|	&ПодстановкаПоляВидИзмененияСтроки
	|ИЗ
	|	РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(СоставыГруппПользователей.Пользователь) = ТИП(Справочник.ВнешниеПользователи)
	|	И НЕ ВЫРАЗИТЬ(СоставыГруппПользователей.Пользователь КАК Справочник.ВнешниеПользователи).ОбъектАвторизации В (&ВсеПустыеСсылки)
	|	И &УсловиеОтбораОбъектовАвторизации1";
	
	// Подготовка выбираемых полей с необязательным отбором.
	Поля = Новый Массив; 
	Поля.Добавить(Новый Структура("ВидДоступа"));
	Поля.Добавить(Новый Структура("ЗначениеДоступа",         "&УсловиеОтбораОбъектовАвторизации2"));
	Поля.Добавить(Новый Структура("ТолькоВидДоступа"));
	Поля.Добавить(Новый Структура("ГруппаЗначенийДоступа"));
	Поля.Добавить(Новый Структура("ГруппаОбновляемыхДанных", "&УсловиеОтбораГруппОбновляемыхДанных"));
	Поля.Добавить(Новый Структура("НаследоватьПраваРодителей"));
	Поля.Добавить(Новый Структура("СвязьСРодителем"));
	Поля.Добавить(Новый Структура("ИспользоватьПраваСсылки"));
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВсеПустыеСсылки",
		УправлениеДоступомСлужебныйПовтИсп.Параметры().ВсеПустыеСсылки);
	
	Запрос.Текст = УправлениеДоступомСлужебный.ТекстЗапросаВыбораИзменений(
		ТекстЗапроса, Поля, "РегистрСведений.ГруппыЗначенийДоступа");
	
	УправлениеДоступомСлужебный.УстановитьУсловиеОтбораВЗапросе(Запрос, ОбъектыАвторизации, "ОбъектыАвторизации",
		"&УсловиеОтбораОбъектовАвторизации1:ВЫРАЗИТЬ(СоставыГруппПользователей.Пользователь КАК Справочник.ВнешниеПользователи).ОбъектАвторизации
		|&УсловиеОтбораОбъектовАвторизации2:СтарыеДанные.ЗначениеДоступа");
	
	УправлениеДоступомСлужебный.УстановитьУсловиеОтбораВЗапросе(Запрос, 4, "ГруппаОбновляемыхДанных",
		"&УсловиеОтбораГруппОбновляемыхДанных:СтарыеДанные.ГруппаОбновляемыхДанных");
	
	Изменения = Запрос.Выполнить().Выгрузить();
	
	ФиксированныйОтбор = Новый Структура;
	ФиксированныйОтбор.Вставить("ТолькоВидДоступа", Ложь);
	ФиксированныйОтбор.Вставить("ГруппаОбновляемыхДанных", 4);
	
	УправлениеДоступомСлужебный.ОбновитьРегистрСведений(
		РегистрыСведений.ГруппыЗначенийДоступа, Изменения, ЕстьИзменения, ФиксированныйОтбор);
	
КонецПроцедуры

#КонецЕсли