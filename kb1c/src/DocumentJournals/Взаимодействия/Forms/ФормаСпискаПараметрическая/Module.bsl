&НаКлиенте
Перем КонтекстВыбора;

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Взаимодействия.ИнициализироватьФормуСпискаВзаимодействий(ЭтаФорма);
	Элементы.СписокСоздатьЭлектронноеПисьмоОтдельнаяКнопкаДерево.Видимость = ТолькоПочта;
	Элементы.ГруппаСоздатьДерево.Видимость = НЕ ТолькоПочта;
	Если ТолькоПочта Тогда
		ЗаголовокУчастникиПочта =  НСтр("ru = 'Кому, от'");
		Элементы.ДеревоВзаимодействийУчастники.Заголовок = ЗаголовокУчастникиПочта;
		Элементы.Участники.Заголовок = ЗаголовокУчастникиПочта;
	КонецЕсли;
	
	Если Параметры.Свойство("Отбор") Тогда
		Если Параметры.Отбор.Свойство("Предмет") Тогда
			
			Если Параметры.Свойство("ДополнительныеПараметры")
				И Параметры.ДополнительныеПараметры.Свойство("ТипВзаимодействия") Тогда
				
				Если Параметры.ДополнительныеПараметры.ТипВзаимодействия = "Взаимодействие" Тогда
					ПредметДляОтбора = Взаимодействия.ПолучитьЗначениеПредмета(Параметры.Отбор.Предмет);
					Параметры.Отбор.Предмет = ПредметДляОтбора ;
				ИначеЕсли Параметры.ДополнительныеПараметры.ТипВзаимодействия = "Предмет" Тогда
					ПредметДляОтбора = Параметры.Отбор.Предмет;
				КонецЕсли;
			КонецЕсли;
			
			Параметры.Отбор.Удалить("Предмет");
			УстановитьОтборПоПредмету();
			
		ИначеЕсли Параметры.Отбор.Свойство("Контакт") Тогда
			
			Контакт = Параметры.Отбор.Контакт;
			Параметры.Отбор.Удалить("Контакт");
			УстановитьОтборПоКонтакту();
			
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого ТипПредмета Из Метаданные.Документы.ЭлектронноеПисьмоИсходящее.Реквизиты.Предмет.Тип.Типы() Цикл
		СписокВыбораТипаПредмета.Добавить(Метаданные.НайтиПоТипу(ТипПредмета).ПолноеИмя(),Строка(ТипПредмета));
	КонецЦикла;
	
	Взаимодействия.ЗаполнитьСписокДоступныхДляСозданияДокументов(ДокументыДоступныеДляСоздания);
	
	ТипВзаимодействия = ?(ТолькоПочта,"ВсеПисьма","Все");
	Статус = "Все";
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	Статус = Настройки.Получить("Статус");
	Если Статус <> Неопределено Тогда
		Настройки.Удалить("Статус");
	КонецЕсли;
	Если Не ИспользоватьПризнакРассмотрено Или НЕ ЗначениеЗаполнено(Статус) Тогда
		Статус = "Все";
	КонецЕсли;
	Ответственный = Настройки.Получить("Ответственный");
	Если Ответственный <> Неопределено Тогда
		Настройки.Удалить("Ответственный");
	КонецЕсли;
	ВВидеДерева = Настройки.Получить("ВВидеДерева");
	Если ВВидеДерева <> Неопределено Тогда
		Настройки.Удалить("ВВидеДерева");
	КонецЕсли;
	
	Взаимодействия.ПриЗагрузкеТипаВзаимодействийИзНастроек(ЭтаФорма, Настройки);
	
	УправлениеСтраницамиСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ВзаимодействияКлиентСервер.ЯвляетсяВзаимодействием(Источник) Тогда
		Если Элементы.СтраницыСписокДерево.ТекущаяСтраница = Элементы.СтраницаДерево Тогда
			ЗаполнитьДеревоВзаимодействийКлиент();
		Иначе
			Если ОтборПоПредмету Тогда
				УстановитьОтборПоПредмету();
			Иначе
				УстановитьОтборПоКонтакту();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ВРег(ИсточникВыбора.ИмяФормы) = ВРег("Справочник.Пользователи.Форма.ФормаСписка") Тогда
		
		Если ВыбранноеЗначение <> Неопределено Тогда
			
			ВыполненаЗамена = Ложь;
			УстановитьОтветственного(ВыбранноеЗначение, ВыполненаЗамена);
			
			Если Элементы.СтраницыСписокДерево.ТекущаяСтраница = Элементы.СтраницаСписок Тогда
				Если ВыполненаЗамена Тогда
					Элементы.Список.Обновить();
				КонецЕсли;
			Иначе
				Если ВыполненаЗамена Тогда
					РазвернутьВсеСтрокиДерева();
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли КонтекстВыбора = "ПредметВыполнить" Тогда
		
		Если ВыбранноеЗначение <> Неопределено Тогда
			
			Если ОтборПоПредмету И ПредметДляОтбора = ВыбранноеЗначение Тогда
				Возврат;
			КонецЕсли;
			
			ВыполненаЗамена = Ложь;
			УстановитьПредмет(ВыбранноеЗначение, ВыполненаЗамена);
			
			Если Элементы.СтраницыСписокДерево.ТекущаяСтраница = Элементы.СтраницаСписок Тогда
				Если ВыполненаЗамена Тогда
					Элементы.Список.Обновить();
				КонецЕсли;
			Иначе
				Если ВыполненаЗамена Тогда
					РазвернутьВсеСтрокиДерева();
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ОтветственныйПриИзменении(Элемент)
	
	Если Элементы.СтраницыСписокДерево.ТекущаяСтраница = Элементы.СтраницаСписок Тогда
		
		ВзаимодействияКлиентСервер.БыстрыйОтборСписокПриИзменении(ЭтаФорма,Элемент.Имя,ОтборПоПредмету);
		
	Иначе
		
		ЗаполнитьДеревоВзаимодействийКлиент();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
	
	Если Элементы.СтраницыСписокДерево.ТекущаяСтраница = Элементы.СтраницаСписок Тогда
		
		ВзаимодействияКлиентСервер.БыстрыйОтборСписокПриИзменении(ЭтаФорма,Элемент.Имя,ОтборПоПредмету);
		
	Иначе
		
		ЗаполнитьДеревоВзаимодействийКлиент();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	ВзаимодействияКлиент.СписокПередНачаломДобавления(
		Элемент,Отказ,Копирование,ТолькоПочта,ДокументыДоступныеДляСоздания,
		Новый Структура("ЗначенияЗаполнения",Новый Структура("Предмет,Контакт",ПредметДляОтбора,Контакт)));
	
КонецПроцедуры 

&НаКлиенте
Процедура ДеревоВзаимодействийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьЗначение(ТекущиеДанные.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоВзаимодействийПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	Если Элементы.ДеревоВзаимодействий.ВыделенныеСтроки.Количество() > 0 Тогда
		
		ЕстьПомеченныеНаУдаление = Ложь;
		Для каждого ВыделеннаяСтрока Из Элементы.ДеревоВзаимодействий.ВыделенныеСтроки Цикл
			Если Элементы.ДеревоВзаимодействий.ДанныеСтроки(ВыделеннаяСтрока).ПометкаУдаления Тогда
				ЕстьПомеченныеНаУдаление = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ЕстьПомеченныеНаУдаление Тогда
			ТекстВопроса = НСтр("ru = 'Снять с выделенных элементов пометку на удаление?'");
		Иначе
			ТекстВопроса = НСтр("ru = 'Пометить выделенные строки на удаление?'");
		КонецЕсли;
		
		Результат = Вопрос(ТекстВопроса,РежимДиалогаВопрос.ДаНет);
		Если Результат=КодВозвратаДиалога.Да Тогда
			ОбработатьИзменениеПометкиУдаленияВДереве(Элементы.ДеревоВзаимодействий.ВыделенныеСтроки, ЕстьПомеченныеНаУдаление);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ДеревоВзаимодействийПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьЗначение(ТекущиеДанные.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоВзаимодействийПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	Если Копирование Тогда
		ТекущиеДанные = Элемент.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			Если ТипЗнч(ТекущиеДанные.Ссылка) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") ИЛИ
				ТипЗнч(ТекущиеДанные.Ссылка) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее") Тогда
				
				Предупреждение(НСтр("ru = 'Копирование электронных писем запрещено'"));
				
			ИначеЕсли ТипЗнч(ТекущиеДанные.Ссылка) = Тип("ДокументСсылка.Встреча") Тогда
				
				ОткрытьФорму("Документ.Встреча.ФормаОбъекта",
					Новый Структура("ЗначениеКопирования", ТекущиеДанные.Ссылка), ЭтаФорма);
				
			ИначеЕсли ТипЗнч(ТекущиеДанные.Ссылка) = Тип("ДокументСсылка.ЗапланированноеВзаимодействие") Тогда
				
				ОткрытьФорму("Документ.ЗапланированноеВзаимодействие.ФормаОбъекта",
					Новый Структура("ЗначениеКопирования", ТекущиеДанные.Ссылка), ЭтаФорма);
				
			ИначеЕсли ТипЗнч(ТекущиеДанные.Ссылка) = Тип("ДокументСсылка.ТелефонныйЗвонок") Тогда
				
				ОткрытьФорму("Документ.ТелефонныйЗвонок.ФормаОбъекта", 
					Новый Структура("ЗначениеКопирования",ТекущиеДанные.Ссылка), ЭтаФорма);
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипВзаимодействияПриИзменении(Элемент)
	
	Если Элементы.СтраницыСписокДерево.ТекущаяСтраница = Элементы.СтраницаСписок Тогда
		ВзаимодействияКлиентСервер.ПриИзмененииОтбораТипВзаимодействий(ЭтаФорма, ТипВзаимодействия);
	Иначе
		ЗаполнитьДеревоВзаимодействийКлиент();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТипВзаимодействияСтатусОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
//установить флаг "Рассмотрено" в выбранных взаимодействиях - клиентская часть
Процедура РассмотреноВыполнить(Команда)
	
	Если НЕ ВыборКорректен() Тогда
		Возврат;
	КонецЕсли;
	
	ФлагРассмотрено = (Не Команда.Имя = "НеРассмотрено");
	
	ВыполненаЗамена = Ложь;
	УстановитьФлагРассмотрено(ВыполненаЗамена, ФлагРассмотрено);
	
	Если Элементы.СтраницыСписокДерево.ТекущаяСтраница = Элементы.СтраницаСписок Тогда
		
		Если ВыполненаЗамена Тогда
			Элементы.Список.Обновить();
		КонецЕсли;
		
	Иначе
		
		Если ВыполненаЗамена Тогда
			РазвернутьВсеСтрокиДерева();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
//установить ответственного в выбранных взаимодействиях - клиентская часть
Процедура ОтветственныйВыполнить()
	
	Если НЕ ВыборКорректен() Тогда
		Возврат;
	КонецЕсли;
	
	КонтекстВыбора = Неопределено;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	
	ОткрытьФорму("Справочник.Пользователи.Форма.ФормаСписка", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
//установить предмет в выбранных взаимодействиях - клиентская часть
Процедура ПредметВыполнить()
	
	Если НЕ ВыборКорректен() Тогда
		Возврат;
	КонецЕсли;
	
	ВыбранныйТипПредмета = 
		СписокВыбораТипаПредмета.ВыбратьЭлемент(Нстр("ru = 'Выберите тип предмета'"));
	Если ВыбранныйТипПредмета = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КонтекстВыбора = "ПредметВыполнить";
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	
	ОткрытьФорму(ВыбранныйТипПредмета.Значение + ".ФормаВыбора", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьИнтервал(Команда)
	
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	Диалог.Период = Интервал;
	Если Диалог.Редактировать() Тогда 
		Интервал = Диалог.Период;
		ЗаполнитьДеревоВзаимодействийКлиент();
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
//устанавливает реквизит "отработать после" в выбранных взаимодействиях - клиентская часть
Процедура ОтложитьРассмотрениеВыполнить(Команда)
	
	Если НЕ ВыборКорректен() Тогда
		Возврат;
	КонецЕсли;
	
	ДатаОтработки = ОбщегоНазначенияКлиент.ДатаСеанса();
	Если ВвестиДату(ДатаОтработки, "Отработать после") Тогда
		
		ВыполненаЗамена = Ложь;
		ОтложитьРассмотрение(ДатаОтработки,ВыполненаЗамена);
		
		Если Элементы.СтраницыСписокДерево.ТекущаяСтраница = Элементы.СтраницаСписок Тогда
			
			Если ВыполненаЗамена Тогда
				Элементы.Список.Обновить();
			КонецЕсли;
			
		Иначе
			
			Если ВыполненаЗамена Тогда
				РазвернутьВсеСтрокиДерева();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьВстречу(Команда)
	
	СоздатьНовоеВзаимодействие("Встреча");
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗапланированноеВзаимодействие(Команда)
	
	СоздатьНовоеВзаимодействие("ЗапланированноеВзаимодействие");
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьТелефонныйЗвонок(Команда)
	
	СоздатьНовоеВзаимодействие("ТелефонныйЗвонок");
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЭлектронноеПисьмо(Команда)
	
	СоздатьНовоеВзаимодействие("ЭлектронноеПисьмоИсходящее");
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовоеВзаимодействие(ТипОбъекта)

	ВзаимодействияКлиент.СоздатьНовоеВзаимодействие(
	          ТипОбъекта,
	          Новый Структура("ЗначенияЗаполнения",Новый Структура("Предмет,Контакт",ПредметДляОтбора,Контакт)));

КонецПроцедуры

&НаКлиенте
Процедура СоздатьСообщениеSMS(Команда)
	
	СоздатьНовоеВзаимодействие("СообщениеSMS");
	
КонецПроцедуры

&НаКлиенте
Процедура ПереключитьРежимПросмотра(Команда)
	
	ПереключитьРежимПросмотраСервер();
	
КонецПроцедуры 

&НаКлиенте
Процедура ОбновитьДерево(Команда)
	
	ЗаполнитьДеревоВзаимодействийКлиент();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
//установить флаг "Рассмотрено" в выбранных взаимодействиях - серверная часть
Процедура УстановитьФлагРассмотрено(ВыполненаЗамена, ФлагРассмотрено)
	
	Если Элементы.СтраницыСписокДерево.ТекущаяСтраница = Элементы.СтраницаСписок Тогда
		
		ВыделенныеСтроки = Элементы.Список.ВыделенныеСтроки;
		
		ТипГруппировка = Тип("СтрокаГруппировкиДинамическогоСписка");
		Для Каждого Взаимодействие Из ВыделенныеСтроки Цикл
			Если ЗначениеЗаполнено(Взаимодействие)
				И ТипЗнч(Взаимодействие) <> ТипГруппировка
				И (НЕ Взаимодействие.Рассмотрено = ФлагРассмотрено) Тогда
					ИзменитьПризнакРассмотрено(Взаимодействие, ФлагРассмотрено);
					ВыполненаЗамена = Истина;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		ВыделенныеСтроки = Элементы.ДеревоВзаимодействий.ВыделенныеСтроки;
		
		Для каждого Взаимодействие Из ВыделенныеСтроки Цикл
		
			ЭлементДерева = ДеревоВзаимодействий.НайтиПоИдентификатору(Взаимодействие);
			Если ЭлементДерева <> Неопределено И (НЕ ЭлементДерева.Рассмотрено = ФлагРассмотрено) Тогда
				ИзменитьПризнакРассмотрено(ЭлементДерева.Ссылка, ФлагРассмотрено);
				ВыполненаЗамена = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ВыполненаЗамена Тогда
			ЗаполнитьДеревоВзаимодействий();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
//установить ответственного в выбранных взаимодействиях - серверная часть
//Параметры:
//  Взаимодействия - список выбранных взаимодействий
//  Ответственный - устанавливаемый ответственный
Процедура УстановитьОтветственного(Ответственный,ВыполненаЗамена = Ложь)
	
	Если Элементы.СтраницыСписокДерево.ТекущаяСтраница = Элементы.СтраницаСписок Тогда
		
		ВыделенныеСтроки = Элементы.Список.ВыделенныеСтроки;
		
		ТипГруппировка = Тип("СтрокаГруппировкиДинамическогоСписка");
		Для Каждого Взаимодействие Из ВыделенныеСтроки Цикл
			Если ЗначениеЗаполнено(Взаимодействие)
				И ТипЗнч(Взаимодействие) <> ТипГруппировка
				И Взаимодействие.Ответственный <> Ответственный Тогда
					УстановитьОтветственногоУВзаимодействия(Взаимодействие, Ответственный);
					ВыполненаЗамена = Истина;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		ВыделенныеСтроки = Элементы.ДеревоВзаимодействий.ВыделенныеСтроки;
		
		Для каждого Взаимодействие Из ВыделенныеСтроки Цикл
		
			ЭлементДерева = ДеревоВзаимодействий.НайтиПоИдентификатору(Взаимодействие);
			Если ЭлементДерева <> Неопределено И ЭлементДерева.Ответственный <> Ответственный Тогда
				УстановитьОтветственногоУВзаимодействия(ЭлементДерева.Ссылка, Ответственный);
				ВыполненаЗамена = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ВыполненаЗамена Тогда
				ЗаполнитьДеревоВзаимодействий();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьОтветственногоУВзаимодействия(Взаимодействие, Ответственный)
	
	Объект = Взаимодействие.ПолучитьОбъект();
	Объект.РассмотретьПосле = '0001.01.01';
	Объект.Ответственный    = Ответственный;
	Объект.Записать();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ИзменитьПризнакРассмотрено(Взаимодействие, ФлагРассмотрено)
	
	Объект = Взаимодействие.ПолучитьОбъект();
	Объект.Рассмотрено = ФлагРассмотрено;
	Объект.Записать();
	
КонецПроцедуры 

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьДатуОтработкиУВзаимодействия(Взаимодействие, ДатаОтработки)
	
	Объект = Взаимодействие.ПолучитьОбъект();
	Объект.РассмотретьПосле = ДатаОтработки;
	Объект.Записать();
	
КонецПроцедуры 

&НаСервере
//установить предмет в выбранных взаимодействиях - серверная часть
Процедура УстановитьПредмет(Предмет,ВыполненаЗамена)
	
	Если Элементы.СтраницыСписокДерево.ТекущаяСтраница = Элементы.СтраницаСписок Тогда
		
		ВыделенныеСтроки = Элементы.Список.ВыделенныеСтроки;
		
		ТипГруппировка = Тип("СтрокаГруппировкиДинамическогоСписка");
		Для Каждого Взаимодействие Из ВыделенныеСтроки Цикл
			Если ЗначениеЗаполнено(Взаимодействие)
				И ТипЗнч(Взаимодействие) <> ТипГруппировка
				И Взаимодействие.Ответственный <> Ответственный Тогда
					Взаимодействия.УстановитьПредмет(Взаимодействие, Предмет);
					ВыполненаЗамена = Истина;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		ВыделенныеСтроки = Элементы.ДеревоВзаимодействий.ВыделенныеСтроки;
		
		Для каждого Взаимодействие Из ВыделенныеСтроки Цикл
		
			ЭлементДерева = ДеревоВзаимодействий.НайтиПоИдентификатору(Взаимодействие);
			Если ЭлементДерева <> Неопределено И ЭлементДерева.Предмет <> Предмет Тогда
				Взаимодействия.УстановитьПредмет(ЭлементДерева.Ссылка, Предмет);
				ВыполненаЗамена = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ВыполненаЗамена Тогда
				ЗаполнитьДеревоВзаимодействий();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
//устанавливает реквизит "отработать после" в выбранных взаимодействиях - серверная часть
Процедура ОтложитьРассмотрение(ДатаОтработки,ВыполненаЗамена = Ложь)
	
	Если Элементы.СтраницыСписокДерево.ТекущаяСтраница = Элементы.СтраницаСписок Тогда
		
		ВыделенныеСтроки = Элементы.Список.ВыделенныеСтроки;
		
		ТипГруппировка = Тип("СтрокаГруппировкиДинамическогоСписка");
		Для Каждого Взаимодействие Из ВыделенныеСтроки Цикл
			Если ЗначениеЗаполнено(Взаимодействие)
				И ТипЗнч(Взаимодействие) <> ТипГруппировка Тогда
					УстановитьДатуОтработкиУВзаимодействия(Взаимодействие, ДатаОтработки);
					ВыполненаЗамена = Истина;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		ВыделенныеСтроки = Элементы.ДеревоВзаимодействий.ВыделенныеСтроки;
		
		Для каждого Взаимодействие Из ВыделенныеСтроки Цикл
		
			ЭлементДерева = ДеревоВзаимодействий.НайтиПоИдентификатору(Взаимодействие);
			Если ЭлементДерева <> Неопределено Тогда
				УстановитьДатуОтработкиУВзаимодействия(ЭлементДерева.Ссылка, ДатаОтработки);
				ВыполненаЗамена = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
		Если ВыполненаЗамена Тогда
			ЗаполнитьДеревоВзаимодействий();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ВыборКорректен()
	
	Если Элементы.СтраницыСписокДерево.ТекущаяСтраница = Элементы.СтраницаСписок Тогда
		
		Если Элементы.Список.ВыделенныеСтроки.Количество() = 0 Тогда
			Возврат Ложь;
		КонецЕсли;
		
		Для Каждого Элемент Из Элементы.Список.ВыделенныеСтроки Цикл
			Если ТипЗнч(Элемент) <> Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
		
		Возврат Ложь;
		
	Иначе
		
		Если Элементы.ДеревоВзаимодействий.ВыделенныеСтроки.Количество() = 0 Тогда
			Возврат Ложь;
		Иначе
			Возврат Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ПереключитьРежимПросмотраСервер()
	
	ВВидеДерева = НЕ ВВидеДерева;
	
	УправлениеСтраницамиСервер();
	
КонецПроцедуры

&НаСервере
Процедура УправлениеСтраницамиСервер()

	Если ВВидеДерева Тогда
		Интервал = Элементы.Список.Период;
		Команды.ПереключитьРежимПросмотра.Подсказка = НСтр("ru = 'Установить режим просмотра в виде списка'");
		Элементы.СтраницыСписокДерево.ТекущаяСтраница = Элементы.СтраницаДерево;
		ЗаполнитьДеревоВзаимодействий();
	Иначе
		Элементы.Список.Период = Интервал;
		Команды.ПереключитьРежимПросмотра.Подсказка = НСтр("ru = 'Установить режим просмотра в виде дерева'");
		Элементы.СтраницыСписокДерево.ТекущаяСтраница = Элементы.СтраницаСписок;
		ВзаимодействияКлиентСервер.БыстрыйОтборСписокПриИзменении(ЭтаФорма,"Статус", ОтборПоПредмету);
		ВзаимодействияКлиентСервер.БыстрыйОтборСписокПриИзменении(ЭтаФорма,"Ответственный", ОтборПоПредмету);
		ВзаимодействияКлиентСервер.ПриИзмененииОтбораТипВзаимодействий(ЭтаФорма, ТипВзаимодействия);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоВзаимодействий()
	
	Запрос = Новый Запрос;
	
	Если ОтборПоПредмету Тогда
		СхемаОтбора = ЖурналыДокументов.Взаимодействия.ПолучитьМакет("ИерархияВзаимодействийПредмет");
	Иначе
		СхемаОтбора = ЖурналыДокументов.Взаимодействия.ПолучитьМакет("ИерархияВзаимодействийКонтакт");
	КонецЕсли;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаОтбора));
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаОтбора.НастройкиПоУмолчанию);
	
	Если ОтборПоПредмету Тогда
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(КомпоновщикНастроек.Настройки.Отбор,
			"Предмет", ВидСравненияКомпоновкиДанных.Равно, ПредметДляОтбора);
	Иначе
		КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Контакт",Контакт);
	КонецЕсли;
	
	КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Интервал",Интервал);
	
	ОтборНастройщикаКомпоновок = КомпоновщикНастроек.Настройки.Отбор;
	
	Если ТолькоПочта Тогда
		
		СписокТипыПрочиеВзаимодействия = Новый СписокЗначений;
		СписокТипыПрочиеВзаимодействия.Добавить(Тип("ДокументСсылка.Встреча"));
		СписокТипыПрочиеВзаимодействия.Добавить(Тип("ДокументСсылка.ЗапланированноеВзаимодействие"));
		СписокТипыПрочиеВзаимодействия.Добавить(Тип("ДокументСсылка.ТелефонныйЗвонок"));
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ОтборНастройщикаКомпоновок, 
			"Тип", ВидСравненияКомпоновкиДанных.НеВСписке, СписокТипыПрочиеВзаимодействия);
		
	КонецЕсли;
	
	//Быстрый отбор "Ответственный"
	Если НЕ Ответственный.Пустая() Тогда
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ОтборНастройщикаКомпоновок,"Ответственный",
			ВидСравненияКомпоновкиДанных.Равно, Ответственный);
	КонецЕсли;
	
	//Быстрый отбор "Статус"
	Если Статус = "КРассмотрению" Тогда
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ОтборНастройщикаКомпоновок,
			"Рассмотрено", ВидСравненияКомпоновкиДанных.Равно, Ложь);
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ОтборНастройщикаКомпоновок, 
			"РассмотретьПосле", ВидСравненияКомпоновкиДанных.МеньшеИлиРавно, ТекущаяДатаСеанса());
	ИначеЕсли Статус = "Отложенные" Тогда
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ОтборНастройщикаКомпоновок,
			"Рассмотрено", ВидСравненияКомпоновкиДанных.Равно, Ложь);
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ОтборНастройщикаКомпоновок,
			"РассмотретьПосле", ВидСравненияКомпоновкиДанных.Заполнено,);
	ИначеЕсли Статус = "Рассмотренные" Тогда
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ОтборНастройщикаКомпоновок, 
			"Рассмотрено" ,ВидСравненияКомпоновкиДанных.Равно, Истина);
	КонецЕсли;
	
	//Быстрый отбор "Тип взаимодействия"
	Если ТипВзаимодействия = "ВсеПисьма" И Не ТолькоПочта Тогда
		
		СписокТипыПисьма = Новый СписокЗначений;
		СписокТипыПисьма.Добавить(Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее"));
		СписокТипыПисьма.Добавить(Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее"));
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ОтборНастройщикаКомпоновок,
			"Тип",ВидСравненияКомпоновкиДанных.ВСписке,СписокТипыПисьма);
		
	ИначеЕсли ТипВзаимодействия = "ВходящиеПисьма" Тогда
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ОтборНастройщикаКомпоновок, 
			"Тип",ВидСравненияКомпоновкиДанных.Равно,Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее"));
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ОтборНастройщикаКомпоновок, 
			"ПометкаУдаления", ВидСравненияКомпоновкиДанных.Равно, Ложь);
		
	ИначеЕсли ТипВзаимодействия = "ПисьмаЧерновики" Тогда
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ОтборНастройщикаКомпоновок, 
			"Тип",ВидСравненияКомпоновкиДанных.Равно,Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее"));
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ОтборНастройщикаКомпоновок, 
			"ПометкаУдаления",ВидСравненияКомпоновкиДанных.Равно,Ложь);
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ОтборНастройщикаКомпоновок, 
			"СтатусИсходящегоПисьма", ВидСравненияКомпоновкиДанных.Равно, 
			Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Черновик);
		
	ИначеЕсли ТипВзаимодействия = "ИсходящиеПисьма" Тогда
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ОтборНастройщикаКомпоновок, 
			"Тип",ВидСравненияКомпоновкиДанных.Равно,Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее"));
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ОтборНастройщикаКомпоновок, 
			"ПометкаУдаления",ВидСравненияКомпоновкиДанных.Равно,Ложь);
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ОтборНастройщикаКомпоновок, 
			"СтатусИсходящегоПисьма", ВидСравненияКомпоновкиДанных.Равно, 
			Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Исходящее);
		
	ИначеЕсли ТипВзаимодействия = "Отправленные" Тогда
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ОтборНастройщикаКомпоновок,
			"Тип",ВидСравненияКомпоновкиДанных.Равно, Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее"));
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ОтборНастройщикаКомпоновок, 
			"ПометкаУдаления", ВидСравненияКомпоновкиДанных.Равно, Ложь);
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ОтборНастройщикаКомпоновок, "СтатусИсходящегоПисьма",
			ВидСравненияКомпоновкиДанных.Равно, 
			Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Отправлено);
		
	ИначеЕсли ТипВзаимодействия = "УдаленныеПисьма" Тогда
		
		СписокТипыПисьма = Новый СписокЗначений;
		СписокТипыПисьма.Добавить(Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее"));
		СписокТипыПисьма.Добавить(Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее"));
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ОтборНастройщикаКомпоновок, 
			"Тип", ВидСравненияКомпоновкиДанных.ВСписке, СписокТипыПисьма);
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ОтборНастройщикаКомпоновок,
			"ПометкаУдаления", ВидСравненияКомпоновкиДанных.Равно, Истина);
		
	ИначеЕсли ТипВзаимодействия = "Встречи" Тогда
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ОтборНастройщикаКомпоновок,
			"Тип", ВидСравненияКомпоновкиДанных.Равно, Тип("ДокументСсылка.Встреча"));
		
	ИначеЕсли ТипВзаимодействия = "ЗапланированныеВзаимодействия" Тогда
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ОтборНастройщикаКомпоновок,
			"Тип", ВидСравненияКомпоновкиДанных.Равно, Тип("ДокументСсылка.ЗапланированноеВзаимодействие"));
		
	ИначеЕсли ТипВзаимодействия = "ТелефонныеЗвонки" Тогда
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ОтборНастройщикаКомпоновок,
			"Тип",ВидСравненияКомпоновкиДанных.Равно, Тип("ДокументСсылка.ТелефонныйЗвонок"));
		
	ИначеЕсли ТипВзаимодействия = "ИсходящиеЗвонки" Тогда
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ОтборНастройщикаКомпоновок,
			"Тип",ВидСравненияКомпоновкиДанных.Равно,Тип("ДокументСсылка.ТелефонныйЗвонок"));
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ОтборНастройщикаКомпоновок,
			"Входящий",ВидСравненияКомпоновкиДанных.Равно,Ложь);
		
	ИначеЕсли ТипВзаимодействия = "ВходящиеЗвонки" Тогда
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ОтборНастройщикаКомпоновок,
			"Тип",ВидСравненияКомпоновкиДанных.Равно,Тип("ДокументСсылка.ТелефонныйЗвонок"));
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ОтборНастройщикаКомпоновок,
			"Входящий",ВидСравненияКомпоновкиДанных.Равно,Истина);
		
	ИначеЕсли ТипВзаимодействия = "СообщенияSMS" Тогда
		
		ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(ОтборНастройщикаКомпоновок,
			"Тип",ВидСравненияКомпоновкиДанных.Равно,Тип("ДокументСсылка.СообщениеSMS"));
		
	КонецЕсли;
	
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаОтбора, КомпоновщикНастроек.ПолучитьНастройки(),,,
		Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	// Инициализация процессора компоновки
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных);
	
	ДеревоОбъект = РеквизитФормыВЗначение("ДеревоВзаимодействий");
	ДеревоОбъект.Строки.Очистить();
	
	// Получение результата
	ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений =
		Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений.УстановитьОбъект(ДеревоОбъект);
	ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений.Вывести(ПроцессорКомпоновкиДанных);
	
	ЗначениеВРеквизитФормы(ДеревоОбъект,"ДеревоВзаимодействий");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДеревоВзаимодействийКлиент()

	ЗаполнитьДеревоВзаимодействий();
	РазвернутьВсеСтрокиДерева();
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьВсеСтрокиДерева()

	Для каждого СтрокаВерхнегоУровня Из ДеревоВзаимодействий.ПолучитьЭлементы() Цикл
		Элементы.ДеревоВзаимодействий.Развернуть(СтрокаВерхнегоУровня.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьИзменениеПометкиУдаленияВДереве(ЗНАЧ ВыделенныеСтроки,СниматьПометку);
	
	Для каждого ВыделеннаяСтрока Из ВыделенныеСтроки Цикл
		
		ДанныеСтроки =ДеревоВзаимодействий.НайтиПоИдентификатору(ВыделеннаяСтрока);
		Если ДанныеСтроки.ПометкаУдаления = СниматьПометку Тогда
			ВзаимодействиеОбъект = ДанныеСтроки.Ссылка.ПолучитьОбъект();
			ВзаимодействиеОбъект.УстановитьПометкуУдаления(Не СниматьПометку);
			ДанныеСтроки.ПометкаУдаления = НЕ ДанныеСтроки.ПометкаУдаления;
			ДанныеСтроки.НомерКартинки = ?(СниматьПометку,
			                               ДанныеСтроки.НомерКартинки - ?(ДанныеСтроки.Рассмотрено,5,10),
			                               ДанныеСтроки.НомерКартинки + ?(ДанныеСтроки.Рассмотрено,5,10));
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры 

//Получает массив, который передается в качестве параметра запроса при получении взаимодействий по контакту
//
//Параметры
//  Контакт  - Ссылка - контакт, для которого необходимо выполнить поиск связанных контактов. 
//
//Возвращаемое значение:
//  Массив
//
&НаСервере
Функция ПолучитьПараметрКонтактВЗависимостиОтТипа(Контакт)
	
	МассивОписанияКонтактов = ВзаимодействияКлиентСервер.ПолучитьМассивОписанияВозможныхКонтактов();
	ЕстьДополнительныеТаблицы = Ложь;
	ТекстЗапроса = "";
	ИмяТаблицыКонтакта = Контакт.Метаданные().Имя;
	
	Для каждого ЭлементМассиваОписания Из МассивОписанияКонтактов Цикл
		
		Если ЭлементМассиваОписания.Имя = ИмяТаблицыКонтакта Тогда
			ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	Таблица.Ссылка КАК Контакт
			|ИЗ
			|	Справочник." + ЭлементМассиваОписания.Имя + " КАК Таблица
			|ГДЕ
			|	Таблица.Ссылка = &Контакт";
			
			Связь = ЭлементМассиваОписания.Связь;
			
			Если НЕ ПустаяСтрока(Связь) Тогда
				
				ТекстЗапроса = ТекстЗапроса + "
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|   
				|ВЫБРАТЬ
				|	Таблица.Ссылка 
				|ИЗ
				|	Справочник." + Лев(Связь,Найти(Связь,".")-1) + " КАК Таблица
				|ГДЕ
				|	Таблица." + Прав(Связь,СтрДлина(Связь) - Найти(Связь,".")) + " = &Контакт"; 
				
				ЕстьДополнительныеТаблицы = Истина;
				
			КонецЕсли;
			
		ИначеЕсли ЭлементМассиваОписания.ИмяВладельца = ИмяТаблицыКонтакта Тогда
			
			ТекстЗапроса = ТекстЗапроса + "
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	Таблица.Ссылка
			|ИЗ
			|	Справочник." + ЭлементМассиваОписания.Имя + " КАК Таблица
			|ГДЕ
			|	Таблица.Владелец = &Контакт";
			
			ЕстьДополнительныеТаблицы = Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ПустаяСтрока(ТекстЗапроса) ИЛИ (НЕ ЕстьДополнительныеТаблицы) Тогда
		Возврат Новый Массив;
	Иначе
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("Контакт",Контакт);
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			Возврат Новый Массив;
		Иначе
			Возврат РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Контакт");
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура УстановитьОтборПоКонтакту()

	Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
			|	ВстречаУчастники.Ссылка КАК Ссылка
			|ИЗ
			|	Документ.Встреча.Участники КАК ВстречаУчастники
			|ГДЕ
			|	ВстречаУчастники.Контакт В(&Контакт)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	СообщениеSMSАдресаты.Ссылка
			|ИЗ
			|	Документ.СообщениеSMS.Адресаты КАК СообщениеSMSАдресаты
			|ГДЕ
			|	СообщениеSMSАдресаты.Контакт В(&Контакт)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ТелефонныйЗвонок.Ссылка
			|ИЗ
			|	Документ.ТелефонныйЗвонок КАК ТелефонныйЗвонок
			|ГДЕ
			|	ТелефонныйЗвонок.АбонентКонтакт В(&Контакт)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ЭлектронноеПисьмоВходящее.Ссылка
			|ИЗ
			|	Документ.ЭлектронноеПисьмоВходящее КАК ЭлектронноеПисьмоВходящее
			|ГДЕ
			|	ЭлектронноеПисьмоВходящее.ОтправительКонтакт В(&Контакт)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ЭлектронноеПисьмоИсходящееПолучателиПисьма.Ссылка
			|ИЗ
			|	Документ.ЭлектронноеПисьмоИсходящее.ПолучателиПисьма КАК ЭлектронноеПисьмоИсходящееПолучателиПисьма
			|ГДЕ
			|	ЭлектронноеПисьмоИсходящееПолучателиПисьма.Контакт В(&Контакт)
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ЗапланированноеВзаимодействиеУчастники.Ссылка
			|ИЗ
			|	Документ.ЗапланированноеВзаимодействие.Участники КАК ЗапланированноеВзаимодействиеУчастники
			|ГДЕ
			|	ЗапланированноеВзаимодействиеУчастники.Контакт В(&Контакт)");
			
	МассивПараметрКонтакт = ПолучитьПараметрКонтактВЗависимостиОтТипа(Контакт);
	Если МассивПараметрКонтакт.Количество() = 0 Тогда
		МассивПараметрКонтакт.Добавить(Контакт);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Контакт",МассивПараметрКонтакт);
	
	СписокОтбора = Новый СписокЗначений;
	СписокОтбора.ЗагрузитьЗначения(
	Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, 
		"Ссылка",СписокОтбора,ВидСравненияКомпоновкиДанных.ВСписке,,Истина);

КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоПредмету()

	ОтборПоПредмету = Истина;
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(Список, "Предмет",
				ПредметДляОтбора,ВидСравненияКомпоновкиДанных.Равно,,Истина);

КонецПроцедуры
