////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	// Чтение хранилища значений
	Если ТекущийОбъект.ПисьмоВФорматеHTML Тогда
		СтруктураВложенийПисьмаВФорматеHTML = ТекущийОбъект.КартинкиПисьмаВФорматеHTML.Получить();
		Если СтруктураВложенийПисьмаВФорматеHTML = Неопределено Тогда
			СтруктураВложенийПисьмаВФорматеHTML = Новый Структура;
		КонецЕсли;
		ТекстПисьмаФорматированныйДокумент.УстановитьHTML(ТекущийОбъект.ТекстПисьмаВФорматеHTML, СтруктураВложенийПисьмаВФорматеHTML);
	КонецЕсли;
	
	// Перезаполнение очищаемых данных формы при повторном чтении объекта из БД
	Если Кэш <> Неопределено Тогда
		ПрочитатьПользовательскоеПредставлениеФорматов();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если Объект.ПометкаУдаления Тогда
		ЭтаФорма.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	// Удаление варианта "В папку" если не используется интеграция с подсистемой "РаботаСФайлами".
	Если ТипЗнч(Объект.Папка) = Тип("Неопределено") ИЛИ ТипЗнч(Объект.Папка) = Тип("Строка") Тогда
		Элементы.ДругойСпособДоставки.СписокВыбора.Удалить(0);
	КонецЕсли;
	
	ЗначениеКопирования = Параметры.ЗначениеКопирования;
	
	// Используется при загрузке и записи настроек выбранного отчета
	ИдентификаторТекущейСтрокиТаблицыОтчетов = -1;
	
	// Кэш проверки
	ЭтоНовый = Объект.Ссылка.Пустая();
	СозданКопированием = НЕ ЗначениеКопирования.Пустая();
	
	// Добавление отчетов в табличную часть
	Если Параметры.Свойство("ПрисоединяемыеОтчеты") И ТипЗнч(Параметры.ПрисоединяемыеОтчеты) = Тип("Массив") Тогда
		Модифицированность = Истина;
		ДобавитьНастройкиОтчетов(Параметры.ПрисоединяемыеОтчеты);
	КонецЕсли;
	
	Кэш = ПолучитьКэш();
	
	Расписание = Новый РасписаниеРегламентногоЗадания;
	
	РассылкаБылаПерсонализирована = Объект.Персонализирована;
	
	// Чтение
	ПрочитатьПользовательскоеПредставлениеФорматов();
	ЗаполнитьПустыеШаблоныСтандартными(Объект);
	
	Если ЭтоНовый И НЕ СозданКопированием Тогда
		ВариантРасписания = Неопределено;
		Параметры.Свойство("ВариантРасписания", ВариантРасписания);
		ЗаполнитьРасписаниеПоВарианту(ВариантРасписания);
	Иначе
		ПрочитатьРасписаниеРегламентногоЗадания();
	КонецЕсли;
	
	// Заполнение автора рассылки
	Если ЭтоНовый Тогда
		// Автор рассылки
		ТекущийПользователь = Пользователи.ТекущийПользователь();
		Объект.Автор = ТекущийПользователь;
		Если НЕ ЗначениеЗаполнено(Объект.Автор) Тогда
			Отказ = Истина;
			Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка заполнения автора рассылки
				|Автор (%1): %2'"),
				Строка(ТипЗнч(ТекущийПользователь)),
				Строка(ТекущийПользователь));
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Рассылка отчетов. Открытие формы элемента'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Справочники.РассылкиОтчетов,
				,
				Текст);
			Возврат;
		КонецЕсли;
		
		// Имя архива
		Объект.ИмяАрхива = Кэш.Шаблоны.ИмяАрхива;
	КонецЕсли;
	
	// Позволяет видеть и управлять некоторыми защищенными параметры рассылки
	РассылкуРедактируетАвтор = (Объект.Автор = Пользователи.ТекущийПользователь());
	
	// Доступность кнопки добавления дополнительного отчета
	Элементы.ОтчетыДобавитьДополнительныйОтчет.Доступность = ?(Кэш.ПустоеЗначениеОтчета = Неопределено, Истина, Ложь);
	// "Кэш.ПустоеЗначениеОтчета = Неопределено" когда тип реквизита "отчет" составной, 
	//   соответственно используется интеграция с подсистемой Дополнительные отчеты и обработки
		
	// Доступность автора рассылки
	Элементы.Автор.Доступность = Пользователи.ЭтоПолноправныйПользователь();
	
	// Список форматов с пометками для форматов по умолчанию
	СписокФорматовПоУмолчанию = РассылкаОтчетовПовтИсп.СписокФорматов();
	
	// Представление списка форматов по умолчанию
	СписокФорматовПоУмолчаниюПредставление = "";
	Для Каждого ЭлементСписка Из СписокФорматовПоУмолчанию Цикл
		Если ЭлементСписка.Пометка Тогда
			СписокФорматовПоУмолчаниюПредставление = СписокФорматовПоУмолчаниюПредставление + ?(СписокФорматовПоУмолчаниюПредставление = "", "", ", ") + Строка(ЭлементСписка.Значение);
		КонецЕсли;
	КонецЦикла;
	
	// Список редактирования форматов
	СписокФорматов = СписокФорматовПоУмолчанию.Скопировать();
	
	// Представление форматов по умолчанию в пределах рассылки
	ФорматыПоУмолчанию = "";
	Найденные = Объект.ФорматыОтчетов.НайтиСтроки(Новый Структура("Отчет", Кэш.ПустоеЗначениеОтчета));
	Если Найденные.Количество() = 0 Тогда
		ФорматыПоУмолчанию = СписокФорматовПоУмолчаниюПредставление;
	Иначе
		Для Каждого СтрокаФормат Из Найденные Цикл
			ФорматыПоУмолчанию = ФорматыПоУмолчанию + ?(ФорматыПоУмолчанию = "", "", ", ") + Строка(СтрокаФормат.Формат);
		КонецЦикла;
	КонецЕсли;
	
	// 
	Если СтруктураВложенийПисьмаВФорматеHTML = Неопределено Тогда
		СтруктураВложенийПисьмаВФорматеHTML = Новый Структура;
	КонецЕсли;
	
	// Для списков получателей и исключенных используется одна табличная часть
	Элементы.ПустыеНастройки.ОтборСтрок = Новый ФиксированнаяСтруктура("ИндексКартинки", 200);
	
	// Список выбора почтовых адресов автора
	ПолучитьСписокПочтовыхАдресов(Объект.Автор, Элементы.ВидПочтовогоАдресаАвтора.СписокВыбора);
	
	// Список выбора почтовых адресов автора
	ПодключитьКэшНастроекЭлектроннойПочты();
	
	// Чтение настроек отчетов из объекта копирования
	Если СозданКопированием Тогда
		ПрочитатьНастройкиОтчетовОбъектаКопирования();
	КонецЕсли;
	
	// Активизация первой строки
	Если Объект.Отчеты.Количество() > 0 И ИдентификаторТекущейСтрокиТаблицыОтчетов = -1 Тогда
		СтрокаОтчеты = Объект.Отчеты[0];
		ИдентификаторСтроки = СтрокаОтчеты.ПолучитьИдентификатор();
		СтрокаПредупреждения = ОтчетыПриАктивизацииСтрокиНаСервере(ИдентификаторСтроки);
		Если СтрокаПредупреждения <> "" Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаПредупреждения, , "Объект.Отчеты[0].Представление");
		КонецЕсли;
	КонецЕсли;
	
	//
	ВидимостьДоступностьКорректность(ЭтаФорма);
	
	//
	ЗафиксироватьЗначенияРеквизитовДоИзменения();
	
	//
	ПравоВывода = ПравоДоступа("Вывод", Метаданные);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если ФормаБылаМодифицированаНаСервере Тогда
		Модифицированность = Истина;
	КонецЕсли;
	Если НЕ ПравоВывода Тогда
		Предупреждение(НСтр("ru = 'Недостаточно прав на вывод информации. Рассылки отчетов не будут выполнены.'"));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	// Очистка окна сообщений
	ОчиститьСообщения();
	
	// Рекомендации по отключению архивации при доставке только в папку
	ЗначенияИзменились = Ложь;
	Для Каждого КлючИЗначение Из ЗначенияРеквизитовДоИзменения Цикл
		Если Объект[КлючИЗначение.Ключ] <> ЗначенияРеквизитовДоИзменения[КлючИЗначение.Ключ] Тогда
			ЗначенияИзменились = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначенияИзменились 
		И Объект.ИспользоватьПапку 
		И Объект.Архивировать
		И (Объект.ТолькоУведомить ИЛИ НЕ Объект.ИспользоватьЭлектроннуюПочту) Тогда
		
		Заголовок = НСтр("ru = 'Отключить архивацию'");
		
		ТекстВопроса = НСтр("ru = 'При публикации отчетов в папку рекомендуется отключать архивацию в ZIP.'");
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(1, НСтр("ru = 'Отключить архивацию в ZIP'"));
		Кнопки.Добавить(2, НСтр("ru = 'Продолжить'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		
		Ответ = Вопрос(ТекстВопроса, Кнопки, 60, 1, Заголовок, 2);
		
		Если Ответ = КодВозвратаДиалога.Отмена Тогда
			Отказ = Истина;
		ИначеЕсли Ответ = 1 Тогда
			Объект.Архивировать = Ложь;
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	// Запись настроек текущей строки
	Если ИдентификаторТекущейСтрокиТаблицыОтчетов <> -1 Тогда
		ЗаписатьНастройкиСтрокиОтчеты(ИдентификаторТекущейСтрокиТаблицыОтчетов);
	КонецЕсли;
	
	// Далее выполняются следующие действия:
	// [1] Сохранение настроек, сделанных пользователем.
	//     Помещение измененных настроек строк в настройки записываемого объекта (хранилище значения).
	//     Анализ выполняется для всех отчетов, если пользователь менял настройки.
	// [2] Поиск незаполненных но обязательных для заполнения настроек.
	//     Анализ выполняется для СКД отчетов, если рассылка подготовлена.
	ПроверитьОбязательные = Объект.Подготовлена;
	// [3] Поиск персонализированных полей если эта рассылка не персонализирована.
	//     Анализ выполняется для всех отчетов, если пользователь сменил вид рассылки с персонализированной на любой другой.
	ПроверитьПерсонализированные = (НЕ Объект.Персонализирована И РассылкаБылаПерсонализирована);
	Для Каждого СтрокаОтчеты Из Объект.Отчеты Цикл
		
		ОбъектСтрокаОтчеты = ТекущийОбъект.Отчеты.Получить(СтрокаОтчеты.НомерСтроки-1);
		
		Если СтрокаОтчеты.ВнесеныИзменения Тогда
			// [1], [2] и [3] Чтение неинициализированных настроек
			ПользовательскиеНастройки = ПолучитьИзВременногоХранилища(СтрокаОтчеты.АдресНастроек);
			
			// [1] Запись настроек.
			ОбъектСтрокаОтчеты.Настройки = Новый ХранилищеЗначения(ПользовательскиеНастройки, Новый СжатиеДанных(9));
			
			Если НЕ ПроверитьОбязательные И НЕ ПроверитьПерсонализированные Тогда
				Продолжить;
			КонецЕсли;
			
		Иначе
			
			Если НЕ ПроверитьОбязательные И НЕ ПроверитьПерсонализированные Тогда
				Продолжить;
			КонецЕсли;
			
			// [2] и [3] Чтение неинициализированных настроек
			Если ЭтоАдресВременногоХранилища(СтрокаОтчеты.АдресНастроек) Тогда
				ПользовательскиеНастройки = ПолучитьИзВременногоХранилища(СтрокаОтчеты.АдресНастроек);
			Иначе
				ПользовательскиеНастройки = ОбъектСтрокаОтчеты.Настройки.Получить();
			КонецЕсли;
			
		КонецЕсли;
		
		// [2] и [3] Инициализация настроек.
		ПараметрыОтчета = ИнициализироватьОтчет(СтрокаОтчеты, Истина, ПользовательскиеНастройки, Ложь);
		НастройкиОтчета = ?(СтрокаОтчеты.СКД, ПараметрыОтчета.КомпоновщикНастроекКД, ПользовательскиеНастройки);
		
		// [3] Заполнение переменных.
		Если ПроверитьПерсонализированные Тогда
			ОтчетПерсонализирован = Ложь;
		КонецЕсли;
		
		// [2] и [3] Анализ СКД отчетов.
		Если СтрокаОтчеты.СКД Тогда
			// [2] Заполнение переменных.
			ЗаполненыВсеОбязательныеНастройки = Истина;
			
			НастройкиКД = НастройкиОтчета.Настройки;
			ПользовательскиеНастройкиКД = НастройкиОтчета.ПользовательскиеНастройки;
			
			Для Каждого ПользовательскаяНастройка Из ПользовательскиеНастройкиКД.Элементы Цикл
				Если ТипЗнч(ПользовательскаяНастройка) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
					// [3] Проверка значения настроек.
					Если ПроверитьПерсонализированные
						И ПользовательскаяНастройка.ПравоеЗначение = "[Получатель]"
						И ПользовательскаяНастройка.Использование Тогда
						ОтчетПерсонализирован = Истина;
					КонецЕсли;
				ИначеЕсли ТипЗнч(ПользовательскаяНастройка) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
					// [3] Проверка значения настроек.
					Если ПроверитьПерсонализированные
						И ПользовательскаяНастройка.Значение = "[Получатель]"
						И ПользовательскаяНастройка.Использование Тогда
						ОтчетПерсонализирован = Истина;
					КонецЕсли;
					
					// [2] Поиск и проверка доступной настройки.
					Идентификатор = ПользовательскаяНастройка.ИдентификаторПользовательскойНастройки;
					ОбщаяНастройка = ФункцииОтчетовКлиентСервер.ПолучитьОбъектПоПользовательскомуИдентификатору(НастройкиКД, Идентификатор);
					Если ОбщаяНастройка = Неопределено Тогда 
						Продолжить;
					КонецЕсли;
					ДоступнаяНастройка = ФункцииОтчетовКлиентСервер.НайтиДоступнуюНастройку(НастройкиКД, ОбщаяНастройка, Ложь);
					Если ДоступнаяНастройка = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					Если НЕ ДоступнаяНастройка.Использование = ИспользованиеПараметраКомпоновкиДанных.Всегда
						И НЕ ПользовательскаяНастройка.Использование Тогда
						Продолжить;
					КонецЕсли;
					Если ДоступнаяНастройка.ЗапрещатьНезаполненныеЗначения И НЕ ЗначениеЗаполнено(ПользовательскаяНастройка.Значение) Тогда
						ЗаполненыВсеОбязательныеНастройки = Ложь;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			// [2] Вывод ошибки.
			Если НЕ ЗаполненыВсеОбязательныеНастройки Тогда
				Отказ = Истина;
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Для отчета ''%1'' заполнены не все настройки, обязательные для заполнения. Необходимо заполнить все обязательные настройки или снять флажок ''Подготовлена''.'"),
					Строка(СтрокаОтчеты.Отчет));
				Поле = "Отчеты["+ Формат(ТекущийОбъект.Отчеты.Индекс(ОбъектСтрокаОтчеты), "ЧН=0; ЧГ=0") +"].Представление";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ТекущийОбъект, Поле);
			КонецЕсли;
		КонецЕсли; // СтрокаОтчеты.СКД
		
		// [3] Анализ обычных отчетов.
		Если ПроверитьПерсонализированные Тогда
			// [3] Анализ обычных отчетов.
			Если ТипЗнч(НастройкиОтчета) = Тип("ТаблицаЗначений") Тогда
				Найденные = НастройкиОтчета.НайтиСтроки(Новый Структура("Значение, Использование", "[Получатель]", Истина));
				Если Найденные.Количество() > 0 Тогда
					ОтчетПерсонализирован = Истина;
				КонецЕсли;
			КонецЕсли;
			// [3] Вывод ошибки.
			Если ОтчетПерсонализирован Тогда
				Отказ = Истина;
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Для отчета ''%1'' задан отбор по получателям рассылки. Необходимо отключить отбор по получателям или изменить вид рассылки на ''Свой отчет для каждого получателя''.'"),
					Строка(СтрокаОтчеты.Отчет));
				Поле = "Отчеты["+ Формат(ТекущийОбъект.Отчеты.Индекс(ОбъектСтрокаОтчеты), "ЧН=0; ЧГ=0") +"].Представление";
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, ТекущийОбъект, Поле);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла; // Для Каждого СтрокаОтчеты Из Объект.Отчеты Цикл
	
	ТекущийОбъект.КартинкиПисьмаВФорматеHTML = Неопределено;
	Если ТекущийОбъект.ПисьмоВФорматеHTML Тогда
		ТекущийОбъект.ТекстПисьма = СокрЛП(ТекстПисьмаФорматированныйДокумент.ПолучитьТекст());
		Если ТекущийОбъект.ТекстПисьма = "" Тогда
			ТекущийОбъект.ТекстПисьмаВФорматеHTML = "";
		Иначе
			ТекстПисьмаФорматированныйДокумент.ПолучитьHTML(ТекущийОбъект.ТекстПисьмаВФорматеHTML, СтруктураВложенийПисьмаВФорматеHTML);
			Если ТипЗнч(СтруктураВложенийПисьмаВФорматеHTML) = Тип("Структура")
				И СтруктураВложенийПисьмаВФорматеHTML.Количество() > 0 Тогда
				ТекущийОбъект.КартинкиПисьмаВФорматеHTML = Новый ХранилищеЗначения(СтруктураВложенийПисьмаВФорматеHTML, Новый СжатиеДанных(9));
			КонецЕсли;
			ТекущийОбъект.ТекстПисьма = ТекстПисьмаФорматированныйДокумент.ПолучитьТекст();
		КонецЕсли;
	КонецЕсли;
	
	// Записываем значения
	Если ЗначениеЗаполнено(ТипПолучателейРассылки) Тогда
		Найденные = ТаблицаТиповПолучателей.НайтиСтроки(Новый Структура("ТипПолучателей", ТипПолучателейРассылки));
		Если Найденные.Количество() = 1 Тогда
			ТекущийОбъект.ТипПолучателейРассылки = Найденные[0].ИОМД;
		Иначе
			ТекущийОбъект.ТипПолучателейРассылки = Справочники.ИдентификаторыОбъектовМетаданных.ПустаяСсылка();
		КонецЕсли;
	Иначе
		ТекущийОбъект.ТипПолучателейРассылки = Справочники.ИдентификаторыОбъектовМетаданных.ПустаяСсылка();
	КонецЕсли;
	
	// Все операции с регламентными заданиями размещены в модуле объекта
	ТекущийОбъект.ДополнительныеСвойства.Вставить("Расписание", Расписание);
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	// После записи значения реквизитов табличной части, добавленные в форме, сбрасываются
	ПрочитатьПользовательскоеПредставлениеФорматов();
	ОтчетыПриАктивизацииСтрокиНаСервере(ИдентификаторТекущейСтрокиТаблицыОтчетов);
	
	//
	ЗафиксироватьЗначенияРеквизитовДоИзменения();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики ожидания

&НаКлиенте
Процедура ОбработчикАктивизацииСтрокиТаблицыОтчеты()
	СтрокаОтчеты = Элементы.Отчеты.ТекущиеДанные;
	Если СтрокаОтчеты = Неопределено Тогда
		Элементы.СтраницыНастроекОтчета.ТекущаяСтраница = Элементы.ПустаяСтраница;
		Возврат;
	КонецЕсли;
	
	ИдентификаторСтроки = СтрокаОтчеты.ПолучитьИдентификатор();
	Если ИдентификаторСтроки = ИдентификаторТекущейСтрокиТаблицыОтчетов Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаПредупреждения = ОтчетыПриАктивизацииСтрокиНаСервере(ИдентификаторСтроки);
	Если СтрокаПредупреждения <> "" Тогда
		Предупреждение(СтрокаПредупреждения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеФоновогоЗадания()
	РассылкаОтчетовКлиент.ПроверитьВыполнениеФоновогоЗадания(ЭтаФорма);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

////////////////////////////////////////////////////////////////////////////////
// Страница "Расписание"

&НаКлиенте
Процедура ВыполнятьПоРасписаниюПриИзменении(Элемент)
	ВидимостьДоступностьКорректность(ЭтаФорма, "ВыполнятьПоРасписанию");
КонецПроцедуры

&НаКлиенте
Процедура МесяцыПриИзменении(Элемент)
	Если Элемент <> Неопределено Тогда
		Расписание.Месяцы = ИзменитьСоставМассива(ЭтаФорма[Элемент.Имя], Кэш.Соответствия.Месяцы[Элемент.Имя], Расписание.Месяцы);
	КонецЕсли;
	ВидимостьДоступностьКорректность(ЭтаФорма, "Месяцы");
КонецПроцедуры

&НаКлиенте
Процедура ДниНеделиПриИзменении(Элемент)
	Если Элемент <> Неопределено Тогда
		Расписание.ДниНедели = ИзменитьСоставМассива(ЭтаФорма[Элемент.Имя], Кэш.Соответствия.ДниНедели[Элемент.Имя], Расписание.ДниНедели);
	КонецЕсли;
	ВидимостьДоступностьКорректность(ЭтаФорма, "ДниНедели");
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРасписание(Команда)
	ИзменитьРасписаниеВДиалоге();
КонецПроцедуры

&НаКлиенте
Процедура ПериодичностьРасписанияПриИзменении(Элемент)
	ВидимостьДоступностьКорректность(ЭтаФорма, "ПериодичностьРасписания");
	Если Кэш.Перечисления.Периодичности[Объект.ПериодичностьРасписания] = "Произвольное" Тогда
		ИзменитьРасписаниеВДиалоге();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаНачалоКонецМесяцаНажатие(Элемент)
	Если Расписание.ДеньВМесяце = 0 Тогда
		ДеньВМесяце = 1;
		Расписание.ДеньВМесяце = -1;
	Иначе
		Расписание.ДеньВМесяце = -Расписание.ДеньВМесяце;
	КонецЕсли;
	Модифицированность = Истина;
	ВидимостьДоступностьКорректность(ЭтаФорма, "НачалоКонецМесяца");
КонецПроцедуры

&НаКлиенте
Процедура ВремяНачалаПриИзменении(Элемент)
	Расписание.ВремяНачала = ВремяНачала;
	ВидимостьДоступностьКорректность(ЭтаФорма, "ВремяНачала");
КонецПроцедуры

&НаКлиенте
Процедура ПериодПовтораДнейПриИзменении(Элемент)
	Расписание.ПериодПовтораДней = ПериодПовтораДней;
	ВидимостьДоступностьКорректность(ЭтаФорма, "ПериодПовтораДней");
КонецПроцедуры

&НаКлиенте
Процедура ДеньМесяцаПриИзменении(Элемент)
	Расписание.ДеньВМесяце = ?(Расписание.ДеньВМесяце >= 0, ДеньВМесяце, -ДеньВМесяце);
	ВидимостьДоступностьКорректность(ЭтаФорма, "ДеньВМесяце");
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Страница "Доставка"

&НаКлиенте
Процедура ТипПолучателейРассылкиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ВыбранноеЗначение = ТипПолучателейРассылки Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	Найденные = ТаблицаТиповПолучателей.НайтиСтроки(Новый Структура("ТипПолучателей", ВыбранноеЗначение));
	Если Найденные.Количество() <> 1 Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
		
	// Очистка получателей (если нужно)
	Если Объект.Получатели.Количество() > 0 Тогда
				
		СтрокаВопроса = НСтр("ru = 'Для продолжения необходимо очистить список получателей.'");
		
		НаборКнопок = Новый СписокЗначений;
		НаборКнопок.Добавить("Очистить", НСтр("ru = 'Очистить'"));
		НаборКнопок.Добавить(КодВозвратаДиалога.Отмена);
		
		Ответ = Вопрос(СтрокаВопроса, НаборКнопок, 60, "Очистить");
		Если Ответ <> "Очистить" Тогда
			СтандартнаяОбработка = Ложь;
			Возврат;
		КонецЕсли;
		Объект.Получатели.Очистить();
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТипПолучателейРассылкиПриИзменении(Элемент)
	Найденные = ТаблицаТиповПолучателей.НайтиСтроки(Новый Структура("ТипПолучателей", ТипПолучателейРассылки));
	Если Найденные.Количество() = 1 Тогда
		СтрокаПолучатель = Найденные[0];
		Объект.ТипПолучателейРассылки = СтрокаПолучатель.ИОМД;
		Объект.ВидПочтовогоАдресаПолучателей = СтрокаПолучатель.ОсновнойВидКИ;
		ГруппаКонтакнойИнформацииТипаПолучателей = СтрокаПолучатель.ГруппаКИ;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТипПолучателейРассылкиОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ВидПочтовогоАдресаАвтораОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьЗначение(Объект.Автор);
КонецПроцедуры

&НаКлиенте
Процедура FTPСерверИКаталогНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ПараметрыПроизвольнойФормы = Новый Структура("Сервер, Каталог, Порт, Логин, Пароль, ПассивноеСоединение");
	Для Каждого КлючИЗначение Из ПараметрыПроизвольнойФормы Цикл
		ПараметрыПроизвольнойФормы[КлючИЗначение.Ключ] = Объект["FTP" + КлючИЗначение.Ключ];
	КонецЦикла;
	ПараметрыПроизвольнойФормы.Вставить("Заголовок", НСтр("ru = 'Укажите получателя'"));

	ОткрытьФорму("Справочник.РассылкиОтчетов.Форма.ПараметрыFTP", ПараметрыПроизвольнойФормы, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура FTPСерверИКаталогОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если ВыбранноеЗначение = Неопределено ИЛИ ТипЗнч(ВыбранноеЗначение) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	Для Каждого КлючИЗначение Из ВыбранноеЗначение Цикл
		Объект["FTP" + КлючИЗначение.Ключ] = КлючИЗначение.Значение;
	КонецЦикла;
	ВидимостьДоступностьКорректность(ЭтаФорма, "FTPСерверИКаталог");
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура FTPСерверИКаталогОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура FTPСерверИКаталогОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПолныйАдрес = Объект.FTPСервер +":"+ Формат(Объект.FTPПорт, "ЧН=21; ЧГ=0") + Объект.FTPКаталог;
	Если Объект.FTPЛогин = "" Тогда
		ПолныйАдрес = "ftp://"+ ПолныйАдрес;
	Иначе
		ПолныйАдрес = "ftp://"+ Объект.FTPЛогин +":"+ Объект.FTPПароль +"@"+ ПолныйАдрес;
	КонецЕсли;
	ЗапуститьПриложение(ПолныйАдрес, , Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ВидРассылкиПриИзменении(Элемент)
	Объект.Личная            = (ВидРассылки = "Личная");
	Объект.Персонализирована = (ВидРассылки = "Персонализирована");
	
	ВидимостьДоступностьКорректность(ЭтаФорма, "ВидРассылки");
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьЭлектроннуюПочтуПриИзменении(Элемент)
	ВидимостьДоступностьКорректность(ЭтаФорма, "ИспользоватьЭлектроннуюПочту");
	
	Если НЕ Публиковать И НЕ Объект.ИспользоватьЭлектроннуюПочту Тогда
		Публиковать = Истина;
		ВычислитьФлажкиДополнительныхСпособовДоставки();
		ВидимостьДоступностьКорректность(ЭтаФорма, "Публиковать");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТолькоУведомитьПриИзменении(Элемент)
	ВидимостьДоступностьКорректность(ЭтаФорма, "ТолькоУведомить");
КонецПроцедуры

&НаКлиенте
Процедура ДругойСпособДоставкиПриИзменении(Элемент)
	ВычислитьФлажкиДополнительныхСпособовДоставки();
	ВидимостьДоступностьКорректность(ЭтаФорма, "ДругойСпособДоставки");
КонецПроцедуры

&НаКлиенте
Процедура ПубликоватьПриИзменении(Элемент)
	ВычислитьФлажкиДополнительныхСпособовДоставки();
	ВидимостьДоступностьКорректность(ЭтаФорма, "Публиковать");
	
	Если НЕ Публиковать И НЕ Объект.ИспользоватьЭлектроннуюПочту Тогда
		Объект.ИспользоватьЭлектроннуюПочту = Истина;
		ВидимостьДоступностьКорректность(ЭтаФорма, "ИспользоватьЭлектроннуюПочту");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПапкаОткрытие(Элемент, СтандартнаяОбработка)
	РассылкаОтчетовКлиент.РассылкаОтчетовПросмотрПапки(СтандартнаяОбработка, Объект.Папка);
КонецПроцедуры

&НаКлиенте
Процедура ПапкаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если НЕ ПравоИзмененияПапкиИФайлов(ВыбранноеЗначение) Тогда
		СтандартнаяОбработка = Ложь;
		Предупреждение(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Недостаточно прав на изменение файлов папки %1'"),
				"'"+ Строка(ВыбранноеЗначение) +"'"));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СетевойКаталогWindowsПриИзменении(Элемент)
	Объект.СетевойКаталогWindows = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(Объект.СетевойКаталогWindows);
	Если ПустаяСтрока(Объект.СетевойКаталогLinux) Тогда
		Объект.СетевойКаталогLinux = СтрЗаменить(Объект.СетевойКаталогWindows, "\", "/");
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура СетевойКаталогLinuxПриИзменении(Элемент)
	Объект.СетевойКаталогLinux = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(Объект.СетевойКаталогLinux);
	Если ПустаяСтрока(Объект.СетевойКаталогWindows) Тогда
		Объект.СетевойКаталогWindows = СтрЗаменить(Объект.СетевойКаталогLinux, "/", "\");
	КонецЕсли; 
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Страница "Дополнительно"

&НаКлиенте
Процедура ФорматыПоУмолчаниюНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СтрокаФорматов = ВыбратьФормат(Кэш.ПустоеЗначениеОтчета);
	Если СтрокаФорматов <> Неопределено Тогда
		ФорматыПоУмолчанию = СтрокаФорматов;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ФорматыПоУмолчаниюОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОчиститьФормат(Кэш.ПустоеЗначениеОтчета);
	ФорматыПоУмолчанию = СписокФорматовПоУмолчаниюПредставление;
КонецПроцедуры

&НаКлиенте
Процедура АрхивироватьПриИзменении(Элемент)
	ВидимостьДоступностьКорректность(ЭтаФорма, "Архивировать");
КонецПроцедуры

&НаКлиенте
Процедура АвторПриИзменении(Элемент)
	ТекущийСписок = Элементы.ВидПочтовогоАдресаАвтора.СписокВыбора;
	ТекущийСписок.Очистить();
	НовыйСписок = ПолучитьСписокПочтовыхАдресов(Объект.Автор);
	Для Каждого ЭлементСписка Из НовыйСписок Цикл
		ЗаполнитьЗначенияСвойств(ТекущийСписок.Добавить(), ЭлементСписка);
	КонецЦикла;
	Если НовыйСписок.НайтиПоЗначению(Объект.ВидПочтовогоАдресаПолучателей) = Неопределено Тогда
		Объект.ВидПочтовогоАдресаПолучателей = Неопределено;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РодительОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ВыбранноеЗначение = Кэш.ГруппаЛичныхРассылок Тогда
		СтандартнаяОбработка = Ложь;
		Предупреждение(НСтр("ru = 'Выбранная группа используется только для личных рассылок по электронной почте'"));
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ Отчеты

&НаКлиенте
Процедура ОтчетыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Шаблон = Новый Структура("Количество, МассивСтрок, ПредставлениеОтчетов, Текст", 0, Новый Массив, "");
	СтруктураВыбора = Новый Структура("Выбрано, Успешно, СОшибками", Шаблон, Шаблон, Шаблон);
	
	СтруктураВыбора.Выбрано.МассивСтрок = ВыборПодборПеретаскиваниеВТабличнуюЧасть(
		ВыбранноеЗначение, 
		Объект.Отчеты, 
		"Отчет", 
		Новый Структура("Форматы, ОтправлятьЕслиПустой", ПредставлениеФорматовПоУмолчанию(), Истина),
		Истина);
	
	// Инициализация добавленных строк отчетов и заполнение структуры выбора
	ПроверитьДобавленныеСтрокиОтчетов(СтруктураВыбора);
	
	// Вывод результатов выбора
	Результат = Новый Структура("Оповестить, Заголовок, Текст, ТекстОшибок");
	
	Если СтруктураВыбора.СОшибками.Количество > 0 Тогда
		
		Результат.Оповестить = Ложь;
		Результат.ТекстОшибок = СтруктураВыбора.СОшибками.Текст;
		Результат.Заголовок = НСтр("ru = 'Ошибки добавления отчетов в рассылку'");
		
		Если СтруктураВыбора.Выбрано.Количество = 1 Тогда
			Результат.Текст = НСтр("ru = 'Не удалось добавить отчет из-за ошибок'");
		ИначеЕсли СтруктураВыбора.Успешно.Количество = 0 Тогда
			Результат.Текст = НСтр("ru = 'Не удалось добавить отчеты из-за ошибок'");
		ИначеЕсли СтруктураВыбора.Выбрано.Количество >= 6 Тогда
			Результат.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Добавлено отчетов: %1 из %2,
					|Не добавлено из-за ошибок: %3'"),
				Формат(СтруктураВыбора.Успешно.Количество, "ЧН=0; ЧГ="),
				Формат(СтруктураВыбора.Выбрано.Количество, "ЧН=0; ЧГ="),
				Формат(СтруктураВыбора.СОшибками.Количество, "ЧН=0; ЧГ="));
		Иначе
			Разделитель = ", ";
			ПредставлениеОтчетовУспешно   = СтрЗаменить(Разделитель + СтруктураВыбора.Успешно.ПредставлениеОтчетов  , Разделитель, Символы.ПС + "   - ");
			ПредставлениеОтчетовСОшибками = СтрЗаменить(Разделитель + СтруктураВыбора.СОшибками.ПредставлениеОтчетов, Разделитель, Символы.ПС + "   - ");
			Результат.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Успешно добавлены отчеты:
					|%1
					|
					|Следующие отчеты не удалось добавить из-за ошибок:
					|%2'"),
				ПредставлениеОтчетовУспешно,
				ПредставлениеОтчетовСОшибками);
		КонецЕсли;
		
	ИначеЕсли СтруктураВыбора.Успешно.Количество = 0 Тогда
		
		Результат.Оповестить = Истина;
		Результат.Текст = НСтр("ru = 'Все выбранные отчеты уже включены в рассылку'");
		
	Иначе
		
		Результат.Оповестить = Истина;
		Если СтруктураВыбора.Выбрано.Количество = 1 Тогда
			Результат.Заголовок = НСтр("ru = 'Отчет включен в рассылку'");
		Иначе
			Результат.Заголовок = НСтр("ru = 'Отчеты включены в рассылку'");
		КонецЕсли;
		Результат.Текст = СтруктураВыбора.Успешно.ПредставлениеОтчетов;
		
	КонецЕсли;
	
	РассылкаОтчетовКлиент.ПоказатьРезультат(Результат);
	
	ВидимостьДоступностьКорректность(ЭтаФорма, "Отчеты");
КонецПроцедуры

&НаКлиенте
Процедура ОтчетыПриАктивизацииСтроки(Элемент)
	ПодключитьОбработчикОжидания("ОбработчикАктивизацииСтрокиТаблицыОтчеты", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ОтчетыПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОтчетыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОтчетыПослеУдаления(Элемент)
	ВидимостьДоступностьКорректность(ЭтаФорма, "Отчеты");
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ КомпоновщикНастроекПользовательскиеНастройки

&НаКлиенте
Процедура КомпоновщикНастроекПользовательскиеНастройкиПриИзменении(Элемент)
	СтрокаОтчеты = Элементы.Отчеты.ТекущиеДанные;
	Если СтрокаОтчеты = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаОтчеты.ВнесеныИзменения = Истина;
КонецПроцедуры

&НаКлиенте
Процедура КомпоновщикНастроекПользовательскиеНастройкиЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	НачалоВыбораНастройкиОтчета(Элемент, ДанныеВыбора, СтандартнаяОбработка, Истина);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ НастройкиТекущегоОтчета

&НаКлиенте
Процедура НастройкиТекущегоОтчетаЗначениеПриИзменении(Элемент)
	СтрокаНастроек = Элементы.НастройкиТекущегоОтчета.ТекущиеДанные;
	Если СтрокаНастроек = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаНастроек.Использование = Истина;
КонецПроцедуры

&НаКлиенте
Процедура НастройкиТекущегоОтчетаПриИзменении(Элемент)
	СтрокаОтчеты = Элементы.Отчеты.ТекущиеДанные;
	Если СтрокаОтчеты = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаОтчеты.ВнесеныИзменения = Истина;
КонецПроцедуры

&НаКлиенте
Процедура НастройкиТекущегоОтчетаЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	НачалоВыбораНастройкиОтчета(Элемент, ДанныеВыбора, СтандартнаяОбработка, Ложь);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ Получатели

&НаКлиенте
Процедура ПолучателиПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;
	ДобавитьПеретащитьПолучателя(ПараметрыПеретаскивания.Значение);
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДобавитьПеретащитьПолучателя(ВыбранноеЗначение);
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	// Контроль уникальности выбранных получателей
	Если НЕ Отказ И НЕ ОтменаРедактирования Тогда
		СтрокаПолучатели = Элемент.ТекущиеДанные;
		Если СтрокаПолучатели = Неопределено ИЛИ НЕ ЗначениеЗаполнено(СтрокаПолучатели.Получатель) Тогда
			Возврат;
		КонецЕсли;
		Найденные = Объект.Получатели.НайтиСтроки(Новый Структура("Получатель", СтрокаПолучатели.Получатель));
		Если Найденные.Количество() > 1 Тогда
			// Позиционирование на дубликате
			НомерСуществующейСтроки = ?(Найденные[0] = СтрокаПолучатели, Найденные[1].НомерСтроки, Найденные[0].НомерСтроки);
			Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Дублирование получателя %1. Ввод дубликата отменен.'"),
				"'"+ Строка(СтрокаПолучатели.Получатель) +"'");
			Поле = "Объект.Получатели["+ Формат(НомерСуществующейСтроки, "ЧН=0; ЧГ=") +"]";
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Сообщение, , Поле);
			
			// Отмена редактирования
			Элементы.Получатели.ЗакончитьРедактированиеСтроки(Истина);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ФорматыОтчетов

&НаКлиенте
Процедура ФорматыОтчетовФорматыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СтрокаОтчеты = Элементы.ФорматыОтчетов.ТекущиеДанные;
	Если СтрокаОтчеты = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаФорматов = ВыбратьФормат(СтрокаОтчеты.Отчет);
	Если СтрокаФорматов <> Неопределено Тогда
		СтрокаОтчеты.Форматы = СтрокаФорматов;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ФорматыОтчетовФорматыОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СтрокаОтчеты = Элементы.ФорматыОтчетов.ТекущиеДанные;
	Если СтрокаОтчеты = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОчиститьФормат(СтрокаОтчеты.Отчет);
	СтрокаОтчеты.Форматы = ПредставлениеФорматовПоУмолчанию();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

////////////////////////////////////////////////////////////////////////////////
// Страница "Отчеты"

&НаКлиенте
Процедура ДобавитьОтчет(Команда)
	ВыбранныеЗначения = Новый СписокЗначений;
	Для Каждого СтрокаОтчеты Из Объект.Отчеты Цикл
		Если ТипЗнч(СтрокаОтчеты.Отчет) = Тип("СправочникСсылка.ВариантыОтчетов") Тогда
			ВыбранныеЗначения.Добавить(СтрокаОтчеты.Отчет);
		КонецЕсли;
	КонецЦикла;
	
	Отбор = Новый Структура;
	Отбор.Вставить("ТипОтчета", ПредопределенноеЗначение("Перечисление.ТипыОтчетов.Внутренний"));
	
	ПараметрыФормыВыбора = Новый Структура;
	ПараметрыФормыВыбора.Вставить("РежимОткрытияОкна",  РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ПараметрыФормыВыбора.Вставить("РежимВыбора",        Истина);
	ПараметрыФормыВыбора.Вставить("МножественныйВыбор", Истина);
	ПараметрыФормыВыбора.Вставить("ЗакрыватьПриВыборе", Ложь);
	ПараметрыФормыВыбора.Вставить("Отбор",              Отбор);
	ПараметрыФормыВыбора.Вставить("ВыбранныеЗначения",  ВыбранныеЗначения);
	
	ОткрытьФорму("Справочник.ВариантыОтчетов.ФормаВыбора", ПараметрыФормыВыбора, Элементы.Отчеты);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьДополнительныйОтчет(Команда)
	РассылкаОтчетовКлиент.РассылкаОтчетовПодборДопОтчета(Элементы.Отчеты);
КонецПроцедуры

&НаКлиенте
Процедура ПредварительныйПросмотрОтчета(Команда)
	// Очистка окна сообщений
	ОчиститьСообщения();
	
	//
	СтрокаОтчеты = Элементы.Отчеты.ТекущиеДанные;
	Если СтрокаОтчеты = Неопределено Тогда
		Предупреждение(НСтр("ru = 'Выберите отчет'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("Отчет",                СтрокаОтчеты.Отчет);
	ПараметрыОтчета.Вставить("Настройки",            Неопределено);
	ПараметрыОтчета.Вставить("ОтправлятьЕслиПустой", СтрокаОтчеты.ОтправлятьЕслиПустой);
	ПараметрыОтчета.Вставить("Форматы",              Новый Массив);
	ПараметрыОтчета.Вставить("Представление",        СтрокаОтчеты.Представление);
	
	Если СтрокаОтчеты.СКД Тогда
		ПараметрыОтчета.Настройки = КомпоновщикНастроекКД.ПользовательскиеНастройки;
	Иначе
		ПараметрыОтчета.Настройки = Новый Структура;
		Найденные = НастройкиТекущегоОтчета.НайтиСтроки(Новый Структура("Использование", Истина));
		Для Каждого СтрокаНастройка Из Найденные Цикл
			ПараметрыОтчета.Настройки.Вставить(СтрокаНастройка.Реквизит, СтрокаНастройка.Значение);;
		КонецЦикла;
	КонецЕсли;
	
	Получатель = Неопределено;
	Если Объект.Персонализирована Тогда
		Отказ = Ложь;
		ПроверитьТипПолучателей(Отказ);
		ПроверитьКоличествоПолучателей(Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		РезультатВыбора = РассылкаОтчетовКлиент.ВыбратьПолучателя(Объект, Ложь, Ложь);
		Если РезультатВыбора = Неопределено Тогда
			Возврат;
		КонецЕсли;
		Получатель = РезультатВыбора.Получатель;
	КонецЕсли;
	
	ТребуемыеРеквизиты = Новый Структура;
	ТребуемыеРеквизиты.Вставить("Ссылка",                  Объект.Ссылка);
	ТребуемыеРеквизиты.Вставить("Персонализирована",       Объект.Персонализирована);
	ТребуемыеРеквизиты.Вставить("УникальныйИдентификатор", УникальныйИдентификатор);
	
	Результат = СформироватьОтчетНаСервере(ПараметрыОтчета, Получатель, ТребуемыеРеквизиты);
	
	// Вывод табличного документа
	Если ТипЗнч(Результат.ТабДок) = Тип("ТабличныйДокумент") Тогда
		Результат.ТабДок.ТолькоПросмотр = Истина;
		Результат.ТабДок.ОтображатьСетку = Ложь;
		Результат.ТабДок.Показать(СтрокаОтчеты.Представление);
	КонецЕсли;
	
	// Вывод результата пользователю
	РассылкаОтчетовКлиент.ПоказатьРезультат(Результат);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Страница "Расписание"

&НаКлиенте
Процедура УстановитьПометки(Команда)
	ВсеМесяцы = Новый Массив;
	Для Каждого КлючИЗначение Из Кэш.Соответствия.Месяцы Цикл
		ЭтаФорма[КлючИЗначение.Ключ] = Истина;
		ВсеМесяцы.Добавить(КлючИЗначение.Значение);
	КонецЦикла;
	Расписание.Месяцы = ВсеМесяцы;
	ВидимостьДоступностьКорректность(ЭтаФорма, "Месяцы");
КонецПроцедуры

&НаКлиенте
Процедура СнятьПометки(Команда)
	ВсеМесяцы = Новый Массив;
	Для Каждого КлючИЗначение Из Кэш.Соответствия.Месяцы Цикл
		ЭтаФорма[КлючИЗначение.Ключ] = Ложь;
	КонецЦикла;
	Расписание.Месяцы = ВсеМесяцы;
	ВидимостьДоступностьКорректность(ЭтаФорма, "Месяцы");
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоШаблону(Команда)
	СписокВариантов = РассылкаОтчетовКлиентСервер.СписокВариантовЗаполненияРасписаний();
	
	Вариант = СписокВариантов.ВыбратьЭлемент(НСтр("ru = 'Выберите шаблон расписания'"));
	Если Вариант <> Неопределено Тогда
		ЗаполнитьРасписаниеПоВарианту(Вариант.Значение, Истина);
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Страница "Доставка"

&НаКлиенте
Процедура ПолучателиПодобрать(Команда)
	ОткрытьФормуВыбораДляПодбораПолучателей(Элементы.Получатели);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьИзменитьШаблонДатыРассылки(Команда)
	ДобавитьШаблон();
	
	Конструктор = Новый КонструкторФорматнойСтроки;
	Конструктор.ДоступныеТипы = Новый ОписаниеТипов("Дата");
	
	СтарыйТекст = СокрЛП(ТекущийЭлемент.ВыделенныйТекст);
	Префикс = "[ДатаВыполнения(";
	Постфикс = ")]";
	ДлинаПрефикса = СтрДлина(Префикс);
	ДлинаПостфикса = СтрДлина(Постфикс);
	ПозицияПрефикса = Найти(СтарыйТекст, Префикс);
	ПозицияПостфикса = Найти(СтарыйТекст, Постфикс);
	Если ПозицияПрефикса > 0 И ПозицияПостфикса > ПозицияПрефикса Тогда
		ТекстФормата = Сред(СтарыйТекст, ПозицияПрефикса + ДлинаПрефикса, ПозицияПостфикса - ПозицияПрефикса - ДлинаПрефикса);
	Иначе
		ТекстФормата = "";
	КонецЕсли;
	
	Конструктор.Текст = ТекстФормата;
	Если НЕ Конструктор.ОткрытьМодально() Тогда
		Возврат;
	КонецЕсли;
	
	Если ПозицияПрефикса > 0 И ПозицияПостфикса > ПозицияПрефикса Тогда
		Если Конструктор.Текст = ТекстФормата Тогда
			Возврат;
		КонецЕсли;
		ТекущийЭлемент.ВыделенныйТекст = СтрЗаменить(ТекущийЭлемент.ВыделенныйТекст, Префикс + ТекстФормата + Постфикс, Префикс + Конструктор.Текст + Постфикс);
	ИначеЕсли ТекущийЭлемент.ВыделенныйТекст = "" Тогда
		// Форматированный документ некорректно отрабатывает изменения свойства
		//  ВыделенныйТекст, в случае, если ничего не выделено,
		//  поэтому используется альтернативный метод добавления текста.
		Если ТекущийЭлемент = Элементы.ТекстПисьмаФорматированныйДокумент Тогда
			ТекстПисьмаФорматированныйДокумент.Добавить(Префикс + Конструктор.Текст + Постфикс, ТипЭлементаФорматированногоДокумента.Текст);
		Иначе
			ТекущийЭлемент.ВыделенныйТекст = Префикс + Конструктор.Текст + Постфикс;
		КонецЕсли;
	Иначе
		ТекущийЭлемент.ВыделенныйТекст = ТекущийЭлемент.ВыделенныйТекст + Префикс + Конструктор.Текст + Постфикс;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьШаблонПолучателя(Команда)
	// Очистка окна сообщений
	ОчиститьСообщения();
	
	//
	Если НЕ Объект.Персонализирована Тогда
		СообщениеТекст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Использование получателя в тексте шаблона возможно только для вида рассылки ""%1""'"),
			Элементы.ВидРассылки.СписокВыбора.НайтиПоЗначению("Персонализирована").Представление);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеТекст, , "ВидРассылки");
		Возврат;
	КонецЕсли;
	
	ДобавитьШаблон("[Получатель]");
	РассылкаБылаПерсонализирована = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьШаблонСформированныхОтчетов(Команда)
	ДобавитьШаблон("[СформированныеОтчеты]", Истина);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьШаблонАвтора(Команда)
	ДобавитьШаблон("[Автор]");
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьШаблонНаименованияРассылки(Команда)
	ДобавитьШаблон("[НаименованиеРассылки]");
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьШаблонСистемы(Команда)
	ДобавитьШаблон("[ЗаголовокСистемы]");
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьШаблонСпособаДоставки(Команда)
	ДобавитьШаблон("[СпособДоставки]");
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьШаблонПоУмолчанию(Команда)
	ОчищаетсяТема = (ТекущийЭлемент = Элементы.ТемаПисьма);
	
	ЗначениеПредмета = "";
	ШаблонПоУмолчанию = "";
	
	Если ОчищаетсяТема Тогда
		ЗначениеПредмета = Объект.ТемаПисьма;
		ШаблонПоУмолчанию = Кэш.Шаблоны.Тема;
	Иначе
		ШаблонПоУмолчанию = Кэш.Шаблоны.Текст;
		ЗначениеПредмета = СокрЛП(
			?(Объект.ПисьмоВФорматеHTML, 
				ТекстПисьмаФорматированныйДокумент.ПолучитьТекст(),
				Объект.ТекстПисьма));
	КонецЕсли;
	
	Ответ = 1;
	Если ЗначениеПредмета = "" Тогда
		// Предмет пуст - надо заполнить без вопросов
		
	ИначеЕсли ЗначениеПредмета = ШаблонПоУмолчанию Тогда
		// Предмет соответствует шаблону - заполнять не требуется
		
		ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 уже соответствует шаблону по умолчанию.'"),
			?(ОчищаетсяТема, НСтр("ru = 'Тема письма'"), НСтр("ru = 'Текст письма'")));
		Предупреждение(ТекстПредупреждения);
		Возврат;
		
	Иначе
		// Предмет не пуст - надо запросить замену на стандартный шаблон
		
		Предмет = ?(ОчищаетсяТема, НСтр("ru = 'тему письма'"), НСтр("ru = 'текст письма'"));
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Заменить %1 на шаблон по умолчанию?'"),
			Предмет);
		
		Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Добавить в %1 шаблон по умолчанию'"),
			Предмет);
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(1, НСтр("ru = 'Заменить'"));
		Кнопки.Добавить(2, НСтр("ru = 'Добавить'")); //  без замены
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		
		Ответ = Вопрос(ТекстВопроса, Кнопки, 60, 1);
	КонецЕсли;
	
	Если Ответ = 1 Тогда
		Если ОчищаетсяТема Тогда
			Объект.ТемаПисьма = ШаблонПоУмолчанию;
		Иначе
			Если Объект.ПисьмоВФорматеHTML Тогда
				ТекстПисьмаФорматированныйДокумент.Удалить();
				ТекстПисьмаФорматированныйДокумент.Добавить(ШаблонПоУмолчанию, ТипЭлементаФорматированногоДокумента.Текст);
			Иначе
				Объект.ТекстПисьма = ШаблонПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Ответ = 2 Тогда
		ДобавитьШаблон(ШаблонПоУмолчанию);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредпросмотрШаблона(Команда)
	ДобавитьШаблон();
	
	Если ТекущийЭлемент = Элементы.ТекстПисьмаФорматированныйДокумент Тогда
		Шаблон = ТекстПисьмаФорматированныйДокумент.ПолучитьТекст();
	ИначеЕсли ТекущийЭлемент = Элементы.ТекстПисьма Тогда
		Шаблон = Объект.ТекстПисьма;
	ИначеЕсли ТекущийЭлемент = Элементы.ТемаПисьма Тогда
		Шаблон = Объект.ТемаПисьма;
	КонецЕсли;
	
	СписокОтчетов = "";
	Для Каждого СтрокаОтчет Из Объект.Отчеты Цикл
		СписокОтчетов = СписокОтчетов
		+ Символы.ПС
		+ СтрокаОтчет.Представление
		+ " (" 
		+ ?(СтрокаОтчет.Форматы = ПредставлениеФорматовПоУмолчанию(), ФорматыПоУмолчанию, СтрокаОтчет.Форматы) 
		+ ")";
	КонецЦикла;
	СписокОтчетов = СокрЛ(СписокОтчетов);
	
	Настройки = Новый Структура("НаименованиеРассылки, Автор, ЗаголовокСистемы, ДатаВыполнения, СформированныеОтчеты, СпособДоставки", 
		Объект.Наименование, 
		Объект.Автор, 
		Кэш.ЗаголовокСистемы, 
		ОбщегоНазначенияКлиент.ДатаСеанса(),
		СписокОтчетов,
		"");
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(РассылкаОтчетовКлиентСервер.ЗаполнитьШаблон(Шаблон, Настройки));
	ТекстовыйДокумент.Показать();
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПубликацию(Команда)
	// Параметры доставки
	ПараметрыДоставки = Новый Структура;
	//
	ПараметрыДоставки.Вставить("ИспользоватьПапку",            Объект.ИспользоватьПапку);
	ПараметрыДоставки.Вставить("ИспользоватьСетевойКаталог",   Объект.ИспользоватьСетевойКаталог);
	ПараметрыДоставки.Вставить("ИспользоватьFTPРесурс",        Объект.ИспользоватьFTPРесурс);
	ПараметрыДоставки.Вставить("ИспользоватьЭлектроннуюПочту", Ложь);
	//
	ПроверитьРассылку(ПараметрыДоставки);
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЭлектроннуюПочту(Команда)
	// Параметры доставки
	ПараметрыДоставки = Новый Структура;
	//
	ПараметрыДоставки.Вставить("ИспользоватьПапку",            Ложь);
	ПараметрыДоставки.Вставить("ИспользоватьСетевойКаталог",   Ложь);
	ПараметрыДоставки.Вставить("ИспользоватьFTPРесурс",        Ложь);
	ПараметрыДоставки.Вставить("ИспользоватьЭлектроннуюПочту", Истина);
	//
	ПроверитьРассылку(ПараметрыДоставки);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьТипТекстаНаHTML(Команда)
	Модифицированность = Истина;
	Объект.ПисьмоВФорматеHTML = Истина;
	ТекстПисьмаИзHTML = СокрЛП(ТекстПисьмаФорматированныйДокумент.ПолучитьТекст());
	Если ТекстПисьмаИзHTML <> Объект.ТекстПисьма Тогда
		ТекстПисьмаФорматированныйДокумент.Удалить();
		ТекстПисьмаФорматированныйДокумент.Добавить(Объект.ТекстПисьма, ТипЭлементаФорматированногоДокумента.Текст);
	КонецЕсли;
	ТекущийЭлемент = Элементы.ТекстПисьмаФорматированныйДокумент;
	ВидимостьДоступностьКорректность(ЭтаФорма, "ПисьмоВФорматеHTML");
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьТипТекстаНаОбычный(Команда)
	Модифицированность = Истина;
	Объект.ПисьмоВФорматеHTML = Ложь;
	ТекстПисьмаИзHTML = СокрЛП(ТекстПисьмаФорматированныйДокумент.ПолучитьТекст());
	Если Объект.ТекстПисьма <> ТекстПисьмаИзHTML Тогда
		Объект.ТекстПисьма = ТекстПисьмаИзHTML;
	КонецЕсли;
	ТекущийЭлемент = Элементы.ТекстПисьма;
	ВидимостьДоступностьКорректность(ЭтаФорма, "ПисьмоВФорматеHTML");
КонецПроцедуры

&НаКлиенте
Процедура ВидПочтовогоАдресаПолучателейНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если НЕ ЗначениеЗаполнено(ТипПолучателейРассылки) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Перед выбором почтового адреса необходимо выбрать получателей'"),
			,
			"ТипПолучателейРассылки");
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Страница "Дополнительно"

&НаКлиенте
Процедура СнятьПометкиОтправлятьЕслиПустой(Команда)
	Если Объект.Отчеты.Количество() > 0 Тогда
		Модифицированность = Истина;
		Для Каждого СтрОтчет Из Объект.Отчеты Цикл
			СтрОтчет.ОтправлятьЕслиПустой = Ложь;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкиОтправлятьЕслиПустой(Команда)
	Если Объект.Отчеты.Количество() > 0 Тогда
		Модифицированность = Истина;
		Для Каждого СтрОтчет Из Объект.Отчеты Цикл
			СтрОтчет.ОтправлятьЕслиПустой = Истина;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Контекстные вызовы сервера

&НаСервере
Процедура ПрочитатьПользовательскоеПредставлениеФорматов()
	УстановитьПривилегированныйРежим(Истина);
	Для Каждого СтрокаОтчеты Из Объект.Отчеты Цикл
		СтрокаОтчеты.Представление = Строка(СтрокаОтчеты.Отчет);
		СтрокаОтчеты.Форматы = "";
		Найденные = Объект.ФорматыОтчетов.НайтиСтроки(Новый Структура("Отчет", СтрокаОтчеты.Отчет));
		Для Каждого СтрокаФормат Из Найденные Цикл
			СтрокаОтчеты.Форматы = СтрокаОтчеты.Форматы + ?(СтрокаОтчеты.Форматы = "", "", ", ") + Строка(СтрокаФормат.Формат);
		КонецЦикла;
		Если СтрокаОтчеты.Форматы = "" Тогда
			СтрокаОтчеты.Форматы = ПредставлениеФорматовПоУмолчанию();
		КонецЕсли;
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
КонецПроцедуры

&НаСервере
Процедура ПрочитатьРасписаниеРегламентногоЗадания()
	УстановитьПривилегированныйРежим(Истина);
	ИдентификаторЗадания = ?(СозданКопированием, ЗначениеКопирования.РегламентноеЗадание, Объект.РегламентноеЗадание);
	Если ТипЗнч(ИдентификаторЗадания) = Тип("УникальныйИдентификатор") Тогда
		Задание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
		Если Задание <> Неопределено Тогда
			Расписание = Задание.Расписание;
		КонецЕсли;
	КонецЕсли; 
КонецПроцедуры

&НаСервере
Процедура ПрочитатьНастройкиОтчетовОбъектаКопирования()
	КоличествоСтрок = Объект.Отчеты.Количество();
	Для ОбратныйИндекс = 1 По КоличествоСтрок Цикл
		Индекс = КоличествоСтрок - ОбратныйИндекс;
		СтрокаОтчеты = Объект.Отчеты.Получить(Индекс);
		СтрокаОтчетыОбъектаКопирования = ЗначениеКопирования.Отчеты.Получить(Индекс);
		
		ПользовательскиеНастройкиКД = СтрокаОтчетыОбъектаКопирования.Настройки.Получить();
		
		СтрокаОтчеты.ВнесеныИзменения = Истина;
		
		ИдентификаторСтроки = СтрокаОтчеты.ПолучитьИдентификатор();
		СтрокаПредупреждения = ОтчетыПриАктивизацииСтрокиНаСервере(ИдентификаторСтроки, Истина, ПользовательскиеНастройкиКД);
		Если СтрокаПредупреждения <> "" Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаПредупреждения, , "Объект.Отчеты["+ Индекс +"].Представление");
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПодключитьКэшНастроекЭлектроннойПочты()
	// Подключение кеша типов получателей
	ТаблицаТиповПолучателей.Загрузить(РассылкаОтчетовПовтИсп.ТаблицаТиповПолучателей());
	
	// Заполнение списка выбора типов получателей
	Для Каждого СтрокаПолучатель Из ТаблицаТиповПолучателей Цикл
		Элементы.ТипПолучателейРассылки.СписокВыбора.Добавить(СтрокаПолучатель.ТипПолучателей, СтрокаПолучатель.Представление);
		Если СтрокаПолучатель.ИОМД = Объект.ТипПолучателейРассылки Тогда
			ТипПолучателейРассылки = СтрокаПолучатель.ТипПолучателей;
			ГруппаКонтакнойИнформацииТипаПолучателей = СтрокаПолучатель.ГруппаКИ;
			Если Объект.ВидПочтовогоАдресаПолучателей.Пустая() И ЗначениеЗаполнено(СтрокаПолучатель.ОсновнойВидКИ) Тогда
				Объект.ВидПочтовогоАдресаПолучателей = СтрокаПолучатель.ОсновнойВидКИ;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПустыеШаблоныСтандартными(ТекущийОбъект)
	// Данные объекта
	Если ПустаяСтрока(ТекущийОбъект.ТемаПисьма) Тогда
		ТекущийОбъект.ТемаПисьма = Кэш.Шаблоны.Тема;
	КонецЕсли;
	Если ПустаяСтрока(ТекущийОбъект.ТекстПисьма) Тогда
		ТекущийОбъект.ТекстПисьма = Кэш.Шаблоны.Текст;
	КонецЕсли;
	Если ПустаяСтрока(ТекущийОбъект.ИмяАрхива) Тогда
		ТекущийОбъект.ИмяАрхива = Кэш.Шаблоны.ИмяАрхива;
	КонецЕсли;
	// Данные формы
	Если ПустаяСтрока(ТекстПисьмаФорматированныйДокумент.ПолучитьТекст()) Тогда
		ТекстПисьмаФорматированныйДокумент.Добавить(Кэш.Шаблоны.Текст, ТипЭлементаФорматированногоДокумента.Текст);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаписатьНастройкиСтрокиОтчеты(ИдентификаторСтроки)
	СтрокаОтчеты = Объект.Отчеты.НайтиПоИдентификатору(ИдентификаторСтроки);
	Если СтрокаОтчеты = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ СтрокаОтчеты.Инициализирован Тогда
		СохраняемоеЗначение = Неопределено;
	ИначеЕсли СтрокаОтчеты.СКД Тогда
		СохраняемоеЗначение = КомпоновщикНастроекКД.ПользовательскиеНастройки;
	Иначе
		ИменаРеквизитов = "Реквизит, Представление, Значение, Использование";
		Отбор = Новый Структура("Обнаружен", Истина);
		СохраняемоеЗначение = НастройкиТекущегоОтчета.Выгрузить().Скопировать(ИменаРеквизитов, Отбор);
	КонецЕсли;
	
	Адрес = ?(ЭтоАдресВременногоХранилища(СтрокаОтчеты.АдресНастроек), СтрокаОтчеты.АдресНастроек, УникальныйИдентификатор);
	
	СтрокаОтчеты.АдресНастроек = ПоместитьВоВременноеХранилище(СохраняемоеЗначение, Адрес);
КонецПроцедуры

&НаСервере
Функция ОтчетыПриАктивизацииСтрокиНаСервере(ИдентификаторСтроки, ДобавитьДежурнуюФразу = Истина, ПользовательскиеНастройки = Неопределено)
	// Сохранение настроек предыдущего отчета
	Если ИдентификаторСтроки <> ИдентификаторТекущейСтрокиТаблицыОтчетов И ИдентификаторТекущейСтрокиТаблицыОтчетов <> -1 Тогда
		ЗаписатьНастройкиСтрокиОтчеты(ИдентификаторТекущейСтрокиТаблицыОтчетов);
	КонецЕсли;
	ИдентификаторТекущейСтрокиТаблицыОтчетов = ИдентификаторСтроки;
	
	// Поиск строки
	СтрокаОтчеты = Объект.Отчеты.НайтиПоИдентификатору(ИдентификаторСтроки);
	Если СтрокаОтчеты = Неопределено Тогда
		ИдентификаторТекущейСтрокиТаблицыОтчетов = -1;
		Возврат "";
	КонецЕсли;
	
	Если ПользовательскиеНастройки = Неопределено Тогда
		// Чтение настроек текущей строки из временного хранилища или из табличной части по ссылке.
		Если ЭтоАдресВременногоХранилища(СтрокаОтчеты.АдресНастроек) Тогда
			ПользовательскиеНастройки = ПолучитьИзВременногоХранилища(СтрокаОтчеты.АдресНастроек);
		Иначе
			ИндексСтроки = Объект.Отчеты.Индекс(СтрокаОтчеты);
			ОбъектСтрокаОтчеты = РеквизитФормыВЗначение("Объект").Отчеты.Получить(ИндексСтроки);
			ПользовательскиеНастройки = ?(ОбъектСтрокаОтчеты = Неопределено, Неопределено, ОбъектСтрокаОтчеты.Настройки.Получить());
		КонецЕсли;
	КонецЕсли;
	
	// Инициализация
	ПараметрыОтчета = ИнициализироватьОтчет(СтрокаОтчеты, ДобавитьДежурнуюФразу, ПользовательскиеНастройки);
	
	Возврат ПараметрыОтчета.Ошибки;
КонецФункции

&НаСервере
Функция ИнициализироватьОтчет(СтрокаОтчеты, ДобавитьДежурнуюФразу, ПользовательскиеНастройки, Интерактивно = Истина)
	// Параметры журнала
	ПараметрыЖурнала = Новый Структура;
	ПараметрыЖурнала.Вставить("ИмяСобытия",   НСтр("ru = 'Рассылка отчетов. Инициализация отчета'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	ПараметрыЖурнала.Вставить("Данные",       Объект.Ссылка);
	ПараметрыЖурнала.Вставить("Метаданные",   Метаданные.Справочники.РассылкиОтчетов);
	ПараметрыЖурнала.Вставить("МассивОшибок", Новый Массив);
	
	// Инициализация отчета
	ПараметрыОтчета = Новый Структура("Отчет, Настройки", СтрокаОтчеты.Отчет, ПользовательскиеНастройки);
	РассылкаОтчетов.ИнициализироватьОтчет(
		ПараметрыЖурнала,
		ПараметрыОтчета,
		Объект.Персонализирована,
		ЭтаФорма.УникальныйИдентификатор);
	
	ПараметрыОтчета.Вставить("МассивОшибок", ПараметрыЖурнала.МассивОшибок);
	ПараметрыОтчета.Ошибки = РассылкаОтчетовКлиентСервер.СтрокаСообщенийПользователю(ПараметрыОтчета.МассивОшибок, ДобавитьДежурнуюФразу);
	
	СтрокаОтчеты.СКД = ПараметрыОтчета.СКД;
	СтрокаОтчеты.Инициализирован = ПараметрыОтчета.Инициализирован;
	
	Если НЕ Интерактивно Тогда
		Возврат ПараметрыОтчета;
	КонецЕсли;
	
	// Проверка результата инициализации
	Если НЕ СтрокаОтчеты.Инициализирован Тогда
		ПараметрыОтчета.Ошибки = (
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Отчет %1 был удален из-за ошибки инициализации'"),
				"'"+ Строка(СтрокаОтчеты.Представление) +"'")
			+ ":"
			+ Символы.ПС
			+ ПараметрыОтчета.Ошибки);
		
		// Удаление строки.
		Объект.Отчеты.Удалить(СтрокаОтчеты);
		
		// Пустая страница настроек.
		Элементы.СтраницыНастроекОтчета.ТекущаяСтраница = Элементы.ПустаяСтраница;
		
		Возврат ПараметрыОтчета;
	КонецЕсли;
	
	// Восстановление настроек
	Если СтрокаОтчеты.СКД Тогда
		
		КомпоновщикНастроекКД = ПараметрыОтчета.КомпоновщикНастроекКД;
		Элементы.СтраницыНастроекОтчета.ТекущаяСтраница = Элементы.СтраницаКомпоновщик;
		
	Иначе
		
		// Очищаем & Восстанавливаем
		Если ТипЗнч(ПользовательскиеНастройки) = Тип("ТаблицаЗначений") Тогда
			НастройкиТекущегоОтчета.Загрузить(ПользовательскиеНастройки);
		Иначе
			НастройкиТекущегоОтчета.Очистить();
		КонецЕсли;
		
		Для Каждого КлючИЗначение Из ПараметрыОтчета.ДоступныеРеквизиты Цикл
			// Обновляем вычисляемые реквизиты
			Найденные = НастройкиТекущегоОтчета.НайтиСтроки(Новый Структура("Реквизит", КлючИЗначение.Ключ));
			Если Найденные.Количество() = 0 Тогда
				СтрокаНастройка = НастройкиТекущегоОтчета.Добавить();
				СтрокаНастройка.Реквизит = КлючИЗначение.Ключ;
			Иначе
				СтрокаНастройка = Найденные[0];
			КонецЕсли;
			СтрокаНастройка.Представление = КлючИЗначение.Значение.Представление;
			СтрокаНастройка.Тип           = КлючИЗначение.Значение.Тип;
			СтрокаНастройка.Обнаружен     = Истина;
			СтрокаНастройка.ИндексКартинки = 3;
		КонецЦикла;
		
		// Отключаем необнаруженные строки
		Найденные = НастройкиТекущегоОтчета.НайтиСтроки(Новый Структура("Обнаружен", Ложь));
		Для Каждого СтрокаНастройка Из Найденные Цикл
			СтрокаНастройка.Использование = Ложь;
			СтрокаНастройка.ИндексКартинки = 4;
		КонецЦикла;
		
		Элементы.СтраницыНастроекОтчета.ТекущаяСтраница = Элементы.СтраницаНастройкиТекущегоОтчета;
		
	КонецЕсли;
	
	Возврат ПараметрыОтчета;
КонецФункции

&НаСервере
Процедура ЗаполнитьРасписаниеПоВарианту(Вариант, ОбновитьВидимость = Ложь)
	// Список вариантов - см. РассылкаОтчетовКлиентСервер.СписокВариантовЗаполненияРасписаний()
	
	Расписание = Новый РасписаниеРегламентногоЗадания;
	
	// в 7:30 утра
	Расписание.ВремяНачала = '00010101073000';
	
	// каждый день
	Расписание.ПериодПовтораДней = 1;
	
	// по дням недели
	ДеньНеделиМин = 1;
	ДеньНеделиМакс = 7;
	
	// по всем месяцам
	ВсеМесяцы = Новый Массив;
	Для н = 1 По 12 Цикл
		ВсеМесяцы.Добавить(н);
	КонецЦикла;
	Расписание.Месяцы = ВсеМесяцы;
	
	Если Вариант = 1 Тогда // "Каждый день"
		Объект.ПериодичностьРасписания = Перечисления.ПериодичностиРасписанийРассылокОтчетов.Ежедневно;
		
	ИначеЕсли Вариант = 2 Тогда // "Каждый второй день"
		Объект.ПериодичностьРасписания = Перечисления.ПериодичностиРасписанийРассылокОтчетов.Ежедневно;
		Расписание.ПериодПовтораДней = 2;
		
	ИначеЕсли Вариант = 3 Тогда // "Каждый четвертый день"
		Объект.ПериодичностьРасписания = Перечисления.ПериодичностиРасписанийРассылокОтчетов.Ежедневно;
		Расписание.ПериодПовтораДней = 4;
		
	ИначеЕсли Вариант = 4 Тогда // "По будням"
		Объект.ПериодичностьРасписания = Перечисления.ПериодичностиРасписанийРассылокОтчетов.Еженедельно;
		ДеньНеделиМин = 1;
		ДеньНеделиМакс = 5;
		
	ИначеЕсли Вариант = 5 Тогда // "По выходным"
		Объект.ПериодичностьРасписания = Перечисления.ПериодичностиРасписанийРассылокОтчетов.Еженедельно;
		Расписание.ВремяНачала = '00010101220000'; // в 10:00 вечера
		ДеньНеделиМин = 6;
		ДеньНеделиМакс = 7;
		
	ИначеЕсли Вариант = 6 Тогда // "По понедельникам"
		Объект.ПериодичностьРасписания = Перечисления.ПериодичностиРасписанийРассылокОтчетов.Еженедельно;
		ДеньНеделиМин = 1;
		ДеньНеделиМакс = 1;
		
	ИначеЕсли Вариант = 7 Тогда // "По пятницам"
		Объект.ПериодичностьРасписания = Перечисления.ПериодичностиРасписанийРассылокОтчетов.Еженедельно;
		ДеньНеделиМин = 5;
		ДеньНеделиМакс = 5;
		
	ИначеЕсли Вариант = 8 Тогда // "По воскресеньям"
		Объект.ПериодичностьРасписания = Перечисления.ПериодичностиРасписанийРассылокОтчетов.Еженедельно;
		Расписание.ВремяНачала = '00010101220000'; // в 10:00 вечера
		ДеньНеделиМин = 7;
		ДеньНеделиМакс = 7;
		
	ИначеЕсли Вариант = 9 Тогда // "В первый день месяца"
		Объект.ПериодичностьРасписания = Перечисления.ПериодичностиРасписанийРассылокОтчетов.Ежемесячно;
		Расписание.ДеньВМесяце = 1;
		
	ИначеЕсли Вариант = 10 Тогда // "В последний день месяца"
		Объект.ПериодичностьРасписания = Перечисления.ПериодичностиРасписанийРассылокОтчетов.Ежемесячно;
		Расписание.ДеньВМесяце = -1;
		
	ИначеЕсли Вариант = 11 Тогда // "Каждый квартал десятого числа"
		ВсеМесяцы = Новый Массив;
		ВсеМесяцы.Добавить(1);
		ВсеМесяцы.Добавить(4);
		ВсеМесяцы.Добавить(7);
		ВсеМесяцы.Добавить(10);
		Расписание.Месяцы = ВсеМесяцы;
		Объект.ПериодичностьРасписания = Перечисления.ПериодичностиРасписанийРассылокОтчетов.Ежемесячно;
		Расписание.ДеньВМесяце = 10;
		
	ИначеЕсли Вариант = 12 Тогда // "Другое..."
		Объект.ПериодичностьРасписания = Перечисления.ПериодичностиРасписанийРассылокОтчетов.Произвольное;
	
	Иначе
		Объект.ПериодичностьРасписания = Перечисления.ПериодичностиРасписанийРассылокОтчетов.Ежедневно;
		
	КонецЕсли;
	
	// по дням недели
	ВыбранныеДниНедели = Новый Массив;
	Для н = ДеньНеделиМин По ДеньНеделиМакс Цикл
		ВыбранныеДниНедели.Добавить(н);
	КонецЦикла;
	Расписание.ДниНедели = ВыбранныеДниНедели;
	
	Если ОбновитьВидимость Тогда
		ВидимостьДоступностьКорректность(ЭтаФорма);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ЗафиксироватьЗначенияРеквизитовДоИзменения()
	ЗначенияРеквизитовДоИзменения = Новый Структура("ИспользоватьПапку, ИспользоватьЭлектроннуюПочту, ТолькоУведомить, Архивировать");
	ЗаполнитьЗначенияСвойств(ЗначенияРеквизитовДоИзменения, Объект);
	ЗначенияРеквизитовДоИзменения = Новый ФиксированнаяСтруктура(ЗначенияРеквизитовДоИзменения);
КонецФункции

&НаСервере
Процедура ПроверитьДобавленныеСтрокиОтчетов(СтруктураВыбора)
	// СтруктураВыбора:
	//   Выбрано   - (Структура) строки, выбранные пользователем
	//   Успешно   - (Структура) строки, инициализированные и добавленные в список
	//   СОшибками - (Структура) строки, не добавленные в список из-за ошибок
	//       |- Количество - (Число)
	//       |- МассивСтрок - (Массив)
	//       |- ПредставлениеОтчетов - (Строка)
	//       |- Текст - (Строка)
	
	МассивОшибок = Новый Массив;
	
	СтруктураВыбора.Выбрано.Количество = СтруктураВыбора.Выбрано.МассивСтрок.Количество();
	Для ОбратныйИндекс = 1 По СтруктураВыбора.Выбрано.Количество Цикл
		Индекс = СтруктураВыбора.Выбрано.Количество - ОбратныйИндекс;
		ИдентификаторСтрокиОтчеты = СтруктураВыбора.Выбрано.МассивСтрок[Индекс];
		
		СтрокаОтчеты = Объект.Отчеты.НайтиПоИдентификатору(ИдентификаторСтрокиОтчеты);
		Если СтрокаОтчеты.Представление = "" Тогда
			СтрокаОтчеты.Представление = Строка(СтрокаОтчеты.Отчет);
		КонецЕсли;
		
		СтрокаПредупреждения = ОтчетыПриАктивизацииСтрокиНаСервере(ИдентификаторСтрокиОтчеты, Ложь);
		Если СтрокаПредупреждения = "" Тогда
			Ключ = "Успешно";
		Иначе
			Ключ = "СОшибками";
			МассивОшибок.Добавить(СтрокаПредупреждения);
		КонецЕсли;
		
		СтруктураВыбора[Ключ].Количество = СтруктураВыбора[Ключ].Количество + 1;
		СтруктураВыбора[Ключ].МассивСтрок.Добавить(ИдентификаторСтрокиОтчеты);
		СтруктураВыбора[Ключ].ПредставлениеОтчетов = СтруктураВыбора[Ключ].ПредставлениеОтчетов
		+ ?(СтруктураВыбора[Ключ].ПредставлениеОтчетов = "", "", ", ")
		+ СтрокаОтчеты.Представление;
	КонецЦикла;
	
	// Установка курсора на первый из добавленных элементов
	Если СтруктураВыбора.Успешно.Количество > 0 Тогда
		Элементы.Отчеты.ТекущаяСтрока = СтруктураВыбора.Успешно.МассивСтрок[0];
		ИдентификаторТекущейСтрокиТаблицыОтчетов = Элементы.Отчеты.ТекущаяСтрока;
		ОтчетыПриАктивизацииСтрокиНаСервере(ИдентификаторСтрокиОтчеты, Ложь);
	КонецЕсли;
		
	// Сборка текста ошибок
	Если СтруктураВыбора.СОшибками.Количество > 0 Тогда
		СтруктураВыбора.СОшибками.Текст = РассылкаОтчетовКлиентСервер.СтрокаСообщенийПользователю(МассивОшибок);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПроверитьСпособДоставки(Рассылка, Знач ПараметрыДоставки)
	Если Модифицированность И НЕ Записать() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыДоставки.Вставить("ДатаВыполнения", ТекущаяДатаСеанса());
	
	// Инициализация параметров записи в журнал регистрации
	УстановитьПривилегированныйРежим(Истина);
	
	ПараметрыЖурнала = Новый Структура;
	ПараметрыЖурнала.Вставить("ИмяСобытия", НСтр("ru = 'Рассылка отчетов. Проверка способа доставки'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	ПараметрыЖурнала.Вставить("Данные", Рассылка);
	ПараметрыЖурнала.Вставить("Метаданные", Метаданные.Справочники.РассылкиОтчетов);
	ПараметрыЖурнала.Вставить("МассивОшибок", Новый Массив);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	// Добавление параметров доставки для записи результатов выполнения
	ПараметрыДоставки.Вставить("БылиОшибки",                  Ложь);
	ПараметрыДоставки.Вставить("БылиПредупреждения",          Ложь);
	ПараметрыДоставки.Вставить("ВыполненаВПапку",             Ложь);
	ПараметрыДоставки.Вставить("ВыполненаВСетевойКаталог",    Ложь);
	ПараметрыДоставки.Вставить("ВыполненаНаFTP",              Ложь);
	ПараметрыДоставки.Вставить("ВыполненаПоЭлектроннойПочте", Ложь);
	
	// Запись пустого табличного документа в html 4
	ПолноеИмяФайла = ПолучитьИмяВременногоФайла(".html");
	
	ТабДок = Новый ТабличныйДокумент;
	ТабДок.Записать(ПолноеИмяФайла, ТипФайлаТабличногоДокумента.HTML4);
	
	// Формирование вложений
	Файл = Новый Файл(ПолноеИмяФайла);
	
	Вложения = Новый Соответствие;
	Вложения.Вставить(Файл.Имя, Файл.ПолноеИмя);
	
	// Доставка
	Если ПараметрыДоставки.ИспользоватьПапку Тогда
		НачатьТранзакцию();
	КонецЕсли;
	
	Выполнена = РассылкаОтчетов.ВыполнитьДоставку(ПараметрыЖурнала, ПараметрыДоставки, Вложения);
	
	Если ПараметрыДоставки.ИспользоватьПапку Тогда
		ОтменитьТранзакцию();
	КонецЕсли;
	
	// Очистка вложений
	Для Каждого Вложение Из Вложения Цикл
		УдалитьФайлы(Вложение.Значение);
	КонецЦикла;
	
	Результат = Новый Структура("Оповестить, Заголовок, Текст, ТекстОшибок");
	Результат.Оповестить = Ложь;
	Результат.ТекстОшибок = РассылкаОтчетовКлиентСервер.СтрокаСообщенийПользователю(ПараметрыЖурнала.МассивОшибок);
	Если Выполнена Тогда
		Результат.Текст = НСтр("ru = 'Тест способа доставки успешно пройден.'");
	Иначе
		Результат.Текст = НСтр("ru = 'Тест способа доставки не пройден.'");
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

&НаСервере
Процедура ДобавитьНастройкиОтчетов(ПрисоединяемыеОтчеты)
	Для Каждого СтрокаОтчетыПараметры Из ПрисоединяемыеОтчеты Цикл
		Если СтрокаОтчетыПараметры.Свойство("ВариантСсылка")
			И ТипЗнч(СтрокаОтчетыПараметры.ВариантСсылка) = Тип("СправочникСсылка.ВариантыОтчетов")
			И СтрокаОтчетыПараметры.ВариантСсылка <> Справочники.ВариантыОтчетов.ПустаяСсылка() Тогда
			ВариантСсылка = СтрокаОтчетыПараметры.ВариантСсылка;
		Иначе
			ОтчетИнформация = ВариантыОтчетов.СформироватьИнформациюОбОтчетеПоПолномуИмени(СтрокаОтчетыПараметры.ОтчетПолноеИмя);
			ВариантСсылка = ВариантыОтчетов.ПолучитьСсылку(ОтчетИнформация.Отчет, СтрокаОтчетыПараметры.КлючВарианта);
		КонецЕсли;
		
		Если ВариантСсылка.ПометкаУдаления Тогда
			Продолжить;
		КонецЕсли;
		
		Найденные = Объект.Отчеты.НайтиСтроки(Новый Структура("Отчет", ВариантСсылка));
		Если Найденные.Количество() > 0 Тогда
			СтрокаОтчеты = Найденные[0];
		Иначе
			СтрокаОтчеты = Объект.Отчеты.Добавить();
			СтрокаОтчеты.Отчет                = ВариантСсылка;
			СтрокаОтчеты.ОтправлятьЕслиПустой = Истина;
		КонецЕсли;
		
		СтрокаОтчеты.ВнесеныИзменения = Истина;
		
		Если НЕ ЭтоНовый Тогда
			Если Найденные.Количество() > 0 Тогда
				ШаблонСтрокиСообщения = НСтр("ru = 'Для отчета ""%1"" загружены новые пользовательские настройки.'");
			Иначе
				ШаблонСтрокиСообщения = НСтр("ru = 'Добавлен отчет ""%1"".'");
			КонецЕсли;
			ШаблонСтрокиСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСтрокиСообщения, Строка(ВариантСсылка));
			ИндексСтроки = Объект.Отчеты.Индекс(СтрокаОтчеты);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ШаблонСтрокиСообщения, , "Объект.Отчеты["+ ИндексСтроки +"].Представление");
		КонецЕсли;
		
		ПользовательскиеНастройкиКД = СтрокаОтчетыПараметры.Настройки;
		
		ИдентификаторСтроки = СтрокаОтчеты.ПолучитьИдентификатор();
		СтрокаПредупреждения = ОтчетыПриАктивизацииСтрокиНаСервере(ИдентификаторСтроки, Истина, ПользовательскиеНастройкиКД);
		Если СтрокаПредупреждения <> "" Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаПредупреждения, , "Объект.Отчеты["+ ИндексСтроки +"].Представление");
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ВыбранныеПолучателиРассылки()
	
	ВыбранныеПользователи = Новый ТаблицаЗначений;
	ВыбранныеПользователи.Колонки.Добавить("Пользователь");
	ВыбранныеПользователи.Колонки.Добавить("НомерКартинки");
	
	ПолучателиРассылки = Объект.Получатели.Выгрузить(, "Получатель");
	
	Для каждого Элемент Из ПолучателиРассылки Цикл
		
		СтрокаВыбранныеПользователи = ВыбранныеПользователи.Добавить();
		СтрокаВыбранныеПользователи.Пользователь = Элемент.Получатель;
		
	КонецЦикла;
	
	ЗаголовокФормыПодбора = НСтр("ru = 'Подбор получателей рассылки'");
	ПараметрыРасширеннойФормыПодбора = Новый Структура("ЗаголовокФормыПодбора, ВыбранныеПользователи",
	                                                   ЗаголовокФормыПодбора, ВыбранныеПользователи);
	АдресХранилища = ПоместитьВоВременноеХранилище(ПараметрыРасширеннойФормыПодбора);
	Возврат АдресХранилища;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Неконтекстные вызовы сервера

&НаСервереБезКонтекста
Функция ПолучитьКэш()
	// Преобразование наименований в значения
	ДниНедели = Новый Соответствие;
	ДниНедели.Вставить("Понедельник", 1);
	ДниНедели.Вставить("Вторник",     2);
	ДниНедели.Вставить("Среда",       3);
	ДниНедели.Вставить("Четверг",     4);
	ДниНедели.Вставить("Пятница",     5);
	ДниНедели.Вставить("Суббота",     6);
	ДниНедели.Вставить("Воскресенье", 7);
	ДниНедели = Новый ФиксированноеСоответствие(ДниНедели);
	
	Месяцы = Новый Соответствие;
	Месяцы.Вставить("Январь",   1);
	Месяцы.Вставить("Февраль",  2);
	Месяцы.Вставить("Март",     3);
	Месяцы.Вставить("Апрель",   4);
	Месяцы.Вставить("Май",      5);
	Месяцы.Вставить("Июнь",     6);
	Месяцы.Вставить("Июль",     7);
	Месяцы.Вставить("Август",   8);
	Месяцы.Вставить("Сентябрь", 9);
	Месяцы.Вставить("Октябрь",  10);
	Месяцы.Вставить("Ноябрь",   11);
	Месяцы.Вставить("Декабрь",  12);
	Месяцы = Новый ФиксированноеСоответствие(Месяцы);
	
	//
	Периодичности = Новый Соответствие;
	Периодичности.Вставить(Перечисления.ПериодичностиРасписанийРассылокОтчетов.ПустаяСсылка(), "НеВыбрано");
	Для Каждого ОбъектМД Из Метаданные.Перечисления.ПериодичностиРасписанийРассылокОтчетов.ЗначенияПеречисления Цикл
		Периодичности.Вставить(Перечисления.ПериодичностиРасписанийРассылокОтчетов[ОбъектМД.Имя], ОбъектМД.Имя);
	КонецЦикла;
	Периодичности = Новый ФиксированноеСоответствие(Периодичности);
	
	//
	Шаблоны = Новый ФиксированнаяСтруктура("Тема, Текст, ИмяАрхива",
		РассылкаОтчетовКлиентСервер.ШаблонТемы(),
		РассылкаОтчетовКлиентСервер.ШаблонТекста(),
		РассылкаОтчетовКлиентСервер.ШаблонИмениАрхива());
	
	//
	Кэш = Новый Структура;
	Кэш.Вставить("ПустоеЗначениеОтчета", РассылкаОтчетовПовтИсп.ПустоеЗначениеОтчета());
	Кэш.Вставить("ГруппаЛичныхРассылок", Справочники.РассылкиОтчетов.ЛичныеРассылки);
	Кэш.Вставить("ЗаголовокСистемы", РассылкаОтчетовПовтИсп.ИмяЭтойИнформационнойБазы());
	Кэш.Вставить("Соответствия", Новый ФиксированнаяСтруктура("ДниНедели, Месяцы", ДниНедели, Месяцы));
	Кэш.Вставить("Перечисления", Новый ФиксированнаяСтруктура("Периодичности", Периодичности));
	Кэш.Вставить("Шаблоны", Шаблоны);
	Кэш = Новый ФиксированнаяСтруктура(Кэш);
	
	//
	Возврат Кэш;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСписокПочтовыхАдресов(Получатель, СписокЗначений = Неопределено)
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	тчКонтактнаяИнформация.Представление КАК Представление,
	|	тчКонтактнаяИнформация.Вид КАК Значение
	|ИЗ
	|	Справочник.Пользователи.КонтактнаяИнформация КАК тчКонтактнаяИнформация
	|ГДЕ
	|	тчКонтактнаяИнформация.Ссылка = &Получатель
	|	И тчКонтактнаяИнформация.Тип = &ТипКИ";
	Попытка
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Пользователи", Получатель.Метаданные().Имя);
	Исключение
		Возврат СписокЗначений;
	КонецПопытки;
	
	Если СписокЗначений = Неопределено Тогда
		СписокЗначений = Новый СписокЗначений;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Получатель", Получатель);
	Запрос.УстановитьПараметр("ТипКИ", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	Запрос.Текст = ТекстЗапроса;
	
	ТЗИтог = Запрос.Выполнить().Выгрузить();
	Для Каждого СтрИтог Из ТЗИтог Цикл
		Если ЗначениеЗаполнено(СтрИтог.Представление) Тогда
			СписокЗначений.Добавить(СтрИтог.Значение, СтрИтог.Представление +" ("+ Строка(СтрИтог.Значение) +")");
		КонецЕсли;
	КонецЦикла;
	
	Возврат СписокЗначений;
КонецФункции

&НаСервереБезКонтекста
Функция СформироватьОтчетНаСервере(Знач ПараметрыОтчета, Получатель, ТребуемыеРеквизиты)
	ПараметрыЖурнала = Новый Структура;
	ПараметрыЖурнала.Вставить("ИмяСобытия", НСтр("ru = 'Рассылка отчетов. Формирование отчета'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	ПараметрыЖурнала.Вставить("Данные", ТребуемыеРеквизиты.Ссылка);
	ПараметрыЖурнала.Вставить("Метаданные", ПараметрыЖурнала.Данные.Метаданные());
	ПараметрыЖурнала.Вставить("МассивОшибок", Новый Массив);
	
	ОтчетИнициализирован = РассылкаОтчетов.ИнициализироватьОтчет(
		ПараметрыЖурнала,
		ПараметрыОтчета,
		ТребуемыеРеквизиты.Персонализирована);
	
	Результат = Новый Структура("Оповестить, Заголовок, Текст, ТекстОшибок, ТабДок");
	
	ОтчетСформирован = Ложь;
	Если ОтчетИнициализирован Тогда
		Попытка
			РезультатФормирования = РассылкаОтчетов.СформироватьОтчет(ПараметрыЖурнала, ПараметрыОтчета, Получатель);
			ОтчетСформирован = РезультатФормирования.Сформирован;
			Если РезультатФормирования.Пустой И НЕ ПараметрыОтчета.ОтправлятьЕслиПустой Тогда
				Результат.Оповестить = Ложь;
				Результат.Текст = НСтр("ru = 'Отчет пустой'");
			Иначе
				Результат.ТабДок = РезультатФормирования.ТабДок;
				Результат.Оповестить = Истина;
				Результат.Заголовок = НСтр("ru = 'Отчет сформирован'");
				Результат.Текст = Строка(ПараметрыОтчета.Отчет);
			КонецЕсли;
		Исключение
			РассылкаОтчетов.ЗаписьЖурнала(ПараметрыЖурнала, , 
				НСтр("ru = 'Ошибка формирования отчета %1:'"), ИнформацияОбОшибке(), 
				"'"+ Строка(ПараметрыОтчета.Отчет) +"'");
		КонецПопытки;
	КонецЕсли;
	
	Если НЕ ОтчетИнициализирован ИЛИ НЕ ОтчетСформирован Тогда
		Результат.Оповестить = Ложь;
		Результат.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не удалось сформировать отчет %1.'"),
			?(ПараметрыОтчета.Представление = "", "", "'"+ ПараметрыОтчета.Представление +"'"));
	КонецЕсли;
	
	Результат.ТекстОшибок = РассылкаОтчетовКлиентСервер.СтрокаСообщенийПользователю(ПараметрыЖурнала.МассивОшибок);
	
	Возврат Результат;
КонецФункции

&НаСервереБезКонтекста
Функция ПравоИзмененияПапкиИФайлов(Папка)
	
	Результат = Истина;
	РассылкаОтчетов.ПриОпределенииПраваИзмененияПапкиИФайлов(Папка, Результат);
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Вызовы клиента и сервера

&НаКлиентеНаСервереБезКонтекста
Процедура ПереключитьСтраницу(Элементы, ИмяНабораСтраниц, СуффиксСтраниц)
	Элементы[ИмяНабораСтраниц].ТекущаяСтраница = Элементы[ИмяНабораСтраниц + СуффиксСтраниц];
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВидимостьДоступностьКорректность(ЭтаФорма, Изменения = "")
	Объект = ЭтаФорма.Объект;
	Элементы = ЭтаФорма.Элементы;
	
	Если Изменения = "" ИЛИ Изменения = "FTPСерверИКаталог" Тогда
		ЭтаФорма.FTPСерверИКаталог = "ftp://"+ Объект.FTPСервер + Объект.FTPКаталог;
	КонецЕсли;
	
	Если Изменения = "" ИЛИ Изменения = "ВидРассылки" Тогда
		// Корректность
		Если Объект.Личная И Объект.Персонализирована Тогда
			Объект.Личная = Ложь;
		КонецЕсли;
		
		ИспользуетсяГруппаЛичныхРассылок = (Объект.Родитель = ЭтаФорма.Кэш.ГруппаЛичныхРассылок);
		Если Объект.Личная <> ИспользуетсяГруппаЛичныхРассылок Тогда
			УстановитьМодифицированностьФормы(ЭтаФорма, "Родитель", , 
				НСтр("ru = 'Группа установлена в соответствии с видом рассылки'"));
			Объект.Родитель = ?(Объект.Личная, ЭтаФорма.Кэш.ГруппаЛичныхРассылок, Неопределено);
		КонецЕсли;
		
		Если Объект.Личная Тогда
			РассылкаОбщая = Ложь;
			ЭтаФорма.ВидРассылки = "Личная";
		ИначеЕсли Объект.Персонализирована Тогда
			РассылкаОбщая = Ложь;
			ЭтаФорма.ВидРассылки = "Персонализирована";
		Иначе
			РассылкаОбщая = Истина;
			ЭтаФорма.ВидРассылки = "Общая";
		КонецЕсли;
		
		Если НЕ РассылкаОбщая Тогда
			Объект.ИспользоватьПапку            = Ложь;
			Объект.ИспользоватьСетевойКаталог   = Ложь;
			Объект.ИспользоватьFTPРесурс        = Ложь;
			Объект.ИспользоватьЭлектроннуюПочту = Истина;
		КонецЕсли;
		
		// Видимость & Доступность
		Элементы.Родитель.Доступность = НЕ Объект.Личная;
		Элементы.НастройкаПолучателей.Видимость = НЕ Объект.Личная;
		ПереключитьСтраницу(Элементы, "ВидыРассылки", ?(Объект.Личная, "Личная", "ДляПолучателей"));
		Элементы.ДругиеСпособыДоставки.Видимость = РассылкаОбщая;
		Элементы.ГруппаИспользоватьЭлектроннуюПочту.Видимость = РассылкаОбщая;
		
		// Восстановление параметров
		Если Объект.ИспользоватьПапку Тогда
			ЭтаФорма.ДругойСпособДоставки = "ИспользоватьПапку";
			ЭтаФорма.Публиковать = Истина;
		ИначеЕсли Объект.ИспользоватьСетевойКаталог Тогда
			ЭтаФорма.ДругойСпособДоставки = "ИспользоватьСетевойКаталог";
			ЭтаФорма.Публиковать = Истина;
		ИначеЕсли Объект.ИспользоватьFTPРесурс Тогда
			ЭтаФорма.ДругойСпособДоставки = "ИспользоватьFTPРесурс";
			ЭтаФорма.Публиковать = Истина;
		Иначе
			ЭтаФорма.ДругойСпособДоставки = Элементы.ДругойСпособДоставки.СписокВыбора[0].Значение;
			ЭтаФорма.Публиковать = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если Изменения = "" ИЛИ Изменения = "Отчеты" Тогда
		КоличествоОтчетов = ЭтаФорма.Объект.Отчеты.Количество();
		Если КоличествоОтчетов > 0 Тогда
			Элементы.СтраницаОтчеты.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Отчеты (%1)'"), 
				Формат(КоличествоОтчетов, "ЧН=0; ЧГ="));
		Иначе
			Элементы.СтраницаОтчеты.Заголовок = НСтр("ru = 'Отчеты'") ;
		КонецЕсли;
	КонецЕсли;
	
	Если Изменения = "" ИЛИ Изменения = "ДругойСпособДоставки" ИЛИ Изменения = "Публиковать" ИЛИ Изменения = "ВидРассылки" Тогда
		Элементы.ДругойСпособДоставки.Доступность = ЭтаФорма.Публиковать;
		Элементы.ПараметрыДоставки.Доступность = ЭтаФорма.Публиковать;
		Элементы.ПараметрыДоставки.ТекущаяСтраница = Элементы[ЭтаФорма.ДругойСпособДоставки];
		Элементы.ПроверитьПубликацию.Доступность = ЭтаФорма.Публиковать;
	КонецЕсли;
	
	Если Изменения = "" ИЛИ Изменения = "ИспользоватьЭлектроннуюПочту" ИЛИ Изменения = "ВидРассылки" Тогда
		Элементы.ГруппаУчетнаяЗапись.Доступность = Объект.ИспользоватьЭлектроннуюПочту;
		Элементы.ПараметрыПисьма.Доступность = Объект.ИспользоватьЭлектроннуюПочту;
		Элементы.ДополнительныеПараметрыРассылкиПоЭлектроннойПочте.Доступность = Объект.ИспользоватьЭлектроннуюПочту;
	КонецЕсли;
	
	Если Изменения = "" 
			ИЛИ Изменения = "ТолькоУведомить" 
			ИЛИ Изменения = "ИспользоватьЭлектроннуюПочту" 
			ИЛИ Изменения = "ДругойСпособДоставки" 
			ИЛИ Изменения = "Публиковать" 
			ИЛИ Изменения = "ВидРассылки" 
		Тогда 
		
		ВидимостьОпции = (Объект.ИспользоватьЭлектроннуюПочту И ЭтаФорма.Публиковать);
		ПереключитьСтраницу(Элементы, "ТолькоУведомления", ?(ВидимостьОпции, "Показать", "Скрыть"));
		Если НЕ ВидимостьОпции Тогда
			Объект.ТолькоУведомить = Ложь;
		КонецЕсли;
		
		СпособыДоставки = "";
		Если Объект.ИспользоватьПапку Тогда
			СпособыДоставки = НСтр("ru = 'папка'");
		КонецЕсли;
		Если Объект.ИспользоватьСетевойКаталог Тогда
			СпособыДоставки = НСтр("ru = 'сетевой каталог'");
		КонецЕсли;
		Если Объект.ИспользоватьFTPРесурс Тогда
			СпособыДоставки = НСтр("ru = 'FTP'");
		КонецЕсли;
		Если Объект.ИспользоватьЭлектроннуюПочту И НЕ Объект.ТолькоУведомить Тогда
			СпособыДоставки = СпособыДоставки + ?(СпособыДоставки = "", НСтр("ru = 'эл. почта'"), " "+ НСтр("ru = 'и эл. почта'"));
		КонецЕсли;
		
		Элементы.СтраницаДоставка.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Доставка (%1)'"),
			СпособыДоставки);
	КонецЕсли;
	
	Если Изменения = "" ИЛИ Изменения = "ПисьмоВФорматеHTML" Тогда
		ПереключитьСтраницу(Элементы, "СтраницыТекстПисьма", ?(Объект.ПисьмоВФорматеHTML, "HTML", "ОбычныйТекст"));
	КонецЕсли;
	
	Если Изменения = "" ИЛИ Изменения = "Архивировать" Тогда
		Элементы.ИмяАрхива.Доступность    = Объект.Архивировать;
		Элементы.ПарольАрхива.Доступность = Объект.Архивировать;
	КонецЕсли;
	
	Если Изменения = "" ИЛИ Изменения = "ВыполнятьПоРасписанию" Тогда
		Если Объект.ВыполнятьПоРасписанию Тогда
			Элементы.СтраницаРасписание.Заголовок = НСтр("ru = 'Расписание (активно)'");
		Иначе
			Элементы.СтраницаРасписание.Заголовок = НСтр("ru = 'Расписание (не активно)'");
		КонецЕсли;
		Элементы.ПараметрыВыполненияПоРасписанию.Доступность = Объект.ВыполнятьПоРасписанию;
		Элементы.СтраницыПериодичности.Доступность           = Объект.ВыполнятьПоРасписанию;
	КонецЕсли;
	
	Если Изменения = "" ИЛИ Изменения = "ПериодичностьРасписания" Тогда
		ИмяПеречисления = ЭтаФорма.Кэш.Перечисления.Периодичности[Объект.ПериодичностьРасписания];
		
		Элементы.СтраницыПериодичности.ТекущаяСтраница = Элементы["Страница"+ИмяПеречисления];
		Если ИмяПеречисления = "Произвольное" Тогда
			Элементы.СтраницыВремяИлиИзменить.ТекущаяСтраница = Элементы.СтраницаИзменитьРасписание;
		Иначе
			Элементы.СтраницыВремяИлиИзменить.ТекущаяСтраница = Элементы.СтраницаВремяНачала;
		КонецЕсли;
		
		// Сброс параметров, которые не соответствуют закладкам упрощенного редактирования
		Если Изменения = "ПериодичностьРасписания"
			И (ИмяПеречисления = "Ежедневно" 
			ИЛИ ИмяПеречисления = "Еженедельно"
			ИЛИ ИмяПеречисления = "Ежемесячно") Тогда
			
			// Общие параметры
			ЭтаФорма.Расписание.ДатаНачала = '00010101';
			ЭтаФорма.Расписание.ДатаКонца  = '00010101';
			ЭтаФорма.Расписание.ВремяКонца = '00010101';
			ЭтаФорма.Расписание.ВремяЗавершения = '00010101';
			ЭтаФорма.Расписание.ДеньНеделиВМесяце = 0;
			ЭтаФорма.Расписание.ДетальныеРасписанияДня = Новый Массив;
			ЭтаФорма.Расписание.ИнтервалЗавершения = 0;
			ЭтаФорма.Расписание.ПаузаПовтора = 0;
			ЭтаФорма.Расписание.ПериодНедель = 0;
			ЭтаФорма.Расписание.ПериодПовтораВТечениеДня = 0;
			
			Если ИмяПеречисления <> "Ежедневно" Тогда
				ЭтаФорма.Расписание.ПериодПовтораДней = 1;
			КонецЕсли;
			
			Если ИмяПеречисления <> "Еженедельно" Тогда
				ВыбранныеДниНедели = Новый Массив;
				Для н = 1 По 7 Цикл
					ВыбранныеДниНедели.Добавить(н);
				КонецЦикла;
				ЭтаФорма.Расписание.ДниНедели = ВыбранныеДниНедели;
			КонецЕсли;
			
			Если ИмяПеречисления <> "Ежемесячно" Тогда
				ВсеМесяцы = Новый Массив;
				Для н = 1 По 12 Цикл
					ВсеМесяцы.Добавить(н);
				КонецЦикла;
				ЭтаФорма.Расписание.Месяцы = ВсеМесяцы;
				ЭтаФорма.Расписание.ДеньВМесяце = 0;
			КонецЕсли;
		КонецЕсли;
		
		// Восстанавливаем параметры на текущей закладке в соответствии с параметрами расписания
		Если ИмяПеречисления = "Ежедневно" Тогда
			ЭтаФорма.ВремяНачала = ЭтаФорма.Расписание.ВремяНачала;
			ЭтаФорма.ПериодПовтораДней = ЭтаФорма.Расписание.ПериодПовтораДней;
		ИначеЕсли ИмяПеречисления = "Еженедельно" Тогда
			ЭтаФорма.ВремяНачала = ЭтаФорма.Расписание.ВремяНачала;
			Для Каждого КлючИЗначение Из ЭтаФорма.Кэш.Соответствия.ДниНедели Цикл
				ЭтаФорма[КлючИЗначение.Ключ] = (ЭтаФорма.Расписание.ДниНедели.Найти(КлючИЗначение.Значение) <> Неопределено);
			КонецЦикла;
		ИначеЕсли ИмяПеречисления = "Ежемесячно" Тогда
			ЭтаФорма.ВремяНачала = ЭтаФорма.Расписание.ВремяНачала;
			Если ЭтаФорма.Расписание.ДеньВМесяце >= 0 Тогда
				ЭтаФорма.ДеньВМесяце = ЭтаФорма.Расписание.ДеньВМесяце;
				Элементы.ГиперссылкаНачалоКонецМесяца.Заголовок = НСтр("ru = 'начала'");
			Иначе	
				ЭтаФорма.ДеньВМесяце = -ЭтаФорма.Расписание.ДеньВМесяце;
				Элементы.ГиперссылкаНачалоКонецМесяца.Заголовок = НСтр("ru = 'конца'");
			КонецЕсли;
			Для Каждого КлючИЗначение Из ЭтаФорма.Кэш.Соответствия.Месяцы Цикл
				ЭтаФорма[КлючИЗначение.Ключ] = (ЭтаФорма.Расписание.Месяцы.Найти(КлючИЗначение.Значение) <> Неопределено);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли; // Изменения = "" ИЛИ Изменения = "ПериодичностьРасписания"
	
	Если Изменения = "" ИЛИ Изменения = "НачалоКонецМесяца" Тогда
		Элементы.ГиперссылкаНачалоКонецМесяца.Заголовок = ?(ЭтаФорма.Расписание.ДеньВМесяце >= 0, "начала", "конца");
	КонецЕсли;
	
	Если Изменения = "" ИЛИ Элементы.Страницы.ТекущаяСтраница = Элементы.СтраницаРасписание Тогда
		ЭтаФорма.ПредставлениеРасписания = Строка(ЭтаФорма.Расписание);
	КонецЕсли;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьМодифицированностьФормы(ЭтаФорма, Поле = "", ПутьКДанным = "", Текст = "")
	Если НЕ ЭтаФорма.Модифицированность Тогда
		ЭтаФорма.ФормаБылаМодифицированаНаСервере = Истина;
		Если ЗначениеЗаполнено(Текст) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст, , Поле, ПутьКДанным);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеФорматовПоУмолчанию()
	Возврат НСтр("ru = 'по умолчанию'");
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Вызовы клиента

&НаКлиенте
Процедура ДобавитьПеретащитьПолучателя(ПолучательИлиНаборПолучателей)
	
	Если ПодборПользователейИлиГрупп(ПолучательИлиНаборПолучателей) Тогда
		
		КоличествоПолучателей = Объект.Получатели.Количество();
		Для н = 1 По КоличествоПолучателей Цикл
			ИндексПолучателя = КоличествоПолучателей - н;
			
			СтрокаПолучатель = Объект.Получатели.Получить(ИндексПолучателя);
			
			ИндексВМассиве = ПолучательИлиНаборПолучателей.Найти(СтрокаПолучатель.Получатель);
			Если ИндексВМассиве = Неопределено Тогда
				Объект.Получатели.Удалить(СтрокаПолучатель);
			Иначе
				ПолучательИлиНаборПолучателей.Удалить(ИндексВМассиве);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	МассивНовыхСтрок = ВыборПодборПеретаскиваниеВТабличнуюЧасть(
		ПолучательИлиНаборПолучателей,
		Объект.Получатели,
		"Получатель",
		Новый Структура("Исключен", Ложь));
	
	Если МассивНовыхСтрок.Количество() > 0 Тогда
		Если МассивНовыхСтрок.Количество() = 1 Тогда
			ЗаголовокОповещения = НСтр("ru = 'Получатель добавлен в рассылку'");
		Иначе
			ЗаголовокОповещения = НСтр("ru = 'Получатели добавлены в рассылку'");
		КонецЕсли;
		
		ТекстОповещения = "";
		Для Каждого СтрокаПолучатель Из МассивНовыхСтрок Цикл
			ТекстОповещения = ТекстОповещения + ?(ТекстОповещения = "", "", ", ") + Строка(СтрокаПолучатель.Получатель);
		КонецЦикла;
		
		РассылкаОтчетовКлиент.ПоказатьРезультат(
			Новый Структура("Оповестить, Заголовок, Текст", Истина, ЗаголовокОповещения, ТекстОповещения));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ВыборПодборПеретаскиваниеЭлементаВТабличнуюЧасть(ЭлементПодбора, ТабличнаяЧасть, ИмяРеквизита, СтруктураЗаполнения, Уникальность = Истина)
	ПереданаСтруктура = (ТипЗнч(ЭлементПодбора) = Тип("Структура"));
	Если ПереданаСтруктура ИЛИ ТипЗнч(ЭлементПодбора) = Тип("ДанныеФормыЭлементКоллекции") Тогда
		Если ЭлементПодбора.Свойство(ИмяРеквизита) Тогда
			ЗначениеРеквизита = ЭлементПодбора[ИмяРеквизита];
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	Иначе // (СправочникСсылка.*) перетаскивание из формы выбора или подбора
		ЗначениеРеквизита = ЭлементПодбора;
	КонецЕсли;
	
	// Требуется уникальность реквизита в рамках таблицы
	Найденные = ТабличнаяЧасть.НайтиСтроки(Новый Структура(ИмяРеквизита, ЗначениеРеквизита));
	
	Если Уникальность И Найденные.Количество() > 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	СтрокаТаблицы = ТабличнаяЧасть.Добавить();
	СтрокаТаблицы[ИмяРеквизита] = ЗначениеРеквизита;
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтруктураЗаполнения);
	Если ПереданаСтруктура Тогда
		Для Каждого КлючИЗначение Из ЭлементПодбора Цикл
			Если СтруктураЗаполнения.Свойство(КлючИЗначение.Ключ) Тогда
				ЭлементПодбора.Удалить(ЭлементПодбора.Ключ);
			КонецЕсли;
		КонецЦикла;
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ЭлементПодбора);
	КонецЕсли;
	
	Возврат СтрокаТаблицы;
КонецФункции

&НаКлиенте
Функция ВыборПодборПеретаскиваниеВТабличнуюЧасть(ВыбранноеЗначение, ТабличнаяЧасть, ИмяРеквизита, СтруктураЗаполнения, Идентификаторы = Ложь)
	Модифицированность = Истина;
	МассивНовыхСтрок = Новый Массив;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		Для Каждого ЭлементПодбора Из ВыбранноеЗначение Цикл
			Результат = ВыборПодборПеретаскиваниеЭлементаВТабличнуюЧасть(ЭлементПодбора, ТабличнаяЧасть, ИмяРеквизита, СтруктураЗаполнения);
			Если Результат <> Неопределено Тогда
				МассивНовыхСтрок.Добавить(?(Идентификаторы, Результат.ПолучитьИдентификатор(), Результат));
			КонецЕсли;
		КонецЦикла;
	Иначе
		Результат = ВыборПодборПеретаскиваниеЭлементаВТабличнуюЧасть(ВыбранноеЗначение, ТабличнаяЧасть, ИмяРеквизита, СтруктураЗаполнения);
		Если Результат <> Неопределено Тогда
			МассивНовыхСтрок.Добавить(?(Идентификаторы, Результат.ПолучитьИдентификатор(), Результат));
		КонецЕсли;
	КонецЕсли;
	Возврат МассивНовыхСтрок;
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуВыбораДляПодбораПолучателей(ФормаИлиЭлементФормы)
	Отказ = Ложь;
	ПроверитьТипПолучателей(Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Найденные = ТаблицаТиповПолучателей.НайтиСтроки(Новый Структура("ТипПолучателей", ТипПолучателейРассылки));
	
	Если Найденные.Количество() = 1 Тогда
		ПараметрыРасширеннойФормыПодбора = ВыбранныеПолучателиРассылки();
		ПараметрыФормыВыбора = Новый Структура;
		// Стандартные реквизиты формы выбора (см. Расширение управляемой формы для динамического списка)
		ПараметрыФормыВыбора.Вставить("ВыборГруппИЭлементов", ИспользованиеГруппИЭлементов.ГруппыИЭлементы);
		ПараметрыФормыВыбора.Вставить("ЗакрыватьПриВыборе", Ложь);
		ПараметрыФормыВыбора.Вставить("ЗакрыватьПриЗакрытииВладельца", Истина);
		ПараметрыФормыВыбора.Вставить("МножественныйВыбор", Истина);
		ПараметрыФормыВыбора.Вставить("РежимВыбора", Истина);
		// Предполагаемые реквизиты
		ПараметрыФормыВыбора.Вставить("РежимОткрытияОкна", РежимОткрытияОкнаФормы.Независимый);
		ПараметрыФормыВыбора.Вставить("ВыборГрупп", Истина);
		ПараметрыФормыВыбора.Вставить("ВыборГруппПользователей", Истина);
		ПараметрыФормыВыбора.Вставить("РазрешитьНачалоПеретаскивания", Истина);
		// Параметры открытия расширенной формы подбора
		// (описание реквизитов см. в форме списка справочника Пользователи)
		ПараметрыФормыВыбора.Вставить("РасширенныйПодбор", Истина);
		ПараметрыФормыВыбора.Вставить("ПараметрыРасширеннойФормыПодбора", ПараметрыРасширеннойФормыПодбора);
		
		ОткрытьФорму(Найденные[0].ПутьФормыВыбора, ПараметрыФормыВыбора, ФормаИлиЭлементФормы);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ВыбратьФормат(СсылкаНаОтчет)
	ЗаполняетсяФорматПоУмолчанию = НЕ ЗначениеЗаполнено(СсылкаНаОтчет);
	
	Найденные = Объект.ФорматыОтчетов.НайтиСтроки(Новый Структура("Отчет", СсылкаНаОтчет));
	Если Найденные.Количество() > 0 Тогда
		СписокФорматов.ЗаполнитьПометки(Ложь);
		Для Каждого СтрокаФормат Из Найденные Цикл
			СписокФорматов.НайтиПоЗначению(СтрокаФормат.Формат).Пометка = Истина;
		КонецЦикла;
	Иначе
		СписокФорматов = СписокФорматовПоУмолчанию.Скопировать();
		Если НЕ ЗаполняетсяФорматПоУмолчанию Тогда
			Найденные = Объект.ФорматыОтчетов.НайтиСтроки(Новый Структура("Отчет", Кэш.ПустоеЗначениеОтчета));
			Если Найденные.Количество() > 0 Тогда
				СписокФорматов.ЗаполнитьПометки(Ложь);
				Для Каждого СтрокаФормат Из Найденные Цикл
					СписокФорматов.НайтиПоЗначению(СтрокаФормат.Формат).Пометка = Истина;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗаполняетсяФорматПоУмолчанию Тогда
		ЗаголовокФормыВыбора = НСтр("ru = 'Выберите форматы по умолчанию'");
	Иначе
		ЗаголовокФормыВыбора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Выберите форматы для отчета %1'"), 
			"'"+ Строка(СсылкаНаОтчет) +"'");
	КонецЕсли;
	
	ДублирующийСписокФорматов = СписокФорматов.Скопировать();
	Если НЕ СписокФорматов.ОтметитьЭлементы(ЗаголовокФормыВыбора) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Проверка изменений
	ФорматыСовпадают = Истина;
	Для н = 1 По СписокФорматов.Количество() Цикл
		Если СписокФорматов[н-1].Пометка <> ДублирующийСписокФорматов[н-1].Пометка Тогда
			ФорматыСовпадают = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если ФорматыСовпадают Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = "";
	
	// Очистка существующих записей
	ОчиститьФормат(СсылкаНаОтчет);
	
	// Добавление отмеченных форматов
	Для Каждого ЭлементСписка Из СписокФорматов Цикл
		Если ЭлементСписка.Пометка Тогда
			СтрокаФормат = Объект.ФорматыОтчетов.Добавить();
			СтрокаФормат.Отчет = СсылкаНаОтчет;
			СтрокаФормат.Формат = ЭлементСписка.Значение;
			Результат = Результат + ?(Результат = "", "", ", ") + Строка(ЭлементСписка.Значение);
		КонецЕсли;
	КонецЦикла;
	
	Если ЗаполняетсяФорматПоУмолчанию И Результат = "" Тогда
		Результат = СписокФорматовПоУмолчаниюПредставление;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура ОчиститьФормат(СсылкаНаОтчет)
	Модифицированность = Истина;
	Найденные = Объект.ФорматыОтчетов.НайтиСтроки(Новый Структура("Отчет", СсылкаНаОтчет));
	Для Каждого СтрокаФормат Из Найденные Цикл
		Объект.ФорматыОтчетов.Удалить(СтрокаФормат);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьШаблон(ТекстовыйШаблон = Неопределено, ИсключитьТемуПисьма = Ложь)
	// Проверяем и устанавливаем фокус в нужный элемент
	Если ИсключитьТемуПисьма ИЛИ НЕ (ТекущийЭлемент = Элементы.ТемаПисьма ИЛИ ТекущийЭлемент = Элементы.ИмяАрхива) Тогда
		Если Объект.ПисьмоВФорматеHTML Тогда
			Если ТекущийЭлемент <> Элементы.ТекстПисьмаФорматированныйДокумент Тогда
				ТекущийЭлемент = Элементы.ТекстПисьмаФорматированныйДокумент;
			КонецЕсли;
		Иначе
			Если ТекущийЭлемент <> Элементы.ТекстПисьма Тогда
				ТекущийЭлемент = Элементы.ТекстПисьма;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ТекстовыйШаблон = Неопределено Тогда
		// Ограничимся подготовкой к добавлению шаблона (переключением текущего элемента)
		Возврат;
	КонецЕсли;
	
	Если ТекущийЭлемент.ВыделенныйТекст = "" Тогда
		// Форматированный документ некорректно отрабатывает изменения свойства
		//  ВыделенныйТекст, в случае, если ничего не выделено,
		//  поэтому используется альтернативный метод добавления текста.
		Если ТекущийЭлемент = Элементы.ТекстПисьмаФорматированныйДокумент Тогда
			ТекстПисьмаФорматированныйДокумент.Добавить(ТекстовыйШаблон, ТипЭлементаФорматированногоДокумента.Текст);
		Иначе
			ТекущийЭлемент.ВыделенныйТекст = ТекстовыйШаблон;
		КонецЕсли;
	Иначе
		ТекущийЭлемент.ВыделенныйТекст = ТекущийЭлемент.ВыделенныйТекст + ТекстовыйШаблон;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ИзменитьСоставМассива(Добавить, Элемент, Знач Массив)
	Индекс = Массив.Найти(Элемент);
	Если Добавить И Индекс = Неопределено Тогда
		ВГраницаПлюс1 = ?(Массив.Количество() >= Элемент, Элемент, Массив.Количество());
		Для н = 1 По ВГраницаПлюс1 Цикл
			Если Массив[ВГраницаПлюс1-н] < Элемент Тогда
				Массив.Вставить(ВГраницаПлюс1-н+1, Элемент);
				Возврат Массив;
			КонецЕсли;
		КонецЦикла;
		Массив.Вставить(0, Элемент);
	ИначеЕсли НЕ Добавить И Индекс <> Неопределено Тогда
		Массив.Удалить(Индекс);
	КонецЕсли;
	Возврат Массив;
КонецФункции

&НаКлиенте
Процедура ИзменитьРасписаниеВДиалоге()
	ДиалогРасписания = Новый ДиалогРасписанияРегламентногоЗадания(Расписание);
	Если ДиалогРасписания.ОткрытьМодально() Тогда
		Модифицированность = Истина;
		Расписание = ДиалогРасписания.Расписание;
		ВидимостьДоступностьКорректность(ЭтаФорма, "Расписание");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НачалоВыбораНастройкиОтчета(Элемент, ДанныеВыбора, СтандартнаяОбработка, СКД = Неопределено)
	// Сброс ограничителя
	Элемент.ОграничениеТипа = Новый ОписаниеТипов;
	
	//
	ЭлементСвязиПоТипу = Неопределено;
	
	// Возможность персонализации рассылки
	Если НЕ Объект.Персонализирована Тогда
		Возврат;
	КонецЕсли;
	
	// Основной тип получателей
	КоличествоТипов = ТипПолучателейРассылки.Типы().Количество();
	Если КоличествоТипов <> 1 И КоличествоТипов <> 2 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Поле ""Получатели"" не заполнено'"),
			,
			"ТипПолучателейРассылки");
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	// 
	Если СКД Тогда
		Инициатор = Элементы.КомпоновщикНастроекПользовательскиеНастройки;
	Иначе
		Инициатор = Элементы.НастройкиТекущегоОтчета;
	КонецЕсли;
	
	НайденныеИОМД = ТаблицаТиповПолучателей.НайтиСтроки(Новый Структура("ТипПолучателей", ТипПолучателейРассылки));
	Если НайденныеИОМД.Количество() <> 1 Тогда
		Возврат;
	КонецЕсли;
	
	МассивТипов = НайденныеИОМД[0].ОсновнойТип.Типы();
	Если МассивТипов.Количество() <> 1 Тогда
		Возврат;
	КонецЕсли;
	
	ОсновнойТипПолучателей = МассивТипов[0];
	
	//  - Получения описания типов, доступных для выбора
	Если СКД Тогда
		
		//  - Идентификатор пользовательской настройки КД
		ИдентификаторНастройки = Инициатор.ТекущаяСтрока;
		Если ИдентификаторНастройки = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		//  - Строка в составе настроек компоновки данных
		СтрокаНастроек = КомпоновщикНастроекКД.ПользовательскиеНастройки.ПолучитьОбъектПоИдентификатору(ИдентификаторНастройки);
		Если СтрокаНастроек = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		//  - Тип настройки
		Если ТипЗнч(СтрокаНастроек) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			ЭтоЭлементОтбора = Истина;
		ИначеЕсли ТипЗнч(СтрокаНастроек) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
			ЭтоЭлементОтбора = Ложь;
		Иначе
			Возврат;
		КонецЕсли;
		
		//  - Поле компоновки данных
		Если ЭтоЭлементОтбора Тогда
			
			Если ЗначениеЗаполнено(СтрокаНастроек.ЛевоеЗначение) Тогда
				
				ПолеКД = СтрокаНастроек.ЛевоеЗначение;
				
			Иначе
				
				//  - Нахождение поля в составе элементов отбора КД по идентификатору
				ТекущийЭлементОтбораКД = Неопределено;
				Идентификатор = Строка(ИдентификаторНастройки);
				
				ГруппыЭлементовОтбора = Новый Массив;
				ГруппыЭлементовОтбора.Добавить(КомпоновщикНастроекКД.Настройки.Отбор.Элементы);
				Пока ГруппыЭлементовОтбора.Количество() > 0 И ТекущийЭлементОтбораКД = Неопределено Цикл
					ГруппаЭлементовОтбора = ГруппыЭлементовОтбора[0];
					ГруппыЭлементовОтбора.Удалить(0);
					
					Для Каждого ЭлементОтбораКД Из ГруппаЭлементовОтбора Цикл
						Если ТипЗнч(ЭлементОтбораКД) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
							ГруппыЭлементовОтбора.Добавить(ЭлементОтбораКД.Элементы);
						ИначеЕсли ЭлементОтбораКД.ИдентификаторПользовательскойНастройки = Идентификатор Тогда
							ТекущийЭлементОтбораКД = ЭлементОтбораКД;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
				КонецЦикла;
				
				Если ТекущийЭлементОтбораКД = Неопределено Тогда
					Возврат;
				КонецЕсли;
				
				ПолеКД = ТекущийЭлементОтбораКД.ЛевоеЗначение;
				
			КонецЕсли;
			
			//  - Нахождение поля в составе доступных полей выбора
			ДоступноеПолеКД = КомпоновщикНастроекКД.Настройки.Выбор.ДоступныеПоляВыбора.НайтиПоле(ПолеКД);
			Если ДоступноеПолеКД = Неопределено Тогда
				Возврат;
			КонецЕсли;
			
			ОписаниеДоступныхТипов = ДоступноеПолеКД.Тип;
			
		Иначе
			
			ДоступныйПараметрКД = КомпоновщикНастроекКД.Настройки.ПараметрыДанных.ДоступныеПараметры.НайтиПараметр(СтрокаНастроек.Параметр);
			ОписаниеДоступныхТипов = ДоступныйПараметрКД.Тип;
			
		КонецЕсли;
		
	Иначе
		
		// Массив типов для произвольных отчетов
		СтрокаНастроек = Инициатор.ТекущиеДанные;
		Если СтрокаНастроек = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ОписаниеДоступныхТипов = СтрокаНастроек.Тип;
		
	КонецЕсли;
	
	//  - Проверка на содержание типа получателей
	Если НЕ ОписаниеДоступныхТипов.СодержитТип(ОсновнойТипПолучателей) Тогда
		Возврат;
	КонецЕсли;
	
	//  - Подмена списка выбора типов на список, содержащий получателя
	СписокТипов = Новый СписокЗначений;
	СписокТипов.Добавить("[Получатель]", НСтр("ru = 'Получатель отчета'"));
	МассивТипов = ОписаниеДоступныхТипов.Типы();
	Для Каждого Тип Из МассивТипов Цикл
		МассивДляОписанияТипов = Новый Массив;
		МассивДляОписанияТипов.Добавить(Тип);
		ОписаниеТипов = Новый ОписаниеТипов(МассивДляОписанияТипов);
		ОписаниеТипов.ПривестиЗначение();
		СписокТипов.Добавить(ОписаниеТипов, Строка(Тип));
	КонецЦикла;
	
	//  - Выбор
	РезультатВыбора = ВыбратьИзСписка(СписокТипов);
	Если РезультатВыбора = Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		Инициатор.ЗакончитьРедактированиеСтроки(Истина);
		Возврат;
	КонецЕсли;
	
	//  - Обработка результатов выбора
	Если ТипЗнч(РезультатВыбора.Значение) = Тип("ОписаниеТипов") Тогда
		
		//  - Выбран тип получателей
		Элемент.ОграничениеТипа = РезультатВыбора.Значение;
		
	Иначе
		
		//  - Выбран шаблон получателя
		СтандартнаяОбработка = Ложь;
		СтрокаНастроек.Использование = Истина;
		Инициатор.ЗакончитьРедактированиеСтроки(Ложь);
		РассылкаБылаПерсонализирована = Истина;
		Элементы.Отчеты.ТекущиеДанные.ВнесеныИзменения = Истина;
		
		Если СКД Тогда
			Если ЭтоЭлементОтбора Тогда
				СтрокаНастроек.ПравоеЗначение = РезультатВыбора.Значение;
			Иначе
				СтрокаНастроек.Значение = РезультатВыбора.Значение;
			КонецЕсли;
		Иначе
			СтрокаНастроек.Значение = РезультатВыбора.Значение;
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВычислитьФлажкиДополнительныхСпособовДоставки()
	Объект.ИспользоватьПапку        = Публиковать И (ДругойСпособДоставки = "ИспользоватьПапку");
	Объект.ИспользоватьСетевойКаталог = Публиковать И (ДругойСпособДоставки = "ИспользоватьСетевойКаталог");
	Объект.ИспользоватьFTPРесурс    = Публиковать И (ДругойСпособДоставки = "ИспользоватьFTPРесурс");
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьРассылку(ПараметрыДоставки)
	// Очистка окна сообщений
	ОчиститьСообщения();
	
	//
	Если НЕ Объект.Подготовлена ИЛИ Объект.Ссылка.Пустая() Тогда
		Если НЕ Объект.Подготовлена Тогда
			ТекстВопроса = НСтр("ru = 'Перед проверкой рассылка должна быть подготовлена.
                                 |Нажмите ""Продолжить"", чтобы установить флажок ""Подготовлена"" и записать рассылку.'");
		Иначе
			ТекстВопроса = НСтр("ru = 'Перед проверкой рассылка должна быть записана.
                                 |Нажмите ""Продолжить"", чтобы записать рассылку.'");
		КонецЕсли;
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(1, НСтр("ru = 'Продолжить'"));
		Кнопки.Добавить(КодВозвратаДиалога.Отмена);
		
		Ответ = Вопрос(ТекстВопроса, Кнопки, 60, 1, НСтр("ru = 'Проверка способа доставки'"));
		Если Ответ = 1 Тогда
			Объект.Подготовлена = Истина;
			Если НЕ Записать() Тогда
				Возврат;
			КонецЕсли;
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	//
	ПараметрыДоставки.Вставить("Рассылка", Объект.Наименование);
	
	//
	Если ПараметрыДоставки.ИспользоватьПапку Тогда
		ПараметрыДоставки.Вставить("Папка", Объект.Папка);
	КонецЕсли;
	//
	Если ПараметрыДоставки.ИспользоватьСетевойКаталог Тогда
		ПараметрыДоставки.Вставить("СетевойКаталогWindows", Объект.СетевойКаталогWindows);
		ПараметрыДоставки.Вставить("СетевойКаталогLinux",   Объект.СетевойКаталогLinux);
	КонецЕсли;
	//
	Если ПараметрыДоставки.ИспользоватьFTPРесурс Тогда
		ПараметрыДоставки.Вставить("Сервер",              Объект.FTPСервер);
		ПараметрыДоставки.Вставить("Порт",                Объект.FTPПорт);
		ПараметрыДоставки.Вставить("Логин",               Объект.FTPЛогин);
		ПараметрыДоставки.Вставить("Пароль",              Объект.FTPПароль);
		ПараметрыДоставки.Вставить("Каталог",             Объект.FTPКаталог);
		ПараметрыДоставки.Вставить("ПассивноеСоединение", Объект.FTPПассивноеСоединение);
	КонецЕсли;
	//
	Если ПараметрыДоставки.ИспользоватьЭлектроннуюПочту Тогда
		ПараметрыДоставки.Вставить("УчетнаяЗапись", Объект.УчетнаяЗапись);
		ПараметрыДоставки.Вставить("СкрытыеКопии",  Объект.СкрытыеКопии);
		ПараметрыДоставки.Вставить("ШаблонТемы",    НСтр("ru = 'Тестовое сообщение 1С:Предприятие'"));
		ПараметрыДоставки.Вставить("ШаблонТекста",  НСтр("ru = 'Это сообщение отправлено системой рассылок 1С:Предприятие.'")
			+ Символы.ПС + Кэш.ЗаголовокСистемы);
		
		РезультатВыбора = РассылкаОтчетовКлиент.ВыбратьПолучателя(Объект, Ложь, Истина); // Получатель и E-Mail
		Если РезультатВыбора = Неопределено Тогда
			Возврат;
		КонецЕсли;
		ПараметрыДоставки.Вставить("Получатели", РезультатВыбора);
		
		ПараметрыДоставки.Вставить("ТолькоУведомить", Ложь);
		ПараметрыДоставки.Вставить("ЗаполнитьСпособДоставкиВШаблонеСообщения", Ложь);
		ПараметрыДоставки.Вставить("ЗаполнитьСформированныеОтчетыВШаблонеСообщения", Ложь);
		ПараметрыДоставки.Вставить("ЗаполнитьПолучателяВШаблонеТемы", Ложь);
		ПараметрыДоставки.Вставить("ЗаполнитьПолучателяВШаблонеСообщения", Ложь);
		ПараметрыДоставки.Вставить("ПараметрыПисьма", Новый Структура);
		ПараметрыДоставки.Вставить("Соединение", Неопределено);
	КонецЕсли; // ПараметрыДоставки.ИспользоватьЭлектроннуюПочту
	
	ПараметрыДоставки.Вставить("ДобавлятьСсылки", "");
	
	Результат = ПроверитьСпособДоставки(Объект.Ссылка, ПараметрыДоставки);
	
	РассылкаОтчетовКлиент.ПоказатьРезультат(Результат);
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьТипПолучателей(Отказ)
	Если НЕ ЗначениеЗаполнено(ТипПолучателейРассылки) Тогда
		ТекстСообщения = НСтр("ru = 'Поле ""Получатели"" не заполнено'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "ТипПолучателейРассылки");
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьКоличествоПолучателей(Отказ)
	Если Объект.Получатели.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru = 'Не введено ни одной строки в список ""Получатели"".'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, , "Объект.Получатели");
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ПодборПользователейИлиГрупп(ПолучательИлиНаборПолучателей)
	Если ТипЗнч(ПолучательИлиНаборПолучателей) = Тип("Массив")
		И ПолучательИлиНаборПолучателей.Количество() > 0
		И (ТипЗнч(ПолучательИлиНаборПолучателей[0]) = Тип("СправочникСсылка.Пользователи")
		Или ТипЗнч(ПолучательИлиНаборПолучателей[0]) = Тип("СправочникСсылка.ГруппыПользователей")) Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

