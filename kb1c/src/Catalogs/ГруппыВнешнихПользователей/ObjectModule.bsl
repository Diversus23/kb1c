#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Перем СтарыйРодитель; // Значение родителя группы до изменения для использования
                      // в обработчике события ПриЗаписи.

Перем СтарыйСоставГруппыВнешнихПользователей; // Состав внешних пользователей группы внешних
                                              // пользователей до изменения для использования
                                              // в обработчике события ПриЗаписи.

Перем СтарыйСоставРолейГруппыВнешнихПользователей; // Состав ролей группы внешних пользователей
                                                   // до изменения для использования в обработчике
                                                   // события ПриЗаписи.

Перем СтароеЗначениеВсеОбъектыАвторизации; // Значение реквизита ВсеОбъектыАвторизации
                                           // до изменения для использования в обработчике
                                           // события ПриЗаписи.

Перем ЭтоНовый; // Показывает, что был записан новый объект.
                // Используются в обработчике события ПриЗаписи.

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если ДополнительныеСвойства.Свойство("ПроверенныеРеквизитыОбъекта") Тогда
		ПроверенныеРеквизитыОбъекта = ДополнительныеСвойства.ПроверенныеРеквизитыОбъекта;
	Иначе
		ПроверенныеРеквизитыОбъекта = Новый Массив;
	КонецЕсли;
	
	Ошибки = Неопределено;
	
	// Проверка использования родителя.
	Если Родитель = Справочники.ГруппыВнешнихПользователей.ВсеВнешниеПользователи Тогда
		ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,
			"Объект.Родитель",
			НСтр("ru = 'Предопределенная группа ""Все внешние пользователи"" не может быть родителем.'"));
	КонецЕсли;
	
	// Проверка незаполненных и повторяющихся внешних пользователей.
	ПроверенныеРеквизитыОбъекта.Добавить("Состав.ВнешнийПользователь");
	
	Для каждого ТекущаяСтрока Из Состав Цикл
		НомерСтроки = Состав.Индекс(ТекущаяСтрока);
		
		// Проверка заполнения значения.
		Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.ВнешнийПользователь) Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,
				"Объект.Состав[%1].ВнешнийПользователь",
				НСтр("ru = 'Внешний пользователь не выбран.'"),
				"Объект.Состав",
				НомерСтроки,
				НСтр("ru = 'Внешний пользователь в строке %1 не выбран.'"));
			Продолжить;
		КонецЕсли;
		
		// Проверка наличия повторяющихся значений.
		НайденныеЗначения = Состав.НайтиСтроки(Новый Структура("ВнешнийПользователь", ТекущаяСтрока.ВнешнийПользователь));
		Если НайденныеЗначения.Количество() > 1 Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,
				"Объект.Состав[%1].ВнешнийПользователь",
				НСтр("ru = 'Внешний пользователь повторяется.'"),
				"Объект.Состав",
				НомерСтроки,
				НСтр("ru = 'Внешний пользователь в строке %1 повторяется.'"));
		КонецЕсли;
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки, Отказ);
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, ПроверенныеРеквизитыОбъекта);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПользователиСлужебный.ЗапретРедактированияРолей() Тогда
		РезультатЗапроса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Роли");
		Если ТипЗнч(РезультатЗапроса) = Тип("РезультатЗапроса") Тогда
			СтарыйСоставРолейГруппыВнешнихПользователей = РезультатЗапроса.Выгрузить();
		Иначе
			СтарыйСоставРолейГруппыВнешнихПользователей = Роли.Выгрузить(Новый Массив);
		КонецЕсли;
	КонецЕсли;
	
	ЭтоНовый = ЭтоНовый();
	
	Если Ссылка = Справочники.ГруппыВнешнихПользователей.ВсеВнешниеПользователи Тогда
		
		ТипОбъектовАвторизации = Неопределено;
		ВсеОбъектыАвторизации  = Ложь;
		
		Если НЕ Родитель.Пустая() Тогда
			ВызватьИсключение
				НСтр("ru = 'Предопределенная группа ""Все внешние пользователи""
				           |может быть только в корне.'");
		КонецЕсли;
		Если Состав.Количество() > 0 Тогда
			ВызватьИсключение
				НСтр("ru = 'Добавление внешних пользователей в группу
				           |""Все внешние пользователи"" не поддерживается.'");
		КонецЕсли;
	Иначе
		Если Родитель = Справочники.ГруппыВнешнихПользователей.ВсеВнешниеПользователи Тогда
			ВызватьИсключение
				НСтр("ru = 'Предопределенная группа ""Все внешние пользователи""
				           |не может быть родителем.'");
		ИначеЕсли Родитель.ВсеОбъектыАвторизации Тогда
			ВызватьИсключение
				НСтр("ru = 'Группа, у которой стоит тип участников ""Все пользователи заданного типа""
				           |не может быть родителем.'");
		КонецЕсли;
		
		Если ТипОбъектовАвторизации = Неопределено Тогда
			ВсеОбъектыАвторизации = Ложь;
			
		ИначеЕсли ВсеОбъектыАвторизации
		        И ЗначениеЗаполнено(Родитель) Тогда
			
			ВызватьИсключение
				НСтр("ru = 'Группа внешних пользователей, содержащая все объекты
				           |информационной базы заданного типа может быть только в корне.'");
		КонецЕсли;
		
		// Проверка уникальности группы всех объектов авторизации заданного типа.
		Если ВсеОбъектыАвторизации Тогда
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Ссылка", Ссылка);
			Запрос.УстановитьПараметр("ТипОбъектовАвторизации", ТипОбъектовАвторизации);
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ПРЕДСТАВЛЕНИЕ(ГруппыВнешнихПользователей.Ссылка) КАК СсылкаПредставление
			|ИЗ
			|	Справочник.ГруппыВнешнихПользователей КАК ГруппыВнешнихПользователей
			|ГДЕ
			|	ГруппыВнешнихПользователей.Ссылка <> &Ссылка
			|	И ГруппыВнешнихПользователей.ТипОбъектовАвторизации = &ТипОбъектовАвторизации
			|	И ГруппыВнешнихПользователей.ВсеОбъектыАвторизации";
			
			РезультатЗапроса = Запрос.Выполнить();
			Если НЕ РезультатЗапроса.Пустой() Тогда
			
				Выборка = РезультатЗапроса.Выбрать();
				Выборка.Следующий();
				ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Группа внешних пользователей ""%1""
					           |для всех объектов информационной базы
					           |типа ""%2"" уже существует.'"),
					Выборка.СсылкаПредставление,
					ТипОбъектовАвторизации.Метаданные().Синоним);
			КонецЕсли;
		КонецЕсли;
		
		// Проверка совпадения типа объектов авторизации с родителем
		//(допустимо, если тип у родителя не задан).
		Если ЗначениеЗаполнено(Родитель) Тогда
			
			ТипОбъектовАвторизацииРодителя = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(
				Родитель, "ТипОбъектовАвторизации");
			
			Если ТипОбъектовАвторизацииРодителя <> Неопределено
			   И ТипОбъектовАвторизацииРодителя <> ТипОбъектовАвторизации Тогда
				
				ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'У нижестоящей группы внешних пользователей тип объектов
					           |информационной базы должен быть ""%1"",
					           |как у вышестоящей группы внешних пользователей ""%2"".'"),
					ТипОбъектовАвторизацииРодителя.Метаданные().Синоним,
					Родитель);
			КонецЕсли;
		КонецЕсли;
		
		// Если группе внешних пользователей устанавливается тип участников "Все пользователи заданного типа",
		// проверяем наличие подчиненных групп.
		Если ВсеОбъектыАвторизации
			И ЗначениеЗаполнено(Ссылка) Тогда
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Ссылка", Ссылка);
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ПРЕДСТАВЛЕНИЕ(ГруппыВнешнихПользователей.Ссылка) КАК СсылкаПредставление
			|ИЗ
			|	Справочник.ГруппыВнешнихПользователей КАК ГруппыВнешнихПользователей
			|ГДЕ
			|	ГруппыВнешнихПользователей.Родитель = &Ссылка";
			
			РезультатЗапроса = Запрос.Выполнить();
			Если НЕ РезультатЗапроса.Пустой() Тогда
				ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'У группы внешних пользователей ""%1""
							   |невозможно изменить тип участников,
							   |так как существует нижестоящая группа внешних пользователей'"),
					Наименование);
			КонецЕсли;
			
		КонецЕсли;
		
		// Проверка, что при изменении типа объектов авторизации
		// нет подчиненных элементов другого типа (очистка типа допустима).
		Если ТипОбъектовАвторизации <> Неопределено
		   И ЗначениеЗаполнено(Ссылка) Тогда
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Ссылка", Ссылка);
			Запрос.УстановитьПараметр("ТипОбъектовАвторизации", ТипОбъектовАвторизации);
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ПРЕДСТАВЛЕНИЕ(ГруппыВнешнихПользователей.Ссылка) КАК СсылкаПредставление,
			|	ГруппыВнешнихПользователей.ТипОбъектовАвторизации
			|ИЗ
			|	Справочник.ГруппыВнешнихПользователей КАК ГруппыВнешнихПользователей
			|ГДЕ
			|	ГруппыВнешнихПользователей.Родитель = &Ссылка
			|	И ГруппыВнешнихПользователей.ТипОбъектовАвторизации <> &ТипОбъектовАвторизации";
			
			РезультатЗапроса = Запрос.Выполнить();
			Если НЕ РезультатЗапроса.Пустой() Тогда
				
				Выборка = РезультатЗапроса.Выбрать();
				Выборка.Следующий();
				
				Если Выборка.ТипОбъектовАвторизации = Неопределено Тогда
					ПредставлениеДругогоТипаОбъектаАвторизации = НСтр("ru = '<Любой тип>'");
				Иначе
					ПредставлениеДругогоТипаОбъектаАвторизации =
						Выборка.ТипОбъектовАвторизации.Метаданные().Синоним;
				КонецЕсли;
				ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'У группы внешних пользователей ""%1""
					           |невозможно изменить тип объектов информационной базы,
					           |так как существует нижестоящая группа внешних пользователей
					           |""%2"" с другим типом
					           |объектов информационной базы ""%3"".'"),
					Наименование,
					Выборка.СсылкаПредставление,
					ПредставлениеДругогоТипаОбъектаАвторизации);
			КонецЕсли;
		КонецЕсли;
		
		СтарыеЗначения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			Ссылка, "ВсеОбъектыАвторизации, Родитель");
		
		СтарыйРодитель                      = СтарыеЗначения.Родитель;
		СтароеЗначениеВсеОбъектыАвторизации = СтарыеЗначения.ВсеОбъектыАвторизации;
		
		Если ЗначениеЗаполнено(Ссылка)
		   И Ссылка <> Справочники.ГруппыВнешнихПользователей.ВсеВнешниеПользователи Тогда
			
			РезультатЗапроса = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "Состав");
			Если ТипЗнч(РезультатЗапроса) = Тип("РезультатЗапроса") Тогда
				СтарыйСоставГруппыВнешнихПользователей = РезультатЗапроса.Выгрузить();
			Иначе
				СтарыйСоставГруппыВнешнихПользователей = Состав.Выгрузить(Новый Массив);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ПользователиСлужебный.ЗапретРедактированияРолей() Тогда
		ИзменилсяСоставРолейГруппыВнешнихПользователей = Ложь;
		
	Иначе
		ИзменилсяСоставРолейГруппыВнешнихПользователей =
			ПользователиСлужебный.РазличияЗначенийКолонки(
				"Роль",
				Роли.Выгрузить(),
				СтарыйСоставРолейГруппыВнешнихПользователей).Количество() <> 0;
	КонецЕсли;
	
	УчастникиИзменений = Новый Соответствие;
	ИзмененныеГруппы   = Новый Соответствие;
	
	Если Ссылка <> Справочники.ГруппыВнешнихПользователей.ВсеВнешниеПользователи Тогда
		
		Если ВсеОбъектыАвторизации
		 ИЛИ СтароеЗначениеВсеОбъектыАвторизации = Истина Тогда
			
			ПользователиСлужебный.ОбновитьСоставыГруппВнешнихПользователей(
				Ссылка, , УчастникиИзменений, ИзмененныеГруппы);
		Иначе
			ИзмененияСостава = ПользователиСлужебный.РазличияЗначенийКолонки(
				"ВнешнийПользователь",
				Состав.Выгрузить(),
				СтарыйСоставГруппыВнешнихПользователей);
			
			ПользователиСлужебный.ОбновитьСоставыГруппВнешнихПользователей(
				Ссылка, ИзмененияСостава, УчастникиИзменений, ИзмененныеГруппы);
			
			Если ЗначениеЗаполнено(СтарыйРодитель)
			   И СтарыйРодитель <> Родитель Тогда
				
				ПользователиСлужебный.ОбновитьСоставыГруппВнешнихПользователей(
					СтарыйРодитель, , УчастникиИзменений, ИзмененныеГруппы);
			КонецЕсли;
		КонецЕсли;
		
		ПользователиСлужебный.ОбновитьИспользуемостьСоставовГруппПользователей(
			Ссылка, УчастникиИзменений, ИзмененныеГруппы);
	КонецЕсли;
	
	Если ИзменилсяСоставРолейГруппыВнешнихПользователей Тогда
		ПользователиСлужебный.ОбновитьРолиВнешнихПользователей(Ссылка);
	КонецЕсли;
	
	ПользователиСлужебный.ПослеОбновленияСоставовГруппВнешнихПользователей(
		УчастникиИзменений, ИзмененныеГруппы);
	
	ПользователиСлужебный.ПослеДобавленияИзмененияПользователяИлиГруппы(Ссылка, ЭтоНовый);
	
КонецПроцедуры

#КонецЕсли