////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ОбработатьИнтерфейсРолей("ЗаполнитьРоли", Объект.Роли);
		ОбработатьИнтерфейсРолей("НастроитьИнтерфейсРолейПриСозданииФормы", Ложь);
	КонецЕсли;
	
	// Подготовка вспомогательных данных.
	
	// Заполнение списка всегда используемых видов доступа (для исключения при выборе).
	Отбор = Новый Структура("ВидДоступаИспользуетсяВсегда", Истина);
	Для каждого СвойстваВидаДоступа Из УправлениеДоступомСлужебный.СвойстваВидаДоступа().НайтиСтроки(Отбор) Цикл
		ВидыДоступаИспользуемыеВсегда.Добавить(СвойстваВидаДоступа.ВидДоступа);
	КонецЦикла;
	
	// Заполнение списка видов доступа через права по значениям доступа.
	Отбор = Новый Структура("ВидДоступаЧерезПраваПоЗначениямДоступа", Истина);
	Для каждого СвойстваВидаДоступа Из УправлениеДоступомСлужебный.СвойстваВидаДоступа().НайтиСтроки(Отбор) Цикл
		
		ВидДоступаПредставлениеОбъекта = Неопределено;
		Если СвойстваВидаДоступа.Таблицы.Количество() = 1 Тогда
			МетаданныеОбъект = Метаданные.НайтиПоПолномуИмени(СвойстваВидаДоступа.Таблицы[0]);
			ВидДоступаПредставлениеОбъекта = МетаданныеОбъект.ПредставлениеОбъекта;
		КонецЕсли;
		
		ВидыДоступаЧерезПраваПоЗначениямДоступа.Добавить(СвойстваВидаДоступа.ВидДоступа, ВидДоступаПредставлениеОбъекта);
	КонецЦикла;
	
	// Заполнение типов значений доступа всех видов доступа.
	Для каждого СвойстваВидаДоступа Из УправлениеДоступомСлужебный.СвойстваВидаДоступа() Цикл
		Для каждого Тип Из СвойстваВидаДоступа.ВидДоступа.ТипЗначения.Типы() Цикл
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(Тип);
			ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
			
			МетаданныеТипа = Метаданные.НайтиПоТипу(Тип);
			Если Метаданные.Перечисления.Найти(МетаданныеТипа.Имя) = МетаданныеТипа Тогда
				ПредставлениеТипа = МетаданныеТипа.Представление();
			Иначе
				ПредставлениеТипа = ?(
					ЗначениеЗаполнено(МетаданныеТипа.ПредставлениеОбъекта),
					МетаданныеТипа.ПредставлениеОбъекта,
					МетаданныеТипа.Представление());
			КонецЕсли;
			
			НоваяСтрока = ТипыЗначенийДоступаВидовДоступа.Добавить();
			НоваяСтрока.ВидДоступа         = СвойстваВидаДоступа.ВидДоступа;
			НоваяСтрока.ТипЗначенияДоступа = ОписаниеТипа.ПривестиЗначение(Неопределено);
			НоваяСтрока.ПредставлениеТипа  = ПредставлениеТипа;
		КонецЦикла;
	КонецЦикла;
	
	ВидДоступаПользователи = ПланыВидовХарактеристик.ВидыДоступа.Пользователи;
	ВидДоступаВнешниеПользователи = ПланыВидовХарактеристик.ВидыДоступа.ВнешниеПользователи;
	
	ИспользоватьВнешнихПользователей = ВнешниеПользователи.ИспользоватьВнешнихПользователей();
	
	// Установка постоянной доступности свойств.
	
	// Определение необходимости настройки ограничений доступа.
	Если НЕ УправлениеДоступом.ОграничиватьДоступНаУровнеЗаписей() Тогда
		Элементы.ВидыИЗначенияДоступа.Видимость = Ложь;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		// Не было вызова ПриЧтенииНаСервере, требуется сделать вызов ПриСозданииНаСервере.
		УстановитьДоступностьОписанияИВосстановленияПоставляемогоПрофиля();
	КонецЕсли;
	
	// Определение возможности редактирования элементов формы (перезапись доступна).
	БезРедактированияПоставляемыхЗначений =
		ТолькоПросмотр
		ИЛИ НЕ Объект.Ссылка.Пустая()
		    И Справочники.ПрофилиГруппДоступа.ЗапретИзмененияПрофиля(Объект);
	
	Элементы.Наименование.ТолькоПросмотр = БезРедактированияПоставляемыхЗначений;
	
	// Настройка редактирования видов доступа.
	Элементы.ВидыДоступа.ТолькоПросмотр                     =    БезРедактированияПоставляемыхЗначений;
	Элементы.ВидыДоступаДобавить.Доступность                = НЕ БезРедактированияПоставляемыхЗначений;
	Элементы.КонтекстноеМенюВидыДоступаДобавить.Доступность = НЕ БезРедактированияПоставляемыхЗначений;
	
	ОбработатьИнтерфейсРолей(
		"УстановитьТолькоПросмотрРолей",
		БезРедактированияПоставляемыхЗначений);
	
	// При создании копированием.
	Если Объект.ВидыДоступа.Количество() > 0
	   И НЕ ЗначениеЗаполнено(Объект.ВидыДоступа[0].Использование) Тогда
		
		ЗаполнитьСвойстваВидовДоступаВФорме();
	КонецЕсли;
	
	ОбновитьНеиспользуемыеВидыДоступа(Истина);
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ОбработатьИнтерфейсРолей("ЗаполнитьРоли", Объект.Роли);
	ОбработатьИнтерфейсРолей("НастроитьИнтерфейсРолейПриСозданииФормы", Истина);
	
	ОбновитьГруппыДоступаПрофиля = Ложь;
	
	УстановитьДоступностьОписанияИВосстановленияПоставляемогоПрофиля(ТекущийОбъект);
	
	ЗаполнитьСвойстваВидовДоступаВФорме();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ТребуетсяПроверитьЗаполнение = Истина;
	
	Если ЗначениеЗаполнено(Объект.Ссылка)
	   И ТребуетсяОбновитьГруппыДоступаПрофиля Тогда
		
		Если ПроверитьЗаполнение() Тогда
			ТребуетсяПроверитьЗаполнение = Ложь;
			
			КодОтвета = Вопрос(
				ТекстВопросаОбновитьГруппыДоступаПрофиля(),
				РежимДиалогаВопрос.ДаНетОтмена,
				,
				КодВозвратаДиалога.Нет);
			
			Если КодОтвета = КодВозвратаДиалога.Отмена Тогда
				Отказ = Истина;
				Возврат;
				
			ИначеЕсли КодОтвета = КодВозвратаДиалога.Да Тогда
				ПараметрыЗаписи.Вставить("ОбновитьГруппыДоступаПрофиля");
			КонецЕсли;
		Иначе
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Заполнение ролей объекта из коллекции.
	ТекущийОбъект.Роли.Очистить();
	Для каждого Строка Из КоллекцияРолей Цикл
		ТекущийОбъект.Роли.Добавить().Роль = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(
			"Роль." + Строка.Роль);
	КонецЦикла;
	
	Если ПараметрыЗаписи.Свойство("ОбновитьГруппыДоступаПрофиля") Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("ОбновитьГруппыДоступаПрофиля");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если ТекущийОбъект.ДополнительныеСвойства.Свойство(
	         "ПерсональныеГруппыДоступаСОбновленнымНаименованием") Тогда
		
		ПараметрыЗаписи.Вставить(
			"ПерсональныеГруппыДоступаСОбновленнымНаименованием",
			ТекущийОбъект.ДополнительныеСвойства.ПерсональныеГруппыДоступаСОбновленнымНаименованием);
	КонецЕсли;
	
	ЗаполнитьСвойстваВидовДоступаВФорме();
	
	УстановитьДоступностьОписанияИВосстановленияПоставляемогоПрофиля(ТекущийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ОбъектЗаписывался = Истина;
	ТребуетсяОбновитьГруппыДоступаПрофиля = Ложь;
	
	Оповестить("Запись_ПрофилиГруппДоступа", Новый Структура, Объект.Ссылка);
	
	Если ПараметрыЗаписи.Свойство("ПерсональныеГруппыДоступаСОбновленнымНаименованием") Тогда
		ОповеститьОбИзменении(Тип("СправочникСсылка.ГруппыДоступа"));
		
		Для каждого ПерсональнаяГруппаДоступа Из ПараметрыЗаписи.ПерсональныеГруппыДоступаСОбновленнымНаименованием Цикл
			Оповестить("Запись_ГруппыДоступа", Новый Структура, ПерсональнаяГруппаДоступа);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если НЕ ТребуетсяПроверитьЗаполнение Тогда
		ПроверяемыеРеквизиты.Очистить();
		Возврат;
	КонецЕсли;
	
	ПроверенныеРеквизитыОбъекта = Новый Массив;
	Ошибки = Неопределено;
	
	// Проверка наличия ролей в метаданных.
	ПроверенныеРеквизитыОбъекта.Добавить("Роли.Роль");
	
	ЭлементыДерева = Роли.ПолучитьЭлементы();
	Для каждого Строка Из ЭлементыДерева Цикл
		Если Строка.Пометка И Лев(Строка.Синоним, 1) = "?" Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,
				"Роли[%1].РолиСиноним",
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Роль ""%1"" не найдена в метаданных.'"),
					Строка.Синоним),
				"Роли",
				ЭлементыДерева.Индекс(Строка),
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Роль ""%2"" в строке %1 не найдена в метаданных.'"),
					"%1", Строка.Синоним));
		КонецЕсли;
	КонецЦикла;
	
	// Проверка незаполненных и повторяющихся видов доступа.
	ПроверенныеРеквизитыОбъекта.Добавить("ВидыДоступа.ВидДоступа");
	
	Для каждого Строка Из Объект.ВидыДоступа Цикл
		
		// Проверка заполнения вида доступа.
		Если НЕ ЗначениеЗаполнено(Строка.ВидДоступа) Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,
				"Объект.ВидыДоступа[%1].ВидДоступа",
				НСтр("ru = 'Вид доступа не выбран.'"),
				"ВидыДоступа",
				Объект.ВидыДоступа.Индекс(Строка),
				НСтр("ru = 'Вид доступа в строке %1 не выбран.'"));
		КонецЕсли;
		
		// Проверка наличия повторяющихся видов доступа.
		НайденныеВидыДоступа = Объект.ВидыДоступа.НайтиСтроки(
			Новый Структура("ВидДоступа", Строка.ВидДоступа));
		
		Если НайденныеВидыДоступа.Количество() > 1 Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,
				"Объект.ВидыДоступа[%1].ВидДоступа",
				НСтр("ru = 'Вид доступа повторяется.'"),
				"ВидыДоступа",
				Объект.ВидыДоступа.Индекс(Строка),
				НСтр("ru = 'Вид доступа в строке %1 повторяется.'"));
		КонецЕсли;
	КонецЦикла;
	
	// Проверка незаполненных и повторяющихся значений доступа.
	ПроверенныеРеквизитыОбъекта.Добавить("ЗначенияДоступа.ВидДоступа");
	ПроверенныеРеквизитыОбъекта.Добавить("ЗначенияДоступа.ЗначениеДоступа");
	
	НомерСтрокиВидаДоступа = Объект.ВидыДоступа.Количество()-1;
	
	Пока НЕ Отказ И НомерСтрокиВидаДоступа >= 0 Цикл
		ТекущаяСтрокаВидаДоступа = Объект.ВидыДоступа.Получить(НомерСтрокиВидаДоступа);
		
		ЗначенияДоступаВидаДоступа = Объект.ЗначенияДоступа.НайтиСтроки(
			Новый Структура("ВидДоступа", ТекущаяСтрокаВидаДоступа.ВидДоступа));
		НомерСтроки = ЗначенияДоступаВидаДоступа.Количество()-1;
		
		Пока НомерСтроки >= 0 Цикл
			
			ТекущаяСтрока = ЗначенияДоступаВидаДоступа.Получить(НомерСтроки);
			
			// Проверка заполнения значения.
			Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.ЗначениеДоступа) Тогда
				Элементы.ВидыДоступа.ТекущаяСтрока = ТекущаяСтрокаВидаДоступа.ПолучитьИдентификатор();
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,
					"Объект.ЗначенияДоступа[%1].ЗначениеДоступа",
					НСтр("ru = 'Значение не выбрано.'"),
					"ЗначенияДоступа",
					НомерСтроки,
					НСтр("ru = 'Значение в строке %1 не выбрано.'"));
				Отказ = Истина;
				Прервать;
			КонецЕсли;
			
			// Проверка наличия повторяющихся значений.
			Отбор = Новый Структура;
			Отбор.Вставить("ВидДоступа",      ТекущаяСтрокаВидаДоступа.ВидДоступа);
			Отбор.Вставить("ЗначениеДоступа", ТекущаяСтрока.ЗначениеДоступа);
			
			НайденныеЗначения = Объект.ЗначенияДоступа.НайтиСтроки(Отбор);
			
			Если НайденныеЗначения.Количество() > 1 Тогда
				Элементы.ВидыДоступа.ТекущаяСтрока = ТекущаяСтрокаВидаДоступа.ПолучитьИдентификатор();
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,
					"Объект.ЗначенияДоступа[%1].ЗначениеДоступа",
					НСтр("ru = 'Значение повторяется.'"),
					"ЗначенияДоступа",
					НомерСтроки,
					НСтр("ru = 'Значение в строке %1 повторяется.'"));
				Отказ = Истина;
				Прервать;
			КонецЕсли;
			
			НомерСтроки = НомерСтроки - 1;
		КонецЦикла;
		
		НомерСтрокиВидаДоступа = НомерСтрокиВидаДоступа - 1;
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки, Отказ);
	
	ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("Объект"));
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ПроверенныеРеквизитыОбъекта",
		ПроверенныеРеквизитыОбъекта);
	
	Если НЕ ТекущийОбъект.ПроверитьЗаполнение() Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	ОбработатьИнтерфейсРолей("НастроитьИнтерфейсРолейПриЗагрузкеНастроек", Настройки);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ВидыДоступа

&НаКлиенте
Процедура ВидыДоступаПриИзменении(Элемент)
	
	ТребуетсяОбновитьГруппыДоступаПрофиля = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыДоступаПриАктивизацииСтроки(Элемент)
	
	ПриИзмененииТекущегоВидаДоступа(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыДоступаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Копирование Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыДоступаПередУдалением(Элемент, Отказ)
	
	ТекущийВидДоступа = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыДоступаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НЕ ЗначениеЗаполнено(Элементы.ВидыДоступа.ТекущиеДанные.Использование) Тогда
		Элементы.ВидыДоступа.ТекущиеДанные.Предустановленный = Ложь;
		Элементы.ВидыДоступа.ТекущиеДанные.ДоступРазрешен    = Ложь;
		Элементы.ВидыДоступа.ТекущиеДанные.Использование     =
			Элементы.ВидыДоступаИспользование.СписокВыбора.НайтиПоЗначению(
				"ВначалеВсеЗапрещены").Представление;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Элементы.ВидыДоступа.ТекущиеДанные.ВидДоступа) Тогда
		Элементы.ВидыДоступа.ТекущиеДанные.ИспользуетсяВПрограмме = Истина;
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ВидыДоступаВидДоступаПриИзменении(Элемент)
	
	Если ВидыДоступаИспользуемыеВсегда.НайтиПоЗначению(
	         Элементы.ВидыДоступа.ТекущиеДанные.ВидДоступа) <> Неопределено Тогда
		
		Предупреждение(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Вид доступа ""%1"" не требуется выбирать.
			           |По нему ограничение всегда выполняется.'"),
			Элементы.ВидыДоступа.ТекущиеДанные.ВидДоступа));
		
		Элементы.ВидыДоступа.ТекущиеДанные.ВидДоступа = Неопределено;
	КонецЕсли;
	
	ЗаполнитьСвойстваВидовДоступаВФорме();
	
	ПриИзмененииТекущегоВидаДоступа(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыДоступаВидДоступаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ПараметрыВыбора = Новый Массив;
	
	Если Элементы.ПоказыватьНеиспользуемыеВидыДоступа.Пометка Тогда
		ПараметрыВыбора.Добавить(Новый ПараметрВыбора("ПоказыватьНеиспользуемыеВидыДоступа", Истина));
	КонецЕсли;
	
	Элемент.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыДоступаВидДоступаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеВыбора = СформироватьДанныеВыбораВидаДоступа(
		Текст, Элементы.ПоказыватьНеиспользуемыеВидыДоступа.Пометка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыДоступаВидДоступаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеВыбора = СформироватьДанныеВыбораВидаДоступа(
		Текст, Элементы.ПоказыватьНеиспользуемыеВидыДоступа.Пометка);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыДоступаИспользованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеВыбора = Элемент.СписокВыбора;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыДоступаИспользованиеОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыДоступаИспользованиеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ВидыДоступаЧерезПраваПоЗначениямДоступа.НайтиПоЗначению(
	         Элементы.ВидыДоступа.ТекущиеДанные.ВидДоступа) <> Неопределено
		И
		  ВыбранноеЗначение = "ВсеРазрешены" Тогда
		
		Предупреждение(
			НСтр("ru = 'Для вида доступа через права по значениям доступа
			           |вариант ""Все разрешены, исключения задаются в профиле""
			           |не имеет смысла - вместо этого следует удалить вид доступа.'"));
		
		Если ВыбранноеЗначение = "ВсеРазрешены" Тогда
			ВыбранноеЗначение = "ВсеЗапрещены";
		Иначе
			ВыбранноеЗначение = "ВначалеВсеЗапрещены";
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ВидыДоступа.ТекущиеДанные.Предустановленный =
	            ВыбранноеЗначение = "ВсеРазрешены"
	        ИЛИ ВыбранноеЗначение = "ВсеЗапрещены";
	
	Элементы.ВидыДоступа.ТекущиеДанные.ДоступРазрешен    =
	            ВыбранноеЗначение = "ВначалеВсеРазрешены"
	        ИЛИ ВыбранноеЗначение = "ВсеРазрешены";
	
	Модифицированность = Истина;
	ПриИзмененииТекущегоВидаДоступа(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ЗначенияДоступа

&НаКлиенте
Процедура ЗначенияДоступаПриИзменении(Элемент)
	
	Если Элемент.ТекущиеДанные <> Неопределено
	   И НЕ ЗначениеЗаполнено(Элемент.ТекущиеДанные.ВидДоступа) Тогда
		
		Элемент.ТекущиеДанные.ВидДоступа = ТекущийВидДоступа;
		
		Отбор = Новый Структура("ВидДоступа", ТекущийВидДоступа);
		Элемент.ТекущиеДанные.НомерСтрокиПоВиду = Объект.ЗначенияДоступа.НайтиСтроки(Отбор).Количество();
	КонецЕсли;
	
	ОбновитьНомерСтрокиПоВиду(ЭтаФорма, Элементы.ВидыДоступа.ТекущиеДанные);
	ОбновитьПредставлениеИспользованияВидаДоступа(ЭтаФорма, Элементы.ВидыДоступа.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначенияДоступаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Элемент.ТекущиеДанные.ЗначениеДоступа = Неопределено Тогда
		Элемент.ТекущиеДанные.ЗначениеДоступа = ТекущиеТипыЗначенийДоступа[0].Значение;
	КонецЕсли;
	
	Элементы.ЗначениеДоступа.КнопкаОчистки
		= ТекущийТипЗначенияДоступа <> Неопределено
		И ТекущиеТипыЗначенийДоступа.Количество() > 1;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеДоступаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если НЕ ВыбранТипЗначенияДоступа(ТекущиеТипыЗначенийДоступа) Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ЗначенияДоступа.ТекущиеДанные;
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.ЗначениеДоступа)
	   И ТекущиеДанные.ЗначениеДоступа <> ТекущийТипЗначенияДоступа Тогда
		
		ТекущиеДанные.ЗначениеДоступа = ТекущийТипЗначенияДоступа;
	КонецЕсли;
	
	Элементы.ЗначениеДоступа.КнопкаОчистки
		= ТекущийТипЗначенияДоступа <> Неопределено
		И ТекущиеТипыЗначенийДоступа.Количество() > 1;
	
	Если ТекущийТипЗначенияДоступа = ПользовательПустаяСсылка ИЛИ
	     ТекущийТипЗначенияДоступа = ГруппаПользователейПустаяСсылка Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("РежимВыбора", Истина);
		ПараметрыФормы.Вставить("ТекущаяСтрока", ТекущиеДанные.ЗначениеДоступа);
		ПараметрыФормы.Вставить("ВыборГруппПользователей", Истина);
		
		ОткрытьФорму("Справочник.Пользователи.ФормаВыбора", ПараметрыФормы, Элемент);
		
	ИначеЕсли ТекущийТипЗначенияДоступа = ВнешнийПользовательПустаяСсылка ИЛИ
	          ТекущийТипЗначенияДоступа = ГруппаВнешнихПользователейПустаяСсылка Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("РежимВыбора", Истина);
		ПараметрыФормы.Вставить("ТекущаяСтрока", ТекущиеДанные.ЗначениеДоступа);
		ПараметрыФормы.Вставить("ВыборГруппВнешнихПользователей", Истина);
		
		ОткрытьФорму("Справочник.ВнешниеПользователи.ФормаВыбора", ПараметрыФормы, Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеДоступаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ЗначенияДоступа.ТекущиеДанные;
	
	Если ВыбранноеЗначение = Тип("СправочникСсылка.Пользователи") ИЛИ
	     ВыбранноеЗначение = Тип("СправочникСсылка.ГруппыПользователей") Тогда
	
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ТекущаяСтрока", ТекущиеДанные.ЗначениеДоступа);
		ПараметрыФормы.Вставить("ВыборГруппПользователей", Истина);
		
		ОткрытьФорму("Справочник.Пользователи.ФормаВыбора", ПараметрыФормы, Элемент);
		
	ИначеЕсли ВыбранноеЗначение = Тип("СправочникСсылка.ВнешниеПользователи") ИЛИ
	          ВыбранноеЗначение = Тип("СправочникСсылка.ГруппыВнешнихПользователей") Тогда
	
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ТекущаяСтрока", ТекущиеДанные.ЗначениеДоступа);
		ПараметрыФормы.Вставить("ВыборГруппВнешнихПользователей", Истина);
		
		ОткрытьФорму("Справочник.ВнешниеПользователи.ФормаВыбора", ПараметрыФормы, Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначенияДоступаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		ПриИзмененииТекущегоВидаДоступа(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеДоступаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущийТипЗначенияДоступа = Неопределено;
	
	Элементы.ЗначенияДоступа.ТекущиеДанные.ЗначениеДоступа = ТекущиеТипыЗначенийДоступа[0].Значение;
	Элементы.ЗначениеДоступа.КнопкаОчистки = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеДоступаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		
		Если ТекущийВидДоступа = ВидДоступаВнешниеПользователи
		 ИЛИ ТекущийВидДоступа = ВидДоступаПользователи Тогда
			
			ДанныеВыбора = СформироватьДанныеВыбораПользователя(
				Текст,
				,
				ТекущийВидДоступа = ВидДоступаВнешниеПользователи,
				ТекущийВидДоступа <> ВидДоступаПользователи);
		Иначе
			ДанныеВыбора = СформироватьДанныеВыбораЗначенияДоступа(
				Текст, ТекущийВидДоступа, Ложь);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеДоступаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		
		Если ТекущийВидДоступа = ВидДоступаВнешниеПользователи
		 ИЛИ ТекущийВидДоступа = ВидДоступаПользователи Тогда
			
			ДанныеВыбора = СформироватьДанныеВыбораПользователя(
				Текст,
				,
				ТекущийВидДоступа = ВидДоступаВнешниеПользователи,
				ТекущийВидДоступа <> ВидДоступаПользователи);
		Иначе
			ДанныеВыбора = СформироватьДанныеВыбораЗначенияДоступа(
				Текст, ТекущийВидДоступа, Ложь);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ Роли

////////////////////////////////////////////////////////////////////////////////
// Для работы интерфейса ролей

&НаКлиенте
Процедура РолиПометкаПриИзменении(Элемент)
	
	Если Элементы.Роли.ТекущиеДанные <> Неопределено Тогда
		ОбработатьИнтерфейсРолей("ОбновитьСоставРолей");
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ВосстановитьПоНачальномуЗаполнению(Команда)
	
	Если Модифицированность ИЛИ ОбъектЗаписывался Тогда
		РазблокироватьДанныеФормыДляРедактирования();
	КонецЕсли;
	
	Ответ = Вопрос(
		НСтр("ru = 'Восстановить профиль по содержимому начального заполнения?'"),
		РежимДиалогаВопрос.ДаНет);
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		КодОтвета = Вопрос(
			ТекстВопросаОбновитьГруппыДоступаПрофиля(),
			РежимДиалогаВопрос.ДаНетОтмена,
			,
			КодВозвратаДиалога.Нет);
		
		Если КодОтвета <> КодВозвратаДиалога.Отмена Тогда
			ОбновитьГруппыДоступа = (КодОтвета = КодВозвратаДиалога.Да);
			
			НачальноеЗаполнениеПрофиляГруппДоступа(ОбновитьГруппыДоступа);
			
			Прочитать();
			ПользователиСлужебныйКлиент.РазвернутьПодсистемыРолей(ЭтаФорма);
			
			Если ОбновитьГруппыДоступа Тогда
				Текст = НСтр("ru = 'Профиль ""%1"" восстановлен по содержимому начального заполнения, группы доступа профиля обновлены.'");
			Иначе
				Текст = НСтр("ru = 'Профиль ""%1"" восстановлен по содержимому начального заполнения, группы доступа профиля не обновлены.'");
			КонецЕсли;
			
			ПоказатьОповещениеПользователя(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				Текст, Объект.Наименование));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеПоставляемогоПрофиля(Команда)
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(ОписаниеПоставляемогоПрофиляНаСервере(Объект.Ссылка));
	ТекстовыйДокумент.ТолькоПросмотр = Истина;
	
	ТекстовыйДокумент.Показать(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Описание поставляемого профиля ""%1""'"),
		Объект.Наименование));
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьНеИспользуемыеВидыДоступа(Команда)
	
	ОбновитьНеиспользуемыеВидыДоступа(Ложь);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Для работы интерфейса ролей

&НаКлиенте
Процедура ПоказатьТолькоВыбранныеРоли(Команда)
	
	ОбработатьИнтерфейсРолей("ТолькоВыбранныеРоли");
	ПользователиСлужебныйКлиент.РазвернутьПодсистемыРолей(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппировкаРолейПоПодсистемам(Команда)
	
	ОбработатьИнтерфейсРолей("ГруппировкаПоПодсистемам");
	ПользователиСлужебныйКлиент.РазвернутьПодсистемыРолей(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВключитьРоли(Команда)
	
	ОбработатьИнтерфейсРолей("ОбновитьСоставРолей", "ВключитьВсе");
	
	ПользователиСлужебныйКлиент.РазвернутьПодсистемыРолей(ЭтаФорма, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсключитьРоли(Команда)
	
	ОбработатьИнтерфейсРолей("ОбновитьСоставРолей", "ИсключитьВсе");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура УстановитьДоступностьОписанияИВосстановленияПоставляемогоПрофиля(ТекущийОбъект = Неопределено)
	
	Если ТекущийОбъект = Неопределено Тогда
		ТекущийОбъект = Объект;
	КонецЕсли;
	
	Если Справочники.ПрофилиГруппДоступа.ЕстьНачальноеЗаполнениеПрофиля(ТекущийОбъект.Ссылка) Тогда
		
		Если Справочники.ПрофилиГруппДоступа.ПоставляемыйПрофильИзменен(ТекущийОбъект) Тогда
			// Определение прав восстановления по начальному заполнению.
			Элементы.ВосстановитьПоНачальномуЗаполнению.Видимость =
				Пользователи.ЭтоПолноправныйПользователь(,, Ложь);
			
			Элементы.ОписаниеПоставляемогоПрофиля.Доступность = Ложь;
		Иначе
			Элементы.ВосстановитьПоНачальномуЗаполнению.Видимость = Ложь;
			Элементы.ОписаниеПоставляемогоПрофиля.Доступность = Истина;
		КонецЕсли;
	Иначе
		Элементы.ВосстановитьПоНачальномуЗаполнению.Видимость = Ложь;
		Элементы.ОписаниеПоставляемогоПрофиля.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСвойстваВидовДоступаВФорме()
	
	Для каждого Строка Из Объект.ВидыДоступа Цикл
		Если ЗначениеЗаполнено(Строка.ВидДоступа) Тогда
			Строка.ИспользуетсяВПрограмме = УправлениеДоступомСлужебный.ВидДоступаИспользуется(Строка.ВидДоступа);
		КонецЕсли;
		ОбновитьПредставлениеИспользованияВидаДоступа(ЭтаФорма, Строка);
		ОбновитьНомерСтрокиПоВиду(ЭтаФорма, Строка);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНеиспользуемыеВидыДоступа(ПередОткрытиемФормы)
	
	Элементы.ПоказыватьНеИспользуемыеВидыДоступа.Пометка = ?(ПередОткрытиемФормы, Ложь,
		НЕ Элементы.ПоказыватьНеИспользуемыеВидыДоступа.Пометка);
	
	Отбор = Новый Структура;
	
	Если Не Элементы.ПоказыватьНеиспользуемыеВидыДоступа.Пометка Тогда
		Отбор.Вставить("ИспользуетсяВПрограмме", Истина);
		Элементы.ВидыДоступа.ОтборСтрок = Новый ФиксированнаяСтруктура(Отбор);
	Иначе
		Элементы.ВидыДоступа.ОтборСтрок = Новый ФиксированнаяСтруктура();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПриИзмененииТекущегоВидаДоступа(Знач Форма)
	
	Элементы = Форма.Элементы;
	
	ЗначенияЗадаются = Ложь;
	
	#Если Клиент Тогда
		ТекущиеДанные = Элементы.ВидыДоступа.ТекущиеДанные;
	#Иначе
		ТекущиеДанные = Форма.Объект.ВидыДоступа.НайтиПоИдентификатору(
			?(Элементы.ВидыДоступа.ТекущаяСтрока = Неопределено,
			  -1,
			  
			  Элементы.ВидыДоступа.ТекущаяСтрока));
	#КонецЕсли
	
	Если ТекущиеДанные <> Неопределено Тогда
		Если ЗначениеЗаполнено(ТекущиеДанные.ВидДоступа)
		   И НЕ ТекущиеДанные.ИспользуетсяВПрограмме Тогда
			
			Если НЕ Элементы.ВидДоступаНеИспользуется.Видимость Тогда
				Элементы.ВидДоступаНеИспользуется.Видимость = Истина;
			КонецЕсли;
		Иначе
			Если Элементы.ВидДоступаНеИспользуется.Видимость Тогда
				Элементы.ВидДоступаНеИспользуется.Видимость = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Форма.ТекущийВидДоступа = ТекущиеДанные.ВидДоступа;
		НайденныйВидДоступа = Форма.ВидыДоступаЧерезПраваПоЗначениямДоступа.НайтиПоЗначению(
			ТекущиеДанные.ВидДоступа);
		
		Если НайденныйВидДоступа = Неопределено Тогда
			
			ЗначенияЗадаются = ТекущиеДанные.Предустановленный;
			Если ЗначенияЗадаются Тогда
				
				Элементы.ТипыВидовДоступа.ТекущаяСтраница =
					Элементы.ПредустановленныйВидДоступа;
				
				// Установка отбора значений.
				Если Элементы.ЗначенияДоступа.ОтборСтрок = Неопределено
				 ИЛИ Элементы.ЗначенияДоступа.ОтборСтрок.ВидДоступа
				         <> ТекущиеДанные.ВидДоступа Тогда
					
					Элементы.ЗначенияДоступа.ОтборСтрок =
						Новый ФиксированнаяСтруктура("ВидДоступа", ТекущиеДанные.ВидДоступа);
				КонецЕсли;
			Иначе
				Элементы.ТипыВидовДоступа.ТекущаяСтраница =
					Элементы.ОбычныйВидДоступа;
			КонецЕсли;
		Иначе
			Элементы.ТипыВидовДоступа.ТекущаяСтраница =
				Элементы.ВидДоступаЧерезПраваПоЗначениямДоступа;
			
			Если НайденныйВидДоступа.Представление <> Неопределено Тогда
				ТекстИнформации = 
					НСтр("ru = 'Права доступа настраиваются индивидуально для каждого объекта ""%1""
					|с помощью команды ""Права доступа"".'");
				Элементы.ТекстИнформации.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ТекстИнформации,
					НайденныйВидДоступа.Представление);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ТекущиеДанные.ВидДоступа = Форма.ВидДоступаПользователи Тогда
			ШаблонНадписи = ?(
				ТекущиеДанные.ДоступРазрешен,
				НСтр("ru = 'Разрешенные значения (%1) - текущий пользователь всегда разрешен'"),
				НСтр("ru = 'Разрешенные значения (%1) - текущий пользователь всегда разрешен'") );
		
		ИначеЕсли ТекущиеДанные.ВидДоступа = Форма.ВидДоступаВнешниеПользователи Тогда
			ШаблонНадписи = ?(
				ТекущиеДанные.ДоступРазрешен,
				НСтр("ru = 'Запрещенные значения (%1) - текущий внешний пользователь всегда разрешен'"),
				НСтр("ru = 'Запрещенные значения (%1) - текущий внешний пользователь всегда разрешен'") );
		Иначе
			ШаблонНадписи = ?(
				ТекущиеДанные.ДоступРазрешен,
				НСтр("ru = 'Запрещенные значения (%1)'"),
				НСтр("ru = 'Разрешенные значения (%1)'") );
		КонецЕсли;
		
		// Обновление поля НадписьВидДоступа.
		Форма.НадписьВидДоступа = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонНадписи,
			Строка(ТекущиеДанные.ВидДоступа));
		
		ОбновитьПредставлениеИспользованияВидаДоступа(Форма, ТекущиеДанные);
	Иначе
		Если Элементы.ВидДоступаНеИспользуется.Видимость Тогда
			Элементы.ВидДоступаНеИспользуется.Видимость = Ложь;
		КонецЕсли;
		
		Форма.ТекущийВидДоступа = Неопределено;
		Элементы.ЗначенияДоступа.ОтборСтрок =
			Новый ФиксированнаяСтруктура("ВидДоступа", Неопределено);
		
		Если Форма.Объект.ВидыДоступа.Количество() = 0 Тогда
			Форма.Объект.ЗначенияДоступа.Очистить();
		КонецЕсли;
	КонецЕсли;
	
	Форма.ТекущийТипЗначенияДоступа  = ?(
		ТекущиеДанные = Неопределено,
		Неопределено,
		ТекущиеДанные.ТекущийТипЗначенияДоступа);
	
	Форма.ТекущиеТипыЗначенийДоступа = Новый СписокЗначений;
	
	Если ЗначенияЗадаются Тогда
		Отбор = Новый Структура("ВидДоступа", ТекущиеДанные.ВидДоступа);
		ОписаниеТиповВидовДоступа = Форма.ТипыЗначенийДоступаВидовДоступа.НайтиСтроки(Отбор);
		Для каждого ОписаниеТипаВидаДоступа Из ОписаниеТиповВидовДоступа Цикл
			
			Форма.ТекущиеТипыЗначенийДоступа.Добавить(
				ОписаниеТипаВидаДоступа.ТипЗначенияДоступа,
				ОписаниеТипаВидаДоступа.ПредставлениеТипа);
		КонецЦикла;
	Иначе
		Если ТекущиеДанные <> Неопределено Тогда
			Отбор = Новый Структура("ВидДоступа", Элементы.ВидыДоступа.ТекущиеДанные.ВидДоступа);
			Для каждого Строка Из Форма.Объект.ЗначенияДоступа.НайтиСтроки(Отбор) Цикл
				Форма.Объект.ЗначенияДоступа.Удалить(Строка);
			КонецЦикла
		КонецЕсли;
	КонецЕсли;
	
	Если Форма.ТекущиеТипыЗначенийДоступа.Количество() = 0 Тогда
		Форма.ТекущиеТипыЗначенийДоступа.Добавить(Неопределено, НСтр("ru = 'Неопределено'"));
	КонецЕсли;
	
	Элементы.ЗначенияДоступа.Доступность = ЗначенияЗадаются;
	Элементы.ЗначенияДоступаДобавить.Доступность = ЗначенияЗадаются;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПредставлениеИспользованияВидаДоступа(Форма, ОписаниеВидаДоступа)
	
	Если ОписаниеВидаДоступа.Предустановленный Тогда
		Отбор = Новый Структура("ВидДоступа", ОписаниеВидаДоступа.ВидДоступа);
		КоличествоЗначений = Форма.Объект.ЗначенияДоступа.НайтиСтроки(Отбор).Количество();
		Если КоличествоЗначений = 0 Тогда
			ЧислоИПредмет = НСтр("ru = 'не назначены'");
		Иначе
			ПрописьЧисла          = ЧислоПрописью(
				КоличествоЗначений,
				"Л = ru_RU",
				НСтр("ru = ',,,,,,,,0'"));
			
			ПрописьЧислаИПредмета = ЧислоПрописью(
				КоличествоЗначений,
				"Л = ru_RU",
				НСтр("ru = 'значение,значения,значений,,,,,,0'"));
			
			ЧислоИПредмет = СтрЗаменить(
				ПрописьЧислаИПредмета,
				ПрописьЧисла,
				Формат(КоличествоЗначений, "ЧГ=") + " ");
			
		КонецЕсли;
		ОписаниеВидаДоступа.Использование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			?(ОписаниеВидаДоступа.ДоступРазрешен,
			  НСтр("ru = 'Все разрешены, исключения назначаются в профиле (%1)'"),
			  НСтр("ru = 'Все запрещены, исключения назначаются в профиле (%1)'") ),
			ЧислоИПредмет);
	Иначе
		ОписаниеВидаДоступа.Использование =
			?(ОписаниеВидаДоступа.ДоступРазрешен,
			  НСтр("ru = 'Все разрешены, исключения назначаются в группах доступа'"),
			  НСтр("ru = 'Все запрещены, исключения назначаются в группах доступа'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьНомерСтрокиПоВиду(Форма, ОписаниеВидаДоступа)
	
	Отбор = Новый Структура("ВидДоступа", ОписаниеВидаДоступа.ВидДоступа);
	ЗначенияДоступаПоВиду = Форма.Объект.ЗначенияДоступа.НайтиСтроки(Отбор);
	
	ТекущийНомер = 1;
	Для каждого Строка Из ЗначенияДоступаПоВиду Цикл
		Строка.НомерСтрокиПоВиду = ТекущийНомер;
		ТекущийНомер = ТекущийНомер + 1;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ВыбранТипЗначенияДоступа(Знач ТипыЗначенияДоступа)
	
	Если ТекущийТипЗначенияДоступа <> Неопределено Тогда
		
		Возврат Истина;
		
	ИначеЕсли ТипыЗначенияДоступа.Количество() = 1 Тогда
		
		ТекущийТипЗначенияДоступа = ТипыЗначенияДоступа[0].Значение;
		Возврат Истина;
		
	ИначеЕсли ТипыЗначенияДоступа.Количество() > 0 Тогда
		
		Если ТипыЗначенияДоступа.Количество() = 2 Тогда
		
			Если ТипыЗначенияДоступа.НайтиПоЗначению(
			         ПользовательПустаяСсылка) <> Неопределено
			    
			   И ТипыЗначенияДоступа.НайтиПоЗначению(
			         ГруппаПользователейПустаяСсылка) <> Неопределено Тогда
				
				ТекущийТипЗначенияДоступа = ПользовательПустаяСсылка;
				Возврат Истина;
			КонецЕсли;
			
			Если ТипыЗначенияДоступа.НайтиПоЗначению(
			         ВнешнийПользовательПустаяСсылка) <> Неопределено
			     
			   И ТипыЗначенияДоступа.НайтиПоЗначению(
			         ГруппаВнешнихПользователейПустаяСсылка) <> Неопределено Тогда
				
				ТекущийТипЗначенияДоступа = ВнешнийПользовательПустаяСсылка;
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
		
		Элемент = ТипыЗначенияДоступа.ВыбратьЭлемент(
			НСтр("ru = 'Выбор типа данных'"), ТипыЗначенияДоступа[0]);
		
		Если Элемент <> Неопределено Тогда
			ТекущийТипЗначенияДоступа = Элемент.Значение;
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиенте
Функция ТекстВопросаОбновитьГруппыДоступаПрофиля()
	
	Возврат
		НСтр("ru = 'Обновить группы доступа, использующие этот профиль?
		           |
		           |Будут удалены лишние виды доступа с заданными для них
		           |значениями доступа и добавлены недостающие виды доступа.'");
		
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Для работы интерфейса ролей

&НаСервере
Процедура ОбработатьИнтерфейсРолей(Действие, ОсновнойПараметр = Неопределено)
	
	ПараметрыДействия = Новый Структура;
	ПараметрыДействия.Вставить("ОсновнойПараметр",       ОсновнойПараметр);
	ПараметрыДействия.Вставить("Форма",                  ЭтаФорма);
	ПараметрыДействия.Вставить("КоллекцияРолей",         КоллекцияРолей);
	
	ПараметрыДействия.Вставить("СкрытьРольПолныеПрава",
		Объект.Ссылка <> Справочники.ПрофилиГруппДоступа.Администратор);
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		ПараметрыДействия.Вставить("ТипПользователей",
			Перечисления.ТипыПользователей.ПользовательОбластиДанных);
	Иначе
		ПараметрыДействия.Вставить("ТипПользователей",
			Перечисления.ТипыПользователей.ПользовательЛокальногоРешения);
	КонецЕсли;
	
	ПользователиСлужебный.ОбработатьИнтерфейсРолей(Действие, ПараметрыДействия);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СформироватьДанныеВыбораПользователя(Знач Текст,
                                             Знач ВключаяГруппы = Истина,
                                             Знач ВключаяВнешнихПользователей = Неопределено,
                                             Знач БезПользователей = Ложь) Экспорт
	
	Возврат Пользователи.СформироватьДанныеВыбораПользователя(
		Текст,
		ВключаяГруппы,
		ВключаяВнешнихПользователей,
		БезПользователей);
	
КонецФункции

&НаСервереБезКонтекста
Функция СформироватьДанныеВыбораВидаДоступа(Знач Текст, Знач ПоказыватьНеиспользуемыеВидыДоступа)
	
	ТехнологическиеВидыДоступа = Новый СписокЗначений;
	НеиспользуемыеВидыДоступа  = Новый СписокЗначений;
	
	Для каждого СвойстваВидаДоступа Из УправлениеДоступомСлужебный.СвойстваВидаДоступа() Цикл
		
		Если СвойстваВидаДоступа.ВидДоступаИспользуетсяВсегда Тогда
			ТехнологическиеВидыДоступа.Добавить(СвойстваВидаДоступа.ВидДоступа);
			
		ИначеЕсли НЕ УправлениеДоступомСлужебный.ВидДоступаИспользуется(СвойстваВидаДоступа.ВидДоступа) Тогда
			НеиспользуемыеВидыДоступа.Добавить(СвойстваВидаДоступа.ВидДоступа);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Текст", Текст + "%");
	Запрос.УстановитьПараметр("ТехнологическиеВидыДоступа", ТехнологическиеВидыДоступа);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВидыДоступа.Ссылка КАК Ссылка,
	|	ВидыДоступа.Наименование КАК Наименование
	|ИЗ
	|	ПланВидовХарактеристик.ВидыДоступа КАК ВидыДоступа
	|ГДЕ
	|	ВидыДоступа.Наименование ПОДОБНО &Текст
	|	И ВидыДоступа.ПометкаУдаления = ЛОЖЬ
	|	И НЕ ВидыДоступа.Ссылка В (&ТехнологическиеВидыДоступа)
	|	И &НеиспользуемыеВидыДоступа";
	
	Если ПоказыватьНеиспользуемыеВидыДоступа Тогда
		ТекстУсловия = "ИСТИНА";
	Иначе
		Запрос.УстановитьПараметр("НеиспользуемыеВидыДоступа", НеиспользуемыеВидыДоступа);
		ТекстУсловия = "НЕ ВидыДоступа.Ссылка В (&НеиспользуемыеВидыДоступа)";
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&НеиспользуемыеВидыДоступа", ТекстУсловия);
	
	ДанныеВыбора = Новый СписокЗначений;

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ДанныеВыбора.Добавить(Выборка.Ссылка, Выборка.Наименование);
	КонецЦикла;
	
	Возврат ДанныеВыбора;
	
КонецФункции

&НаСервереБезКонтекста
Функция СформироватьДанныеВыбораЗначенияДоступа(Знач Текст, Знач ВидДоступа, ВключаяГруппы = Истина)
	
	Возврат УправлениеДоступомСлужебный.СформироватьДанныеВыбораЗначенияДоступа(
		Текст,
		ВидДоступа,
		ВключаяГруппы);
	
КонецФункции

&НаСервере
Процедура НачальноеЗаполнениеПрофиляГруппДоступа(Знач ОбновитьГруппыДоступа)
	
	Справочники.ПрофилиГруппДоступа.ЗаполнитьПоставляемыйПрофиль(
		Объект.Ссылка, ОбновитьГруппыДоступа);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОписаниеПоставляемогоПрофиляНаСервере(Знач Профиль)
	
	Возврат Справочники.ПрофилиГруппДоступа.ОписаниеПоставляемогоПрофиля(Профиль);
	
КонецФункции
