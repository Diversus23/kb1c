////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	Если Параметры.КлючНазначенияИспользования = "НаборыДополнительныхРеквизитов" Тогда
		КлючСохраненияПоложенияОкна = КлючНазначенияИспользования;
		Элементы.ЭтоНаборыДополнительныхСведений.Видимость = Ложь;
		
	ИначеЕсли Параметры.КлючНазначенияИспользования = "НаборыДополнительныхСведений" Тогда
		КлючСохраненияПоложенияОкна = КлючНазначенияИспользования;
		Элементы.ЭтоНаборыДополнительныхСведений.Видимость = Ложь;
		ЭтоНаборыДополнительныхСведений = Истина;
	КонецЕсли;
	
	ЦветФормы = Элементы.Свойства.ЦветФона;
	
	ОформитьНаборыИСвойства();
	
	НастроитьИспользованиеКоманд();
	
	НастроитьОтображениеНаборов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_ДополнительныеРеквизитыИСведения"
	 ИЛИ ИмяСобытия = "Запись_ЗначенияСвойствОбъектов"
	 ИЛИ ИмяСобытия = "Запись_ЗначенияСвойствОбъектовИерархия" Тогда
		
		// При записи свойства необходимо перенести свойство в соответствующую группу.
		// При записи значения необходимо обновить список первых 3-х значений.
		ПриИзмененииТекущегоНабораНаСервере();
		
	ИначеЕсли ИмяСобытия = "Переход_НаборыДополнительныхРеквизитовИСведений" Тогда
		// При открытии формы для редактирования состава свойств конкретного объекта метаданных
		// необходимо перейти к набору или группе наборов этого объекта метаданных.
		Если ТипЗнч(Параметр) = Тип("Структура") Тогда
			ВыбратьУказанныеСтроки(Параметр);
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "Запись_НаборКонстант" Тогда
		
		Если Источник = "ИспользоватьОбщиеДополнительныеЗначения"
		 ИЛИ Источник = "ИспользоватьОбщиеДополнительныеРеквизитыИСведения" Тогда
			НастроитьИспользованиеКоманд();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ЭтоНаборыДополнительныхСведенийПриИзменении(Элемент)
	
	НастроитьОтображениеНаборов();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ НаборыСвойств

&НаКлиенте
Процедура НаборыСвойствПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ПриИзмененииТекущегоНабора", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура НаборыСвойствПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ Свойства

&НаКлиенте
Процедура СвойстваПриАктивизацииСтроки(Элемент)
	
	СвойстваУстановитьДоступностьКоманд(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СвойстваПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Копирование Тогда
		Скопировать();
	Иначе
		Создать();
	КонецЕсли;
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СвойстваПередНачаломИзменения(Элемент, Отказ)
	
	Изменить();
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СвойстваПередУдалением(Элемент, Отказ)
	
	ИзменитьПометкуУдаления();
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СвойстваОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		Если ВыбранноеЗначение.Свойство("ВладелецДополнительныхЗначений") Тогда
			
			ПараметрыФормы = Новый Структура;
			ПараметрыФормы.Вставить("ЭтоДополнительноеСведение",      ЭтоНаборыДополнительныхСведений);
			ПараметрыФормы.Вставить("ТекущийНаборСвойств",            ТекущийНабор);
			ПараметрыФормы.Вставить("ВладелецДополнительныхЗначений", ВыбранноеЗначение.ВладелецДополнительныхЗначений);
			
			ОткрытьФорму("ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ФормаОбъекта",
				ПараметрыФормы, Элементы.Свойства);
			
		ИначеЕсли ВыбранноеЗначение.Свойство("ОбщееСвойство") Тогда
			
			ВыполнитьКомандуНаСервере("ДобавитьОбщееСвойство", ВыбранноеЗначение.ОбщееСвойство);
			
			Оповестить("Запись_НаборыДополнительныхРеквизитовИСведений",
				Новый Структура("Ссылка", ТекущийНабор), ТекущийНабор);
		Иначе
			ВыбратьУказанныеСтроки(ВыбранноеЗначение);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура Создать(Команда = Неопределено)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("НаборСвойств", ТекущийНабор);
	ПараметрыФормы.Вставить("ЭтоДополнительноеСведение", ЭтоНаборыДополнительныхСведений);
	ПараметрыФормы.Вставить("ТекущийНаборСвойств", ТекущийНабор);
	
	ОткрытьФорму("ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ФормаОбъекта",
		ПараметрыФормы, Элементы.Свойства);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПоОбразцу(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("ЭтоДополнительноеСведение", ЭтоНаборыДополнительныхСведений);
	ПараметрыФормы.Вставить("ВыборВладельцаДополнительныхЗначений", Истина);
	ПараметрыФормы.Вставить("ТекущийНаборСвойств", ТекущийНабор);
	
	ОткрытьФорму("ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ФормаВыбора",
		ПараметрыФормы, Элементы.Свойства);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьОбщее(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("ЭтоДополнительноеСведение", ЭтоНаборыДополнительныхСведений);
	ПараметрыФормы.Вставить("ВыборОбщегоСвойства", Истина);
	ПараметрыФормы.Вставить("ТекущийНаборСвойств", ТекущийНабор);
	
	ОткрытьФорму("ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ФормаВыбора",
		ПараметрыФормы, Элементы.Свойства);
	
КонецПроцедуры


&НаКлиенте
Процедура Изменить(Команда = Неопределено)
	
	Если Элементы.Свойства.ТекущиеДанные <> Неопределено Тогда
		// Открытие формы свойства.
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Ключ", Элементы.Свойства.ТекущиеДанные.Свойство);
		ПараметрыФормы.Вставить("ТекущийНаборСвойств", ТекущийНабор);
		
		ОткрытьФорму("ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ФормаОбъекта",
			ПараметрыФормы, Элементы.Свойства);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Скопировать(Команда = Неопределено)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТекущийНаборСвойств", ТекущийНабор);
	ПараметрыФормы.Вставить("ЗначениеКопирования", Элементы.Свойства.ТекущиеДанные.Свойство);
	
	ОткрытьФорму("ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения.ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПометитьНаУдаление(Команда)
	
	ИзменитьПометкуУдаления();
	
КонецПроцедуры


&НаКлиенте
Процедура ПереместитьВверх(Команда)
	
	ВыполнитьКомандуНаСервере("ПереместитьВверх");
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВниз(Команда)
	
	ВыполнитьКомандуНаСервере("ПереместитьВниз");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура ОформитьНаборыИСвойства()
	
	// Оформление корня списка наборов.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Text");
	ЭлементЦветаОформления.Значение = НСтр("ru = 'Наборы'");
	ЭлементЦветаОформления.Использование = Истина;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("НаборыСвойств.Ссылка");
	ЭлементОтбораДанных.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	ЭлементОтбораДанных.Использование  = Истина;
	
	ЭлементОформляемогоПоля = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ЭлементОформляемогоПоля.Поле = Новый ПолеКомпоновкиДанных("Представление");
	ЭлементОформляемогоПоля.Использование = Истина;
	
	// Оформление недоступных групп наборов, которые безусловно отображаются платформой, как часть дерева групп.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("TextColor");
	ЭлементЦветаОформления.Значение = Метаданные.ЭлементыСтиля.НедоступныеДанныеЦвет.Значение;
	ЭлементЦветаОформления.Использование = Истина;
	
	ГруппаЭлементовОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаЭлементовОтбораДанных.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	ГруппаЭлементовОтбораДанных.Использование = Истина;
	
	ЭлементОтбораДанных = ГруппаЭлементовОтбораДанных.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("НаборыСвойств.Ссылка");
	ЭлементОтбораДанных.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеВСписке;
	ЭлементОтбораДанных.ПравоеЗначение = ДоступныеНаборыСписок;
	ЭлементОтбораДанных.Использование  = Истина;
	
	ЭлементОтбораДанных = ГруппаЭлементовОтбораДанных.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("НаборыСвойств.Родитель");
	ЭлементОтбораДанных.ВидСравнения   = ВидСравненияКомпоновкиДанных.НеВСписке;
	ЭлементОтбораДанных.ПравоеЗначение = ДоступныеНаборыСписок;
	ЭлементОтбораДанных.Использование  = Истина;
	
	ЭлементОтбораДанных = ГруппаЭлементовОтбораДанных.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("НаборыСвойств.Ссылка");
	ЭлементОтбораДанных.ВидСравнения   = ВидСравненияКомпоновкиДанных.Заполнено;
	ЭлементОтбораДанных.Использование  = Истина;
	
	ЭлементОформляемогоПоля = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ЭлементОформляемогоПоля.Поле = Новый ПолеКомпоновкиДанных("Представление");
	ЭлементОформляемогоПоля.Использование = Истина;
	
	// Оформление свойств, обязательных для заполнения.
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	
	ЭлементЦветаОформления = ЭлементУсловногоОформления.Оформление.Элементы.Найти("Font");
	ЭлементЦветаОформления.Значение = Новый Шрифт(, , Истина);
	ЭлементЦветаОформления.Использование = Истина;
	
	ЭлементОтбораДанных = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбораДанных.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Свойства.ЗаполнятьОбязательно");
	ЭлементОтбораДанных.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбораДанных.ПравоеЗначение = Истина;
	ЭлементОтбораДанных.Использование  = Истина;
	
	ЭлементОформляемогоПоля = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ЭлементОформляемогоПоля.Поле = Новый ПолеКомпоновкиДанных("СвойстваЗаголовок");
	ЭлементОформляемогоПоля.Использование = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьУказанныеСтроки(Описание)
	
	Если Описание.Свойство("Набор") Тогда
		
		Если ТипЗнч(Описание.Набор) = Тип("Строка") Тогда
			ПреобразоватьСтрокиВСсылки(Описание);
		КонецЕсли;
		
		Если Описание.ЭтоДополнительноеСведение <> ЭтоНаборыДополнительныхСведений Тогда
			ЭтоНаборыДополнительныхСведений = Описание.ЭтоДополнительноеСведение;
			НастроитьОтображениеНаборов();
		КонецЕсли;
		
		Элементы.НаборыСвойств.ТекущаяСтрока = Описание.Набор;
		ТекущийНабор = Неопределено;
		ПриИзмененииТекущегоНабора();
		НайденныеСтроки = Свойства.НайтиСтроки(Новый Структура("Свойство", Описание.Свойство));
		Если НайденныеСтроки.Количество() > 0 Тогда
			Элементы.Свойства.ТекущаяСтрока = НайденныеСтроки[0].ПолучитьИдентификатор();
		Иначе
			Элементы.Свойства.ТекущаяСтрока = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПреобразоватьСтрокиВСсылки(Описание)
	
	Описание.Вставить("Набор", Справочники.НаборыДополнительныхРеквизитовИСведений.ПолучитьСсылку(
		Новый УникальныйИдентификатор(Описание.Набор)));
	
	Описание.Вставить("Свойство", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.ПолучитьСсылку(
		Новый УникальныйИдентификатор(Описание.Свойство)));
	
КонецПроцедуры

&НаСервере
Процедура НастроитьИспользованиеКоманд()
	
	Если ПолучитьФункциональнуюОпцию("ИспользоватьОбщиеДополнительныеЗначения")
	 ИЛИ ПолучитьФункциональнуюОпцию("ИспользоватьОбщиеДополнительныеРеквизитыИСведения") Тогда
		
		Элементы.СвойстваТолькоСоздать.Видимость = Ложь;
		Элементы.СвойстваПодменюДобавить.Видимость = Истина;
		
		Элементы.СвойстваКонтекстноеМенюТолькоСоздать.Видимость = Ложь;
		Элементы.СвойстваКонтекстноеМенюПодменюДобавить.Видимость = Истина
	Иначе
		Элементы.СвойстваТолькоСоздать.Видимость = Истина;
		Элементы.СвойстваПодменюДобавить.Видимость = Ложь;
		
		Элементы.СвойстваКонтекстноеМенюТолькоСоздать.Видимость = Истина;
		Элементы.СвойстваКонтекстноеМенюПодменюДобавить.Видимость = Ложь
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьОтображениеНаборов()
	
	КомандаСоздать                      = Команды.Найти("Создать");
	КомандаСоздатьПоОбразцу             = Команды.Найти("СоздатьПоОбразцу");
	КомандаСоздатьОбщее                 = Команды.Найти("СоздатьОбщее");
	КомандаСкопировать                  = Команды.Найти("Скопировать");
	КомандаИзменить                     = Команды.Найти("Изменить");
	КомандаПометитьНаУдаление           = Команды.Найти("ПометитьНаУдаление");
	КомандаПереместитьВверх             = Команды.Найти("ПереместитьВверх");
	КомандаПереместитьВниз              = Команды.Найти("ПереместитьВниз");
	
	Если ЭтоНаборыДополнительныхСведений Тогда
		Заголовок = НСтр("ru = 'Дополнительные сведения'");
		
		КомандаСоздать.Подсказка          = НСтр("ru = 'Создать уникальное сведение'");
		КомандаСоздать.Заголовок          = НСтр("ru = 'Новое'");
		КомандаСоздать.Подсказка          = НСтр("ru = 'Создать уникальное сведение'");
		КомандаСоздатьПоОбразцу.Заголовок = НСтр("ru = 'По образцу...'");
		КомандаСоздатьПоОбразцу.Подсказка = НСтр("ru = 'Создать сведение по образцу (общий список значений)'");
		КомандаСоздатьОбщее.Заголовок     = НСтр("ru = 'Общее...'");
		КомандаСоздатьОбщее.Подсказка     = НСтр("ru = 'Выбрать общее сведение из существующих'");
		
		КомандаСкопировать.Подсказка        = НСтр("ru = 'Создать новое сведение копированием текущего'");
		КомандаИзменить.Подсказка           = НСтр("ru = 'Изменить (или открыть) текущее сведение'");
		КомандаПометитьНаУдаление.Подсказка = НСтр("ru = 'Пометить текущее сведение на удаление (Del)'");
		КомандаПереместитьВверх.Подсказка   = НСтр("ru = 'Переместить текущее сведение вверх'");
		КомандаПереместитьВниз.Подсказка    = НСтр("ru = 'Переместить текущее сведение вниз'");
		
		МетаданныеТабличнаяЧасть =
			Метаданные.Справочники.НаборыДополнительныхРеквизитовИСведений.ТабличныеЧасти.ДополнительныеСведения;
		
		Элементы.СвойстваЗаголовок.Заголовок = МетаданныеТабличнаяЧасть.Реквизиты.Свойство.Синоним;
		Элементы.СвойстваЗаголовок.Подсказка = МетаданныеТабличнаяЧасть.Реквизиты.Свойство.Подсказка;
		
		Элементы.СвойстваЗаполнятьОбязательно.Видимость = Ложь;
		
		Элементы.СвойстваТипЗначения.Подсказка =
			НСтр("ru = 'Типы значения, которое можно ввести при заполнении сведения.'");
		
		Элементы.СвойстваОбщиеЗначения.Подсказка =
			НСтр("ru = 'Сведение использует список значений сведения-образца.'");
		
		Элементы.СвойстваОбщее.Заголовок = НСтр("ru = 'Общее'");
		Элементы.СвойстваОбщее.Подсказка = НСтр("ru = 'Общее дополнительное сведение, которое используется в
		                                              |нескольких наборах дополнительных сведений.'");
	Иначе
		Заголовок = НСтр("ru = 'Дополнительные реквизиты'");
		КомандаСоздать.Заголовок          = НСтр("ru = 'Новый'");
		КомандаСоздать.Подсказка          = НСтр("ru = 'Создать уникальный реквизит'");
		КомандаСоздатьПоОбразцу.Заголовок = НСтр("ru = 'По образцу...'");
		КомандаСоздатьПоОбразцу.Подсказка = НСтр("ru = 'Создать реквизит по образцу (общий список значений)'");
		КомандаСоздатьОбщее.Заголовок     = НСтр("ru = 'Общий...'");
		КомандаСоздатьОбщее.Подсказка     = НСтр("ru = 'Выбрать общий реквизит из существующих'");
		
		КомандаСкопировать.Подсказка        = НСтр("ru = 'Создать новый реквизит копированием текущего'");
		КомандаИзменить.Подсказка           = НСтр("ru = 'Изменить (или открыть) текущий реквизит'");
		КомандаПометитьНаУдаление.Подсказка = НСтр("ru = 'Пометить текущий реквизит на удаление (Del)'");
		КомандаПереместитьВверх.Подсказка   = НСтр("ru = 'Переместить текущий реквизит вверх'");
		КомандаПереместитьВниз.Подсказка    = НСтр("ru = 'Переместить текущий реквизит вниз'");
		
		МетаданныеТабличнаяЧасть =
			Метаданные.Справочники.НаборыДополнительныхРеквизитовИСведений.ТабличныеЧасти.ДополнительныеРеквизиты;
		
		Элементы.СвойстваЗаголовок.Заголовок = МетаданныеТабличнаяЧасть.Реквизиты.Свойство.Синоним;
		Элементы.СвойстваЗаголовок.Подсказка = МетаданныеТабличнаяЧасть.Реквизиты.Свойство.Подсказка;
		
		Элементы.СвойстваЗаполнятьОбязательно.Видимость = Истина;
		Элементы.СвойстваЗаполнятьОбязательно.Подсказка =
			Метаданные.ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.Реквизиты.ЗаполнятьОбязательно.Подсказка;
		
		Элементы.СвойстваТипЗначения.Подсказка =
			НСтр("ru = 'Типы значения, которое можно ввести при заполнении реквизита.'");
		
		Элементы.СвойстваОбщиеЗначения.Подсказка =
			НСтр("ru = 'Реквизит использует список значений реквизита-образца.'");
		
		Элементы.СвойстваОбщее.Заголовок = НСтр("ru = 'Общий'");
		Элементы.СвойстваОбщее.Подсказка = НСтр("ru = 'Общий дополнительный реквизит, который используется в
		                                              |нескольких наборах дополнительных реквизитов.'");
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Наборы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.НаборыДополнительныхРеквизитовИСведений КАК Наборы
	|ГДЕ
	|	Наборы.Родитель = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.ПустаяСсылка)";
	
	Наборы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	ДоступныеНаборы = Новый Массив;
	ДоступныеНаборыСписок.Очистить();
	
	Для каждого Ссылка Из Наборы Цикл
		ВидыСвойствНабора = УправлениеСвойствамиСлужебный.ВидыСвойствНабора(Ссылка, Ложь);
		
		Если ЭтоНаборыДополнительныхСведений
		   И ВидыСвойствНабора.ДополнительныеСведения
		 ИЛИ НЕ ЭтоНаборыДополнительныхСведений
		   И ВидыСвойствНабора.ДополнительныеРеквизиты Тогда
			
			ДоступныеНаборы.Добавить(Ссылка);
			ДоступныеНаборыСписок.Добавить(Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		НаборыСвойств, "ЭтоНаборыДополнительныхСведений", ЭтоНаборыДополнительныхСведений, Истина);
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(
		НаборыСвойств, "Наборы", ДоступныеНаборы, Истина);
		
	Если НЕ Элементы.ЭтоНаборыДополнительныхСведений.Видимость Тогда
		// Скрытие помеченных на удаление.
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
			НаборыСвойств, "ПометкаУдаления", Ложь, , , Истина,
			РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ);
	КонецЕсли;
	
	ПриИзмененииТекущегоНабораНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииТекущегоНабора()
	
	Если Элементы.НаборыСвойств.ТекущиеДанные = Неопределено Тогда
		Если ЗначениеЗаполнено(ТекущийНабор) Тогда
			ТекущийНабор = Неопределено;
			ПриИзмененииТекущегоНабораНаСервере();
		КонецЕсли;
		
	ИначеЕсли Элементы.НаборыСвойств.ТекущиеДанные.Ссылка <> ТекущийНабор Тогда
		ТекущийНабор          = Элементы.НаборыСвойств.ТекущиеДанные.Ссылка;
		ТекущийНаборЭтоГруппа = Элементы.НаборыСвойств.ТекущиеДанные.ЭтоГруппа;
		ПриИзмененииТекущегоНабораНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПометкуУдаления()
	
	Если Элементы.Свойства.ТекущиеДанные <> Неопределено Тогда
		
		Если ЭтоНаборыДополнительныхСведений Тогда
			Если Элементы.Свойства.ТекущиеДанные.Общее Тогда
				ТекстВопроса = НСтр("ru ='Исключить текущее общее сведения из набора?'");
				
			ИначеЕсли Элементы.Свойства.ТекущиеДанные.ПометкаУдаления Тогда
				ТекстВопроса = НСтр("ru ='Снять с текущего сведения пометку на удаление?'");
			Иначе
				ТекстВопроса = НСтр("ru ='Пометить текущее сведение на удаление?'");
			КонецЕсли;
		Иначе
			Если Элементы.Свойства.ТекущиеДанные.Общее Тогда
				ТекстВопроса = НСтр("ru ='Исключить текущий общий реквизит из набора?'");
				
			ИначеЕсли Элементы.Свойства.ТекущиеДанные.ПометкаУдаления Тогда
				ТекстВопроса = НСтр("ru ='Снять с текущего реквизита пометку на удаление?'");
			Иначе
				ТекстВопроса = НСтр("ru ='Пометить текущий реквизит на удаление?'");
			КонецЕсли;
		КонецЕсли;
		
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		
		ВыполнитьКомандуНаСервере("ИзменитьПометкуУдаления");
		
		Оповестить("Запись_НаборыДополнительныхРеквизитовИСведений",
			Новый Структура("Ссылка", ТекущийНабор), ТекущийНабор);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииТекущегоНабораНаСервере()
	
	Если ЗначениеЗаполнено(ТекущийНабор)
	   И НЕ ТекущийНаборЭтоГруппа Тогда
		
		ТекущаяДоступность = Истина;
		Если Элементы.Свойства.ЦветФона <> Элементы.НаборыСвойств.ЦветФона Тогда
			Элементы.Свойства.ЦветФона = Элементы.НаборыСвойств.ЦветФона;
		КонецЕсли;
		ОбновитьСписокСвойствТекущегоНабора(ТекущаяДоступность);
	Иначе
		ТекущаяДоступность = Ложь;
		Если Элементы.Свойства.ЦветФона <> ЦветФормы Тогда
			Элементы.Свойства.ЦветФона = ЦветФормы;
		КонецЕсли;
		Свойства.Очистить();
	КонецЕсли;
	
	Если Элементы.Свойства.ТолькоПросмотр = ТекущаяДоступность Тогда
		Элементы.Свойства.ТолькоПросмотр = НЕ ТекущаяДоступность;
	КонецЕсли;
	
	СвойстваУстановитьДоступностьКоманд(ЭтаФорма);
	
	Элементы.НаборыСвойств.Обновить();
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура СвойстваУстановитьДоступностьКоманд(Контекст)
	
	Элементы = Контекст.Элементы;
	
	ОбщаяДоступность = НЕ Элементы.Свойства.ТолькоПросмотр;
	
	ДоступностьДляСтроки = ОбщаяДоступность
		И Контекст.Элементы.Свойства.ТекущаяСтрока <> Неопределено;
	
	// Настройка команд командной панели.
	Элементы.СвойстваСоздать.Доступность            = ОбщаяДоступность;
	Элементы.СвойстваТолькоСоздать.Доступность      = ОбщаяДоступность;
	Элементы.СвойстваСоздатьПоОбразцу.Доступность   = ОбщаяДоступность;
	Элементы.СвойстваСоздатьОбщее.Доступность       = ОбщаяДоступность;
	
	Элементы.СвойстваСкопировать.Доступность        = ДоступностьДляСтроки;
	Элементы.СвойстваИзменить.Доступность           = ДоступностьДляСтроки;
	Элементы.СвойстваПометитьНаУдаление.Доступность = ДоступностьДляСтроки;
	
	Элементы.СвойстваПереместитьВверх.Доступность   = ДоступностьДляСтроки;
	Элементы.СвойстваПереместитьВниз.Доступность    = ДоступностьДляСтроки;
	
	// Настройка команд контекстного меню.
	Элементы.СвойстваКонтекстноеМенюСоздать.Доступность            = ОбщаяДоступность;
	Элементы.СвойстваКонтекстноеМенюТолькоСоздать.Доступность      = ОбщаяДоступность;
	Элементы.СвойстваКонтекстноеМенюСоздатьПоОбразцу.Доступность   = ОбщаяДоступность;
	Элементы.СвойстваКонтекстноеМенюСоздатьОбщее.Доступность       = ОбщаяДоступность;
	
	Элементы.СвойстваКонтекстноеМенюСкопировать.Доступность        = ДоступностьДляСтроки;
	Элементы.СвойстваКонтекстноеМенюИзменить.Доступность           = ДоступностьДляСтроки;
	Элементы.СвойстваКонтекстноеМенюПометитьНаУдаление.Доступность = ДоступностьДляСтроки;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокСвойствТекущегоНабора(ТекущаяДоступность)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Набор", ТекущийНабор);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СвойстваНаборов.НомерСтроки,
	|	СвойстваНаборов.Свойство,
	|	СвойстваНаборов.ПометкаУдаления,
	|	ЕСТЬNULL(Свойства.Заголовок, ПРЕДСТАВЛЕНИЕ(СвойстваНаборов.Свойство)) КАК Заголовок,
	|	Свойства.ВладелецДополнительныхЗначений,
	|	Свойства.ЗаполнятьОбязательно,
	|	Свойства.ТипЗначения КАК ТипЗначения,
	|	ВЫБОР
	|		КОГДА Свойства.Ссылка ЕСТЬ NULL 
	|			ТОГДА ИСТИНА
	|		КОГДА Свойства.НаборСвойств = ЗНАЧЕНИЕ(Справочник.НаборыДополнительныхРеквизитовИСведений.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Общее,
	|	ВЫБОР
	|		КОГДА СвойстваНаборов.ПометкаУдаления = ИСТИНА
	|			ТОГДА 4
	|		ИНАЧЕ 3
	|	КОНЕЦ КАК НомерКартинки
	|ИЗ
	|	Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты КАК СвойстваНаборов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК Свойства
	|		ПО СвойстваНаборов.Свойство = Свойства.Ссылка
	|ГДЕ
	|	СвойстваНаборов.Ссылка = &Набор
	|
	|УПОРЯДОЧИТЬ ПО
	|	СвойстваНаборов.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Наборы.ВерсияДанных КАК ВерсияДанных
	|ИЗ
	|	Справочник.НаборыДополнительныхРеквизитовИСведений КАК Наборы
	|ГДЕ
	|	Наборы.Ссылка = &Набор";
	
	Если ЭтоНаборыДополнительныхСведений Тогда
		Запрос.Текст = СтрЗаменить(
			Запрос.Текст,
			"Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеРеквизиты",
			"Справочник.НаборыДополнительныхРеквизитовИСведений.ДополнительныеСведения");
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		РезультатыЗапроса = Запрос.ВыполнитьПакет();
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Если Элементы.Свойства.ТекущаяСтрока = Неопределено Тогда
		Строка = Неопределено;
	Иначе
		Строка = Свойства.НайтиПоИдентификатору(Элементы.Свойства.ТекущаяСтрока);
	КонецЕсли;
	ТекущееСвойство = ?(Строка = Неопределено, Неопределено, Строка.Свойство);
	
	Свойства.Очистить();
	
	Если РезультатыЗапроса[1].Пустой() Тогда
		ТекущаяДоступность = Ложь;
		Возврат;
	КонецЕсли;
	
	ТекущийНаборВерсияДанных = РезультатыЗапроса[1].Выгрузить()[0].ВерсияДанных;
	
	Выборка = РезультатыЗапроса[0].Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = Свойства.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		НоваяСтрока.ОбщиеЗначения = ЗначениеЗаполнено(Выборка.ВладелецДополнительныхЗначений);
		
		Если Выборка.ТипЗначения <> NULL
		   И УправлениеСвойствамиСлужебный.ТипЗначенияСодержитЗначенияСвойств(Выборка.ТипЗначения) Тогда
			
			НоваяСтрока.ТипЗначения = Строка(Новый ОписаниеТипов(
				Выборка.ТипЗначения,
				,
				"СправочникСсылка.ЗначенияСвойствОбъектовИерархия,
				|СправочникСсылка.ЗначенияСвойствОбъектов"));
			
			Запрос = Новый Запрос;
			Если ЗначениеЗаполнено(Выборка.ВладелецДополнительныхЗначений) Тогда
				Запрос.УстановитьПараметр("Владелец", Выборка.ВладелецДополнительныхЗначений);
			Иначе
				Запрос.УстановитьПараметр("Владелец", Выборка.Свойство);
			КонецЕсли;
			Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 4
			|	ЗначенияСвойствОбъектов.Наименование КАК Наименование
			|ИЗ
			|	Справочник.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
			|ГДЕ
			|	ЗначенияСвойствОбъектов.Владелец = &Владелец
			|	И НЕ ЗначенияСвойствОбъектов.ЭтоГруппа
			|	И НЕ ЗначенияСвойствОбъектов.ПометкаУдаления
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ ПЕРВЫЕ 4
			|	ЗначенияСвойствОбъектовИерархия.Наименование
			|ИЗ
			|	Справочник.ЗначенияСвойствОбъектовИерархия КАК ЗначенияСвойствОбъектовИерархия
			|ГДЕ
			|	ЗначенияСвойствОбъектовИерархия.Владелец = &Владелец
			|	И НЕ ЗначенияСвойствОбъектовИерархия.ПометкаУдаления
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	ИСТИНА КАК ЗначениеИстина
			|ИЗ
			|	Справочник.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
			|ГДЕ
			|	ЗначенияСвойствОбъектов.Владелец = &Владелец
			|	И НЕ ЗначенияСвойствОбъектов.ЭтоГруппа
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|	ИСТИНА
			|ИЗ
			|	Справочник.ЗначенияСвойствОбъектовИерархия КАК ЗначенияСвойствОбъектовИерархия
			|ГДЕ
			|	ЗначенияСвойствОбъектовИерархия.Владелец = &Владелец";
			РезультатыЗапроса = Запрос.ВыполнитьПакет();
			
			ПервыеЗначения = РезультатыЗапроса[0].Выгрузить().ВыгрузитьКолонку("Наименование");
			
			Если ПервыеЗначения.Количество() = 0 Тогда
				Если РезультатыЗапроса[1].Пустой() Тогда
					ПредставлениеЗначений = НСтр("ru = 'Значения еще не введены'");
				Иначе
					ПредставлениеЗначений = НСтр("ru = 'Значения помечены на удаление'");
				КонецЕсли;
			Иначе
				ПредставлениеЗначений = "";
				Номер = 0;
				Для каждого Значение Из ПервыеЗначения Цикл
					Номер = Номер + 1;
					Если Номер = 4 Тогда
						ПредставлениеЗначений = ПредставлениеЗначений + ",...";
						Прервать;
					КонецЕсли;
					ПредставлениеЗначений = ПредставлениеЗначений + ?(Номер > 1, ", ", "") + Значение;
				КонецЦикла;
			КонецЕсли;
			ПредставлениеЗначений = "<" + ПредставлениеЗначений + ">";
			Если ЗначениеЗаполнено(НоваяСтрока.ТипЗначения) Тогда
				ПредставлениеЗначений = ПредставлениеЗначений + ", ";
			КонецЕсли;
			НоваяСтрока.ТипЗначения = ПредставлениеЗначений + НоваяСтрока.ТипЗначения;
		КонецЕсли;
		
		Если Выборка.Свойство = ТекущееСвойство Тогда
			Элементы.Свойства.ТекущаяСтрока =
				Свойства[Свойства.Количество()-1].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(Команда, Параметр = Неопределено)
	
	Блокировка = Новый БлокировкаДанных;
	
	Если Команда = "ИзменитьПометкуУдаления" Тогда
		ЭлементБлокировки = Блокировка.Добавить("Справочник.НаборыДополнительныхРеквизитовИСведений");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		ЭлементБлокировки = Блокировка.Добавить("ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		ЭлементБлокировки = Блокировка.Добавить("Справочник.ЗначенияСвойствОбъектов");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		
		ЭлементБлокировки = Блокировка.Добавить("Справочник.ЗначенияСвойствОбъектовИерархия");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	Иначе
		ЭлементБлокировки = Блокировка.Добавить("Справочник.НаборыДополнительныхРеквизитовИСведений");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Ссылка", ТекущийНабор);
	КонецЕсли;
	
	Попытка
		ЗаблокироватьДанныеДляРедактирования(ТекущийНабор);
		НачатьТранзакцию();
		Попытка
			Блокировка.Заблокировать();
			ЗаблокироватьДанныеДляРедактирования(ТекущийНабор);
			
			ТекущийНаборОбъект = ТекущийНабор.ПолучитьОбъект();
			Если ТекущийНаборОбъект.ВерсияДанных <> ТекущийНаборВерсияДанных Тогда
				ПриИзмененииТекущегоНабораНаСервере();
				Если ЭтоНаборыДополнительныхСведений Тогда
					ВызватьИсключение
						НСтр("ru = 'Действие не выполнено, так как состав дополнительных сведений
						           |был изменен другим пользователем.
						           |Новый состав дополнительных сведений прочитан.
						           |
						           |Повторите действие, если требуется.'");
				Иначе
					ВызватьИсключение
						НСтр("ru = 'Действие не выполнено, так как состав дополнительных реквизитов
						           |был изменен другим пользователем.
						           |Новый состав дополнительных реквизитов прочитан.
						           |
						           |Повторите действие, если требуется.'");
				КонецЕсли;
			КонецЕсли;
			
			ТабличнаяЧасть = ТекущийНаборОбъект[?(ЭтоНаборыДополнительныхСведений,
				"ДополнительныеСведения", "ДополнительныеРеквизиты")];
			
			Если Команда = "ДобавитьОбщееСвойство" Тогда
				НайденнаяСтрока = ТабличнаяЧасть.Найти(Параметр, "Свойство");
				
				Если НайденнаяСтрока = Неопределено Тогда
					НоваяСтрока = ТабличнаяЧасть.Добавить();
					НоваяСтрока.Свойство = Параметр;
					ТекущийНаборОбъект.Записать();
					
				ИначеЕсли НайденнаяСтрока.ПометкаУдаления Тогда
					НайденнаяСтрока.ПометкаУдаления = Ложь;
					ТекущийНаборОбъект.Записать();
				КонецЕсли;
			Иначе
				Строка = Свойства.НайтиПоИдентификатору(Элементы.Свойства.ТекущаяСтрока);
				
				Если Строка <> Неопределено Тогда
					Индекс = Строка.НомерСтроки-1;
					
					Если Команда = "ПереместитьВверх" Тогда
						ИндексВерхнейСтроки = Свойства.Индекс(Строка)-1;
						Если ИндексВерхнейСтроки >= 0 Тогда
							Сдвиг = Свойства[ИндексВерхнейСтроки].НомерСтроки - Строка.НомерСтроки;
							ТабличнаяЧасть.Сдвинуть(Индекс, Сдвиг);
						КонецЕсли;
						ТекущийНаборОбъект.Записать();
						
					ИначеЕсли Команда = "ПереместитьВниз" Тогда
						ИндексНижнейСтроки = Свойства.Индекс(Строка)+1;
						Если ИндексНижнейСтроки < Свойства.Количество() Тогда
							Сдвиг = Свойства[ИндексНижнейСтроки].НомерСтроки - Строка.НомерСтроки;
							ТабличнаяЧасть.Сдвинуть(Индекс, Сдвиг);
						КонецЕсли;
						ТекущийНаборОбъект.Записать();
						
					ИначеЕсли Команда = "ИзменитьПометкуУдаления" Тогда
						Строка = Свойства.НайтиПоИдентификатору(Элементы.Свойства.ТекущаяСтрока);
						
						Если Строка.Общее Тогда
							ТабличнаяЧасть.Удалить(Индекс);
							ТекущийНаборОбъект.Записать();
							Свойства.Удалить(Строка);
							Если ТабличнаяЧасть.Количество() > Индекс Тогда
								Элементы.Свойства.ТекущаяСтрока = Свойства[Индекс].ПолучитьИдентификатор();
							ИначеЕсли ТабличнаяЧасть.Количество() > 0 Тогда
								Элементы.Свойства.ТекущаяСтрока = Свойства[Свойства.Количество()-1].ПолучитьИдентификатор();
							КонецЕсли;
						Иначе
							ТабличнаяЧасть[Индекс].ПометкаУдаления = НЕ ТабличнаяЧасть[Индекс].ПометкаУдаления;
							ТекущийНаборОбъект.Записать();
							
							ИзменитьПометкуУдаленияИВладельцаЗначений(
								ТекущийНаборОбъект.Ссылка,
								ТабличнаяЧасть[Индекс].Свойство,
								ТабличнаяЧасть[Индекс].ПометкаУдаления);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;
	Исключение
		РазблокироватьДанныеДляРедактирования(ТекущийНабор);
		ВызватьИсключение;
	КонецПопытки;
	
	ПриИзмененииТекущегоНабораНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьПометкуУдаленияИВладельцаЗначений(ТекущийНабор, ТекущееСвойство, ПометкаУдаленияСвойства)
	
	СтарыйВладелецЗначений = ТекущееСвойство;
	
	НоваяПометкаЗначений   = Неопределено;
	НовыйВладелецЗначений  = Неопределено;
	
	СвойствоОбъект = ТекущееСвойство.ПолучитьОбъект();
	
	Если ЗначениеЗаполнено(СвойствоОбъект.НаборСвойств) Тогда
		
		Если ПометкаУдаленияСвойства Тогда
			// При пометке уникального свойства:
			// - пометить свойство,
			// - если есть созданные по образцу не помеченные на удаление
			//   тогда установить нового владельца значений,
			//   и всем свойствам указать новый образец,
			//   иначе пометить на удаление все значения.
			СвойствоОбъект.ПометкаУдаления = Истина;
			
			Если НЕ ЗначениеЗаполнено(СвойствоОбъект.ВладелецДополнительныхЗначений) Тогда
				Запрос = Новый Запрос;
				Запрос.УстановитьПараметр("Свойство", СвойствоОбъект.Ссылка);
				Запрос.Текст =
				"ВЫБРАТЬ
				|	Свойства.Ссылка,
				|	Свойства.ПометкаУдаления
				|ИЗ
				|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК Свойства
				|ГДЕ
				|	Свойства.ВладелецДополнительныхЗначений = &Свойство";
				Выгрузка = Запрос.Выполнить().Выгрузить();
				НайденнаяСтрока = Выгрузка.Найти(Ложь, "ПометкаУдаления");
				Если НайденнаяСтрока <> Неопределено Тогда
					НовыйВладелецЗначений  = НайденнаяСтрока.Ссылка;
					СвойствоОбъект.ВладелецДополнительныхЗначений = НовыйВладелецЗначений;
					Для каждого Строка Из Выгрузка Цикл
						ТекущийОбъект = Строка.Ссылка.ПолучитьОбъект();
						Если ТекущийОбъект.Ссылка = НовыйВладелецЗначений Тогда
							ТекущийОбъект.ВладелецДополнительныхЗначений = Неопределено;
						Иначе
							ТекущийОбъект.ВладелецДополнительныхЗначений = НовыйВладелецЗначений;
						КонецЕсли;
						ТекущийОбъект.Записать();
					КонецЦикла;
				Иначе
					НоваяПометкаЗначений = Истина;
				КонецЕсли;
			КонецЕсли;
			СвойствоОбъект.Записать();
		Иначе
			Если СвойствоОбъект.ПометкаУдаления Тогда
				СвойствоОбъект.ПометкаУдаления = Ложь;
				СвойствоОбъект.Записать();
			КонецЕсли;
			// При снятии пометки с уникального свойства:
			// - снять пометку со свойства,
			// - если свойство создано по образцу
			//   тогда если образец помечен на удаление
			//     тогда установить нового владельца значений (текущего)
			//     для всех свойств и снять пометку удаления со значений.
			//   иначе снять пометку удаления со значений.
			Если НЕ ЗначениеЗаполнено(СвойствоОбъект.ВладелецДополнительныхЗначений) Тогда
				НоваяПометкаЗначений = Ложь;
				
			ИначеЕсли ОбщегоНазначения.ПолучитьЗначениеРеквизита(
			            СвойствоОбъект.ВладелецДополнительныхЗначений, "ПометкаУдаления") Тогда
				
				Запрос = Новый Запрос;
				Запрос.УстановитьПараметр("Свойство", СвойствоОбъект.ВладелецДополнительныхЗначений);
				Запрос.Текст =
				"ВЫБРАТЬ
				|	Свойства.Ссылка КАК Ссылка
				|ИЗ
				|	ПланВидовХарактеристик.ДополнительныеРеквизитыИСведения КАК Свойства
				|ГДЕ
				|	Свойства.ВладелецДополнительныхЗначений = &Свойство";
				Массив = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
				Массив.Добавить(СвойствоОбъект.ВладелецДополнительныхЗначений);
				НовыйВладелецЗначений = СвойствоОбъект.Ссылка;
				Для каждого ТекущаяСсылка Из Массив Цикл
					Если ТекущаяСсылка = НовыйВладелецЗначений Тогда
						Продолжить;
					КонецЕсли;
					ТекущийОбъект = ТекущаяСсылка.ПолучитьОбъект();
					ТекущийОбъект.ВладелецДополнительныхЗначений = НовыйВладелецЗначений;
					ТекущийОбъект.Записать();
				КонецЦикла;
				СтарыйВладелецЗначений = СвойствоОбъект.ВладелецДополнительныхЗначений;
				СвойствоОбъект.ВладелецДополнительныхЗначений = Неопределено;
				СвойствоОбъект.Записать();
				НоваяПометкаЗначений = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НоваяПометкаЗначений  = Неопределено
	   И НовыйВладелецЗначений = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Владелец", СтарыйВладелецЗначений);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗначенияСвойствОбъектов.Ссылка КАК Ссылка,
	|	ЗначенияСвойствОбъектов.ПометкаУдаления КАК ПометкаУдаления
	|ИЗ
	|	Справочник.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
	|ГДЕ
	|	ЗначенияСвойствОбъектов.Владелец = &Владелец
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗначенияСвойствОбъектовИерархия.Ссылка,
	|	ЗначенияСвойствОбъектовИерархия.ПометкаУдаления
	|ИЗ
	|	Справочник.ЗначенияСвойствОбъектовИерархия КАК ЗначенияСвойствОбъектовИерархия
	|ГДЕ
	|	ЗначенияСвойствОбъектовИерархия.Владелец = &Владелец";
	
	Выгрузка = Запрос.Выполнить().Выгрузить();
	
	Если НовыйВладелецЗначений <> Неопределено Тогда
		Для каждого Строка Из Выгрузка Цикл
			ТекущийОбъект = Строка.Ссылка.ПолучитьОбъект();
			
			Если ТекущийОбъект.Владелец <> НовыйВладелецЗначений Тогда
				ТекущийОбъект.Владелец = НовыйВладелецЗначений;
			КонецЕсли;
			
			Если ТекущийОбъект.Модифицированность() Тогда
				ТекущийОбъект.ОбменДанными.Загрузка = Истина;
				ТекущийОбъект.Записать();
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если НоваяПометкаЗначений <> Неопределено Тогда
		Для каждого Строка Из Выгрузка Цикл
			ТекущийОбъект = Строка.Ссылка.ПолучитьОбъект();
			
			Если ТекущийОбъект.ПометкаУдаления <> НоваяПометкаЗначений Тогда
				ТекущийОбъект.ПометкаУдаления = НоваяПометкаЗначений;
			КонецЕсли;
			
			Если ТекущийОбъект.Модифицированность() Тогда
				ТекущийОбъект.Записать();
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры
