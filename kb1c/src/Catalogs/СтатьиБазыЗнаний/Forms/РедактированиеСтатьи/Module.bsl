////////////////////////////////////////////////////////////////////////////////
// УПРАВЛЕНИЕ ФОРМОЙ

&НаКлиенте
Процедура УстановитьВидимость()
	
	Элементы.СтраницаКатегории.Видимость	= НЕ ЭтотОбъект.ЭтоПодраздел;
	Элементы.СтраницаСодержание.Видимость	= НЕ ЭтотОбъект.ЭтоПодраздел;
	
	Элементы.КлючевыеСловаСтрока.Видимость	= НЕ ЭтотОбъект.ЭтоПодраздел;
	
	Элементы.Родитель.Видимость					= ЭтотОбъект.ЭтоПодраздел;
	Элементы.РазрешитьСворачивание.Видимость	= ЭтотОбъект.ЭтоПодраздел;
	
	Элементы.КраткоеОписание.Видимость		= НЕ ЭтотОбъект.ЭтоПодраздел;
	
	Элементы.ФормаПоказатьОтличия.Видимость = НЕ ЭтотОбъект.ЭтоПодраздел;
	
	Элементы.ПоложениеСодержания.Видимость = НЕ ЭтотОбъект.ЭтоПодраздел;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРеквизитыЗаголовков()
	
	Элементы.ГруппаКраткоеОписание.ЗаголовокСвернутогоОтображения = "Краткое описание ("
		+ ?(НЕ ЗначениеЗаполнено(ЭтотОбъект.КраткоеОписание), " (не ", "") + "заполнено)";
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТКА СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

&НаКлиенте
Процедура НаименованиеПриИзменении(Элемент)
КонецПроцедуры

&НаКлиенте
Процедура СтраницыСодержаниеСтатьиПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ТекущаяСтраница = Элементы.СтраницаКатегории Тогда
		ОбновитьКатегории(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстСтатьиПриИзменении(Элемент)
КонецПроцедуры

&НаКлиенте
Процедура КраткоеОписаниеПриИзменении(Элемент)
	УстановитьРеквизитыЗаголовков();
КонецПроцедуры

&НаКлиенте
Процедура КлючевыеСловаСтрокаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	Если Ожидание = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(Текст) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстДляПолученияДанныхВыбора = "";
	
	ПодстрокиВведенногоТекста = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, ",");
	ПодстрокиДанныхОбъекта    = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ЭтотОбъект.КлючевыеСловаСтрока, ",");
	
	Для Инд = 0 По (ПодстрокиВведенногоТекста.Количество()-1) Цикл
		Если Инд > (ПодстрокиДанныхОбъекта.Количество()-1) ИЛИ
			ПодстрокиВведенногоТекста[Инд] <> ПодстрокиДанныхОбъекта[инд] Тогда
			ТекстДляПолученияДанныхВыбора = 
				СтроковыеФункцииКлиентСервер.УдалитьПовторяющиесяСимволы(ПодстрокиВведенногоТекста[инд], " ");
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ПустаяСтрока(ТекстДляПолученияДанныхВыбора) Тогда
		Возврат;
	Иначе
		Текст = ТекстДляПолученияДанныхВыбора;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = ПолучитьДанныеВыбораДляКлючевогоПоля(Текст, Инд);

КонецПроцедуры

&НаКлиенте
Процедура КлючевыеСловаСтрокаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	Если НЕ ПустаяСтрока(Текст) Тогда
		
		Модифицированность = Истина;
		
		ТекстДляПолученияДанныхВыбора = "";
		
		ПодстрокиВведенногоТекста = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Текст, ",");
		ПодстрокиДанныхОбъекта    = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ЭтотОбъект.КлючевыеСловаСтрока, ",");
		
		Если (ПодстрокиВведенногоТекста.Количество() < ПодстрокиДанныхОбъекта.Количество()) ИЛИ
			(ПодстрокиВведенногоТекста.Количество() > (ПодстрокиДанныхОбъекта.Количество()+1)) Тогда
			
			ДанныеВыбора = Новый СписокЗначений;
			ДанныеВыбора.Добавить(Текст);
			ЭтотОбъект.КлючевыеСловаСтрока = Текст;
			ПреобразоватьТегиВКлючевыеСлова();
			Возврат;
			
		КонецЕсли;
		
		Для Инд = 0 По (ПодстрокиВведенногоТекста.Количество()-1) Цикл
			Если Инд > (ПодстрокиДанныхОбъекта.Количество()-1) ИЛИ
				ПодстрокиВведенногоТекста[Инд] <> ПодстрокиДанныхОбъекта[инд] Тогда
				ТекстДляПолученияДанныхВыбора = 
					СтроковыеФункцииКлиентСервер.УдалитьПовторяющиесяСимволы(ПодстрокиВведенногоТекста[инд], " ");
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если ПустаяСтрока(ТекстДляПолученияДанныхВыбора) Тогда
			
			ДанныеВыбора = Новый СписокЗначений;
			ДанныеВыбора.Добавить(Текст);
			Возврат;
		Иначе
			Текст = ТекстДляПолученияДанныхВыбора;
		КонецЕсли;
		
		ДанныеВыбора = ПолучитьДанныеВыбораДляКлючевогоПоля(Текст, Инд);
		
		Если ДанныеВыбора.Количество() = 1 Тогда
			ПоместитьНайденныйТегВСписок(
				ДанныеВыбора.Получить(0).Значение,
				Инд);
		ИначеЕсли ДанныеВыбора.Количество() = 0 Тогда
			ДанныеВыбора = Новый СписокЗначений;
			ДанныеВыбора.Добавить(Текст);
			Попытка
				Результат = РазобратьСтрокуСТегами(Текст);
			Исключение
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),
					,
					"КлючевыеСловаСтрока");
				Возврат;
			КонецПопытки;
			Если Результат.Количество() = 0 Тогда
				Возврат;
			Иначе
				Для Каждого КлючИЗначение Из Результат Цикл
					ПоместитьНайденныйТегВСписок(
						КлючИЗначение.Значение,
						Инд);
					Прервать;
				КонецЦикла;
			КонецЕсли;
		Иначе
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
		
	Иначе
		
		ЭтотОбъект.КлючевыеСловаСтрока = "";
		ЭтотОбъект.КлючевыеСлова.Очистить();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КлючевыеСловаСтрокаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		ПоместитьНайденныйТегВСписок(
			ВыбранноеЗначение,
			ВыбранноеЗначение.ИндексВСпискеТегов);
	КонецЕсли;
	
КонецПроцедуры

// Содержание

&НаКлиенте
Процедура СодержаниеДеревоПередНачаломДобавленияЗаписьДанных(Результат, ДопПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ЭтотОбъект.СтатьяБазыЗнаний) Тогда
		Записать(Неопределено);
	КонецЕсли;
	
	ОткрытьРазделСтатьи(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура СодержаниеДеревоПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	
	Если НЕ ЗначениеЗаполнено(ЭтотОбъект.СтатьяБазыЗнаний) Тогда
		ОписаниеОповещения	= Новый ОписаниеОповещения("СодержаниеДеревоПередНачаломДобавленияЗаписьДанных", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения,
			НСтр("ru='Данные на записаны.
			|Создание раздела возможно только после записи.
			|Выполнить запись статьи?'"),
			РежимДиалогаВопрос.ОКОтмена);
	Иначе 
		СодержаниеДеревоПередНачаломДобавленияЗаписьДанных(КодВозвратаДиалога.ОК, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СодержаниеДеревоПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	ТекущиеДанные = Элементы.СодержаниеДерево.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьРазделСтатьи(ТекущиеДанные.Область);
	
КонецПроцедуры

&НаКлиенте
Процедура СодержаниеДеревоПередУдалениемПодтверждение(Результат, ДопПараметры) Экспорт 
	
	Если НЕ Результат = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ДопПараметры.Свойство("Область") Тогда
		Возврат;
	КонецЕсли;
	
	МассивОбластей = Новый Массив;
	РекурсивноЗаполнитьПодчиненныеОбласти(МассивОбластей, ДопПараметры.Область);
	МассивОбластей.Добавить(ДопПараметры.Область);
	
	Для Каждого ИмяОбласти Из МассивОбластей Цикл
		
		СтруктураОтбора = Новый Структура("Область", ИмяОбласти);
		
		// Удалим картинки
		СтрокиКартинки = ЭтотОбъект.Картинки.НайтиСтроки(СтруктураОтбора);
		Для Каждого СтрокаТаблицы Из СтрокиКартинки Цикл
			ЭтотОбъект.Картинки.Удалить(СтрокаТаблицы);
		КонецЦикла;
		
		// Удалим таблицы
		СтрокиТаблицы = ЭтотОбъект.Таблицы.НайтиСтроки(СтруктураОтбора);
		Для Каждого СтрокаТаблицы Из СтрокиТаблицы Цикл
			ЭтотОбъект.Таблицы.Удалить(СтрокаТаблицы);
		КонецЦикла;
		
		// Удалим содержание
		СтрокиСодержания = ЭтотОбъект.Содержание.НайтиСтроки(СтруктураОтбора);
		Для Каждого СтрокаТаблицы Из СтрокиСодержания Цикл
			ЭтотОбъект.Содержание.Удалить(СтрокаТаблицы);
		КонецЦикла;
		
	КонецЦикла;
	
	ПостроитьДеревоСодержаниеНаСервере();
	
	ЭтотОбъект.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СодержаниеДеревоПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	ТекущиеДанные	= Элементы.СодержаниеДерево.ТекущиеДанные;
	ПараметрыФормы	= Новый Структура("Область", ТекущиеДанные.Область);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("СодержаниеДеревоПередУдалениемПодтверждение", ЭтотОбъект, ПараметрыФормы);
	
	ПоказатьВопрос(ОписаниеОповещения,
		НСтр("ru='Вы действительно хотите удалить раздел """ + СокрЛП(ТекущиеДанные.Представление) + """ и все его вложенные разделы?'"),
		РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет, , КодВозвратаДиалога.Нет);
	
КонецПроцедуры

// Категории

&НаКлиенте
Процедура КатегорииДеревоПередНачаломИзменения(Элемент, Отказ)
	
	Если Элементы.КатегорииДерево.ТекущийЭлемент.Имя = "КатегорииДеревоИспользование" Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Истина;
	
	ТекущиеДанные = Элементы.КатегорииДерево.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьЗначение(, ТекущиеДанные.Категория);
	
КонецПроцедуры

&НаКлиенте
Процедура КатегорииДеревоПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура КатегорииДеревоИспользованиеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.КатегорииДерево.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Использование Тогда
		НоваяСтрока = ЭтотОбъект.Категории.Добавить();
		НоваяСтрока.Категория = ТекущиеДанные.Категория;
	Иначе 
		МассивСтрок = ЭтотОбъект.Категории.НайтиСтроки(Новый Структура("Категория", ТекущиеДанные.Категория));
		Для Каждого СтрокаТаблицы Из МассивСтрок Цикл
			ЭтотОбъект.Категории.Удалить(СтрокаТаблицы);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТКА СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("Ключ") Тогда
		ЭтотОбъект.СтатьяБазыЗнаний = Параметры.Ключ;
	КонецЕсли;
	ЭтотОбъект.Область = Параметры.Область;
	
	// Если это не редактирование подраздела попытаемся захватить статью на редактирование
	Если НЕ ЗначениеЗаполнено(ЭтотОбъект.Область) Тогда
		СтатьяЗахвачена = Справочники.СтатьиБазыЗнаний.ЗахватитьСтатьюНаРедактирование(ЭтотОбъект.СтатьяБазыЗнаний);
		
		Если НЕ СтатьяЗахвачена Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru='Не удалось захватить статью на редактирование.'"), , , , Отказ);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	ЭтотОбъект.Редактирует = Пользователи.ТекущийПользователь();
	
	Если Параметры.Свойство("Идентификатор") Тогда
		ЭтотОбъект.Идентификатор = Параметры.Идентификатор;
	Иначе 
		ЭтотОбъект.Идентификатор = ЭтотОбъект.УникальныйИдентификатор;
	КонецЕсли;
	
	Если ЭтотОбъект.СтатьяБазыЗнаний.Пустая() Тогда
		ЭтотОбъект.Черновик = Истина;
	КонецЕсли;
	
	НоваяЗапись = ЭтотОбъект.СтатьяБазыЗнаний.Пустая();
	
	ИнициализацияДанных();
	
	ЭтотОбъект.АвтоЗаголовок	= Ложь;
	ЭтотОбъект.Заголовок		= ?(ЭтотОбъект.ЭтоПодраздел, "Изменение раздела", "Изменение статьи");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьВидимость();
	УстановитьРеквизитыЗаголовков();
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	//Если НЕ ЭтотОбъект.НоваяЗапись И ЭтотОбъект.Модифицированность Тогда
	//	ПроверяемыеРеквизиты.Добавить("ОписаниеИзменений");
	//КонецЕсли;
	
	Если НЕ ЭтотОбъект.ЭтоПодраздел И ЭтотОбъект.Категории.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не указана ни одна категория, к которой относится статья.");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если НЕ ЭтотОбъект.ЭтоПодраздел Тогда
		ПроверяемыеРеквизиты.Добавить("КраткоеОписание");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗапросСохранения(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		ЭтотОбъект.Модифицированность = Ложь;
		ЭтотОбъект.Закрыть();
	ИначеЕсли Результат = КодВозвратаДиалога.Да Тогда
		ЗаписатьИЗакрыть(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если ЭтотОбъект.Модифицированность Тогда
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПередЗакрытиемЗапросСохранения", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, 
			НСтр("ru='Данные были изменены. Сохранить изменения?'"),
			РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Да);
		Отказ = Истина;	
			
	ИначеЕсли НЕ ЭтотОбъект.ЭтоПодраздел Тогда
		
		// Разблокируем статью если она не изменилась
		ЗавершитьРедактированиеСтатьиНаСервере(ЭтотОбъект.СтатьяБазыЗнаний);
		
	КонецЕсли;
	
	Если НЕ ЭтотОбъект.ЭтоПодраздел Тогда
		
		ОповеститьОбИзменении(ЭтотОбъект.СтатьяБазыЗнаний);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "КатегорииБазыЗнанийЗапись" Тогда
		ОбновитьКатегории(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТКА КОМАНД ФОРМЫ

&НаКлиенте
Процедура ВставитьКартинку(Команда)
	
	ВыделенныйТекст	= СокрЛП(Элементы.ТекстСтатьи.ВыделенныйТекст);
	ЗакладкаНачало	= Неопределено;
	ЗакладкаКонец 	= Неопределено;
	Элементы.ТекстСтатьи.ПолучитьГраницыВыделения(ЗакладкаНачало, ЗакладкаКонец);
	
	МассивЭлементов	= ТекстСтатьи.ПолучитьЭлементы(ЗакладкаНачало, ЗакладкаКонец);
	Если МассивЭлементов.Количество() > 0 И ТипЗнч(МассивЭлементов[0]) = Тип("ТекстФорматированногоДокумента") Тогда
		ЭлементФорматированногоДокумента = МассивЭлементов[0];
		Если ЗакладкаНачало = ЗакладкаКонец И БазаЗнанийКлиентСервер.ЭтоСтрокаКартинки(ЭлементФорматированногоДокумента.Текст) Тогда
			ЗакладкаНачало	= ЭлементФорматированногоДокумента.ЗакладкаНачала;
			ЗакладкаКонец	= ЭлементФорматированногоДокумента.ЗакладкаКонца;
			ВыделенныйТекст	= ЭлементФорматированногоДокумента.Текст;
		КонецЕсли;
	КонецЕсли;
	
	ИмяКартинки		= БазаЗнанийКлиентСервер.ПолучитьИмяКартинки(ВыделенныйТекст);
	ДопПараметры	= Новый Структура("ИмяКартинки, Текст, Начало, Конец", ИмяКартинки, ВыделенныйТекст, ЗакладкаНачало, ЗакладкаКонец);
	
	Если ПустаяСтрока(ИмяКартинки) Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьВставитьКартинку", ЭтотОбъект, ДопПараметры);
		ПоказатьВопрос(ОписаниеОповещения, "Строка описания картинки не найдена.
		|Создать новую картинку?", РежимДиалогаВопрос.ДаНет);
	Иначе 
		ВыполнитьВставитьКартинку(КодВозвратаДиалога.Да, ДопПараметры); 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьТаблицу(Команда)
	
	ВыделенныйТекст	= СокрЛП(Элементы.ТекстСтатьи.ВыделенныйТекст);
	ЗакладкаНачало	= Неопределено;
	ЗакладкаКонец 	= Неопределено;
	Элементы.ТекстСтатьи.ПолучитьГраницыВыделения(ЗакладкаНачало, ЗакладкаКонец);
	
	МассивЭлементов	= ТекстСтатьи.ПолучитьЭлементы(ЗакладкаНачало, ЗакладкаКонец);
	Если МассивЭлементов.Количество() > 0 И ТипЗнч(МассивЭлементов[0]) = Тип("ТекстФорматированногоДокумента") Тогда
		ЭлементФорматированногоДокумента = МассивЭлементов[0];
		Если ЗакладкаНачало = ЗакладкаКонец И БазаЗнанийКлиентСервер.ЭтоСтрокаТаблицы(ЭлементФорматированногоДокумента.Текст) Тогда
			ЗакладкаНачало	= ЭлементФорматированногоДокумента.ЗакладкаНачала;
			ЗакладкаКонец	= ЭлементФорматированногоДокумента.ЗакладкаКонца;
			ВыделенныйТекст	= ЭлементФорматированногоДокумента.Текст;
		КонецЕсли;
	КонецЕсли;
	
	ИмяТаблицы		= БазаЗнанийКлиентСервер.ПолучитьИмяТаблицы(ВыделенныйТекст);
	ДопПараметры	= Новый Структура("ИмяТаблицы, Текст, Начало, Конец", ИмяТаблицы, ВыделенныйТекст, ЗакладкаНачало, ЗакладкаКонец);
	
	Если ПустаяСтрока(ИмяТаблицы) Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьВставитьТаблицу", ЭтотОбъект, ДопПараметры);
		ПоказатьВопрос(ОписаниеОповещения, "Строка описания таблицы не найдена.
		|Создать новую таблицу?", РежимДиалогаВопрос.ДаНет);
	Иначе 
		ВыполнитьВставитьТаблицу(КодВозвратаДиалога.Да, ДопПараметры); 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьГиперссылку(Команда)
	
	ВыделенныйТекст	= СокрЛП(Элементы.ТекстСтатьи.ВыделенныйТекст);
	ЗакладкаНачало	= Неопределено;
	ЗакладкаКонец 	= Неопределено;
	Гиперссылка		= "";
	
	Элементы.ТекстСтатьи.ПолучитьГраницыВыделения(ЗакладкаНачало, ЗакладкаКонец);
	МассивЭлементов	= ТекстСтатьи.ПолучитьЭлементы(ЗакладкаНачало, ЗакладкаКонец);
	Если МассивЭлементов.Количество() > 0 И ТипЗнч(МассивЭлементов[0]) = Тип("ТекстФорматированногоДокумента") Тогда
		ЭлементФорматированногоДокумента = МассивЭлементов[0];
		Если НЕ ПустаяСтрока(ЭлементФорматированногоДокумента.НавигационнаяСсылка) Тогда
			ЗакладкаНачало	= ЭлементФорматированногоДокумента.ЗакладкаНачала;
			ЗакладкаКонец	= ЭлементФорматированногоДокумента.ЗакладкаКонца;
			Гиперссылка		= ЭлементФорматированногоДокумента.НавигационнаяСсылка;
			ВыделенныйТекст	= ЭлементФорматированногоДокумента.Текст;
		КонецЕсли;
	КонецЕсли;
	
	ТекстСсылки	= ВыделенныйТекст;
	
	ДопПараметры = Новый Структура("Гиперссылка, Текст, Начало, Конец", Гиперссылка, ТекстСсылки, ЗакладкаНачало, ЗакладкаКонец);
	
	Если ПустаяСтрока(Гиперссылка) Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьВставитьГиперссылку", ЭтотОбъект, ДопПараметры);
		ПоказатьВопрос(ОписаниеОповещения, "Строка описания гиперссылки не найдена.
		|Создать новую гиперссылку?", РежимДиалогаВопрос.ДаНет);
	Иначе 
		ВыполнитьВставитьГиперссылку(КодВозвратаДиалога.Да, ДопПараметры); 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьСноску(Команда)
	
	ВыделенныйТекст	= СокрЛП(Элементы.ТекстСтатьи.ВыделенныйТекст);
	ЗакладкаНачало	= Неопределено;
	ЗакладкаКонец 	= Неопределено;
	Гиперссылка		= "";
	Элементы.ТекстСтатьи.ПолучитьГраницыВыделения(ЗакладкаНачало, ЗакладкаКонец);
	
	МассивЭлементов	= ТекстСтатьи.ПолучитьЭлементы(ЗакладкаНачало, ЗакладкаКонец);
	Если МассивЭлементов.Количество() > 0 И ТипЗнч(МассивЭлементов[0]) = Тип("ТекстФорматированногоДокумента") Тогда
		ЭлементФорматированногоДокумента = МассивЭлементов[0];
		Если НЕ ПустаяСтрока(ЭлементФорматированногоДокумента.НавигационнаяСсылка) Тогда
			ЗакладкаНачало	= ЭлементФорматированногоДокумента.ЗакладкаНачала;
			ЗакладкаКонец	= ЭлементФорматированногоДокумента.ЗакладкаКонца;
			ВыделенныйТекст	= ЭлементФорматированногоДокумента.Текст;
			Гиперссылка		= ЭлементФорматированногоДокумента.НавигационнаяСсылка;
		КонецЕсли;
	КонецЕсли;
	
	ТекстСсылки	= ВыделенныйТекст;
	
	ДопПараметры = Новый Структура("Гиперссылка, Текст, Начало, Конец", Гиперссылка, ТекстСсылки, ЗакладкаНачало, ЗакладкаКонец);
	
	Если ПустаяСтрока(Гиперссылка) Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьВставитьСноску", ЭтотОбъект, ДопПараметры);
		ПоказатьВопрос(ОписаниеОповещения, "Строка описания сноски не найдена.
		|Создать новую сноску?", РежимДиалогаВопрос.ДаНет);
	Иначе 
		ВыполнитьВставитьСноску(КодВозвратаДиалога.Да, ДопПараметры); 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияИзменений(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Статья", СтатьяБазыЗнаний);
	
	ОткрытьФорму("Справочник.СтатьиБазыЗнаний.Форма.ПросмотрИстории", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура Записать(Команда)
	
	Если НЕ Модифицированность Тогда
		Возврат;
	КонецЕсли;
	
	Результат = ЭтотОбъект.ПроверитьЗаполнение();
	Если НЕ Результат Тогда
		Возврат;
	КонецЕсли;
		
	ПараметрыЗакрытия = ЗаписатьНаСервере();
	
	// Произошла запись статьи или подраздела
	Если ПараметрыЗакрытия.Количество() = 0 Тогда // оповещение о записи статьи или подраздела
		Оповестить("СтатьиБазыЗнанийЗапись", , СтатьяБазыЗнаний);
	Иначе // оповещение владельца о необходимости записи данных формы
		Если ТипЗнч(ЭтотОбъект.ВладелецФормы) = Тип("УправляемаяФорма") И ЭтотОбъект.ВладелецФормы.ИмяФормы = "Справочник.СтатьиБазыЗнаний.Форма.РедактированиеСтатьи" Тогда
			ЭтотОбъект.ВладелецФормы.ПриОкончанииРедактированияПодраздела(ПараметрыЗакрытия, Неопределено);
			ЭтотОбъект.ВладелецФормы.ЗаписатьНаСервере(Ложь);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	Если НЕ Модифицированность Тогда
		ЭтотОбъект.Закрыть();
		Возврат;
	КонецЕсли;
	
	Результат = ЭтотОбъект.ПроверитьЗаполнение();
	Если НЕ Результат Тогда
		Возврат;
	КонецЕсли;
		
	Если ЭтотОбъект.ЭтоПодраздел Тогда
		ЗаписатьИЗакрытьВыполнить(КодВозвратаДиалога.Да, Неопределено);
	Иначе
		ОписаниеОповещения	= Новый ОписаниеОповещения("ЗаписатьИЗакрытьВыполнить", ЭтотОбъект);
		
		ПоказатьВопрос(ОписаниеОповещения,
			НСтр("ru='Завершить редактирование с освобождением статьи?'"),
			РежимДиалогаВопрос.ДаНетОтмена);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредварительныйПросмотр(Команда)
	//// Получаем элементы и разбираем все на куски
	//Массив = ТекстСтатьи.ПолучитьЭлементы();
	//
	//Вложения = Новый Структура;
	//ТекстСтатьи.ПолучитьHTML(ТекстHTML, Вложения);
	//ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстHTML);
	//
	//Текст = ТекстСтатьи.ПолучитьТекст();
	//ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Текст);
	//
	//ФС = ТекстСтатьи.ПолучитьФорматированнуюСтроку();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКатегории(Команда)
	
	ПостроитьДеревоКатегорииНаСервере();
	
	Для Каждого ЭлементДерева Из ЭтотОбъект.КатегорииДерево.ПолучитьЭлементы() Цикл
		Элементы.КатегорииДерево.Развернуть(ЭлементДерева.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДополнительнаяИнформация(Команда)
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОформление(Команда)
	УдалитьОформлениеФорматированногоДокумента();
	ВыполнитьОформлениеФорматированногоДокумента();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ МЕТОДЫ

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьМассивСтруктурКартинки(СтрокиТаблицы)
	
	МассивКартинки	= Новый Массив;
	
	Для Каждого СтрокаТаблицы Из СтрокиТаблицы Цикл
		СтруктураКартинки = Новый Структура("ИдентификаторКартинки, Область, АдресХранилища, Высота, Подпись, Выравнивание, Имя, Граница, Подсказка");
		ЗаполнитьЗначенияСвойств(СтруктураКартинки, СтрокаТаблицы);
		МассивКартинки.Добавить(Новый ФиксированнаяСтруктура(СтруктураКартинки));
	КонецЦикла;
	
	Возврат МассивКартинки;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьМассивСтруктурТаблицы(СтрокиТаблицы)
	
	МассивТаблицы	= Новый Массив;
	
	Для Каждого СтрокаТаблицы Из СтрокиТаблицы Цикл
		СтруктураТаблицы = Новый Структура("ИдентификаторТаблицы, Область, АдресХранилища, Подпись, Выравнивание, Имя, ТаблицаСтилейHTML, ТекстТаблицыHTML");
		ЗаполнитьЗначенияСвойств(СтруктураТаблицы, СтрокаТаблицы);
		МассивТаблицы.Добавить(Новый ФиксированнаяСтруктура(СтруктураТаблицы));
	КонецЦикла;
	
	Возврат МассивТаблицы;
	
КонецФункции

&НаСервере
Процедура ПостроитьДеревоСодержаниеНаСервере()
	
	ДеревоЗначений = РеквизитФормыВЗначение("СодержаниеДерево");
	ДеревоЗначений.Строки.Очистить();
	
	Для Каждого СтрокаТаблицы Из ЭтотОбъект.Содержание Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Родитель) Тогда
			СтрокиРодитель = ДеревоЗначений.Строки;
		Иначе 
			СтрокаРодитель = ДеревоЗначений.Строки.Найти(СтрокаТаблицы.Родитель);
			Если СтрокаРодитель = Неопределено Тогда
				СтрокаРодитель = ДеревоЗначений;
			КонецЕсли;
			
			СтрокиРодитель = СтрокаРодитель.Строки;
		КонецЕсли;
		
		НоваяСтрока = СтрокиРодитель.Добавить();
		НоваяСтрока.Область			= СтрокаТаблицы.Область;
		НоваяСтрока.Представление	= СтрокаТаблицы.Наименование;
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ДеревоЗначений, "СодержаниеДерево");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВложенныеСтрокиДереваКатегорий(ТаблицаКатегорий, СтрокиДерева, РодительСсылка)
	
	СтруктураОтбора = Новый Структура("Родитель", РодительСсылка);
	ВложенныеСтроки = ТаблицаКатегорий.Скопировать(СтруктураОтбора);
	ВложенныеСтроки.Сортировать("РеквизитДопУпорядочивания"); 
	Для Каждого СтрокаТаблицы Из ВложенныеСтроки Цикл
		МассивСтрок = ЭтотОбъект.Категории.НайтиСтроки(Новый Структура("Категория", СтрокаТаблицы.Ссылка));
		
		НоваяСтрока = СтрокиДерева.Добавить();
		НоваяСтрока.Использование	= (МассивСтрок.Количество() > 0);
		НоваяСтрока.Категория		= СтрокаТаблицы.Ссылка;
		
		ЗаполнитьВложенныеСтрокиДереваКатегорий(ТаблицаКатегорий, НоваяСтрока.Строки, СтрокаТаблицы.Ссылка);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПостроитьДеревоКатегорииНаСервере()
	
	ДеревоЗначений = РеквизитФормыВЗначение("КатегорииДерево");
	ДеревоЗначений.Строки.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КатегорииБазыЗнаний.Родитель КАК Родитель,
	|	КатегорииБазыЗнаний.Ссылка,
	|	КатегорииБазыЗнаний.РеквизитДопУпорядочивания
	|ИЗ
	|	Справочник.КатегорииБазыЗнаний КАК КатегорииБазыЗнаний
	|ГДЕ
	|	НЕ КатегорииБазыЗнаний.ПометкаУдаления";
	ТаблицаКатегорий = Запрос.Выполнить().Выгрузить();
	ТаблицаКатегорий.Индексы.Добавить("Родитель");
	
	РодительСсылка = Справочники.КатегорииБазыЗнаний.ПустаяСсылка();
	ЗаполнитьВложенныеСтрокиДереваКатегорий(ТаблицаКатегорий, ДеревоЗначений.Строки, РодительСсылка);
	
	ЗначениеВРеквизитФормы(ДеревоЗначений, "КатегорииДерево");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОформлениеФорматированногоДокумента(СтрокаОформления, ЦветФона)
	
	НачалоПоиска = Неопределено;
	ОбластьОписания = ЭтотОбъект.ТекстСтатьи.НайтиТекст("[" + СтрокаОформления + "='");
	Пока ОбластьОписания <> Неопределено Цикл
		ОбластьОкончания = ЭтотОбъект.ТекстСтатьи.НайтиТекст("']", ОбластьОписания.ЗакладкаНачала);
		
		ЗакладкаНачало	= ОбластьОписания.ЗакладкаНачала;
		ЗакладкаКонец	= ОбластьОкончания.ЗакладкаКонца;
		
		МассивОбластей = ЭтотОбъект.ТекстСтатьи.СформироватьЭлементы(ЗакладкаНачало, ЗакладкаКонец);
		Для Каждого ОбластьДокумента Из МассивОбластей Цикл
			ОбластьДокумента.ЦветФона = ЦветФона;
		КонецЦикла;
		
		ОбластьОписания = ЭтотОбъект.ТекстСтатьи.НайтиТекст("[" + СтрокаОформления + "='", ЗакладкаКонец);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОформлениеГиперссылок(ЦветТекста)
	
	МассивЭлементов = ТекстСтатьи.ПолучитьЭлементы();
	Для Каждого ЭлементДокумента Из МассивЭлементов Цикл
		Если ТипЗнч(ЭлементДокумента) = Тип("ТекстФорматированногоДокумента") 
			И НЕ ПустаяСтрока(ЭлементДокумента.НавигационнаяСсылка) Тогда
			
			ЭлементДокумента.ЦветТекста = ЦветТекста;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОформлениеКомментариев(ЦветТекста)
	
	НачалоПоиска = Неопределено;
	ОбластьОписания = ЭтотОбъект.ТекстСтатьи.НайтиТекст("<!--");
	Пока ОбластьОписания <> Неопределено Цикл
		ОбластьОкончания = ЭтотОбъект.ТекстСтатьи.НайтиТекст("-->", ОбластьОписания.ЗакладкаНачала);
		
		ЗакладкаНачало	= ОбластьОписания.ЗакладкаНачала;
		ЗакладкаКонец	= ОбластьОкончания.ЗакладкаКонца;
		
		МассивОбластей = ЭтотОбъект.ТекстСтатьи.СформироватьЭлементы(ЗакладкаНачало, ЗакладкаКонец);
		Для Каждого ОбластьДокумента Из МассивОбластей Цикл
			ОбластьДокумента.ЦветТекста = ЦветТекста;
		КонецЦикла;
		
		ОбластьОписания = ЭтотОбъект.ТекстСтатьи.НайтиТекст("<!--", ЗакладкаКонец);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОформлениеРазделительныхЛиний(СнятьВыделение)
	
	ЦветТекста	= ?(СнятьВыделение, Элементы.ТекстСтатьи.ЦветТекста, WebЦвета.Пурпурный);
	ЦветФона	= Элементы.ТекстСтатьи.ЦветФона;
	Шрифт		= Элементы.ТекстСтатьи.Шрифт;
	
	НачалоПоиска = Неопределено;
	ОбластьОписания = ЭтотОбъект.ТекстСтатьи.НайтиТекст("----");
	Пока ОбластьОписания <> Неопределено Цикл
		ЗакладкаНачало	= ОбластьОписания.ЗакладкаНачала;
		ЗакладкаКонец	= ОбластьОписания.ЗакладкаКонца;
		
		МассивОбластей = ЭтотОбъект.ТекстСтатьи.СформироватьЭлементы(ЗакладкаНачало, ЗакладкаКонец);
		Для Каждого ОбластьДокумента Из МассивОбластей Цикл
			ОбластьДокумента.ЦветТекста = ЦветТекста;
			ОбластьДокумента.ЦветФона	= ЦветФона;
			ОбластьДокумента.Шрифт		= Шрифт;
		КонецЦикла;
		
		ОбластьОписания = ЭтотОбъект.ТекстСтатьи.НайтиТекст("----", ЗакладкаКонец);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьОформлениеФорматированногоДокумента()
	
	УстановитьОформлениеФорматированногоДокумента("picture", WebЦвета.БледноЗеленый);
	УстановитьОформлениеФорматированногоДокумента("table", WebЦвета.БледноСиреневый);
	УстановитьОформлениеГиперссылок(WebЦвета.Синий);
	УстановитьОформлениеКомментариев(WebЦвета.ТемноСерый);
	УстановитьОформлениеРазделительныхЛиний(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьОформлениеФорматированногоДокумента()
	
	УстановитьОформлениеФорматированногоДокумента("picture", Элементы.ТекстСтатьи.ЦветФона);
	УстановитьОформлениеФорматированногоДокумента("table", Элементы.ТекстСтатьи.ЦветФона);
	УстановитьОформлениеГиперссылок(Элементы.ТекстСтатьи.ЦветТекста);
	УстановитьОформлениеКомментариев(Элементы.ТекстСтатьи.ЦветТекста);
	УстановитьОформлениеРазделительныхЛиний(Истина);
	
КонецПроцедуры

// Чтение данных

&НаСервере
Процедура ЗаполнитьДанныеФормыПоСсылке()
	
	// Основные данные
	ЗапросДанные = Новый Запрос;
	ЗапросДанные.УстановитьПараметр("Ссылка", ЭтотОбъект.СтатьяБазыЗнаний);
	Если ЗначениеЗаполнено(ЭтотОбъект.Область) Тогда
		ЗапросДанные.УстановитьПараметр("Область", ЭтотОбъект.Область);
		ЗапросДанные.Текст = 
		"ВЫБРАТЬ
		|	СтатьиБазыЗнанийСодержание.Ссылка,
		|	СтатьиБазыЗнанийСодержание.Наименование,
		|	СтатьиБазыЗнанийСодержание.Область,
		|	СтатьиБазыЗнанийСодержание.Родитель,
		|	СтатьиБазыЗнанийСодержание.Текст,
		|	СтатьиБазыЗнанийСодержание.ТекстHTML,
		|	СтатьиБазыЗнанийСодержание.Ссылка.Черновик КАК Черновик,
		|	0 КАК ПоложениеСодержания,
		|	СтатьиБазыЗнанийСодержание.РазрешитьСворачивание КАК РазрешитьСворачивание,
		|	"""" КАК КраткоеОписание
		|ИЗ
		|	Справочник.СтатьиБазыЗнаний.Содержание КАК СтатьиБазыЗнанийСодержание
		|ГДЕ
		|	СтатьиБазыЗнанийСодержание.Ссылка = &Ссылка
		|	И СтатьиБазыЗнанийСодержание.Область = &Область";
	Иначе 
		ЗапросДанные.Текст = 
		"ВЫБРАТЬ
		|	СтатьиБазыЗнаний.Ссылка,
		|	СтатьиБазыЗнаний.Наименование,
		|	"""" КАК Область,
		|	"""" КАК Родитель,
		|	СтатьиБазыЗнаний.Текст,
		|	СтатьиБазыЗнаний.ТекстHTML,
		|	СтатьиБазыЗнаний.Черновик,
		|	СтатьиБазыЗнаний.ПоложениеСодержания КАК ПоложениеСодержания,
		|	ЛОЖЬ КАК РазрешитьСворачивание,
		|	СтатьиБазыЗнаний.КраткоеОписание
		|ИЗ
		|	Справочник.СтатьиБазыЗнаний КАК СтатьиБазыЗнаний
		|ГДЕ
		|	СтатьиБазыЗнаний.Ссылка = &Ссылка";
	КонецЕсли;
	
	// Картинки
	ЗапросКартинки = Новый Запрос;
	ЗапросКартинки.УстановитьПараметр("Ссылка"	, ЭтотОбъект.СтатьяБазыЗнаний);
	ЗапросКартинки.УстановитьПараметр("Область"	, ЭтотОбъект.Область);
	ЗапросКартинки.Текст = 
	"ВЫБРАТЬ
	|	ХранилищеДанныхБазыЗнаний.СтатьяБазыЗнаний КАК Ссылка,
	|	ХранилищеДанныхБазыЗнаний.Область,
	|	ХранилищеДанныхБазыЗнаний.Идентификатор КАК ИдентификаторКартинки,
	|	СтатьиБазыЗнанийКартинки.Имя,
	|	СтатьиБазыЗнанийКартинки.Подпись,
	|	СтатьиБазыЗнанийКартинки.Выравнивание,
	|	СтатьиБазыЗнанийКартинки.Граница,
	|	СтатьиБазыЗнанийКартинки.Высота,
	|	СтатьиБазыЗнанийКартинки.Подсказка
	|ИЗ
	|	РегистрСведений.ХранилищеДанныхБазыЗнаний КАК ХранилищеДанныхБазыЗнаний
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтатьиБазыЗнаний.Картинки КАК СтатьиБазыЗнанийКартинки
	|		ПО ХранилищеДанныхБазыЗнаний.СтатьяБазыЗнаний = СтатьиБазыЗнанийКартинки.Ссылка
	|			И ХранилищеДанныхБазыЗнаний.Область = СтатьиБазыЗнанийКартинки.Область
	|			И ХранилищеДанныхБазыЗнаний.Идентификатор = СтатьиБазыЗнанийКартинки.Идентификатор
	|ГДЕ
	|	ХранилищеДанныхБазыЗнаний.СтатьяБазыЗнаний = &Ссылка
	|	И ХранилищеДанныхБазыЗнаний.ВидДанных = 1
	|	И 1 = 1";
	
	Если ЗначениеЗаполнено(ЭтотОбъект.Область) Тогда
		ЗапросКартинки.Текст = СтрЗаменить(ЗапросКартинки.Текст, "1 = 1", "ХранилищеДанныхБазыЗнаний.Область = &Область");
	КонецЕсли;
	
	// Таблицы
	ЗапросТаблицы = Новый Запрос;
	ЗапросТаблицы.УстановитьПараметр("Ссылка"	, ЭтотОбъект.СтатьяБазыЗнаний);
	ЗапросТаблицы.УстановитьПараметр("Область"	, ЭтотОбъект.Область);
	ЗапросТаблицы.Текст = 
	"ВЫБРАТЬ
	|	ХранилищеДанныхБазыЗнаний.СтатьяБазыЗнаний КАК Ссылка,
	|	ХранилищеДанныхБазыЗнаний.Область,
	|	ХранилищеДанныхБазыЗнаний.Идентификатор КАК ИдентификаторТаблицы,
	|	СтатьиБазыЗнанийТаблицы.Имя,
	|	СтатьиБазыЗнанийТаблицы.Подпись,
	|	СтатьиБазыЗнанийТаблицы.Выравнивание,
	|	СтатьиБазыЗнанийТаблицы.ТаблицаСтилейHTML,
	|	СтатьиБазыЗнанийТаблицы.ТекстТаблицыHTML
	|ИЗ
	|	РегистрСведений.ХранилищеДанныхБазыЗнаний КАК ХранилищеДанныхБазыЗнаний
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтатьиБазыЗнаний.Таблицы КАК СтатьиБазыЗнанийТаблицы
	|		ПО ХранилищеДанныхБазыЗнаний.СтатьяБазыЗнаний = СтатьиБазыЗнанийТаблицы.Ссылка
	|			И ХранилищеДанныхБазыЗнаний.Область = СтатьиБазыЗнанийТаблицы.Область
	|			И ХранилищеДанныхБазыЗнаний.Идентификатор = СтатьиБазыЗнанийТаблицы.Идентификатор
	|ГДЕ
	|	ХранилищеДанныхБазыЗнаний.СтатьяБазыЗнаний = &Ссылка
	|	И ХранилищеДанныхБазыЗнаний.ВидДанных = 2
	|	И 1 = 1";
	
	Если ЗначениеЗаполнено(ЭтотОбъект.Область) Тогда
		ЗапросТаблицы.Текст = СтрЗаменить(ЗапросТаблицы.Текст, "1 = 1", "ХранилищеДанныхБазыЗнаний.Область = &Область");
	КонецЕсли;
	
	// Содержание
	ЗапросСодержание = Новый Запрос;
	ЗапросСодержание.УстановитьПараметр("Ссылка", ЭтотОбъект.СтатьяБазыЗнаний);
	ЗапросСодержание.Текст = 
	"ВЫБРАТЬ
	|	СтатьиБазыЗнанийСодержание.НомерСтроки,
	|	СтатьиБазыЗнанийСодержание.Ссылка,
	|	СтатьиБазыЗнанийСодержание.Область,
	|	СтатьиБазыЗнанийСодержание.Родитель,
	|	СтатьиБазыЗнанийСодержание.Наименование,
	|	СтатьиБазыЗнанийСодержание.Текст,
	|	СтатьиБазыЗнанийСодержание.ТекстHTML,
	|	СтатьиБазыЗнанийСодержание.Ответственный,
	|	СтатьиБазыЗнанийСодержание.ДатаСоздания,
	|	СтатьиБазыЗнанийСодержание.Уровень КАК Уровень,
	|	СтатьиБазыЗнанийСодержание.РазрешитьСворачивание КАК РазрешитьСворачивание,
	|	ЕСТЬNULL(СтатьиРодители.Наименование, """") КАК РодительПредставление
	|ИЗ
	|	Справочник.СтатьиБазыЗнаний.Содержание КАК СтатьиБазыЗнанийСодержание
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтатьиБазыЗнаний.Содержание КАК СтатьиРодители
	|		ПО СтатьиБазыЗнанийСодержание.Ссылка = СтатьиРодители.Ссылка
	|			И СтатьиБазыЗнанийСодержание.Родитель = СтатьиРодители.Область
	|ГДЕ
	|	СтатьиБазыЗнанийСодержание.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	СтатьиБазыЗнанийСодержание.НомерСтроки";
	
	// Категории
	ЗапросКатегории = Новый Запрос;
	ЗапросКатегории.УстановитьПараметр("Ссылка", ЭтотОбъект.СтатьяБазыЗнаний);
	ЗапросКатегории.Текст = 
	"ВЫБРАТЬ
	|	СтатьиБазыЗнанийКатегории.Категория КАК Категория
	|ИЗ
	|	Справочник.СтатьиБазыЗнаний.Категории КАК СтатьиБазыЗнанийКатегории
	|ГДЕ
	|	СтатьиБазыЗнанийКатегории.Ссылка = &Ссылка";
	
	// Сноски
	ЗапросСноски = Новый Запрос;
	ЗапросСноски.УстановитьПараметр("Ссылка", ЭтотОбъект.СтатьяБазыЗнаний);
	ЗапросСноски.Текст = 
	"ВЫБРАТЬ
	|	СтатьиБазыЗнанийСноски.Идентификатор,
	|	СтатьиБазыЗнанийСноски.Группа,
	|	СтатьиБазыЗнанийСноски.Наименование,
	|	СтатьиБазыЗнанийСноски.ГиперссылкаТип,
	|	СтатьиБазыЗнанийСноски.ГиперссылкаАдрес,
	|	СтатьиБазыЗнанийСноски.ГиперссылкаОткрывать,
	|	СтатьиБазыЗнанийСноски.ГиперссылкаПодсказка
	|ИЗ
	|	Справочник.СтатьиБазыЗнаний.Сноски КАК СтатьиБазыЗнанийСноски
	|ГДЕ
	|	СтатьиБазыЗнанийСноски.Ссылка = &Ссылка";
	
	// Ключевые слова
	ЗапросТеги = Новый Запрос;
	ЗапросТеги.УстановитьПараметр("Ссылка", ЭтотОбъект.СтатьяБазыЗнаний);
	ЗапросТеги.Текст = 
	"ВЫБРАТЬ
	|	СвязьКлючевыхСловБазыЗнаний.КлючевоеСлово,
	|	СвязьКлючевыхСловБазыЗнаний.КлючевоеСлово.Наименование КАК Наименование
	|ИЗ
	|	РегистрСведений.СвязьКлючевыхСловБазыЗнаний КАК СвязьКлючевыхСловБазыЗнаний
	|ГДЕ
	|	СвязьКлючевыхСловБазыЗнаний.СтатьяБазыЗнаний = &Ссылка";
	
	// Заполнение данных
	ВыборкаДанные = ЗапросДанные.Выполнить().Выбрать();
	ВыборкаДанные.Следующий();
	
	ЭтотОбъект.Родитель				= ВыборкаДанные.Родитель;
	ЭтотОбъект.Наименование			= ВыборкаДанные.Наименование;
	ЭтотОбъект.Текст				= ВыборкаДанные.Текст;
	ЭтотОбъект.ТекстHTML			= ВыборкаДанные.ТекстHTML;
	ЭтотОбъект.Черновик				= ВыборкаДанные.Черновик;
	ЭтотОбъект.КраткоеОписание		= ВыборкаДанные.КраткоеОписание;
	ЭтотОбъект.ПоложениеСодержания	= ВыборкаДанные.ПоложениеСодержания;
	ЭтотОбъект.РазрешитьСворачивание= ВыборкаДанные.РазрешитьСворачивание;
	
	Если НЕ ЗначениеЗаполнено(ЭтотОбъект.Область) Тогда
		ЭтотОбъект.Содержание.Загрузить(ЗапросСодержание.Выполнить().Выгрузить());
		ЭтотОбъект.Категории.Загрузить(ЗапросКатегории.Выполнить().Выгрузить());
	КонецЕсли;

	ЭтотОбъект.Картинки.Загрузить(ЗапросКартинки.Выполнить().Выгрузить());
	ЭтотОбъект.Таблицы.Загрузить(ЗапросТаблицы.Выполнить().Выгрузить());
	ЭтотОбъект.Сноски.Загрузить(ЗапросСноски.Выполнить().Выгрузить());
	ЭтотОбъект.КлючевыеСлова.Загрузить(ЗапросТеги.Выполнить().Выгрузить());
	ЭтотОбъект.КлючевыеСловаСтрока = ПолучитьПредставлениеСпискаТегов(ЭтотОбъект.КлючевыеСлова);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеФормыПоПараметрам()
	
	ЭтотОбъект.Область					= Параметры.Область;
	ЭтотОбъект.Наименование				= Параметры.Наименование;
	ЭтотОбъект.Идентификатор			= ?(ЗначениеЗаполнено(Параметры.Идентификатор), Параметры.Идентификатор, ЭтотОбъект.УникальныйИдентификатор);
	ЭтотОбъект.Родитель					= Параметры.Родитель;
	ЭтотОбъект.Текст					= Параметры.Текст;
	ЭтотОбъект.ТекстHTML				= Параметры.ТекстHTML;
	ЭтотОбъект.ОписаниеИзменений		= Параметры.ОписаниеИзменений;
	ЭтотОбъект.РазрешитьСворачивание	= Параметры.РазрешитьСворачивание;
	
	// Заполним содержание
	Если ТипЗнч(Параметры.Содержание) = Тип("ФиксированныйМассив") Тогда
		Для Каждого Структура Из Параметры.Содержание Цикл
			НоваяСтрока = ЭтотОбъект.Содержание.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Структура);
		КонецЦикла;
	КонецЕсли;
	
	ЭтотОбъект.Содержание.Сортировать("НомерСтроки");
	Для Каждого СтрокаТаблицы Из ЭтотОбъект.Содержание Цикл
		Представление = "";
		Для Уровень = 2 По СтрокаТаблицы.Уровень Цикл
			Представление = Представление + "	";
		КонецЦикла;
		Представление = Представление + СтрокаТаблицы.Наименование;
		
		Элементы.Родитель.СписокВыбора.Добавить(СтрокаТаблицы.Область, Представление);
	КонецЦикла;
	
	Для Каждого СтруктураКартинки Из Параметры.Картинки Цикл
		НоваяСтрока = ЭтотОбъект.Картинки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураКартинки);
	КонецЦикла;
	
	Для Каждого СтруктураТаблицы Из Параметры.Таблицы Цикл
		НоваяСтрока = ЭтотОбъект.Таблицы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураТаблицы);
	КонецЦикла;
	
	Для Каждого СтруктураСноски Из Параметры.Сноски Цикл
		НоваяСтрока = ЭтотОбъект.Сноски.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураСноски);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализацияДанных(ПриСоздании = Истина)
	
	Если Параметры.ЗаполнитьИзПараметров И ПриСоздании Тогда
		ЗаполнитьДанныеФормыПоПараметрам();
	ИначеЕсли ЗначениеЗаполнено(СтатьяБазыЗнаний) Тогда
		ЗаполнитьДанныеФормыПоСсылке();
	КонецЕсли;
		
	ЭтотОбъект.ТекстСтатьи.УстановитьHTML(ЭтотОбъект.ТекстHTML, Новый Структура);
	
	ЭтотОбъект.ЭтоПодраздел				= ЗначениеЗаполнено(ЭтотОбъект.Область);
	ЭтотОбъект.НаименованиеДоИзменения	= ЭтотОбъект.Наименование;
	
	ПостроитьДеревоСодержаниеНаСервере();
	ПостроитьДеревоКатегорииНаСервере();
	
	ВыполнитьОформлениеФорматированногоДокумента();
	
КонецПроцедуры

// Запись данных

&НаКлиенте
Процедура ЗаписатьИЗакрытьВыполнить(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	ОсвободитьСтатью = НЕ ЭтоПодраздел И (Результат = КодВозвратаДиалога.Да);
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("ОсвободитьСтатью", ОсвободитьСтатью);
	
	Если ОсвободитьСтатью Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗаписатьИЗакрытьЗавершение", ЭтотОбъект, ПараметрыОповещения);
		ПоказатьВводСтроки(ОписаниеОповещения, "", "Укажите описание изменений статьи", 0, Истина);
	Иначе 
		ЗаписатьИЗакрытьЗавершение("", ПараметрыОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрытьЗавершение(Результат, ДопПараметры) Экспорт
	ЭтотОбъект.ОписаниеИзменений = Результат;
	
	ПараметрыЗакрытия = ЗаписатьНаСервере(ДопПараметры.ОсвободитьСтатью);
	ЭтотОбъект.Закрыть(ПараметрыЗакрытия);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьДанныеКартинок(СтатьяБазыЗнаний, СтрокиТаблицы)
	
	Для Каждого СтрокаТаблицы Из СтрокиТаблицы Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.АдресХранилища) Тогда
			Продолжить;
		ИначеЕсли НЕ ЭтоАдресВременногоХранилища(СтрокаТаблицы.АдресХранилища) Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеВременногоХранилища = ПолучитьИзВременногоХранилища(СтрокаТаблицы.АдресХранилища);
		
		МенеджерЗаписи = РегистрыСведений.ХранилищеДанныхБазыЗнаний.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.СтатьяБазыЗнаний = СтатьяБазыЗнаний;
		МенеджерЗаписи.Область			= СтрокаТаблицы.Область;
		МенеджерЗаписи.Идентификатор	= СтрокаТаблицы.ИдентификаторКартинки;
		МенеджерЗаписи.ХранилищеЗначения= Новый ХранилищеЗначения(ДанныеВременногоХранилища);
		МенеджерЗаписи.ВидДанных		= 1;
		МенеджерЗаписи.Размер			= ДанныеВременногоХранилища.Размер();
		МенеджерЗаписи.Записать(Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьДанныеТаблицы(СтатьяБазыЗнаний, СтрокиТаблицы)
	
	Для Каждого СтрокаТаблицы Из СтрокиТаблицы Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.АдресХранилища) Тогда
			Продолжить;
		ИначеЕсли НЕ ЭтоАдресВременногоХранилища(СтрокаТаблицы.АдресХранилища) Тогда
			Продолжить;
		КонецЕсли;
		
		ДанныеВременногоХранилища = ПолучитьИзВременногоХранилища(СтрокаТаблицы.АдресХранилища);
		
		МенеджерЗаписи = РегистрыСведений.ХранилищеДанныхБазыЗнаний.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.СтатьяБазыЗнаний = СтатьяБазыЗнаний;
		МенеджерЗаписи.Область			= СтрокаТаблицы.Область;
		МенеджерЗаписи.Идентификатор	= СтрокаТаблицы.ИдентификаторТаблицы;
		МенеджерЗаписи.ХранилищеЗначения= Новый ХранилищеЗначения(ДанныеВременногоХранилища);
		МенеджерЗаписи.ВидДанных		= 2;
		МенеджерЗаписи.Размер			= 0;
		МенеджерЗаписи.Записать(Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьДанныеКлючевыхСлов()
	
	НаборЗаписей = РегистрыСведений.СвязьКлючевыхСловБазыЗнаний.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.СтатьяБазыЗнаний.Установить(СтатьяБазыЗнаний, Истина);
	НаборЗаписей.Прочитать();
	
	ТегиДоИзменений = НаборЗаписей.ВыгрузитьКолонку("КлючевоеСлово");
	
	// Записываем новые значения ключевых слов
	НаборЗаписей.Очистить();
	Для Каждого СтрокаТаблицы Из ЭтотОбъект.КлючевыеСлова Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Наименование) Тогда
			Продолжить;
		КонецЕсли;
		
		КлючевоеСловоСсылка = СтрокаТаблицы.КлючевоеСлово;
		Если НЕ ЗначениеЗаполнено(КлючевоеСловоСсылка) Тогда
			КлючевоеСловоСсылка = Справочники.КлючевыеСловаБазыЗнаний.ПолучитьКлючевоеСловоПоНаименованию(СтрокаТаблицы.Наименование);
		КонецЕсли;
		
		ЗаписьРегистра = НаборЗаписей.Добавить();
		ЗаписьРегистра.СтатьяБазыЗнаний = СтатьяБазыЗнаний;
		ЗаписьРегистра.КлючевоеСлово	= КлючевоеСловоСсылка;
	КонецЦикла;
	НаборЗаписей.Записать(Истина);
	
	// Добавим в данные обновления старые ключевые слова, для уменьшения статистики
	ТегиПослеИзменений = НаборЗаписей.ВыгрузитьКолонку("КлючевоеСлово");
	Для Каждого КлючевоеСлово Из ТегиДоИзменений Цикл
		Если ТегиПослеИзменений.Найти(КлючевоеСлово) = Неопределено Тогда
			ТегиПослеИзменений.Добавить(КлючевоеСлово);
		КонецЕсли;
	КонецЦикла;
	
	// Обновление рейтинга ключевых слов
	ПараметрыВыполнения = Новый Структура("КлючевыеСлова", ТегиПослеИзменений);
	Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
		ЭтотОбъект.УникальныйИдентификатор,
		"БазаЗнаний.ОбновитьРейтингКлючевыхСлов",
		ПараметрыВыполнения,
		"Обновление рейтинга ключевых слов");
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьСодержаниеВОбъектРекурсивно(ЭлементОбъект, ТаблицаДанных, СтрокиДерева)
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		СтрокиДанных = ТаблицаДанных.НайтиСтроки(Новый Структура("Область", СтрокаДерева.Область));
		Если СтрокиДанных.Количество() > 0 Тогда
			НоваяСтрока = ЭлементОбъект.Содержание.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокиДанных[0]);
		КонецЕсли;
		
		ЗаписатьСодержаниеВОбъектРекурсивно(ЭлементОбъект, ТаблицаДанных, СтрокаДерева.ПолучитьЭлементы());
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗавершитьРедактированиеСтатьиНаСервере(СтатьяБазыЗнаний)
		
	Справочники.СтатьиБазыЗнаний.ЗавершитьРедактированиеСтатьи(СтатьяБазыЗнаний);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьПодразделНаСервере()
	
	Если НЕ ЗначениеЗаполнено(ЭтотОбъект.СтатьяБазыЗнаний) Тогда
		Возврат;
	КонецЕсли;
	
	ЭлементОбъект = ЭтотОбъект.СтатьяБазыЗнаний.ПолучитьОбъект();
	
	// Удаляем картинки
	СтрокиУдаления = ЭлементОбъект.Картинки.НайтиСтроки(Новый Структура("Область", ЭтотОбъект.Область));
	Для Каждого СтрокаТаблицы Из СтрокиУдаления Цикл
		ЭлементОбъект.Картинки.Удалить(СтрокаТаблицы);
	КонецЦикла;
	
	// Удаляем таблицы
	СтрокиУдаления = ЭлементОбъект.Таблицы.НайтиСтроки(Новый Структура("Область", ЭтотОбъект.Область));
	Для Каждого СтрокаТаблицы Из СтрокиУдаления Цикл
		ЭлементОбъект.Таблицы.Удалить(СтрокаТаблицы);
	КонецЦикла;
	
	// Удаляем сноски
	ЭлементОбъект.Сноски.Очистить();
	
	// Находим строку области или создаем новую
	СтрокаОбласти = ЭлементОбъект.Содержание.Найти(ЭтотОбъект.Область, "Область");
	Если СтрокаОбласти = Неопределено Тогда
		СтрокаОбласти = ЭлементОбъект.Содержание.Добавить();
		СтрокаОбласти.Область	= ЭтотОбъект.Область;
	КонецЕсли;
	
	// Устанавливаем все данные
	СтрокаОбласти.Родитель				= ЭтотОбъект.Родитель;
	СтрокаОбласти.Наименование			= ЭтотОбъект.Наименование;
	СтрокаОбласти.Текст					= ЭтотОбъект.Текст;
	СтрокаОбласти.ТекстHTML				= ЭтотОбъект.ТекстHTML;
	СтрокаОбласти.ОписаниеИзменений		= ЭтотОбъект.ОписаниеИзменений;
	СтрокаОбласти.РазрешитьСворачивание	= ЭтотОбъект.РазрешитьСворачивание;
	
	// Картинки
	Для Каждого СтрокаКартинки Из ЭтотОбъект.Картинки Цикл
		НоваяСтрока = ЭлементОбъект.Картинки.Добавить();
		НоваяСтрока.Идентификатор = СтрокаКартинки.ИдентификаторКартинки;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКартинки);
	КонецЦикла;
	
	// Таблицы
	Для Каждого СтрокаТаблицы Из ЭтотОбъект.Таблицы Цикл
		НоваяСтрока = ЭлементОбъект.Таблицы.Добавить();
		НоваяСтрока.Идентификатор = СтрокаТаблицы.ИдентификаторТаблицы;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
	КонецЦикла;
	
	// Сноски
	Для Каждого СтрокаСноски Из ЭтотОбъект.Сноски Цикл
		НоваяСтрока = ЭлементОбъект.Сноски.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСноски);
	КонецЦикла;
	
	// Записываем
	ЭлементОбъект.Записать();
	
	ЗаписатьДанныеКартинок(ЭлементОбъект.Ссылка, ЭтотОбъект.Картинки);
	ЗаписатьДанныеТаблицы(ЭлементОбъект.Ссылка, ЭтотОбъект.Таблицы);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьСтатьюНаСервере(ОсвободитьСтатью)
	
	Если ЗначениеЗаполнено(ЭтотОбъект.СтатьяБазыЗнаний) Тогда
		ЭлементОбъект = ЭтотОбъект.СтатьяБазыЗнаний.ПолучитьОбъект();
	Иначе 
		ЭлементОбъект = Справочники.СтатьиБазыЗнаний.СоздатьЭлемент();
	КонецЕсли;
	
	// Очистка текущих данных
	ЭлементОбъект.Содержание.Очистить();
	ЭлементОбъект.Категории.Очистить();
	ЭлементОбъект.Картинки.Очистить();
	ЭлементОбъект.Таблицы.Очистить();
	ЭлементОбъект.Сноски.Очистить();
	
	// Общие данные
	ЭлементОбъект.Наименование			= ЭтотОбъект.Наименование;
	ЭлементОбъект.Текст					= ЭтотОбъект.Текст;
	ЭлементОбъект.ТекстHTML				= ЭтотОбъект.ТекстHTML;
	ЭлементОбъект.Черновик				= ЭтотОбъект.Черновик;
	ЭлементОбъект.ОписаниеИзменений		= ЭтотОбъект.ОписаниеИзменений;
	ЭлементОбъект.КраткоеОписание		= ЭтотОбъект.КраткоеОписание;
	ЭлементОбъект.ПоложениеСодержания	= ЭтотОбъект.ПоложениеСодержания;
	
	// Содержание
	ЗаписатьСодержаниеВОбъектРекурсивно(ЭлементОбъект, ЭтотОбъект.Содержание, ЭтотОбъект.СодержаниеДерево.ПолучитьЭлементы());
	
	// Категории
	ЭлементОбъект.Категории.Загрузить(ЭтотОбъект.Категории.Выгрузить());
	
	// Картинки
	Для Каждого СтрокаКартинки Из ЭтотОбъект.Картинки Цикл
		НоваяСтрока = ЭлементОбъект.Картинки.Добавить();
		НоваяСтрока.Идентификатор	= СтрокаКартинки.ИдентификаторКартинки;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаКартинки);
	КонецЦикла;
	
	// Таблицы
	Для Каждого СтрокаТаблицы Из ЭтотОбъект.Таблицы Цикл
		НоваяСтрока = ЭлементОбъект.Таблицы.Добавить();
		НоваяСтрока.Идентификатор	= СтрокаТаблицы.ИдентификаторТаблицы;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
	КонецЦикла;
	
	// Сноски
	Для Каждого СтрокаСноски Из ЭтотОбъект.Сноски Цикл
		НоваяСтрока = ЭлементОбъект.Сноски.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСноски);
	КонецЦикла;
	
	// Запись
	ЭлементОбъект.ОсвободитьСтатью	= ОсвободитьСтатью;
	ЭлементОбъект.Записать();
	
	// На всякий случай заменяем текущее значение
	СтатьяБазыЗнаний = ЭлементОбъект.Ссылка;
	
	// Запись в хранилище значений
	ЗаписатьДанныеКартинок(ЭлементОбъект.Ссылка, ЭтотОбъект.Картинки);
	ЗаписатьДанныеТаблицы(ЭлементОбъект.Ссылка, ЭтотОбъект.Таблицы);
	
	// Ключевые слова
	ЗаписатьДанныеКлючевыхСлов();
КонецПроцедуры

&НаСервере
Функция ЗаписатьНаСервере(ОсвободитьСтатью = Ложь) Экспорт
	
	Если ЭтотОбъект.Модифицированность = Ложь Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	УдалитьОформлениеФорматированногоДокумента();
	
	// Реквизит "Текст"
	Текст = ЭтотОбъект.ТекстСтатьи.ПолучитьТекст();
	
	// Реквизит "Текст HTML"
	ЭтотОбъект.ТекстСтатьи.ПолучитьHTML(ТекстHTML, Новый Структура);
	
	ПараметрыЗакрытия = Новый Структура;
	
	Если Параметры.НеВыполнятьЗапись = Истина Тогда // Все передаем в параметры
		ПараметрыЗакрытия.Вставить("Область"				, ЭтотОбъект.Область);
		ПараметрыЗакрытия.Вставить("Родитель"				, ЭтотОбъект.Родитель);
		ПараметрыЗакрытия.Вставить("Наименование"			, ЭтотОбъект.Наименование);
		ПараметрыЗакрытия.Вставить("Текст"					, ЭтотОбъект.Текст);
		ПараметрыЗакрытия.Вставить("ТекстHTML"				, ЭтотОбъект.ТекстHTML);
		ПараметрыЗакрытия.Вставить("РазрешитьСворачивание"	, ЭтотОбъект.РазрешитьСворачивание);
		ПараметрыЗакрытия.Вставить("Картинки"				, ПолучитьМассивСтруктурКартинки(ЭтотОбъект.Картинки));
		ПараметрыЗакрытия.Вставить("Таблицы"				, ПолучитьМассивСтруктурТаблицы(ЭтотОбъект.Таблицы));
		ПараметрыЗакрытия.Вставить("Сноски"					, ОбщегоНазначения.ТаблицаЗначенийВМассив(ЭтотОбъект.Сноски.Выгрузить()));
	Иначе 
		Если ЭтоПодраздел Тогда
			ЗаписатьПодразделНаСервере();
		Иначе 
			ЗаписатьСтатьюНаСервере(ОсвободитьСтатью);
		КонецЕсли;
	КонецЕсли;
	
	ВыполнитьОформлениеФорматированногоДокумента();
	
	ЭтаФорма.Модифицированность = Ложь;
	
	Возврат ПараметрыЗакрытия;
		
КонецФункции

// Работа с разделами

&НаКлиенте
Процедура ОткрытьРазделСтатьи(знач ИдентификаторРаздела)
	
	Если ИдентификаторРаздела = Неопределено Тогда
		ИдентификаторРаздела = Строка(Новый УникальныйИдентификатор);
	КонецЕсли;
	
	ПараметрыФормы	= ПолучитьПараметрыФормыПодраздела(ИдентификаторРаздела);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОкончанииРедактированияПодраздела", ЭтотОбъект, ПараметрыФормы);
	
	ОткрытьФорму("Справочник.СтатьиБазыЗнаний.Форма.РедактированиеСтатьи", ПараметрыФормы, ЭтотОбъект, , , , ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура РекурсивноЗаполнитьМассивИзСодержания(Массив, СтрокиДерева, Уровень, ОбластьИсключение)
	
	Для Каждого СтрокаДерева Из СтрокиДерева Цикл
		Если СтрокаДерева.Область = ОбластьИсключение Тогда
			Продолжить;
		КонецЕсли;
		
		ОбластьСтроки = СтрокаДерева.Область;
		
		СтрокиДанных = ЭтотОбъект.Содержание.НайтиСтроки(Новый Структура("Область", ОбластьСтроки));
		Если СтрокиДанных.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Структура = Новый Структура("НомерСтроки, Область, Наименование, Уровень",
			Массив.Количество() + 1,
			СтрокиДанных[0].Область,
			СтрокиДанных[0].Наименование,
			Уровень + 1);
		
		Массив.Добавить(Структура);
		
		РекурсивноЗаполнитьМассивИзСодержания(Массив, СтрокаДерева.ПолучитьЭлементы(), Уровень + 1, ОбластьИсключение);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РекурсивноЗаполнитьПодчиненныеОбласти(Массив, ОбластьРодитель)
	
	МассивСтрок = Содержание.НайтиСтроки(Новый Структура("Родитель", ОбластьРодитель));
	Для Каждого СтрокаДерева Из МассивСтрок Цикл
		Массив.Добавить(СтрокаДерева.Область);
		
		РекурсивноЗаполнитьПодчиненныеОбласти(Массив, СтрокаДерева.Область);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПараметрыФормыПодраздела(ТекущаяОбласть)
	
	ТекСодержание = Новый Массив;
	РекурсивноЗаполнитьМассивИзСодержания(ТекСодержание, СодержаниеДерево.ПолучитьЭлементы(), 0, ТекущаяОбласть);
	
	// Содержание
	СтрокиСодержание = ЭтотОбъект.Содержание.НайтиСтроки(Новый Структура("Область", ТекущаяОбласть));
	Если СтрокиСодержание.Количество() = 0 Тогда
		_Наименование	= "";
		_Родитель		= "";
		_Текст			= "";
		_ТекстHTML		= "";
		_Сворачивать	= Ложь;
	Иначе 
		_Наименование	= СтрокиСодержание[0].Наименование;
		_Родитель		= СтрокиСодержание[0].Родитель;
		_Текст			= СтрокиСодержание[0].Текст;
		_ТекстHTML		= СтрокиСодержание[0].ТекстHTML;
		_Сворачивать	= СтрокиСодержание[0].РазрешитьСворачивание;
	КонецЕсли;
	
	// Картинки
	СтрокиКартинки	= ЭтотОбъект.Картинки.НайтиСтроки(Новый Структура("Область", ТекущаяОбласть));
	КартинкиОбласти	= ПолучитьМассивСтруктурКартинки(СтрокиКартинки);
	
	// Таблицы
	СтрокиТаблицы	= ЭтотОбъект.Таблицы.НайтиСтроки(Новый Структура("Область", ТекущаяОбласть));
	ТаблицыОбласти	= ПолучитьМассивСтруктурТаблицы(СтрокиТаблицы);
	
	// Сноски
	МассивСноски	= Новый Массив;
	Для Каждого СтрокаСноски Из ЭтотОбъект.Сноски Цикл
		СтруктураСноски = Новый Структура("Идентификатор, Группа, Наименование, ГиперссылкаТип, ГиперссылкаАдрес, ГиперссылкаОткрывать, ГиперссылкаПодсказка");
		ЗаполнитьЗначенияСвойств(СтруктураСноски, СтрокаСноски);
		
		МассивСноски.Добавить(Новый ФиксированнаяСтруктура(СтруктураСноски));
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Идентификатор"			, ЭтотОбъект.Идентификатор);
	ПараметрыФормы.Вставить("Ключ"					, ЭтотОбъект.СтатьяБазыЗнаний);
	ПараметрыФормы.Вставить("Область"				, ТекущаяОбласть);
	ПараметрыФормы.Вставить("Идентификатор"			, ЭтотОбъект.Идентификатор);
	ПараметрыФормы.Вставить("Идентификатор"			, ЭтотОбъект.Идентификатор);
	ПараметрыФормы.Вставить("Содержание"			, Новый ФиксированныйМассив(ТекСодержание));
	ПараметрыФормы.Вставить("Родитель"				, _Родитель);
	ПараметрыФормы.Вставить("Наименование"			, _Наименование);
	ПараметрыФормы.Вставить("Текст"					, _Текст);
	ПараметрыФормы.Вставить("ТекстHTML"				, _ТекстHTML);
	ПараметрыФормы.Вставить("РазрешитьСворачивание"	, _Сворачивать);
	ПараметрыФормы.Вставить("ОписаниеИзменений"		, ЭтотОбъект.ОписаниеИзменений);
	ПараметрыФормы.Вставить("Картинки"				, Новый ФиксированныйМассив(КартинкиОбласти));
	ПараметрыФормы.Вставить("Таблицы"				, Новый ФиксированныйМассив(ТаблицыОбласти));
	ПараметрыФормы.Вставить("Сноски"				, Новый ФиксированныйМассив(МассивСноски));
	ПараметрыФормы.Вставить("НеВыполнятьЗапись"		, Истина);
	ПараметрыФормы.Вставить("ЗаполнитьИзПараметров"	, Истина);
	
	Возврат ПараметрыФормы;
	
КонецФункции

&НаКлиенте
Процедура ПриОкончанииРедактированияПодраздела(Результат, ДопПараметры) Экспорт 
	
	Если НЕ ТипЗнч(Результат) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура("Область", Результат.Область);
	
	// Содержание
	СтрокиСодержания = ЭтотОбъект.Содержание.НайтиСтроки(СтруктураОтбора);
	Если СтрокиСодержания.Количество() = 0 Тогда
		СтрокаОбласти = ЭтотОбъект.Содержание.Добавить();
		СтрокаОбласти.Область = Результат.Область;
	Иначе 
		СтрокаОбласти = СтрокиСодержания[0];
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(СтрокаОбласти, Результат, , "Область");
	
	// Представление родителя
	СтрокиРодитель = ЭтотОбъект.Содержание.НайтиСтроки(Новый Структура("Область", Результат.Родитель));
	Если СтрокиРодитель.Количество() > 0 Тогда
		СтрокаОбласти.РодительПредставление = СтрокиРодитель[0].Наименование;
		СтрокаОбласти.Уровень				= СтрокиРодитель[0].Уровень + 1;
	Иначе 
		СтрокаОбласти.РодительПредставление	= "";
		СтрокаОбласти.Уровень				= 1;
	КонецЕсли;
	
	// Картинки
	СтрокиКартинки = ЭтотОбъект.Картинки.НайтиСтроки(СтруктураОтбора);
	Для Каждого СтрокаКартинки Из СтрокиКартинки Цикл
		ЭтотОбъект.Картинки.Удалить(СтрокаКартинки);
	КонецЦикла;
	Для Каждого СтруктураКартинки Из Результат.Картинки Цикл
		НоваяСтрока = ЭтотОбъект.Картинки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураКартинки);
	КонецЦикла;
	
	// Таблицы
	СтрокиТаблицы = ЭтотОбъект.Таблицы.НайтиСтроки(СтруктураОтбора);
	Для Каждого СтрокаТаблицы Из СтрокиТаблицы Цикл
		ЭтотОбъект.Таблицы.Удалить(СтрокаТаблицы);
	КонецЦикла;
	Для Каждого СтруктураТаблицы Из Результат.Таблицы Цикл
		НоваяСтрока = ЭтотОбъект.Таблицы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураТаблицы);
	КонецЦикла;
	
	// Сноски
	ЭтотОбъект.Сноски.Очистить();
	Для Каждого СтруктураСноски Из Результат.Сноски Цикл
		ЗаполнитьЗначенияСвойств(ЭтотОбъект.Сноски.Добавить(), СтруктураСноски);
	КонецЦикла;
	
	ПостроитьДеревоСодержаниеНаСервере();
	
	// Разворачиваем дерево
	Для Каждого ЭлементДерева Из ЭтотОбъект.СодержаниеДерево.ПолучитьЭлементы() Цикл
		Элементы.СодержаниеДерево.Развернуть(ЭлементДерева.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	
	ЭтотОбъект.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриУдаленииУзлаСодержания(Результат, ДопПараметры) Экспорт 
	
	Если НЕ Результат = КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ДопПараметры.Свойство("Область") Тогда
		Возврат;
	КонецЕсли;
	
	МассивОбластей = Новый Массив;
	РекурсивноЗаполнитьПодчиненныеОбласти(МассивОбластей, ДопПараметры.Область);
	
	Для Каждого ИмяОбласти Из МассивОбластей Цикл
		
		СтруктураОтбора = Новый Структура("Область", ИмяОбласти);
		
		// Удалим картинки
		СтрокиКартинки = ЭтотОбъект.Картинки.НайтиСтроки(СтруктураОтбора);
		Для Каждого СтрокаТаблицы Из СтрокиКартинки Цикл
			ЭтотОбъект.Картинки.Удалить(СтрокаТаблицы);
		КонецЦикла;
		
		// Удалим таблицы
		СтрокиТаблицы = ЭтотОбъект.Таблицы.НайтиСтроки(СтруктураОтбора);
		Для Каждого СтрокаТаблицы Из СтрокиТаблицы Цикл
			ЭтотОбъект.Таблицы.Удалить(СтрокаТаблицы);
		КонецЦикла;
		
		// Удалим содержание
		СтрокиСодержания = ЭтотОбъект.Содержание.НайтиСтроки(СтруктураОтбора);
		Для Каждого СтрокаТаблицы Из СтрокиСодержания Цикл
			ЭтотОбъект.Содержание.Удалить(СтрокаТаблицы);
		КонецЦикла;
		
	КонецЦикла;
	
	ПостроитьДеревоСодержаниеНаСервере();
	
	ЭтотОбъект.Модифицированность = Истина;
	
КонецПроцедуры

// Работа со сносками

&НаКлиенте
Процедура ВыполнитьВставитьСноску(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	МассивСноски = Новый Массив;
	Для Каждого СтрокаТаблицы Из ЭтотОбъект.Сноски Цикл
		СтруктураСноски = Новый Структура("Идентификатор, Группа, Наименование, ГиперссылкаТип, ГиперссылкаАдрес, ГиперссылкаОткрывать, ГиперссылкаПодсказка");
		ЗаполнитьЗначенияСвойств(СтруктураСноски, СтрокаТаблицы);
		
		МассивСноски.Добавить(Новый ФиксированнаяСтруктура(СтруктураСноски));
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Гиперссылка"	, ДопПараметры.Гиперссылка);
	ПараметрыФормы.Вставить("Текст"			, ДопПараметры.Текст);
	ПараметрыФормы.Вставить("Сноски"		, Новый ФиксированныйМассив(МассивСноски));
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОкончанииРедактированияСноски", ЭтотОбъект, ДопПараметры);
	
	ОткрытьФорму("Справочник.СтатьиБазыЗнаний.Форма.РедактированиеСноски",
		ПараметрыФормы,
		ЭтотОбъект, , , ,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ПриОкончанииРедактированияСноски(Результат, ДопПараметры) Экспорт 
	
	Если НЕ ТипЗнч(Результат) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ДопПараметры.Текст) Тогда
		ТекстСтатьи.Удалить(ДопПараметры.Начало, ДопПараметры.Конец);
	КонецЕсли;

	ИдентификаторСноски	= Результат.Идентификатор;
	СтрокиСноски		= ЭтотОбъект.Сноски.НайтиСтроки(Новый Структура("Идентификатор", ИдентификаторСноски));
	Если СтрокиСноски.Количество() = 0 Тогда
		СтрокаСноски = ЭтотОбъект.Сноски.Добавить();
	Иначе 
		СтрокаСноски = СтрокиСноски[0];
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(СтрокаСноски, Результат);
	
	Если НЕ ПустаяСтрока(ДопПараметры.Текст) Тогда
		ТекстСтатьи.Удалить(ДопПараметры.Начало, ДопПараметры.Конец);
	КонецЕсли;
	
	РезультатВставки = ТекстСтатьи.Вставить(ДопПараметры.Начало, ИдентификаторСноски);
	РезультатВставки.ЦветТекста				= WebЦвета.Синий;
	РезультатВставки.НавигационнаяСсылка	= "ref:" + ИдентификаторСноски;
	
	НачалоВыделения	= РезультатВставки.ЗакладкаНачала;
	
	РезультатВставки = ТекстСтатьи.Вставить(РезультатВставки.ЗакладкаКонца, " ");
	РезультатВставки.НавигационнаяСсылка	= "";
	РезультатВставки.ЦветТекста				= Элементы.ТекстСтатьи.ЦветТекста;
	
	Элементы.ТекстСтатьи.УстановитьГраницыВыделения(НачалоВыделения, РезультатВставки.ЗакладкаКонца);
	
	Если Результат.Модифицированность Тогда
		ЭтотОбъект.Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Работа с гиперссылками

&НаКлиенте
Процедура ВыполнитьВставитьГиперссылку(Результат, ДопПараметры) Экспорт 
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеСсылки = БазаЗнанийКлиентСервер.ПолучитьСтруктуруСсылкиПоАдресу(ДопПараметры.Гиперссылка);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Гиперссылка"	, ДопПараметры.Гиперссылка);
	ПараметрыФормы.Вставить("Текст"			, ДопПараметры.Текст);
	ПараметрыФормы.Вставить("ОписаниеСсылки", Новый ФиксированнаяСтруктура(ОписаниеСсылки));
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОкончанииРедактированияГиперссылки", ЭтотОбъект, ДопПараметры);
	
	ОткрытьФорму("Справочник.СтатьиБазыЗнаний.Форма.РедактированиеГиперссылки",
		ПараметрыФормы,
		ЭтотОбъект, , , ,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ПриОкончанииРедактированияГиперссылки(Результат, ДопПараметры) Экспорт 
	
	Если НЕ ТипЗнч(Результат) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ДопПараметры.Текст) Тогда
		ТекстСтатьи.Удалить(ДопПараметры.Начало, ДопПараметры.Конец);
	КонецЕсли;
	
	Если Результат.Удалить Тогда
		НавигационнаяСсылка = "";
	Иначе 
		НавигационнаяСсылка = БазаЗнанийКлиентСервер.ПолучитьАдресСсылкиПоСтруктуре(Результат);
	КонецЕсли;
	
	РезультатВставки = ТекстСтатьи.Вставить(ДопПараметры.Начало, Результат.Представление);
	РезультатВставки.НавигационнаяСсылка = НавигационнаяСсылка;
	Если ПустаяСтрока(НавигационнаяСсылка) Тогда
		РезультатВставки.ЦветТекста = Элементы.ТекстСтатьи.ЦветТекста;
	Иначе 
		РезультатВставки.ЦветТекста = WebЦвета.Синий;
	КонецЕсли;
	
	НачалоВыделения	= РезультатВставки.ЗакладкаНачала;
	
	РезультатВставки = ТекстСтатьи.Вставить(РезультатВставки.ЗакладкаКонца, " ");
	РезультатВставки.НавигационнаяСсылка	= "";
	РезультатВставки.ЦветТекста				= Элементы.ТекстСтатьи.ЦветТекста;
	
	Элементы.ТекстСтатьи.УстановитьГраницыВыделения(НачалоВыделения, РезультатВставки.ЗакладкаКонца);
	
	Если Результат.Модифицированность Тогда
		ЭтотОбъект.Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Работа с картинками

&НаКлиенте
Процедура ВыполнитьВставитьКартинку(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКартинки	= ДопПараметры.ИмяКартинки;
	
	МассивИмена = Новый Массив;
	Для Каждого СтрокаТаблицы Из ЭтотОбъект.Картинки Цикл
		Если СтрокаТаблицы.Имя = ИмяКартинки Тогда
			Продолжить;
		КонецЕсли;
		
		МассивИмена.Добавить(СтрокаТаблицы.Имя);
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ИдентификаторКартинки"	, "");
	ПараметрыФормы.Вставить("Идентификатор"			, ЭтотОбъект.Идентификатор);
	ПараметрыФормы.Вставить("АдресХранилища"		, "");
	ПараметрыФормы.Вставить("Имя"					, ИмяКартинки);
	ПараметрыФормы.Вставить("Подпись"				, "");
	ПараметрыФормы.Вставить("Выравнивание"			, 0);
	ПараметрыФормы.Вставить("Граница"				, 0);
	ПараметрыФормы.Вставить("Высота"				, 200);
	ПараметрыФормы.Вставить("Подсказка"				, "");
	ПараметрыФормы.Вставить("Имена"					, Новый ФиксированныйМассив(МассивИмена));
	
	Если ЗначениеЗаполнено(ИмяКартинки) Тогда
		МассивСтроки = ЭтотОбъект.Картинки.НайтиСтроки(Новый Структура("Область, Имя", ЭтотОбъект.Область, ИмяКартинки));
		Если МассивСтроки.Количество() > 0 Тогда
			СтрокаКартинки = МассивСтроки[0];
			
			Если ПустаяСтрока(СтрокаКартинки.АдресХранилища) Тогда
				СтрокаКартинки.АдресХранилища =
					ПолучитьАдресХранилищаКартинкиНаСервере(
						ЭтотОбъект.Идентификатор,
						ЭтотОбъект.СтатьяБазыЗнаний,
						ЭтотОбъект.Область,
						СтрокаКартинки.ИдентификаторКартинки);
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(ПараметрыФормы, СтрокаКартинки);
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыФормы.ИдентификаторКартинки) Тогда
		ПараметрыФормы.ИдентификаторКартинки = Строка(Новый УникальныйИдентификатор);
	КонецЕсли;
	
	ДопПараметры.Вставить("ИдентификаторКартинки", ПараметрыФормы.ИдентификаторКартинки);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОкончанииРедактированияКартинки", ЭтотОбъект, ДопПараметры);
	
	ОткрытьФорму("Справочник.СтатьиБазыЗнаний.Форма.РедактированиеКартинки",
		ПараметрыФормы,
		ЭтотОбъект, , , ,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ПриОкончанииРедактированияКартинки(Результат, ДопПараметры) Экспорт
	
	Если НЕ ТипЗнч(Результат) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	Если НЕ Результат.Свойство("Имя") Тогда
		Возврат;
	КонецЕсли;
	
	МассивСтрок = ЭтотОбъект.Картинки.НайтиСтроки(Новый Структура("ИдентификаторКартинки", ДопПараметры.ИдентификаторКартинки));
	Если МассивСтрок.Количество() > 0 Тогда
		СтрокаТаблицы = МассивСтрок[0];
	Иначе 
		СтрокаТаблицы = ЭтотОбъект.Картинки.Добавить();
		СтрокаТаблицы.Область				= ЭтотОбъект.Область;
		СтрокаТаблицы.ИдентификаторКартинки	= ДопПараметры.ИдентификаторКартинки;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Результат);
	
	ТекстПодстановки = "[picture='" + Результат.Имя + "']";
	
	Если БазаЗнанийКлиентСервер.ЭтоСтрокаКартинки(ДопПараметры.Текст) Тогда
		ТекстСтатьи.Удалить(ДопПараметры.Начало, ДопПараметры.Конец);
	КонецЕсли;
	
	РезультатВставки = ТекстСтатьи.Вставить(ДопПараметры.Начало, ТекстПодстановки);
	РезультатВставки.ЦветФона = WebЦвета.БледноЗеленый;
	
	НачалоВыделения	= РезультатВставки.ЗакладкаНачала;
	
	РезультатВставки = ТекстСтатьи.Вставить(РезультатВставки.ЗакладкаКонца, " ");
	РезультатВставки.ЦветФона = Элементы.ТекстСтатьи.ЦветФона;
	
	Элементы.ТекстСтатьи.УстановитьГраницыВыделения(НачалоВыделения, РезультатВставки.ЗакладкаКонца);
	
	Если Результат.Модифицированность Тогда
		ЭтотОбъект.Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры	

&НаСервереБезКонтекста
Функция ПолучитьАдресХранилищаКартинкиНаСервере(ИдентификаторФормы, СтатьяБазыЗнаний, Область, Идентификатор)
	
	ЗначениеВХранилище = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СтатьяБазыЗнаний", СтатьяБазыЗнаний);
	Запрос.УстановитьПараметр("Область"			, Область);
	Запрос.УстановитьПараметр("Идентификатор"	, Идентификатор);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХранилищеДанныхБазыЗнаний.ХранилищеЗначения
	|ИЗ
	|	РегистрСведений.ХранилищеДанныхБазыЗнаний КАК ХранилищеДанныхБазыЗнаний
	|ГДЕ
	|	ХранилищеДанныхБазыЗнаний.СтатьяБазыЗнаний = &СтатьяБазыЗнаний
	|	И ХранилищеДанныхБазыЗнаний.Область = &Область
	|	И ХранилищеДанныхБазыЗнаний.Идентификатор = &Идентификатор";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗначениеВХранилище = Выборка.ХранилищеЗначения.Получить();
	КонецЕсли;
	
	АдресХранилища = ПоместитьВоВременноеХранилище(ЗначениеВХранилище, ИдентификаторФормы);
	
	Возврат АдресХранилища;
	
КонецФункции

// Работа с таблицами

&НаКлиенте
Процедура ВыполнитьВставитьТаблицу(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ИмяТаблицы		= ДопПараметры.ИмяТаблицы;
	
	МассивИмена = Новый Массив;
	Для Каждого СтрокаТаблицы Из ЭтотОбъект.Таблицы Цикл
		Если СтрокаТаблицы.Имя = ИмяТаблицы Тогда
			Продолжить;
		КонецЕсли;
		
		МассивИмена.Добавить(СтрокаТаблицы.Имя);
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ИдентификаторТаблицы"	, "");
	ПараметрыФормы.Вставить("Идентификатор"			, ЭтотОбъект.Идентификатор);
	ПараметрыФормы.Вставить("АдресХранилища"		, "");
	ПараметрыФормы.Вставить("Имя"					, ИмяТаблицы);
	ПараметрыФормы.Вставить("Подпись"				, "");
	ПараметрыФормы.Вставить("Выравнивание"			, 0);
	ПараметрыФормы.Вставить("Имена"					, Новый ФиксированныйМассив(МассивИмена));
	
	Если ЗначениеЗаполнено(ИмяТаблицы) Тогда
		МассивСтроки = ЭтотОбъект.Таблицы.НайтиСтроки(Новый Структура("Область, Имя", ЭтотОбъект.Область, ИмяТаблицы));
		Если МассивСтроки.Количество() > 0 Тогда
			СтрокаТаблицы = МассивСтроки[0];
			
			Если ПустаяСтрока(СтрокаТаблицы.АдресХранилища) Тогда
				СтрокаТаблицы.АдресХранилища =
					ПолучитьАдресХранилищаТаблицыНаСервере(
						ЭтотОбъект.Идентификатор,
						ЭтотОбъект.СтатьяБазыЗнаний,
						ЭтотОбъект.Область,
						СтрокаТаблицы.ИдентификаторТаблицы);
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(ПараметрыФормы, СтрокаТаблицы);
		КонецЕсли;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ПараметрыФормы.ИдентификаторТаблицы) Тогда
		ПараметрыФормы.ИдентификаторТаблицы = Строка(Новый УникальныйИдентификатор);
	КонецЕсли;
		
	ДопПараметры.Вставить("ИдентификаторТаблицы", ПараметрыФормы.ИдентификаторТаблицы);
	ОписаниеОповещения = Новый ОписаниеОповещения("ПриОкончанииРедактированияТаблицы", ЭтотОбъект, ДопПараметры);
	
	ОткрытьФорму("Справочник.СтатьиБазыЗнаний.Форма.РедактированиеТаблицы",
		ПараметрыФормы,
		ЭтотОбъект, , , ,
		ОписаниеОповещения,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ПриОкончанииРедактированияТаблицы(Результат, ДопПараметры) Экспорт
	
	Если НЕ ТипЗнч(Результат) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	Если НЕ Результат.Свойство("Имя") Тогда
		Возврат;
	КонецЕсли;
	
	МассивСтрок = ЭтотОбъект.Таблицы.НайтиСтроки(Новый Структура("ИдентификаторТаблицы", ДопПараметры.ИдентификаторТаблицы));
	Если МассивСтрок.Количество() > 0 Тогда
		СтрокаТаблицы = МассивСтрок[0];
	Иначе 
		СтрокаТаблицы = ЭтотОбъект.Таблицы.Добавить();
		СтрокаТаблицы.Область				= ЭтотОбъект.Область;
		СтрокаТаблицы.ИдентификаторТаблицы	= ДопПараметры.ИдентификаторТаблицы;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Результат);
	
	ТекстПодстановки = "[table='" + Результат.Имя + "']";
	
	Если БазаЗнанийКлиентСервер.ЭтоСтрокаТаблицы(ДопПараметры.Текст) Тогда
		ТекстСтатьи.Удалить(ДопПараметры.Начало, ДопПараметры.Конец);
	КонецЕсли;
	
	РезультатВставки = ТекстСтатьи.Вставить(ДопПараметры.Начало, ТекстПодстановки);
	РезультатВставки.ЦветФона = WebЦвета.БледноСиреневый;
	
	НачалоВыделения	= РезультатВставки.ЗакладкаНачала;
	
	РезультатВставки = ТекстСтатьи.Вставить(РезультатВставки.ЗакладкаКонца, " ");
	РезультатВставки.ЦветФона = Элементы.ТекстСтатьи.ЦветФона;
	
	Элементы.ТекстСтатьи.УстановитьГраницыВыделения(НачалоВыделения, РезультатВставки.ЗакладкаКонца);
	
	Если Результат.Модифицированность Тогда
		ЭтотОбъект.Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры	

&НаСервереБезКонтекста
Функция ПолучитьАдресХранилищаТаблицыНаСервере(ИдентификаторФормы, СтатьяБазыЗнаний, Область, Идентификатор)
	
	ЗначениеВХранилище = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СтатьяБазыЗнаний", СтатьяБазыЗнаний);
	Запрос.УстановитьПараметр("Область"			, Область);
	Запрос.УстановитьПараметр("Идентификатор"	, Идентификатор);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ХранилищеДанныхБазыЗнаний.ХранилищеЗначения
	|ИЗ
	|	РегистрСведений.ХранилищеДанныхБазыЗнаний КАК ХранилищеДанныхБазыЗнаний
	|ГДЕ
	|	ХранилищеДанныхБазыЗнаний.СтатьяБазыЗнаний = &СтатьяБазыЗнаний
	|	И ХранилищеДанныхБазыЗнаний.Область = &Область
	|	И ХранилищеДанныхБазыЗнаний.Идентификатор = &Идентификатор";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗначениеВХранилище = Выборка.ХранилищеЗначения.Получить();
	КонецЕсли;
	
	АдресХранилища = ПоместитьВоВременноеХранилище(ЗначениеВХранилище, ИдентификаторФормы);
	
	Возврат АдресХранилища;
	
КонецФункции

// Работа с тегами

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьПредставлениеСпискаТегов(ТаблицаТегов)

	Представление = "";
	Для Каждого СтрокаТаблицы Из ТаблицаТегов Цикл
		Представление = Представление + СтрокаТаблицы.Наименование + ", ";
	КонецЦикла;

	Возврат Представление;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДанныеВыбораДляКлючевогоПоля(Текст, ИндексВСписке)
	
	ВозвращаемыйСписок = Новый СписокЗначений;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
	|	КлючевыеСловаБазыЗнаний.Ссылка КАК Тег,
	|	ПРЕДСТАВЛЕНИЕ(КлючевыеСловаБазыЗнаний.Ссылка) КАК Представление,
	|	ЕСТЬNULL(РейтингКлючевыхСловБазыЗнаний.Количество, 0) КАК Рейтинг
	|ИЗ
	|	Справочник.КлючевыеСловаБазыЗнаний КАК КлючевыеСловаБазыЗнаний
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РейтингКлючевыхСловБазыЗнаний КАК РейтингКлючевыхСловБазыЗнаний
	|		ПО КлючевыеСловаБазыЗнаний.Ссылка = РейтингКлючевыхСловБазыЗнаний.КлючевоеСлово
	|			И (РейтингКлючевыхСловБазыЗнаний.КатегорияБазыЗнаний = ЗНАЧЕНИЕ(Справочник.КатегорииБазыЗнаний.ПустаяСсылка))
	|ГДЕ
	|	КлючевыеСловаБазыЗнаний.Наименование >= &ВведеннаяСтрока
	|	И ПОДСТРОКА(КлючевыеСловаБазыЗнаний.Наименование, 1, 500) = &ВведеннаяСтрока
	|
	|УПОРЯДОЧИТЬ ПО
	|	КлючевыеСловаБазыЗнаний.Наименование,
	|	Рейтинг";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "500", Формат(СтрДлина(Текст), "ЧГ="));
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ВведеннаяСтрока", Текст);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат ВозвращаемыйСписок;
	КонецЕсли;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ЗначениеВыбора = Новый Структура;
		ЗначениеВыбора.Вставить("КлючевоеСлово"			, Выборка.Тег);
		ЗначениеВыбора.Вставить("Наименование"			, Выборка.Представление);
		ЗначениеВыбора.Вставить("Рейтинг"				, Выборка.Рейтинг);
		ЗначениеВыбора.Вставить("ИндексВСпискеТегов"	, ИндексВСписке);
		
		ВозвращаемыйСписок.Добавить(ЗначениеВыбора,
			ЗначениеВыбора.Наименование + " (" + Формат(ЗначениеВыбора.Рейтинг, "ЧН=0; ЧГ=") + ")");
		
	КонецЦикла;
	
	Возврат ВозвращаемыйСписок;
	
КонецФункции

&НаСервереБезКонтекста
Функция РазобратьСтрокуСТегами(СтрокаТегов)
	
	МассивТегов		= СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(СтрокаТегов, ",");
	Соответствие	= Новый Соответствие;
	Для Каждого ЗначениеМассива Из МассивТегов Цикл
		Соответствие.Вставить(НРег(ЗначениеМассива), Новый Структура("Ссылка, Наименование", Неопределено, ЗначениеМассива));
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивНаименований", МассивТегов);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КлючевыеСловаБазыЗнаний.Ссылка,
	|	КлючевыеСловаБазыЗнаний.Наименование
	|ИЗ
	|	Справочник.КлючевыеСловаБазыЗнаний КАК КлючевыеСловаБазыЗнаний
	|ГДЕ
	|	КлючевыеСловаБазыЗнаний.Наименование В(&МассивНаименований)
	|	И НЕ КлючевыеСловаБазыЗнаний.ПометкаУдаления";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ЗначениеПоиска = НРег(Выборка.Наименование);
		
		Структура = Соответствие.Получить(ЗначениеПоиска);
		Если Структура = Неопределено Тогда
			Структура = Новый Структура("Ссылка, Наименование");
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(Структура, Выборка);
		
		Соответствие.Вставить(ЗначениеПоиска, Структура);
	КонецЦикла;
	
	Возврат Соответствие;
	
КонецФункции

&НаСервере
Процедура ПреобразоватьТегиВКлючевыеСлова()
	
	ЭтотОбъект.КлючевыеСлова.Очистить();
	Если ПустаяСтрока(ЭтотОбъект.КлючевыеСловаСтрока) Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		Результат = РазобратьСтрокуСТегами(ЭтотОбъект.КлючевыеСловаСтрока);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()), , "КлючевыеСловаСтрока");
		Возврат;
	КонецПопытки;
	
	Если Результат.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из Результат Цикл
		ЭлементМассива = КлючИЗначение.Значение;
		
		НоваяСтрока = ЭтотОбъект.КлючевыеСлова.Добавить();
		НоваяСтрока.КлючевоеСлово		= ЭлементМассива.Ссылка;
		НоваяСтрока.Наименование		= ЭлементМассива.Наименование;
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоместитьНайденныйТегВСписок(ДанныеТега, ИндексВСписке)

	Модифицированность = Истина;
	
	Если ЭтотОбъект.КлючевыеСлова.Количество() > ИндексВСписке Тогда
		СтрокаАдресата = ЭтотОбъект.КлючевыеСлова[ИндексВСписке];
	Иначе
		СтрокаАдресата = ЭтотОбъект.КлючевыеСлова.Добавить();
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(СтрокаАдресата, ДанныеТега);
	
	ЭтотОбъект.КлючевыеСловаСтрока = ПолучитьПредставлениеСпискаТегов(ЭтотОбъект.КлючевыеСлова);

КонецПроцедуры
