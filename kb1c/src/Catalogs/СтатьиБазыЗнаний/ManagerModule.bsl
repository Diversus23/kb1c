// Обработка и преобразование табличного документа в HTML

Функция ПолучитьДанныеОписанияСтилей(ТаблицаСтилей)
	
	Соответствие = Новый Соответствие;
	
	ОстатокОписания = ТаблицаСтилей;
	НачалоОписания	= Найти(ОстатокОписания, "{");
	Пока НачалоОписания > 0 Цикл
		КонецОписания = Найти(ОстатокОписания, "}");
		
		ИмяОписания		= Лев(ОстатокОписания, НачалоОписания - 1);
		ТекстОписания	= Сред(ОстатокОписания, НачалоОписания + 1, КонецОписания - НачалоОписания - 1);
		
		Соответствие.Вставить(СокрЛП(ИмяОписания), СокрЛП(ТекстОписания));
		
		ОстатокОписания = Сред(ОстатокОписания, КонецОписания + 1);
		ОстатокОписания = СокрЛП(ОстатокОписания);
		НачалоОписания	= Найти(ОстатокОписания, "{");
	КонецЦикла;
	
	Возврат Соответствие;
	
КонецФункции

Процедура ИсключитьИзОписанияСтиляПозицию(ТекстОписания, ИмяПозиции)
	ПозицияНачало	= Найти(ТекстОписания, ИмяПозиции);
	Если ПозицияНачало > 0 Тогда
		ОстатокОписания	= Сред(ТекстОписания, ПозицияНачало);
		ЧислоСимволов	= Найти(ОстатокОписания, ";");
		
		ТекстОписания = Лев(ТекстОписания, ПозицияНачало - 1) + Сред(ТекстОписания, ПозицияНачало + ЧислоСимволов + 1);
	КонецЕсли;
КонецПроцедуры

Процедура ЗаменитьИмяСтиляНаОписание(НРегТекстТаблицы, ТекстТаблицы, ИмяКласса, Описание)
	
	МассивОкончаний = Новый Массив;
	МассивОкончаний.Добавить(" ");
	МассивОкончаний.Добавить(">");
	
	Для Каждого Окончание Из МассивОкончаний Цикл
		
		КлючПоиска = "class=" + ИмяКласса + Окончание;
		ДлинаКлюча = СтрДлина(КлючПоиска);
		
		НачалоСтроки = Найти(НРегТекстТаблицы, КлючПоиска);
		Пока НачалоСтроки > 0 Цикл
			НРегТекстТаблицы = 
				Лев(НРегТекстТаблицы, НачалоСтроки - 1) + 
				"style='" + Описание + "'" + 
				Сред(НРегТекстТаблицы, НачалоСтроки + ДлинаКлюча - 1);
			
			ТекстТаблицы = 
				Лев(ТекстТаблицы, НачалоСтроки - 1) + 
				"style='" + Описание + "'" + 
				Сред(ТекстТаблицы, НачалоСтроки + ДлинаКлюча - 1);
			
			НачалоСтроки = Найти(НРегТекстТаблицы, КлючПоиска);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьПредставлениеТаблицыВHTML(ТабличныйДокумент) Экспорт
	
	Если НЕ ТипЗнч(ТабличныйДокумент) = Тип("ТабличныйДокумент") Тогда
		Возврат "";
	КонецЕсли;
	
	ИмяФайла = ПолучитьИмяВременногоФайла("html");
	
	// Сохраняем табличный документ в HTML формате
	ТабличныйДокумент.Записать(ИмяФайла, ТипФайлаТабличногоДокумента.HTML);
	
	// Создадим соответствие по стилям таблицы
	СоответствиеСтилей = Новый Соответствие;
	
	ЧтениеТекста = Новый ЧтениеТекста;
	ЧтениеТекста.Открыть(ИмяФайла);
	ТекстHTML		= ЧтениеТекста.Прочитать();
	
	НРегТекстHTML	= НРег(ТекстHTML);
	
	// Находим таблицу стилей в отдельный реквизит, в нижнем регистре
	НачалоТаблицыСтилей = Найти(НРегТекстHTML, "<style");
	КонецТаблицыСтилей	= Найти(НРегТекстHTML, "</style>");
	
	ТаблицаСтилей = Сред(ТекстHTML, НачалоТаблицыСтилей, КонецТаблицыСтилей - НачалоТаблицыСтилей);
	ТаблицаСтилей = Сред(ТаблицаСтилей, Найти(ТаблицаСтилей, ">") + 1);
	
	// Находим таблицу данных в отдельный реквизит, в текущем виде
	НачалоТаблицы		= Найти(НРегТекстHTML, "<table");
	ОкончаниеТаблицы	= Найти(НРегТекстHTML, "</table>");
	
	ТекстТаблицы		= "<table class='t_0' " + Сред(ТекстHTML, НачалоТаблицы + 7, ОкончаниеТаблицы - НачалоТаблицы + 6) + "</table>";
	
	// Обрабатываем таблицу стилей, на каждый стиль tr или td задаем имя таблицы .t_name
	Соответствие = ПолучитьДанныеОписанияСтилей(ТаблицаСтилей);
	
	// Формируем итоговую таблицу описания
	ОписаниеСтилей	= "";
	Для Каждого КлючИЗначение Из Соответствие Цикл
		Если Лев(КлючИЗначение.Ключ, 3) = "tr." Тогда
			ОписаниеСтилей = ОписаниеСтилей + ".t_0 " + КлючИЗначение.Ключ;
		ИначеЕсли КлючИЗначение.Ключ = "td" Тогда
			ОписаниеСтилей = ОписаниеСтилей + ".t_0 " + КлючИЗначение.Ключ;
		ИначеЕсли КлючИЗначение.Ключ = "table" Тогда
			ОписаниеСтилей = ОписаниеСтилей + ".t_0 ";
		Иначе 
			Продолжить;
		КонецЕсли;
		ОписаниеСтилей = ОписаниеСтилей + " {" + КлючИЗначение.Значение + "}" + Символы.ПС;
	КонецЦикла;
	
	Возврат Новый Структура("ТаблицаСтилей, ТекстТаблицы", ОписаниеСтилей, ТекстТаблицы);
	
КонецФункции

// Получение данных статьи по ссылке

Функция ПолучитьИерархиюОбластейСтатьи(СтатьяСсылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", СтатьяСсылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтатьиБазыЗнанийСодержание.НомерСтроки КАК НомерСтроки,
	|	СтатьиБазыЗнанийСодержание.Область,
	|	СтатьиБазыЗнанийСодержание.Наименование,
	|	СтатьиБазыЗнанийСодержание.Уровень
	|ИЗ
	|	Справочник.СтатьиБазыЗнаний.Содержание КАК СтатьиБазыЗнанийСодержание
	|ГДЕ
	|	СтатьиБазыЗнанийСодержание.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	Результат = Запрос.Выполнить();
	
	МассивДанных = Новый Массив;
	
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			Представление = "";
			Для Уровень = 2 По Выборка.Уровень Цикл
				Представление = Представление + "	";
			КонецЦикла;
			Представление = Представление + Выборка.Наименование;
			
			МассивДанных.Добавить(Новый Структура("Область, Представление", Выборка.Область, Представление));
		КонецЦикла;
	КонецЕсли;
	
	Возврат МассивДанных;
	
КонецФункции

// Захват и освобождение статьи от редактирования

Функция ЗахватитьСтатьюНаРедактирование(знач СтатьяСсылка, знач Область = "", ТекПользователь = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ ЗначениеЗаполнено(СтатьяСсылка) Тогда
		Возврат Истина;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ТекПользователь) Тогда
		ТекПользователь	= Пользователи.ТекущийПользователь();
	КонецЕсли;
	
	ТекущийРедактор = БазаЗнаний.ПолучитьДанныеБлокировки(СтатьяСсылка, Область).Пользователь;
	Если ЗначениеЗаполнено(ТекущийРедактор) Тогда 
		Если ТекущийРедактор <> ТекПользователь Тогда
			Возврат Ложь;
		Иначе 
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	ОбъектЗахвачен = Истина;
	
	НачатьТранзакцию();
	
	БлокировкаДанных = Новый БлокировкаДанных;
	ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.БлокировкаСтатьейБазыЗнаний");
	ЭлементБлокировки.УстановитьЗначение("СтатьяБазыЗнаний", СтатьяСсылка);
	ЭлементБлокировки.УстановитьЗначение("Область", Область);
	
	Попытка
		БлокировкаДанных.Заблокировать();
		
		МенеджерЗаписи = РегистрыСведений.БлокировкаСтатьейБазыЗнаний.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.СтатьяБазыЗнаний = СтатьяСсылка;
		МенеджерЗаписи.Область			= Область;
		МенеджерЗаписи.Пользователь		= ТекПользователь;
		МенеджерЗаписи.ДатаБлокировки	= ТекущаяДатаСеанса();
		МенеджерЗаписи.Записать(Истина);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОбъектЗахвачен = Ложь;
		
		ОтменитьТранзакцию();
	КонецПопытки;
	
	Возврат ОбъектЗахвачен;
	
КонецФункции

Функция ЗавершитьРедактированиеСтатьи(знач СтатьяСсылка, знач Область = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекущийРедактор = БазаЗнаний.ПолучитьДанныеБлокировки(СтатьяСсылка, Область).Пользователь;
	Администратор	= БазаЗнанийКлиентСерверПовтИсп.ПолучитьЗначениеОбщейНастройки("Администратор");
	ТекПользователь	= Пользователи.ТекущийПользователь();
	
	Если ТекущийРедактор <> ТекПользователь И Администратор <> ТекПользователь Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ОбъектОсвобожден = Истина;
	
	НачатьТранзакцию();
	
	БлокировкаДанных = Новый БлокировкаДанных;
	ЭлементБлокировки = БлокировкаДанных.Добавить("РегистрСведений.БлокировкаСтатьейБазыЗнаний");
	ЭлементБлокировки.УстановитьЗначение("СтатьяБазыЗнаний", СтатьяСсылка);
	ЭлементБлокировки.УстановитьЗначение("Область", Область);
	
	Попытка
		БлокировкаДанных.Заблокировать();
		
		МенеджерЗаписи = РегистрыСведений.БлокировкаСтатьейБазыЗнаний.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.СтатьяБазыЗнаний = СтатьяСсылка;
		МенеджерЗаписи.Область			= Область;
		МенеджерЗаписи.Прочитать();
		МенеджерЗаписи.Удалить();
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОбъектОсвобожден = Ложь;
		
		ОтменитьТранзакцию();
	КонецПопытки;
	
	Возврат ОбъектОсвобожден;
	
КонецФункции

// События модуля менеджера

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	Если ВидФормы = "ФормаОбъекта" И Параметры.Свойство("Ключ") Тогда
		СтандартнаяОбработка = Ложь;
		Параметры.Вставить("СтатьяБазыЗнаний", Параметры.Ключ);
		ВыбраннаяФорма = "Обработка.БазаЗнаний.Форма";
		
		//Если ЗначениеЗаполнено(Параметры.Ключ) Тогда
		//	Редактор = БазаЗнаний.ПолучитьДанныеБлокировки(Параметры.Ключ, "").Пользователь;
		//	Если ЗначениеЗаполнено(Редактор) И Редактор <> Пользователи.ТекущийПользователь() Тогда
		//		ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		//			НСтр("ru='Статья %1 захвачена пользователем %2 на редактирование.'"),
		//			Строка(Параметры.Ключ),
		//			Строка(Редактор));
		//			
		//		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстПредупреждения);
		//	Иначе 
		//		ВыбраннаяФорма = "РедактированиеСтатьи";
		//	КонецЕсли;
		//Иначе 
		//	ВыбраннаяФорма = "РедактированиеСтатьи";
		//КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры
