&НаКлиенте
Перем КлиентскийКэш;

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Проверка возможности загрузки новых обработок в информационную базу
	ЭтоНовый = Объект.Ссылка.Пустая();
	Если ЭтоНовый И НЕ ДополнительныеОтчетыИОбработки.ПравоДобавления() Тогда
		ВызватьИсключение НСтр("ru = 'Недостаточно прав доступа для добавления дополнительных отчетов или обработок.'");
	КонецЕсли;
	
	// Ограничение возможности выбора вида публикации в зависимости от настроек информационной базы
	Элементы.Публикация.СписокВыбора.Очистить();
	ДоступныеВидыПубликации = ДополнительныеОтчетыИОбработкиПовтИсп.ДоступныеВидыПубликации();
	Для Каждого ВидПубликации Из ДоступныеВидыПубликации Цикл
		Элементы.Публикация.СписокВыбора.Добавить(ВидПубликации);
	КонецЦикла;
	
	// Ограничение отображения расширенной информации
	ОтображениеРасширеннойИнформации = ДополнительныеОтчетыИОбработки.ОтображатьРасширеннуюИнформацию(Объект.Ссылка);
	Элементы.ГруппаДополнительнаяИнформация.Видимость = ОтображениеРасширеннойИнформации;
	Элементы.ДополнительнаяИнформация.Видимость = ОтображениеРасширеннойИнформации;
	
	// Ограничение возможности загрузки обработки из файла / сохранения в файл
	Элементы.ЗагрузитьФайлОбработкиОтчета.Видимость = 
		ДополнительныеОтчетыИОбработки.ВозможнаЗагрузкаОбработкиИзФайла(Объект.Ссылка);
	Элементы.СохранитьФайлОбработкиОтчета.Видимость =
		ДополнительныеОтчетыИОбработки.ВозможнаВыгрузкаОбработкиВФайл(Объект.Ссылка);
		
	ВидДополнительнаяОбработка = Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительнаяОбработка;
	ВидДополнительныйОтчет     = Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительныйОтчет;
	ВидОтчет                   = Перечисления.ВидыДополнительныхОтчетовИОбработок.Отчет;
	
	РегистрацияОбработки = Ложь;
	
	Если ЭтоНовый Тогда
		Объект.ИспользоватьДляФормыОбъекта = Истина;
		Объект.ИспользоватьДляФормыСписка  = Истина;
	КонецЕсли;
	
	ЗаполнитьКоманды();
	
	АдресРазрешений = ПоместитьВоВременноеХранилище(
		РеквизитФормыВЗначение("Объект").Разрешения.Выгрузить(),
		ЭтаФорма.УникальныйИдентификатор);
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	КлиентскийКэш = Новый Структура;
	
	Если ЭтоНовый Тогда
		
		Если НЕ ОткрытьДиалогЗагрузкиФайлаОбработкиОтчета(Истина) Тогда
			Отказ = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ВРег(ИсточникВыбора.ИмяФормы) = ВРег("Справочник.ДополнительныеОтчетыИОбработки.Форма.ПодборРазделов") Тогда
		
		Если ТипЗнч(ВыбранноеЗначение) <> Тип("СписокЗначений") Тогда
			Возврат;
		КонецЕсли;
		
		Объект.Разделы.Очистить();
		Для Каждого ЭлементСписка Из ВыбранноеЗначение Цикл
			НоваяСтрока = Объект.Разделы.Добавить();
			НоваяСтрока.Раздел = ЭлементСписка.Значение;
		КонецЦикла;
		
		Модифицированность = Истина;
		УстановитьВидимостьДоступность();
		
	ИначеЕсли ВРег(ИсточникВыбора.ИмяФормы) = ВРег("Справочник.ДополнительныеОтчетыИОбработки.Форма.БыстрыйДоступКДополнительнымОтчетамИОбработкам") Тогда
		
		Если ТипЗнч(ВыбранноеЗначение) <> Тип("СписокЗначений") Тогда
			Возврат;
		КонецЕсли;
		
		ЭлементКоманда = Объект.Команды.НайтиПоИдентификатору(КлиентскийКэш.ИдентификаторСтрокиКоманды);
		Если ЭлементКоманда = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Найденные = БыстрыйДоступ.НайтиСтроки(Новый Структура("ИдентификаторКоманды", ЭлементКоманда.Идентификатор));
		Для Каждого СтрокаТаблицы Из Найденные Цикл
			БыстрыйДоступ.Удалить(СтрокаТаблицы);
		КонецЦикла;
		
		Для Каждого ЭлементСписка Из ВыбранноеЗначение Цикл
			СтрокаТаблицы = БыстрыйДоступ.Добавить();
			СтрокаТаблицы.ИдентификаторКоманды = ЭлементКоманда.Идентификатор;
			СтрокаТаблицы.Пользователь = ЭлементСписка.Значение;
		КонецЦикла;
		
		ЭлементКоманда.БыстрыйДоступПредставление = ПредставлениеБыстрогоДоступаПользователей(ВыбранноеЗначение.Количество());
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ВыборОбъектовМетаданных" Тогда
		
		ЗагрузитьВыбранныеОбъектыМетаданных(Параметр);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	Если ДополнительныеОтчетыИОбработки.ВозможнаВыгрузкаОбработкиВФайл(Объект.Ссылка) Тогда
		
		АдресДанныхОбработки = ПоместитьВоВременноеХранилище(
			ТекущийОбъект.ХранилищеОбработки.Получить(),
			УникальныйИдентификатор);
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", ТекущийОбъект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеРегистра.ИдентификаторКоманды,
	|	ДанныеРегистра.Пользователь
	|ИЗ
	|	РегистрСведений.ПользовательскиеНастройкиДоступаКОбработкам КАК ДанныеРегистра
	|ГДЕ
	|	ДанныеРегистра.ДополнительныйОтчетИлиОбработка = &Ссылка
	|	И ДанныеРегистра.Доступно = ИСТИНА";
	БыстрыйДоступ.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если РегистрацияОбработки И ДополнительныеОтчетыИОбработки.ВозможнаЗагрузкаОбработкиИзФайла(Объект.Ссылка) Тогда
		ДвоичныеДанныеОбработки = ПолучитьИзВременногоХранилища(АдресДанныхОбработки);
		ТекущийОбъект.ХранилищеОбработки = Новый ХранилищеЗначения(ДвоичныеДанныеОбработки, Новый СжатиеДанных(9));
		РегистрацияОбработки = Ложь;
	КонецЕсли;
	
	Если Объект.Вид = ВидДополнительнаяОбработка ИЛИ Объект.Вид = ВидДополнительныйОтчет Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("АктуальныеКоманды", Объект.Команды.Выгрузить());
	Иначе
		БыстрыйДоступ.Очистить();
	КонецЕсли;
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("БыстрыйДоступ", БыстрыйДоступ.Выгрузить());
	
	ТекущийОбъект.Разрешения.Загрузить(
		ПолучитьИзВременногоХранилища(АдресРазрешений));
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	Если ТекущийОбъект.ДополнительныеСвойства.Свойство("ОшибкаПодключения") Тогда
		Сообщить(ТекущийОбъект.ДополнительныеСвойства.ОшибкаПодключения);
	КонецЕсли;
	ЭтоНовый = Ложь;
	УстановитьВидимостьДоступность();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОбщегоНазначенияКлиент.ОткрытьФормуРедактированияКомментария(
		Объект.Комментарий,
		Объект.Комментарий,
		Модифицированность);
КонецПроцедуры

&НаКлиенте
Процедура ВариантыДополнительногоОтчетаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ВариантыДополнительногоОтчетаПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
	ОткрытьВариант();
КонецПроцедуры

&НаКлиенте
Процедура ВариантыДополнительногоОтчетаПередУдалением(Элемент, Отказ)
	Вариант = Элементы.ВариантыДополнительногоОтчета.ТекущиеДанные;
	Если Вариант = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если НЕ Вариант.Пользовательский Тогда
		Предупреждение(НСтр("ru = 'Пометка на удаление предопределенного варианта отчета запрещена.'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Пометить ""%1"" на удаление?'"),
		Вариант.Наименование);
	
	Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	УдалитьВариантДополнительногоОтчета("ВнешнийОтчет." + Объект.ИмяОбъекта, Вариант.КлючВарианта);
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьДляФормыСпискаПриИзменении(Элемент)
	Если НЕ Объект.ИспользоватьДляФормыОбъекта И НЕ Объект.ИспользоватьДляФормыСписка Тогда
		Объект.ИспользоватьДляФормыОбъекта = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьДляФормыОбъектаПриИзменении(Элемент)
	Если НЕ Объект.ИспользоватьДляФормыОбъекта И НЕ Объект.ИспользоватьДляФормыСписка Тогда
		Объект.ИспользоватьДляФормыСписка = Истина;
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ Объект.Команды

&НаКлиенте
Процедура ОбъектКомандыБыстрыйДоступПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ИзменитьБыстрыйДоступ();
КонецПроцедуры

&НаКлиенте
Процедура ОбъектКомандыБыстрыйДоступПредставлениеОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ОбъектКомандыРегламентноеЗаданиеИспользованиеПриИзменении(Элемент)
	ИзменитьРегламентноеЗадание(Ложь, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ОбъектКомандыРегламентноеЗаданиеПредставлениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ИзменитьРегламентноеЗадание(Истина, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ОбъектКомандыРегламентноеЗаданиеПредставлениеОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ОбъектКомандыНастроитьБыстрыйДоступ(Команда)
	ИзменитьБыстрыйДоступ();
КонецПроцедуры

&НаКлиенте
Процедура ОбъектКомандыНастроитьРасписание(Команда)
	ИзменитьРегламентноеЗадание(Истина, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ОбъектКомандыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОбъектКомандыПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ЗагрузитьФайлОбработкиОтчета(Команда)
	
	ОткрытьДиалогЗагрузкиФайлаОбработкиОтчета(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьФайлОбработкиОтчета(Команда)
	
	Если НЕ ЭтоАдресВременногоХранилища(АдресДанныхОбработки) Тогда
		Предупреждение(НСтр("ru = 'Нет данных для обработки.'"));
		Возврат;
	КонецЕсли;
	
	Если ПодключитьРасширениеРаботыСФайлами() Тогда
		
		ДиалогСохраненияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		ДиалогСохраненияФайла.ПолноеИмяФайла = Объект.ИмяФайла;
		ДиалогСохраненияФайла.Фильтр = ДополнительныеОтчетыИОбработкиКлиентСервер.ФильтрДиалоговВыбораИСохранения();
		ДиалогСохраненияФайла.ИндексФильтра = ?(Объект.Вид = ВидДополнительныйОтчет ИЛИ Объект.Вид = ВидОтчет, 1, 2);
		ДиалогСохраненияФайла.МножественныйВыбор = Ложь;
		ДиалогСохраненияФайла.Заголовок = НСтр("ru = 'Укажите файл'");
		
		Если ДиалогСохраненияФайла.Выбрать() Тогда
			ПолучаемыеФайлы = Новый Массив;
			ПолучаемыеФайлы.Добавить(Новый ОписаниеПередаваемогоФайла(, АдресДанныхОбработки));
			ПолученныеФайлы = Новый Массив;
			ПолучитьФайлы(ПолучаемыеФайлы, ПолученныеФайлы, ДиалогСохраненияФайла.ПолноеИмяФайла, Ложь);
		КонецЕсли;
		
	Иначе
		
		ПолучитьФайл(АдресДанныхОбработки, Объект.ИмяФайла, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантыДополнительногоОтчетаОткрыть(Команда)
	Вариант = ЭтаФорма.Элементы.ВариантыДополнительногоОтчета.ТекущиеДанные;
	Если Вариант = Неопределено Тогда
		Предупреждение(НСтр("ru = 'Выберите вариант отчета.'"));
		Возврат;
	КонецЕсли;
	
	ДополнительныеОтчетыИОбработкиКлиент.ОткрытьВариантДополнительногоОтчета(Объект.Ссылка, Вариант.КлючВарианта);
КонецПроцедуры

&НаКлиенте
Процедура РазместитьВРазделах(Команда)
	МассивВариантов = Новый Массив;
	Для Каждого ИдентификаторСтроки Из Элементы.ВариантыДополнительногоОтчета.ВыделенныеСтроки Цикл
		Вариант = ВариантыДополнительногоОтчета.НайтиПоИдентификатору(ИдентификаторСтроки);
		Если ЗначениеЗаполнено(Вариант.Ссылка) Тогда
			МассивВариантов.Добавить(Вариант.Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	// Открывает диалог размещения нескольких вариантов отчетов в разделах командного интерфейса.
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.ВариантыОтчетов") Тогда
		МодульВариантыОтчетовКлиент = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ВариантыОтчетовКлиент");
		МодульВариантыОтчетовКлиент.ОткрытьДиалогРазмещенияВариантовВРазделах(МассивВариантов);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НазначениеКомандЗаполнениеФормыНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если Объект.Вид = ВидДополнительныйОтчет ИЛИ Объект.Вид = ВидДополнительнаяОбработка Тогда
		// Выбор разделов
		Разделы = Новый СписокЗначений;
		Для Каждого СтрокаТаблицы Из Объект.Разделы Цикл
			Разделы.Добавить(СтрокаТаблицы.Раздел);
		КонецЦикла;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Разделы",      Разделы);
		ПараметрыФормы.Вставить("ВидОбработки", Объект.Вид);
		
		ОткрытьФорму("Справочник.ДополнительныеОтчетыИОбработки.Форма.ПодборРазделов", ПараметрыФормы, ЭтаФорма);
	Иначе
		// Выбор объектов метаданных
		ПараметрыФормы = ПодготовитьПараметрыФормыВыборОбъектовМетаданных();
		ОткрытьФорму("ОбщаяФорма.ВыборОбъектовМетаданных", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Клиент

&НаКлиенте
Функция ОткрытьДиалогЗагрузкиФайлаОбработкиОтчета(ФлагДобавить, ПараметрыРегистрации = Неопределено)
	
	// Выбор файла
	Если ПараметрыРегистрации = Неопределено Тогда
		ПараметрыРегистрации = Новый Структура("ИмяФайла, ЭтоОтчет, ОтключатьКонфликтующие, Конфликтующие, АдресДанныхОбработки");
		ПараметрыРегистрации.ИмяФайла = "";
		ПараметрыРегистрации.ЭтоОтчет = Неопределено;
		ПараметрыРегистрации.ОтключатьКонфликтующие = Ложь;
		ПараметрыРегистрации.Конфликтующие = Новый СписокЗначений;
		
		// Параметры результата выбора
		ВыбранноеИмяФайла = "";
		
		// Параметры выбора
		Если ПодключитьРасширениеРаботыСФайлами() Тогда
			
			ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
			ДиалогОткрытияФайла.ПолноеИмяФайла = Объект.ИмяФайла;
			ДиалогОткрытияФайла.Фильтр = ДополнительныеОтчетыИОбработкиКлиентСервер.ФильтрДиалоговВыбораИСохранения();
			ДиалогОткрытияФайла.ИндексФильтра = ?(Объект.Ссылка.Пустая(), 0, ?(Объект.Вид = ВидДополнительныйОтчет ИЛИ Объект.Вид = ВидОтчет, 1, 2));
			ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
			ДиалогОткрытияФайла.Заголовок = НСтр("ru = 'Выберите дополнительный отчет или обработку'");
			
			ПомещаемыеФайлы = Новый Массив;
			ПомещенныеФайлы = Новый Массив;
			
			Если НЕ ПоместитьФайлы(ПомещаемыеФайлы, ПомещенныеФайлы, ДиалогОткрытияФайла, Истина, УникальныйИдентификатор) Тогда
				Возврат Ложь;
			КонецЕсли;
			
			АдресДанныхОбработки = ПомещенныеФайлы[0].Хранение;
			ВыбранноеИмяФайла = ПомещенныеФайлы[0].Имя;
			
		Иначе
			
			Если НЕ ПоместитьФайл(АдресДанныхОбработки, , ВыбранноеИмяФайла, Истина, УникальныйИдентификатор) Тогда
				Возврат Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ВыбранноеИмяФайла, "\");
		ПараметрыРегистрации.ИмяФайла = МассивПодстрок.Получить(МассивПодстрок.ВГраница());
		РасширениеФайла = ВРег(Прав(ПараметрыРегистрации.ИмяФайла, 3));
		
		Если РасширениеФайла = "ERF" Тогда
			ПараметрыРегистрации.ЭтоОтчет = Истина;
		ИначеЕсли РасширениеФайла = "EPF" Тогда
			ПараметрыРегистрации.ЭтоОтчет = Ложь;
		Иначе
			Предупреждение(НСтр("ru = 'Расширение файла не соответствует расширению внешнего отчета (ERF) или обработки (EPF).'"));
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// Вызов сервера
	ПараметрыРегистрации.АдресДанныхОбработки = АдресДанныхОбработки;
	РезультатРегистрации = ЗарегистрироватьОбработку(ПараметрыРегистрации);
	
	// Обработка результата работы сервера
	Если РезультатРегистрации.Успешно = Истина Тогда
		
		Модифицированность = Истина;
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Файл обработки успешно загружен'"), 
			?(ЭтоНовый, "", ПолучитьНавигационнуюСсылку(Объект.Ссылка)), 
			ПараметрыРегистрации.ИмяФайла);
		Возврат Истина;
		
	КонецЕсли;
	
	// Разбор причины отказа загрузки обработки и отображение информации пользователю
	Если РезультатРегистрации.ИмяОбъектаЗанято = Ложь Тогда
		
		// Причина отказа в КраткоеПредставлениеОшибки
		Предупреждение(РезультатРегистрации.КраткоеПредставлениеОшибки);
		Возврат Ложь;
		
	Иначе 
		
		// Причина отказа - имя объекта занято
		ЗаголовокВопроса = НСтр("ru = 'Имя объекта занято'");
		
		// Представление занявших объектов
		КоличествоКонфликтующих = РезультатРегистрации.Конфликтующие.Количество();
		ПредставлениеЗанявших = "";
		Для Каждого ЭлементСписка Из РезультатРегистрации.Конфликтующие Цикл
			ПредставлениеЗанявших = ПредставлениеЗанявших 
			+ ?(ПредставлениеЗанявших = "", "", ", ")
			+ СокрЛП(ЭлементСписка.Представление);
			Если СтрДлина(ПредставлениеЗанявших) > 80 Тогда
				ПредставлениеЗанявших = Лев(ПредставлениеЗанявших, 70) 
				+ "... ("
				+ Формат(КоличествоКонфликтующих, "ЧН=0; ЧГ=")
				+ " "
				+ НСтр("ru = 'шт'") 
				+ ")";
				Прервать;
			КонецЕсли;
		КонецЦикла; 
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Имя ""%1"" уже занято другими дополнительными отчетами (обработками): 
				|%2.
				|
				|Доступные действия:
				|1. ""Продолжить"" - продолжить загрузку, отключив Публикацию текущего отчета (обработки).
				|2. ""Отключить конфликтующие"" - продолжить загрузку, отключив Публикацию отчетов (обработок), конфликтующих с загружаемой по имени.
				|3. ""Показать конфликтующие"" - отменить загрузку и показать список отчетов (обработок), конфликтующих с загружаемой по имени.
				|4. ""Отмена"" - отменить загрузку.'"),
			РезультатРегистрации.ИмяОбъекта,
			ПредставлениеЗанявших);
		
		КнопкиВопроса = Новый СписокЗначений;
		КнопкиВопроса.Добавить(1, НСтр("ru = 'Продолжить'"));
		КнопкиВопроса.Добавить(2, НСтр("ru = 'Отключить конфликтующие'"));
		КнопкиВопроса.Добавить(3, НСтр("ru = 'Показать конфликтующие'"));
		КнопкиВопроса.Добавить(КодВозвратаДиалога.Отмена);
		
		Ответ = Вопрос(ТекстВопроса, КнопкиВопроса, , 1, ЗаголовокВопроса);
		Если Ответ = 1 Тогда
			
			// Продолжить
			Объект.Публикация = ДополнительныеОтчетыИОбработкиВызовСервера.ВидПубликацииДляКонфликтующихОбработок();
			
			// Повторный вызов сервера (публикация в режиме отладки) и обработка результата
			Возврат ОткрытьДиалогЗагрузкиФайлаОбработкиОтчета(ФлагДобавить, ПараметрыРегистрации);
			
		ИначеЕсли Ответ = 2 Тогда
			
			// Отключить конфликтующие
			ПараметрыРегистрации.ОтключатьКонфликтующие = Истина;
			ПараметрыРегистрации.Конфликтующие = РезультатРегистрации.Конфликтующие;
			
			// Повторный вызов сервера (с переводом конфликтующих в режим отладки) и обработка результата
			РезультатВторогоЗахода = ОткрытьДиалогЗагрузкиФайлаОбработкиОтчета(ФлагДобавить, ПараметрыРегистрации);
			
			// Отключается несколько объектов, потому динамические списки надо обновить
			ОповеститьОбИзменении(Тип("СправочникСсылка.ДополнительныеОтчетыИОбработки"));
			
			// Возврат результата вызывающему коду
			Возврат РезультатВторогоЗахода;
			
		ИначеЕсли Ответ = 3 Тогда
			
			// Показать конфликтующие (отмена далее)
			Если КоличествоКонфликтующих = 1
				И (
					ЭтоНовый 
					ИЛИ РезультатРегистрации.СтароеИмяОбъекта <> РезультатРегистрации.ИмяОбъекта
				) Тогда
				
				// Форма элемента
				ОткрытьЗначение(РезультатРегистрации.Конфликтующие[0].Значение);
				
			Иначе
				
				// Форма списка с отбором по конфликтующим
				ПараметрыСписка = Новый Структура("Отбор, Заголовок, Отображение");
				ПараметрыСписка.Отбор = Новый Структура("ИмяОбъекта, ЭтоГруппа", РезультатРегистрации.ИмяОбъекта, Ложь);
				ПараметрыСписка.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Дополнительные отчеты и обработки с именем объекта ""%1""'"),
					РезультатРегистрации.ИмяОбъекта);
				ПараметрыСписка.Отображение = "Список";
				ОткрытьФорму("Справочник.ДополнительныеОтчетыИОбработки.ФормаСписка", ПараметрыСписка, , Истина);
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	// Отменить загрузку
	Возврат Ложь;
КонецФункции

&НаКлиенте
Процедура ОткрытьВариант()
	Вариант = Элементы.ВариантыДополнительногоОтчета.ТекущиеДанные;
	Если Вариант = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Вариант.Ссылка) Тогда
		Предупреждение(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Вариант отчета ""%1"" не зарегистрирован.'"),
				Вариант.Наименование));
	Иначе
		ОткрытьЗначение(Вариант.Ссылка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРегламентноеЗадание(РежимВыбора = Ложь, ИзмененФлажок = Ложь)
	
	ЭлементКоманда = Элементы.ОбъектКоманды.ТекущиеДанные;
	Если ЭлементКоманда = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭлементКоманда.ВариантЗапуска <> ПредопределенноеЗначение("Перечисление.СпособыВызоваДополнительныхОбработок.ВызовСерверногоМетода")
			И ЭлементКоманда.ВариантЗапуска <> ПредопределенноеЗначение("Перечисление.СпособыВызоваДополнительныхОбработок.СценарийВБезопасномРежиме") Тогда
		Предупреждение(
			СтрЗаменить(
				НСтр("ru = 'Команда с вариантом запуска ""%1""
				|не может использоваться в регламентных заданиях.'"), 
				"%1", 
				Строка(ЭлементКоманда.ВариантЗапуска)));
		Если ИзмененФлажок тогда
			ЭлементКоманда.РегламентноеЗаданиеИспользование = НЕ ЭлементКоманда.РегламентноеЗаданиеИспользование;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если ИзмененФлажок Тогда
		Если НЕ ЭлементКоманда.РегламентноеЗаданиеИспользование Тогда
			ЭлементКоманда.РегламентноеЗаданиеПредставление = ПредставлениеОтключенногоРасписания();
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ЭлементКоманда.РегламентноеЗаданиеРасписание.Количество() > 0 Тогда
		РасписаниеКоманды = ЭлементКоманда.РегламентноеЗаданиеРасписание.Получить(0).Значение;
	Иначе
		РасписаниеКоманды = Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(РасписаниеКоманды) <> Тип("РасписаниеРегламентногоЗадания") Тогда
		РасписаниеКоманды = Новый РасписаниеРегламентногоЗадания;
	КонецЕсли;
	
	РедактированиеРасписания = Новый ДиалогРасписанияРегламентногоЗадания(РасписаниеКоманды);
	Если НЕ РедактированиеРасписания.ОткрытьМодально() Тогда
		Возврат;
	КонецЕсли;
	
	РасписаниеКоманды = РедактированиеРасписания.Расписание;
	ЭлементКоманда.РегламентноеЗаданиеРасписание.Очистить();
	ЭлементКоманда.РегламентноеЗаданиеРасписание.Добавить(РасписаниеКоманды);
	ЭлементКоманда.РегламентноеЗаданиеПредставление = Строка(РасписаниеКоманды);
	
	Если ЭлементКоманда.РегламентноеЗаданиеПредставление = ПредставлениеПустогоРасписания() Тогда
		ЭлементКоманда.РегламентноеЗаданиеПредставление = ПредставлениеОтключенногоРасписания();
		ЭлементКоманда.РегламентноеЗаданиеИспользование = Ложь;
		Модифицированность = Истина;
	Иначе
		ЭлементКоманда.РегламентноеЗаданиеИспользование = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьБыстрыйДоступ()
	ЭлементКоманда = Элементы.ОбъектКоманды.ТекущиеДанные;
	Если ЭлементКоманда = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Найденные = БыстрыйДоступ.НайтиСтроки(Новый Структура("ИдентификаторКоманды", ЭлементКоманда.Идентификатор));
	ПользователиСБыстрымДоступом = Новый СписокЗначений;
	Для Каждого СтрокаТаблицы Из Найденные Цикл
		ПользователиСБыстрымДоступом.Добавить(СтрокаТаблицы.Пользователь);
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПользователиСБыстрымДоступом", ПользователиСБыстрымДоступом);
	ПараметрыФормы.Вставить("ПредставлениеКоманды",         ЭлементКоманда.Представление);
	
	КлиентскийКэш.Вставить("ИдентификаторСтрокиКоманды", ЭлементКоманда.ПолучитьИдентификатор());
	ОткрытьФорму("Справочник.ДополнительныеОтчетыИОбработки.Форма.БыстрыйДоступКДополнительнымОтчетамИОбработкам", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РазрешенияПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Переход = ДанныеСобытия.Href;
	Если Не ПустаяСтрока(Переход) Тогда
		ПодключитьОбработчикОжидания("РазрешенияПриНажатии_Подключаемый", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазрешенияПриНажатии_Подключаемый()
	
	КлючВнутреннейОбработки = "internal:";
	
	Если Переход = КлючВнутреннейОбработки + "home" Тогда
		
		СформироватьСписокРазрешений();
		
	ИначеЕсли Лев(Переход, СтрДлина(КлючВнутреннейОбработки)) = КлючВнутреннейОбработки Тогда
		
		СформироватьПредставленияРазрешений(Прав(Переход, СтрДлина(Переход) - СтрДлина(КлючВнутреннейОбработки)));
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Клиент, Сервер

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеПустогоРасписания()
	Возврат Строка(Новый РасписаниеРегламентногоЗадания);
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеОтключенногоРасписания()
	Возврат НСтр("ru = 'Расписание не задано'");
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПредставлениеБыстрогоДоступаПользователей(КоличествоПользователей)
	Если КоличествоПользователей = 0 Тогда
		Возврат НСтр("ru = 'Нет'");
	КонецЕсли;
	
	ПоследняяЦифра = КоличествоПользователей - 10 * Цел(КоличествоПользователей/10);
	
	Если ПоследняяЦифра = 1 Тогда
		БыстрыйДоступПредставление = НСтр("ru = '%1 пользователь'");
	ИначеЕсли ПоследняяЦифра = 2 Или ПоследняяЦифра = 3 Или ПоследняяЦифра = 4 Тогда
		БыстрыйДоступПредставление = НСтр("ru = '%1 пользователя'");
	Иначе
		БыстрыйДоступПредставление = НСтр("ru = '%1 пользователей'");
	КонецЕсли;
	
	БыстрыйДоступПредставление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		БыстрыйДоступПредставление, 
		Формат(КоличествоПользователей, "ЧГ=0"));
	
	Возврат БыстрыйДоступПредставление;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Вызов сервера, Сервер

&НаСервере
Функция ЗарегистрироватьОбработку(ПараметрыРегистрации)
	
	ОбъектСправочника = РеквизитФормыВЗначение("Объект");
	КомандыСохраненные = ОбъектСправочника.Команды.Выгрузить();
	Результат = ДополнительныеОтчетыИОбработки.ЗарегистрироватьОбработку(ОбъектСправочника, ПараметрыРегистрации);
	АдресРазрешений = ПоместитьВоВременноеХранилище(ОбъектСправочника.Разрешения.Выгрузить(), ЭтаФорма.УникальныйИдентификатор);
	ЗначениеВРеквизитФормы(ОбъектСправочника, "Объект");
	
	Если Результат.Успешно Тогда
		ЗаполнитьКоманды(КомандыСохраненные);
		РегистрацияОбработки = Результат.Успешно;
	КонецЕсли;
	
	УстановитьВидимостьДоступность(Истина);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПодготовитьПараметрыФормыВыборОбъектовМетаданных()
	ФильтрПоОбъектамМетаданных = Новый СписокЗначений;
	Если Объект.Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.ЗаполнениеОбъекта Тогда
		ОбщаяКоманда = Метаданные.ОбщиеКоманды.ДополнительныеОтчетыИОбработкиЗаполнениеОбъекта;
	ИначеЕсли Объект.Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.Отчет Тогда
		ОбщаяКоманда = Метаданные.ОбщиеКоманды.ДополнительныеОтчетыИОбработкиОтчеты;
	ИначеЕсли Объект.Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.ПечатнаяФорма Тогда
		ОбщаяКоманда = Метаданные.ОбщиеКоманды.ДополнительныеОтчетыИОбработкиПечатныеФормы;
	ИначеЕсли Объект.Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.СозданиеСвязанныхОбъектов Тогда
		ОбщаяКоманда = Метаданные.ОбщиеКоманды.ДополнительныеОтчетыИОбработкиСозданиеСвязанныхОбъектов;
	КонецЕсли;
	Для Каждого ТипПараметраКоманды Из ОбщаяКоманда.ТипПараметраКоманды.Типы() Цикл
		ФильтрПоОбъектамМетаданных.Добавить(Метаданные.НайтиПоТипу(ТипПараметраКоманды).ПолноеИмя());
	КонецЦикла;
	
	ВыбранныеОбъектыМетаданных = Новый СписокЗначений;
	Для Каждого ЭлементНазначение ИЗ Объект.Назначение Цикл
		Если НЕ ЭлементНазначение.ОбъектНазначения.ПометкаУдаления Тогда
			ВыбранныеОбъектыМетаданных.Добавить(ЭлементНазначение.ОбъектНазначения.ПолноеИмя);
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ФильтрПоОбъектамМетаданных", ФильтрПоОбъектамМетаданных);
	ПараметрыФормы.Вставить("ВыбранныеОбъектыМетаданных", ВыбранныеОбъектыМетаданных);
	ПараметрыФормы.Вставить("Заголовок", НСтр("ru = 'Назначение дополнительной обработки'"));
	
	Возврат ПараметрыФормы;
КонецФункции

&НаСервере
Процедура ЗагрузитьВыбранныеОбъектыМетаданных(Параметр)
	Объект.Назначение.Очистить();
	
	Для Каждого ЭлементПараметр Из Параметр Цикл
		ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ЭлементПараметр.Значение);
		Если ОбъектМетаданных = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		СтрокаНазначение = Объект.Назначение.Добавить();
		СтрокаНазначение.ОбъектНазначения = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ОбъектМетаданных);
	КонецЦикла;
	
	Модифицированность = Истина;
	УстановитьВидимостьДоступность();
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УдалитьВариантДополнительногоОтчета(КлючОбъекта, КлючВарианта)
	ХранилищаНастроек["ХранилищеВариантовОтчетов"].Удалить(КлючОбъекта, КлючВарианта, Неопределено);
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоступность(Регистрация = Ложь)
	
	Если НЕ Регистрация И НЕ ЭтоНовый И Объект.Вид = ВидДополнительныйОтчет Тогда
		ВариантыДополнительногоОтчетаЗаполнить();
	Иначе
		ВариантыДополнительногоОтчета.Очистить();
	КонецЕсли;
	
	ЭтоГлобальнаяОбработка = (Объект.Вид = ВидДополнительнаяОбработка ИЛИ Объект.Вид = ВидДополнительныйОтчет);
	ЭтоОтчет = (Объект.Вид = ВидДополнительныйОтчет ИЛИ Объект.Вид = ВидОтчет);
	
	КоличествоВариантов = ВариантыДополнительногоОтчета.Количество();
	КоличествоКоманд = Объект.Команды.Количество();
	КоличествоРазрешений = ПолучитьТаблицуРазрешений().Количество();
	КоличествоВидимыхЗакладок = 0;
	КоличествоЗакладокБезРазрешений = 0;
	
	Если Объект.Вид = ВидДополнительныйОтчет И Объект.ИспользуетХранилищеВариантов Тогда
		
		КоличествоВидимыхЗакладок = КоличествоВидимыхЗакладок + 1;
		КоличествоЗакладокБезРазрешений = КоличествоЗакладокБезРазрешений + 1;
		
		Элементы.СтраницыВарианты.Видимость = Истина;
		
		Если Регистрация ИЛИ КоличествоВариантов = 0 Тогда
			Элементы.СтраницыВарианты.ТекущаяСтраница = Элементы.ВариантыСкрытьДоЗаписи;
			Элементы.СтраницаВарианты.Заголовок = НСтр("ru = 'Варианты отчета'");
		Иначе
			Элементы.СтраницыВарианты.ТекущаяСтраница = Элементы.ВариантыПоказать;
			Элементы.СтраницаВарианты.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Варианты отчета (%1)'"),
				Формат(КоличествоВариантов, "ЧГ="));
		КонецЕсли;
		
	Иначе
		Элементы.СтраницыВарианты.Видимость = Ложь;
	КонецЕсли;
	
	Если КоличествоКоманд = 0 Тогда
		
		Элементы.СтраницаКоманды.Видимость = Ложь;
		Элементы.СтраницаКоманды.Заголовок = НСтр("ru = 'Команды'");
		
	Иначе
		
		КоличествоВидимыхЗакладок = КоличествоВидимыхЗакладок + 1;
		КоличествоЗакладокБезРазрешений = КоличествоЗакладокБезРазрешений + 1;
		Элементы.СтраницаКоманды.Видимость = Истина;
		Элементы.СтраницаКоманды.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Команды (%1)'"),
			Формат(КоличествоКоманд, "ЧГ="));
		
	КонецЕсли;
	
	Если КоличествоРазрешений = 0 Тогда
		Элементы.СтраницаРазрешения.Видимость = Ложь;
		Элементы.СтраницаРазрешения.Заголовок = НСтр("ru = 'Разрешения'");
	Иначе
		КоличествоВидимыхЗакладок = КоличествоВидимыхЗакладок + 1;
		ОднаИзЗакладокРазрешения = Истина;
		Элементы.СтраницаРазрешения.Видимость = Истина;
		Элементы.СтраницаРазрешения.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Разрешения (%1)'"),
			Формат(КоличествоРазрешений, "ЧГ="));
		СформироватьСписокРазрешений();
	КонецЕсли;
	
	Элементы.СтраницыВариантыКоманды.ОтображениеСтраниц = ОтображениеСтраницФормы[?(КоличествоВидимыхЗакладок > 1, "ЗакладкиСверху", "Нет")];
	
	Если ЭтоГлобальнаяОбработка Тогда
		Если Объект.Разделы.Количество() = 0 Тогда
			ПредставлениеНазначения = НСтр("ru = 'Не определено'");
		Иначе
			ПредставлениеНазначения = "";
			Для Каждого СтрокаРаздел Из Объект.Разделы Цикл
				Если ПредставлениеНазначения <> "" Тогда
					ПредставлениеНазначения = ПредставлениеНазначения + ", ";
				КонецЕсли;
				ПредставлениеНазначения = ПредставлениеНазначения + ДополнительныеОтчетыИОбработки.ПредставлениеРаздела(СтрокаРаздел.Раздел);
			КонецЦикла;
		КонецЕсли;
	Иначе
		Если Объект.Назначение.Количество() = 0 Тогда
			ПредставлениеНазначения = НСтр("ru = 'Не определено'");
		Иначе
			ПредставлениеНазначения = "";
			Для Каждого СтрокаНазначение Из Объект.Назначение Цикл
				Если ПредставлениеНазначения <> "" Тогда
					ПредставлениеНазначения = ПредставлениеНазначения + ", ";
				КонецЕсли;
				ПредставлениеНазначения = ПредставлениеНазначения + Строка(СтрокаНазначение.ОбъектНазначения);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ОбъектКомандыБыстрыйДоступПредставление.Видимость       = ЭтоГлобальнаяОбработка;
	Элементы.ОбъектКомандыНастроитьБыстрыйДоступ.Видимость           = ЭтоГлобальнаяОбработка;
	Элементы.ОбъектКомандыРегламентноеЗаданиеПредставление.Видимость = ЭтоГлобальнаяОбработка;
	Элементы.ОбъектКомандыРегламентноеЗаданиеИспользование.Видимость = ЭтоГлобальнаяОбработка;
	Элементы.ОбъектКомандыНастроитьРасписание.Видимость              = ЭтоГлобальнаяОбработка;
	Элементы.РазмещениеКоманд.Видимость                              = ЭтоГлобальнаяОбработка;
	Элементы.НазначениеКоманд.Видимость                              = НЕ ЭтоГлобальнаяОбработка;
	Элементы.ТипыФорм.Видимость                                      = НЕ ЭтоГлобальнаяОбработка;
	
	Если Объект.БезопасныйРежим Тогда
		
		Элементы.ГруппаДополнительнаяИнформация.ТекущаяСтраница = ?(ЭтоОтчет, Элементы.ГруппаИнформацияОтчета, Элементы.ГруппаИнформацияОбработки);
		Элементы.ИнформацияОбработкиОРазрешениях.Видимость = (КоличествоРазрешений > 0);
		Элементы.ИнформацияОтчетаОРазрешениях.Видимость = (КоличествоРазрешений > 0);
		
	Иначе
		
		Элементы.ГруппаДополнительнаяИнформация.ТекущаяСтраница = ?(ЭтоОтчет, Элементы.ГруппаПредупреждениеОтчета, Элементы.ГруппаПредупреждениеОбработки);
		
	КонецЕсли;
	
	Если ЭтоНовый Тогда
		Заголовок = ?(ЭтоОтчет, НСтр("ru = 'Дополнительный отчет (создание)'"), НСтр("ru = 'Дополнительная обработка (создание)'"));
	Иначе
		Заголовок = Объект.Наименование + " " + ?(ЭтоОтчет, НСтр("ru = '(Дополнительный отчет)'"), НСтр("ru = '(Дополнительная обработка)'"));
	КонецЕсли;
	
	Если КоличествоВариантов > 0 Тогда
		
		ВыводитьЗаголовокТаблицы = КоличествоВидимыхЗакладок <= 1 И Объект.Вид = ВидДополнительныйОтчет И Объект.ИспользуетХранилищеВариантов;
		
		Элементы.ВариантыДополнительногоОтчета.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы[?(ВыводитьЗаголовокТаблицы, "Верх", "Нет")];
		Элементы.ВариантыДополнительногоОтчета.Шапка               = НЕ ВыводитьЗаголовокТаблицы;
		Элементы.ВариантыДополнительногоОтчета.ГоризонтальныеЛинии = НЕ ВыводитьЗаголовокТаблицы;
		
	КонецЕсли;
	
	Если КоличествоКоманд > 0 Тогда
		
		ВыводитьЗаголовокТаблицы = КоличествоВидимыхЗакладок <= 1 И НЕ ЭтоГлобальнаяОбработка;
		
		Элементы.ОбъектКоманды.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы[?(ВыводитьЗаголовокТаблицы, "Верх", "Нет")];
		Элементы.ОбъектКоманды.Шапка               = НЕ ВыводитьЗаголовокТаблицы;
		Элементы.ОбъектКоманды.ГоризонтальныеЛинии = НЕ ВыводитьЗаголовокТаблицы;
		
	КонецЕсли;
	
	КлючСохраненияПоложенияОкна = ДополнительныеОтчетыИОбработки.ВидВСтроку(Объект.Вид);
	
КонецПроцедуры

&НаСервере
Процедура СформироватьПредставленияРазрешений(Знач ВидРазрешения)
	
	ТаблицаРазрешений = ПолучитьТаблицуРазрешений();
	СтрокаРазрешения = ТаблицаРазрешений.Найти(ВидРазрешения, "ВидРазрешения");
	Если СтрокаРазрешения <> Неопределено Тогда
		ПараметрыРазрешения = СтрокаРазрешения.Параметры.Получить();
		ПредставлениеРазрешений = ДополнительныеОтчетыИОбработкиВБезопасномРежимеСлужебный.СформироватьПодробноеОписаниеРазрешения(
			ВидРазрешения, ПараметрыРазрешения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьСписокРазрешений()
	
	ПредставлениеРазрешений = ДополнительныеОтчетыИОбработкиВБезопасномРежимеСлужебный.СформироватьПредставлениеРазрешений(
		ПолучитьТаблицуРазрешений());
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Сервер

&НаСервере
Процедура ЗаполнитьКоманды(КомандыСохраненные = Неопределено)
	
	Объект.Команды.Сортировать("Представление");
	
	Для Каждого ЭлементКоманда Из Объект.Команды Цикл
		Если Объект.Вид = ВидДополнительнаяОбработка ИЛИ Объект.Вид = ВидДополнительныйОтчет Тогда
			Найденные = БыстрыйДоступ.НайтиСтроки(Новый Структура("ИдентификаторКоманды", ЭлементКоманда.Идентификатор));
			ЭлементКоманда.БыстрыйДоступПредставление = ПредставлениеБыстрогоДоступаПользователей(
				Найденные.Количество());
		КонецЕсли;
		
		ЭлементКоманда.РегламентноеЗаданиеИспользование = Ложь;
		ЭлементКоманда.РегламентноеЗаданиеРазрешено = Ложь;
		
		Если Объект.Вид = ВидДополнительнаяОбработка
			И (ЭлементКоманда.ВариантЗапуска = Перечисления.СпособыВызоваДополнительныхОбработок.ВызовСерверногоМетода
			ИЛИ ЭлементКоманда.ВариантЗапуска = Перечисления.СпособыВызоваДополнительныхОбработок.СценарийВБезопасномРежиме) Тогда
			
			ЭлементКоманда.РегламентноеЗаданиеРазрешено = Истина;
			
			РегламентноеЗаданиеGUID = ЭлементКоманда.РегламентноеЗаданиеGUID;
			Если КомандыСохраненные <> Неопределено Тогда
				НайденнаяСтрока = КомандыСохраненные.Найти(ЭлементКоманда.Идентификатор, "Идентификатор");
				Если НайденнаяСтрока <> Неопределено Тогда
					РегламентноеЗаданиеGUID = НайденнаяСтрока.РегламентноеЗаданиеGUID;
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(РегламентноеЗаданиеGUID) Тогда
				РегламентноеЗадание = ДополнительныеОтчетыИОбработкиРегламентныеЗадания.НайтиЗадание(РегламентноеЗаданиеGUID);
				
				Если РегламентноеЗадание <> Неопределено Тогда
					
					ПараметрыЗадания = ДополнительныеОтчетыИОбработкиРегламентныеЗадания.ПолучитьПараметрыЗадания(РегламентноеЗадание);
					
					ЭлементКоманда.РегламентноеЗаданиеGUID = РегламентноеЗаданиеGUID;
					ЭлементКоманда.РегламентноеЗаданиеПредставление = Строка(ПараметрыЗадания.Расписание);
					ЭлементКоманда.РегламентноеЗаданиеИспользование = ПараметрыЗадания.Использование;
					ЭлементКоманда.РегламентноеЗаданиеРасписание.Вставить(0, ПараметрыЗадания.Расписание);
					
					Если ЭлементКоманда.РегламентноеЗаданиеПредставление = ПредставлениеПустогоРасписания() Тогда
						ЭлементКоманда.РегламентноеЗаданиеИспользование = Ложь;
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ЭлементКоманда.РегламентноеЗаданиеИспользование Тогда
				ЭлементКоманда.РегламентноеЗаданиеПредставление = ПредставлениеОтключенногоРасписания();
			КонецЕсли;
		Иначе
			ЭлементКоманда.РегламентноеЗаданиеПредставление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не применимо для команд с вариантом запуска ""%1""'"),
				Строка(ЭлементКоманда.ВариантЗапуска));
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВариантыДополнительногоОтчетаЗаполнить()
	ВариантыДополнительногоОтчета.Очистить();
	
	Попытка
		ВнешнийОбъект = ДополнительныеОтчетыИОбработки.ПолучитьОбъектВнешнейОбработки(Объект.Ссылка);
	Исключение
		ТекстОшибки = НСтр("ru = 'Не удалось получить список вариантов отчета из-за ошибки, возникшей при подключении этого отчета:'");
		Сообщить(ТекстОшибки + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), СтатусСообщения.Важное);
		Возврат;
	КонецПопытки;
	
	ОтчетМетаданные = ВнешнийОбъект.Метаданные();
	СхемаКДМетаданные = ОтчетМетаданные.ОсновнаяСхемаКомпоновкиДанных;
	Если СхемаКДМетаданные <> Неопределено Тогда
		СхемаКД = ВнешнийОбъект.ПолучитьМакет(СхемаКДМетаданные.Имя);
		Для Каждого ВариантНастроекКД Из СхемаКД.ВариантыНастроек Цикл
			ВариантСсылка = Неопределено;
			КлючВарианта = ВариантНастроекКД.Имя;
			ДополнительныеОтчетыИОбработки.ПриОпределенииСсылкиВариантаДополнительногоОтчета(Объект.Ссылка, КлючВарианта, ВариантСсылка);
			Если ВариантСсылка <> Неопределено Тогда
				Вариант = ВариантыДополнительногоОтчета.Добавить();
				Вариант.КлючВарианта = КлючВарианта;
				Вариант.Наименование = ВариантНастроекКД.Представление;
				Вариант.Пользовательский = Ложь;
				Вариант.ИндексКартинки = 5;
				Вариант.Ссылка = ВариантСсылка;
			КонецЕсли;
		КонецЦикла;
	Иначе
		ВариантСсылка = Неопределено;
		КлючВарианта = "";
		ДополнительныеОтчетыИОбработки.ПриОпределенииСсылкиВариантаДополнительногоОтчета(Объект.Ссылка, КлючВарианта, ВариантСсылка);
		Если ВариантСсылка <> Неопределено Тогда
			Вариант = ВариантыДополнительногоОтчета.Добавить();
			Вариант.КлючВарианта = КлючВарианта;
			Вариант.Наименование = ОтчетМетаданные.Представление();
			Вариант.Пользовательский = Ложь;
			Вариант.ИндексКартинки = 5;
			Вариант.Ссылка = ВариантСсылка;
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.ИспользуетХранилищеВариантов Тогда
		Хранилище = ХранилищаНастроек["ХранилищеВариантовОтчетов"];
		КлючОбъекта = Объект.Ссылка;
	Иначе
		Хранилище = ХранилищеВариантовОтчетов;
		КлючОбъекта = "ВнешнийОтчет." + Объект.ИмяОбъекта;
	КонецЕсли;
	
	СписокНастроек = Хранилище.ПолучитьСписок(КлючОбъекта);
	
	Для Каждого ЭлементСписка Из СписокНастроек Цикл
		Вариант = ВариантыДополнительногоОтчета.Добавить();
		Вариант.КлючВарианта = ЭлементСписка.Значение;
		Вариант.Наименование = ЭлементСписка.Представление;
		Вариант.Пользовательский = Истина;
		Вариант.ИндексКартинки = 3;
		ДополнительныеОтчетыИОбработки.ПриОпределенииСсылкиВариантаДополнительногоОтчета(Объект.Ссылка, Вариант.КлючВарианта, Вариант.Ссылка);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ПолучитьТаблицуРазрешений()
	
	Возврат ПолучитьИзВременногоХранилища(АдресРазрешений);
	
КонецФункции

