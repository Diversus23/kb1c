////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		НачальнаяНастройкаПриЧтенииИСоздании(Объект);
	КонецЕсли;
	
	// Заполнение вспомогательных данных.
	
	// Заполнение списка видов доступа через права по значениям доступа.
	Отбор = Новый Структура("ВидДоступаЧерезПраваПоЗначениямДоступа", Истина);
	Для каждого СвойстваВидаДоступа Из УправлениеДоступомСлужебный.СвойстваВидаДоступа().НайтиСтроки(Отбор) Цикл
		
		ВидДоступаПредставлениеОбъекта = Неопределено;
		Если СвойстваВидаДоступа.Таблицы.Количество() = 1 Тогда
			МетаданныеОбъект = Метаданные.НайтиПоПолномуИмени(СвойстваВидаДоступа.Таблицы[0]);
			ВидДоступаПредставлениеОбъекта = МетаданныеОбъект.ПредставлениеОбъекта;
		КонецЕсли;
		
		ВидыДоступаЧерезПраваПоЗначениямДоступа.Добавить(СвойстваВидаДоступа.ВидДоступа, ВидДоступаПредставлениеОбъекта);
	КонецЦикла;
	
	// Заполнение типов значений доступа всех видов доступа.
	Для каждого СвойстваВидаДоступа Из УправлениеДоступомСлужебный.СвойстваВидаДоступа() Цикл
		Для каждого Тип Из СвойстваВидаДоступа.ВидДоступа.ТипЗначения.Типы() Цикл
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(Тип);
			ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
			
			МетаданныеТипа = Метаданные.НайтиПоТипу(Тип);
			Если Метаданные.Перечисления.Найти(МетаданныеТипа.Имя) = МетаданныеТипа Тогда
				ПредставлениеТипа = МетаданныеТипа.Представление();
			Иначе
				ПредставлениеТипа = ?(ЗначениеЗаполнено(МетаданныеТипа.ПредставлениеОбъекта),
				                      МетаданныеТипа.ПредставлениеОбъекта,
				                      МетаданныеТипа.Представление());
			КонецЕсли;
			
			НоваяСтрока = ТипыЗначенийДоступаВидовДоступа.Добавить();
			НоваяСтрока.ВидДоступа = СвойстваВидаДоступа.ВидДоступа;
			НоваяСтрока.ТипЗначенияДоступа = ОписаниеТипа.ПривестиЗначение(Неопределено);
			НоваяСтрока.ПредставлениеТипа  = ПредставлениеТипа;
		КонецЦикла;
	КонецЦикла;
	
	ИспользоватьВнешнихПользователей = ВнешниеПользователи.ИспользоватьВнешнихПользователей();
	
	СправочникВнешниеПользователиДоступен = ПравоДоступа(
		"Просмотр", Метаданные.Справочники.ВнешниеПользователи);
	
	СписокТиповПользователей.Добавить(
		Тип("СправочникСсылка.Пользователи"),
		"Пользователи");
	
	СписокТиповПользователей.Добавить(
		Тип("СправочникСсылка.ВнешниеПользователи"),
		"ВнешниеПользователи");
	
	// Заполнение списка выбора типа пользователей.
	ЗаполнитьСписокТиповПользователей();
	
	// Установка постоянной доступности свойств.
	
	// Определение необходимости настройки ограничений доступа.
	Если НЕ УправлениеДоступом.ОграничиватьДоступНаУровнеЗаписей() Тогда
		Элементы.Доступ.Видимость = Ложь;
	КонецЕсли;
	
	// Установка доступности при открытии формы только для просмотра.
	Элементы.ПользователиПодобрать.Доступность                = НЕ ТолькоПросмотр;
	Элементы.КонтекстноеМенюПользователиПодобрать.Доступность = НЕ ТолькоПросмотр;
	Элементы.ВидыДоступаИзменить.Доступность                  = НЕ ТолькоПросмотр;
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено()
		И Объект.Ссылка = Справочники.ГруппыДоступа.Администраторы Тогда
		
		ДействияСПользователемСервиса = Неопределено;
		УправлениеДоступомСлужебный.ПриПолученииДействийСПользователемСервиса(ДействияСПользователемСервиса);
		
		Если НЕ ДействияСПользователемСервиса.ИзменениеАдминистративногоДоступа Тогда
			ВызватьИсключение
				НСтр("ru = 'Не достаточно прав доступа для изменения состава администраторов.'");
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьНеИспользуемыеВидыДоступа(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Объект.Ссылка = ПредопределенноеЗначение("Справочник.ГруппыДоступа.Администраторы")
		И Объект.Профиль <> ПредопределенноеЗначение("Справочник.ПрофилиГруппДоступа.Администратор") Тогда
		
		Ответ = Вопрос(
			НСтр("ru = 'У группы доступа Администраторы должен быть профиль Администратор.
			           |
			           |Установить профиль в группе доступа (нет - открыть только для просмотра)?'"),
			РежимДиалогаВопрос.ДаНет,
			,
			КодВозвратаДиалога.Нет);
		
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Объект.Профиль = ПредопределенноеЗначение("Справочник.ПрофилиГруппДоступа.Администратор");
			Модифицированность = Истина;
		Иначе
			ТолькоПросмотр = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ТолькоПросмотр
	   И ИзменилсяСоставВидовДоступаПриЧтении Тогда
		
		Ответ = Вопрос(
			НСтр("ru = 'Изменился состав видов доступа профиля этой группы доступа.
			           |
			           |Обновить виды доступа в группе доступа (нет - открыть только для просмотра)?'"),
			РежимДиалогаВопрос.ДаНет,
			,
			КодВозвратаДиалога.Нет);
		
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ОбновитьСоставВидовДоступа();
		Иначе
			ТолькоПросмотр = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ТолькоПросмотр
	   И НЕ ЗначениеЗаполнено(Объект.Ссылка)
	   И ТипЗнч(ВладелецФормы) = Тип("ТаблицаФормы")
	   И ВладелецФормы.Родитель.Параметры.Свойство("Профиль") Тогда
		
		Если ЗначениеЗаполнено(ВладелецФормы.Родитель.Параметры.Профиль) Тогда
			Объект.Профиль = ВладелецФормы.Родитель.Параметры.Профиль;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ВРег(ИсточникВыбора.ИмяФормы) = ВРег("ОбщаяФорма.АутентификацияВСервисе")
	   И ВыбранноеЗначение <> Неопределено Тогда
		
		ПарольПользователяСервиса = ВыбранноеЗначение;
		Записать();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	НачальнаяНастройкаПриЧтенииИСоздании(ТекущийОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().РазделениеВключено
	   И Объект.Ссылка = ПредопределенноеЗначение("Справочник.ГруппыДоступа.Администраторы") Тогда
		
		ПарольЕщёНеВведен = Ложь;
		СтандартныеПодсистемыКлиент.ПриЗапросеПароляДляАутентификацииВСервисе(
			ЭтаФорма, ПарольПользователяСервиса, ПарольЕщёНеВведен);
		
		Если ПарольЕщёНеВведен Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если НЕ Пользователи.ЭтоПолноправныйПользователь() Тогда
		// Ответственный не может менять что-либо, кроме состава пользователей.
		// В целях предотвращения изменения группы доступа на клиенте в запрещенных
		// частях, выполняется повторное чтение объекта.
		ВосстановитьОбъектБезУчастниковГруппы(ТекущийОбъект);
	КонецЕсли;
	
	ТекущийОбъект.Пользователи.Очистить();
	
	Если ТекущийОбъект.Ссылка <> Справочники.ГруппыДоступа.Администраторы
	   И ЗначениеЗаполнено(ТекущийОбъект.Пользователь) Тогда
		
		Если ИспользованиеПерсональногоДоступа Тогда
			ТекущийОбъект.Пользователи.Добавить().Пользователь = ТекущийОбъект.Пользователь;
		КонецЕсли;
	Иначе
		Для каждого Элемент Из ПользователиГруппы.ПолучитьЭлементы() Цикл
			ТекущийОбъект.Пользователи.Добавить().Пользователь = Элемент.Пользователь;
		КонецЦикла;
	КонецЕсли;
	
	Если ТекущийОбъект.Ссылка = Справочники.ГруппыДоступа.Администраторы Тогда
		Объект.Ответственный = Неопределено;
	КонецЕсли;
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено()
		И Объект.Ссылка = Справочники.ГруппыДоступа.Администраторы Тогда
		
		ТекущийОбъект.ДополнительныеСвойства.Вставить(
			"ПарольПользователяСервиса", ПарольПользователяСервиса);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаполнитьСвойстваВидовДоступаВФорме();
	
	Если НЕ Объект.ПометкаУдаления
	   И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Профиль, "ПометкаУдаления") = Истина Тогда
		
		ПараметрыЗаписи.Вставить("ПредупредитьЧтоПрофильПомеченНаУдаление");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_ГруппыДоступа", Новый Структура, Объект.Ссылка);
	
	Если ПараметрыЗаписи.Свойство("ПредупредитьЧтоПрофильПомеченНаУдаление") Тогда
		
		Предупреждение(НСтр("ru = 'Группа доступа не влияет на права участников
		                          |так как её профиль помечен на удаление.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	ПроверенныеРеквизитыОбъекта = Новый Массив;
	Ошибки = Неопределено;
	
	// Проверка незаполненных и повторяющихся пользователей.
	ПроверенныеРеквизитыОбъекта.Добавить("Пользователи.Пользователь");
	ДеревоПользователейСтроки = РеквизитФормыВЗначение("ПользователиГруппы").Строки;
	КоличествоОшибок = ?(Ошибки = Неопределено, 0, Ошибки.Количество());
	
	// Подготовка данных для проверки соответствия типов объектов авторизации.
	Если Объект.ТипПользователей <> Неопределено Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр(
			"Пользователи", ДеревоПользователейСтроки.ВыгрузитьКолонку("Пользователь"));
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВнешниеПользователи.Ссылка КАК Пользователь,
		|	ВнешниеПользователи.ОбъектАвторизации КАК ТипОбъектовАвторизации
		|ИЗ
		|	Справочник.ВнешниеПользователи КАК ВнешниеПользователи
		|ГДЕ
		|	ВнешниеПользователи.Ссылка В(&Пользователи)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ГруппыВнешнихПользователей.Ссылка,
		|	ГруппыВнешнихПользователей.ТипОбъектовАвторизации
		|ИЗ
		|	Справочник.ГруппыВнешнихПользователей КАК ГруппыВнешнихПользователей
		|ГДЕ
		|	ГруппыВнешнихПользователей.Ссылка В(&Пользователи)";
		ТипыОбъектовАвторизацииПользователей = Запрос.Выполнить().Выгрузить();
		ТипыОбъектовАвторизацииПользователей.Индексы.Добавить("Пользователь");
	КонецЕсли;
	
	Для каждого ТекущаяСтрока Из ДеревоПользователейСтроки Цикл
		НомерСтроки = ДеревоПользователейСтроки.Индекс(ТекущаяСтрока);
		
		// Проверка заполнения значения.
		Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.Пользователь) Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,
				"ПользователиГруппы[%1].Пользователь",
				НСтр("ru = 'Пользователь не выбран.'"),
				"ПользователиГруппы",
				НомерСтроки,
				НСтр("ru = 'Пользователь в строке %1 не выбран.'"));
			Продолжить;
		КонецЕсли;
		
		// Проверка наличия повторяющихся значений.
		НайденныеЗначения = ДеревоПользователейСтроки.НайтиСтроки(
			Новый Структура("Пользователь", ТекущаяСтрока.Пользователь));
		
		Если НайденныеЗначения.Количество() > 1 Тогда
			
			Если ТипЗнч(ТекущаяСтрока.Пользователь) = Тип("СправочникСсылка.Пользователи") Тогда
				ТекстДляОднойОшибки      = НСтр("ru = 'Пользователь повторяется.'");
				ТекстДляНесколькихОшибок = НСтр("ru = 'Пользователь в строке %1 повторяется.'");
				
			ИначеЕсли ТипЗнч(ТекущаяСтрока.Пользователь) = Тип("СправочникСсылка.ВнешниеПользователи") Тогда
				ТекстДляОднойОшибки      = НСтр("ru = 'Внешний пользователь повторяется.'");
				ТекстДляНесколькихОшибок = НСтр("ru = 'Внешний пользователь в строке %1 повторяется.'");
				
			ИначеЕсли ТипЗнч(ТекущаяСтрока.Пользователь) = Тип("СправочникСсылка.ГруппыПользователей") Тогда
				ТекстДляОднойОшибки      = НСтр("ru = 'Группа пользователей повторяется.'");
				ТекстДляНесколькихОшибок = НСтр("ru = 'Группа пользователей в строке %1 повторяется.'");
			Иначе
				ТекстДляОднойОшибки      = НСтр("ru = 'Группа внешних пользователей повторяется.'");
				ТекстДляНесколькихОшибок = НСтр("ru = 'Группа внешних пользователей в строке %1 повторяется.'");
			КонецЕсли;
			
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,
				"ПользователиГруппы[%1].Пользователь",
				ТекстДляОднойОшибки,
				"ПользователиГруппы",
				НомерСтроки,
				ТекстДляНесколькихОшибок);
		КонецЕсли;
		
		// Проверка наличия только пользователей в предопределенной группе Администраторы.
		Если Объект.Ссылка = Справочники.ГруппыДоступа.Администраторы
		   И ТипЗнч(ТекущаяСтрока.Пользователь) <> Тип("СправочникСсылка.Пользователи") Тогда
			
			Если ТипЗнч(ТекущаяСтрока.Пользователь) = Тип("СправочникСсылка.ВнешниеПользователи") Тогда
				ТекстДляОднойОшибки      = НСтр("ru = 'Внешний пользователь недопустим в предопределенной группе доступа Администраторы.'");
				ТекстДляНесколькихОшибок = НСтр("ru = 'Внешний пользователь в строке %1 недопустим в предопределенной группе доступа Администраторы.'");
				
			ИначеЕсли ТипЗнч(ТекущаяСтрока.Пользователь) = Тип("СправочникСсылка.ГруппыПользователей") Тогда
				ТекстДляОднойОшибки      = НСтр("ru = 'Группа пользователей недопустима в предопределенной группе доступа Администраторы.'");
				ТекстДляНесколькихОшибок = НСтр("ru = 'Группа пользователей в строке %1 недопустима в предопределенной группе доступа Администраторы.'");
			Иначе
				ТекстДляОднойОшибки      = НСтр("ru = 'Группа внешних пользователей недопустима в предопределенной группе доступа Администраторы.'");
				ТекстДляНесколькихОшибок = НСтр("ru = 'Группа внешних пользователей в строке %1 недопустима в предопределенной группе доступа Администраторы.'");
			КонецЕсли;
			
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,
				"ПользователиГруппы[%1].Пользователь",
				ТекстДляОднойОшибки,
				"ПользователиГруппы",
				НомерСтроки,
				ТекстДляНесколькихОшибок);
		КонецЕсли;
		
		Если Объект.ТипПользователей <> Неопределено Тогда
			// Проверка совпадения типов объектов авторизации у внешних пользователей и
			// групп внешних пользователей с типом пользователей в группе доступа.
			ТекстДляОднойОшибки = "";
			
			Если ТипЗнч(ТекущаяСтрока.Пользователь) = Тип("СправочникСсылка.Пользователи") Тогда
				
				Если ТипЗнч(Объект.ТипПользователей) <> Тип("СправочникСсылка.Пользователи") Тогда
					ТекстДляОднойОшибки      = НСтр("ru = 'Пользователь недопустим для указанного типа участников.'");
					ТекстДляНесколькихОшибок = НСтр("ru = 'Пользователь в строке %1 недопустим для указанного типа участников.'");
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(ТекущаяСтрока.Пользователь) = Тип("СправочникСсылка.ГруппыПользователей") Тогда
				
				Если ТипЗнч(Объект.ТипПользователей) <> Тип("СправочникСсылка.Пользователи") Тогда
					ТекстДляОднойОшибки      = НСтр("ru = 'Группа пользователей недопустима для указанного типа участников.'");
					ТекстДляНесколькихОшибок = НСтр("ru = 'Группа пользователей в строке %1 недопустима для указанного типа участников.'");
				КонецЕсли;
			Иначе
				ОписаниеТипаОбъектаАвторизации = ТипыОбъектовАвторизацииПользователей.Найти(
					ТекущаяСтрока.Пользователь, "Пользователь");
				
				Если ТипЗнч(ТекущаяСтрока.Пользователь) = Тип("СправочникСсылка.ВнешниеПользователи") Тогда
					
					Если ОписаниеТипаОбъектаАвторизации = Неопределено
					 ИЛИ ТипЗнч(Объект.ТипПользователей) <> ТипЗнч(ОписаниеТипаОбъектаАвторизации.ТипОбъектовАвторизации) Тогда
						
						ТекстДляОднойОшибки      = НСтр("ru = 'Внешний пользователь недопустим для указанного типа участников.'");
						ТекстДляНесколькихОшибок = НСтр("ru = 'Внешний пользователь в строке %1 недопустим для указанного типа участников.'");
					КонецЕсли;
				
				Иначе // Группа внешних пользователей.
					
					Если ОписаниеТипаОбъектаАвторизации = Неопределено
					 ИЛИ ТипЗнч(Объект.ТипПользователей) = Тип("СправочникСсылка.Пользователи")
					 ИЛИ ОписаниеТипаОбъектаАвторизации.ТипОбъектовАвторизации <> Неопределено
					   И ТипЗнч(Объект.ТипПользователей) <> ТипЗнч(ОписаниеТипаОбъектаАвторизации.ТипОбъектовАвторизации) Тогда
						
						ТекстДляОднойОшибки      = НСтр("ru = 'Группа внешних пользователей недопустима для указанного типа участников.'");
						ТекстДляНесколькихОшибок = НСтр("ru = 'Группа внешних пользователей в строке %1 недопустима для указанного типа участников.'");
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ТекстДляОднойОшибки) Тогда
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,
					"ПользователиГруппы[%1].Пользователь",
					ТекстДляОднойОшибки,
					"ПользователиГруппы",
					НомерСтроки,
					ТекстДляНесколькихОшибок);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если НЕ ОбщегоНазначенияПовтИсп.РазделениеВключено()
		И Объект.Ссылка = Справочники.ГруппыДоступа.Администраторы Тогда
		
		ОписаниеОшибки = "";
		УправлениеДоступомСлужебный.ПроверитьНаличиеПользователяИБВГруппеДоступаАдминистраторы(
			ПользователиГруппы.ПолучитьЭлементы(), ОписаниеОшибки);
		
		Если ЗначениеЗаполнено(ОписаниеОшибки) Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,
				"ПользователиГруппы", ОписаниеОшибки);
		КонецЕсли;
	КонецЕсли;
	
	// Проверка незаполненных и повторяющихся значений доступа.
	ПроверенныеРеквизитыОбъекта.Добавить("ВидыДоступа.ВидДоступа");
	ПроверенныеРеквизитыОбъекта.Добавить("ЗначенияДоступа.ВидДоступа");
	ПроверенныеРеквизитыОбъекта.Добавить("ЗначенияДоступа.ЗначениеДоступа");
	
	Если КоличествоОшибок <> ?(Ошибки = Неопределено, 0, Ошибки.Количество()) Тогда
		Элементы.ПользователиИДоступ.ТекущаяСтраница = Элементы.ПользователиГруппы;
	Иначе
		НомерСтрокиВидаДоступа = Объект.ВидыДоступа.Количество()-1;
		
		Пока НЕ Отказ И НомерСтрокиВидаДоступа >= 0 Цикл
			ТекущаяСтрокаВидаДоступа = Объект.ВидыДоступа.Получить(НомерСтрокиВидаДоступа);
			
			ЗначенияДоступаВидаДоступа = Объект.ЗначенияДоступа.НайтиСтроки(
				Новый Структура("ВидДоступа", ТекущаяСтрокаВидаДоступа.ВидДоступа));
			НомерСтроки = ЗначенияДоступаВидаДоступа.Количество()-1;
			
			Пока НомерСтроки >= 0 Цикл
				
				ТекущаяСтрока = ЗначенияДоступаВидаДоступа.Получить(НомерСтроки);
				
				// Проверка заполнения значения.
				Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.ЗначениеДоступа) Тогда
					Элементы.ВидыДоступа.ТекущаяСтрока = ТекущаяСтрокаВидаДоступа.ПолучитьИдентификатор();
					ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,
						"Объект.ЗначенияДоступа[%1].ЗначениеДоступа",
						НСтр("ru = 'Значение не выбрано.'"),
						"ЗначенияДоступа",
						НомерСтроки,
						НСтр("ru = 'Значение в строке %1 не выбрано.'"));
					Отказ = Истина;
					Прервать;
				КонецЕсли;
				
				// Проверка наличия повторяющихся значений.
				Отбор = Новый Структура;
				Отбор.Вставить("ВидДоступа",      ТекущаяСтрокаВидаДоступа.ВидДоступа);
				Отбор.Вставить("ЗначениеДоступа", ТекущаяСтрока.ЗначениеДоступа);
				НайденныеЗначения = Объект.ЗначенияДоступа.НайтиСтроки(Отбор);
				
				Если НайденныеЗначения.Количество() > 1 Тогда
					Элементы.ВидыДоступа.ТекущаяСтрока = ТекущаяСтрокаВидаДоступа.ПолучитьИдентификатор();
					ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,
						"Объект.ЗначенияДоступа[%1].ЗначениеДоступа",
						НСтр("ru = 'Значение повторяется.'"),
						"ЗначенияДоступа",
						НомерСтроки,
						НСтр("ru = 'Значение в строке %1 повторяется.'"));
					Отказ = Истина;
					Прервать;
				КонецЕсли;
				
				НомерСтроки = НомерСтроки - 1;
			КонецЦикла;
			
			НомерСтрокиВидаДоступа = НомерСтрокиВидаДоступа - 1;
		КонецЦикла;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки, Отказ);
	
	ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("Объект"));
	ТекущийОбъект = РеквизитФормыВЗначение("Объект");
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить(
		"ПроверенныеРеквизитыОбъекта", ПроверенныеРеквизитыОбъекта);
	
	Если НЕ ТекущийОбъект.ПроверитьЗаполнение() Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ПрофильПриИзменении(Элемент)
	
	ПрофильПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеТипаПользователейНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ВыбранныйЭлемент = ВыбратьИзСписка(
		ТипыПользователей,
		Элемент,
		ТипыПользователей.НайтиПоЗначению(Объект.ТипПользователей));
	
	Если ВыбранныйЭлемент <> Неопределено
	   И Объект.ТипПользователей <> ВыбранныйЭлемент.Значение Тогда
		
		Модифицированность = Истина;
		Объект.ТипПользователей        = ВыбранныйЭлемент.Значение;
		ПредставлениеТипаПользователей = ВыбранныйЭлемент.Представление;
		
		Если Объект.ТипПользователей <> Неопределено Тогда
			УдалитьНеТипичныхПользователей();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеТипаПользователейОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательВладелецНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ Пользователи

&НаКлиенте
Процедура ПользователиПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПользователиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Если Копирование Тогда
		
		Если Элемент.ТекущиеДанные.ПолучитьРодителя() <> Неопределено Тогда
			Отказ = Истина;
			
			Элементы.Пользователи.ТекущаяСтрока =
				Элемент.ТекущиеДанные.ПолучитьРодителя().ПолучитьИдентификатор();
			
			Элементы.Пользователи.СкопироватьСтроку();
		КонецЕсли;
		
	ИначеЕсли Элементы.Пользователи.ТекущаяСтрока <> Неопределено Тогда
		Отказ = Истина;
		Элементы.Пользователи.СкопироватьСтроку();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПользователиПередНачаломИзменения(Элемент, Отказ)
	
	Если Элемент.ТекущиеДанные.ПолучитьРодителя() <> Неопределено Тогда
		Отказ = Истина;
		
		Элементы.Пользователи.ТекущаяСтрока =
			Элемент.ТекущиеДанные.ПолучитьРодителя().ПолучитьИдентификатор();
		
		Элементы.Пользователи.ИзменитьСтроку();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПользователиПередУдалением(Элемент, Отказ)
	
	СтрокаРодителя = Элемент.ТекущиеДанные.ПолучитьРодителя();
	
	Если СтрокаРодителя <> Неопределено Тогда
		Отказ = Истина;
		
		Если ТипЗнч(СтрокаРодителя.Пользователь) =
		        Тип("СправочникСсылка.ГруппыПользователей") Тогда
			
			Предупреждение(
				НСтр("ru = 'Пользователи групп отображаются для сведения,
				           |что они получают доступ групп пользователей.
				           |Их нельзя удалить в этом списке.'"));
		Иначе
			Предупреждение(
				НСтр("ru = 'Внешние пользователи групп отображаются для сведения,
				           |что они получают доступ групп внешних пользователей.
				           |Их нельзя удалить в этом списке.'"));
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПользователиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Копирование Тогда
		Элемент.ТекущиеДанные.Пользователь = Неопределено;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.Пользователь = Неопределено Тогда
		Элемент.ТекущиеДанные.НомерКартинки = -1;
		Элемент.ТекущиеДанные.Пользователь = ПредопределенноеЗначение(
			"Справочник.Пользователи.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПользователиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока
	   И Элемент.ТекущиеДанные <> Неопределено
	   И Элемент.ТекущиеДанные.Пользователь = ПредопределенноеЗначение(
	     	"Справочник.Пользователи.ПустаяСсылка") Тогда
		
		Элемент.ТекущиеДанные.Пользователь = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПользователиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ЕстьИзменения = Ложь;
	Если РежимПодбора Тогда
		ПользователиГруппы.ПолучитьЭлементы().Очистить();
	КонецЕсли;
	ИзмененныеСтроки = Новый Массив;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		Для каждого Значение Из ВыбранноеЗначение Цикл
			ЗначениеНеНайдено = Истина;
			Для каждого Элемент Из ПользователиГруппы.ПолучитьЭлементы() Цикл
				Если Элемент.Пользователь = Значение Тогда
					ЗначениеНеНайдено = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если ЗначениеНеНайдено Тогда
				НовыйЭлемент = ПользователиГруппы.ПолучитьЭлементы().Добавить();
				НовыйЭлемент.Пользователь = Значение;
				ИзмененныеСтроки.Добавить(НовыйЭлемент.ПолучитьИдентификатор());
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли Элемент.ТекущиеДанные.Пользователь <> ВыбранноеЗначение Тогда
		Элемент.ТекущиеДанные.Пользователь = ВыбранноеЗначение;
		ИзмененныеСтроки.Добавить(Элемент.ТекущаяСтрока);
	КонецЕсли;
	
	Если ИзмененныеСтроки.Количество() > 0 Тогда
		ОбновленныеСтроки = Неопределено;
		ОбновитьПользователейГрупп(ИзмененныеСтроки, ОбновленныеСтроки);
		Для каждого ИдентификаторСтроки Из ОбновленныеСтроки Цикл
			Элементы.Пользователи.Развернуть(ИдентификаторСтроки);
		КонецЦикла;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПользователиПослеУдаления(Элемент)
	
	// Установка отображения дерева.
	ЕстьВложенные = Ложь;
	Для каждого Элемент Из ПользователиГруппы.ПолучитьЭлементы() Цикл
		Если Элемент.ПолучитьЭлементы().Количество() > 0 Тогда
			ЕстьВложенные = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Элементы.Пользователи.Отображение =
		?(ЕстьВложенные, ОтображениеТаблицы.Дерево, ОтображениеТаблицы.Список);
	
КонецПроцедуры


&НаКлиенте
Процедура ПользовательПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Элементы.Пользователи.ТекущиеДанные.Пользователь) Тогда
		ОбновитьПользователейГрупп(Элементы.Пользователи.ТекущаяСтрока);
		Элементы.Пользователи.Развернуть(Элементы.Пользователи.ТекущаяСтрока);
	Иначе
		Элементы.Пользователи.ТекущиеДанные.НомерКартинки = -1;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ВыбратьПодобратьПользователей(Ложь);
	РежимПодбора = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Элементы.Пользователи.ТекущиеДанные.НомерКартинки = -1;
	Элементы.Пользователи.ТекущиеДанные.Пользователь  = ПредопределенноеЗначение(
		"Справочник.Пользователи.ПустаяСсылка");
	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		Если Объект.Ссылка = ПредопределенноеЗначение("Справочник.ГруппыДоступа.Администраторы") Тогда
			ДанныеВыбора = СформироватьДанныеВыбораПользователя(Текст, Ложь, Ложь);
		Иначе
			ДанныеВыбора = СформироватьДанныеВыбораПользователя(Текст);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПользовательАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		Если Объект.Ссылка = ПредопределенноеЗначение("Справочник.ГруппыДоступа.Администраторы") Тогда
			ДанныеВыбора = СформироватьДанныеВыбораПользователя(Текст, Ложь, Ложь);
		Иначе
			ДанныеВыбора = СформироватьДанныеВыбораПользователя(Текст);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ВидыДоступа

&НаКлиенте
Процедура ВидыДоступаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если НЕ ТолькоПросмотр Тогда
		Элементы.ВидыДоступа.ИзменитьСтроку();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыДоступаПриАктивизацииСтроки(Элемент)
	
	ПриИзмененииТекущегоВидаДоступа(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыДоступаПриАктивизацииЯчейки(Элемент)
	
	Если Элементы.ВидыДоступа.ТекущийЭлемент <> Элементы.ВидыДоступаИспользование Тогда
		Элементы.ВидыДоступа.ТекущийЭлемент = Элементы.ВидыДоступаИспользование;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыДоступаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ПриИзмененииТекущегоВидаДоступа(ЭтаФорма);
	
КонецПроцедуры


&НаКлиенте
Процедура ВидыДоступаИспользованиеПриИзменении(Элемент)
	
	Элементы.ВидыДоступа.ЗакончитьРедактированиеСтроки(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыДоступаИспользованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеВыбора = Элемент.СписокВыбора;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыДоступаИспользованиеОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыДоступаИспользованиеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Элементы.ВидыДоступа.ТекущиеДанные.ДоступРазрешен = (ВыбранноеЗначение = "ВсеРазрешены");
	
	Модифицированность = Истина;
	ПриИзмененииТекущегоВидаДоступа(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ЗначенияДоступа

&НаКлиенте
Процедура ЗначенияДоступаПриИзменении(Элемент)
	
	Если Элемент.ТекущиеДанные <> Неопределено
	   И НЕ ЗначениеЗаполнено(Элемент.ТекущиеДанные.ВидДоступа) Тогда
		
		Элемент.ТекущиеДанные.ВидДоступа = ТекущийВидДоступа;
		
		Отбор = Новый Структура("ВидДоступа", ТекущийВидДоступа);
		
		Элемент.ТекущиеДанные.НомерСтрокиПоВиду =
			Объект.ЗначенияДоступа.НайтиСтроки(Отбор).Количество();
	КонецЕсли;
	
	ОбновитьНомерСтрокиПоВиду(ЭтаФорма, Элементы.ВидыДоступа.ТекущиеДанные);
	ОбновитьПредставлениеИспользованияВидаДоступа(ЭтаФорма, Элементы.ВидыДоступа.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначенияДоступаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Элемент.ТекущиеДанные.ЗначениеДоступа = Неопределено Тогда
		Элемент.ТекущиеДанные.ЗначениеДоступа = ТекущиеТипыЗначенийДоступа[0].Значение;
	КонецЕсли;
	
	Элементы.ЗначениеДоступа.КнопкаОчистки
		= ТекущийТипЗначенияДоступа <> Неопределено
		И ТекущиеТипыЗначенийДоступа.Количество() > 1;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеДоступаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если НЕ ВыбранТипЗначенияДоступа(ТекущиеТипыЗначенийДоступа) Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ЗначенияДоступа.ТекущиеДанные;
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.ЗначениеДоступа)
	   И ТекущиеДанные.ЗначениеДоступа <> ТекущийТипЗначенияДоступа Тогда
		
		ТекущиеДанные.ЗначениеДоступа = ТекущийТипЗначенияДоступа;
	КонецЕсли;
	
	Элементы.ЗначениеДоступа.КнопкаОчистки
		= ТекущийТипЗначенияДоступа <> Неопределено
		И ТекущиеТипыЗначенийДоступа.Количество() > 1;
	
	Если ТекущийТипЗначенияДоступа =
	     	ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка")
	     
	 ИЛИ ТекущийТипЗначенияДоступа =
	     	ПредопределенноеЗначение("Справочник.ГруппыПользователей.ПустаяСсылка") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("РежимВыбора", Истина);
		ПараметрыФормы.Вставить("ТекущаяСтрока", ТекущиеДанные.ЗначениеДоступа);
		ПараметрыФормы.Вставить("ВыборГруппПользователей", Истина);
		
		ОткрытьФорму("Справочник.Пользователи.ФормаВыбора", ПараметрыФормы, Элемент);
		
	ИначеЕсли ТекущийТипЗначенияДоступа =
	          	ПредопределенноеЗначение("Справочник.ВнешниеПользователи.ПустаяСсылка")
	          
	      ИЛИ ТекущийТипЗначенияДоступа =
	          	ПредопределенноеЗначение("Справочник.ГруппыВнешнихПользователей.ПустаяСсылка") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("РежимВыбора", Истина);
		ПараметрыФормы.Вставить("ТекущаяСтрока", ТекущиеДанные.ЗначениеДоступа);
		ПараметрыФормы.Вставить("ВыборГруппВнешнихПользователей", Истина);
		
		ОткрытьФорму("Справочник.ВнешниеПользователи.ФормаВыбора", ПараметрыФормы, Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеДоступаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ЗначенияДоступа.ТекущиеДанные;
	
	Если ВыбранноеЗначение = Тип("СправочникСсылка.Пользователи") ИЛИ
	     ВыбранноеЗначение = Тип("СправочникСсылка.ГруппыПользователей") Тогда
	
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("РежимВыбора", Истина);
		ПараметрыФормы.Вставить("ТекущаяСтрока", ТекущиеДанные.ЗначениеДоступа);
		ПараметрыФормы.Вставить("ВыборГруппПользователей", Истина);
		
		ОткрытьФорму("Справочник.Пользователи.ФормаВыбора", ПараметрыФормы, Элемент);
		
	ИначеЕсли ВыбранноеЗначение = Тип("СправочникСсылка.ВнешниеПользователи") ИЛИ
	          ВыбранноеЗначение = Тип("СправочникСсылка.ГруппыВнешнихПользователей") Тогда
	
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("РежимВыбора", Истина);
		ПараметрыФормы.Вставить("ТекущаяСтрока", ТекущиеДанные.ЗначениеДоступа);
		ПараметрыФормы.Вставить("ВыборГруппВнешнихПользователей", Истина);
		
		ОткрытьФорму("Справочник.ВнешниеПользователи.ФормаВыбора", ПараметрыФормы, Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеДоступаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущийТипЗначенияДоступа = Неопределено;
	
	Элементы.ЗначенияДоступа.ТекущиеДанные.ЗначениеДоступа = ТекущиеТипыЗначенийДоступа[0].Значение;
	Элементы.ЗначениеДоступа.КнопкаОчистки = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначенияДоступаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		ПриИзмененииТекущегоВидаДоступа(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеДоступаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		
		Если ТекущийВидДоступа =
		     	ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыДоступа.ВнешниеПользователи")
		     
		 ИЛИ ТекущийВидДоступа =
		     	ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыДоступа.Пользователи") Тогда
			
			ДанныеВыбора = СформироватьДанныеВыбораПользователя(
				Текст,
				,
				ТекущийВидДоступа =
					ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыДоступа.ВнешниеПользователи"),
				
				ТекущийВидДоступа <>
					ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыДоступа.Пользователи"));
		Иначе
			ДанныеВыбора = СформироватьДанныеВыбораЗначенияДоступа(
				Текст, ТекущийВидДоступа, Ложь);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеДоступаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		
		Если ТекущийВидДоступа =
		     	ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыДоступа.ВнешниеПользователи")
		     
		 ИЛИ ТекущийВидДоступа =
		     	ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыДоступа.Пользователи") Тогда
			
			ДанныеВыбора = СформироватьДанныеВыбораПользователя(
				Текст,
				,
				ТекущийВидДоступа =
					ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыДоступа.ВнешниеПользователи"),
				
				ТекущийВидДоступа <>
					ПредопределенноеЗначение("ПланВидовХарактеристик.ВидыДоступа.Пользователи"));
		Иначе
			ДанныеВыбора = СформироватьДанныеВыбораЗначенияДоступа(
				Текст, ТекущийВидДоступа, Ложь);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура Подобрать(Команда)
	
	ВыбратьПодобратьПользователей(Истина);
	РежимПодбора = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьНеиспользуемыеВидыДоступа(Команда)
	
	ОбновитьНеиспользуемыеВидыДоступа(Ложь);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура НачальнаяНастройкаПриЧтенииИСоздании(ТекущийОбъект)
	
	Если ТекущийОбъект.Ссылка <> Справочники.ГруппыДоступа.Администраторы Тогда
		
		// Подготовка к режиму персональной группы доступа.
		Если ЗначениеЗаполнено(ТекущийОбъект.Пользователь) Тогда
			
			АвтоЗаголовок = Ложь;
			
			Заголовок
				= ТекущийОбъект.Наименование
				+ ": "
				+ ТекущийОбъект.Пользователь
				+ " "
				+ НСтр("ru = '(Группа доступа)'");
			
			ИспользованиеПерсональногоДоступа = ТекущийОбъект.Пользователи.Найти(
				ТекущийОбъект.Пользователь, "Пользователь") <> Неопределено;
		Иначе
			АвтоЗаголовок = Истина;
		КонецЕсли;
		
		ПользовательЗаполнен = ЗначениеЗаполнено(ТекущийОбъект.Пользователь);
		
		Элементы.Наименование.ТолькоПросмотр                 = ПользовательЗаполнен;
		Элементы.Родитель.ТолькоПросмотр                     = ПользовательЗаполнен;
		Элементы.Профиль.ТолькоПросмотр                      = ПользовательЗаполнен;
		Элементы.СвойстваПерсональнойГруппы.Видимость        = ПользовательЗаполнен;
		Элементы.ПредставлениеТипаПользователей.Видимость    = НЕ ПользовательЗаполнен;
		Элементы.ПользователиГруппы.Видимость                = НЕ ПользовательЗаполнен;
		Элементы.ОтветственныйЗаПерсональнуюГруппу.Видимость = ПользовательЗаполнен;
		
		Элементы.ПользователиИДоступ.ОтображениеСтраниц =
			?(ПользовательЗаполнен,
			  ОтображениеСтраницФормы.Нет,
			  ОтображениеСтраницФормы.ЗакладкиСверху);
		
		Элементы.ВидыДоступа.ПоложениеЗаголовка =
			?(ПользовательЗаполнен,
			  ПоложениеЗаголовкаЭлементаФормы.Верх,
			  ПоложениеЗаголовкаЭлементаФормы.Нет);
		
		Элементы.ПредставлениеТипаПользователей.Видимость
			= НЕ ПользовательЗаполнен
			И (    ВнешниеПользователи.ИспользоватьВнешнихПользователей()
			   ИЛИ   Объект.ТипПользователей <> Неопределено
			       И ТипЗнч(Объект.ТипПользователей) <> Тип("СправочникСсылка.Пользователи"));
		
		Элементы.ПользовательВладелец.ТолькоПросмотр
			= УправлениеДоступомПереопределяемый.УпрощенныйИнтерфейсНастройкиПравДоступа();
		
		// Подготовка к режиму редактирования пользователей ответственным за участников.
		Если НЕ Пользователи.ЭтоПолноправныйПользователь() Тогда
			Элементы.Наименование.ТолькоПросмотр = Истина;
			Элементы.Родитель.ТолькоПросмотр = Истина;
			Элементы.Профиль.Видимость = Ложь;
			Элементы.ПредставлениеТипаПользователей.ТолькоПросмотр = Истина;
			Элементы.Доступ.Видимость  = Ложь;
			Элементы.ПользователиИДоступ.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
			Элементы.Ответственный.Видимость = Ложь;
			Элементы.ОтветственныйЗаПерсональнуюГруппу.Видимость = Ложь;
			Элементы.Описание.Видимость = Ложь;
		КонецЕсли;
	Иначе
		Элементы.Наименование.ТолькоПросмотр                   = Истина;
		Элементы.Профиль.ТолькоПросмотр                        = Истина;
		Элементы.СвойстваПерсональнойГруппы.Видимость          = Ложь;
		Элементы.ПредставлениеТипаПользователей.ТолькоПросмотр = Истина;
		Элементы.Ответственный.ТолькоПросмотр                  = Истина;
		Элементы.ОтветственныйЗаПерсональнуюГруппу.Видимость   = Ложь;
		Элементы.Описание.ТолькоПросмотр                       = Истина;
		
		Если НЕ УправлениеДоступом.ЕстьРоль("ПолныеПрава") Тогда
			ТолькоПросмотр = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьСоставВидовДоступа(Истина);
	
	// Подготовка дерева пользователей.
	ДеревоПользователей = ПользователиГруппы.ПолучитьЭлементы();
	ДеревоПользователей.Очистить();
	Для каждого СтрокаТЧ Из ТекущийОбъект.Пользователи Цикл
		ДеревоПользователей.Добавить().Пользователь = СтрокаТЧ.Пользователь;
	КонецЦикла;
	ОбновитьПользователейГрупп();
	
	ЗаполнитьСвойстваВидовДоступаВФорме();
	
КонецПроцедуры

&НаСервере
Процедура ПрофильПриИзмененииНаСервере()
	
	ОбновитьСоставВидовДоступа();
	ЗаполнитьСвойстваВидовДоступаВФорме();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСвойстваВидовДоступаВФорме()
	
	Для каждого Строка Из Объект.ВидыДоступа Цикл
		Строка.ИспользуетсяВПрограмме = УправлениеДоступомСлужебный.ВидДоступаИспользуется(Строка.ВидДоступа);
		ОбновитьПредставлениеИспользованияВидаДоступа(ЭтаФорма, Строка);
		ОбновитьНомерСтрокиПоВиду(ЭтаФорма, Строка);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокТиповПользователей()
	
	ТипыПользователей.Добавить(
		Неопределено,
		НСтр("ru = 'Произвольные участники'"));
	
	ТипыПользователей.Добавить(
		Справочники.Пользователи.ПустаяСсылка(),
		НСтр("ru = 'Обычные пользователи'"));
	
	Если ИспользоватьВнешнихПользователей Тогда
		
		ТипыСсылокОбъектовАвторизации =
			Метаданные.Справочники.ВнешниеПользователи.Реквизиты.ОбъектАвторизации.Тип.Типы();
		
		Для каждого ТипСсылкиОбъектаАвторизации ИЗ ТипыСсылокОбъектовАвторизации Цикл
			
			МетаданныеТипа = Метаданные.НайтиПоТипу(ТипСсылкиОбъектаАвторизации);
			
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(ТипСсылкиОбъектаАвторизации);
			ОписаниеТипаСсылки = Новый ОписаниеТипов(МассивТипов);
			
			ТипыПользователей.Добавить(
				ОписаниеТипаСсылки.ПривестиЗначение(Неопределено),
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Внешние пользователи (%1)'"),
					МетаданныеТипа.Синоним));
		КонецЦикла;
	КонецЕсли;
	
	НайденныйЭлемент = ТипыПользователей.НайтиПоЗначению(Объект.ТипПользователей);
	
	ПредставлениеТипаПользователей =
		?(НайденныйЭлемент = Неопределено,
		  СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		      НСтр("ru = 'Неизвестный тип ""%1""'"),
		      Строка(ТипЗнч(Объект.ТипПользователей))),
		  НайденныйЭлемент.Представление);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьНеТипичныхПользователей()
	
	Если Объект.ТипПользователей = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Объект.ТипПользователей) = Тип("СправочникСсылка.Пользователи") Тогда
	
		Индекс = Объект.Пользователи.Количество()-1;
		Пока Индекс >= 0 Цикл
			
			Если ТипЗнч(Объект.Пользователи[Индекс].Пользователь)
			     	<> Тип("СправочникСсылка.Пользователи")
			     
			   И ТипЗнч(Объект.Пользователи[Индекс].Пользователь)
			     	<> Тип("СправочникСсылка.ГруппыПользователей") Тогда
				
				Объект.Пользователи.Удалить(Индекс);
			КонецЕсли;
			
			Индекс = Индекс - 1;
		КонецЦикла;
	Иначе
		Индекс = Объект.Пользователи.Количество()-1;
		Пока Индекс >= 0 Цикл
			
			Если ТипЗнч(Объект.Пользователи[Индекс].Пользователь)
			     	<> Тип("СправочникСсылка.ВнешниеПользователи")
			     
			   И ТипЗнч(Объект.Пользователи[Индекс].Пользователь)
			     	<> Тип("СправочникСсылка.ГруппыВнешнихПользователей") Тогда
				
				Объект.Пользователи.Удалить(Индекс);
			КонецЕсли;
			Индекс = Индекс - 1;
		КонецЦикла;
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ВнешниеПользователи.Ссылка
		|ИЗ
		|	Справочник.ВнешниеПользователи КАК ВнешниеПользователи
		|ГДЕ
		|	ТИПЗНАЧЕНИЯ(ВнешниеПользователи.ОбъектАвторизации) <> &ТипВнешнихПользователей
		|	И ВнешниеПользователи.Ссылка В(&ВыбранныеВнешниеПользователиИГруппы)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ГруппыВнешнихПользователей.Ссылка
		|ИЗ
		|	Справочник.ГруппыВнешнихПользователей КАК ГруппыВнешнихПользователей
		|ГДЕ
		|	ГруппыВнешнихПользователей.ТипОбъектовАвторизации <> НЕОПРЕДЕЛЕНО
		|	И ТИПЗНАЧЕНИЯ(ГруппыВнешнихПользователей.ТипОбъектовАвторизации) <> &ТипВнешнихПользователей
		|	И ГруппыВнешнихПользователей.Ссылка В(&ВыбранныеВнешниеПользователиИГруппы)");
		
		Запрос.УстановитьПараметр(
			"ВыбранныеВнешниеПользователиИГруппы",
			Объект.Пользователи.Выгрузить().ВыгрузитьКолонку("Пользователь"));
		
		Запрос.УстановитьПараметр("ТипВнешнихПользователей", ТипЗнч(Объект.ТипПользователей));
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Отбор = Новый Структура("Пользователь", Выборка.Ссылка);
			НайденныеСтроки = Объект.Пользователи.НайтиСтроки(Отбор);
			Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				Объект.Пользователи.Удалить(Объект.Пользователи.Индекс(НайденнаяСтрока));
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры


&НаСервере
Процедура ОбновитьСоставВидовДоступа(Знач ПриЧтенииНаСервере = Ложь)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПрофилиГруппДоступаВидыДоступа.ВидДоступа,
	|	ПрофилиГруппДоступаВидыДоступа.Предустановленный,
	|	ПрофилиГруппДоступаВидыДоступа.ДоступРазрешен
	|ИЗ
	|	Справочник.ПрофилиГруппДоступа.ВидыДоступа КАК ПрофилиГруппДоступаВидыДоступа
	|ГДЕ
	|	ПрофилиГруппДоступаВидыДоступа.Ссылка = &Ссылка
	|	И ПрофилиГруппДоступаВидыДоступа.ВидДоступа.Предопределенный";
	
	Запрос.УстановитьПараметр("Ссылка", Объект.Профиль);
	
	УстановитьПривилегированныйРежим(Истина);
	ВидыДоступаПрофиля = Запрос.Выполнить().Выгрузить();
	УстановитьПривилегированныйРежим(Ложь);
	
	ИзменилсяСоставВидовДоступа = Ложь;
	
	// Добавление недостающих видов доступа.
	Для каждого СтрокаТЧ Из ВидыДоступаПрофиля Цикл
		
		Отбор = Новый Структура("ВидДоступа", СтрокаТЧ.ВидДоступа);
		СвойстваВидаДоступа = УправлениеДоступомСлужебный.СвойстваВидаДоступа(СтрокаТЧ.ВидДоступа);
		
		Если СвойстваВидаДоступа <> Неопределено
		   И НЕ СвойстваВидаДоступа.ВидДоступаИспользуетсяВсегда
		   И НЕ СтрокаТЧ.Предустановленный
		   И Объект.ВидыДоступа.НайтиСтроки(Отбор).Количество() = 0 Тогда
			
			ИзменилсяСоставВидовДоступа = Истина;
			Если ПриЧтенииНаСервере Тогда
				Прервать;
			Иначе
				НоваяСтрока = Объект.ВидыДоступа.Добавить();
				НоваяСтрока.ВидДоступа      = СтрокаТЧ.ВидДоступа;
				НоваяСтрока.ДоступРазрешен  = СтрокаТЧ.ДоступРазрешен;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Удаление лишних видов доступа.
	Индекс = Объект.ВидыДоступа.Количество() - 1;
	Пока Индекс >= 0 Цикл
		
		
		ТекущийВидДоступа1 = Объект.ВидыДоступа[Индекс].ВидДоступа;
		Отбор = Новый Структура("ВидДоступа", ТекущийВидДоступа1);
		
		СвойстваВидаДоступаВПрофиле = ВидыДоступаПрофиля.НайтиСтроки(Отбор);
		СвойстваВидаДоступа = УправлениеДоступомСлужебный.СвойстваВидаДоступа(ТекущийВидДоступа1);
		
		Если СвойстваВидаДоступа = Неопределено
		 ИЛИ СвойстваВидаДоступа.ВидДоступаИспользуетсяВсегда
		 ИЛИ СвойстваВидаДоступаВПрофиле.Количество() > 0
		   И СвойстваВидаДоступаВПрофиле[0].Предустановленный
		 ИЛИ ВидыДоступаПрофиля.НайтиСтроки(Отбор).Количество() = 0 Тогда
			
			ИзменилсяСоставВидовДоступа = Истина;
			Если ПриЧтенииНаСервере Тогда
				Прервать;
			Иначе
				Объект.ВидыДоступа.Удалить(Индекс);
				Для каждого ЭлементКоллекции Из Объект.ЗначенияДоступа.НайтиСтроки(Отбор) Цикл
					Объект.ЗначенияДоступа.Удалить(ЭлементКоллекции);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		Индекс = Индекс - 1;
	КонецЦикла;
	
	Модифицированность = Модифицированность
	                 ИЛИ   ИзменилсяСоставВидовДоступа
	                     И НЕ ПриЧтенииНаСервере;
	
	// Установка флажка для запроса у пользователя решения обновить состав видов доступа.
	Если ПриЧтенииНаСервере
	     И НЕ Объект.Ссылка.Пустая() // Это новый.
	     И ИзменилсяСоставВидовДоступа
	     И Пользователи.ЭтоПолноправныйПользователь() // Только администратор может обновлять виды доступа.
	     И ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.Ссылка, "Профиль") = Объект.Профиль Тогда
	     
		ИзменилсяСоставВидовДоступаПриЧтении = Истина;
	КонецЕсли;
	
	Элементы.Доступ.Доступность = Объект.ВидыДоступа.Количество() > 0;
	
	// Установка порядка видов доступа по профилю.
	Если НЕ ИзменилсяСоставВидовДоступаПриЧтении Тогда
		Индекс = ВидыДоступаПрофиля.Количество()-1;
		Пока Индекс >=0 Цикл
			Если ВидыДоступаПрофиля[Индекс].Предустановленный Тогда
				ВидыДоступаПрофиля.Удалить(Индекс);
			КонецЕсли;
			Индекс = Индекс - 1;
		КонецЦикла;
		Для каждого СтрокаТЧ Из ВидыДоступаПрофиля Цикл
			Отбор = Новый Структура("ВидДоступа", СтрокаТЧ.ВидДоступа);
			Индекс = Объект.ВидыДоступа.Индекс(Объект.ВидыДоступа.НайтиСтроки(Отбор)[0]);
			Объект.ВидыДоступа.Сдвинуть(Индекс, ВидыДоступаПрофиля.Индекс(СтрокаТЧ) - Индекс);
		КонецЦикла;
	КонецЕсли;
	
	Если ИзменилсяСоставВидовДоступа Тогда
		ТекущийВидДоступа = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПриИзмененииТекущегоВидаДоступа(Знач Форма)
	
	Элементы = Форма.Элементы;
	
	ЗначенияЗадаются = Ложь;
	
	#Если Клиент Тогда
		ТекущиеДанные = Элементы.ВидыДоступа.ТекущиеДанные;
	#Иначе
		ТекущиеДанные = Форма.Объект.ВидыДоступа.НайтиПоИдентификатору(
			?(Элементы.ВидыДоступа.ТекущаяСтрока = Неопределено,
			  -1,
			  Элементы.ВидыДоступа.ТекущаяСтрока));
	#КонецЕсли
	
	Если ТекущиеДанные <> Неопределено Тогда
		Если ТекущиеДанные.ИспользуетсяВПрограмме Тогда
			Если Элементы.ВидДоступаНеИспользуется.Видимость Тогда
				Элементы.ВидДоступаНеИспользуется.Видимость = Ложь;
			КонецЕсли;
		Иначе
			Если НЕ Элементы.ВидДоступаНеИспользуется.Видимость Тогда
				Элементы.ВидДоступаНеИспользуется.Видимость = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Форма.ТекущийВидДоступа = ТекущиеДанные.ВидДоступа;
		НайденныйВидДоступа = Форма.ВидыДоступаЧерезПраваПоЗначениямДоступа.НайтиПоЗначению(
			ТекущиеДанные.ВидДоступа);
			
		Если НайденныйВидДоступа = Неопределено Тогда
			
			ЗначенияЗадаются = Истина;
			Элементы.ТипыВидовДоступа.ТекущаяСтраница = Элементы.ОбычныйВидДоступа;
			
			// Установка отбора значений.
			Если Элементы.ЗначенияДоступа.ОтборСтрок = Неопределено
			 ИЛИ Элементы.ЗначенияДоступа.ОтборСтрок.ВидДоступа
			         <> ТекущиеДанные.ВидДоступа Тогда
				
				Элементы.ЗначенияДоступа.ОтборСтрок =
					Новый ФиксированнаяСтруктура("ВидДоступа", ТекущиеДанные.ВидДоступа);
			КонецЕсли;
		Иначе
			
			Если ТекущиеДанные.ДоступРазрешен
				И НайденныйВидДоступа.Представление <> Неопределено Тогда
				ТекстИнформации = 
					НСтр("ru = 'Права доступа настраиваются индивидуально для каждого объекта ""%1""
					|с помощью команды ""Права доступа"".'");
				Элементы.ТекстИнформации.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ТекстИнформации,
					НайденныйВидДоступа.Представление);
			КонецЕсли;
			
			Элементы.ТипыВидовДоступа.ТекущаяСтраница =
				?(ТекущиеДанные.ДоступРазрешен,
				  Элементы.ВидДоступаЧерезПраваПоЗначениямДоступаПредупреждение,
				  Элементы.ВидДоступаЧерезПраваПоЗначениямДоступаИнформация);
		КонецЕсли;
		
		// Обновление поля НадписьВидДоступа.
		Если ТекущиеДанные.ВидДоступа = ПредопределенноеЗначение(
		         "ПланВидовХарактеристик.ВидыДоступа.Пользователи") Тогда
			
			ШаблонНадписи = ?(
				ТекущиеДанные.ДоступРазрешен,
				НСтр("ru = 'Запрещенные значения (%1) - текущий пользователь всегда разрешен'"),
				НСтр("ru = 'Разрешенные значения (%1) - текущий пользователь всегда разрешен'") );
			
		ИначеЕсли ТекущиеДанные.ВидДоступа = ПредопределенноеЗначение(
		         	"ПланВидовХарактеристик.ВидыДоступа.ВнешниеПользователи") Тогда
			
			ШаблонНадписи = ?(
				ТекущиеДанные.ДоступРазрешен,
				НСтр("ru = 'Запрещенные значения (%1) - текущий внешний пользователь всегда разрешен'"),
				НСтр("ru = 'Разрешенные значения (%1) - текущий внешний пользователь всегда разрешен'") );
		Иначе
			ШаблонНадписи = ?(
				ТекущиеДанные.ДоступРазрешен,
				НСтр("ru = 'Запрещенные значения (%1)'"),
				НСтр("ru = 'Разрешенные значения (%1)'") );
		КонецЕсли;
		
		Форма.НадписьВидДоступа = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонНадписи,
			Строка(ТекущиеДанные.ВидДоступа));
		
		ОбновитьПредставлениеИспользованияВидаДоступа(Форма, ТекущиеДанные);
	Иначе
		Если Элементы.ВидДоступаНеИспользуется.Видимость Тогда
			Элементы.ВидДоступаНеИспользуется.Видимость = Ложь;
		КонецЕсли;
		Форма.ТекущийВидДоступа = Неопределено;
		
		Элементы.ЗначенияДоступа.ОтборСтрок =
			Новый ФиксированнаяСтруктура("ВидДоступа", Неопределено);
		
		Если Форма.Объект.ВидыДоступа.Количество() = 0 Тогда
			Форма.Объект.ЗначенияДоступа.Очистить();
		КонецЕсли;
	КонецЕсли;
	
	Форма.ТекущийТипЗначенияДоступа =
		?(ТекущиеДанные = Неопределено,
		  Неопределено,
		  ТекущиеДанные.ТекущийТипЗначенияДоступа);
	
	Форма.ТекущиеТипыЗначенийДоступа = Новый СписокЗначений;
	
	Если ЗначенияЗадаются Тогда
		Отбор = Новый Структура("ВидДоступа", ТекущиеДанные.ВидДоступа);
		ОписаниеТиповВидовДоступа = Форма.ТипыЗначенийДоступаВидовДоступа.НайтиСтроки(Отбор);
		
		Для каждого ОписаниеТипаВидаДоступа Из ОписаниеТиповВидовДоступа Цикл
			
			Форма.ТекущиеТипыЗначенийДоступа.Добавить(
				ОписаниеТипаВидаДоступа.ТипЗначенияДоступа,
				ОписаниеТипаВидаДоступа.ПредставлениеТипа);
		КонецЦикла;
	Иначе
		Если ТекущиеДанные <> Неопределено Тогда
			Отбор = Новый Структура("ВидДоступа", Элементы.ВидыДоступа.ТекущиеДанные.ВидДоступа);
			
			Для каждого Строка Из Форма.Объект.ЗначенияДоступа.НайтиСтроки(Отбор) Цикл
				Форма.Объект.ЗначенияДоступа.Удалить(Строка);
			КонецЦикла
		КонецЕсли;
	КонецЕсли;
	//
	Если Форма.ТекущиеТипыЗначенийДоступа.Количество() = 0 Тогда
		Форма.ТекущиеТипыЗначенийДоступа.Добавить(Неопределено, НСтр("ru = 'Неопределено'"));
	КонецЕсли;
	
	Элементы.ЗначенияДоступа.Доступность = ЗначенияЗадаются;
	
	Элементы.ЗначенияДоступа.КоманднаяПанель.ПодчиненныеЭлементы
		.ЗначенияДоступаДобавить.Доступность = ЗначенияЗадаются;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПредставлениеИспользованияВидаДоступа(Форма, ОписаниеВидаДоступа)
	
	Отбор = Новый Структура("ВидДоступа", ОписаниеВидаДоступа.ВидДоступа);
	КоличествоЗначений = Форма.Объект.ЗначенияДоступа.НайтиСтроки(Отбор).Количество();
	
	Если КоличествоЗначений > 0 Тогда
		
		ПрописьЧисла = ЧислоПрописью(
			КоличествоЗначений,
			"Л = ru_RU",
			НСтр("ru = ',,,,,,,,0'"));
		
		ПрописьЧислаИПредмета = ЧислоПрописью(
			КоличествоЗначений,
			"Л = ru_RU",
			НСтр("ru = '-го значения,-х значений,-и значений,,,,,,0'"));
		
		ЧислоИПредмет = СтрЗаменить(
			ПрописьЧислаИПредмета,
			ПрописьЧисла,
			Формат(КоличествоЗначений, "ЧГ="));
		
		ОписаниеВидаДоступа.Использование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			?(ОписаниеВидаДоступа.ДоступРазрешен,
			  НСтр("ru = 'Все разрешены, кроме %1'"),
			  НСтр("ru = 'Все запрещены, кроме %1'") ),
			ЧислоИПредмет);
		
	ИначеЕсли Форма.ВидыДоступаЧерезПраваПоЗначениямДоступа.НайтиПоЗначению(
	              ОписаниеВидаДоступа.ВидДоступа) = Неопределено Тогда
		
		ОписаниеВидаДоступа.Использование =
			?(ОписаниеВидаДоступа.ДоступРазрешен,
			  НСтр("ru = 'Все разрешены, без исключений'"),
			  НСтр("ru = 'Все запрещены, без исключений'") );
	Иначе
		ОписаниеВидаДоступа.Использование =
			?(ОписаниеВидаДоступа.ДоступРазрешен,
			  НСтр("ru = 'Все разрешены, без исключений'"),
			  НСтр("ru = 'Все запрещены, кроме исключений'") );
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьНомерСтрокиПоВиду(Форма, ОписаниеВидаДоступа)
	
	Отбор = Новый Структура("ВидДоступа", ОписаниеВидаДоступа.ВидДоступа);
	ЗначенияДоступаПоВиду = Форма.Объект.ЗначенияДоступа.НайтиСтроки(Отбор);
	
	ТекущийНомер = 1;
	Для каждого Строка Из ЗначенияДоступаПоВиду Цикл
		Строка.НомерСтрокиПоВиду = ТекущийНомер;
		ТекущийНомер = ТекущийНомер + 1;
	КонецЦикла;
	
КонецПроцедуры


&НаКлиенте
Функция ВыбранТипПользователиИлиВнешниеПользователи(ВыборИПодборВнешнихПользователей)
	
	ВыборИПодборВнешнихПользователей = Ложь;
	
	Если Объект.Ссылка = ПредопределенноеЗначение("Справочник.ГруппыДоступа.Администраторы") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Объект.ТипПользователей <> Неопределено Тогда
		Если ТипЗнч(Объект.ТипПользователей) <> Тип("СправочникСсылка.Пользователи") Тогда
			ВыборИПодборВнешнихПользователей = Истина;
		КонецЕсли;
		Возврат Истина;
	КонецЕсли;
	
	Если ИспользоватьВнешнихПользователей Тогда
		
		Элемент = СписокТиповПользователей.ВыбратьЭлемент(
			НСтр("ru = 'Выбор типа данных'"), СписокТиповПользователей[0]);
		
		Если Элемент <> Неопределено Тогда
			ВыборИПодборВнешнихПользователей =
				Элемент.Значение = Тип("СправочникСсылка.ВнешниеПользователи");
		Иначе
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Функция ВыбранТипЗначенияДоступа(Знач ТипыЗначенияДоступа)
	
	Если ТекущийТипЗначенияДоступа <> Неопределено Тогда
		
		Возврат Истина;
		
	ИначеЕсли ТипыЗначенияДоступа.Количество() = 1 Тогда
		
		ТекущийТипЗначенияДоступа = ТипыЗначенияДоступа[0].Значение;
		Возврат Истина;
		
	ИначеЕсли ТипыЗначенияДоступа.Количество() > 0 Тогда
		
		Если ТипыЗначенияДоступа.Количество() = 2 Тогда
		
			Если ТипыЗначенияДоступа.НайтиПоЗначению(ПредопределенноеЗначение(
			         "Справочник.Пользователи.ПустаяСсылка")) <> Неопределено
			     
			   И ТипыЗначенияДоступа.НайтиПоЗначению(ПредопределенноеЗначение(
			         "Справочник.ГруппыПользователей.ПустаяСсылка")) <> Неопределено Тогда
				
				ТекущийТипЗначенияДоступа = ПредопределенноеЗначение(
					"Справочник.Пользователи.ПустаяСсылка");
				
				Возврат Истина;
			КонецЕсли;
			
			Если ТипыЗначенияДоступа.НайтиПоЗначению(ПредопределенноеЗначение(
			         "Справочник.ВнешниеПользователи.ПустаяСсылка")) <> Неопределено
			     
			   И ТипыЗначенияДоступа.НайтиПоЗначению(ПредопределенноеЗначение(
			         "Справочник.ГруппыВнешнихПользователей.ПустаяСсылка")) <> Неопределено Тогда
				
				ТекущийТипЗначенияДоступа = ПредопределенноеЗначение(
					"Справочник.ВнешниеПользователи.ПустаяСсылка");
				
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
		
		Элемент = ТипыЗначенияДоступа.ВыбратьЭлемент(
			НСтр("ru = 'Выбор типа данных'"), ТипыЗначенияДоступа[0]);
		
		Если Элемент <> Неопределено Тогда
			ТекущийТипЗначенияДоступа = Элемент.Значение;
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции


&НаКлиенте
Процедура ВыбратьПодобратьПользователей(Подобрать)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("ТекущаяСтрока", ?(
		Элементы.Пользователи.ТекущиеДанные = Неопределено,
		Неопределено,
		Элементы.Пользователи.ТекущиеДанные.Пользователь));
	
	Если НЕ Подобрать
	   И ЗначениеЗаполнено(ПараметрыФормы.ТекущаяСтрока)
	   И (    ТипЗнч(ПараметрыФормы.ТекущаяСтрока) = Тип("СправочникСсылка.Пользователи")
	      ИЛИ ТипЗнч(ПараметрыФормы.ТекущаяСтрока) = Тип("СправочникСсылка.ГруппыПользователей") ) Тогда
	
		ВыборИПодборВнешнихПользователей = Ложь;
	
	ИначеЕсли НЕ Подобрать
	        И ИспользоватьВнешнихПользователей
	        И ЗначениеЗаполнено(ПараметрыФормы.ТекущаяСтрока)
	        И (    ТипЗнч(ПараметрыФормы.ТекущаяСтрока) = Тип("СправочникСсылка.ВнешниеПользователи")
	           ИЛИ ТипЗнч(ПараметрыФормы.ТекущаяСтрока) = Тип("СправочникСсылка.ГруппыВнешнихПользователей") ) Тогда
	
		ВыборИПодборВнешнихПользователей = Истина;
	Иначе
		Если НЕ ВыбранТипПользователиИлиВнешниеПользователи(ВыборИПодборВнешнихПользователей) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.Ссылка <> ПредопределенноеЗначение("Справочник.ГруппыДоступа.Администраторы") Тогда
		Если ВыборИПодборВнешнихПользователей Тогда
			ПараметрыФормы.Вставить("ВыборГруппВнешнихПользователей", Истина);
		Иначе
			ПараметрыФормы.Вставить("ВыборГруппПользователей", Истина);
		КонецЕсли;
	КонецЕсли;
	
	Если Подобрать Тогда
		ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
		ПараметрыФормы.Вставить("МножественныйВыбор", Истина);
		ПараметрыФормы.Вставить("РасширенныйПодбор", Истина);
		ПараметрыФормы.Вставить("ПараметрыРасширеннойФормыПодбора", ВыбранныеУчастникиГруппыДоступа());
	КонецЕсли;
	
	Если ВыборИПодборВнешнихПользователей Тогда
	
		Если Объект.ТипПользователей <> Неопределено Тогда
			ПараметрыФормы.Вставить("ТипОбъектовАвторизации", Объект.ТипПользователей);
		КонецЕсли;
		Если СправочникВнешниеПользователиДоступен Тогда
			
			ОткрытьФорму(
				"Справочник.ВнешниеПользователи.ФормаВыбора", ПараметрыФормы, Элементы.Пользователи);
		Иначе
			Предупреждение(НСтр("ru = 'Недостаточно прав для выбора внешних пользователей.'"));
		КонецЕсли;
	Иначе
		ОткрытьФорму("Справочник.Пользователи.ФормаВыбора", ПараметрыФормы, Элементы.Пользователи);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВыбранныеУчастникиГруппыДоступа()
	
	ЭлементыКоллекции = ПользователиГруппы.ПолучитьЭлементы();
	
	ВыбранныеПользователи = Новый ТаблицаЗначений;
	ВыбранныеПользователи.Колонки.Добавить("Пользователь");
	ВыбранныеПользователи.Колонки.Добавить("НомерКартинки");
	
	Для каждого Элемент Из ЭлементыКоллекции Цикл
		
		СтрокаВыбранныеПользователи = ВыбранныеПользователи.Добавить();
		СтрокаВыбранныеПользователи.Пользователь = Элемент.Пользователь;
		СтрокаВыбранныеПользователи.НомерКартинки = Элемент.НомерКартинки;
		
	КонецЦикла;
	
	ЗаголовокФормыПодбора = НСтр("ru = 'Подбор участников группы доступа'");
	ПараметрыРасширеннойФормыПодбора = Новый Структура("ЗаголовокФормыПодбора, ВыбранныеПользователи",
	                                                   ЗаголовокФормыПодбора, ВыбранныеПользователи);
	АдресХранилища = ПоместитьВоВременноеХранилище(ПараметрыРасширеннойФормыПодбора);
	Возврат АдресХранилища;
	
КонецФункции

&НаСервере
Процедура ОбновитьПользователейГрупп(ИдентификаторСтроки = Неопределено,
                                     ИзмененныеСтроки = Неопределено)
	
	УстановитьПривилегированныйРежим(Истина);
	ИзмененныеСтроки = Новый Массив;
	
	Если ИдентификаторСтроки = Неопределено Тогда
		ЭлементыКоллекции = ПользователиГруппы.ПолучитьЭлементы();
		
	ИначеЕсли ТипЗнч(ИдентификаторСтроки) = Тип("Массив") Тогда
		ЭлементыКоллекции = Новый Массив;
		Для каждого Идентификатор Из ИдентификаторСтроки Цикл
			ЭлементыКоллекции.Добавить(ПользователиГруппы.НайтиПоИдентификатору(Идентификатор));
		КонецЦикла;
	Иначе
		ЭлементыКоллекции = Новый Массив;
		ЭлементыКоллекции.Добавить(ПользователиГруппы.НайтиПоИдентификатору(ИдентификаторСтроки));
	КонецЕсли;
	
	УчастникиГруппыПользователей = Новый Массив;
	Для каждого Элемент Из ЭлементыКоллекции Цикл
		
		Если ТипЗнч(Элемент.Пользователь) = Тип("СправочникСсылка.ГруппыПользователей")
		 ИЛИ ТипЗнч(Элемент.Пользователь) = Тип("СправочникСсылка.ГруппыВнешнихПользователей") Тогда
		
			УчастникиГруппыПользователей.Добавить(Элемент.Пользователь);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("УчастникиГруппыПользователей", УчастникиГруппыПользователей);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СоставыГруппПользователей.ГруппаПользователей,
	|	СоставыГруппПользователей.Пользователь
	|ИЗ
	|	РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
	|ГДЕ
	|	СоставыГруппПользователей.ГруппаПользователей В(&УчастникиГруппыПользователей)";
	
	ПользователиГрупп = Запрос.Выполнить().Выгрузить();
	ПользователиГрупп.Индексы.Добавить("ГруппаПользователей");
	
	Для каждого Элемент Из ЭлементыКоллекции Цикл
		Элемент.Ссылка = Элемент.Пользователь;
		
		Если ТипЗнч(Элемент.Пользователь) = Тип("СправочникСсылка.ГруппыПользователей")
		 ИЛИ ТипЗнч(Элемент.Пользователь) = Тип("СправочникСсылка.ГруппыВнешнихПользователей") Тогда
		
			// Заполнение пользователей группы.
			СтарыеПользователи = Элемент.ПолучитьЭлементы();
			Отбор = Новый Структура("ГруппаПользователей", Элемент.Пользователь);
			НовыеПользователи = ПользователиГрупп.НайтиСтроки(Отбор);
			
			ЕстьИзменения = Ложь;
			
			Если СтарыеПользователи.Количество() <> НовыеПользователи.Количество() Тогда
				СтарыеПользователи.Очистить();
				Для каждого Строка Из НовыеПользователи Цикл
					НовыйЭлемент = СтарыеПользователи.Добавить();
					НовыйЭлемент.Ссылка       = Строка.Пользователь;
					НовыйЭлемент.Пользователь = Строка.Пользователь;
				КонецЦикла;
				ЕстьИзменения = Истина;
			Иначе
				Индекс = 0;
				Для каждого Строка Из СтарыеПользователи Цикл
					
					Если Строка.Ссылка       <> НовыеПользователи[Индекс].Пользователь
					 ИЛИ Строка.Пользователь <> НовыеПользователи[Индекс].Пользователь Тогда
						
						Строка.Ссылка       = НовыеПользователи[Индекс].Пользователь;
						Строка.Пользователь = НовыеПользователи[Индекс].Пользователь;
						ЕстьИзменения = Истина;
					КонецЕсли;
					Индекс = Индекс + 1;
				КонецЦикла;
			КонецЕсли;
			
			Если ЕстьИзменения Тогда
				ИзмененныеСтроки.Добавить(Элемент.ПолучитьИдентификатор());
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Пользователи.ЗаполнитьНомераКартинокПользователей(
		ПользователиГруппы, "Ссылка", "НомерКартинки", ИдентификаторСтроки, Истина);
	
	// Установка отображения дерева.
	ЕстьДерево = Ложь;
	Для каждого Элемент Из ПользователиГруппы.ПолучитьЭлементы() Цикл
		Если Элемент.ПолучитьЭлементы().Количество() > 0 Тогда
			ЕстьДерево = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Элементы.Пользователи.Отображение = ?(ЕстьДерево, ОтображениеТаблицы.Дерево, ОтображениеТаблицы.Список);
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьОбъектБезУчастниковГруппы(ТекущийОбъект)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ГруппыДоступа.ПометкаУдаления,
	|	ГруппыДоступа.Предопределенный,
	|	ГруппыДоступа.Родитель,
	|	ГруппыДоступа.ЭтоГруппа,
	|	ГруппыДоступа.Наименование,
	|	ГруппыДоступа.Профиль,
	|	ГруппыДоступа.Ответственный,
	|	ГруппыДоступа.ТипПользователей,
	|	ГруппыДоступа.Пользователь,
	|	ГруппыДоступа.Описание
	|ИЗ
	|	Справочник.ГруппыДоступа КАК ГруппыДоступа
	|ГДЕ
	|	ГруппыДоступа.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГруппыДоступаВидыДоступа.ВидДоступа,
	|	ГруппыДоступаВидыДоступа.ДоступРазрешен
	|ИЗ
	|	Справочник.ГруппыДоступа.ВидыДоступа КАК ГруппыДоступаВидыДоступа
	|ГДЕ
	|	ГруппыДоступаВидыДоступа.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ГруппыДоступаЗначенияДоступа.ВидДоступа,
	|	ГруппыДоступаЗначенияДоступа.ЗначениеДоступа
	|ИЗ
	|	Справочник.ГруппыДоступа.ЗначенияДоступа КАК ГруппыДоступаЗначенияДоступа
	|ГДЕ
	|	ГруппыДоступаЗначенияДоступа.Ссылка = &Ссылка");
	
	Запрос.УстановитьПараметр("Ссылка", ТекущийОбъект.Ссылка);
	РезультатыЗапросов = Запрос.ВыполнитьПакет();
	
	// Восстановление реквизитов.
	ЗаполнитьЗначенияСвойств(ТекущийОбъект, РезультатыЗапросов[0].Выгрузить()[0]);
	
	// Восстановление табличной части ВидыДоступа.
	ТекущийОбъект.ВидыДоступа.Загрузить(РезультатыЗапросов[1].Выгрузить());
	
	// Восстановление табличной части ЗначенияДоступа.
	ТекущийОбъект.ЗначенияДоступа.Загрузить(РезультатыЗапросов[2].Выгрузить());
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СформироватьДанныеВыбораПользователя(Знач Текст,
                                             Знач ВключаяГруппы = Истина,
                                             Знач ВключаяВнешнихПользователей = Неопределено,
                                             Знач БезПользователей = Ложь) Экспорт
	
	Возврат Пользователи.СформироватьДанныеВыбораПользователя(
		Текст,
		ВключаяГруппы,
		ВключаяВнешнихПользователей,
		БезПользователей);
	
	
КонецФункции

&НаСервереБезКонтекста
Функция СформироватьДанныеВыбораЗначенияДоступа(Знач Текст, Знач ВидДоступа, ВключаяГруппы = Истина)
	
	Возврат УправлениеДоступомСлужебный.СформироватьДанныеВыбораЗначенияДоступа(
		Текст,
		ВидДоступа,
		ВключаяГруппы);
	
КонецФункции

&НаСервере
Процедура ОбновитьНеиспользуемыеВидыДоступа(ПередОткрытиемФормы)
	
	Элементы.ПоказыватьНеиспользуемыеВидыДоступа.Пометка = ?(ПередОткрытиемФормы, Ложь,
		НЕ Элементы.ПоказыватьНеиспользуемыеВидыДоступа.Пометка);
	
	Отбор = Новый Структура;
	
	Если Не Элементы.ПоказыватьНеиспользуемыеВидыДоступа.Пометка Тогда
		Отбор.Вставить("ИспользуетсяВПрограмме", Истина);
		Элементы.ВидыДоступа.ОтборСтрок = Новый ФиксированнаяСтруктура(Отбор);
	Иначе
		Элементы.ВидыДоступа.ОтборСтрок = Новый ФиксированнаяСтруктура();
	КонецЕсли;
	
КонецПроцедуры
