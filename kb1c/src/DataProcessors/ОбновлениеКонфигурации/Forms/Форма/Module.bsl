
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЭтоLinuxКлиент() Тогда
		Возврат; // Отказ устанавливается в ПриОткрытии().
	КонецЕсли;
	
	ЗаписьЖурналаРегистрации(ОбновлениеКонфигурации.СобытиеЖурналаРегистрации(), УровеньЖурналаРегистрации.Информация,,,
		НСтр("ru = 'Открытие помощника обновления конфигурации...'"));
	ОбновлениеКонфигурации.ПрерватьВыполнениеЕслиАвторизованВнешнийПользователь();
	
	// Установка признака выполнения обновления по завершении помощника.
	ВыполнитьОбновление = Ложь;
	
	// Если это первый запуск после обновления конфигурации, то запоминаем и сбрасываем статус.
	Объект.РезультатОбновления = ОбновлениеКонфигурации.ОбновлениеКонфигурацииУспешно();
	Если Объект.РезультатОбновления <> Неопределено Тогда
		ОбновлениеКонфигурации.СброситьСтатусОбновленияКонфигурации();
	КонецЕсли;
	
	// Проверяем каждый раз при открытии помощника.
	КонфигурацияИзменена = КонфигурацияИзменена();
	
	Если Параметры.ЗавершениеРаботыСистемы Тогда
		Элементы.ПанельВсеГотовоФайл.Видимость = Ложь;
		Элементы.ПереключательОбновленияСервер.Видимость = Ложь;
	КонецЕсли;
	
	Если Параметры.ПолученоОбновлениеКонфигурации Тогда
		Элементы.ПереключательОбновленияФайл.Видимость = Ложь;
		Элементы.НадписьПолученоОбновлениеИзПриложенияФайл.Видимость = Истина;
		Элементы.НадписьДалееВыборРежимаОбновленияФайл.Заголовок = Нстр("ru = 'Нажмите ""Далее"" для установки обновления.'");
		Элементы.НадписьДалееВыборРежимаОбновленияСервер.Заголовок = Нстр("ru = 'Нажмите ""Далее"" для установки обновления.'");
		Элементы.НадписьБудетУстановленоОбновлениеСервер.Заголовок = Нстр("ru = 'Получено обновление из приложения в Интернете. Процесс обновления может занять длительное время.
																				|Не выключайте питание компьютера до завершения процесса установки.'");
		Элементы.НадписьВыберитеСпособОбновленияСервер.Видимость = Ложь;
		Элементы.НадписьПорядокОбновленияСервер.Заголовок = Нстр("ru = 'Для продолжения необходимо ознакомиться с порядком обновления.'");
	КонецЕсли;
	
	ИнформацияОНаличииСоединений = ПолучитьИнформациюОНаличииСоединений(Неопределено);
	Параметры.ВыполнитьОбновление = ?(ИнформацияОНаличииСоединений.НаличиеАктивныхСоединений, Ложь, Параметры.ВыполнитьОбновление);
	
	Элементы.НадписьОбновлениеКонфигурацииВыполняетсяПриОбменеДаннымиСГлавнымУзлом.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Элементы.НадписьОбновлениеКонфигурацииВыполняетсяПриОбменеДаннымиСГлавнымУзлом.Заголовок, ПланыОбмена.ГлавныйУзел());
	Элементы.НадписьПроцессОбновленияМожетЗанятьМногоВремени.Видимость = Не Параметры.ЗавершениеРаботыСистемы;
	Элементы.ГруппаТребуетсяОбновлениеПлатформы.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
#Если ВебКлиент Тогда
	Отказ = Истина;
	ТекстСообщения = НСтр("ru = 'Обновление программы недоступно в веб-клиенте.'");
	ОбщегоНазначенияКлиент.ДобавитьСообщениеДляЖурналаРегистрации(ОбновлениеКонфигурацииКлиент.СобытиеЖурналаРегистрации(),,
		ТекстСообщения,,Истина);
	Предупреждение(ТекстСообщения);
	Возврат;
#КонецЕсли

	Если ОбщегоНазначенияКлиентСервер.ЭтоLinuxКлиент() Тогда
		Отказ = Истина;
		ТекстСообщения = НСтр("ru = 'Обновление программы недоступно в клиенте под управлением ОС Linux.'");
		Предупреждение(ТекстСообщения);
		ОбщегоНазначенияКлиент.ДобавитьСообщениеДляЖурналаРегистрации(
			ОбновлениеКонфигурацииКлиент.СобытиеЖурналаРегистрации(),
			,
			ТекстСообщения,
			,
			Истина);
		Возврат;
	КонецЕсли;
	
	ВосстановитьНастройкиОбновленияКонфигурации();
	
	Если Параметры.ВыполнитьОбновление Тогда
		Если ПроверитьДоступКИБ() Тогда
			ВыполнитьОбновление = Истина;
			
			ОбновлениеКонфигурацииКлиентПереопределяемый.ПередЗавершениемРаботыСистемы();
			ПропуститьПредупреждениеПередЗавершениемРаботыСистемы = Истина;
			ЗавершитьРаботуСистемы(Ложь);
			Закрыть();
		КонецЕсли;
	КонецЕсли;
	
	Страницы	= Элементы.СтраницыПомощника.ПодчиненныеЭлементы;
	ИмяСтраницы	= Страницы.ДоброПожаловать.Имя;
	
	ДоступноеОбновление = ОбновлениеКонфигурацииКлиент.ПолучитьДоступноеОбновлениеКонфигурации();
	// Если есть обновление в сети Интернет...
	Если ДоступноеОбновление.ИсточникОбновления = 0 И ДоступноеОбновление.ФлагАвтоПереходаНаСтраницуСОбновлением Тогда
		ВремяПолученияОбновления = ДоступноеОбновление.ВремяПолученияОбновления;
		Если ВремяПолученияОбновления <> Неопределено И ОбщегоНазначенияКлиент.ДатаСеанса() - ВремяПолученияОбновления < 30 Тогда
			ИмяСтраницы = ПолучитьФайлыОбновленияЧерезИнтернет(Истина);
		КонецЕсли;
	// Если конфигурация изменена, предложим применить ее к базе данных
	ИначеЕсли ДоступноеОбновление.ИсточникОбновления = 2 И ДоступноеОбновление.НуженФайлОбновления = 0 
		И ДоступноеОбновление.ФлагАвтоПереходаНаСтраницуСОбновлением Тогда
		ИмяСтраницы = Страницы.ФайлОбновления.Имя;
	КонецЕсли;
	
	Если Объект.КодЗадачиПланировщика <> 0 Тогда
		Если ПолучитьЗадачуПланировщика(Объект.КодЗадачиПланировщика) = Неопределено Тогда
			Объект.КодЗадачиПланировщика = 0;
		КонецЕсли;
	КонецЕсли;
	
	// Если форма открывается при запуске программы после обновления
	Если Объект.РезультатОбновления <> Неопределено Тогда	
		
		ИмяФайлаПорядокОбновления = ПолучитьИмяЛокальногоФайлаПорядкаОбновления();
		Если НЕ ФайлСуществуетНаКлиенте(ИмяФайлаПорядокОбновления) Тогда
			ИмяФайлаПорядокОбновления = "";
		КонецЕсли; 
		
		ИмяФайлаИнформацияОбОбновлении	= ПолучитьИмяЛокальногоФайлаОписанияОбновления();
		Если НЕ ФайлСуществуетНаКлиенте(ИмяФайлаИнформацияОбОбновлении) Тогда
			ИмяФайлаПорядокОбновления = "";
		КонецЕсли; 
		
		ИмяСтраницы = ? (Объект.РезультатОбновления, Страницы.УспешноеОбновление.Имя, Страницы.НеуспешноеОбновление.Имя);
		Объект.РезультатОбновления = Неопределено;
		
	Иначе
		
		КонфигурацияГотоваКОбновлению = Истина;
		КонфигурацияГотоваКОбновлению = ОбновлениеКонфигурацииКлиентПереопределяемый.ГотовностьКОбновлениюКонфигурации(Истина);
		
		Если НЕ КонфигурацияГотоваКОбновлению Тогда
			ИмяСобытияЖурнала = ОбновлениеКонфигурацииКлиент.СобытиеЖурналаРегистрации();
			ОбщегоНазначенияКлиент.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытияЖурнала, "Информация",
				НСтр("ru = 'Конфигурация не может быть обновлена. Завершение проверки обновления.'"));
			Отказ = Истина;
			Возврат;
		КонецЕсли; 
		
		Если Объект.КодЗадачиПланировщика <> 0 Тогда
			ПараметрОтказа	= Ложь; // не используется в этом случае
			ИмяСтраницы		= ВосстановитьРезультатыПредыдущегоЗапуска(ПараметрОтказа);
		ИначеЕсли КонфигурацияИзменена И
				Объект.ИсточникОбновления = 2 Тогда
			Объект.НуженФайлОбновления	= 0;
			ИмяСтраницы		= Страницы.ФайлОбновления.Имя;
		ИначеЕсли Объект.ПропускатьПриветствие = Истина И Объект.ИсточникОбновления = 0 Тогда
			ИмяСтраницы		= ОбработатьСтраницуДоброПожаловать(Истина);
		КонецЕсли;
		
		Если Не СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ЭтоГлавныйУзел Тогда
			Если КонфигурацияИзменена Тогда
				ИмяСтраницы = ПерейтиКВыборуРежимаОбновления();
			Иначе
				ИмяСтраницы = Страницы.ОбновленияНеОбнаружено.Имя;
			КонецЕсли;
		КонецЕсли
		
	КонецЕсли;
	
	ПередОткрытиемСтраницы(Страницы[ИмяСтраницы]);
	Элементы.СтраницыПомощника.ТекущаяСтраница = Страницы[ИмяСтраницы];
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ВРег(ИсточникВыбора.ИмяФормы) = ВРег("Обработка.ОбновлениеКонфигурации.Форма.НастройкаРасписания") Тогда
		
		Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
			ЗаполнитьЗначенияСвойств(Объект, ВыбранноеЗначение);
		КонецЕсли;
		
		ПередОткрытиемСтраницы();
		
	ИначеЕсли ВРег(ИсточникВыбора.ИмяФормы) = ВРег("Обработка.АктивныеПользователи.Форма.ФормаСпискаАктивныхПользователей") Тогда
		
		ПередОткрытиемСтраницы();
		
	ИначеЕсли ВРег(ИсточникВыбора.ИмяФормы) = ВРег("Обработка.ОбновлениеКонфигурации.Форма.НастройкаРезервнойКопии") Тогда
		
		Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
			ЗаполнитьЗначенияСвойств(Объект, ВыбранноеЗначение);
		КонецЕсли;
		
		ПередОткрытиемСтраницы();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЛегальностьПолученияОбновлений" И Не Параметр
		И ОбщегоНазначенияКлиентСервер.ЭтоПлатформа83БезРежимаСовместимости() Тогда
		
		ОтработатьНажатиеКнопкиНазад();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	ДоступноеОбновление = ОбновлениеКонфигурацииКлиент.ПолучитьДоступноеОбновлениеКонфигурации();
	Если ДоступноеОбновление.ИсточникОбновления <> -1 Тогда
		ДоступноеОбновление.ФлагАвтоПереходаНаСтраницуСОбновлением = Ложь;
	КонецЕсли;
	
	// Сохранение настроек обновления.
	СохранитьНастройкиОбновленияКонфигурации();
	
	// Выполнение обновления конфигурации.
	Если ВыполнитьОбновление Тогда
		ВыполнитьОбновлениеКонфигурации();
	КонецЕсли;
	
	// запись событий ЖР
	ОбщегоНазначенияВызовСервера.ЗаписатьСобытияВЖурналРегистрации(СообщенияДляЖурналаРегистрации);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

////////////////////////////////////////////////////////////////////////////////
// Страница ДоброПожаловать

&НаКлиенте
Процедура ДекорацияЧерезИнтернетНажатие(Элемент)
	Объект.ИсточникОбновления = 0;
	ПередОткрытиемСтраницы();
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЧерезИТСНажатие(Элемент)
	Объект.ИсточникОбновления = 1;
	ПередОткрытиемСтраницы();
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияИзФайлаНажатие(Элемент)
	Объект.ИсточникОбновления = 2;
	ПередОткрытиемСтраницы();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Страница ПодключениеКИнтернет

&НаКлиенте
Процедура НадписьПерейтиВЖурналРегистрацииНажатие(Элемент)
	ОткрытьФорму("Обработка.ЖурналРегистрации.Форма", Новый Структура("Пользователь", ИмяПользователя()));
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Страница ПодключениеКСайту

&НаКлиенте
Процедура НадписьИнформацияОПолученииДоступаНажатие(Элемент)
	
	ОбновлениеКонфигурацииКлиент.ОткрытьВебСтраницу(
		ОбновлениеКонфигурацииКлиент.ПолучитьПараметрыОбновления().АдресСтраницыИнформацииОПолученииДоступаКПользовательскомуСайту);
		
КонецПроцедуры

&НаКлиенте
Процедура НадписьКакОформитьПодпискуИТСНажатие(Элемент)
	ОбновлениеКонфигурацииКлиент.ОткрытьВебСтраницу("http://its.1c.ru/about.php?section=how");
КонецПроцедуры

&НаКлиенте
Процедура НадписьПодробнееОбИТСНажатие(Элемент)
	ОбновлениеКонфигурацииКлиент.ОткрытьВебСтраницу("http://its.1c.ru/about.php");
КонецПроцедуры

&НаКлиенте
Процедура НадписьОткрытьЖурналРегистрацииНажатие(Элемент)
	ОткрытьФорму("Обработка.ЖурналРегистрации.Форма", Новый Структура("Пользователь", ИмяПользователя()));
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Страница МестоположениеДискаИТС

&НаКлиенте
Процедура ИсточникДискаИТСПриИзменении(Элемент)
	ПередОткрытиемСтраницы();
КонецПроцедуры

&НаКлиенте
Процедура ДискИТСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
	Диалог.Каталог = ДискИТС;
	Диалог.ПроверятьСуществованиеФайла = Истина;
	Диалог.Заголовок = НСтр("ru = 'Выбор каталога для диска 1С:ИТС'");
	
	Если Диалог.Выбрать() Тогда
		ДискИТС = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(Диалог.Каталог);
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Страница ФайлОбновления

&НаКлиенте
Процедура ПереключательНуженФайлОбновленияПриИзменении(Элемент)
	ПередОткрытиемСтраницы();
КонецПроцедуры

&НаКлиенте
Процедура ПолеФайлОбновленияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Диалог				= Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Каталог		= ОбновлениеКонфигурацииКлиент.ПолучитьКаталогФайла(Объект.ИмяФайлаОбновления);
	Диалог.ПроверятьСуществованиеФайла = Истина;
	Диалог.Фильтр		= НСтр("ru = 'Все файлы поставки (*.cf*;*.cfu)|*.cf*;*.cfu|Файлы поставки конфигурации (*.cf)|*.cf|Файлы поставки обновления конфигурации(*.cfu)|*.cfu'");
	Диалог.Заголовок	= НСтр("ru = 'Выбор поставки обновления конфигурации'");
	
	Если Диалог.Выбрать() Тогда
		Объект.ИмяФайлаОбновления = Диалог.ПолноеИмяФайла;
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Страница ДоступноеОбновление

&НаКлиенте
Процедура НадписьИнформацияОбОбновленииНажатие(Элемент)
	Если НЕ ПустаяСтрока(ИмяФайлаИнформацияОбОбновлении) Тогда
		ОбновлениеКонфигурацииКлиент.ОткрытьВебСтраницу(ИмяФайлаИнформацияОбОбновлении);
	Иначе
		Предупреждение(НСтр("ru = 'Информация об обновлении отсутствует.'"));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НадписьПорядокОбновленияНажатие(Элемент)
	Если НЕ ПустаяСтрока(ИмяФайлаПорядокОбновления) Тогда
		ОбновлениеКонфигурацииКлиент.ОткрытьВебСтраницу(ИмяФайлаПорядокОбновления);
	Иначе
		Предупреждение(НСтр("ru = 'Описание порядка обновления отсутствует.'"));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ГиперссылкаПроверятьНаличиеОбновленияПриЗапускеНажатие(Элемент)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПроверятьНаличиеОбновленияПриЗапуске", Объект.ПроверятьНаличиеОбновленияПриЗапуске);
	ПараметрыФормы.Вставить("РасписаниеПроверкиНаличияОбновления", Объект.РасписаниеПроверкиНаличияОбновления);
	
	ОткрытьФорму("Обработка.ОбновлениеКонфигурации.Форма.НастройкаРасписания", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Страница ОбновленияНеОбнаружено

&НаКлиенте
Процедура НадписьПереченьРелизовНаДискахИТСНажатие(Элемент)
	Если ПустаяСтрока(ПереченьРелизовНаДискахИТС) Тогда
		Предупреждение(НСтр("ru = 'Информация о перечне релизов не обнаружена.'"));
	КонецЕсли;
		
	ЗапуститьПриложение(ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ДискИТС) +
		"Autorun.exe -browse """ + ПереченьРелизовНаДискахИТС + """") 
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Страница ДлительнаяОперация

////////////////////////////////////////////////////////////////////////////////
// Страница ВыборРежимаОбновленияФайл

&НаКлиенте
Процедура НадписьСписокДействийНажатие(Элемент)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ОповещатьОЗакрытии", Истина);
	ОткрытьФорму("Обработка.АктивныеПользователи.Форма.ФормаСпискаАктивныхПользователей", , ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура НадписьСписокДействий1Нажатие(Элемент)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ОповещатьОЗакрытии", Истина);
	ОткрытьФорму("Обработка.АктивныеПользователи.Форма.ФормаСпискаАктивныхПользователей", , ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура НадписьСписокДействий3Нажатие(Элемент)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ОповещатьОЗакрытии", Истина);
	ОткрытьФорму("Обработка.АктивныеПользователи.Форма.ФормаСпискаАктивныхПользователей", , ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура НадписьРезервнаяКопияНажатие(Элемент)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("СоздаватьРезервнуюКопию",           Объект.СоздаватьРезервнуюКопию);
	ПараметрыФормы.Вставить("ИмяКаталогаРезервнойКопииИБ",       Объект.ИмяКаталогаРезервнойКопииИБ);
	ПараметрыФормы.Вставить("ВосстанавливатьИнформационнуюБазу", Объект.ВосстанавливатьИнформационнуюБазу);
	ОткрытьФорму("Обработка.ОбновлениеКонфигурации.Форма.НастройкаРезервнойКопии", ПараметрыФормы, ЭтаФорма);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Страница ВыборРежимаОбновленияСервер

&НаКлиенте
Процедура ПереключательОбновленияПриИзменении(Элемент)
	ПередОткрытиемСтраницы();
КонецПроцедуры

&НаКлиенте
Процедура ВыслатьОтчетНаПочтуПриИзменении(Элемент)
	ПередОткрытиемСтраницы();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Страница УспешноеОбновление

&НаКлиенте
Процедура НадписьИнформацияОбОбновленииПриЗавершенииНажатие(Элемент)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПоказыватьТолькоИзменения", Истина);
	
	ОткрытьФорму("ОбщаяФорма.ОписаниеИзмененийСистемы", ПараметрыФормы);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Страница НеуспешноеОбновление

////////////////////////////////////////////////////////////////////////////////
// Страница ПараметрыАвторизации

&НаКлиенте
Процедура КластерТребуетАутентификацииПриИзменении(Элемент)
	ПередОткрытиемСтраницы();
КонецПроцедуры

&НаКлиенте
Процедура НестандартныеПортыСервераПриИзменении(Элемент)
	Элементы.ПанельНестандартныеПортыСервера.Доступность = Объект.НестандартныеПортыСервера;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Страница ДополнительныеНастройки

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура КнопкаНазадНажатие(Команда)
	
	ОтработатьНажатиеКнопкиНазад();
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаДалееНажатие(Команда)
	ФлагЗавершенияРаботы = Ложь;
	ОбработатьНажатиеКнопкиДалее(ФлагЗавершенияРаботы);
	Если ФлагЗавершенияРаботы Тогда
		
		ОбновлениеКонфигурацииКлиентПереопределяемый.ПередЗавершениемРаботыСистемы();
		ПропуститьПредупреждениеПередЗавершениемРаботыСистемы = Истина;
		ЗавершитьРаботуСистемы(Ложь);
		Закрыть();
	Конецесли;
КонецПроцедуры

&НаКлиенте
Процедура КнопкаОбновитьВерсиюКомпонентыНажатие(Команда)
	ОбщегоНазначенияКлиент.ЗарегистрироватьCOMСоединитель();
КонецПроцедуры

&НаКлиенте
Процедура КомандаПроверитьДискИТС(Команда)
	Объект.ИсточникОбновления					= 1; // диск ИТС
	Объект.ИсточникДискаИТС						= 0; // искать диск ИТС в приводе
	Элементы.СтраницыПомощника.ТекущаяСтраница	= Элементы.СтраницыПомощника.ПодчиненныеЭлементы.МестоположениеДискаИТС;
	ОбработатьНажатиеКнопкиДалее();
КонецПроцедуры

&НаКлиенте
Процедура НастроитьПараметрыПроксиСервера(Команда)
	ОткрытьФорму("ОбщаяФорма.ПараметрыПроксиСервера", , ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура КакПерейтиНаПлатформу83(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ОбновлениеНа83", Истина);
	ОткрытьФорму("Обработка.НерекомендуемаяВерсияПлатформы.Форма.ПорядокОбновленияПлатформы", ПараметрыФормы);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервереБезКонтекста
Функция ЭтоСеансКонфигуратором(СеансИнформационнойБазы)
	
	Возврат ВРег(СеансИнформационнойБазы.ИмяПриложения) = ВРег("Designer");
	
КонецФункции 

&НаСервереБезКонтекста
Функция ЭтоCOMСоединение(СеансИнформационнойБазы)
	
	Возврат ВРег(СеансИнформационнойБазы.ИмяПриложения) = ВРег("COMConnection");
	
КонецФункции 

// Проверка наличия активных соединений с информационной базой.
//
// Возвращаемое значение:
//  Булево       - Истина, если соединения есть,
//                 Ложь, если соединений нет.
&НаСервереБезКонтекста
Функция НаличиеАктивныхСоединений(СообщенияДляЖурналаРегистрации = Неопределено)
	// запись накопленных событий ЖР
	ОбщегоНазначения.ЗаписатьСобытияВЖурналРегистрации(СообщенияДляЖурналаРегистрации);
	Возврат СоединенияИБ.КоличествоСеансовИнформационнойБазы(Ложь) > 1;
КонецФункции

&НаСервере
Функция ПолучитьТекстыМакетов(ИменаМакетов, СтруктураПараметров, СообщенияДляЖурналаРегистрации)
	// запись накопленных событий ЖР
	ОбщегоНазначения.ЗаписатьСобытияВЖурналРегистрации(СообщенияДляЖурналаРегистрации);
	Результат = Новый Массив();
	Результат.Добавить(ПолучитьТекстСкрипта(СтруктураПараметров));

	ИменаМакетовМассив = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИменаМакетов);
	Для каждого ИмяМакета ИЗ ИменаМакетовМассив Цикл
		Результат.Добавить(Обработки.ОбновлениеКонфигурации.ПолучитьМакет(ИмяМакета).ПолучитьТекст());
	КонецЦикла;
	Возврат Результат;
КонецФункции

&НаСервере
Функция ПолучитьТекстСкрипта(СтруктураПараметров)
	
	// Файл обновления конфигурации: main.js
	ШаблонСкрипта = Обработки.ОбновлениеКонфигурации.ПолучитьМакет("МакетФайлаОбновленияКонфигурации");
	
	Скрипт = ШаблонСкрипта.ПолучитьОбласть("ОбластьПараметров");
	Скрипт.УдалитьСтроку(1);
	Скрипт.УдалитьСтроку(Скрипт.КоличествоСтрок());
	
	Текст = ШаблонСкрипта.ПолучитьОбласть("ОбластьОбновленияКонфигурации");
	Текст.УдалитьСтроку(1);
	Текст.УдалитьСтроку(Текст.КоличествоСтрок());
	
	Возврат ВставитьПараметрыСкрипта(Скрипт.ПолучитьТекст(), СтруктураПараметров) + Текст.ПолучитьТекст();
	
КонецФункции

&НаСервере
Функция ВставитьПараметрыСкрипта(Знач Текст, Знач СтруктураПараметров)
	
	Результат = Текст;
	
	Если Объект.СоздаватьРезервнуюКопию = 2 Тогда
		Объект.ВосстанавливатьИнформационнуюБазу = Истина;
	ИначеЕсли Объект.СоздаватьРезервнуюКопию = 0 Тогда
		Объект.ВосстанавливатьИнформационнуюБазу = Ложь;
	КонецЕсли;
	
	ИменаФайловОбновления = "";
	Для Каждого Обновление Из Объект.ДоступныеОбновления Цикл
		ИменаФайловОбновления = ИменаФайловОбновления + Форматировать(Обновление.ПутьКЛокальномуФайлуОбновления) + ",";
	КонецЦикла;
	Если СтрДлина(ИменаФайловОбновления) > 0 Тогда
		ИменаФайловОбновления = Лев(ИменаФайловОбновления, СтрДлина(ИменаФайловОбновления) - 1);
	КонецЕсли;
	ИменаФайловОбновления = "[" + ИменаФайловОбновления + "]";
	
	СтрокаСоединенияИнформационнойБазы = СтруктураПараметров.ПараметрыСкрипта.СтрокаСоединенияИнформационнойБазы +
											СтруктураПараметров.ПараметрыСкрипта.СтрокаПодключения; 
	
	Если Прав(СтрокаСоединенияИнформационнойБазы, 1) = ";" Тогда
		СтрокаСоединенияИнформационнойБазы = Лев(СтрокаСоединенияИнформационнойБазы, СтрДлина(СтрокаСоединенияИнформационнойБазы) - 1);
	КонецЕсли;

	ИмяИсполняемогоФайлаКонфигуратора = СтруктураПараметров.КаталогПрограммы + СтруктураПараметров.ИмяИсполняемогоФайлаКонфигуратора;
	ИмяИсполняемогоФайлаКлиента       = СтруктураПараметров.КаталогПрограммы + СтруктураПараметров.ИмяИсполняемогоФайлаКлиента;
	
	// Определение пути к информационной базе.
	ПризнакФайловогоРежима = Неопределено;
	ПутьКИнформационнойБазе = СоединенияИБКлиентСервер.ПутьКИнформационнойБазе(ПризнакФайловогоРежима, 
		?(Объект.НестандартныеПортыСервера, Объект.ПортКластераСерверов, 0));
	
	ПараметрПутиКИнформационнойБазе = ?(ПризнакФайловогоРежима, "/F", "/S") + ПутьКИнформационнойБазе; 
	СтрокаПутиКИнформационнойБазе	= ?(ПризнакФайловогоРежима, ПутьКИнформационнойБазе, "");
	ЭтоПлатформа83 = ОбщегоНазначенияКлиентСервер.ЭтоПлатформа83();
	
	Результат = СтрЗаменить(Результат, "[ИменаФайловОбновления]"				, ИменаФайловОбновления);
	Результат = СтрЗаменить(Результат, "[ИмяИсполняемогоФайлаКонфигуратора]"	, Форматировать(ИмяИсполняемогоФайлаКонфигуратора));
	Результат = СтрЗаменить(Результат, "[ИмяИсполняемогоФайлаКлиента]"			, Форматировать(ИмяИсполняемогоФайлаКлиента));
	Результат = СтрЗаменить(Результат, "[ПараметрПутиКИнформационнойБазе]"		, Форматировать(ПараметрПутиКИнформационнойБазе));
	Результат = СтрЗаменить(Результат, "[СтрокаПутиКФайлуИнформационнойБазы]"	, Форматировать(ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(СтрЗаменить(СтрокаПутиКИнформационнойБазе, """", "")) +
		"1Cv8.1CD"));
	Результат = СтрЗаменить(Результат, "[СтрокаСоединенияИнформационнойБазы]"	, Форматировать(СтрокаСоединенияИнформационнойБазы));
	Результат = СтрЗаменить(Результат, "[ПараметрыАутентификацииПользователя]"	, Форматировать(СтруктураПараметров.ПараметрыСкрипта.ПараметрыАутентификации));
	Результат = СтрЗаменить(Результат, "[СобытиеЖурналаРегистрации]"			, Форматировать(СтруктураПараметров.СобытиеЖурналаРегистрации));
	Результат = СтрЗаменить(Результат, "[АдресЭлектроннойПочты]", 
		Форматировать(?(Объект.РежимОбновления = 2 И Объект.ВыслатьОтчетНаПочту, Объект.АдресЭлектроннойПочты, "")));
	Результат = СтрЗаменить(Результат, "[ИмяАдминистратораОбновления]"			, Форматировать(ИмяПользователя()));
	Результат = СтрЗаменить(Результат, "[СоздаватьРезервнуюКопию]"				, ?(ПризнакФайловогоРежима И
		Объект.СоздаватьРезервнуюКопию <> 0, "true", "false"));
	Результат = СтрЗаменить(Результат, "[КаталогРезервнойКопии]"				, 
		Форматировать(?(Объект.СоздаватьРезервнуюКопию = 2, ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(Объект.ИмяКаталогаРезервнойКопииИБ), "")));
	Результат = СтрЗаменить(Результат, "[ВосстанавливатьИнформационнуюБазу]"	, ?(Объект.ВосстанавливатьИнформационнуюБазу, "true", "false"));
	БлокироватьСоединенияИБ = НЕ СтруктураПараметров.ИнформационнаяБазаФайловая ИЛИ РежимИмитацииКлиентСервернойИБ();
	Результат = СтрЗаменить(Результат, "[БлокироватьСоединенияИБ]"				, ?(БлокироватьСоединенияИБ, "true", "false"));
	Результат = СтрЗаменить(Результат, "[ИмяCOMСоединителя]"					, Форматировать(СтруктураПараметров.ИмяCOMСоединителя));
	Результат = СтрЗаменить(Результат, "[ИспользоватьCOMСоединитель]"			, ?(СтруктураПараметров.ЭтоБазоваяВерсияКонфигурации, "false", "true"));
	Результат = СтрЗаменить(Результат, "[ЗапускСеансаПослеОбновления]"			, ?(Параметры.ЗавершениеРаботыСистемы, "false", "true"));
	Результат = СтрЗаменить(Результат, "[ШиринаОкнаЗаставкиОбновления]"			, ?(ЭтоПлатформа83, 600, 400));
	Результат = СтрЗаменить(Результат, "[ВысотаОкнаЗаставкиОбновления]"			, ?(ЭтоПлатформа83, 320, 258));
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция Форматировать(Знач Текст)
	
	Текст = СтрЗаменить(Текст, "\", "\\");
	Текст = СтрЗаменить(Текст, """", "\""");
	Текст = СтрЗаменить(Текст, "'", "\'");
	
	Возврат "'" + Текст + "'";
	
КонецФункции

&НаСервереБезКонтекста
Функция ЕстьАктивныеПользователи(СообщенияДляЖурналаРегистрации = Неопределено)
	// запись накопленных событий ЖР
	ОбщегоНазначения.ЗаписатьСобытияВЖурналРегистрации(СообщенияДляЖурналаРегистрации);
	УстановитьПривилегированныйРежим(Истина);
	Возврат ПользователиИнформационнойБазы.ПолучитьПользователей().Количество() > 0;
Конецфункции

&НаСервереБезКонтекста
Процедура НоваяСтрокаТаблицыОбновленийКонфигурации(ТаблицаОбновленийКонфигурации, Обновление)
	
	НоваяСтрока = ТаблицаОбновленийКонфигурации.Добавить();
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, Обновление);
	НомерВерсии = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Обновление.Версия, ".");
	НоваяСтрока.Версия1Разряд = Число(НомерВерсии[0]);
	НоваяСтрока.Версия2Разряд = Число(НомерВерсии[1]);
	НоваяСтрока.Версия3Разряд = Число(НомерВерсии[2]);
	НоваяСтрока.Версия4Разряд = Число(НомерВерсии[3]);
	
	ПутьФайла = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрЗаменить(Обновление.ПутьКФайлуОбновления, "\", "/"), "/");
	Если ПутьФайла.Количество() > 0 Тогда
    	НоваяСтрока.ФайлОбновления = ПутьФайла[ПутьФайла.Количество() - 1];
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПроверитьИУстановитьПарольАдминистратора(СообщенияДляЖурналаРегистрации)
	
	// Запись накопленных событий журнала регистрации.
	ОбщегоНазначения.ЗаписатьСобытияВЖурналРегистрации(СообщенияДляЖурналаРегистрации);
	ТекущийПользователь = ПользователиИнформационнойБазы.ТекущийПользователь();
	
	Если НЕ ТекущийПользователь.АутентификацияСтандартная Тогда
	
		ТекущийПользователь.АутентификацияСтандартная = Истина;
		ТекущийПользователь.Пароль                    = Объект.ПарольАдминистратораИБ;
		Попытка
			ТекущийПользователь.Записать();
		Исключение
			ИнфоОбОшибке = ИнформацияОбОшибке();
			ТекстСообщения = НСтр("ru = 'Не удалось установить пароль администратора:'") + " ";
			
			ЗаписьЖурналаРегистрации(
				ОбновлениеКонфигурации.СобытиеЖурналаРегистрации(),
				УровеньЖурналаРегистрации.Ошибка,
				,
				,
				ТекстСообщения + ПодробноеПредставлениеОшибки(ИнфоОбОшибке));
			
			Возврат ТекстСообщения + КраткоеПредставлениеОшибки(ИнфоОбОшибке);
		КонецПопытки;
		
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

// Служебная функция, предназначенная для получения описания типов строки, заданной длины.
// 
// Параметры:
//  ДлинаСтроки - число, длина строки.
//
// Возвращаемое значение:
//  Объект "ОписаниеТипов" для строки указанной длины.
//
&НаСервереБезКонтекста
Функция ПолучитьОписаниеТиповСтроки(ДлинаСтроки)
	Массив = Новый Массив; 
	Массив.Добавить(Тип("Строка"));
	КвалификаторСтроки = Новый КвалификаторыСтроки(ДлинаСтроки, ДопустимаяДлина.Переменная);
	Возврат Новый ОписаниеТипов(Массив, , КвалификаторСтроки);
КонецФункции

// Служебная функция, предназначенная для получения описания типов числа, заданной разрядности.
// 
// Параметры:
//  Разрядность 			- число, разряд числа.
//  РазрядностьДробнойЧасти - число, разряд дробной части.
//
// Возвращаемое значение:
//  Объект "ОписаниеТипов" для числа указанной разрядности.
//
&НаСервереБезКонтекста
Функция ПолучитьОписаниеТиповЧисла(Разрядность,РазрядностьДробнойЧасти=0)
	Массив = Новый Массив;
	Массив.Добавить(Тип("Число"));
	КвалификаторЧисла = Новый КвалификаторыЧисла(Разрядность,РазрядностьДробнойЧасти);
	Возврат Новый ОписаниеТипов(Массив, КвалификаторЧисла);
КонецФункции

// Получить список всех инкрементальных обновлений по списку шаблонов, 
// последовательная установка которых обновит версию ВерсияОт до версии ВерсияДо.
//
// Параметры
//  ВерсияОт  – строка – исходная версия
//  ВерсияДо  – строка – конечная версия, до которой конфигурация 
// 					     обновляется с исходной
//
// Возвращаемое значение:
//   Массив   – массив строк ТаблицаЗначений
&НаСервере
Процедура ПолучитьДоступныеОбновленияВИнтервале(Знач ВерсияОт, Знач ВерсияДо, АдресФайлаВоВремХранилище, 
	СообщенияДляЖурналаРегистрации) 

	// запись накопленных событий ЖР
	ОбщегоНазначения.ЗаписатьСобытияВЖурналРегистрации(СообщенияДляЖурналаРегистрации);
	ТаблицаОбновлений = Неопределено;
	ВыполнитьЗагрузкуСпискаОбновлений(АдресФайлаВоВремХранилище, ТаблицаОбновлений);
	
	Если ТаблицаОбновлений = Неопределено Тогда // ошибки при чтении файла
		Возврат;
	КонецЕсли;
	
	ТаблицаОбновленийКонфигурации = Объект.ДоступныеОбновления.Выгрузить();
	ТаблицаОбновленийКонфигурации.Очистить();
	
	ТаблицаДоступныхОбновленийКонфигурации = ТаблицаОбновленийКонфигурации.Скопировать();
	
	Для Каждого Обновление Из ТаблицаОбновлений Цикл
		НоваяСтрокаТаблицыОбновленийКонфигурации(ТаблицаОбновленийКонфигурации, Обновление);
	КонецЦикла;
	
	ТаблицаОбновленийКонфигурации.Сортировать("Версия1Разряд Убыв,
		|Версия2Разряд Убыв,
		|Версия3Разряд Убыв,
		|Версия4Разряд Убыв");
	
	ТекущаяВерсияОт = ВерсияОт;
	Пока ТекущаяВерсияОт <> ВерсияДо Цикл
	
		Отбор = Новый Структура("ВерсияДляОбновления", ТекущаяВерсияОт);
		МассивДоступныхОбновлений = ТаблицаОбновленийКонфигурации.НайтиСтроки(Отбор);

		Для Каждого Обновление Из МассивДоступныхОбновлений Цикл
			НоваяСтрокаТаблицыОбновленийКонфигурации(ТаблицаДоступныхОбновленийКонфигурации, Обновление);
		КонецЦикла;

		ТаблицаДоступныхОбновленийКонфигурации.Сортировать("Версия1Разряд Убыв,
			|Версия2Разряд Убыв,
			|Версия3Разряд Убыв,
			|Версия4Разряд Убыв");
														   
		Если ТаблицаДоступныхОбновленийКонфигурации.Количество() = 0 Тогда
			Прервать;
		КонецЕсли;
		
		Отбор							= Новый Структура("Версия", ТаблицаДоступныхОбновленийКонфигурации[0].Версия);
		МассивУжеНайденныхОбновлений	= Объект.ДоступныеОбновления.НайтиСтроки(Отбор);
		Если МассивУжеНайденныхОбновлений.Количество() = 0 Тогда
			// добавляем новое обновление
			НовоеДоступноеОбновление	= Объект.ДоступныеОбновления.Добавить();
			ЗаполнитьЗначенияСвойств(НовоеДоступноеОбновление, ТаблицаДоступныхОбновленийКонфигурации[0]);
		ИначеЕсли ПустаяСтрока(МассивУжеНайденныхОбновлений[0].ПутьКЛокальномуФайлуОбновления) Тогда
			// обновляем информацию в уже найденном обновлении
			ЗаполнитьЗначенияСвойств(МассивУжеНайденныхОбновлений[0], ТаблицаДоступныхОбновленийКонфигурации[0]);
		КонецЕсли;
		НоваяТекущаяВерсияОт = ТаблицаДоступныхОбновленийКонфигурации[0].Версия;
		Если ТекущаяВерсияОт = НоваяТекущаяВерсияОт И НоваяТекущаяВерсияОт <> ВерсияДо Тогда
			ТаблицаДоступныхОбновленийКонфигурации.Очистить();
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Недоступно обновление на версию %1 с текущей версии %2'"), ВерсияДо, ВерсияОт);
		КонецЕсли;
		ТекущаяВерсияОт	= НоваяТекущаяВерсияОт;
	
	КонецЦикла;
	
КонецПроцедуры 

// Загрузка списка обновлений из файла XML
&НаСервереБезКонтекста
Процедура ВыполнитьЗагрузкуСпискаОбновлений(Знач АдресФайлаЗагрузки, ТаблицаОбновлений = Неопределено)
	
	ПолныйПутьФайлаЗагрузки = АдресФайлаЗагрузки;
	Если ЭтоАдресВременногоХранилища(АдресФайлаЗагрузки) Тогда
		ПолныйПутьФайлаЗагрузки = СтрЗаменить(ПолучитьИмяВременногоФайла(), ".tmp", ".xml");
		ДанныеФайла = ПолучитьИзВременногоХранилища(АдресФайлаЗагрузки);
		ДанныеФайла.Записать(ПолныйПутьФайлаЗагрузки);
	КонецЕсли;
	
	СообщениеОбОшибке = НСтр("ru = 'Ошибка при чтении файла списка обновлений'") + " " + ПолныйПутьФайлаЗагрузки;
	Если НЕ ФайлСуществуетНаСервере(ПолныйПутьФайлаЗагрузки) Тогда
		ВызватьИсключение СообщениеОбОшибке;
	КонецЕсли;
	
	ТаблицаОбновлений = Новый ТаблицаЗначений;
	// Основные колонки
	ТаблицаОбновлений.Колонки.Добавить("Конфигурация"			, ПолучитьОписаниеТиповСтроки(0));
	ТаблицаОбновлений.Колонки.Добавить("Поставщик"				, ПолучитьОписаниеТиповСтроки(0));
	ТаблицаОбновлений.Колонки.Добавить("Версия"					, ПолучитьОписаниеТиповСтроки(0));
	ТаблицаОбновлений.Колонки.Добавить("ВерсияДляОбновления"	, ПолучитьОписаниеТиповСтроки(0));
	ТаблицаОбновлений.Колонки.Добавить("ПутьКФайлуОбновления"	, ПолучитьОписаниеТиповСтроки(0));
	ТаблицаОбновлений.Колонки.Добавить("НомерДискаИТС"			, ПолучитьОписаниеТиповСтроки(0));
	ТаблицаОбновлений.Колонки.Добавить("РазмерФайлаОбновления"	, ПолучитьОписаниеТиповЧисла(15, 0));
	
	ЧтениеXML = Новый ЧтениеXML;
	ЧтениеXML.ОткрытьФайл(ПолныйПутьФайлаЗагрузки);
	ЧтениеXML.Прочитать();  
	
	// Дата формирования файла.
	ЧтениеXML.Прочитать();
	ЧтениеXML.Прочитать();
	ДатаФормирования = ЧтениеXML.Значение;
	ЧтениеXML.Прочитать();
	
	// Читаем начало элемента Update или конец элемента UpdateList.
	Пока ЧтениеXML.Прочитать() Цикл
		
		Если ЧтениеXML.Имя = "v8u:updateList" Тогда
			Прервать;
		КонецЕсли;
		Поставщик				= "";
		Версия					= "";
		ПутьКФайлуОбновления	= "";
		НомерДискаИТС			= "";
		РазмерФайлаОбновления	= 0;
		Конфигурация			= СтроковыеФункцииКлиентСервер.СократитьДвойныеКавычки(СокрЛП(ЧтениеXML.ПолучитьАтрибут("configuration")));
		
		// Читаем содержимое элемента update
		МассивВерсийДляОбновления = Новый Массив;
		Пока ЧтениеXML.Прочитать() Цикл
			Если ЧтениеXML.Имя = "v8u:update" Тогда
				Прервать;
			КонецЕсли;
			Если ЧтениеXML.Имя = "v8u:vendor" Тогда
				ЧтениеXML.Прочитать();
				Поставщик = СтроковыеФункцииКлиентСервер.СократитьДвойныеКавычки(СокрЛП(ЧтениеXML.Значение));
			ИначеЕсли ЧтениеXML.Имя = "v8u:version" Тогда
				ЧтениеXML.Прочитать();
				Версия = ЧтениеXML.Значение;
			ИначеЕсли ЧтениеXML.Имя = "v8u:file" Тогда
				ЧтениеXML.Прочитать();
				ПутьКФайлуОбновления = СтроковыеФункцииКлиентСервер.СократитьДвойныеКавычки(СокрЛП(ЧтениеXML.Значение));
			ИначеЕсли ЧтениеXML.Имя = "v8u:size" Тогда
				ЧтениеXML.Прочитать();
				РазмерФайлаОбновления = СтроковыеФункцииКлиентСервер.СократитьДвойныеКавычки(СокрЛП(ЧтениеXML.Значение));
			ИначеЕсли ЧтениеXML.Имя = "v8u:its" Тогда
				ЧтениеXML.Прочитать();
				НомерДискаИТС = СтроковыеФункцииКлиентСервер.СократитьДвойныеКавычки(СокрЛП(ЧтениеXML.Значение));
			ИначеЕсли ЧтениеXML.Имя = "v8u:target" Тогда
				ЧтениеXML.Прочитать();
				МассивВерсийДляОбновления.Добавить(ЧтениеXML.Значение);
			КонецЕсли;
			
			ЧтениеXML.Прочитать();
		КонецЦикла;
		
		// Формируем таблицу обновлений
		Для Каждого ВерсияДляОбновления Из МассивВерсийДляОбновления Цикл
			
			НоваяСтрока = ТаблицаОбновлений.Добавить();
			НоваяСтрока.Конфигурация			= Конфигурация;
			НоваяСтрока.Поставщик				= Поставщик;
			НоваяСтрока.Версия					= Версия;
			НоваяСтрока.ВерсияДляОбновления		= ВерсияДляОбновления;
			НоваяСтрока.ПутьКФайлуОбновления	= ПутьКФайлуОбновления;
			НоваяСтрока.НомерДискаИТС			= НомерДискаИТС;
			НоваяСтрока.РазмерФайлаОбновления	= РазмерФайлаОбновления;

		КонецЦикла;
		
	КонецЦикла;
	ЧтениеXML.Закрыть();
	
	Если ТаблицаОбновлений = Неопределено Тогда // ошибки при чтении файла
		ВызватьИсключение НСтр("ru = 'Ошибка при чтении файла'") + " " + ПолныйПутьФайлаЗагрузки;
   	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ФайлСуществуетНаСервере(Знач ПутьКФайлу)
	Файл = Новый Файл(ПутьКФайлу);
	Возврат Файл.Существует();
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьИнформациюОНаличииСоединений(СообщенияДляЖурналаРегистрации = Неопределено)
	
	ОбщегоНазначения.ЗаписатьСобытияВЖурналРегистрации(СообщенияДляЖурналаРегистрации);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Новый Структура("НаличиеАктивныхСоединений, НаличиеCOMСоединений, НаличиеСоединенияКонфигуратором, ЕстьАктивныеПользователи",
								Ложь,
								Ложь,
								Ложь,
								Ложь);
	
	Если ПользователиИнформационнойБазы.ПолучитьПользователей().Количество() > 0 Тогда 
		Результат.ЕстьАктивныеПользователи = Истина;
	КонецЕсли;
	
	МассивСеансов = ПолучитьСеансыИнформационнойБазы();
	Если МассивСеансов.Количество() = 1 Тогда 
		Возврат Результат;
	КонецЕсли;
	
	Результат.НаличиеАктивныхСоединений = Истина;
	
	Для Каждого Сеанс Из МассивСеансов Цикл
		Если ЭтоCOMСоединение(Сеанс) Тогда 
			 Результат.НаличиеCOMСоединений = Истина;
		ИначеЕсли ЭтоСеансКонфигуратором(Сеанс) Тогда 
			Результат.НаличиеСоединенияКонфигуратором = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПолучитьСтрокуСоединенияИИнформациюОСоединениях(СообщенияДляЖурналаРегистрации)
	// запись накопленных событий ЖР
	ОбщегоНазначения.ЗаписатьСобытияВЖурналРегистрации(СообщенияДляЖурналаРегистрации);
	Результат = ПолучитьИнформациюОНаличииСоединений();
	Результат.Вставить("СтрокаСоединенияИнформационнойБазы", 
		СоединенияИБКлиентСервер.ПолучитьСтрокуСоединенияИнформационнойБазы(
			?(Объект.НестандартныеПортыСервера, Объект.ПортКластераСерверов, 0)));
	Возврат Результат;
КонецФункции

&НаСервереБезКонтекста
Функция РежимОтладкиСкрипта()
	Результат = Ложь;
	СтруктураНастройки = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"ОбновлениеКонфигурации", 
		"НастройкиОбновленияКонфигурации");
	Если СтруктураНастройки <> Неопределено Тогда 
		СтруктураНастройки.Свойство("РежимОтладкиСкрипта", Результат);
	КонецЕсли;
	Возврат Результат = Истина;
КонецФункции	

&НаСервереБезКонтекста
Функция РежимИмитацииКлиентСервернойИБ()
	Результат = Ложь;
	СтруктураНастройки = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"ОбновлениеКонфигурации", 
		"НастройкиОбновленияКонфигурации");
	Если СтруктураНастройки <> Неопределено Тогда 
		СтруктураНастройки.Свойство("РежимИмитацииКлиентСервернойИБ", Результат);
	КонецЕсли;
	Возврат Результат = Истина;
КонецФункции	

&НаКлиенте
Процедура СохранитьНастройкиОбновленияКонфигурации()
	
	ПараметрыРаботыКлиента = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента();
	
	Настройки = ОбновлениеКонфигурацииКлиентСервер.ПолучитьОбновленныеНастройкиОбновленияКонфигурации(НастройкиОбновленияКонфигурации);
	
	Настройки.ПропускатьПриветствие = Объект.ПропускатьПриветствие;
	Настройки.КодПользователяСервераОбновлений = Объект.КодПользователяСервераОбновлений;
	Настройки.ПарольСервераОбновлений = ?(Объект.ЗапомнитьПарольСервераОбновлений, Объект.ПарольСервераОбновлений, "");
	Настройки.ЗапомнитьПарольСервераОбновлений = Объект.ЗапомнитьПарольСервераОбновлений;
	
	Настройки.ПроверятьНаличиеОбновленияПриЗапуске = Объект.ПроверятьНаличиеОбновленияПриЗапуске;
	Настройки.РасписаниеПроверкиНаличияОбновления = ОбщегоНазначенияКлиентСервер.РасписаниеВСтруктуру(Объект.РасписаниеПроверкиНаличияОбновления);
	Настройки.ИсточникОбновления = Объект.ИсточникОбновления;
	Настройки.РежимОбновления = Объект.РежимОбновления;
	Настройки.ДатаВремяОбновления = Объект.ДатаВремяОбновления;
	Настройки.ВыслатьОтчетНаПочту = Объект.ВыслатьОтчетНаПочту;
	Настройки.АдресЭлектроннойПочты = Объект.АдресЭлектроннойПочты;
	Настройки.КодЗадачиПланировщика = Объект.КодЗадачиПланировщика;
	Настройки.ПовторныйЗапуск = Объект.ПовторныйЗапуск;
	Настройки.ИмяФайлаОбновления = Объект.ИмяФайлаОбновления;
	Настройки.НуженФайлОбновления = Объект.НуженФайлОбновления;
	
	Настройки.СоздаватьРезервнуюКопию = Объект.СоздаватьРезервнуюКопию;
	Настройки.ВосстанавливатьИнформационнуюБазу = Объект.ВосстанавливатьИнформационнуюБазу;
	Настройки.ИмяКаталогаРезервнойКопииИБ = Объект.ИмяКаталогаРезервнойКопииИБ;
	
	Настройки.АдресСервераДляПроверкиНаличияОбновления = ПараметрыРаботыКлиента.НастройкиОбновления.АдресСервераДляПроверкиНаличияОбновления;
	Настройки.КаталогОбновлений = ПараметрыРаботыКлиента.НастройкиОбновления.КаталогОбновлений;
	Настройки.КороткоеИмяКонфигурации = ПараметрыРаботыКлиента.НастройкиОбновления.КороткоеИмяКонфигурации;
	Настройки.АдресРесурсаДляПроверкиНаличияОбновления = ПараметрыРаботыКлиента.НастройкиОбновления.АдресРесурсаДляПроверкиНаличияОбновления;
	
	Настройки.ДискИТС = ДискИТС;
	Настройки.ИсточникДискаИТС = Объект.ИсточникДискаИТС;
	
	Настройки.КластерТребуетАутентификации = Объект.КластерТребуетАутентификации;
	Настройки.ИмяАдминистратораКластера = Объект.ИмяАдминистратораКластера;
	Настройки.ПарольАдминистратораКластера = Объект.ПарольАдминистратораКластера;
	Настройки.НестандартныеПортыСервера = Объект.НестандартныеПортыСервера;
	Настройки.ПортАгентаСервера = Объект.ПортАгентаСервера;
	Настройки.ПортКластераСерверов = Объект.ПортКластераСерверов;
	
	ОбновлениеКонфигурацииВызовСервера.ЗаписатьСтруктуруНастроекПомощника(НастройкиОбновленияКонфигурации);
	
	Если ПараметрыРаботыКлиента.НастройкиОбновления.ЕстьДоступДляОбновления Тогда
		
		АдминистрированияИБ = ПолучитьПараметрыАдминистрированияИБ();
		
		АдминистрированияИБ.ИмяАдминистратораИБ = Объект.ИмяАдминистратораИБ;
		АдминистрированияИБ.ПарольАдминистратораИБ = Объект.ПарольАдминистратораИБ;
		
		Если НЕ ПараметрыРаботыКлиента.ИнформационнаяБазаФайловая Тогда
			АдминистрированияИБ.ИмяАдминистратораКластера		= ?(Объект.КластерТребуетАутентификации, Объект.ИмяАдминистратораКластера, "");
			АдминистрированияИБ.ПарольАдминистратораКластера	= ?(Объект.КластерТребуетАутентификации, Объект.ПарольАдминистратораКластера, "");
			АдминистрированияИБ.ПортКластераСерверов = ?(Объект.НестандартныеПортыСервера, Объект.ПортКластераСерверов, 0);
			АдминистрированияИБ.ПортАгентаСервера = ?(Объект.НестандартныеПортыСервера, Объект.ПортАгентаСервера, 0);
		КонецЕсли;
		ЗаписатьПараметрыАдминистрированияИБ(АдминистрированияИБ);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПараметрыАдминистрированияИБ()
	
	Возврат СоединенияИБ.ПолучитьПараметрыАдминистрированияИБ();
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаписатьПараметрыАдминистрированияИБ(АдминистрированияИБ)
	
	СоединенияИБ.ЗаписатьПараметрыАдминистрированияИБ(АдминистрированияИБ);
	
КонецПроцедуры

&НаКлиенте
Процедура ВосстановитьНастройкиОбновленияКонфигурации()
	
	Объект.ВосстанавливатьИнформационнуюБазу		= Истина;
	
	// Восстановление настроек
	Если НастройкиОбновленияКонфигурации = Неопределено Тогда
		НастройкиОбновленияКонфигурации = ОбновлениеКонфигурацииВызовСервера.ПолучитьСтруктуруНастроекПомощника();
		ОбновлениеКонфигурацииКлиентСервер.ПолучитьОбновленныеНастройкиОбновленияКонфигурации(НастройкиОбновленияКонфигурации);
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(Объект, НастройкиОбновленияКонфигурации);
	Объект.РасписаниеПроверкиНаличияОбновления = ОбщегоНазначенияКлиентСервер.СтруктураВРасписание(Объект.РасписаниеПроверкиНаличияОбновления);
	ПараметрыРаботыКлиента = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента();
	Если ПараметрыРаботыКлиента.ИнформационнаяБазаФайловая И Объект.РежимОбновления > 1 Тогда
		Объект.РежимОбновления = 0;
	КонецЕсли;
	
	Если КонфигурацияИзменена Тогда
		ПараметрыОбновления = ОбновлениеКонфигурацииКлиент.ПолучитьДоступноеОбновлениеКонфигурации();
		ПараметрыОбновления.ИсточникОбновления = 2;  // локальный или сетевой каталог
		ПараметрыОбновления.НуженФайлОбновления = Ложь;
		ПараметрыОбновления.ФлагАвтоПереходаНаСтраницуСОбновлением = Истина;
	КонецЕсли;
	
	Если ПараметрыРаботыКлиента.НастройкиОбновления.ЕстьДоступДляОбновления Тогда
		
		
		Настройка = СоединенияИБПовтИсп.ПолучитьПараметрыАдминистрированияИБ();
		
		Объект.ИмяАдминистратораИБ = Настройка.ИмяАдминистратораИБ;
		Объект.ПарольАдминистратораИБ = Настройка.ПарольАдминистратораИБ;
		
		Если НЕ ПараметрыРаботыКлиента.ИнформационнаяБазаФайловая Тогда
			Объект.ИмяАдминистратораКластера		= Настройка.ИмяАдминистратораКластера;
			Объект.ПарольАдминистратораКластера		= Настройка.ПарольАдминистратораКластера;
			Объект.КластерТребуетАутентификации		= НЕ ПустаяСтрока(Объект.ИмяАдминистратораКластера);
			Объект.НестандартныеПортыСервера		= Настройка.ПортКластераСерверов <> 0 ИЛИ Настройка.ПортАгентаСервера <> 0;
			Если Объект.НестандартныеПортыСервера Тогда
				Объект.ПортКластераСерверов			= Настройка.ПортКластераСерверов;
				Объект.ПортАгентаСервера			= Настройка.ПортАгентаСервера;
			Иначе
				Попытка
					ПортыПоУмолчанию = ПортыСервераПоУмолчанию(ПараметрыРаботыКлиента.ИмяCOMСоединителя);
					Объект.ПортКластераСерверов = ПортыПоУмолчанию.ПортКластераСерверов;
					Объект.ПортАгентаСервера = ПортыПоУмолчанию.ПортАгентаСервера;
				Исключение
					ИмяСобытияЖурнала = ОбновлениеКонфигурацииКлиент.СобытиеЖурналаРегистрации();
					
					ОбщегоНазначенияКлиент.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытияЖурнала,, 
						НСтр("ru = 'Ошибка при восстановлении настроек обновления:'")
						+ " " + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
							
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Параметры.ЗавершениеРаботыСистемы Тогда
		Объект.РежимОбновления = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПортыСервераПоУмолчанию(ИмяCOMСоединителя)
	
	Результат = Новый Структура("ПортКластераСерверов,ПортАгентаСервера");
	ComConnector = Новый COMОбъект(ИмяCOMСоединителя);
	Результат.ПортКластераСерверов = ComConnector.RMngrPortDefault;
	Результат.ПортАгентаСервера = ComConnector.RAgentPortDefault;
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПередОткрытиемСтраницы(НоваяТекущаяСтраница = Неопределено) 
	Страницы		= Элементы.СтраницыПомощника.ПодчиненныеЭлементы;
	Если НоваяТекущаяСтраница = Неопределено Тогда
		НоваяТекущаяСтраница = Элементы.СтраницыПомощника.ТекущаяСтраница;
	КонецЕсли;
	
	ДоступностьКнопкиНазад		= Истина;
	ДоступностьКнопкиДалее		= Истина;
	ДоступностьКнопкиЗакрыть	= Истина;
	ФункцияКнопкиДалее			= Истина; // Истина = "Далее", Ложь = "Готово"
	
	Если НоваяТекущаяСтраница = Страницы.ДоброПожаловать Тогда
		ДоступностьКнопкиНазад = Ложь;
		
		Если Объект.ИсточникОбновления = 0 Тогда
			Элементы.СтраницыКартинкиИнтернет.ТекущаяСтраница	= Элементы.СтраницыКартинкиИнтернет.ПодчиненныеЭлементы.ЕстьКартинка;
			Элементы.СтраницыКартинкиИТС.ТекущаяСтраница		= Элементы.СтраницыКартинкиИТС.ПодчиненныеЭлементы.НетКартинки1;
			Элементы.СтраницыКартинкиФайл.ТекущаяСтраница		= Элементы.СтраницыКартинкиФайл.ПодчиненныеЭлементы.НетКартинки2;
		ИначеЕсли Объект.ИсточникОбновления = 1 Тогда
			Элементы.СтраницыКартинкиИнтернет.ТекущаяСтраница	= Элементы.СтраницыКартинкиИнтернет.ПодчиненныеЭлементы.НетКартинки;
			Элементы.СтраницыКартинкиИТС.ТекущаяСтраница		= Элементы.СтраницыКартинкиИТС.ПодчиненныеЭлементы.ЕстьКартинка1;
			Элементы.СтраницыКартинкиФайл.ТекущаяСтраница		= Элементы.СтраницыКартинкиФайл.ПодчиненныеЭлементы.НетКартинки2;
		ИначеЕсли Объект.ИсточникОбновления = 2 Тогда
			Элементы.СтраницыКартинкиИнтернет.ТекущаяСтраница	= Элементы.СтраницыКартинкиИнтернет.ПодчиненныеЭлементы.НетКартинки;
			Элементы.СтраницыКартинкиИТС.ТекущаяСтраница		= Элементы.СтраницыКартинкиИТС.ПодчиненныеЭлементы.НетКартинки1;
			Элементы.СтраницыКартинкиФайл.ТекущаяСтраница		= Элементы.СтраницыКартинкиФайл.ПодчиненныеЭлементы.ЕстьКартинка2;
		КонецЕсли;
		
		ИспользоватьОбновлениеСДискаИТС = ОбновлениеКонфигурацииКлиентПереопределяемый.ИспользоватьОбновлениеСДискаИТС();
		Элементы.ГруппаИТС.Видимость = ИспользоватьОбновлениеСДискаИТС;
		
		Элементы.ГиперссылкаПроверятьНаличиеОбновленияПриЗапуске.Заголовок	= ТекстНадписиПроверкиОбновления();
		Элементы.ПропускатьПриветствие.Доступность							= (Объект.ИсточникОбновления = 0);
		
	ИначеЕсли НоваяТекущаяСтраница = Страницы.ПодключениеКИнтернет Тогда
		
	ИначеЕсли НоваяТекущаяСтраница = Страницы.ПодключениеКСайту Тогда
		
		ВидимостьПанелиОшибкиПодключения = ? (ЗначениеЗаполнено(Объект.КодПользователяСервераОбновлений) 
			ИЛИ ЗначениеЗаполнено(Объект.ПарольСервераОбновлений), Истина, Ложь);
														
		Элементы.ПанельОшибкаПодключения.Видимость = ВидимостьПанелиОшибкиПодключения;
		Элементы.ПанельЖурналРегистрации.Видимость = ВидимостьПанелиОшибкиПодключения;
		Если СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ЭтоБазоваяВерсияКонфигурации Тогда
			Элементы.ГруппаДоступаНаСайт.ТекущаяСтраница = Элементы.ГруппаДоступаНаСайт.ПодчиненныеЭлементы.Базовая;
		КонецЕсли;
		
		Если ПустаяСтрока(Объект.ТехническаяИнформацияОбОшибке) Тогда
			Объект.ТехническаяИнформацияОбОшибке = "";
		Иначе				
			Объект.ТехническаяИнформацияОбОшибке = НСтр("ru = 'Техническая информация об ошибке:'") + Символы.ПС + Объект.ТехническаяИнформацияОбОшибке;
		КонецЕсли;
		
	ИначеЕсли НоваяТекущаяСтраница = Страницы.ДоступноеОбновление Тогда
		
		СтруктураДоступногоОбновления	= ПолучитьСтруктуруДоступногоОбновления(Истина);
		Если СтруктураДоступногоОбновления <> Неопределено Тогда
			Элементы.НадписьИнформацияОбОбновлении.Видимость	= НЕ ПустаяСтрока(ИмяФайлаИнформацияОбОбновлении);
			Элементы.НадписьОписаниеКонфигурации.Заголовок		= СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().СинонимКонфигурации;
			Элементы.НадписьТекущаяКонфигурация.Заголовок		= СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ВерсияКонфигурации;
			Элементы.НадписьДоступноеОбновление.Заголовок		= НСтр("ru = 'Версия'") + " " + СтруктураДоступногоОбновления.Версия;
			Элементы.НадписьРазмерОбновления.Заголовок			= СтруктураДоступногоОбновления.РазмерОбновления;
			Элементы.ПанельПорядокОбновления.Видимость			= НЕ ПустаяСтрока(ИмяФайлаПорядокОбновления);
			Если ДоступноОбновлениеДля83 Тогда
				Элементы.ГруппаТребуетсяОбновлениеПлатформы.Видимость = Истина;
				ДоступностьКнопкиДалее = Ложь;
				ДоступностьКнопкиЗакрыть = Истина;
			КонецЕсли;
		КонецЕсли;
		Элементы.ГиперссылкаПроверятьНаличиеОбновленияПриЗапуске1.Заголовок	= ТекстНадписиПроверкиОбновления();
		СтраницыПереходаНаСледующийШаг					= Элементы.ПанельПереходаНаСледующийШаг.ПодчиненныеЭлементы;
		Элементы.ПанельПереходаНаСледующийШаг.ТекущаяСтраница = ?(Объект.ИсточникОбновления = 0, 
			СтраницыПереходаНаСледующийШаг.Интернет1, СтраницыПереходаНаСледующийШаг.ИТС1);
																		
	ИначеЕсли НоваяТекущаяСтраница = Страницы.ОбновленияНеОбнаружено Тогда
		
		СтруктураДоступногоОбновления	= ПолучитьСтруктуруДоступногоОбновления();
		ФункцияКнопкиДалее										= Ложь;
		ДоступностьКнопкиДалее									= Ложь;
		Элементы.НадписьОписаниеТекущейКонфигурации.Заголовок	= СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().СинонимКонфигурации;
		Элементы.НадписьВерсияТекущейКонфигурации.Заголовок		= СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ВерсияКонфигурации;
		Элементы.НадписьВерсияДляОбновления.Заголовок			= ?(ТипЗнч(СтруктураДоступногоОбновления) = Тип("Структура"), НСтр("ru = 'Доступная версия для обновления -'") + " " + СтруктураДоступногоОбновления.Версия, "");
		Элементы.НадписьВерсияДляОбновления.Видимость			= НЕ ПустаяСтрока(Элементы.НадписьВерсияДляОбновления.Заголовок);
		
		Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ВерсияКонфигурации,
			ПоследняяВерсияКонфигурации) >= 0
			И (Объект.ИсточникОбновления = 1 И НЕ ПустаяСтрока(ПутьКФайламОбновленияНаДискеИТС)
			ИЛИ СтруктураДоступногоОбновления <> Неопределено)
			ИЛИ (Объект.ИсточникОбновления = 0 И Объект.ДоступныеОбновления.Количество() = 0) Тогда // это последняя версия.
			
			Элементы.ПанельИнформацияОбОбновлении.ТекущаяСтраница	= Элементы.ПанельИнформацияОбОбновлении.ПодчиненныеЭлементы.ОбновлениеНеТребуется;
			Элементы.ЗаголовокОбновления.Заголовок					= НСтр("ru = 'Обновление не требуется'");
		ИначеЕсли СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ГлавныйУзел <> Неопределено Тогда
			Элементы.ПанельИнформацияОбОбновлении.ТекущаяСтраница	= Элементы.ОбновлениеПроизводитсяВГлавномУзле;
			Элементы.ЗаголовокОбновления.Заголовок					= НСтр("ru = 'Обновление не требуется'");
		Иначе 
			Элементы.ПанельИнформацияОбОбновлении.ТекущаяСтраница	= Элементы.ПанельИнформацияОбОбновлении.ПодчиненныеЭлементы.ОбновлениеНеОбнаружено;
			Элементы.ЗаголовокОбновления.Заголовок					= НСтр("ru = 'Обновления конфигурации не обнаружено'");
		КонецЕсли;
		
		НадписьНеобходимыеДискиИТС = ТекстНадписиНеобходимыеДискиИТС();
		Элементы.НадписьНеобходимыеДискиИТС.Видимость			= НЕ ПустаяСтрока(НадписьНеобходимыеДискиИТС);
		Элементы.НадписьПереченьРелизовНаДискахИТС.Видимость	= НЕ ПустаяСтрока(ПереченьРелизовНаДискахИТС);
		Элементы.ГруппаПроверкиДискаИТС.Видимость = Объект.ИсточникОбновления = 1 И Объект.ИсточникДискаИТС <> 1;
		
		Если Не СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ЭтоГлавныйУзел Тогда
			ДоступностьКнопкиНазад = Ложь;
			Элементы.ГруппаПроверкиДискаИТС.Видимость = Ложь;
		КонецЕсли;
		
	ИначеЕсли НоваяТекущаяСтраница = Страницы.ДлительнаяОперация Тогда
		
		ДоступностьКнопкиДалее		= Ложь;
		ДоступностьКнопкиНазад		= Ложь;
		ДоступностьКнопкиЗакрыть	= Ложь;
		
		СтраницыОжидания			= Элементы.ПанельОжиданиеДлительнойОперации.ПодчиненныеЭлементы;
		Элементы.ПанельОжиданиеДлительнойОперации.ТекущаяСтраница = ?(Объект.ИсточникОбновления = 0, 
			СтраницыОжидания.Интернет, СтраницыОжидания.ИТС);
		
	ИначеЕсли НоваяТекущаяСтраница = Страницы.ВыборРежимаОбновленияФайл Тогда
		
		ФункцияКнопкиДалее = (Объект.РежимОбновления = 0);// Если НЕ обновляем сейчас, то "готово".
		
		СтраницыПанельВсеГотово = Элементы.ПанельВсеГотовоФайл.ПодчиненныеЭлементы;
		Элементы.ПанельВсеГотовоФайл.ТекущаяСтраница = ?(ПустаяСтрока(ИмяФайлаПорядокОбновления), 
			СтраницыПанельВсеГотово.ВсеГотово, СтраницыПанельВсеГотово.ВсеГотовоПорядокОбновления);
			
		СтраницыПереходаНаСледующийШаг = Элементы.ПанельПереходаНаСледующийШагРежимаОбновленияФайл.ПодчиненныеЭлементы;
		Элементы.ПанельПереходаНаСледующийШагРежимаОбновленияФайл.ТекущаяСтраница = ?(ФункцияКнопкиДалее, 
			СтраницыПереходаНаСледующийШаг.Далее, СтраницыПереходаНаСледующийШаг.Готово);
																						
		СоединенияИнфо = ПолучитьИнформациюОНаличииСоединений(СообщенияДляЖурналаРегистрации);
		Элементы.ГруппаСоединений.Видимость = ?(СоединенияИнфо.НаличиеАктивныхСоединений, Истина, Ложь);
			
		Если СоединенияИнфо.НаличиеАктивныхСоединений Тогда
			ВсеСтраницы				= Элементы.ПанельАктивныеПользователи.ПодчиненныеЭлементы;
			ДоступностьКнопкиДалее	= Истина; 
			Если СоединенияИнфо.НаличиеCOMСоединений Тогда
				Элементы.ПанельАктивныеПользователи.ТекущаяСтраница							= ВсеСтраницы.АктивныеСоединения;
				Элементы.ПанельПереходаНаСледующийШагРежимаОбновленияФайл.ТекущаяСтраница	= СтраницыПереходаНаСледующийШаг.АктивныеСоединения2;
			ИначеЕсли СоединенияИнфо.НаличиеСоединенияКонфигуратором Тогда
				Элементы.ПанельАктивныеПользователи.ТекущаяСтраница							= ВсеСтраницы.СоединениеКонфигуратора;
				Элементы.ПанельПереходаНаСледующийШагРежимаОбновленияФайл.ТекущаяСтраница	= СтраницыПереходаНаСледующийШаг.СоединениеКонфигуратора2;
			Иначе
				Элементы.ПанельАктивныеПользователи.ТекущаяСтраница							= ВсеСтраницы.АктивныеПользователи;
			КонецЕсли; 
		КонецЕсли;
		
		Элементы.НадписьРезервнаяКопияФайл.Заголовок = ТекстНадписиРезервнойКопииИБ();
		
		Если Не СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ЭтоГлавныйУзел Тогда
			ДоступностьКнопкиНазад = Ложь;
		КонецЕсли;
	ИначеЕсли НоваяТекущаяСтраница = Страницы.ВыборРежимаОбновленияСервер Тогда

		Если Объект.КодЗадачиПланировщика = 0 И НЕ ДатаВремяОбновленияУстановлена Тогда
			Объект.ДатаВремяОбновления		= ВернутьДату(ОбновлениеКонфигурацииКлиентСервер.ДобавитьДни(
				НачалоДня(ОбщегоНазначенияКлиент.ДатаСеанса()), 1), Объект.ДатаВремяОбновления);
			ДатаВремяОбновленияУстановлена	= Истина;
		КонецЕсли; 
		
		ФункцияКнопкиДалее = (Объект.РежимОбновления = 0);// Если НЕ обновляем сейчас, то "готово".
		
		СтраницыПанельВсеГотово = Элементы.ПанельВсеГотовоСервер.ПодчиненныеЭлементы;
		Элементы.ПанельВсеГотовоСервер.ТекущаяСтраница = ?(ПустаяСтрока(ИмяФайлаПорядокОбновления), 
			СтраницыПанельВсеГотово.ВсеГотово1,	СтраницыПанельВсеГотово.ВсеГотовоПорядокОбновления1);
			
		Если ПустаяСтрока(ИмяФайлаПорядокОбновления) И Элементы.НадписьВыберитеСпособОбновленияСервер.Видимость = Ложь Тогда
			
			Элементы.ПанельВсеГотовоСервер.Видимость = Ложь;
			
		КонецЕсли;
		
		СтраницыПанелиИнформацииПерезагрузки1						= Элементы.СтраницыИнформацииПерезагрузки1.ПодчиненныеЭлементы;
		Элементы.СтраницыИнформацииПерезагрузки1.ТекущаяСтраница	= ?(Объект.РежимОбновления = 0,
			СтраницыПанелиИнформацииПерезагрузки1.СтраницаПерезагрузкиСейчас1,
			СтраницыПанелиИнформацииПерезагрузки1.СтраницаЗапланированнойПерезагрузки);
															
		СоединенияИнфо		= ПолучитьИнформациюОНаличииСоединений(СообщенияДляЖурналаРегистрации);
		НаличиеСоединений	= СоединенияИнфо.НаличиеАктивныхСоединений И ФункцияКнопкиДалее; 
		Элементы.ГруппаСоединений1.Видимость = НаличиеСоединений;
		Если НаличиеСоединений Тогда
			ВсеСтраницы = Элементы.ПанельАктивныеПользователи1.ПодчиненныеЭлементы;
			Элементы.ПанельАктивныеПользователи1.ТекущаяСтраница = ? (СоединенияИнфо.НаличиеCOMСоединений, 
				ВсеСтраницы.АктивныеСоединения1, ВсеСтраницы.АктивныеПользователи1);
		КонецЕсли;
			
		Элементы.ПолеДатаВремяОбновления.Доступность = (Объект.РежимОбновления = 2);
		Элементы.АдресЭлектроннойПочты.Доступность	= Объект.ВыслатьОтчетНаПочту;
		
		СтраницыПереходаНаСледующийШаг = Элементы.ПанельПереходаНаСледующийШагРежимаОбновленияСервер.ПодчиненныеЭлементы;
		СледСтраница = СтраницыПереходаНаСледующийШаг.Сейчас;
		Если Объект.РежимОбновления = 1 Тогда
			СледСтраница = СтраницыПереходаНаСледующийШаг.Отмена;
		ИначеЕсли Объект.РежимОбновления = 2 Тогда	
			СледСтраница = СтраницыПереходаНаСледующийШаг.Отложить;
		КонецЕсли; 
		Элементы.ПанельПереходаНаСледующийШагРежимаОбновленияСервер.ТекущаяСтраница = СледСтраница;
		
		Если Не СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ЭтоГлавныйУзел Тогда
			ДоступностьКнопкиНазад = Ложь;
		КонецЕсли;
	ИначеЕсли НоваяТекущаяСтраница = Страницы.УспешноеОбновление Тогда
		
		Элементы.ПанельПорядокОбновленияПриЗавершении.Видимость	= НЕ ПустаяСтрока(ИмяФайлаПорядокОбновления);
		ФункцияКнопкиДалее = Ложь;
		ДоступностьКнопкиНазад = Ложь;
		ДоступностьКнопкиЗакрыть = Ложь;
		
	ИначеЕсли НоваяТекущаяСтраница = Страницы.НеуспешноеОбновление Тогда
		
		ФункцияКнопкиДалее = Ложь;
		ДоступностьКнопкиЗакрыть = Ложь;
		
	ИначеЕсли НоваяТекущаяСтраница = Страницы.ФайлОбновления Тогда
		
		Если Объект.НуженФайлОбновления = 0 Тогда
			Если КонфигурацияИзменена Тогда
				Элементы.СтраницыНадписиИзмененнойКонфигурации.ТекущаяСтраница = Элементы.СтраницыНадписиИзмененнойКонфигурации.ПодчиненныеЭлементы.ЕстьИзменения;
			Иначе
				Элементы.СтраницыНадписиИзмененнойКонфигурации.ТекущаяСтраница = Элементы.СтраницыНадписиИзмененнойКонфигурации.ПодчиненныеЭлементы.НетИзменений;
				ДоступностьКнопкиДалее = Ложь;
			КонецЕсли;
		КонецЕсли;
		Элементы.ПанельОбновлениеИзОсновнойКонфигурации.Видимость	= Объект.НуженФайлОбновления = 0;
		Элементы.ПолеФайлОбновления.Доступность						= Объект.НуженФайлОбновления = 1;
		Элементы.ПолеФайлОбновления.АвтоОтметкаНезаполненного		= Объект.НуженФайлОбновления = 1;
		
	ИначеЕсли НоваяТекущаяСтраница = Страницы.ПараметрыАвторизации Тогда
		
		ЗапрашиватьАвторизациюИБ				= ЗапрашиватьПарольАдминистратора();
		Элементы.ПанельАвторизацияИБ.Видимость	= ЗапрашиватьАвторизациюИБ;
		Если ЗапрашиватьАвторизациюИБ Тогда
			УстановкаПароля												= ВводитьПарольАдминистратора();
			Элементы.ПанельПредупреждениеОWindowsАвторизации.Видимость	= УстановкаПароля;
			Объект.ИмяАдминистратораИБ									= СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ИнформацияОПользователе.Имя;
		КонецЕсли; 
		
		Элементы.ПанельАвторизацияКластераСерверов.Видимость	= НЕ СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ИнформационнаяБазаФайловая;
		Элементы.ПанельДоступККластеру.Доступность				= Объект.КластерТребуетАутентификации;
		Элементы.ПанельНестандартныеПортыСервера.Доступность	= Объект.НестандартныеПортыСервера;
		ТекущийЭлемент = Элементы.ПарольАдминистратораИБСервер;
		
	ИначеЕсли НоваяТекущаяСтраница = Страницы.МестоположениеДискаИТС Тогда
		
		Элементы.ДискИТС.Доступность = (Объект.ИсточникДискаИТС = 1);
		Если Объект.ИсточникДискаИТС = 1 Тогда
			Элементы.СтраницыНаличияДискаИТС.ТекущаяСтраница = Элементы.СтраницыНаличияДискаИТС.ПодчиненныеЭлементы.УказаниеКаталога;
		Иначе
			Элементы.СтраницыНаличияДискаИТС.ТекущаяСтраница = Элементы.СтраницыНаличияДискаИТС.ПодчиненныеЭлементы.ИнфНадписьИТС;
		КонецЕсли;
		
	ИначеЕсли НоваяТекущаяСтраница = Страницы.ДополнительныеНастройки Тогда
		
		ЗапрашиватьАвторизациюИБ				= ЗапрашиватьПарольАдминистратора();
		Элементы.ПанельАвторизацияИБ.Видимость	= ЗапрашиватьАвторизациюИБ;
		Если ЗапрашиватьАвторизациюИБ Тогда
			УстановкаПароля												= ВводитьПарольАдминистратора();
			Элементы.ПредупреждениеОWindowsАвторизацииФайл.Видимость	= УстановкаПароля;
			Объект.ИмяАдминистратораИБ									= СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ИнформацияОПользователе.Имя;
		КонецЕсли; 
		Элементы.ГруппаComcntrФайловыйРежим.Видимость = НЕ СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ЭтоБазоваяВерсияКонфигурации;
		ТекущийЭлемент = Элементы.ПарольАдминистратораИБФайл;
		
	КонецЕсли;
	
	// на страницах с ошибками нужно зафиксировать журнал регистрации
	ОбщегоНазначенияВызовСервера.ЗаписатьСобытияВЖурналРегистрации(СообщенияДляЖурналаРегистрации);
		
	КнопкаДалее		= КоманднаяПанель.ПодчиненныеЭлементы.КнопкаДалее;
	КнопкаНазад		= КоманднаяПанель.ПодчиненныеЭлементы.КнопкаНазад;
	КнопкаЗакрыть	= КоманднаяПанель.ПодчиненныеЭлементы.КнопкаЗакрыть;
	КнопкаНазад.Доступность		= ДоступностьКнопкиНазад;
	КнопкаДалее.Доступность		= ДоступностьКнопкиДалее;
	КнопкаЗакрыть.Доступность	= ДоступностьКнопкиЗакрыть;
	Если ДоступностьКнопкиДалее Тогда
		Если НЕ КнопкаДалее.КнопкаПоУмолчанию Тогда
			КнопкаДалее.КнопкаПоУмолчанию = Истина;
		КонецЕсли;
	ИначеЕсли ДоступностьКнопкиЗакрыть Тогда
		Если НЕ КнопкаЗакрыть.КнопкаПоУмолчанию Тогда
			КнопкаЗакрыть.КнопкаПоУмолчанию = Истина;
		КонецЕсли;
	КонецЕсли;
	
	КнопкаДалее.Заголовок = ? (ФункцияКнопкиДалее, НСтр("ru = '&Далее >'"), НСтр("ru = '&Готово'"));
	
	Если НоваяТекущаяСтраница = Страницы.ДлительнаяОперация Тогда
		ПодключитьОбработчикОжидания("ВыполнитьПолучениеОбновления", 1, Истина);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ТекстНадписиНеобходимыеДискиИТС()
	Результат = "";
	Для каждого ТекДоступноеОбновление Из Объект.ДоступныеОбновления Цикл
		Если НЕ ПустаяСтрока(ТекДоступноеОбновление.НомерДискаИТС) И НЕ ПустаяСтрока(ТекДоступноеОбновление.Версия) И
			ПустаяСтрока(ТекДоступноеОбновление.ПутьКЛокальномуФайлуОбновления) Тогда
			Результат = Результат + ?(ПустаяСтрока(Результат), "", Символы.ПС) + ТекДоступноеОбновление.НомерДискаИТС + НСтр("ru = ' - Версия'") + " " + ТекДоступноеОбновление.Версия;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ВосстановитьРезультатыПредыдущегоЗапуска(Отказ = Ложь)
	
	Страницы	= Элементы.СтраницыПомощника.ПодчиненныеЭлементы;
	ВосстановлениеРезультатовПредЗапуска = Истина;
	ИмяСтраницы	= ОбработатьСтраницуДоброПожаловать(Ложь);
	Обработано	= 	ИмяСтраницы = Страницы.ДоступноеОбновление.Имя ИЛИ 
				 	ИмяСтраницы = Страницы.ВыборРежимаОбновленияСервер.Имя ИЛИ
				 	ИмяСтраницы = Страницы.ВыборРежимаОбновленияФайл.Имя ИЛИ
				 	ИмяСтраницы = Страницы.ПараметрыАвторизации.Имя ИЛИ
					ИмяСтраницы = Страницы.ДополнительныеНастройки.Имя;

	ВосстановлениеРезультатовПредЗапуска = Ложь;
	Если НЕ Обработано Тогда
		Отказ = Истина;
		Возврат ИмяСтраницы;
	КонецЕсли;

	Если ИмяСтраницы = Страницы.ДоступноеОбновление.Имя Тогда
		СписокФайловДляПолучения = СоздатьСписокФайловДляПолучения();
		Если ПроверитьФайлыОбновленияПолучены() Тогда
			ИмяСобытияЖурнала = ОбновлениеКонфигурацииКлиент.СобытиеЖурналаРегистрации();
			
			ОбщегоНазначенияКлиент.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытияЖурнала, "Информация",
				НСтр("ru = 'Обнаружено, что файлы обновления конфигурации уже были получены и сохранены локально.'"));
				
			ИмяСтраницы = ПерейтиКВыборуРежимаОбновления(Ложь);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ИмяСтраницы;
	
КонецФункции

&НаКлиенте
Функция ОбработатьСтраницуДоброПожаловать(ВыдаватьСообщения = Истина)
	ОчищатьДоступныеОбновления = Истина;
	Если Объект.ИсточникОбновления = 0 Тогда
		Возврат ПроверитьОбновлениеИнтернет(ВыдаватьСообщения);
	ИначеЕсли Объект.ИсточникОбновления = 1 Тогда
		Возврат ПерейтиНаСтраницуМестоположениеДискаИТС();
	ИначеЕсли Объект.ИсточникОбновления = 2 Тогда
		Возврат ПроверитьОбновлениеФайл(ВыдаватьСообщения);
	КонецЕсли;
	Возврат Неопределено;
КонецФункции

&НаКлиенте
Функция ПерейтиНаСтраницуМестоположениеДискаИТС()
	Возврат Элементы.СтраницыПомощника.ПодчиненныеЭлементы.МестоположениеДискаИТС.Имя;
КонецФункции

&НаКлиенте
Функция ОбработатьСтраницуМестоположениеДискаИТС(ВыдаватьСообщения = Истина)
	Возврат ПроверитьОбновлениеИТС(ВыдаватьСообщения);
КонецФункции

&НаКлиенте
Функция ОбработатьСтраницуПодключениеКИнтернет(ВыдаватьСообщения = Истина)
	Страницы		= Элементы.СтраницыПомощника.ПодчиненныеЭлементы;
	Объект.ТехническаяИнформацияОбОшибке = "";
	Если СписокФайловДляПолучения.Количество() > 0 Тогда
		Возврат Страницы.ДлительнаяОперация.Имя;
	ИначеЕсли Объект.ДоступныеОбновления.Количество() > 0 Тогда
		Возврат Страницы.ДоступноеОбновление.Имя;
	КонецЕсли;
		
	Возврат ?(Объект.ДоступныеОбновления.Количество() = 0, ПроверитьОбновлениеИнтернет(ВыдаватьСообщения), Страницы.ПодключениеКСайту.Имя);
КонецФункции

&НаКлиенте
Функция ОбработатьСтраницуПодключениеКСайту(ВыдаватьСообщения = Истина)
	Страницы		= Элементы.СтраницыПомощника.ПодчиненныеЭлементы;
	Объект.ТехническаяИнформацияОбОшибке = "";
	Если НЕ ЗначениеЗаполнено(Объект.КодПользователяСервераОбновлений) Тогда
		Если ВыдаватьСообщения Тогда
			Предупреждение(НСтр("ru = 'Укажите код пользователя сервера обновлений.'"));
		КонецЕсли;
		ТекущийЭлемент = Элементы.КодПользователяСервераОбновлений;
		Возврат Страницы.ПодключениеКСайту.Имя;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ПарольСервераОбновлений) Тогда
		Если ВыдаватьСообщения Тогда
			Предупреждение(НСтр("ru = 'Укажите пароль пользователя сервера обновлений.'"));
		КонецЕсли;
		ТекущийЭлемент = Элементы.ПарольСервераОбновлений;
		Возврат Страницы.ПодключениеКСайту.Имя;
	КонецЕсли;
	
	Если СписокФайловДляПолучения.Количество() > 0 Тогда
		Возврат Страницы.ДлительнаяОперация.Имя;
	ИначеЕсли Объект.ДоступныеОбновления.Количество() > 0 Тогда
		Возврат Страницы.ДоступноеОбновление.Имя;
	КонецЕсли;
	
	Возврат ПроверитьОбновлениеИнтернет(ВыдаватьСообщения);
КонецФункции

&НаКлиенте
Функция ОбработатьСтраницуДлительнаяОперация(ВыдаватьСообщения = Истина)
	Возврат РезультатПолученияФайлов;
КонецФункции

&НаКлиенте
Функция ОбработатьСтраницуВыборРежимаОбновления(ВыдаватьСообщения = Истина, ФлагЗавершенияРаботы = Ложь)
	ТекущаяСтраница = Элементы.СтраницыПомощника.ТекущаяСтраница;

	ВыполнитьОбновление = Ложь;
	Если Объект.РежимОбновления = 0 Тогда   // Обновить сейчас
		ИнформационнаяБазаФайловая = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ИнформационнаяБазаФайловая;
		Если ИнформационнаяБазаФайловая И НЕ РежимИмитацииКлиентСервернойИБ() Тогда
			НаличиеСоединений = НаличиеАктивныхСоединений(СообщенияДляЖурналаРегистрации);
			Если НаличиеСоединений Тогда
				Предупреждение(НСтр("ru = 'Невозможно продолжить обновление конфигурации, так как не завершены все соединения с информационной базой.'"));
				Возврат ТекущаяСтраница.Имя;
			КонецЕсли; 
		КонецЕсли;
		ВыполнитьОбновление		= Истина;
		ФлагЗавершенияРаботы	= Истина;
		Возврат ТекущаяСтраница.Имя;
	ИначеЕсли Объект.РежимОбновления = 1 Тогда  // При завершении работы
		
	ИначеЕсли Объект.РежимОбновления = 2 Тогда  // Запланировать обновление
		Если НЕ ПроверитьДопустимуюДатуОбновления(Объект.ДатаВремяОбновления, ВыдаватьСообщения) Тогда
			ТекущийЭлемент = Элементы.ПолеДатаВремяОбновления;
			Возврат ТекущаяСтраница.Имя;
		КонецЕсли;
		Если Объект.ВыслатьОтчетНаПочту Тогда
			ИмяНовойСтраницы = ПроверитьНастройкиЭлектроннойПочты(ТекущаяСтраница.Имя, ВыдаватьСообщения);
			Если НЕ ПустаяСтрока(ИмяНовойСтраницы) Тогда
				Возврат ИмяНовойСтраницы;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ УстановленWMI(ВыдаватьСообщения) Тогда
			Возврат ТекущаяСтраница.Имя;
		КонецЕсли;
		
		Если НЕ ЗапланироватьОбновлениеКонфигурации() Тогда
			Предупреждение(НСтр("ru = 'Невозможно запланировать обновление конфигурации. Сведения об ошибке сохранены в журнал регистрации.'"));
			Возврат ТекущаяСтраница.Имя;
		КонецЕсли;
		
	Иначе
		Возврат ТекущаяСтраница.Имя;
	КонецЕсли;
	
	ПредлагатьОбновлениеИнформационнойБазыПриЗавершенииСеанса = Объект.РежимОбновления = 1;
	
	Сообщение = НСтр("ru = 'Выбран режим обновления:'") + " ";
	Если Объект.РежимОбновления = 0 Тогда   // Обновить сейчас
		Сообщение = Сообщение + НСтр("ru = 'сейчас'");
	ИначеЕсли Объект.РежимОбновления = 1 Тогда  // при завершении работы
		Сообщение = Сообщение + НСтр("ru = 'при завершении работы'");
	ИначеЕсли Объект.РежимОбновления = 2 Тогда  // Запланировать обновление
		Сообщение = Сообщение + НСтр("ru = 'запланировать'");
	КонецЕсли;
	Сообщение = Сообщение + ".";
	ИмяСобытияЖурнала = ОбновлениеКонфигурацииКлиент.СобытиеЖурналаРегистрации();
	ОбщегоНазначенияКлиент.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытияЖурнала, 
		"Информация", Сообщение);

	Закрыть();
	Возврат ТекущаяСтраница.Имя;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьНажатиеКнопкиДалее(ФлагЗавершенияРаботы = Ложь) 
	ОчиститьСообщения();
	ТекущаяСтраница			= Элементы.СтраницыПомощника.ТекущаяСтраница;
	Страницы				= Элементы.СтраницыПомощника.ПодчиненныеЭлементы;
	НоваяТекущаяСтраница	= ТекущаяСтраница;
	КнопкаДалее				= КоманднаяПанель.ПодчиненныеЭлементы.КнопкаДалее;
	КнопкаНазад				= КоманднаяПанель.ПодчиненныеЭлементы.КнопкаНазад;
	КнопкаЗакрыть			= КоманднаяПанель.ПодчиненныеЭлементы.КнопкаЗакрыть;
	
	ТекущаяСтраница.Доступность	= Ложь;
	КнопкаДалее.Доступность		= Ложь;
	КнопкаНазад.Доступность		= Ложь;
	КнопкаЗакрыть.Доступность	= Ложь;
	
	Если ТекущаяСтраница = Страницы.ДоброПожаловать Тогда
		НоваяТекущаяСтраница = Страницы[ОбработатьСтраницуДоброПожаловать()];
	ИначеЕсли ТекущаяСтраница = Страницы.МестоположениеДискаИТС Тогда
		НоваяТекущаяСтраница = Страницы[ОбработатьСтраницуМестоположениеДискаИТС()];
	ИначеЕсли ТекущаяСтраница = Страницы.ПодключениеКИнтернет Тогда
		НоваяТекущаяСтраница = Страницы[ОбработатьСтраницуПодключениеКИнтернет()];
	ИначеЕсли ТекущаяСтраница = Страницы.ПодключениеКСайту Тогда
		НоваяТекущаяСтраница = Страницы[ОбработатьСтраницуПодключениеКСайту()];
	ИначеЕсли ТекущаяСтраница = Страницы.ДоступноеОбновление Тогда
		НоваяТекущаяСтраница = Страницы[ОбработатьСтраницуДоступноеОбновление()];
	ИначеЕсли ТекущаяСтраница = Страницы.ОбновленияНеОбнаружено Тогда
		НоваяТекущаяСтраница = Страницы[ОбработатьСтраницуОбновленияНеОбнаружено()];
	ИначеЕсли ТекущаяСтраница = Страницы.ДлительнаяОперация Тогда
		НоваяТекущаяСтраница = Страницы[ОбработатьСтраницуДлительнаяОперация()];
	ИначеЕсли ТекущаяСтраница = Страницы.ВыборРежимаОбновленияФайл ИЛИ
		ТекущаяСтраница		= Страницы.ВыборРежимаОбновленияСервер Тогда
		НоваяТекущаяСтраница = Страницы[ОбработатьСтраницуВыборРежимаОбновления(, ФлагЗавершенияРаботы)];
	ИначеЕсли ТекущаяСтраница = Страницы.УспешноеОбновление Тогда
		НоваяТекущаяСтраница = Страницы[ОбработатьСтраницуУспешноеОбновление()];
	ИначеЕсли ТекущаяСтраница = Страницы.НеуспешноеОбновление Тогда
		НоваяТекущаяСтраница = Страницы[ОбработатьСтраницуНеуспешноеОбновление()];
	ИначеЕсли ТекущаяСтраница = Страницы.ФайлОбновления Тогда
		НоваяТекущаяСтраница = Страницы[ОбработатьСтраницуФайлОбновления()];
	ИначеЕсли ТекущаяСтраница = Страницы.ПараметрыАвторизации Тогда
		НоваяТекущаяСтраница = Страницы[ОбработатьСтраницуПараметрыАвторизации()];
	ИначеЕсли ТекущаяСтраница = Страницы.ДополнительныеНастройки Тогда
		НоваяТекущаяСтраница = Страницы[ОбработатьСтраницуДополнительныеНастройки()];
	КонецЕсли;
	
	Отказ = Ложь;
	
	ПриПереходеНаСтраницуПомощника(ТекущаяСтраница.Имя, НоваяТекущаяСтраница.Имя, Отказ);
	
	ТекущаяСтраница.Доступность = Истина;
	
	// проверим, что есть доступ к возможности обновления конфигурации
	Если НЕ СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().НастройкиОбновления.ЕстьДоступДляОбновления
		И (НоваяТекущаяСтраница = Страницы.ПодключениеКСайту ИЛИ
										НоваяТекущаяСтраница = Страницы.ДлительнаяОперация ИЛИ
										НоваяТекущаяСтраница = Страницы.ВыборРежимаОбновленияФайл ИЛИ
										НоваяТекущаяСтраница = Страницы.ВыборРежимаОбновленияСервер ИЛИ
										НоваяТекущаяСтраница = Страницы.ФайлОбновления) Тогда
		Отказ						= Истина;
		КнопкаНазад.Доступность		= Истина;
		КнопкаДалее.Доступность		= Истина;
		КнопкаЗакрыть.Доступность	= Истина;
		Предупреждение(НСтр("ru = 'Недостаточно прав для выполнения обновления конфигурации.'"));
	КонецЕсли;
																					
	Если Отказ Тогда
		ОтработатьНажатиеКнопкиНазад();
	Иначе
		ПередОткрытиемСтраницы(НоваяТекущаяСтраница);
		Элементы.СтраницыПомощника.ТекущаяСтраница = НоваяТекущаяСтраница;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтработатьНажатиеКнопкиНазад()
	
	Страницы             = Элементы.СтраницыПомощника.ПодчиненныеЭлементы;
	ТекущаяСтраница      = Элементы.СтраницыПомощника.ТекущаяСтраница;
	НоваяТекущаяСтраница = ТекущаяСтраница;
	
	Если ТекущаяСтраница = Страницы.ДоброПожаловать Тогда
		НоваяТекущаяСтраница = Страницы.ДоброПожаловать;
	ИначеЕсли ТекущаяСтраница = Страницы.ПодключениеКИнтернет Тогда
		НоваяТекущаяСтраница = Страницы.ДоброПожаловать;
	ИначеЕсли ТекущаяСтраница = Страницы.ПодключениеКСайту Тогда
		НоваяТекущаяСтраница = Страницы.ДоступноеОбновление;
	ИначеЕсли ТекущаяСтраница = Страницы.ДоступноеОбновление Тогда
		НоваяТекущаяСтраница = Страницы.ДоброПожаловать;
		Если Объект.ИсточникОбновления = 1 Тогда				// диск ИТС
			НоваяТекущаяСтраница = Страницы.МестоположениеДискаИТС;
		КонецЕсли;
	ИначеЕсли ТекущаяСтраница = Страницы.ОбновленияНеОбнаружено Тогда
		НоваяТекущаяСтраница = Страницы.ДоброПожаловать;
		Если Объект.ИсточникОбновления = 1 Тогда				// диск ИТС
			НоваяТекущаяСтраница = Страницы.МестоположениеДискаИТС;
		КонецЕсли;
	ИначеЕсли ТекущаяСтраница = Страницы.ДлительнаяОперация Тогда
		НоваяТекущаяСтраница = Страницы.ДоброПожаловать;
	ИначеЕсли ТекущаяСтраница = Страницы.ВыборРежимаОбновленияФайл ИЛИ 
		ТекущаяСтраница = Страницы.ВыборРежимаОбновленияСервер ИЛИ
		ТекущаяСтраница = Страницы.ПараметрыАвторизации ИЛИ
		ТекущаяСтраница = Страницы.ДополнительныеНастройки Тогда
		Если Объект.ИсточникОбновления = 0 Тогда				// Интернет
			НоваяТекущаяСтраница = Страницы.ДоступноеОбновление;
		ИначеЕсли Объект.ИсточникОбновления = 1 Тогда			// диск ИТС
			НоваяТекущаяСтраница = Страницы.ДоброПожаловать;
		Иначе													// файл
			НоваяТекущаяСтраница = Страницы.ФайлОбновления;
		КонецЕсли;
	ИначеЕсли ТекущаяСтраница = Страницы.УспешноеОбновление Тогда
		НоваяТекущаяСтраница = Страницы.ДоброПожаловать;
		Если Объект.ИсточникОбновления = 1 Тогда				// диск ИТС
			НоваяТекущаяСтраница = Страницы.МестоположениеДискаИТС;
		КонецЕсли;
	ИначеЕсли ТекущаяСтраница = Страницы.НеуспешноеОбновление Тогда
		НоваяТекущаяСтраница = Страницы.ДоброПожаловать;
		Если Объект.ИсточникОбновления = 1 Тогда				// диск ИТС
			НоваяТекущаяСтраница = Страницы.МестоположениеДискаИТС;
		КонецЕсли;
		Если Не СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ЭтоГлавныйУзел Тогда
			НоваяТекущаяСтраница = Страницы[ПерейтиКВыборуРежимаОбновления()];
		КонецЕсли;
	ИначеЕсли ТекущаяСтраница = Страницы.ФайлОбновления Тогда
		НоваяТекущаяСтраница = Страницы.ДоброПожаловать;
	ИначеЕсли ТекущаяСтраница = Страницы.ДоступноеОбновление Тогда
		НоваяТекущаяСтраница = Страницы.ДоброПожаловать;
	ИначеЕсли ТекущаяСтраница = Страницы.МестоположениеДискаИТС Тогда
		НоваяТекущаяСтраница = Страницы.ДоброПожаловать;
	КонецЕсли;
	
	ПередОткрытиемСтраницы(НоваяТекущаяСтраница);
	
	Элементы.СтраницыПомощника.ТекущаяСтраница = НоваяТекущаяСтраница;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПереходеНаСтраницуПомощника(ПредыдущаяСтраница, СледующаяСтраница, Отказ)
	
	Если ПредыдущаяСтраница = "ФайлОбновления" И СледующаяСтраница <> "ФайлОбновления"
		И Не ОбновлениеКонфигурацииКлиент.ПроверитьЛегальностьПолученияОбновления() Тогда
		Отказ = Истина;
	КонецЕсли;
	
	ОбновлениеКонфигурацииКлиентПереопределяемый.ПриПереходеНаСтраницуПомощника(ПредыдущаяСтраница, СледующаяСтраница, Отказ);
	
КонецПроцедуры

&НаКлиенте
Функция ОбработатьСтраницуДоступноеОбновление(ВыдаватьСообщения = Истина)
	Страницы								= Элементы.СтраницыПомощника.ПодчиненныеЭлементы;
	Объект.ТехническаяИнформацияОбОшибке	= "";
	
	Если НЕ СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().НастройкиОбновления.ЕстьДоступДляОбновления Тогда
		Предупреждение(НСтр("ru = 'Недостаточно прав для выполнения обновления конфигурации.'"));
		Возврат Страницы.ДоступноеОбновление.Имя;
	КонецЕсли;
	
	СписокФайловДляПолучения.ЗагрузитьЗначения(СоздатьСписокФайловДляПолучения());
	Если ПроверитьФайлыОбновленияПолучены() Тогда
		ИмяСобытияЖурнала  = ОбновлениеКонфигурацииКлиент.СобытиеЖурналаРегистрации();
		ОбщегоНазначенияКлиент.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытияЖурнала, "Информация",
			НСтр("ru = 'Обнаружено, что файлы обновления конфигурации уже были получены и сохранены локально.'"));
		Возврат ПерейтиКВыборуРежимаОбновления(Ложь);
	КонецЕсли;
	
	Возврат Страницы.ДлительнаяОперация.Имя;
КонецФункции

&НаКлиенте
Функция ОбработатьСтраницуОбновленияНеОбнаружено(ВыдаватьСообщения = Истина)
	Страницы		= Элементы.СтраницыПомощника.ПодчиненныеЭлементы;
	Закрыть();
	Возврат Страницы.ОбновленияНеОбнаружено.Имя;
КонецФункции

&НаКлиенте
Функция ОбработатьСтраницуУспешноеОбновление(ВыдаватьСообщения = Истина)
	Страницы		= Элементы.СтраницыПомощника.ПодчиненныеЭлементы;
	Закрыть();
	Возврат Страницы.УспешноеОбновление.Имя;
КонецФункции

&НаКлиенте
Функция ОбработатьСтраницуНеуспешноеОбновление(ВыдаватьСообщения = Истина)
	Страницы		= Элементы.СтраницыПомощника.ПодчиненныеЭлементы;
	Закрыть();
	Возврат Страницы.НеуспешноеОбновление.Имя;
КонецФункции

&НаКлиенте
Функция ОбработатьСтраницуФайлОбновления(ВыдаватьСообщения = Истина)
	
	Страницы = Элементы.СтраницыПомощника.ПодчиненныеЭлементы;
	Если Объект.НуженФайлОбновления = 1 Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.ИмяФайлаОбновления) Тогда
			Если ВыдаватьСообщения Тогда
				Предупреждение(НСтр("ru = 'Укажите файл поставки обновления конфигурации.'"));
			КонецЕсли;
			ТекущийЭлемент = Элементы.ПолеФайлОбновления;
			Возврат Страницы.ФайлОбновления.Имя;
		КонецЕсли;
		
		Файл = Новый Файл(Объект.ИмяФайлаОбновления);
		Если НЕ Файл.Существует() ИЛИ НЕ Файл.ЭтоФайл() Тогда
			Если ВыдаватьСообщения Тогда
				Предупреждение(НСтр("ru = 'Файл поставки обновления конфигурации не найден.'"));
			КонецЕсли;
			ТекущийЭлемент = Элементы.ПолеФайлОбновления;
			Возврат Страницы.ФайлОбновления.Имя;
		КонецЕсли;
		
	КонецЕсли;
	
	КаталогФайловОбновления = ОбновлениеКонфигурацииКлиент.ПолучитьПараметрыОбновления().КаталогФайловОбновления; 
	Если НЕ ПустаяСтрока(КаталогФайловОбновления) Тогда
		Попытка
			УдалитьФайлы(КаталогФайловОбновления, "*");
		Исключение
			// игнорируем неудачную попытку удаления временного каталога
		КонецПопытки;
	КонецЕсли;
	ПолучитьДоступноеОбновлениеИзФайла(?(Объект.НуженФайлОбновления = 1, Объект.ИмяФайлаОбновления, Неопределено),Истина);
	Возврат ПерейтиКВыборуРежимаОбновления(Истина);
	
КонецФункции

&НаКлиенте
Функция ОбработатьСтраницуПараметрыАвторизации(ВыдаватьСообщения = Истина)
	Страницы		= Элементы.СтраницыПомощника.ПодчиненныеЭлементы;
	ЗапрашиватьАвторизациюИБ	= ЗапрашиватьПарольАдминистратора();
	УстановкаПароля				= ВводитьПарольАдминистратора();
	
	Если Объект.КластерТребуетАутентификации Тогда
		
		Если НЕ ЗначениеЗаполнено(Объект.ИмяАдминистратораКластера) Тогда
			Если ВыдаватьСообщения Тогда
				Предупреждение(НСтр("ru = 'Укажите имя администратора кластера серверов.'"));
			КонецЕсли;
			ТекущийЭлемент = Элементы.ПолеИмяАдминистратораКластера;
			Возврат Страницы.ПараметрыАвторизации.Имя;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.ПарольАдминистратораКластера) Тогда
			Если ВыдаватьСообщения Тогда
				Предупреждение(НСтр("ru = 'Укажите пароль администратора кластера серверов.'"));
			КонецЕсли;
			ТекущийЭлемент = Элементы.ПолеПарольАдминистратораКластера;
			Возврат Страницы.ПараметрыАвторизации.Имя;
		КонецЕсли;
		
	КонецЕсли;
	
	ТекстОшибки = ПроверитьИУстановитьПарольАдминистратора(СообщенияДляЖурналаРегистрации);
	Если НЕ ПустаяСтрока(ТекстОшибки) И ВыдаватьСообщения Тогда
		Если ВыдаватьСообщения Тогда
			Предупреждение(НСтр("ru = 'Не удалось установить пароль администратора:'") + " " + КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецЕсли;
		Возврат Страницы.ПараметрыАвторизации.Имя;
	КонецЕсли; 
	
	Возврат ПерейтиКВыборуРежимаОбновления(ВыдаватьСообщения);
КонецФункции

&НаКлиенте
Функция ОбработатьСтраницуДополнительныеНастройки(ВыдаватьСообщения = Истина)
	Возврат ПерейтиКВыборуРежимаОбновления(ВыдаватьСообщения);
КонецФункции

&НаКлиенте
Функция ПроверитьФайлыОбновленияПолучены()
	
	ФайлыПолученыУспешно = Истина;
	Для Каждого Файл Из СписокФайловДляПолучения Цикл
		Если Файл.Значение.Обязательный И НЕ Файл.Значение.Получен Тогда
			ФайлыПолученыУспешно = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ФайлыПолученыУспешно Тогда
		ФайлыПолученыУспешно = РаспаковатьДистрибутивОбновления();
	КонецЕсли;
	
	Возврат ФайлыПолученыУспешно;
	
КонецФункции

&НаКлиенте
Функция ПолучитьСтруктуруДоступногоОбновления(ПолучатьРазмерОбновления = Ложь)
	
	Если Объект.ДоступныеОбновления.Количество() = 0 Тогда
		Возврат Неопределено;
	ИначеЕсли ПолучатьРазмерОбновления = Истина Тогда
		Возврат Новый Структура( "Версия, РазмерОбновления",
								Объект.ДоступныеОбновления[Объект.ДоступныеОбновления.Количество()-1].Версия,
								СтрокаРазмераФайла(РазмерОбновлений()) );
	Иначе
		Возврат Новый Структура( "Версия", Объект.ДоступныеОбновления[Объект.ДоступныеОбновления.Количество()-1].Версия);
	КонецЕсли;
КонецФункции

// Рассчитать суммарный размер файлов обновлений.
//
// Параметры
//  Объект.ДоступныеОбновления  – массив – список обновлений
//
// Возвращаемое значение:
//   число   – размер обновлений в байтах
&НаКлиенте
Функция РазмерОбновлений()
	РазмерОбновлений = 0;
	Для Каждого Обновление Из Объект.ДоступныеОбновления Цикл
		РазмерОбновлений = РазмерОбновлений + Обновление.РазмерФайлаОбновления;
	КонецЦикла;
	Возврат РазмерОбновлений;
КонецФункции

// Получить строковое представление размера файла.
//
// Параметры
//  Размер  – Число – размер в байтах
//
// Возвращаемое значение:
//   Строка   – строковое представление размера файла, например, "10,5 Мб".
&НаКлиенте
Функция СтрокаРазмераФайла(Знач Размер)

	Если Размер < 1024 Тогда
		Возврат Формат(Размер, "ЧДЦ=1") + " " + "байт";
	ИначеЕсли Размер < 1024 * 1024 Тогда	
		Возврат Формат(Размер / 1024, "ЧДЦ=1") + " " + "КБ";
	ИначеЕсли Размер < 1024 * 1024 * 1024 Тогда	
		Возврат Формат(Размер / (1024 * 1024), "ЧДЦ=1") + " " + "МБ";
	Иначе
		Возврат Формат(Размер / (1024 * 1024 * 1024), "ЧДЦ=1") + " " + "ГБ";
	КонецЕсли; 

КонецФункции

// Определение каталога шаблонов конфигураций и обновлений на данном компьютере.
&НаКлиенте
Функция КаталогШаблонов()
	
	ЭтоПлатформа83 = ОбщегоНазначенияКлиентСервер.ЭтоПлатформа83();
	Постфикс = ?(ЭтоПлатформа83, "1C\1Cv8\tmplts\", "1C\1Cv82\tmplts\");
	
	КаталогПоУмолчанию = КаталогAppData() + Постфикс;
	ИмяФайла = КаталогAppData() + "1C\1CEStart\1CEStart.cfg";
	Если Не ФайлСуществуетНаКлиенте(ИмяФайла) Тогда 
		Возврат КаталогПоУмолчанию;
	КонецЕсли;
	Текст = Новый ЧтениеТекста(ИмяФайла, КодировкаТекста.UTF16);
	Стр = "";
	Пока Стр <> Неопределено Цикл
		Стр = Текст.ПрочитатьСтроку();
		Если Стр = Неопределено Тогда
			Прервать;
		КонецЕсли; 
		Если Найти(ВРег(Стр), ВРег("ConfigurationTemplatesLocation")) = 0 Тогда
			Продолжить;
		КонецЕсли; 
		ПозицияРазделителя = Найти(Стр, "=");
		Если ПозицияРазделителя = 0 Тогда
			Продолжить;
		КонецЕсли;
		НайденныйКаталог = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(СокрЛП(Сред(Стр, ПозицияРазделителя + 1)));
		Возврат ?(ФайлСуществуетНаКлиенте(НайденныйКаталог), НайденныйКаталог, КаталогПоУмолчанию);
	КонецЦикла; 
	
	Возврат КаталогПоУмолчанию;

КонецФункции 

// Определение каталога "Мои документы" текущего пользователя Windows
//
&НаКлиенте
Функция КаталогAppData() 
	
	App				= Новый COMОбъект("Shell.Application");
	Folder			= App.Namespace(26);
	Результат		= Folder.Self.Path;
	Возврат ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(Результат);
	
КонецФункции 

&НаКлиенте
Функция НайтиДискИТС(ПутиДискаИТС = "")
	
	Попытка
		ИмяФайлаАдресовРелизовИТС = ОбновлениеКонфигурацииКлиент.ПолучитьПараметрыОбновления().ИмяФайлаАдресовРелизовИТС;
		ФайловыйОбъект = Новый COMObject("Scripting.FileSystemObject");
		Приводы = ФайловыйОбъект.Drives;
		Для Каждого Привод Из Приводы Цикл
			Если Привод.DriveType <> 4 Тогда
				Продолжить;
			КонецЕсли;
			Если Привод.IsReady Тогда	// 4 = CD-ROM drive, http://www.microsoft.com/technet/scriptcenter/guide/sas_scr_czxq.mspx?mfr=true
				Диск = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(Привод.Path);
				Файл = Новый Файл(Диск + ИмяФайлаАдресовРелизовИТС);
				Если Файл.Существует() Тогда
					Возврат Диск;
				КонецЕсли; 
			КонецЕсли;
			Если НЕ ПустаяСтрока(ПутиДискаИТС) Тогда
				ПутиДискаИТС = ПутиДискаИТС + "; ";
			КонецЕсли;
			ПутиДискаИТС = ПутиДискаИТС + ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(Привод.Path);
		КонецЦикла;
	Исключение
		ИмяСобытияЖурнала = ОбновлениеКонфигурацииКлиент.СобытиеЖурналаРегистрации();
		ОбщегоНазначенияКлиент.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытияЖурнала, "Ошибка",
			НСтр("ru = 'Ошибка при поиске диска 1С:ИТС:'")
				+ " " + ОписаниеОшибки());
		Возврат "";
	КонецПопытки;
	
	Возврат "";
  
КонецФункции

// Проверка, что файл является дистрибутивом обновления.
//
// Параметр:
//  ПутьКФайлу   - Строка - путь к файлу.
//
// Возвращаемое значение:
//  Булево - Истина, если файл является дистрибутивом обновления.
//
&НаКлиенте
Функция ЭтоДистрибутивОбновления(Знач ПутьКФайлу)
	Файл = Новый Файл(ПутьКФайлу);
	Возврат Файл.Существует() И НРег(Файл.Расширение) = ".zip";
КонецФункции 

&НаКлиенте
Функция ПерейтиКВыборуРежимаОбновления(ВыдаватьСообщения = Истина)
	Страницы		= Элементы.СтраницыПомощника.ПодчиненныеЭлементы;
	ЭтоФайловаяБаза	= СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ИнформационнаяБазаФайловая;
	Если ПроверитьДоступКИБ() Тогда
		Возврат ?(ЭтоФайловаяБаза И НЕ РежимИмитацииКлиентСервернойИБ(), Страницы.ВыборРежимаОбновленияФайл.Имя, 
			Страницы.ВыборРежимаОбновленияСервер.Имя);
	Иначе
	    Возврат ?(ЭтоФайловаяБаза, Страницы.ДополнительныеНастройки.Имя, Страницы.ПараметрыАвторизации.Имя);
	КонецЕсли;
КонецФункции

// Получение параметров аутентификации пользователя для обновления.
// Создает виртуального пользователя, если в этом есть необходимость.
//
// Возвращаемое значение
//  Структура       - параметры виртуального пользователя
//
&НаКлиенте
Функция ПолучитьПараметрыАутентификацииАдминистратораОбновления() 

	Результат = Новый Структура("ИмяПользователя,
								|ПарольПользователя,
								|СтрокаПодключения,
								|ПараметрыАутентификации,
								|СтрокаСоединенияИнформационнойБазы",
								Неопределено, "", "", "", "", "");
								
	ТекущиеСоединения = ПолучитьСтрокуСоединенияИИнформациюОСоединениях(СообщенияДляЖурналаРегистрации);
	Результат.СтрокаСоединенияИнформационнойБазы = ТекущиеСоединения.СтрокаСоединенияИнформационнойБазы;
	// Диагностика случая, когда ролевой безопасности в системе не предусмотрено.
	// Т.е. ситуация, когда любой пользователь «может» в системе все.
	Если НЕ ТекущиеСоединения.ЕстьАктивныеПользователи Тогда
		Возврат Результат;
	КонецЕсли;
	
	Пользователь = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ИнформацияОПользователе.Имя;
	
	Результат.ИмяПользователя			= Пользователь;
	Результат.ПарольПользователя		= Объект.ПарольАдминистратораИБ;
	Результат.СтрокаПодключения			= "Usr=""" + Пользователь + """;Pwd=""" + Объект.ПарольАдминистратораИБ + """";
	Результат.ПараметрыАутентификации	= "/N""" + Пользователь + """ /P""" + Объект.ПарольАдминистратораИБ + """ /WA-";
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ПроверитьДоступКИБ()
	
	ИмяСобытияЖурнала = ОбновлениеКонфигурацииКлиент.СобытиеЖурналаРегистрации();
	Результат = Истина;
	ОбнаруженнаяОшибкаПодключения = "";
	// В базовых версиях проверку подключения не осуществляем;
	// при некорректном вводе имени и пароля обновление завершится неуспешно.
	ПараметрыРаботыКлиента = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента();
	Если ПараметрыРаботыКлиента.ЭтоБазоваяВерсияКонфигурации Тогда
		Возврат Результат;
	КонецЕсли; 
	ПараметрыПодключения = ПолучитьПараметрыАутентификацииАдминистратораОбновления();
	ИмяCOMСоединителя = ПараметрыРаботыКлиента.ИмяCOMСоединителя;
	
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = ' Проверка подключения к ИБ по адресу: %1, с помощью %2'"),
		ПараметрыПодключения.СтрокаСоединенияИнформационнойБазы, ИмяCOMСоединителя);

	ОбщегоНазначенияКлиент.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытияЖурнала, 
		"Информация", ТекстСообщения);
		
	ОбщегоНазначенияКлиент.ЗарегистрироватьCOMСоединитель(Ложь);
	Попытка
		ComConnector = Новый COMОбъект(ИмяCOMСоединителя);
		СтрокаСоединенияИнформационнойБазы = ПараметрыПодключения.СтрокаСоединенияИнформационнойБазы + ПараметрыПодключения.СтрокаПодключения;
		Соединение = ComConnector.Connect(СтрокаСоединенияИнформационнойБазы);
	Исключение
		Результат = Ложь;
		ТекстСообщения = НСтр("ru = 'Не удалось выполнить подключение к информационной базе'") + Символы.ПС;
		ОбщегоНазначенияКлиент.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытияЖурнала, 
			"Ошибка",  ТекстСообщения + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ОбнаруженнаяОшибкаПодключения = ТекстСообщения + КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	Если Результат И НЕ ПараметрыРаботыКлиента.ИнформационнаяБазаФайловая Тогда
		ОбнаруженнаяОшибкаПодключения = ПроверитьДоступККластеру(ПараметрыПодключения);
		Результат = ПустаяСтрока(ОбнаруженнаяОшибкаПодключения);
	КонецЕсли;
	
	Если ПустаяСтрока(ОбнаруженнаяОшибкаПодключения) Тогда
		Элементы.СтраницыНадписиПроверкиПодключения.ТекущаяСтраница = Элементы.СтраницыНадписиПроверкиПодключения.ПодчиненныеЭлементы.ПочтиВсеГотово;
	Иначе
		Элементы.СтраницыНадписиПроверкиПодключения.ТекущаяСтраница = Элементы.СтраницыНадписиПроверкиПодключения.ПодчиненныеЭлементы.ОбнаруженаОшибкаПодключения;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции 

&НаКлиенте
Функция ПроверитьДоступККластеру(ПараметрыПодключения)

	Результат = "";
	Попытка
		СоединенияИБКлиентСервер.ПроверитьПараметрыАдминистрированияИБ(
			СоединенияИБКлиентСервер.НовыеПараметрыАдминистрированияИБ(
				,,
				?(Объект.КластерТребуетАутентификации, Объект.ИмяАдминистратораКластера, ""), 
				?(Объект.КластерТребуетАутентификации, Объект.ПарольАдминистратораКластера, ""),
				?(Объект.НестандартныеПортыСервера, Объект.ПортКластераСерверов, 0),
				?(Объект.НестандартныеПортыСервера, Объект.ПортАгентаСервера, 0)), 
				Истина);
	Исключение
		ИнфоОбОшибке = ИнформацияОбОшибке();
		Результат = НСтр("ru = 'Ошибка при проверке соединения с кластером серверов.'") + " ";
		ИмяСобытияЖурнала = ОбновлениеКонфигурацииКлиент.СобытиеЖурналаРегистрации();
		ОбщегоНазначенияКлиент.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытияЖурнала, 
			"Ошибка", Результат + ПодробноеПредставлениеОшибки(ИнфоОбОшибке));
		Результат = Результат + КраткоеПредставлениеОшибки(ИнфоОбОшибке);
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ПроверитьНастройкиЭлектроннойПочты(ИмяТекущейСтраницы, ВыдаватьСообщения = Истина)
	Если Найти(Объект.АдресЭлектроннойПочты, "@") = 0 ИЛИ Найти(Объект.АдресЭлектроннойПочты, ".") = 0 Тогда
		Если ВыдаватьСообщения Тогда
			Предупреждение(НСтр("ru = 'Укажите допустимый адрес электронной почты.'"));
		КонецЕсли;
		ТекущийЭлемент	= Элементы.ПолеАдресЭлектроннойПочты;
		Возврат ИмяТекущейСтраницы;
	КонецЕсли;
	Возврат "";
КонецФункции

&НаКлиенте
Функция ОпределитьИмяСкрипта()
	App	= Новый COMОбъект("Shell.Application");
	Попытка
   		Folder = App.Namespace(41);
   		Возврат Folder.Self.Path + "\wscript.exe";
	Исключение
		Возврат "wscript.exe";
	КонецПопытки;
КонецФункции


// Запланировать обновление конфигурации
&НаКлиенте
Функция ЗапланироватьОбновлениеКонфигурации()
	Если НЕ УдалитьЗадачуПланировщика(Объект.КодЗадачиПланировщика) Тогда
		Возврат Ложь;
	КонецЕсли; 
	ИмяГлавногоФайлаСкрипта	= СформироватьФайлыСкриптаОбновления(Ложь);
	
	ИмяЗапускаемогоСкрипта = ОпределитьИмяСкрипта();
	ПутьЗапускаемогоСкрипта = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 %2 //nologo ""%3""", 
		ИмяЗапускаемогоСкрипта, ?(РежимОтладкиСкрипта(), "//X //D", ""), ИмяГлавногоФайлаСкрипта);
	
	Объект.КодЗадачиПланировщика = СоздатьЗадачуПланировщика(ПутьЗапускаемогоСкрипта, Объект.ДатаВремяОбновления);
	ЗаписатьСтатусОбновления(ИмяПользователя(), Объект.КодЗадачиПланировщика <> 0, Ложь, Ложь);
	Возврат Объект.КодЗадачиПланировщика <> 0;
КонецФункции

// Создать задачу планировщика ОС Windows.
//
// Параметры
//  ИмяФайлаПрограммы	– Строка	– путь к запускаемому приложению или файлу.
//  ДатаВремя  			– Дата		– Дата и время запуска. Значение даты может быть 
//									  в интервале [текущая дата, текущая дата + 30 дней).
//
// Возвращаемое значение:
//   Число   – код созданной задачи планировщика или "Неопределено" при ошибке.
&НаКлиенте
Функция СоздатьЗадачуПланировщика(Знач ИмяФайлаПрограммы, Знач ДатаВремя)
	ИмяСобытияЖурнала = ОбновлениеКонфигурацииКлиент.СобытиеЖурналаРегистрации();
	Попытка
		Планировщик		= ОбъектWMI().Get("Win32_ScheduledJob");
		КодЗадачи		= 0;
		КодОшибки		= Планировщик.Create(ИмяФайлаПрограммы, // Command
			ПреобразоватьВремяВФорматCIM(ДатаВремя),	// StartTime
			Ложь,		// RunRepeatedly
			,           // DaysOfWeek
			Pow(2, День(ДатаВремя) - 1),         // DaysOfMonth
			Ложь, 		// InteractWithDesktop
			КодЗадачи);// out JobId
		Если КодОшибки <> 0 Тогда	// Коды ошибок: http://msdn2.microsoft.com/en-us/library/aa389389(VS.85).aspx
			ОбщегоНазначенияКлиент.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытияЖурнала, 
				"Ошибка", НСтр("ru = 'Ошибка при создании задачи планировщика:'")
					+ " " + КодОшибки);
			Возврат 0;
		КонецЕсли;
		ТекстСообщения = НСтр("ru = 'Задача планировщика успешно запланирована (команда: %1; дата: %2; код задачи: %3).'");
		
		ОбщегоНазначенияКлиент.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытияЖурнала,
			"Информация", 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ИмяФайлаПрограммы, ДатаВремя, КодЗадачи));
			
	Исключение
			
		ОбщегоНазначенияКлиент.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытияЖурнала, "Ошибка",
			НСтр("ru = 'Ошибка при создании задачи планировщика:'")
				+ " " + ОписаниеОшибки());
		Возврат 0;
	КонецПопытки;
	
	Возврат КодЗадачи;

КонецФункции

&НаКлиенте
Функция ПреобразоватьВремяВФорматCIM(ДатаВремя)
	Локатор			= Новый COMObject("WbemScripting.SWbemLocator");
	Сервис			= Локатор.ConnectServer(".", "\root\cimv2");
	ComputerSystems	= Сервис.ExecQuery("Select * from Win32_ComputerSystem");
	Для Каждого ComputerSystem Из ComputerSystems Цикл
		Разница	= ComputerSystem.CurrentTimeZone;
		Час		= Формат(ДатаВремя,"ДФ=ЧЧ");
		Минута	= Формат(ДатаВремя,"ДФ=мм");
		Разница	= ?(Разница > 0, "+" + Формат(Разница, "ЧГ=0"), Формат(Разница, "ЧГ=0"));
		Возврат "********" + Час + Минута + "00.000000" + Разница;
	КонецЦикла;

	Возврат Неопределено;
КонецФункции

&НаКлиенте
Функция СформироватьФайлыСкриптаОбновления(Знач ИнтерактивныйРежим) 
	ПараметрыОбновления = ОбновлениеКонфигурацииКлиент.ПолучитьПараметрыОбновления();
	ПараметрыРаботыКлиента = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента();
	СоздатьКаталог(ПараметрыОбновления.КаталогВременныхФайловОбновления);
	
	// Структура параметров необходима для их определения на клиенте и передачи на сервер
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ИмяИсполняемогоФайлаКонфигуратора",	 ПараметрыОбновления.ИмяИсполняемогоФайлаКонфигуратора);
	СтруктураПараметров.Вставить("ИмяИсполняемогоФайлаКлиента"		,	 СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ИмяИсполняемогоФайлаКлиента);
	СтруктураПараметров.Вставить("СобытиеЖурналаРегистрации"		,	 ПараметрыОбновления.СобытиеЖурналаРегистрации);
	СтруктураПараметров.Вставить("ИмяCOMСоединителя"				,	 ПараметрыРаботыКлиента.ИмяCOMСоединителя);
	СтруктураПараметров.Вставить("ЭтоБазоваяВерсияКонфигурации"		,	 ПараметрыРаботыКлиента.ЭтоБазоваяВерсияКонфигурации);
	СтруктураПараметров.Вставить("ИнформационнаяБазаФайловая"		,	 ПараметрыРаботыКлиента.ИнформационнаяБазаФайловая);
	СтруктураПараметров.Вставить("ПараметрыСкрипта"					,	 ПолучитьПараметрыАутентификацииАдминистратораОбновления());
	
	//Добавим в структуру и имя запускаемой программы
	
	#Если Не ВебКлиент Тогда
		СтруктураПараметров.Вставить("КаталогПрограммы"			, КаталогПрограммы());
	#Иначе
		СтруктураПараметров.Вставить("КаталогПрограммы"			, "");
	#КонецЕсли
	
	ИменаМакетов = "ДопФайлОбновленияКонфигурации";
	Если ИнтерактивныйРежим Тогда
		ИменаМакетов = ИменаМакетов + ",ЗаставкаОбновленияКонфигурации";
	Иначе
		ИменаМакетов = ИменаМакетов + ",НеинтерактивноеОбновлениеКонфигурации";
	КонецЕсли;
	ТекстыМакетов = ПолучитьТекстыМакетов(ИменаМакетов, СтруктураПараметров, СообщенияДляЖурналаРегистрации);
	
	ФайлСкрипта = Новый ТекстовыйДокумент;
	ФайлСкрипта.Вывод = ИспользованиеВывода.Разрешить;
	ФайлСкрипта.УстановитьТекст(ТекстыМакетов[0]);
	
	ИмяФайлаСкрипта = ПараметрыОбновления.КаталогВременныхФайловОбновления + "main.js";
	ФайлСкрипта.Записать(ИмяФайлаСкрипта, КодировкаТекста.UTF16);
	
	// Вспомогательный файл: helpers.js
	ФайлСкрипта = Новый ТекстовыйДокумент;
	ФайлСкрипта.Вывод = ИспользованиеВывода.Разрешить;
	ФайлСкрипта.УстановитьТекст(ТекстыМакетов[1]);
	ФайлСкрипта.Записать(ПараметрыОбновления.КаталогВременныхФайловОбновления + "helpers.js", КодировкаТекста.UTF16);
	
	ИмяГлавногоФайлаСкрипта = Неопределено;
	Если ИнтерактивныйРежим Тогда
		// Вспомогательный файл: splash.png
		Если ОбщегоНазначенияКлиентСервер.ЭтоПлатформа83() Тогда
			БиблиотекаКартинок.ЗаставкаВнешнейОперации83.Записать(ПараметрыОбновления.КаталогВременныхФайловОбновления + "splash.png");
		Иначе
			БиблиотекаКартинок.ЗаставкаВнешнейОперации.Записать(ПараметрыОбновления.КаталогВременныхФайловОбновления + "splash.png");
		КонецЕсли;
		// Вспомогательный файл: splash.ico
		БиблиотекаКартинок.ЗначокЗаставкиВнешнейОперации.Записать(ПараметрыОбновления.КаталогВременныхФайловОбновления + "splash.ico");
		// Вспомогательный файл: progress.gif
		БиблиотекаКартинок.ДлительнаяОперация48.Записать(ПараметрыОбновления.КаталогВременныхФайловОбновления + "progress.gif");
		// Главный файл заставки: splash.hta
		ИмяГлавногоФайлаСкрипта = ПараметрыОбновления.КаталогВременныхФайловОбновления + "splash.hta";
		ФайлСкрипта = Новый ТекстовыйДокумент;
		ФайлСкрипта.Вывод = ИспользованиеВывода.Разрешить;
		ФайлСкрипта.УстановитьТекст(ТекстыМакетов[2]);
		ФайлСкрипта.Записать(ИмяГлавногоФайлаСкрипта, КодировкаТекста.UTF16);
	Иначе
		ИмяГлавногоФайлаСкрипта = ПараметрыОбновления.КаталогВременныхФайловОбновления + "updater.js";
		ФайлСкрипта = Новый ТекстовыйДокумент;
		ФайлСкрипта.Вывод = ИспользованиеВывода.Разрешить;
		ФайлСкрипта.УстановитьТекст(ТекстыМакетов[2]);
		ФайлСкрипта.Записать(ИмяГлавногоФайлаСкрипта, КодировкаТекста.UTF16);
	КонецЕсли;
	
	Возврат ИмяГлавногоФайлаСкрипта;              
КонецФункции

&НаКлиенте
Функция УстановленWMI(Знач ВыдаватьСообщения = Истина)
	Попытка
		Возврат ОбъектWMI() <> Неопределено;
	Исключение
		ИмяСобытияЖурнала = ОбновлениеКонфигурацииКлиент.СобытиеЖурналаРегистрации();
		ОбщегоНазначенияКлиент.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытияЖурнала, "Ошибка", ОписаниеОшибки());
		Если ВыдаватьСообщения Тогда
			ОткрытьФорму("Обработка.ОбновлениеКонфигурации.Форма.ПредупреждениеWMI", , ЭтаФорма);
		КонецЕсли;
		Возврат Ложь;
	КонецПопытки;
КонецФункции

&НаКлиенте
Функция ПроверитьДопустимуюДатуОбновления(ДатаВремя, ВыдаватьСообщения = Истина)
	ТекстСообщения = ПроверитьДопустимуюДатуОбновленияНаСервере(ДатаВремя);
	Результат = ПустаяСтрока(ТекстСообщения);
	Если Не Результат И ВыдаватьСообщения Тогда
		Предупреждение(ТекстСообщения);
	КонецЕсли;
	Возврат Результат;
КонецФункции

&НаСервереБезКонтекста
Функция ПроверитьДопустимуюДатуОбновленияНаСервере(ДатаВремя)
	
	Сейчас = ТекущаяДатаСеанса();
	Если ДатаВремя < Сейчас Тогда
		Возврат НСтр("ru = 'Обновление конфигурации может быть запланировано только на будущую дату и время.'");
	КонецЕсли;
	Если ДатаВремя > ДобавитьМесяц(Сейчас, 1) Тогда
		Возврат НСтр("ru = 'Обновление конфигурации может быть запланировано не позднее, чем через месяц относительно текущей даты.'");
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

&НаКлиенте
Функция УдалитьЗадачуПланировщика(КодЗадачи)
	ИмяСобытияЖурнала = ОбновлениеКонфигурацииКлиент.СобытиеЖурналаРегистрации();
	Если КодЗадачи = 0 Тогда
		Возврат Истина;
	КонецЕсли; 
	
	Попытка
		Сервис = ОбъектWMI();
		
		Задача = ПолучитьЗадачуПланировщика(КодЗадачи);
		Если Задача = Неопределено Тогда
			КодЗадачи = 0;
			Возврат Истина;
		КонецЕсли; 
		
		КодОшибки = Задача.Delete();
		Результат = КодОшибки = 0;
		Если НЕ Результат Тогда	// Коды ошибок: http://msdn2.microsoft.com/en-us/library/aa389957(VS.85).aspx
			ОбщегоНазначенияКлиент.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытияЖурнала, "Ошибка",
				НСтр("ru = 'Ошибка при удалении задачи планировщика:'")
					+ " " + КодОшибки);
			Возврат Результат;
		КонецЕсли;
		ТекстСообщения = НСтр("ru = 'Задача планировщика успешно удалена (код задачи: %1).'");
		ОбщегоНазначенияКлиент.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытияЖурнала, "Информация",
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, КодЗадачи));
		КодЗадачи = 0;
		
		Возврат Результат;
	Исключение
		
		ОбщегоНазначенияКлиент.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытияЖурнала, "Ошибка",
			НСтр("ru = 'Ошибка при удалении задачи планировщика:'")
				+ " " + ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;

КонецФункции

&НаКлиенте
Функция ВводитьПарольАдминистратора()
	
	ДанныеПоПользователю = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ИнформацияОПользователе;
	
	Возврат ЕстьАктивныеПользователи(СообщенияДляЖурналаРегистрации)
	      И НЕ ДанныеПоПользователю.АутентификацияСтандартная;
	
КонецФункции

&НаКлиенте
Функция ЗапрашиватьПарольАдминистратора()
	
	ДанныеПоПользователю = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ИнформацияОПользователе;
	
	Возврат ЕстьАктивныеПользователи(СообщенияДляЖурналаРегистрации)
	     И (    НЕ ДанныеПоПользователю.АутентификацияСтандартная
	        ИЛИ ДанныеПоПользователю.ПарольУстановлен);
	
КонецФункции

&НаКлиенте
Функция СоздатьСписокФайловДляПолучения() 
	
	СписокФайлов = Новый Массив;
	ПараметрыОбновления = ОбновлениеКонфигурацииКлиент.ПолучитьПараметрыОбновления();
	КаталогОбновленияВИсточнике = ?(Объект.ИсточникОбновления = 0,	
		ПараметрыОбновления.АдресКаталогаШаблоновНаСервереОбновлений, 
		ПутьКФайламОбновленияНаДискеИТС);
	
	Для Каждого Обновление Из Объект.ДоступныеОбновления Цикл
		Если НЕ ПустаяСтрока(Обновление.ПутьКФайлуОбновления) И ПустаяСтрока(Обновление.ПутьКЛокальномуФайлуОбновления) Тогда
			СтруктураИнформацииПоФайлу	= Новый Структура("Адрес, ЛокальныйПуть, Обязательный, Получен");
			
			КаталогФайлаОбновления						= ПолучитьКаталогФайлаОбновления(Обновление);
			Обновление.ЛокальныйОтносительныйКаталог	= КаталогФайлаОбновления;
			Обновление.ПутьКЛокальномуФайлу				= ПараметрыОбновления.КаталогФайловОбновления +
				КаталогФайлаОбновления + Обновление.ФайлОбновления;
			// Описание файла обновления.
			СтруктураИнформацииПоФайлу.Очистить();
			СтруктураИнформацииПоФайлу.Вставить("Адрес"					, КаталогОбновленияВИсточнике + Обновление.ПутьКФайлуОбновления);
			СтруктураИнформацииПоФайлу.Вставить("ЛокальныйПуть"			, Обновление.ПутьКЛокальномуФайлу);
			СтруктураИнформацииПоФайлу.Вставить("Обязательный"			, Истина);
			СтруктураИнформацииПоФайлу.Вставить("Получен"				, ОпределитьФайлПолучен(СтруктураИнформацииПоФайлу,
																								Обновление.РазмерФайлаОбновления));
			СписокФайлов.Добавить(СтруктураИнформацииПоФайлу);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СписокФайлов;
	
КонецФункции

&НаКлиенте
Функция ОпределитьФайлПолучен(ОписаниеФайла, Размер)
	Файл = Новый Файл(ОписаниеФайла.ЛокальныйПуть);
	Возврат Файл.Существует() И Файл.Размер() = Размер;
КонецФункции

// Получение файла описания обновления с сервера
&НаКлиенте
Функция ПолучитьФайлОписанияОбновления()
	
	НастройкиОбновления = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().НастройкиОбновления;
	ПараметрыОбновления = ОбновлениеКонфигурацииКлиент.ПолучитьПараметрыОбновления();
	ИмяФайла	= ПолучитьИмяЛокальногоФайлаОписанияОбновления();
	Результат	= ПолучениеФайловИзИнтернетаКлиент.СкачатьФайлНаКлиенте(НастройкиОбновления.АдресСервераДляПроверкиНаличияОбновления +
		ПараметрыОбновления.АдресРесурсовДляПроверкиНаличияОбновления +	ПараметрыОбновления.ИмяФайлаОписанияОбновления,
		Новый Структура("ПутьДляСохранения", ? (ПустаяСтрока(ИмяФайла), Неопределено, ИмяФайла)));
	Если Результат.Статус Тогда
		Возврат ИмяФайла;
	КонецЕсли;
	
	Попытка
		УдалитьФайлы(ИмяФайла);
	Исключение
		ТекстСообщения = НСтр("ru = 'Ошибка при удалении временного файла %1
			|%2'");
		ИмяСобытияЖурнала =	ОбновлениеКонфигурацииКлиент.СобытиеЖурналаРегистрации();
		ОбщегоНазначенияКлиент.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытияЖурнала,
			"Ошибка", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ИмяФайла,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
	КонецПопытки;
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Функция ПолучитьФайлСпискаШаблоновИТС(Знач ВыдаватьСообщения = Истина)
	
	ПараметрыОбновления = ОбновлениеКонфигурацииКлиент.ПолучитьПараметрыОбновления();
	Возврат ОбновлениеКонфигурацииКлиент.СкопироватьФайл(ПутьКФайламОбновленияНаДискеИТС +
		ПараметрыОбновления.ИмяФайлаСпискаШаблонов, ПараметрыОбновления.КаталогФайловОбновления +
		ПараметрыОбновления.ИмяФайлаСпискаШаблонов);
		
КонецФункции

&НаКлиенте
Функция ПолучитьИмяЛокальногоФайлаПорядкаОбновления()
	
	ПараметрыОбновления = ОбновлениеКонфигурацииКлиент.ПолучитьПараметрыОбновления();
	Возврат ПараметрыОбновления.КаталогФайловОбновления + ПараметрыОбновления.ИмяФайлаПорядкаОбновления;
	
КонецФункции

&НаКлиенте
Функция ПолучитьИмяЛокальногоФайлаОписанияОбновления()
	
	ПараметрыОбновления = ОбновлениеКонфигурацииКлиент.ПолучитьПараметрыОбновления();
	Возврат ПараметрыОбновления.КаталогФайловОбновления + ПараметрыОбновления.ИмяФайлаОписанияОбновления;
			
КонецФункции

// Получение файла порядка обновления с сервера.
&НаКлиенте
Функция ПолучитьФайлПорядкаОбновления()
	
	НастройкиОбновления = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().НастройкиОбновления;
	ПараметрыОбновления = ОбновлениеКонфигурацииКлиент.ПолучитьПараметрыОбновления();
	ИмяФайла = ПолучитьИмяЛокальногоФайлаПорядкаОбновления();
	Результат	= ПолучениеФайловИзИнтернетаКлиент.СкачатьФайлНаКлиенте(НастройкиОбновления.АдресСервераДляПроверкиНаличияОбновления +
		ПараметрыОбновления.АдресРесурсовДляПроверкиНаличияОбновления +	ПараметрыОбновления.ИмяФайлаПорядкаОбновления,
		Новый Структура("ПутьДляСохранения", ? (ПустаяСтрока(ИмяФайла), Неопределено, ИмяФайла)));
	Если Результат.Статус Тогда
		Возврат ИмяФайла;
	КонецЕсли;
	Попытка
		УдалитьФайлы(ИмяФайла);
	Исключение
		ТекстСообщения = НСтр("ru = 'Ошибка при удалении временного файла %1
			|%2'");
			
		ИмяСобытияЖурнала = ОбновлениеКонфигурацииКлиент.СобытиеЖурналаРегистрации();
		ОбщегоНазначенияКлиент.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытияЖурнала,
			"Ошибка", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ИмяФайла,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
	КонецПопытки;
	Возврат Неопределено;
	
КонецФункции 

&НаКлиенте
Функция ПолучитьФайлПорядкаОбновленияИТС()
	
	ИмяФайла = ПолучитьИмяЛокальногоФайлаПорядкаОбновления();
	Результат = ОбновлениеКонфигурацииКлиент.СкопироватьФайл(ПутьКФайламОбновленияНаДискеИТС +
		ОбновлениеКонфигурацииКлиент.ПолучитьПараметрыОбновления().ИмяФайлаПорядкаОбновления,
		ИмяФайла);
	Если Результат Тогда
		Возврат ИмяФайла;
	КонецЕсли;
	
	Попытка
		УдалитьФайлы(ИмяФайла);
	Исключение
		ТекстСообщения = НСтр("ru = 'Ошибка при удалении временного файла %1
			|%2'");
		ИмяСобытияЖурнала = ОбновлениеКонфигурацииКлиент.СобытиеЖурналаРегистрации();
		
		ОбщегоНазначенияКлиент.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытияЖурнала,
			"Ошибка", СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ИмяФайла,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())));
			
	КонецПопытки;
	Возврат Неопределено;
	
КонецФункции 

&НаКлиенте
Процедура ПолучитьДоступноеОбновлениеИзФайла(Знач ИмяФайла, ФайловыйВариант = Ложь)
	Если ЗначениеЗаполнено(ИмяФайла) Тогда
		Если ФайловыйВариант Тогда
			Объект.ДоступныеОбновления.Очистить();
		КонецЕсли;
		НовоеДоступноеОбновление								= Объект.ДоступныеОбновления.Добавить();
		НовоеДоступноеОбновление.ПутьКЛокальномуФайлу			= ИмяФайла;
		НовоеДоступноеОбновление.ПутьКЛокальномуФайлуОбновления	= ИмяФайла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьФайлОписанияОбновленияИТС()
	
	ИмяФайла =	ПолучитьИмяЛокальногоФайлаОписанияОбновления();
	Если НЕ ОбновлениеКонфигурацииКлиент.СкопироватьФайл(ПутьКФайламОбновленияНаДискеИТС +
		ОбновлениеКонфигурацииКлиент.ПолучитьПараметрыОбновления().ИмяФайлаОписанияОбновления, 
		ИмяФайла) Тогда
		Возврат Неопределено;
	КонецЕсли;
	Возврат ИмяФайла;
	
КонецФункции 

// Получение каталога файла обновления. 
//
// Параметр:
//  ДоступноеОбновление - Строка таблицы значений, содержащая информацию о
//                        доступном обновлении.
// 
// Возвращаемое значение:
//  Строка - каталог файла обновления.
//
&НаКлиенте
Функция ПолучитьКаталогФайлаОбновления(ДоступноеОбновление)
	
	Если ДоступноеОбновление = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	КороткоеИмяКонфигурации = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().НастройкиОбновления.КороткоеИмяКонфигурации;
	КороткоеИмяКонфигурации = СтрЗаменить(КороткоеИмяКонфигурации, "/", "\");
	КороткоеИмяКонфигурации = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КороткоеИмяКонфигурации);
	Результат = СтрЗаменить(ДоступноеОбновление.ПутьКФайлуОбновления, "/", "\");
	Результат = ОбновлениеКонфигурацииКлиент.ПолучитьКаталогФайла(Результат);
	Результат = СтрЗаменить(Результат, "_", ".");
	Если Объект.ИсточникОбновления = 1 Тогда
		Результат = "ITS\" + КороткоеИмяКонфигурации + Результат;
	КонецЕсли;
	Результат		= ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(Результат);
	Возврат Результат;
		
КонецФункции

// Распаковка дистрибутива обновления.
&НаКлиенте
Функция РаспаковатьДистрибутивОбновления()
	#Если НЕ ВебКлиент Тогда
	ИмяСобытияЖурнала = ОбновлениеКонфигурацииКлиент.СобытиеЖурналаРегистрации();
	ОбщегоНазначенияКлиент.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытияЖурнала, 
		"Информация", НСтр("ru = 'Выполняется распаковка дистрибутива обновления...'"));
		
	Для Каждого Обновление Из Объект.ДоступныеОбновления Цикл
	
		Если НЕ ЭтоДистрибутивОбновления(Обновление.ПутьКЛокальномуФайлу) Тогда
			Обновление.ПутьКЛокальномуФайлуОбновления = ?(ПустаяСтрока(Обновление.ПутьКЛокальномуФайлуОбновления), 
				Обновление.ПутьКЛокальномуФайлу, Обновление.ПутьКЛокальномуФайлуОбновления);
			Продолжить;
		КонецЕсли;
		
		Попытка 
			
			ЧтениеZip			= Новый ЧтениеZipФайла(Обновление.ПутьКЛокальномуФайлу);
			КаталогНазначения	= КаталогШаблонов() + Обновление.ЛокальныйОтносительныйКаталог;
			ЧтениеZip.ИзвлечьВсе(КаталогНазначения, РежимВосстановленияПутейФайловZIP.Восстанавливать);
			ИмяФайлаОбновления	= КаталогНазначения + "1cv8.cfu";
			Если НЕ ФайлСуществуетНаКлиенте(ИмяФайлаОбновления) Тогда
				ОбщегоНазначенияКлиент.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытияЖурнала, "Ошибка",
					НСтр("ru = 'Дистрибутив обновления не содержит 1cv8.cfu:'")
						+ " " + Обновление.ПутьКЛокальномуФайлу);
				Возврат Ложь;
			КонецЕсли;
			Обновление.ПутьКЛокальномуФайлуОбновления = ИмяФайлаОбновления;
			
			ОбщегоНазначенияКлиент.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытияЖурнала, "Информация",
				НСтр("ru = 'Файлы дистрибутива обновления успешно распакованы:'")
					+ " " + ИмяФайлаОбновления);
		Исключение
			ОбщегоНазначенияКлиент.ДобавитьСообщениеДляЖурналаРегистрации(ИмяСобытияЖурнала, "Ошибка",
				НСтр("ru = 'Ошибка при распаковке дистрибутива обновления:'")
					+ " " + ОписаниеОшибки());
			Возврат Ложь;
		КонецПопытки;
		
		Попытка 
			ЧтениеZip			= Новый ЧтениеZipФайла(Обновление.ПутьКЛокальномуФайлу);
			КаталогНазначения	= ОбновлениеКонфигурацииКлиент.ПолучитьПараметрыОбновления().КаталогФайловОбновления + Обновление.ЛокальныйОтносительныйКаталог;
			ЧтениеZip.ИзвлечьВсе(КаталогНазначения, РежимВосстановленияПутейФайловZIP.Восстанавливать);
			ИмяФайлаОбновления	= КаталогНазначения + "1cv8.cfu";
			Если НЕ ФайлСуществуетНаКлиенте(ИмяФайлаОбновления) Тогда
				ОбщегоНазначенияКлиент.ДобавитьСообщениеДляЖурналаРегистрации(ОбновлениеКонфигурацииКлиент.СобытиеЖурналаРегистрации(), 
					"Ошибка", НСтр("ru = 'Дистрибутив обновления не содержит 1cv8.cfu:'")
						+ " " + Обновление.ПутьКЛокальномуФайлу);
				Возврат Ложь;
			КонецЕсли;
			Обновление.ПутьКЛокальномуФайлуОбновления = ИмяФайлаОбновления;
			ОбщегоНазначенияКлиент.ДобавитьСообщениеДляЖурналаРегистрации(ОбновлениеКонфигурацииКлиент.СобытиеЖурналаРегистрации(), 
				"Информация", НСтр("ru = 'Файлы дистрибутива обновления успешно распакованы:'")
					+ " " + ИмяФайлаОбновления);
			ЧтениеZip.Закрыть();
			Если НЕ ПустаяСтрока(Обновление.ПутьКЛокальномуФайлу) Тогда
				УдалитьФайлы(Обновление.ПутьКЛокальномуФайлу);
			КонецЕсли;
		Исключение
			ОбщегоНазначенияКлиент.ДобавитьСообщениеДляЖурналаРегистрации(ОбновлениеКонфигурацииКлиент.СобытиеЖурналаРегистрации(), 
				"Ошибка",  НСтр("ru = 'Ошибка при распаковке дистрибутива обновления:'")
					+ " " + ОписаниеОшибки());
			Возврат Ложь;
		КонецПопытки;
	КонецЦикла;
	Возврат Истина;
	#КонецЕсли
КонецФункции

&НаКлиенте
Процедура ПолучитьДоступныеОбновления(ПараметрыОбновления, ВерсияКонфигурации, ВыдаватьСообщения, ДоступноОбновлениеДля83 = Ложь)
	
	ПараметрыОбновления = ОбновлениеКонфигурацииКлиент.ПолучитьПараметрыОбновления(ДоступноОбновлениеДля83);
	ПутьКФайлуСпискаОбновлений = ПараметрыОбновления.КаталогФайловОбновления +
		ПараметрыОбновления.ИмяФайлаСпискаШаблонов;
	АдресФайлаВоВремХранилище = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ПутьКФайлуСпискаОбновлений));
	Попытка
		ПолучитьДоступныеОбновленияВИнтервале(СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ВерсияКонфигурации,
			ВерсияКонфигурации, АдресФайлаВоВремХранилище, СообщенияДляЖурналаРегистрации);
	Исключение
		Если ВыдаватьСообщения Тогда
			Предупреждение(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецЕсли;
	КонецПопытки;
	
КонецПроцедуры

// Получение файла списка шаблонов с сервера
&НаКлиенте
Функция ПолучитьФайлСпискаШаблонов(Знач ВыдаватьСообщения = Истина, ДоступноОбновлениеДля83 = Ложь)
    #Если НЕ ВебКлиент Тогда
	ПараметрыОбновления = ОбновлениеКонфигурацииКлиент.ПолучитьПараметрыОбновления(ДоступноОбновлениеДля83);
	НастройкиОбновления = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().НастройкиОбновления;
	ПутьКФайлуСпискаШаблонов = ПараметрыОбновления.КаталогФайловОбновления + ПараметрыОбновления.ИмяZipФайлаСпискаШаблонов;
	
	Результат = ПолучениеФайловИзИнтернетаКлиент.СкачатьФайлНаКлиенте(НастройкиОбновления.АдресСервераДляПроверкиНаличияОбновления +
		ПараметрыОбновления.АдресРесурсовДляПроверкиНаличияОбновления +	ПараметрыОбновления.ИмяZipФайлаСпискаШаблонов,
		Новый Структура("ПутьДляСохранения", ? (ПустаяСтрока(ПутьКФайлуСпискаШаблонов), Неопределено, ПутьКФайлуСпискаШаблонов)));
	Если Результат.Статус <> Истина Тогда
		Попытка
			УдалитьФайлы(ПутьКФайлуСпискаШаблонов);
		Исключение
			ОбщегоНазначенияКлиент.ДобавитьСообщениеДляЖурналаРегистрации(ОбновлениеКонфигурацииКлиент.СобытиеЖурналаРегистрации(),
				"Ошибка", 
				НСтр("ru = 'Ошибка при удалении временного файла'") + " " + ПутьКФайлуСпискаШаблонов + Символы.ПС +
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		ТекстОшибки = НСтр("ru = 'Ошибка при получении файла списка шаблонов:'") + " " + Результат.СообщениеОбОшибке;
		Если ВыдаватьСообщения Тогда
			Предупреждение(ТекстОшибки);
		КонецЕсли; 
		Возврат ТекстОшибки;
	КонецЕсли;
	
	Если НЕ ФайлСуществуетНаКлиенте(ПутьКФайлуСпискаШаблонов) Тогда
		Возврат НСтр("ru = 'Файл не существует:'") + " " + ПутьКФайлуСпискаШаблонов;
	КонецЕсли;
	
	Попытка 
		ЧтениеZip = Новый ЧтениеZipФайла(ПутьКФайлуСпискаШаблонов);
		ЧтениеZip.ИзвлечьВсе(ПараметрыОбновления.КаталогФайловОбновления, РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
	Исключение
		ТекстОшибки	= НСтр("ru = 'Ошибка при распаковке файла со списком доступных обновлений:'") + " ";
		ИнфоОшибки	= ИнформацияОбОшибке();
		ОбщегоНазначенияКлиент.ДобавитьСообщениеДляЖурналаРегистрации(ОбновлениеКонфигурацииКлиент.СобытиеЖурналаРегистрации(), 
			"Ошибка", ТекстОшибки + ПодробноеПредставлениеОшибки(ИнфоОшибки));
		ТекстОшибки	= ТекстОшибки + КраткоеПредставлениеОшибки(ИнфоОшибки);
		Возврат ТекстОшибки;
	КонецПопытки;
	УдалитьФайлы(ПараметрыОбновления.КаталогФайловОбновления, ПараметрыОбновления.ИмяZipФайлаСпискаШаблонов);
	Возврат "";
	#КонецЕсли
КонецФункции

// Проверка существования файла или каталога.
//
// Параметр:
//  ПутьКФайлу   - Строка - путь к файлу или каталогу, существование которого
//                 нужно проверить.
//
// Возвращаемое значение:
//  Булево - признак существования файла или каталога.
&НаКлиенте
Функция ФайлСуществуетНаКлиенте(Знач ПутьКФайлу)
	Файл = Новый Файл(ПутьКФайлу);
	Возврат Файл.Существует();
КонецФункции

&НаКлиенте
Функция ПолучитьОбновление(ВыдаватьСообщения = Истина)
	
	Страницы = Элементы.СтраницыПомощника.ПодчиненныеЭлементы;
	Сообщение = "";
	Если Объект.ИсточникОбновления = 0 Тогда
		Сообщение = Сообщение + НСтр("ru = 'Получение файлов из Интернета...'");
	ИначеЕсли Объект.ИсточникОбновления = 1 Тогда
		Сообщение = Сообщение + НСтр("ru = 'Получение файлов с диска 1С:ИТС...'");
	Иначе
		Сообщение = Сообщение + НСтр("ru = 'Получение файла обновления из указанного источника...'");
	КонецЕсли;
	ОбщегоНазначенияКлиент.ДобавитьСообщениеДляЖурналаРегистрации(ОбновлениеКонфигурацииКлиент.СобытиеЖурналаРегистрации(), 
		"Информация", Сообщение);
	
	Объект.ТехническаяИнформацияОбОшибке = "";
	НомерФайла = 1;
	Для Каждого Файл Из СписокФайловДляПолучения Цикл
		
		Если Файл.Значение <> Неопределено И Файл.Значение.Получен <> Истина Тогда	// может быть также Неопределено
			Если Объект.ИсточникОбновления = 0 Тогда
		        // Вывод сообщения о закачке файла в журнал регистрации.
				Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = ' Получаем файл %1 в %2'"),
						ОбновлениеКонфигурацииКлиент.ПолучитьПараметрыОбновления().АдресСервераОбновлений + Файл.Значение.Адрес,
						? (ПустаяСтрока(Файл.Значение.ЛокальныйПуть), Неопределено, Файл.Значение.ЛокальныйПуть));
				Элементы.НадписьПрогресс.Заголовок = Сообщение;
				ОбщегоНазначенияКлиент.ДобавитьСообщениеДляЖурналаРегистрации(ОбновлениеКонфигурацииКлиент.СобытиеЖурналаРегистрации(), , Сообщение);
				
				СоздатьКаталог(ОбновлениеКонфигурацииКлиент.ПолучитьКаталогФайла(Файл.Значение.ЛокальныйПуть));
				Результат	= ПолучениеФайловИзИнтернетаКлиент.СкачатьФайлНаКлиенте(
					ОбновлениеКонфигурацииКлиент.ПолучитьПараметрыОбновления().АдресСервераОбновлений + Файл.Значение.Адрес,
					Новый Структура("ПутьДляСохранения, Пользователь, Пароль",
						? (ПустаяСтрока(Файл.Значение.ЛокальныйПуть), Неопределено, Файл.Значение.ЛокальныйПуть),
						Объект.КодПользователяСервераОбновлений,
						Объект.ПарольСервераОбновлений));
				ТекстОшибки = "";
				Если Результат.Статус <> Истина Тогда
					ТекстОшибки = Результат.СообщениеОбОшибке;
					Попытка
						УдалитьФайлы(Файл.Значение.ЛокальныйПуть);
					Исключение
						ОбщегоНазначенияКлиент.ДобавитьСообщениеДляЖурналаРегистрации(ОбновлениеКонфигурацииКлиент.СобытиеЖурналаРегистрации(), 
							"Ошибка", НСтр("ru = 'Ошибка при удалении временного файла'") + " " +
							Файл.Значение.ЛокальныйПуть + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
					КонецПопытки;
					Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
						Если Файл.Значение.Обязательный И ВыдаватьСообщения Тогда
							//Предупреждение(ТекстОшибки);
							Возврат Страницы.ПодключениеКСайту.Имя;
						КонецЕсли; 
					КонецЕсли;
				КонецЕсли;
				
				Файл.Значение.Получен = ПустаяСтрока(ТекстОшибки);
				
				Если НЕ Файл.Значение.Получен И Файл.Значение.Обязательный Тогда
					Возврат Страницы.ПодключениеКСайту.Имя;
				КонецЕсли;
			Иначе
				// Вывод сообщения в журнал регистрации о копировании файла.
				Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = ' Получаем файл %1 в %2'"), Файл.Значение.Адрес, Файл.Значение.ЛокальныйПуть);
				Элементы.НадписьПрогресс.Заголовок = Сообщение;
				ОбщегоНазначенияКлиент.ДобавитьСообщениеДляЖурналаРегистрации(ОбновлениеКонфигурацииКлиент.СобытиеЖурналаРегистрации(), , Сообщение);

				Файл.Значение.Получен = ОбновлениеКонфигурацииКлиент.СкопироватьФайл(
					Файл.Значение.Адрес, Файл.Значение.ЛокальныйПуть, Файл.Значение.Обязательный И ВыдаватьСообщения);
			КонецЕсли;
		КонецЕсли;
		НомерФайла = НомерФайла + 1;
	КонецЦикла;
	
	ИмяСтраницы = "";
	ФайлыПолученыУспешно = ПроверитьФайлыОбновленияПолучены();
	Если ФайлыПолученыУспешно Тогда
		ОбщегоНазначенияКлиент.ДобавитьСообщениеДляЖурналаРегистрации(ОбновлениеКонфигурацииКлиент.СобытиеЖурналаРегистрации(), 
			"Информация", НСтр("ru = 'Файлы обновления успешно получены.'"));
		Если Объект.ИсточникОбновления = 1 Тогда
			ИмяСтраницы = Страницы.ДоступноеОбновление.Имя;
		Иначе
			ИмяСтраницы = ПерейтиКВыборуРежимаОбновления(Ложь);
		КонецЕсли;
	Иначе
		Сообщение = НСтр("ru = 'Не удалось получить обновление конфигурации.'");
		ОбщегоНазначенияКлиент.ДобавитьСообщениеДляЖурналаРегистрации(ОбновлениеКонфигурацииКлиент.СобытиеЖурналаРегистрации(), 
			"Ошибка", Сообщение);
		ИмяСтраницы = Страницы.ДлительнаяОперация.Имя;
	КонецЕсли;
	Возврат ИмяСтраницы;
	
КонецФункции

&НаКлиенте
Функция ПолучитьФайлыОбновленияЧерезИнтернет(ВыдаватьСообщения, ДоступноОбновлениеДля83 = Ложь)
	
	Страницы = Элементы.СтраницыПомощника.ПодчиненныеЭлементы;
	ДоступноеОбновление = ОбновлениеКонфигурацииКлиент.ПолучитьДоступноеОбновлениеКонфигурации();
	Если ДоступноеОбновление.ИмяСтраницы = Страницы.ДоступноеОбновление.Имя Тогда
		
		ТекстОшибки = ПолучитьФайлСпискаШаблонов(ВыдаватьСообщения, ДоступноОбновлениеДля83);
		Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
			Возврат Страницы.ПодключениеКИнтернет.Имя;
		КонецЕсли;
		
		ИмяФайлаИнформацияОбОбновлении	= ПолучитьФайлОписанияОбновления();
		ИмяФайлаПорядокОбновления		= ПолучитьФайлПорядкаОбновления();
		
		ПолучитьДоступныеОбновления(ДоступноеОбновление.ПараметрыФайлаПроверкиОбновления,
			ДоступноеОбновление.ПоследняяВерсияКонфигурации, ВыдаватьСообщения, ДоступноОбновлениеДля83);
		ПоследняяВерсияКонфигурации = ДоступноеОбновление.ПоследняяВерсияКонфигурации;
		Если Объект.ДоступныеОбновления.Количество() = 0 Тогда
			ОбщегоНазначенияКлиент.ДобавитьСообщениеДляЖурналаРегистрации(ОбновлениеКонфигурацииКлиент.СобытиеЖурналаРегистрации(), 
				"Информация", НСтр("ru = 'Невозможно продолжить обновление: нет доступных обновлений.'"));
			Возврат Страницы.ОбновленияНеОбнаружено.Имя;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДоступноеОбновление.ИмяСтраницы;
	
КонецФункции

&НаКлиенте
Функция ПроверитьОбновлениеИнтернет(ВыдаватьСообщения = Истина) 
	Страницы		= Элементы.СтраницыПомощника.ПодчиненныеЭлементы;
	ОбщегоНазначенияКлиент.ДобавитьСообщениеДляЖурналаРегистрации(ОбновлениеКонфигурацииКлиент.СобытиеЖурналаРегистрации(), 
		"Информация", НСтр("ru = 'Проверка обновления в Интернете...'"));
	ДоступноеОбновление = Неопределено;
	Объект.ДоступныеОбновления.Очистить();
	
	ОбновлениеКонфигурацииКлиент.ПроверитьНаличиеОбновленияЧерезИнтернет(ВыдаватьСообщения, ДоступноОбновлениеДля83);
	
	Возврат ПолучитьФайлыОбновленияЧерезИнтернет(ВыдаватьСообщения, ДоступноОбновлениеДля83);
КонецФункции

&НаКлиенте
Функция ПроверитьОбновлениеИТС(ВыдаватьСообщения = Истина)
	Страницы					= Элементы.СтраницыПомощника.ПодчиненныеЭлементы;
	ОбщегоНазначенияКлиент.ДобавитьСообщениеДляЖурналаРегистрации(ОбновлениеКонфигурацииКлиент.СобытиеЖурналаРегистрации(), 
		"Информация",  НСтр("ru = 'Проверка обновления на диске ИТС...'"));
	ДоступноеОбновление			= Неопределено;
	
	// очистка доступных обновлений не должна происходить, когда мы получаем цепочку обновлений
	Если ОчищатьДоступныеОбновления Тогда
		Объект.ДоступныеОбновления.Очистить();
		ОчищатьДоступныеОбновления = Ложь;
	КонецЕсли;
	
	ПутиДискаИТС = "";
	Если Объект.ИсточникДискаИТС <> 1 Тогда
		ТекущийДискИТС = НайтиДискИТС(ПутиДискаИТС);
		ОбщегоНазначенияКлиент.ДобавитьСообщениеДляЖурналаРегистрации(ОбновлениеКонфигурацииКлиент.СобытиеЖурналаРегистрации(),
			"Информация",  НСтр("ru = 'Обнаружен диск 1С:ИТС:'") + " " + ДискИТС);
	Иначе
		Если ПустаяСтрока(ДискИТС) Тогда
			Предупреждение(НСтр("ru = 'Укажите местоположение диска 1С:ИТС.'"));
			Возврат Страницы.МестоположениеДискаИТС.Имя;
		КонецЕсли;
		ПроверкаСуществования = Новый Файл(ДискИТС);
		Если НЕ ПроверкаСуществования.Существует() ИЛИ НЕ ПроверкаСуществования.ЭтоКаталог() Тогда
			Предупреждение(НСтр("ru = 'Указанный каталог не существует.'"));
			Возврат Страницы.МестоположениеДискаИТС.Имя;
		КонецЕсли;
		ТекущийДискИТС = ДискИТС;
	КонецЕсли;
	
	ПутьКФайламОбновленияНаДискеИТС = "";
	ПереченьРелизовНаДискахИТС = "";
	ПараметрыРелизовНаДискеИТС = ОбновлениеКонфигурацииКлиент.ПолучитьПараметрыРелизовНаДискеИТС(ТекущийДискИТС);
	Если ПустаяСтрока(ТекущийДискИТС) Тогда
		СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Диск 1С:ИТС не найден по указанным путям:
				|%1'"), ПутиДискаИТС);
		ОбщегоНазначенияКлиент.ДобавитьСообщениеДляЖурналаРегистрации(ОбновлениеКонфигурацииКлиент.СобытиеЖурналаРегистрации(), 
			"Предупреждение",  СтрокаСообщения);
		Элементы.НадписьОбновлениеНеОбнаружено.Заголовок = СтрокаСообщения;
		Возврат Страницы.ОбновленияНеОбнаружено.Имя; 
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПараметрыРелизовНаДискеИТС) Тогда
		СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'На диске 1С:ИТС не найден каталог обновления.
				|%1'"), ТекущийДискИТС);
		ОбщегоНазначенияКлиент.ДобавитьСообщениеДляЖурналаРегистрации(ОбновлениеКонфигурацииКлиент.СобытиеЖурналаРегистрации(), 
			"Предупреждение", СтрокаСообщения);
		Элементы.НадписьОбновлениеНеОбнаружено.Заголовок = СтрокаСообщения;
		Возврат Страницы.ОбновленияНеОбнаружено.Имя; 
	КонецЕсли;
	ПутьКФайламОбновленияНаДискеИТС	= ПараметрыРелизовНаДискеИТС.ПутьКФайламОбновленияНаДискеИТС;
	ПереченьРелизовНаДискахИТС		= ПараметрыРелизовНаДискеИТС.ПутьКСтатьеПеречнюРелизов;
	
	ПараметрыОбновления = ОбновлениеКонфигурацииКлиент.ПолучитьПараметрыОбновленияИТС(ПутьКФайламОбновленияНаДискеИТС, ВыдаватьСообщения);
	Если НЕ ЗначениеЗаполнено(ПараметрыОбновления) Тогда
		СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'На диске 1С:ИТС не найдена информация о последнем обновлении.
				|%1'"), ТекущийДискИТС);
		ОбщегоНазначенияКлиент.ДобавитьСообщениеДляЖурналаРегистрации(ОбновлениеКонфигурацииКлиент.СобытиеЖурналаРегистрации(), 
			"Предупреждение",  СтрокаСообщения);
		Элементы.НадписьОбновлениеНеОбнаружено.Заголовок = СтрокаСообщения;
		Возврат Страницы.ОбновленияНеОбнаружено.Имя; 
	КонецЕсли;
	
	ПоследняяВерсияКонфигурации	= ПараметрыОбновления.Version;
	ТекущаяВерсияКонфигурации = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ВерсияКонфигурации;
	Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ТекущаяВерсияКонфигурации, ПоследняяВерсияКонфигурации) >= 0 Тогда  
		СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Нет доступных обновлений.
				|%1'"), ТекущийДискИТС);
		ОбщегоНазначенияКлиент.ДобавитьСообщениеДляЖурналаРегистрации(ОбновлениеКонфигурацииКлиент.СобытиеЖурналаРегистрации(), 
			"Предупреждение", СтрокаСообщения);
		Элементы.НадписьОбновлениеНеОбнаружено.Заголовок = СтрокаСообщения;
		Возврат Страницы.ОбновленияНеОбнаружено.Имя;
	КонецЕсли;
	
	ОбщегоНазначенияКлиент.ДобавитьСообщениеДляЖурналаРегистрации(ОбновлениеКонфигурацииКлиент.СобытиеЖурналаРегистрации(), "Информация", 
		НСтр("ru = 'Обнаружена более новая версия конфигурации на диске 1С:ИТС:'")
			+ " " + ПоследняяВерсияКонфигурации + ".");
	
	Если НЕ ПолучитьФайлСпискаШаблоновИТС(ВыдаватьСообщения) Тогда
		СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'На диске 1С:ИТС не найден список доступных обновлений.
				|%1'"), ТекущийДискИТС);
				
		ОбщегоНазначенияКлиент.ДобавитьСообщениеДляЖурналаРегистрации(ОбновлениеКонфигурацииКлиент.СобытиеЖурналаРегистрации(), 
			"Предупреждение",  СтрокаСообщения);
			
		Элементы.НадписьОбновлениеНеОбнаружено.Заголовок = СтрокаСообщения;
		Возврат Страницы.ОбновленияНеОбнаружено.Имя;
	КонецЕсли;
	
	ПолучитьДоступныеОбновления(ПараметрыОбновления, ПоследняяВерсияКонфигурации, ВыдаватьСообщения);
	Если Объект.ДоступныеОбновления.Количество() = 0 Тогда
		СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Нет доступных обновлений.
				|%1'"), ТекущийДискИТС);
				
		ОбщегоНазначенияКлиент.ДобавитьСообщениеДляЖурналаРегистрации(ОбновлениеКонфигурацииКлиент.СобытиеЖурналаРегистрации(), 
			"Информация",  СтрокаСообщения);
			
		Элементы.НадписьОбновлениеНеОбнаружено.Заголовок = СтрокаСообщения;
		Возврат Страницы.ОбновленияНеОбнаружено.Имя;
	КонецЕсли;
	
	// Получение файла описания обновлений выполняется только если вставлен последний в цепочке диск ИТС
	Если Объект.ДоступныеОбновления.Количество() > 0 И
		ПоследняяВерсияКонфигурации = Объект.ДоступныеОбновления[Объект.ДоступныеОбновления.Количество()-1].Версия Тогда
		ИмяФайлаИнформацияОбОбновлении	= ПолучитьФайлОписанияОбновленияИТС();
		ИмяФайлаПорядокОбновления		= ПолучитьФайлПорядкаОбновленияИТС();
	КонецЕсли;
	
	// сразу нужно получить файлы обновления с диска ИТС
	СписокФайловДляПолучения.ЗагрузитьЗначения(СоздатьСписокФайловДляПолучения());
	РезультатПолученияФайлов = ПолучитьОбновление();
	
	Возврат Страницы.ДоступноеОбновление.Имя;
КонецФункции

&НаКлиенте
Процедура ВыполнитьПолучениеОбновления()
	ТекущаяСтраница = Элементы.СтраницыПомощника.ТекущаяСтраница;
	РезультатПолученияФайлов = ПолучитьОбновление();
	Элементы.СтраницыПомощника.ТекущаяСтраница = ТекущаяСтраница;
	ОбработатьНажатиеКнопкиДалее();
КонецПроцедуры

&НаКлиенте
Функция ВернутьДату(Дата, Время)
	Возврат Дата(Год(Дата), Месяц(Дата), День(Дата), Час(Время), Минута(Время), Секунда(Время));
КонецФункции	

&НаКлиенте
Функция ПроверитьОбновлениеФайл(ВыдаватьСообщения = Истина)
	
	Страницы = Элементы.СтраницыПомощника.ПодчиненныеЭлементы;
	
	ОбщегоНазначенияКлиент.ДобавитьСообщениеДляЖурналаРегистрации(ОбновлениеКонфигурацииКлиент.СобытиеЖурналаРегистрации(), 
		"Информация",  НСтр("ru = 'Проверка обновления в Интернете...'"));
		
	Объект.ДоступныеОбновления.Очистить();
	
	Если ВосстановлениеРезультатовПредЗапуска <> Истина Тогда
		Возврат Страницы.ФайлОбновления.Имя;
	КонецЕсли; 
	
	Если Объект.НуженФайлОбновления = 1 Тогда
		Файл = Новый Файл(Объект.ИмяФайлаОбновления);
		Если НЕ Файл.Существует() ИЛИ НЕ Файл.ЭтоФайл() Тогда
			
			ОбщегоНазначенияКлиент.ДобавитьСообщениеДляЖурналаРегистрации(ОбновлениеКонфигурацииКлиент.СобытиеЖурналаРегистрации(), "Информация",
				НСтр("ru = 'Невозможно продолжить обновление: файл поставки обновления конфигурации не найден.'"));
				
			Возврат Страницы.ФайлОбновления.Имя;
		КонецЕсли;
	КонецЕсли;
	
	ПолучитьДоступноеОбновлениеИзФайла(?(Объект.НуженФайлОбновления = 1, Объект.ИмяФайлаОбновления, Неопределено));
	Возврат ПерейтиКВыборуРежимаОбновления(Ложь);
	
КонецФункции

&НаКлиенте
Функция ТекстНадписиРезервнойКопииИБ()
	
	Результат = НСтр("ru = 'Не создавать резервную копию ИБ'");
	
	Если Объект.СоздаватьРезервнуюКопию = 1 Тогда
		Результат = НСтр("ru = 'Создавать временную резервную копию ИБ'");
	ИначеЕсли Объект.СоздаватьРезервнуюКопию = 2 Тогда
		Результат = НСтр("ru = 'Создавать резервную копию ИБ'");
	КонецЕсли; 
	
	Если Объект.ВосстанавливатьИнформационнуюБазу Тогда
		Результат = Результат + " " + НСтр("ru = 'и выполнять откат при нештатной ситуации'");
	Иначе
		Результат = Результат + " " + НСтр("ru = 'и не выполнять откат при нештатной ситуации'");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ТекстНадписиПроверкиОбновления()
	Результат = НСтр("ru = 'Отключена'");
	Если Объект.ПроверятьНаличиеОбновленияПриЗапуске = 2 Тогда
		Результат = НСтр("ru = 'При каждом запуске программы'");
	ИначеЕсли Объект.ПроверятьНаличиеОбновленияПриЗапуске = 1 Тогда
		Результат = НСтр("ru = 'По расписанию:'") + " " + Строка(Объект.РасписаниеПроверкиНаличияОбновления);
	КонецЕсли; 
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура ВыполнитьОбновлениеКонфигурации()
	
	УдалитьЗадачуПланировщика(Объект.КодЗадачиПланировщика);
	ИмяГлавногоФайлаСкрипта = СформироватьФайлыСкриптаОбновления(Истина);
	ОбщегоНазначенияКлиент.ДобавитьСообщениеДляЖурналаРегистрации(ОбновлениеКонфигурацииКлиент.СобытиеЖурналаРегистрации(), "Информация",
		НСтр("ru = 'Выполняется процедура обновления конфигурации:'")
			+ " " + ИмяГлавногоФайлаСкрипта);
	ЗаписатьСтатусОбновления(ИмяПользователя(), Истина, Ложь, Ложь, СообщенияДляЖурналаРегистрации);
	ЗапуститьПриложение("""" + ИмяГлавногоФайлаСкрипта + """", ОбновлениеКонфигурацииКлиент.ПолучитьКаталогФайла(ИмяГлавногоФайлаСкрипта));
	
КонецПроцедуры 

&НаСервереБезКонтекста
Процедура ЗаписатьСтатусОбновления(ИмяАдминистратораОбновления, ОбновлениеЗапланировано, ОбновлениеВыполнено, РезультатОбновления,
	СообщенияДляЖурналаРегистрации = Неопределено)
	
	ОбновлениеКонфигурации.ЗаписатьСтатусОбновления(
		ИмяАдминистратораОбновления,
		ОбновлениеЗапланировано,
		ОбновлениеВыполнено,
		РезультатОбновления,
		СообщенияДляЖурналаРегистрации);
	
КонецПроцедуры 

&НаКлиенте
Функция ОбъектWMI()
	// WMI: http://www.microsoft.com/technet/scriptcenter/resources/wmifaq.mspx
	Локатор = Новый COMObject("WbemScripting.SWbemLocator");
	Возврат Локатор.ConnectServer(".", "\root\cimv2");
КонецФункции

&НаКлиенте
Функция ПолучитьЗадачуПланировщика(Знач КодЗадачи)
	Если КодЗадачи = 0 Тогда
		Возврат Неопределено;
	КонецЕсли; 
	
	Попытка
		Возврат ОбъектWMI().Get("Win32_ScheduledJob.JobID=" + КодЗадачи);
	Исключение
		Возврат Неопределено;
	КонецПопытки; 
КонецФункции
