&НаКлиенте
Перем ЗакрытьФормуБезусловно;

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	// Параметризация мастера по имени плана обмена (обязательно)
	Если Не Параметры.Свойство("ИмяПланаОбмена", Объект.ИмяПланаОбмена) И ПустаяСтрока(Объект.ИмяПланаОбмена) Тогда
		
		ВызватьИсключение НСтр("ru='Обработка не предназначена для непосредственного использования.'");
		
	КонецЕсли;
	
	ОбменДаннымиСервер.ПроверитьВозможностьАдминистрированияОбменов();
	
	НастройкаОбменаССервисом = Параметры.Свойство("НастройкаОбменаССервисом");
	
	УстановитьПривилегированныйРежим(Истина);
	
	// установка значений по умолчанию - общих
	РасположениеИнформационнойБазы          = "ПодключениеНеДоступно";
	ТипИнформационнойБазы                   = "Серверный";
	ВыполнитьОбменДаннымиСейчас             = Истина;
	ВыполнитьСозданиеНачальногоОбразаСейчас = Истина;
	ВыполнитьИнтерактивныйОбменДаннымиСейчас = Истина;
	
	Объект.EMAILСжиматьФайлИсходящегоСообщения = Истина;
	Объект.FTPСжиматьФайлИсходящегоСообщения   = Истина;
	Объект.FTPСоединениеПорт = 21;
	
	// значение по умолчанию для вида транспорта сообщений обмена
	Объект.ВидТранспортаСообщенийОбмена = Перечисления.ВидыТранспортаСообщенийОбмена.FILE;
	
	// выполняем проверку наличия для плана обмена формы создания начального образа
	ФормаСозданияНачальногоОбразаСуществует = (Метаданные.ПланыОбмена[Объект.ИмяПланаОбмена].Формы.Найти("ФормаСозданияНачальногоОбраза") <> Неопределено);
	
	// получаем значения по умолчанию для плана обмена
	МенеджерПланаОбмена = ПланыОбмена[Объект.ИмяПланаОбмена];
	
	Элементы.КраткоеОписаниеНадпись.Заголовок = МенеджерПланаОбмена.КраткаяИнформацияПоОбмену();
	СсылкаНаПодробноеОписание = МенеджерПланаОбмена.ПодробнаяИнформацияПоОбмену();
	
	ИмяФайлаНастроекДляПриемника = МенеджерПланаОбмена.ИмяФайлаНастроекДляПриемника() + ".xml";
	
	ФормаНастройкиУзла = "";
	ФормаНастройкиЗначенийПоУмолчанию = "";
	
	НастройкаОтборовНаУзле    = ОбменДаннымиСервер.НастройкаОтборовНаУзле(Объект.ИмяПланаОбмена, ВерсияКонфигурацииКорреспондента, ФормаНастройкиУзла);
	ЗначенияПоУмолчаниюНаУзле = ОбменДаннымиСервер.ЗначенияПоУмолчаниюНаУзле(Объект.ИмяПланаОбмена, ВерсияКонфигурацииКорреспондента, ФормаНастройкиЗначенийПоУмолчанию);
	
	НастройкиПараметровУчетаПоясняющаяНадпись = МенеджерПланаОбмена.ПояснениеДляНастройкиПараметровУчета();
	
	КонтекстФормыНастройкиУзлов = Новый Структура;
	
	ПредусмотреныНастройкиОтборовНаУзле    = НастройкаОтборовНаУзле.Количество() > 0;
	ПредусмотреныЗначенияПоУмолчаниюНаУзле = ЗначенияПоУмолчаниюНаУзле.Количество() > 0;
	
	Элементы.РамкаГруппыОграничений.Видимость = ПредусмотреныНастройкиОтборовНаУзле;
	Элементы.РамкаГруппыОграничений1.Видимость = ПредусмотреныНастройкиОтборовНаУзле;
	Элементы.РамкаГруппыОграничений2.Видимость = ПредусмотреныНастройкиОтборовНаУзле;
	Элементы.РамкаГруппыЗначенийПоУмолчанию.Видимость = ПредусмотреныЗначенияПоУмолчаниюНаУзле;
	Элементы.РамкаГруппыЗначенийПоУмолчанию1.Видимость = ПредусмотреныЗначенияПоУмолчаниюНаУзле;
	Элементы.РамкаГруппыЗначенийПоУмолчанию2.Видимость = ПредусмотреныЗначенияПоУмолчаниюНаУзле;
	Элементы.РамкаГруппыЗначенийПоУмолчанию6.Видимость = ПредусмотреныЗначенияПоУмолчаниюНаУзле;
	Элементы.ГруппаComcntr.Видимость = Ложь;
	
	ОписаниеОграниченийПередачиДанных = ОбменДаннымиСервер.ОписаниеОграниченийПередачиДанных(Объект.ИмяПланаОбмена, НастройкаОтборовНаУзле, ВерсияКонфигурацииКорреспондента);
	ОписаниеЗначенийПоУмолчанию       = ОбменДаннымиСервер.ОписаниеЗначенийПоУмолчанию(Объект.ИмяПланаОбмена, ЗначенияПоУмолчаниюНаУзле, ВерсияКонфигурацииКорреспондента);
	
	ЭтотУзел = МенеджерПланаОбмена.ЭтотУзел();
	
	ИмяФормыСозданияНачальногоОбраза = МенеджерПланаОбмена.ИмяФормыСозданияНачальногоОбраза();
	
	ИспользуемыеТранспортыСообщенийОбмена = ОбменДаннымиПовтИсп.ИспользуемыеТранспортыСообщенийОбмена(ЭтотУзел);
	
	ИспользоватьТранспортСообщенийОбменаEMAIL = (ИспользуемыеТранспортыСообщенийОбмена.Найти(Перечисления.ВидыТранспортаСообщенийОбмена.EMAIL) <> Неопределено);
	ИспользоватьТранспортСообщенийОбменаFILE  = (ИспользуемыеТранспортыСообщенийОбмена.Найти(Перечисления.ВидыТранспортаСообщенийОбмена.FILE) <> Неопределено);
	ИспользоватьТранспортСообщенийОбменаFTP   = (ИспользуемыеТранспортыСообщенийОбмена.Найти(Перечисления.ВидыТранспортаСообщенийОбмена.FTP) <> Неопределено);
	ИспользоватьТранспортСообщенийОбменаCOM   = (ИспользуемыеТранспортыСообщенийОбмена.Найти(Перечисления.ВидыТранспортаСообщенийОбмена.COM) <> Неопределено);
	ИспользоватьТранспортСообщенийОбменаWS    = (ИспользуемыеТранспортыСообщенийОбмена.Найти(Перечисления.ВидыТранспортаСообщенийОбмена.WS) <> Неопределено);
	
	// получаем другие настройки
	Объект.ПрефиксИнформационнойБазыИсточника           = ПолучитьФункциональнуюОпцию("ПрефиксИнформационнойБазы");
	Объект.ПрефиксИнформационнойБазыИсточникаУстановлен = ЗначениеЗаполнено(Объект.ПрефиксИнформационнойБазыИсточника);
	
	Если Не Объект.ПрефиксИнформационнойБазыИсточникаУстановлен
		И Не НастройкаОбменаССервисом Тогда
		
		Объект.ПрефиксИнформационнойБазыИсточника = ОбменДаннымиПереопределяемый.ПрефиксИнформационнойБазыПоУмолчанию();
		
	КонецЕсли;
	
	ВариантРаботыМастера = "НастроитьНовыйОбменДанными";
	
	Если НастройкаОбменаССервисом Тогда
		
		РежимРаботыМастера = "ОбменЧерезВебСервис";
		
	ИначеЕсли ИспользоватьТранспортСообщенийОбменаCOM Тогда
		
		РежимРаботыМастера = "ОбменЧерезВнешнееСоединение";
		
	Иначе
		
		РежимРаботыМастера = "ОбменЧерезОбычныеКаналыСвязи";
		
	КонецЕсли;
	
	МетаданныеПланаОбмена = Метаданные.ПланыОбмена[Объект.ИмяПланаОбмена];
	СинонимПланаОбмена = МетаданныеПланаОбмена.Синоним;
	
	ЗаголовокФормы = НСтр("ru='Синхронизация данных с %Программа% (настройка)'");
	ЗаголовокФормы = СтрЗаменить(ЗаголовокФормы, "%Программа%", СинонимПланаОбмена);
	Заголовок = ЗаголовокФормы;
	
	Объект.ЭтоНастройкаРаспределеннойИнформационнойБазы = ОбменДаннымиПовтИсп.ЭтоПланОбменаРаспределеннойИнформационнойБазы(Объект.ИмяПланаОбмена);
	Объект.ЭтоНастройкаСтандартногоОбмена               = ОбменДаннымиПовтИсп.ЭтоУзелСтандартногоОбменаДанными(ЭтотУзел);
	
	ИнформационнаяБазаФайловая = ОбщегоНазначения.ИнформационнаяБазаФайловая();
	
	Объект.ИспользоватьПараметрыТранспортаFILE  = Истина;
	Объект.ИспользоватьПараметрыТранспортаFTP   = Ложь;
	Объект.ИспользоватьПараметрыТранспортаEMAIL = Ложь;
	
	Элементы.НастройкиТранспортаFILE.Доступность  = Объект.ИспользоватьПараметрыТранспортаFILE;
	Элементы.НастройкиТранспортаFTP.Доступность   = Объект.ИспользоватьПараметрыТранспортаFTP;
	Элементы.НастройкиТранспортаEMAIL.Доступность = Объект.ИспользоватьПараметрыТранспортаEMAIL;
	
	Объект.НаименованиеЭтойБазы = ОбменДаннымиСервер.НаименованиеПредопределенногоУзлаПланаОбмена(Объект.ИмяПланаОбмена);
	ЗаданоНаименованиеЭтойБазы = Не ПустаяСтрока(Объект.НаименованиеЭтойБазы);
	
	Элементы.НаименованиеЭтойБазы.ТолькоПросмотр = ЗаданоНаименованиеЭтойБазы;
	Элементы.НаименованиеЭтойБазы1.ТолькоПросмотр = ЗаданоНаименованиеЭтойБазы;
	
	Если Не ЗаданоНаименованиеЭтойБазы Тогда
		
		Объект.НаименованиеЭтойБазы = ОбменДаннымиПовтИсп.ИмяЭтойИнформационнойБазы();
		
	КонецЕсли;
	
	ИмяЭтойБазы = Объект.НаименованиеЭтойБазы;
	
	УстановитьВидимостьНаСервере();
	
	// назначаем значения поясняющим надписям внизу страницы для перехода по кнопке "Далее"
	
	// поясняющая надпись на странице мастера настроек FILE
	Если ИспользоватьТранспортСообщенийОбменаFILE Тогда
		
		Если ИспользоватьТранспортСообщенийОбменаFTP Тогда
			
			Элементы.НадписьДалееFILE.Заголовок = НадписьДалееFTP();
			
		ИначеЕсли ИспользоватьТранспортСообщенийОбменаEMAIL Тогда
			
			Элементы.НадписьДалееFILE.Заголовок = НадписьДалееEMAIL();
			
		Иначе
			
			Элементы.НадписьДалееFILE.Заголовок = НадписьДалееНастройки();
			
		КонецЕсли;
		
	КонецЕсли;
	
	// поясняющая надпись на странице мастера настроек FTP
	Если ИспользоватьТранспортСообщенийОбменаFTP Тогда
		
		Если ИспользоватьТранспортСообщенийОбменаEMAIL Тогда
			
			Элементы.НадписьДалееFTP.Заголовок = НадписьДалееEMAIL();
			
		Иначе
			
			Элементы.НадписьДалееFTP.Заголовок = НадписьДалееНастройки();
			
		КонецЕсли;
		
	КонецЕсли;
	
	// поясняющая надпись на странице мастера настроек EMAIL
	Если ИспользоватьТранспортСообщенийОбменаEMAIL Тогда
		
		Элементы.НадписьДалееEMAIL.Заголовок = НадписьДалееНастройки();
		
	КонецЕсли;
	
	ЭтоПродолжениеНастройкиВПодчиненномУзлеРИБ = Параметры.Свойство("ЭтоПродолжениеНастройкиВПодчиненномУзлеРИБ");
	
	Если Не ЭтоПродолжениеНастройкиВПодчиненномУзлеРИБ Тогда
		
		Если ОбменДаннымиСервер.ЭтоПодчиненныйУзелРИБ() Тогда
			
			ИмяПланаОбменаРИБ = ОбменДаннымиСервер.ГлавныйУзел().Метаданные().Имя;
			
			Если Объект.ИмяПланаОбмена = ИмяПланаОбменаРИБ
				И Не Константы.НастройкаПодчиненногоУзлаРИБЗавершена.Получить() Тогда
				
				ЭтоПродолжениеНастройкиВПодчиненномУзлеРИБ = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭтоПродолжениеНастройкиВПодчиненномУзлеРИБ Тогда
		
		ВариантРаботыМастера = "ПродолжитьНастройкуОбменаДанными";
		
		ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
		
		ОбработкаОбъект.ВыполнитьЗагрузкуПараметровМастераИзКонстанты(Ложь);
		
		ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
		
		Элементы.НастройкиТранспортаFILE.Доступность  = Объект.ИспользоватьПараметрыТранспортаFILE;
		Элементы.НастройкиТранспортаFTP.Доступность   = Объект.ИспользоватьПараметрыТранспортаFTP;
		Элементы.НастройкиТранспортаEMAIL.Доступность = Объект.ИспользоватьПараметрыТранспортаEMAIL;
		
		Элементы.ЗаголовокСтраницыМастера1.Заголовок = НСтр("ru = 'Продолжение настройки синхронизации данных с главным узлом'");
		
	КонецЕсли;
	
	ВариантРаботыМастераПриИзмененииНаСервере();
	
	РежимРаботыМастераПриИзмененииНаСервере();
	
	СобытиеЖурналаРегистрацииУстановкаПодключенияКWebСервису = ОбменДаннымиСервер.СобытиеЖурналаРегистрацииУстановкаПодключенияКWebСервису();
	СобытиеЖурналаРегистрацииСозданиеОбменаДанными = ОбменДаннымиСервер.СобытиеЖурналаРегистрацииСозданиеОбменаДанными();
	
	ДлительнаяОперация = Ложь;
	ПредопределенноеРасписаниеОбменаДанными = "КаждыйЧас";
	РасписаниеВыполненияОбменаДанными = ПредопределенноеРасписаниеКаждыйЧас();
	ПредставлениеПользовательскогоОписания = Строка(РасписаниеВыполненияОбменаДанными);
	
	ВключитьРегистрациюВсехСобытийВЖурналеРегистрации = Не ОбщегоНазначения.ПроверитьВключениеЖурналаРегистрации("Ошибка");
	Элементы.ГруппаВключитьРегистрациюВсехСобытийВЖурналеРегистрации.Видимость  = ВключитьРегистрациюВсехСобытийВЖурналеРегистрации;
	Элементы.ГруппаВключитьРегистрациюВсехСобытийВЖурналеРегистрации1.Видимость = ВключитьРегистрациюВсехСобытийВЖурналеРегистрации;
	Элементы.ГруппаВключитьРегистрациюВсехСобытийВЖурналеРегистрации2.Видимость = ВключитьРегистрациюВсехСобытийВЖурналеРегистрации;
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.ПолучениеФайловИзИнтернета") Тогда
		Элементы.ПараметрыДоступаВИнтернет.Видимость = Истина;
		Элементы.ПараметрыДоступаВИнтернет1.Видимость = Истина;
		Элементы.ПараметрыДоступаВИнтернет2.Видимость = Истина;
	Иначе
		Элементы.ПараметрыДоступаВИнтернет.Видимость = Ложь;
		Элементы.ПараметрыДоступаВИнтернет1.Видимость = Ложь;
		Элементы.ПараметрыДоступаВИнтернет2.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ЗакрытьФормуБезусловно = Ложь;
	
	АутентификацияОперационнойСистемыПриИзменении();
	
	ВариантРаботыИнформационнойБазыПриИзменении();
	
	УстановитьПорядковыйНомерПерехода(1);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если ДлительнаяОперация Тогда
		Предупреждение(НСтр("ru = 'Выполняется создание синхронизации данных.
							|Работа помощника не может быть завершена.'"));
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если ЗакрытьФормуБезусловно = Истина Тогда
		Возврат;
	КонецЕсли;
	
	НСтрока = НСтр("ru = 'Отменить настройку синхронизации и выйти из помощника?'");
	
	Ответ = Вопрос(НСтрока, РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Нет);
	
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	Оповестить("ЗакрытаФормаПомощникаСозданияОбменаДанными");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗакрытиеФормыСопоставленияОбъектов" Тогда
		
		Отказ = Ложь;
		
		Состояние(НСтр("ru = 'Выполняется сбор информации сопоставления...'"));
		
		ОбновитьДанныеСтатистикиСопоставленияНаСервере(Отказ, Параметр);
		
		Если Отказ Тогда
			Предупреждение(НСтр("ru = 'При получении информации статистики возникли ошибки.'"));
		Иначе
			
			РазвернутьДеревоИнформацииСтатистики(Параметр.КлючУникальности);
			
			Состояние(НСтр("ru = 'Сбор информации завершен'"));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

////////////////////////////////////////////////////////////////////////////////
// Страница СтраницаМастераНачало

&НаКлиенте
Процедура ИмяФайлаНастроекОбменаДаннымиДляЗагрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВыбратьФайлНастроекОбмена(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаНастроекОбменаДаннымиДляЗагрузкиПриИзменении(Элемент)
	
	Файл = Новый Файл(Объект.ИмяФайлаНастроекОбменаДаннымиДляЗагрузки);
	
	Если    Не Файл.Существует()
		ИЛИ Не Файл.ЭтоФайл() Тогда
		
		Предупреждение(НСтр("ru = 'Укажите корректное имя файла настроек.'"));
		Объект.ИмяФайлаНастроекОбменаДаннымиДляЗагрузки = "";
		Возврат;
	КонецЕсли;
	
	ВыбратьФайлНастроекОбмена(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантРаботыМастераПриИзменении(Элемент)
	
	ВариантРаботыМастераПриИзмененииНаСервере();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Страница СтраницаМастераСозданиеОбменаДаннымиУспешноЗавершено

&НаКлиенте
Процедура ПредопределенноеРасписаниеОбменаДаннымиПриИзменении(Элемент)
	
	ПредопределенноеРасписаниеОбменаДаннымиПриИзмененииЗначения();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнятьОбменДаннымиАвтоматическиПриИзменении(Элемент)
	
	ВыполнятьОбменДаннымиАвтоматическиПриИзмененииЗначения();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Страница СтраницаМастераВыборРежимаРаботыПомощника

&НаКлиенте
Процедура РежимРаботыМастераПриИзменении(Элемент)
	
	РежимРаботыМастераПриИзмененииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура COMКаталогИнформационнойБазыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбменДаннымиКлиент.ОбработчикВыбораФайловогоКаталога(Объект, "COMКаталогИнформационнойБазы", СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура COMКаталогИнформационнойБазыОткрытие(Элемент, СтандартнаяОбработка)
	
	ОбменДаннымиКлиент.ОбработчикОткрытияФайлаИлиКаталога(Объект, "COMКаталогИнформационнойБазы", СтандартнаяОбработка)
	
КонецПроцедуры

&НаКлиенте
Процедура COMВариантРаботыИнформационнойБазыПриИзменении(Элемент)
	
	ВариантРаботыИнформационнойБазыПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ТипАутентификацииПриИзменении(Элемент)
	
	АутентификацияОперационнойСистемыПриИзменении();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Страница СтраницаМастераЗаданиеПараметровТранспортаFILE

&НаКлиенте
Процедура FILEКаталогОбменаИнформациейНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбменДаннымиКлиент.ОбработчикВыбораФайловогоКаталога(Объект, "FILEКаталогОбменаИнформацией", СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура FILEКаталогОбменаИнформациейОткрытие(Элемент, СтандартнаяОбработка)
	
	ОбменДаннымиКлиент.ОбработчикОткрытияФайлаИлиКаталога(Объект, "FILEКаталогОбменаИнформацией", СтандартнаяОбработка)
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьПараметрыТранспортаFILEПриИзменении(Элемент)
	
	Элементы.НастройкиТранспортаFILE.Доступность = Объект.ИспользоватьПараметрыТранспортаFILE;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Страница СтраницаМастераЗаданиеПараметровТранспортаFTP

&НаКлиенте
Процедура ИспользоватьПараметрыТранспортаFTPПриИзменении(Элемент)
	
	Элементы.НастройкиТранспортаFTP.Доступность = Объект.ИспользоватьПараметрыТранспортаFTP;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Страница СтраницаМастераЗаданиеПараметровТранспортаEMAIL

&НаКлиенте
Процедура ИспользоватьПараметрыТранспортаEMAILПриИзменении(Элемент)
	
	Элементы.НастройкиТранспортаEMAIL.Доступность = Объект.ИспользоватьПараметрыТранспортаEMAIL;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ДеревоИнформацииСтатистики

&НаКлиенте
Процедура ДеревоИнформацииСтатистикиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОткрытьФормуСопоставления();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

////////////////////////////////////////////////////////////////////////////////
// Поставляемая часть

&НаКлиенте
Процедура КомандаДалее(Команда)
	
	ИзменитьПорядковыйНомерПерехода(+1);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаНазад(Команда)
	
	ИзменитьПорядковыйНомерПерехода(-1);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаГотово(Команда)
	
	// Включаем журнал регистрации при необходимости
	Если ВключитьРегистрациюВсехСобытийВЖурналеРегистрации Тогда
		
		Предупреждение = "";
		
		ВключитьИспользованиеЖурналаРегистрации(СобытиеЖурналаРегистрацииСозданиеОбменаДанными, Предупреждение);
		
		Если Не ПустаяСтрока(Предупреждение) Тогда
			
			Предупреждение(Предупреждение);
			
			Предупреждение(НСтр("ru = 'Запись сообщений об ошибках в журнал регистрации отключена,
				|поэтому будет затруднена диагностика возможных проблем с синхронизацией данных.
				|Рекомендуется обратиться к администратору для того, чтобы включить запись сообщений об ошибках.'"));
		КонецЕсли;
		
	КонецЕсли;
	
	Отказ = Ложь;
	
	Если РежимРаботыМастера = "ОбменЧерезВнешнееСоединение" Тогда
		
		ЗавершениеНастройкиОбменаЧерезВнешнееСоединение();
		
	ИначеЕсли РежимРаботыМастера = "ОбменЧерезВебСервис" Тогда
		
		ЗавершениеНастройкиОбменаЧерезВебСервис();
		
	ИначеЕсли РежимРаботыМастера = "ОбменЧерезОбычныеКаналыСвязи" Тогда
		
		Если ВариантРаботыМастера = "НастроитьНовыйОбменДанными" Тогда
			
			ЗавершениеПервогоЭтапаНастройкиОбменаЧерезОбычныеКаналыСвязи(Отказ);
			
		ИначеЕсли ВариантРаботыМастера = "ПродолжитьНастройкуОбменаДанными" Тогда
			
			ЗавершениеВторогоЭтапаНастройкиОбменаЧерезОбычныеКаналыСвязи(Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьИнтерфейс();
	
	ОбменДаннымиКлиент.ПриЗавершенииРаботыПомощникаСозданияОбмена(ЭтаФорма, ЗапуститьМенеджерЗаданий());
	
	ЗакрытьФормуБезусловно = Истина;
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтмена(Команда)
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСправка(Команда)
	
	ОткрытьСправкуФормы();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Переопределяемая часть

&НаКлиенте
Процедура ВыполнитьСопоставлениеДанных(Команда)
	
	ОткрытьФормуСопоставления();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьНастройкуВыгрузкиДанных(Команда)
	
	ТипСоединения = "ВебСервис";
	
	ИмяФормыНастройкиУзла = "ПланОбмена.[ИмяПланаОбмена].Форма.[ФормаНастройкиУзлов]";
	ИмяФормыНастройкиУзла = СтрЗаменить(ИмяФормыНастройкиУзла, "[ИмяПланаОбмена]", Объект.ИмяПланаОбмена);
	ИмяФормыНастройкиУзла = СтрЗаменить(ИмяФормыНастройкиУзла, "[ФормаНастройкиУзлов]", ФормаНастройкиУзлов);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВерсияКорреспондента", ВерсияКонфигурацииКорреспондента);
	ПараметрыФормы.Вставить("ПараметрыПодключения", СтруктураПараметровПодключенияВнешнегоСоединения(ТипСоединения));
	ПараметрыФормы.Вставить("Настройки", КонтекстФормыНастройкиУзлов);
	
	РезультатОткрытия = ОткрытьФормуМодально(ИмяФормыНастройкиУзла, ПараметрыФормы, ЭтаФорма);
	
	Если РезультатОткрытия <> Неопределено Тогда
		
		КонтекстФормыНастройкиУзлов = РезультатОткрытия;
		
		ОписаниеНастроекВыгрузкиДанных = РезультатОткрытия.ОписаниеКонтекста;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаОграниченийРегистрацииДанных(Команда)
	
	ИмяФормыНастройкиУзла = "ПланОбмена.[ИмяПланаОбмена].Форма.[ФормаНастройкиУзла]";
	ИмяФормыНастройкиУзла = СтрЗаменить(ИмяФормыНастройкиУзла, "[ИмяПланаОбмена]", Объект.ИмяПланаОбмена);
	ИмяФормыНастройкиУзла = СтрЗаменить(ИмяФормыНастройкиУзла, "[ФормаНастройкиУзла]", ФормаНастройкиУзла);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВерсияКорреспондента", ВерсияКонфигурацииКорреспондента);
	ПараметрыФормы.Вставить("НастройкаОтборовНаУзле", НастройкаОтборовНаУзле);
	
	РезультатОткрытия = ОткрытьФормуМодально(ИмяФормыНастройкиУзла, ПараметрыФормы, ЭтаФорма);
	
	Если РезультатОткрытия <> Неопределено Тогда
		
		Для Каждого НастройкаОтбора ИЗ НастройкаОтборовНаУзле Цикл
			
			НастройкаОтборовНаУзле[НастройкаОтбора.Ключ] = РезультатОткрытия[НастройкаОтбора.Ключ];
			
		КонецЦикла;
		
		// вызов сервера
		ПолучитьОписаниеОграниченийПередачиДанных(НастройкаОтборовНаУзле);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаОграниченийРегистрацииДанныхБазыКорреспондентаЧерезВебСервис(Команда)
	
	НастройкаОграниченийРегистрацииДанныхБазыКорреспондента("ВебСервис");
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаОграниченийРегистрацииДанныхБазыКорреспондентаЧерезВнешнееСоединение(Команда)
	
	НастройкаОграниченийРегистрацииДанныхБазыКорреспондента("ВнешнееСоединение");
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаЗначенийПоУмолчанию(Команда)
	
	ИмяФормыНастройкиУзла = "ПланОбмена.[ИмяПланаОбмена].Форма.[ФормаНастройкиЗначенийПоУмолчанию]";
	ИмяФормыНастройкиУзла = СтрЗаменить(ИмяФормыНастройкиУзла, "[ИмяПланаОбмена]", Объект.ИмяПланаОбмена);
	ИмяФормыНастройкиУзла = СтрЗаменить(ИмяФормыНастройкиУзла, "[ФормаНастройкиЗначенийПоУмолчанию]", ФормаНастройкиЗначенийПоУмолчанию);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВерсияКорреспондента", ВерсияКонфигурацииКорреспондента);
	ПараметрыФормы.Вставить("ЗначенияПоУмолчаниюНаУзле", ЗначенияПоУмолчаниюНаУзле);
	
	РезультатОткрытия = ОткрытьФормуМодально(ИмяФормыНастройкиУзла, ПараметрыФормы, ЭтаФорма);
	
	Если РезультатОткрытия <> Неопределено Тогда
		
		Для Каждого Настройка ИЗ ЗначенияПоУмолчаниюНаУзле Цикл
			
			ЗначенияПоУмолчаниюНаУзле[Настройка.Ключ] = РезультатОткрытия[Настройка.Ключ];
			
		КонецЦикла;
		
		// вызов сервера
		ПолучитьОписаниеЗначенийПоУмолчанию(ЗначенияПоУмолчаниюНаУзле);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаЗначенийПоУмолчаниюБазыКорреспондентаЧерезВебСервис(Команда)
	
	НастройкаЗначенийПоУмолчаниюБазыКорреспондента("ВебСервис");
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаЗначенийПоУмолчаниюБазыКорреспондентаЧерезВнешнееСоединение(Команда)
	
	НастройкаЗначенийПоУмолчаниюБазыКорреспондента("ВнешнееСоединение");
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьФайлНастроекОбменаДанными(Команда)
	
	Перем АдресВременногоХранилища;
	
	Отказ = Ложь;
	
	// вызов сервера
	ВыгрузитьНастройкиОбменаДляПриемника(Отказ, АдресВременногоХранилища);
	
	Если Отказ Тогда
		
		Предупреждение(НСтр("ru = 'При сохранении файла настроек синхронизации данных возникли ошибки.'"));
		
	Иначе
		
		#Если ВебКлиент Тогда
			
			ПолучитьФайл(АдресВременногоХранилища, ИмяФайлаНастроекДляПриемника, Истина);
			
			Объект.ИмяФайлаНастроекОбменаДанными = ИмяФайлаНастроекДляПриемника;
			
		#Иначе
			
			Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
			
			Диалог.Заголовок      = НСтр("ru = 'Укажите имя файла настроек синхронизации данных'");
			Диалог.Расширение     = "xml";
			Диалог.Фильтр         = "Файл настроек синхронизации данных(*.xml)|*.xml";
			Диалог.ПолноеИмяФайла = ИмяФайлаНастроекДляПриемника;
			
			Если Диалог.Выбрать() Тогда
				
				Объект.ИмяФайлаНастроекОбменаДанными = Диалог.ПолноеИмяФайла;
				
				ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
				
				УдалитьИзВременногоХранилища(АдресВременногоХранилища);
				
				// получаем файл
				ДвоичныеДанные.Записать(Объект.ИмяФайлаНастроекОбменаДанными);
				
			КонецЕсли;
			
		#КонецЕсли
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодключениеFILE(Команда)
	
	ПроверитьПодключение("FILE");
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодключениеFTP(Команда)
	
	ПроверитьПодключение("FTP");
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодключениеEMAIL(Команда)
	
	ПроверитьПодключение("EMAIL");
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодключениеCOM(Команда)
	
	ОчиститьСообщения();
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("COMАутентификацияОперационнойСистемы");
	СтруктураНастроек.Вставить("COMВариантРаботыИнформационнойБазы");
	СтруктураНастроек.Вставить("COMИмяИнформационнойБазыНаСервере1СПредприятия");
	СтруктураНастроек.Вставить("COMИмяПользователя");
	СтруктураНастроек.Вставить("COMИмяСервера1СПредприятия");
	СтруктураНастроек.Вставить("COMКаталогИнформационнойБазы");
	СтруктураНастроек.Вставить("COMПарольПользователя");
	
	ЗаполнитьЗначенияСвойств(СтруктураНастроек, Объект);
	
	Отказ = Ложь;
	ОшибкаПодключенияКомпоненты = Ложь;
	
	ОбменДаннымиВызовСервера.ВыполнитьПроверкуУстановкиВнешнегоСоединения(Отказ, СтруктураНастроек, ОшибкаПодключенияКомпоненты);
	
	Если Отказ Тогда
		
		Предупреждение(НСтр("ru = 'При установке подключения возникла ошибка(см. Журнал регистрации).'"));
		
		Если ОшибкаПодключенияКомпоненты И ИнформационнаяБазаФайловая Тогда
			
			Элементы.ГруппаComcntr.Видимость = Истина;
			
		КонецЕсли;
		
	Иначе
		Предупреждение(НСтр("ru = 'Подключение успешно установлено.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодключениеWS(Команда)
	
	Отказ = Ложь;
	
	ПроверитьПодключениеWSНаКлиенте(Отказ);
	
	Если Не Отказ Тогда
		
		Предупреждение(НСтр("ru = 'Подключение успешно установлено.'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсправитьОшибкиУстановкиВнешнегоСоединения(Команда)
	
	ЗакрытьФормуБезусловно = Истина;
	ОбщегоНазначенияКлиент.ЗарегистрироватьCOMСоединитель();
	
КонецПроцедуры

&НаКлиенте
Процедура КакОпределитьПараметрыПодключенияКВебСервису(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ИмяМакета", "КакОпределитьПараметрыПодключенияКВебСервису");
	ПараметрыФормы.Вставить("Заголовок", НСтр("ru = 'Как определить параметры подключения другой программе'"));
	
	ОткрытьФорму("Обработка.ПомощникСозданияОбменаДанными.Форма.ДополнительноеОписание", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КакОпределитьПараметрыПодключенияКСервису(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ИмяМакета", "КакОпределитьПараметрыПодключенияКСервису");
	ПараметрыФормы.Вставить("Заголовок", НСтр("ru = 'Как определить параметры подключения к приложению, расположенному в сервисе'"));
	
	ОткрытьФорму("Обработка.ПомощникСозданияОбменаДанными.Форма.ДополнительноеОписание", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КакОпределитьПараметрыПодключения(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ИмяМакета", "КакОпределитьПараметрыПодключения");
	ПараметрыФормы.Вставить("Заголовок", НСтр("ru = 'Как определить параметры подключения к другой программе'"));
	
	ОткрытьФорму("Обработка.ПомощникСозданияОбменаДанными.Форма.ДополнительноеОписание", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КакОпределитьПрефиксВторойИнформационнойБазы(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ИмяМакета", "КакОпределитьПрефиксВторойИнформационнойБазы");
	ПараметрыФормы.Вставить("Заголовок", НСтр("ru = 'Как определить префикс второй информационной базы'"));
	
	ОткрытьФорму("Обработка.ПомощникСозданияОбменаДанными.Форма.ДополнительноеОписание", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура КакСформироватьФайлСНастройкамиОбменаДанными(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ИмяМакета", "КакСформироватьФайлСНастройкамиОбменаДанными");
	ПараметрыФормы.Вставить("Заголовок", НСтр("ru = 'Как сформировать файл с настройками синхронизации данных'"));
	
	ОткрытьФорму("Обработка.ПомощникСозданияОбменаДанными.Форма.ДополнительноеОписание", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УзнатьПрефиксЭтойИнформационнойБазы(Команда)
	
	ОткрытьФорму("Обработка.ПомощникСозданияОбменаДанными.Форма.УзнатьПрефиксЭтойИнформационнойБазы", , ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПользовательскоеРасписание(Команда)
	
	Диалог = Новый ДиалогРасписанияРегламентногоЗадания(РасписаниеВыполненияОбменаДанными);
	
	Если Диалог.ОткрытьМодально() Тогда
		
		РасписаниеВыполненияОбменаДанными = Диалог.Расписание;
		
		ПредставлениеПользовательскогоОписания = Строка(РасписаниеВыполненияОбменаДанными);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодробноеОписание(Команда)
	
	ОбменДаннымиКлиент.ОткрытьПодробноеОписаниеСинхронизации(СсылкаНаПодробноеОписание);
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыДоступаВИнтернет(Команда)
	
	ОткрытьФорму("ОбщаяФорма.ПараметрыПроксиСервера");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте
Процедура ПредопределенноеРасписаниеОбменаДаннымиПриИзмененииЗначения()
	
	ИспользоватьПользовательскоеРасписание = (ПредопределенноеРасписаниеОбменаДанными = "ДругоеРасписание");
	
	Элементы.СтраницыПользовательскогоРасписания.ТекущаяСтраница = ?(ИспользоватьПользовательскоеРасписание,
						Элементы.СтраницаПользовательскогоРасписания,
						Элементы.ПустаяСтраницаПользовательскогоРасписания);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнятьОбменДаннымиАвтоматическиПриИзмененииЗначения()
	
	Элементы.СтраницыПредопределенногоРасписания.ТекущаяСтраница = ?(ВыполнятьОбменДаннымиАвтоматически,
						Элементы.СтраницаПредопределенногоРасписания,
						Элементы.НедоступнаяСтраницаПредопределенногоРасписания);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПорядковыйНомерПерехода(Итератор)
	
	ОчиститьСообщения();
	
	УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + Итератор);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПорядковыйНомерПерехода(Знач Значение)
	
	ЭтоПереходДалее = (Значение > ПорядковыйНомерПерехода);
	
	ПорядковыйНомерПерехода = Значение;
	
	Если ПорядковыйНомерПерехода < 1 Тогда
		
		ПорядковыйНомерПерехода = 1;
		
	КонецЕсли;
	
	ПорядковыйНомерПереходаПриИзменении(ЭтоПереходДалее);
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядковыйНомерПереходаПриИзменении(Знач ЭтоПереходДалее)
	
	// Выполняем обработчики событий перехода
	ВыполнитьОбработчикиСобытийПерехода(ЭтоПереходДалее);
	
	// Устанавливаем отображение страниц
	СтрокиПереходаТекущие = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода));
	
	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не определена страница для отображения.'");
	КонецЕсли;
	
	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];
	
	Элементы.ПанельОсновная.ТекущаяСтраница  = Элементы[СтрокаПереходаТекущая.ИмяОсновнойСтраницы];
	Элементы.ПанельНавигации.ТекущаяСтраница = Элементы[СтрокаПереходаТекущая.ИмяСтраницыНавигации];
	
	// Устанавливаем текущую кнопку по умолчанию
	КнопкаДалее = ПолучитьКнопкуФормыПоИмениКоманды(Элементы.ПанельНавигации.ТекущаяСтраница, "КомандаДалее");
	
	Если КнопкаДалее <> Неопределено Тогда
		
		КнопкаДалее.КнопкаПоУмолчанию = Истина;
		
	Иначе
		
		КнопкаГотово = ПолучитьКнопкуФормыПоИмениКоманды(Элементы.ПанельНавигации.ТекущаяСтраница, "КомандаГотово");
		
		Если КнопкаГотово <> Неопределено Тогда
			
			КнопкаГотово.КнопкаПоУмолчанию = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭтоПереходДалее И СтрокаПереходаТекущая.ДлительнаяОперация Тогда
		
		ПодключитьОбработчикОжидания("ВыполнитьОбработчикДлительнойОперации", 0.1, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбработчикиСобытийПерехода(Знач ЭтоПереходДалее)
	
	// Обработчики событий переходов
	Если ЭтоПереходДалее Тогда
		
		СтрокиПерехода = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода - 1));
		
		Если СтрокиПерехода.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		СтрокаПерехода = СтрокиПерехода[0];
		
		// обработчик ПриПереходеДалее
		Если Не ПустаяСтрока(СтрокаПерехода.ИмяОбработчикаПриПереходеДалее)
			И Не СтрокаПерехода.ДлительнаяОперация Тогда
			
			ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ)";
			ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПерехода.ИмяОбработчикаПриПереходеДалее);
			
			Отказ = Ложь;
			
			А = Вычислить(ИмяПроцедуры);
			
			Если Отказ Тогда
				
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
				
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		СтрокиПерехода = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода + 1));
		
		Если СтрокиПерехода.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		СтрокаПерехода = СтрокиПерехода[0];
		
		// обработчик ПриПереходеНазад
		Если Не ПустаяСтрока(СтрокаПерехода.ИмяОбработчикаПриПереходеНазад)
			И Не СтрокаПерехода.ДлительнаяОперация Тогда
			
			ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ)";
			ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПерехода.ИмяОбработчикаПриПереходеНазад);
			
			Отказ = Ложь;
			
			А = Вычислить(ИмяПроцедуры);
			
			Если Отказ Тогда
				
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
				
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокиПереходаТекущие = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода));
	
	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не определена страница для отображения.'");
	КонецЕсли;
	
	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];
	
	Если СтрокаПереходаТекущая.ДлительнаяОперация И Не ЭтоПереходДалее Тогда
		
		УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
		Возврат;
	КонецЕсли;
	
	// обработчик ПриОткрытии
	Если Не ПустаяСтрока(СтрокаПереходаТекущая.ИмяОбработчикаПриОткрытии) Тогда
		
		ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ, ПропуститьСтраницу, ЭтоПереходДалее)";
		ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПереходаТекущая.ИмяОбработчикаПриОткрытии);
		
		Отказ = Ложь;
		ПропуститьСтраницу = Ложь;
		
		А = Вычислить(ИмяПроцедуры);
		
		Если Отказ Тогда
			
			УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
			
			Возврат;
			
		ИначеЕсли ПропуститьСтраницу Тогда
			
			Если ЭтоПереходДалее Тогда
				
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
				
				Возврат;
				
			Иначе
				
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
				
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбработчикДлительнойОперации()
	
	СтрокиПереходаТекущие = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода));
	
	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не определена страница для отображения.'");
	КонецЕсли;
	
	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];
	
	// обработчик ОбработкаДлительнойОперации
	Если Не ПустаяСтрока(СтрокаПереходаТекущая.ИмяОбработчикаДлительнойОперации) Тогда
		
		ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ, ПерейтиДалее)";
		ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПереходаТекущая.ИмяОбработчикаДлительнойОперации);
		
		Отказ = Ложь;
		ПерейтиДалее = Истина;
		
		А = Вычислить(ИмяПроцедуры);
		
		Если Отказ Тогда
			
			УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
			
			Возврат;
			
		ИначеЕсли ПерейтиДалее Тогда
			
			УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
			
			Возврат;
			
		КонецЕсли;
		
	Иначе
		
		УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ТаблицаПереходовНоваяСтрока(ПорядковыйНомерПерехода,
									ИмяОсновнойСтраницы,
									ИмяСтраницыДекорации,
									ИмяСтраницыНавигации,
									ИмяОбработчикаПриПереходеДалее = "",
									ИмяОбработчикаПриПереходеНазад = "",
									ИмяОбработчикаПриОткрытии = "",
									ДлительнаяОперация = Ложь,
									ИмяОбработчикаДлительнойОперации = "")
	НоваяСтрока = ТаблицаПереходов.Добавить();
	
	НоваяСтрока.ПорядковыйНомерПерехода = ПорядковыйНомерПерехода;
	НоваяСтрока.ИмяОсновнойСтраницы     = ИмяОсновнойСтраницы;
	НоваяСтрока.ИмяСтраницыДекорации    = ИмяСтраницыДекорации;
	НоваяСтрока.ИмяСтраницыНавигации    = ИмяСтраницыНавигации;
	
	НоваяСтрока.ИмяОбработчикаПриПереходеДалее = ИмяОбработчикаПриПереходеДалее;
	НоваяСтрока.ИмяОбработчикаПриПереходеНазад = ИмяОбработчикаПриПереходеНазад;
	НоваяСтрока.ИмяОбработчикаПриОткрытии      = ИмяОбработчикаПриОткрытии;
	
	НоваяСтрока.ДлительнаяОперация = ДлительнаяОперация;
	НоваяСтрока.ИмяОбработчикаДлительнойОперации = ИмяОбработчикаДлительнойОперации;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьКнопкуФормыПоИмениКоманды(ЭлементФормы, ИмяКоманды)
	
	Для Каждого Элемент Из ЭлементФормы.ПодчиненныеЭлементы Цикл
		
		Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
			
			//Возврат ПолучитьКнопкуФормыПоИмениКоманды(Элемент, ИмяКоманды);
			ЭлементФормыПоИмениКоманды = ПолучитьКнопкуФормыПоИмениКоманды(Элемент, ИмяКоманды);
			
			Если ЭлементФормыПоИмениКоманды <> Неопределено Тогда
				
				Возврат ЭлементФормыПоИмениКоманды;
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Элемент) = Тип("КнопкаФормы")
			И Найти(Элемент.ИмяКоманды, ИмяКоманды) > 0 Тогда
			
			Возврат Элемент;
			
		Иначе
			
			Продолжить;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Процедура ОбновитьНадписиЗаголовковИнформационныхБаз()
	
	Если ВариантРаботыМастера = "ПродолжитьНастройкуОбменаДанными" Тогда
		
		Если НастройкиЗачитаны Тогда
			
			ИмяПервойБазы = СинонимПланаОбмена;
			ИмяВторойБазы = Объект.НаименованиеЭтойБазы;
			
		Иначе
			
			ИмяПервойБазы = СинонимПланаОбмена;
			ИмяВторойБазы = Объект.НаименованиеЭтойБазы;
			
		КонецЕсли;
		
		Если Объект.ЭтоНастройкаРаспределеннойИнформационнойБазы Тогда
			
			ИмяПервойБазы = ИмяПервойБазы + НСтр("ru = ' (Главный узел)'");
			ИмяВторойБазы = ИмяВторойБазы + НСтр("ru = ' (Подчиненный узел)'");
			
		КонецЕсли;
		
	Иначе
		
		Если НастройкиЗачитаны Тогда
			
			ИмяПервойБазы = ИмяЭтойБазы;
			ИмяВторойБазы = СинонимПланаОбмена;
			
		Иначе
			
			ИмяПервойБазы = Объект.НаименованиеЭтойБазы;
			ИмяВторойБазы = СинонимПланаОбмена;
			
		КонецЕсли;
		
		Если Объект.ЭтоНастройкаРаспределеннойИнформационнойБазы Тогда
			
			ИмяПервойБазы = ИмяПервойБазы + НСтр("ru = ' (Главный узел)'");
			ИмяВторойБазы = НСтр("ru = 'Подчиненный узел'");
			
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ДекорацияИмяПервойБазы.Заголовок = ИмяПервойБазы;
	Элементы.ДекорацияИмяВторойБазы.Заголовок = ИмяВторойБазы;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики ожидания

&НаКлиенте
Процедура ОбработчикОжиданияДлительнойОперации()
	
	СтрокаСообщенияОбОшибке = "";
	
	СостояниеОперации = ОбменДаннымиВызовСервера.СостояниеДлительнойОперации(ИдентификаторДлительнойОперации,
																		Объект.WSURLВебСервиса,
																		Объект.WSИмяПользователя,
																		Объект.WSПароль,
																		СтрокаСообщенияОбОшибке);
	
	Если СостояниеОперации = "Active" Тогда
		
		ПодключитьОбработчикОжидания("ОбработчикОжиданияДлительнойОперации", 5, Истина);
		
	ИначеЕсли СостояниеОперации = "Completed" Тогда
		
		ДлительнаяОперация = Ложь;
		ДлительнаяОперацияЗавершена = Истина;
		
		КомандаДалее(Неопределено);
		
	Иначе // Failed, Canceled
		
		ЗаписатьОшибкуВЖурналРегистрации(СтрокаСообщенияОбОшибке, СобытиеЖурналаРегистрацииСозданиеОбменаДанными);
		
		ДлительнаяОперация = Ложь;
		
		КомандаНазад(Неопределено);
		
		ТекстВопроса = НСтр("ru = 'При создании синхронизации данных возникли ошибки.
							|Перейти в журнал регистрации?'");
		
		ПредложитьПерейтиВЖурналРегистрации(ТекстВопроса, СобытиеЖурналаРегистрацииСозданиеОбменаДанными);
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Прикладные служебные процедуры и функции

&НаСервере
Процедура НастроитьНовыйОбменДаннымиНаСервере(Отказ, НастройкаОтборовНаУзле, ЗначенияПоУмолчаниюНаУзле)
	
	Объект.ВариантРаботыМастера = ВариантРаботыМастера;
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	ОбработкаОбъект.ВыполнитьДействияПоНастройкеНовогоОбменаДанными(Отказ, НастройкаОтборовНаУзле, ЗначенияПоУмолчаниюНаУзле);
	
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
КонецПроцедуры

&НаСервере
Процедура НастроитьНовыйОбменДаннымиНаСервереЧерезВнешнееСоединение(Отказ, НастройкаОтборовНаУзлеБазыКорреспондента, ЗначенияПоУмолчаниюНаУзлеБазыКорреспондента)
	
	Объект.ВариантРаботыМастера = ВариантРаботыМастера;
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	ОбработкаОбъект.ВыполнитьДействияПоНастройкеНовогоОбменаДаннымиЧерезВнешнееСоединение(Отказ, НастройкаОтборовНаУзле, ЗначенияПоУмолчаниюНаУзле, НастройкаОтборовНаУзлеБазыКорреспондента, ЗначенияПоУмолчаниюНаУзлеБазыКорреспондента);
	
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
	Элементы.ВыполнитьИнтерактивныйОбменДаннымиСейчас.Заголовок = СтрЗаменить(Элементы.ВыполнитьИнтерактивныйОбменДаннымиСейчас.Заголовок, "%Программа%", СинонимПланаОбмена);
	
КонецПроцедуры

&НаСервере
Процедура НастроитьНовыйОбменДаннымиНаСервереЧерезВебСервис(Отказ)
	
	Объект.ВариантРаботыМастера = ВариантРаботыМастера;
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	ОбработкаОбъект.ВыполнитьДействияПоНастройкеНовогоОбменаДаннымиЧерезВебСервисВДвухБазах(Отказ,
																		КонтекстФормыНастройкиУзлов,
																		ДлительнаяОперация,
																		ИдентификаторДлительнойОперации);
	
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНастройкиОбменаДанными(Отказ)
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	ОбработкаОбъект.ОбновитьНастройкиОбменаДанными(Отказ,
												ЗначенияПоУмолчаниюНаУзле,
												ЗначенияПоУмолчаниюНаУзлеБазыКорреспондента,
												ДлительнаяОперация,
												ИдентификаторДлительнойОперации);
	
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьНаСервере()
	
	Элементы.ПояснениеВыбораКаталогаОбменаИнформациейНаСервере.Видимость = Не ИнформационнаяБазаФайловая;
	
	Элементы.ПрефиксИнформационнойБазыИсточника.Видимость = Не Объект.ПрефиксИнформационнойБазыИсточникаУстановлен;
	Элементы.ПрефиксИнформационнойБазыИсточника1.Видимость = Не Объект.ПрефиксИнформационнойБазыИсточникаУстановлен;
	Элементы.ПрефиксИнформационнойБазыПриемника.Видимость = Ложь;
	
	Элементы.ПрефиксИнформационнойБазыИсточникаОбменЧерезВебСервис.Видимость = Не Объект.ПрефиксИнформационнойБазыИсточникаУстановлен;
	Элементы.ПрефиксИнформационнойБазыИсточникаОбменЧерезВебСервис.ТолькоПросмотр = Объект.ПрефиксИнформационнойБазыИсточникаУстановлен;
	
	Элементы.ПрефиксИнформационнойБазыИсточникаОбменССервисом.ТолькоПросмотр = Объект.ПрефиксИнформационнойБазыИсточникаУстановлен;
	Элементы.ПрефиксИнформационнойБазыПриемникаОбменССервисом.ТолькоПросмотр = Истина;
	
	Элементы.СтраницыОтображенияФинальногоДействия.ТекущаяСтраница = ?(Объект.ЭтоНастройкаРаспределеннойИнформационнойБазы,
					Элементы.СтраницаВыполнитьСозданиеНачальногоОбразаПодчиненногоУзла,
					Элементы.СтраницаВыполнитьВыгрузкуДанныхДляСопоставления);
	//
	Если Объект.ЭтоНастройкаРаспределеннойИнформационнойБазы Тогда
		
		Элементы.ВариантРаботыМастера.Видимость = Ложь;
		
		// для узла РИБ файл настроек не формируем; настройки для второй базы передаем через константу
		Элементы.ГруппаФайлаНастроекОбмена1.Видимость = Ложь;
		
		Элементы.КакОпределитьПрефиксВторойИнформационнойБазы.Видимость = Ложь;
		Элементы.УзнатьПрефиксЭтойИнформационнойБазы.Видимость = Ложь;
		
		Элементы.ЗаголовокСтраницыМастера1.Заголовок = НСтр("ru = 'Создание начального образа подчиненного узла РИБ'");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПредставлениеРезультатаТранспортСообщений()
	
	Если НастройкаОбменаССервисом Тогда
		
		Результат = НСтр("ru = 'Параметры подключения к приложению в сервисе:
		|%1'");
		Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Результат, ПолучитьОписаниеНастроекТранспортаОбмена());
		
	Иначе
		
		Результат = Строка(Объект.ВидТранспортаСообщенийОбмена)
			+ НСтр("ru = ', параметры:'") + Символы.ПС
			+ ПолучитьОписаниеНастроекТранспортаОбмена()
		;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Функция ПредставлениеРезультатаОтборыНаУзле()
	
	Возврат ?(ПустаяСтрока(ОписаниеОграниченийПередачиДанных), "", ОписаниеОграниченийПередачиДанных + Символы.ПС + Символы.ПС);
	
КонецФункции

&НаКлиенте
Функция ПредставлениеРезультатаОтборыНаУзлеБазыКорреспондента()
	
	Возврат ?(ПустаяСтрока(ОписаниеОграниченийПередачиДанныхБазыКорреспондента), "", ОписаниеОграниченийПередачиДанныхБазыКорреспондента + Символы.ПС + Символы.ПС);
	
КонецФункции

&НаКлиенте
Функция ПредставлениеРезультатаЗначенияПоУмолчаниюНаУзле()
	
	Возврат ?(ПустаяСтрока(ОписаниеЗначенийПоУмолчанию), "", ОписаниеЗначенийПоУмолчанию + Символы.ПС + Символы.ПС);
	
КонецФункции

&НаКлиенте
Функция ПредставлениеРезультатаЗначенияПоУмолчаниюНаУзлеБазыКорреспондента()
	
	Возврат ?(ПустаяСтрока(ОписаниеЗначенийПоУмолчаниюБазыКорреспондента), "", ОписаниеЗначенийПоУмолчаниюБазыКорреспондента + Символы.ПС + Символы.ПС);
	
КонецФункции

&НаСервере
Процедура ВыгрузитьНастройкиОбменаДляПриемника(Отказ, АдресВременногоХранилища)
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	ОбработкаОбъект.ВыполнитьВыгрузкуПараметровМастераВоВременноеХранилище(Отказ, АдресВременногоХранилища);
	
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьПараметрыМастера(Отказ, АдресВременногоХранилища)
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	ОбработкаОбъект.ВыполнитьЗагрузкуПараметровМастераИзВременногоХранилища(Отказ, АдресВременногоХранилища);
	
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
	Элементы.НастройкиТранспортаFILE.Доступность  = Объект.ИспользоватьПараметрыТранспортаFILE;
	Элементы.НастройкиТранспортаFTP.Доступность   = Объект.ИспользоватьПараметрыТранспортаFTP;
	Элементы.НастройкиТранспортаEMAIL.Доступность = Объект.ИспользоватьПараметрыТранспортаEMAIL;
	
	Если Не Отказ Тогда
		НастройкиЗачитаны = Истина;
		ОбновитьНадписиЗаголовковИнформационныхБаз();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьОписаниеОграниченийПередачиДанных(НастройкаОтборовНаУзле)
	
	ОписаниеОграниченийПередачиДанных = ОбменДаннымиСервер.ОписаниеОграниченийПередачиДанных(Объект.ИмяПланаОбмена, НастройкаОтборовНаУзле, ВерсияКонфигурацииКорреспондента);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьОписаниеОграниченийПередачиДанныхБазыКорреспондента(НастройкаОтборовНаУзлеБазыКорреспондента)
	
	ОписаниеОграниченийПередачиДанныхБазыКорреспондента = ОбменДаннымиСервер.ОписаниеОграниченийПередачиДанныхБазыКорреспондента(Объект.ИмяПланаОбмена, НастройкаОтборовНаУзлеБазыКорреспондента, ВерсияКонфигурацииКорреспондента);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьОписаниеЗначенийПоУмолчанию(ЗначенияПоУмолчаниюНаУзле)
	
	ОписаниеЗначенийПоУмолчанию = ОбменДаннымиСервер.ОписаниеЗначенийПоУмолчанию(Объект.ИмяПланаОбмена, ЗначенияПоУмолчаниюНаУзле, ВерсияКонфигурацииКорреспондента);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьОписаниеЗначенийПоУмолчаниюБазыКорреспондента(ЗначенияПоУмолчаниюНаУзлеБазыКорреспондента)
	
	ОписаниеЗначенийПоУмолчаниюБазыКорреспондента = ОбменДаннымиСервер.ОписаниеЗначенийПоУмолчаниюБазыКорреспондента(Объект.ИмяПланаОбмена, ЗначенияПоУмолчаниюНаУзлеБазыКорреспондента, ВерсияКонфигурацииКорреспондента);
	
КонецПроцедуры

&НаКлиенте
Процедура ИнициализацияОбменаДаннымиНаКлиенте(Отказ)
	
	Состояние(НСтр("ru = 'Выполняется отправка данных...'"));
	
	// выполняем выгрузку данных
	ОбменДаннымиВызовСервера.ВыполнитьОбменДаннымиДляУзлаИнформационнойБазы(Отказ, Объект.УзелИнформационнойБазы, Ложь, Истина, Объект.ВидТранспортаСообщенийОбмена);
	
	Состояние(НСтр("ru = 'Отправка данных завершена'"));
	
	Если Отказ Тогда
		
		Предупреждение(НСтр("ru = 'Во время отправки данных возникли ошибки(см. журнал регистрации).'"));
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьОписаниеНастроекТранспортаОбмена()
	
	COMВариантРаботыИнформационнойБазы = 0;
	COMАутентификацияОперационнойСистемы = Ложь;
	
	// возвращаемое значение функции
	Результат = "";
	
	ПредставленияНастроек = РегистрыСведений.НастройкиТранспортаОбмена.ПредставленияНастроекТранспорта(Объект.ВидТранспортаСообщенийОбмена);
	
	Для Каждого Элемент ИЗ ПредставленияНастроек Цикл
		
		ЗначениеНастройки = Объект[Элемент.Ключ];
		
		Если РежимРаботыМастера = "ОбменЧерезВнешнееСоединение" Тогда
			
			Если Элемент.Ключ = "COMВариантРаботыИнформационнойБазы" Тогда
				
				ЗначениеНастройки = ?(Объект[Элемент.Ключ] = 0, НСтр("ru = 'Файловый'"), НСтр("ru = 'Клиент-серверный'"));
				
				COMВариантРаботыИнформационнойБазы = Объект[Элемент.Ключ];
				
			КонецЕсли;
			
			Если Элемент.Ключ = "COMАутентификацияОперационнойСистемы" Тогда
				
				COMАутентификацияОперационнойСистемы = Объект[Элемент.Ключ];
				
			КонецЕсли;
			
			Если COMВариантРаботыИнформационнойБазы = 0 Тогда
				
				Если    Элемент.Ключ = "COMИмяИнформационнойБазыНаСервере1СПредприятия"
					ИЛИ Элемент.Ключ = "COMИмяСервера1СПредприятия" Тогда
					Продолжить;
				КонецЕсли;
				
			Иначе
				
				Если Элемент.Ключ = "COMКаталогИнформационнойБазы" Тогда
					Продолжить;
				КонецЕсли;
				
			КонецЕсли;
			
			Если COMАутентификацияОперационнойСистемы Тогда
				
				Если    Элемент.Ключ = "COMИмяПользователя"
					ИЛИ Элемент.Ключ = "COMПарольПользователя" Тогда
					Продолжить;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если Найти(ВРег(Элемент.Значение), "ПАРОЛЬ") <> 0 Тогда
			
			Продолжить; // Значения паролей не выводим
			
		ИначеЕсли  Не ТипЗначения(ЗначениеНастройки, "Число")
				 И Не ТипЗначения(ЗначениеНастройки, "Булево")
				 И Не ЗначениеЗаполнено(ЗначениеНастройки) Тогда
			
			// если значение настройки не задано, то выводим значение "<пусто>"
			ЗначениеНастройки = НСтр("ru = '<пусто>'");
			
		КонецЕсли;
		
		СтрокаНастройки = "[Представление]: [Значение]";
		СтрокаНастройки = СтрЗаменить(СтрокаНастройки, "[Представление]", Элемент.Значение);
		СтрокаНастройки = СтрЗаменить(СтрокаНастройки, "[Значение]", ЗначениеНастройки);
		
		Результат = Результат + СтрокаНастройки + Символы.ПС;
		
	КонецЦикла;
	
	Если ПустаяСтрока(Результат) Тогда
		
		Результат = НСтр("ru = 'Настройки подключения не заданы.'");
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ТипЗначения(Значение, ИмяТипа)
	
	Возврат ТипЗнч(Значение) = Тип(ИмяТипа);
	
КонецФункции

&НаКлиенте
Процедура ПроверитьПодключение(ВидТранспорта)
	
	Отказ = Ложь;
	
	ПроверитьПодключениеНаСервере(Отказ, ВидТранспорта);
	
	Если Не Отказ Тогда
		
		ТекстПредупреждения = НСтр("ru = 'Подключение успешно установлено.'");
		Предупреждение(ТекстПредупреждения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьПодключениеНаСервере(Отказ, ВидТранспорта)
	
	Если ТипЗнч(ВидТранспорта) = Тип("Строка") Тогда
		
		ВидТранспорта = Перечисления.ВидыТранспортаСообщенийОбмена[ВидТранспорта];
		
	КонецЕсли;
	
	ОбменДаннымиСервер.ПроверитьПодключениеОбработкиТранспортаСообщенийОбмена(Отказ, Объект, ВидТранспорта);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьПодключениеWSНаСервере(Отказ, РасширеннаяПроверка, ПредлагатьПерейтиВЖурналРегистрации)
	
	ПараметрыПодключения = ОбменДаннымиСервер.СтруктураПараметровWS();
	
	ЗаполнитьЗначенияСвойств(ПараметрыПодключения, Объект);
	
	WSПрокси = ОбменДаннымиСервер.ПолучитьWSПрокси(ПараметрыПодключения);
	
	Если WSПрокси = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ВерсииКорреспондента = ОбменДаннымиПовтИсп.ВерсииКорреспондента(ПараметрыПодключения);
	
	Объект.ВерсияКорреспондента_2_0_1_6 = (ВерсииКорреспондента.Найти("2.0.1.6") <> Неопределено);
	Объект.ВерсияКорреспондента_2_1_1_7 = (ВерсииКорреспондента.Найти("2.1.1.7") <> Неопределено);
	
	Если Объект.ВерсияКорреспондента_2_1_1_7 Тогда
		
		WSПрокси = ОбменДаннымиСервер.ПолучитьWSПрокси_2_1_1_7(ПараметрыПодключения);
		
		Если WSПрокси = Неопределено Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
	ИначеЕсли Объект.ВерсияКорреспондента_2_0_1_6 Тогда
		
		WSПрокси = ОбменДаннымиСервер.ПолучитьWSПрокси_2_0_1_6(ПараметрыПодключения);
		
		Если WSПрокси = Неопределено Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
		
	Если РасширеннаяПроверка Тогда
		
		// Получаем параметры второй информационной базы
		ПредлагатьПерейтиВЖурналРегистрации = Ложь;
		
		Если Объект.ВерсияКорреспондента_2_1_1_7 Тогда
			
			ПараметрыПриемника = СериализаторXDTO.ПрочитатьXDTO(WSПрокси.GetIBParameters(Объект.ИмяПланаОбмена, "", ""));
			
		ИначеЕсли Объект.ВерсияКорреспондента_2_0_1_6 Тогда
			
			ПараметрыПриемника = СериализаторXDTO.ПрочитатьXDTO(WSПрокси.GetIBParameters(Объект.ИмяПланаОбмена, "", ""));
			
		Иначе
			
			ПараметрыПриемника = ЗначениеИзСтрокиВнутр(WSПрокси.GetIBParameters(Объект.ИмяПланаОбмена, "", ""));
			
		КонецЕсли;
		
		// {Обработчик: ПриПодключенииККорреспонденту} Начало
		ВерсияКонфигурацииКорреспондента = Неопределено;
		ПараметрыПриемника.Свойство("ВерсияКонфигурации", ВерсияКонфигурацииКорреспондента);
		
		ПриПодключенииККорреспонденту(Отказ, ВерсияКонфигурацииКорреспондента);
		
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		// {Обработчик: ПриПодключенииККорреспонденту} Окончание
		
		Если Не ПараметрыПриемника.ПланОбменаСуществует Тогда
			
			Сообщение = НСтр("ru = 'Другая программа не предназначена для синхронизации с текущей.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Сообщение,,,, Отказ);
			Возврат;
			
		КонецЕсли;
		
		Объект.КодУзлаКорреспондента = ПараметрыПриемника.КодЭтогоУзла;
		
		Объект.ПрефиксИнформационнойБазыПриемника = ПараметрыПриемника.ПрефиксИнформационнойБазы;
		Объект.ПрефиксИнформационнойБазыПриемникаУстановлен = ЗначениеЗаполнено(Объект.ПрефиксИнформационнойБазыПриемника);
		
		Если Не Объект.ПрефиксИнформационнойБазыПриемникаУстановлен Тогда
			Объект.ПрефиксИнформационнойБазыПриемника = ПараметрыПриемника.ПрефиксИнформационнойБазыПоУмолчанию;
		КонецЕсли;
		
		Элементы.ПрефиксИнформационнойБазыПриемникаОбменЧерезВебСервис.Видимость = Не Объект.ПрефиксИнформационнойБазыПриемникаУстановлен;
		Элементы.ПрефиксИнформационнойБазыПриемникаОбменЧерезВебСервис.ТолькоПросмотр = Объект.ПрефиксИнформационнойБазыПриемникаУстановлен;
		
		// Проверка на существование обмена с базой-корреспондентом
		ПроверитьНаличиеСуществующегоОбменаДаннымиСВторойБазой(Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		Объект.НаименованиеВторойБазы = ПараметрыПриемника.НаименованиеИнформационнойБазы;
		ЗаданоНаименованиеВторойБазы = Не ПустаяСтрока(Объект.НаименованиеВторойБазы);
		
		Элементы.НаименованиеВторойБазы1.ТолькоПросмотр = ЗаданоНаименованиеВторойБазы;
		
		Если Не ЗаданоНаименованиеВторойБазы Тогда
			
			Объект.НаименованиеВторойБазы = ПараметрыПриемника.НаименованиеИнформационнойБазыПоУмолчанию;
			
		КонецЕсли;
		
		ФормаНастройкиУзла = "";
		ФормаНастройкиУзлаБазыКорреспондента = "";
		ФормаНастройкиЗначенийПоУмолчанию = "";
		ФормаНастройкиЗначенийПоУмолчаниюБазыКорреспондента = "";
		ФормаНастройкиУзлов = "";
		
		НастройкаОтборовНаУзле    = ОбменДаннымиСервер.НастройкаОтборовНаУзле(Объект.ИмяПланаОбмена, ВерсияКонфигурацииКорреспондента, ФормаНастройкиУзла);
		ЗначенияПоУмолчаниюНаУзле = ОбменДаннымиСервер.ЗначенияПоУмолчаниюНаУзле(Объект.ИмяПланаОбмена, ВерсияКонфигурацииКорреспондента, ФормаНастройкиЗначенийПоУмолчанию);
		
		ОбменДаннымиСервер.ОбщиеДанныеУзлов(Объект.ИмяПланаОбмена, ВерсияКонфигурацииКорреспондента, ФормаНастройкиУзлов);
		
		ЗначенияПоУмолчаниюНаУзлеБазыКорреспондента = ОбменДаннымиСервер.ЗначенияПоУмолчаниюНаУзлеБазыКорреспондента(Объект.ИмяПланаОбмена, ВерсияКонфигурацииКорреспондента, ФормаНастройкиЗначенийПоУмолчаниюБазыКорреспондента);
		
		ПредусмотреныЗначенияПоУмолчаниюНаУзлеБазыКорреспондента = ЗначенияПоУмолчаниюНаУзлеБазыКорреспондента.Количество() > 0;
		
		Элементы.РамкаГруппыЗначенийПоУмолчанию4.Видимость                  = ПредусмотреныЗначенияПоУмолчаниюНаУзлеБазыКорреспондента;
		Элементы.РамкаГруппыЗначенийПоУмолчаниюБазыКорреспондента.Видимость = ПредусмотреныЗначенияПоУмолчаниюНаУзлеБазыКорреспондента;
		
		ОписаниеЗначенийПоУмолчаниюБазыКорреспондента = ОбменДаннымиСервер.ОписаниеЗначенийПоУмолчаниюБазыКорреспондента(Объект.ИмяПланаОбмена, ЗначенияПоУмолчаниюНаУзлеБазыКорреспондента, ВерсияКонфигурацииКорреспондента);
		
		НастройкиПараметровУчетаКорреспондентаПоясняющаяНадпись = ОбменДаннымиСервер.ПояснениеДляНастройкиПараметровУчетаБазыКорреспондента(Объект.ИмяПланаОбмена, ВерсияКонфигурацииКорреспондента);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодключениеWSНаКлиенте(Отказ, РасширеннаяПроверка = Ложь)
	
	Если ПустаяСтрока(Объект.WSURLВебСервиса) Тогда
		
		НСтрока = НСтр("ru = 'Укажите адрес приложения в Интернете.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтрока,, "Объект.WSURLВебСервиса",, Отказ);
		
	ИначеЕсли ПустаяСтрока(Объект.WSИмяПользователя) Тогда
		
		НСтрока = НСтр("ru = 'Укажите имя пользователя.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтрока,, "Объект.WSИмяПользователя",, Отказ);
		
	ИначеЕсли ПустаяСтрока(Объект.WSПароль) Тогда
		
		НСтрока = НСтр("ru = 'Укажите пароль пользователя.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтрока,, "Объект.WSПароль",, Отказ);
		
	Иначе
		
		Попытка
			ОбменДаннымиКлиентСервер.ПроверитьНедопустимыеСимволыВИмениПользователяWSПрокси(Объект.WSИмяПользователя);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),, "Объект.WSИмяПользователя",, Отказ);
			Возврат;
		КонецПопытки;
		
		ПредлагатьПерейтиВЖурналРегистрации = Истина;
		
		ПроверитьПодключениеWSНаСервере(Отказ, РасширеннаяПроверка, ПредлагатьПерейтиВЖурналРегистрации);
		
		Если Отказ И ПредлагатьПерейтиВЖурналРегистрации Тогда
			
			ТекстВопроса = НСтр("ru = 'Ошибка установки подключения.
				|Перейти в журнал регистрации?'");
			
			ПредложитьПерейтиВЖурналРегистрации(ТекстВопроса, СобытиеЖурналаРегистрацииУстановкаПодключенияКWebСервису);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПредложитьПерейтиВЖурналРегистрации(ТекстВопроса, Знач Событие)
	
	Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Нет);
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		Отбор = Новый Структура("СобытиеЖурналаРегистрации", Событие);
		
		ОткрытьФорму("Обработка.ЖурналРегистрации.Форма", Отбор, ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуПереходов()
	
	Если ВариантРаботыМастера = "НастроитьНовыйОбменДанными" Тогда
		
		Если РежимРаботыМастера = "ОбменЧерезВнешнееСоединение" Тогда
			
			ТаблицаПереходовНастройкиОбменаЧерезВнешнееСоединение();
			
		ИначеЕсли РежимРаботыМастера = "ОбменЧерезОбычныеКаналыСвязи" Тогда
			
			ТаблицаПереходовПервогоЭтапаНастройкиОбмена();
			
		ИначеЕсли РежимРаботыМастера = "ОбменЧерезВебСервис" Тогда
			
			Если НастройкаОбменаССервисом Тогда
				
				ТаблицаПереходовРасширеннойНастройкиОбменаССервисом();
				
			Иначе
				
				ТаблицаПереходовНастройкиОбменаЧерезВебСервис();
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе // "ПродолжитьНастройкуОбменаДанными"
		
		ТаблицаПереходовВторогоЭтапаНастройкиОбмена();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантРаботыИнформационнойБазыПриИзменении()
	
	ТекущаяСтраница = ?(Объект.COMВариантРаботыИнформационнойБазы = 0, Элементы.СтраницаВариантРаботыФайловый, Элементы.СтраницаВариантРаботыКлиентСерверный);
	
	Элементы.ВариантыРаботыИнформационнойБазы.ТекущаяСтраница = ТекущаяСтраница;
	
КонецПроцедуры

&НаКлиенте
Процедура АутентификацияОперационнойСистемыПриИзменении()
	
	Объект.COMАутентификацияОперационнойСистемы = (ТипАутентификации = 1);
	Элементы.COMИмяПользователя.Доступность    = Не Объект.COMАутентификацияОперационнойСистемы;
	Элементы.COMПарольПользователя.Доступность = Не Объект.COMАутентификацияОперационнойСистемы;
	
КонецПроцедуры

&НаСервере
Процедура ВариантРаботыМастераПриИзмененииНаСервере()
	
	Элементы.СтраницыВыбораФайлаСНастройкамиОбмена.ТекущаяСтраница = ?(ВариантРаботыМастера = "ПродолжитьНастройкуОбменаДанными"
																		И Не Объект.ЭтоНастройкаРаспределеннойИнформационнойБазы,
																		Элементы.СтраницаВыбораФайлаСНастройкамиОбмена,
																		Элементы.СтраницаВыбораФайлаСНастройкамиОбменаПустая);
	//
	
	Если ВариантРаботыМастера = "ПродолжитьНастройкуОбменаДанными" Тогда
		
		РежимРаботыМастера = "ОбменЧерезОбычныеКаналыСвязи";
		
	Иначе
		
		Если НастройкаОбменаССервисом Тогда
			
			РежимРаботыМастера = "ОбменЧерезВебСервис";
			
		ИначеЕсли ИспользоватьТранспортСообщенийОбменаCOM Тогда
			
			РежимРаботыМастера = "ОбменЧерезВнешнееСоединение";
			
		Иначе
			
			РежимРаботыМастера = "ОбменЧерезОбычныеКаналыСвязи";
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьТаблицуПереходов();
	ОбновитьНадписиЗаголовковИнформационныхБаз();
	
КонецПроцедуры

&НаСервере
Процедура РежимРаботыМастераПриИзмененииНаСервере()
	
	СтраницыКартинок = Новый Структура;
	СтраницыКартинок.Вставить("ОбменЧерезВнешнееСоединение",  Элементы.КартинкаДляОбменаЧерезВнешнееСоединение);
	СтраницыКартинок.Вставить("ОбменЧерезВебСервис",          Элементы.КартинкаДляОбменаЧерезВебСервис);
	СтраницыКартинок.Вставить("ОбменЧерезОбычныеКаналыСвязи", Элементы.КартинкаДляОбменаЧерезОбычныеКаналыСвязи);
	
	Элементы.КартинкиВыбораРежимаРаботыПомощника.ТекущаяСтраница = СтраницыКартинок[РежимРаботыМастера];
	
	СтраницыПараметровТранспорта = Новый Структура;
	СтраницыПараметровТранспорта.Вставить("ОбменЧерезВнешнееСоединение",  Элементы.СтраницаПараметровТранспортаCOM);
	СтраницыПараметровТранспорта.Вставить("ОбменЧерезОбычныеКаналыСвязи", Элементы.СтраницаПараметровТранспорта);
	СтраницыПараметровТранспорта.Вставить("ОбменЧерезВебСервис",          Элементы.СтраницаПараметровТранспортаWS);
	
	ВидыТранспортаСообщенийОбмена = Новый Структура;
	ВидыТранспортаСообщенийОбмена.Вставить("ОбменЧерезВнешнееСоединение",  Перечисления.ВидыТранспортаСообщенийОбмена.COM);
	ВидыТранспортаСообщенийОбмена.Вставить("ОбменЧерезОбычныеКаналыСвязи", Перечисления.ВидыТранспортаСообщенийОбмена.FILE);
	ВидыТранспортаСообщенийОбмена.Вставить("ОбменЧерезВебСервис",          Перечисления.ВидыТранспортаСообщенийОбмена.WS);
	
	Элементы.СтраницыПараметровТранспорта.ТекущаяСтраница = СтраницыПараметровТранспорта[РежимРаботыМастера];
	
	Объект.ВидТранспортаСообщенийОбмена = ВидыТранспортаСообщенийОбмена[РежимРаботыМастера];
	
	ЗаполнитьТаблицуПереходов();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьФайлНастроекОбмена(Интерактивно)
	
	Перем ВыбранноеИмяФайла;
	Перем АдресВременногоХранилища;
	
	ИмяФайлаПоУмолчанию = ?(ПустаяСтрока(Объект.ИмяФайлаНастроекОбменаДаннымиДляЗагрузки), ИмяФайлаНастроекДляПриемника, Объект.ИмяФайлаНастроекОбменаДаннымиДляЗагрузки);
	
	Если Интерактивно Тогда
		
		Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		
		Диалог.Заголовок      = НСтр("ru = 'Укажите имя файла настроек синхронизации данных'");
		Диалог.ПолноеИмяФайла = ИмяФайлаПоУмолчанию;
		Диалог.МножественныйВыбор          = Ложь;
		Диалог.ПредварительныйПросмотр     = Ложь;
		Диалог.ПроверятьСуществованиеФайла = Истина;
		Диалог.Фильтр         = "Файл настроек синхронизации данных(*.xml)|*.xml";
		
		Если Диалог.Выбрать() Тогда
			
			ВыбранноеИмяФайла = Диалог.ПолноеИмяФайла;
			ДвоичныеДанные = Новый ДвоичныеДанные(ВыбранноеИмяФайла);
			АдресВременногоХранилища = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
			ФайлВыбран = Истина;
			
		Иначе
			
			ФайлВыбран = Ложь;
			
		КонецЕсли;
		
	Иначе
		
		ФайлВыбран = ПоместитьФайл(АдресВременногоХранилища, ИмяФайлаПоУмолчанию, ВыбранноеИмяФайла, Интерактивно, УникальныйИдентификатор);
		
	КонецЕсли;
	
	Если ФайлВыбран Тогда
		
		Отказ = Ложь;
		
		// вызов сервера
		ЗагрузитьПараметрыМастера(Отказ, АдресВременногоХранилища);
		
		Если Отказ Тогда
			Предупреждение(НСтр("ru = 'Указан неправильный файл настроек синхронизации данных. Укажите корректный файл.'"));
			Возврат;
		КонецЕсли;
			
		Если Интерактивно Тогда
			
			Объект.ИмяФайлаНастроекОбменаДаннымиДляЗагрузки = ВыбранноеИмяФайла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция СтруктураПараметровПодключенияВнешнегоСоединения(ТипСоединения = "ВнешнееСоединение")
	
	Результат = Неопределено;
	
	Если ТипСоединения = "ВнешнееСоединение" Тогда
		
		Результат = ОбщегоНазначенияКлиентСервер.СтруктураПараметровДляУстановкиВнешнегоСоединения();
		
		Результат.ВариантРаботыИнформационнойБазы             = Объект.COMВариантРаботыИнформационнойБазы;
		Результат.КаталогИнформационнойБазы                   = Объект.COMКаталогИнформационнойБазы;
		Результат.ИмяСервера1СПредприятия                     = Объект.COMИмяСервера1СПредприятия;
		Результат.ИмяИнформационнойБазыНаСервере1СПредприятия = Объект.COMИмяИнформационнойБазыНаСервере1СПредприятия;
		Результат.АутентификацияОперационнойСистемы           = Объект.COMАутентификацияОперационнойСистемы;
		Результат.ИмяПользователя                             = Объект.COMИмяПользователя;
		Результат.ПарольПользователя                          = Объект.COMПарольПользователя;
		
		Результат.Вставить("ТипСоединения", ТипСоединения);
		Результат.Вставить("ВерсияКорреспондента_2_0_1_6", Объект.ВерсияКорреспондента_2_0_1_6);
		Результат.Вставить("ВерсияКорреспондента_2_1_1_7", Объект.ВерсияКорреспондента_2_1_1_7);
		
	ИначеЕсли ТипСоединения = "ВебСервис" Тогда
		
		Результат = Новый Структура;
		Результат.Вставить("WSURLВебСервиса");
		Результат.Вставить("WSИмяПользователя");
		Результат.Вставить("WSПароль");
		
		ЗаполнитьЗначенияСвойств(Результат, Объект);
		
		Результат.Вставить("ТипСоединения", ТипСоединения);
		Результат.Вставить("ВерсияКорреспондента_2_0_1_6", Объект.ВерсияКорреспондента_2_0_1_6);
		Результат.Вставить("ВерсияКорреспондента_2_1_1_7", Объект.ВерсияКорреспондента_2_1_1_7);
		
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура ПроверитьЗаполнениеРеквизитовВФорме(Отказ, ИмяФормыДляПроверки, ПараметрыФормы, ИмяРеквизитаФормы)
	
	ИмяФормыНастройки = "ПланОбмена.[ИмяПланаОбмена].Форма.[ИмяФормы]";
	ИмяФормыНастройки = СтрЗаменить(ИмяФормыНастройки, "[ИмяПланаОбмена]", Объект.ИмяПланаОбмена);
	ИмяФормыНастройки = СтрЗаменить(ИмяФормыНастройки, "[ИмяФормы]", ИмяФормыДляПроверки);
	
	ФормаНастройки = ПолучитьФорму(ИмяФормыНастройки, ПараметрыФормы, ЭтаФорма);
	
	Если Не ФормаНастройки.ПроверитьЗаполнение() Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Необходимо задать обязательные настройки.'"),,, ИмяРеквизитаФормы, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьОшибкуВЖурналРегистрации(СтрокаСообщенияОбОшибке, Событие)
	
	ЗаписьЖурналаРегистрации(Событие, УровеньЖурналаРегистрации.Ошибка,,, СтрокаСообщенияОбОшибке);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаОграниченийРегистрацииДанныхБазыКорреспондента(ТипСоединения)
	
	ИмяФормыНастройкиУзла = "ПланОбмена.[ИмяПланаОбмена].Форма.[ФормаНастройкиУзлаБазыКорреспондента]";
	ИмяФормыНастройкиУзла = СтрЗаменить(ИмяФормыНастройкиУзла, "[ИмяПланаОбмена]", Объект.ИмяПланаОбмена);
	ИмяФормыНастройкиУзла = СтрЗаменить(ИмяФормыНастройкиУзла, "[ФормаНастройкиУзлаБазыКорреспондента]", ФормаНастройкиУзлаБазыКорреспондента);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВерсияКорреспондента", ВерсияКонфигурацииКорреспондента);
	ПараметрыФормы.Вставить("ПараметрыВнешнегоСоединения", СтруктураПараметровПодключенияВнешнегоСоединения(ТипСоединения));
	ПараметрыФормы.Вставить("НастройкаОтборовНаУзле",      НастройкаОтборовНаУзлеБазыКорреспондента);
	
	РезультатОткрытия = ОткрытьФормуМодально(ИмяФормыНастройкиУзла, ПараметрыФормы, ЭтаФорма);
	
	Если РезультатОткрытия <> Неопределено Тогда
		
		Для Каждого НастройкаОтбора ИЗ НастройкаОтборовНаУзлеБазыКорреспондента Цикл
			
			НастройкаОтборовНаУзлеБазыКорреспондента[НастройкаОтбора.Ключ] = РезультатОткрытия[НастройкаОтбора.Ключ];
			
		КонецЦикла;
		
		// вызов сервера
		ПолучитьОписаниеОграниченийПередачиДанныхБазыКорреспондента(НастройкаОтборовНаУзлеБазыКорреспондента);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаЗначенийПоУмолчаниюБазыКорреспондента(ТипСоединения)
	
	ИмяФормыНастройкиУзла = "ПланОбмена.[ИмяПланаОбмена].Форма.[ФормаНастройкиЗначенийПоУмолчаниюБазыКорреспондента]";
	ИмяФормыНастройкиУзла = СтрЗаменить(ИмяФормыНастройкиУзла, "[ИмяПланаОбмена]", Объект.ИмяПланаОбмена);
	ИмяФормыНастройкиУзла = СтрЗаменить(ИмяФормыНастройкиУзла, "[ФормаНастройкиЗначенийПоУмолчаниюБазыКорреспондента]", ФормаНастройкиЗначенийПоУмолчаниюБазыКорреспондента);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВерсияКорреспондента", ВерсияКонфигурацииКорреспондента);
	ПараметрыФормы.Вставить("ПараметрыВнешнегоСоединения", СтруктураПараметровПодключенияВнешнегоСоединения(ТипСоединения));
	ПараметрыФормы.Вставить("ЗначенияПоУмолчаниюНаУзле",   ЗначенияПоУмолчаниюНаУзлеБазыКорреспондента);
	
	РезультатОткрытия = ОткрытьФормуМодально(ИмяФормыНастройкиУзла, ПараметрыФормы, ЭтаФорма);
	
	Если РезультатОткрытия <> Неопределено Тогда
		
		Для Каждого НастройкаОтбора ИЗ ЗначенияПоУмолчаниюНаУзлеБазыКорреспондента Цикл
			
			ЗначенияПоУмолчаниюНаУзлеБазыКорреспондента[НастройкаОтбора.Ключ] = РезультатОткрытия[НастройкаОтбора.Ключ];
			
		КонецЦикла;
		
		// вызов сервера
		ПолучитьОписаниеЗначенийПоУмолчаниюБазыКорреспондента(ЗначенияПоУмолчаниюНаУзлеБазыКорреспондента);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеНастройкиОбменаЧерезВнешнееСоединение()
	
	Если ВыполнитьИнтерактивныйОбменДаннымиСейчас Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("УзелИнформационнойБазы",         Объект.УзелИнформационнойБазы);
		ПараметрыФормы.Вставить("ВидТранспортаСообщенийОбмена",   Объект.ВидТранспортаСообщенийОбмена);
		ПараметрыФормы.Вставить("ВыполнитьСопоставлениеПриОткрытии", Ложь);
		ПараметрыФормы.Вставить("РасширенныйРежимДополненияВыгрузки", Истина);
		
		ОткрытьФорму("Обработка.ПомощникИнтерактивногоОбменаДанными.Форма", ПараметрыФормы,,, ВариантОткрытияОкна.ОтдельноеОкно);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеНастройкиОбменаЧерезВебСервис()
	
	Если ВыполнятьОбменДаннымиАвтоматически Тогда
		
		ЗавершениеНастройкиОбменаЧерезВебСервисНаСервере(Объект.УзелИнформационнойБазы, ПредопределенноеРасписаниеОбменаДанными, РасписаниеВыполненияОбменаДанными);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗавершениеНастройкиОбменаЧерезВебСервисНаСервере(УзелИнформационнойБазы, ПредопределенноеРасписание, Расписание)
	
	УстановитьПривилегированныйРежим(Истина);
	
	РасписаниеСценария = Неопределено;
	
	Если ПредопределенноеРасписание = "Каждые15Минут" Тогда
		
		РасписаниеСценария = ПредопределенноеРасписаниеКаждые15Минут();
		
	ИначеЕсли ПредопределенноеРасписание = "Каждые30Минут" Тогда
		
		РасписаниеСценария = ПредопределенноеРасписаниеКаждые30Минут();
		
	ИначеЕсли ПредопределенноеРасписание = "КаждыйЧас" Тогда
		
		РасписаниеСценария = ПредопределенноеРасписаниеКаждыйЧас();
		
	ИначеЕсли ПредопределенноеРасписание = "КаждыйДеньВ_8_00" Тогда
		
		РасписаниеСценария = ПредопределенноеРасписаниеКаждыйДеньВ_8_00();
		
	ИначеЕсли ПредопределенноеРасписание = "ДругоеРасписание" Тогда
		
		РасписаниеСценария = Расписание;
		
	КонецЕсли;
	
	Если РасписаниеСценария <> Неопределено Тогда
		
		Справочники.СценарииОбменовДанными.СоздатьСценарий(УзелИнформационнойБазы, РасписаниеСценария);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеПервогоЭтапаНастройкиОбменаЧерезОбычныеКаналыСвязи(Отказ)
	
	ОчиститьСообщения();
	
	Если Не Объект.ЭтоНастройкаРаспределеннойИнформационнойБазы
		И ПустаяСтрока(Объект.ИмяФайлаНастроекОбменаДанными) Тогда
		
		НСтрока = НСтр("ru = 'Сохраните файл с настройками для другой программы'");
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтрока,,"Объект.ИмяФайлаНастроекОбменаДанными",, Отказ);
		Возврат;
	КонецЕсли;
	
	Если Объект.ЭтоНастройкаРаспределеннойИнформационнойБазы Тогда
		
		Если ВыполнитьСозданиеНачальногоОбразаСейчас Тогда
			
			ПараметрыФормы = Новый Структура("Ключ, Узел", Объект.УзелИнформационнойБазы, Объект.УзелИнформационнойБазы);
			
			ОткрытьФормуМодально(ИмяФормыСозданияНачальногоОбраза, ПараметрыФормы);
			
		КонецЕсли;
		
	Иначе
		
		Если ВыполнитьОбменДаннымиСейчас Тогда
			
			ИнициализацияОбменаДаннымиНаКлиенте(Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершениеВторогоЭтапаНастройкиОбменаЧерезОбычныеКаналыСвязи(Отказ)
	
	Состояние(НСтр("ru = 'Выполняется создание настройки синхронизации данных'"));
	
	НастроитьНовыйОбменДаннымиНаСервере(Отказ, НастройкаОтборовНаУзле, ЗначенияПоУмолчаниюНаУзле);
	
	Если Отказ Тогда
		
		Предупреждение(НСтр("ru = 'При создании настройки синхронизации данных возникли ошибки.'"));
		Возврат;
	КонецЕсли;
	
	ОткрытьПомощникСопоставления = Не Объект.ЭтоНастройкаРаспределеннойИнформационнойБазы И Не Объект.ЭтоНастройкаСтандартногоОбмена;
	
	Если ОткрытьПомощникСопоставления Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("УзелИнформационнойБазы",         Объект.УзелИнформационнойБазы);
		ПараметрыФормы.Вставить("ВидТранспортаСообщенийОбмена",   Объект.ВидТранспортаСообщенийОбмена);
		ПараметрыФормы.Вставить("ВыполнитьСопоставлениеПриОткрытии", Ложь);
		ПараметрыФормы.Вставить("РасширенныйРежимДополненияВыгрузки", Истина);
		
		ОткрытьФорму("Обработка.ПомощникИнтерактивногоОбменаДанными.Форма", ПараметрыФормы,,,ВариантОткрытияОкна.ОтдельноеОкно);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ЗапуститьМенеджерЗаданий()
	
	Возврат (	РежимРаботыМастера = "ОбменЧерезВнешнееСоединение"
			ИЛИ РежимРаботыМастера = "ОбменЧерезВебСервис")
		И ИнформационнаяБазаФайловая
		И ВыполнятьОбменДаннымиАвтоматически
	;
КонецФункции

&НаСервереБезКонтекста
Процедура ВключитьИспользованиеЖурналаРегистрации(Знач СобытиеЖурналаРегистрации, Предупреждение)
	
	Попытка
		ОбщегоНазначения.ВключитьИспользованиеЖурналаРегистрации();
	Исключение
		Предупреждение = НСтр("ru = 'Не удалось включить использование журнала регистрации: %1'");
		Предупреждение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Предупреждение, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрации, УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуСопоставления()
	
	ТекущиеДанные = Элементы.ДеревоИнформацииСтатистики.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(ТекущиеДанные.Ключ) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ТекущиеДанные.ИспользоватьПредварительныйПросмотр Тогда
		Предупреждение(НСтр("ru = 'Для этих данных нельзя выполнить сопоставление.'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ИмяТаблицыПриемника",            ТекущиеДанные.ИмяТаблицыПриемника);
	ПараметрыФормы.Вставить("ИмяТипаОбъектаТаблицыИсточника", ТекущиеДанные.ТипОбъектаСтрокой);
	ПараметрыФормы.Вставить("ПоляТаблицыПриемника",           ТекущиеДанные.ПоляТаблицы);
	ПараметрыФормы.Вставить("ПоляПоискаТаблицыПриемника",     ТекущиеДанные.ПоляПоиска);
	ПараметрыФормы.Вставить("ТипИсточникаСтрокой",            ТекущиеДанные.ТипИсточникаСтрокой);
	ПараметрыФормы.Вставить("ТипПриемникаСтрокой",            ТекущиеДанные.ТипПриемникаСтрокой);
	ПараметрыФормы.Вставить("ЭтоУдалениеОбъекта",             ТекущиеДанные.ЭтоУдалениеОбъекта);
	ПараметрыФормы.Вставить("ДанныеУспешноЗагружены",         ТекущиеДанные.ДанныеУспешноЗагружены);
	ПараметрыФормы.Вставить("Ключ",                           ТекущиеДанные.Ключ);
	
	ПараметрыФормы.Вставить("УзелИнформационнойБазы",               Объект.УзелИнформационнойБазы);
	ПараметрыФормы.Вставить("ИмяФайлаСообщенияОбмена",              Объект.ИмяФайлаСообщенияОбмена);
	
	ПараметрыФормы.Вставить("ВыполнятьЗагрузкуДанных", Ложь);
	
	ОткрытьФорму("Обработка.СопоставлениеОбъектовИнформационныхБаз.Форма", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьДеревоИнформацииСтатистики(КлючСтроки = "")
	
	КоллекцияЭлементов = ДеревоИнформацииСтатистики.ПолучитьЭлементы();
	
	Для Каждого СтрокаДерева Из КоллекцияЭлементов Цикл
		
		Элементы.ДеревоИнформацииСтатистики.Развернуть(СтрокаДерева.ПолучитьИдентификатор(), Истина);
		
	КонецЦикла;
	
	// Позиционирование курсора в дереве значений
	Если Не ПустаяСтрока(КлючСтроки) Тогда
		
		ИдентификаторСтроки = 0;
		
		ОбщегоНазначенияКлиентСервер.ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля("Ключ", ИдентификаторСтроки, ДеревоИнформацииСтатистики.ПолучитьЭлементы(), КлючСтроки, Ложь);
		
		Элементы.ДеревоИнформацииСтатистики.ТекущаяСтрока = ИдентификаторСтроки;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеСтатистикиСопоставленияНаСервере(Отказ, ПараметрыОповещения)
	
	СтрокиТаблицы = Объект.ИнформацияСтатистики.НайтиСтроки(Новый Структура("Ключ", ПараметрыОповещения.КлючУникальности));
	
	ЗаполнитьЗначенияСвойств(СтрокиТаблицы[0], ПараметрыОповещения, "ДанныеУспешноЗагружены");
	
	КлючиСтрок = Новый Массив;
	КлючиСтрок.Добавить(ПараметрыОповещения.КлючУникальности);
	
	ОбновитьИнформациюСопоставленияПоСтрокеНаСервере(Отказ, КлючиСтрок);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИнформациюСопоставленияПоСтрокеНаСервере(Отказ, КлючиСтрок)
	
	ИндексыСтрок = ПолучитьИндексыСтрокТаблицыИнформацииСтатистики(КлючиСтрок);
	
	ПомощникИнтерактивногоОбменаДанными = Обработки.ПомощникИнтерактивногоОбменаДанными.Создать();
	
	ЗаполнитьЗначенияСвойств(ПомощникИнтерактивногоОбменаДанными, Объект,, "ИнформацияСтатистики");
	
	ПомощникИнтерактивногоОбменаДанными.ИнформацияСтатистики.Загрузить(Объект.ИнформацияСтатистики.Выгрузить());
	
	ПомощникИнтерактивногоОбменаДанными.ПолучитьСтатистикуСопоставленияОбъектовПоСтроке(Отказ, ИндексыСтрок);
	
	Если Не Отказ Тогда
		
		Объект.ИнформацияСтатистики.Загрузить(ПомощникИнтерактивногоОбменаДанными.ТаблицаИнформацииСтатистики());
		
		ПолучитьДеревоИнформацииСтатистики(ПомощникИнтерактивногоОбменаДанными.ТаблицаИнформацииСтатистики());
		
		УстановитьВидимостьГруппыДополнительнойИнформации();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьИндексыСтрокТаблицыИнформацииСтатистики(КлючиСтрок)
	
	ИндексыСтрок = Новый Массив;
	
	Для Каждого Ключ ИЗ КлючиСтрок Цикл
		
		СтрокиТаблицы = Объект.ИнформацияСтатистики.НайтиСтроки(Новый Структура("Ключ", Ключ));
		
		ИндексСтроки = Объект.ИнформацияСтатистики.Индекс(СтрокиТаблицы[0]);
		
		ИндексыСтрок.Добавить(ИндексСтроки);
		
	КонецЦикла;
	
	Возврат ИндексыСтрок;
	
КонецФункции

&НаСервере
Процедура ПолучитьДеревоИнформацииСтатистики(ИнформацияСтатистики)
	
	КоллекцияЭлементовДерева = ДеревоИнформацииСтатистики.ПолучитьЭлементы();
	КоллекцияЭлементовДерева.Очистить();
	
	ОбщегоНазначения.ЗаполнитьКоллекциюЭлементовДереваДанныхФормы(КоллекцияЭлементовДерева,
		ОбменДаннымиСервер.ПолучитьДеревоИнформацииСтатистики(ИнформацияСтатистики));
	
КонецПроцедуры

&НаСервере
Процедура ПриПодключенииККорреспонденту(Отказ, Знач ВерсияКорреспондента)
	
	Если ВерсияКорреспондента = Неопределено
		ИЛИ ПустаяСтрока(ВерсияКорреспондента) Тогда
		
		ВерсияКорреспондента = "0.0.0.0";
	КонецЕсли;
	
	Попытка
		ОбменДаннымиСервер.ПриПодключенииККорреспонденту(Объект.ИмяПланаОбмена, ВерсияКорреспондента);
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),,,, Отказ);
		ЗаписатьОшибкуВЖурналРегистрации(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'При выполнении обработчика ПриПодключенииККорреспонденту произошла ошибка:%1%2'"),
				Символы.ПС,
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())),
			СобытиеЖурналаРегистрацииСозданиеОбменаДанными
		);
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Значения констант

&НаКлиентеНаСервереБезКонтекста
Функция НадписьДалееFTP()
	
	Возврат НСтр("ru = 'Нажмите кнопку ""Далее"" для настройки подключения через FTP-ресурс.'");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НадписьДалееEMAIL()
	
	Возврат НСтр("ru = 'Нажмите кнопку ""Далее"" для настройки подключения по почте.'");
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НадписьДалееНастройки()
	
	Возврат НСтр("ru = 'Нажмите кнопку ""Далее"" для настройки дополнительных параметров синхронизации данных.'");
	
КонецФункции

&НаСервереБезКонтекста
Функция ПредопределенноеРасписаниеКаждые15Минут()
	
	Месяцы = Новый Массив;
	Месяцы.Добавить(1);
	Месяцы.Добавить(2);
	Месяцы.Добавить(3);
	Месяцы.Добавить(4);
	Месяцы.Добавить(5);
	Месяцы.Добавить(6);
	Месяцы.Добавить(7);
	Месяцы.Добавить(8);
	Месяцы.Добавить(9);
	Месяцы.Добавить(10);
	Месяцы.Добавить(11);
	Месяцы.Добавить(12);
	
	ДниНедели = Новый Массив;
	ДниНедели.Добавить(1);
	ДниНедели.Добавить(2);
	ДниНедели.Добавить(3);
	ДниНедели.Добавить(4);
	ДниНедели.Добавить(5);
	ДниНедели.Добавить(6);
	ДниНедели.Добавить(7);
	
	Расписание = Новый РасписаниеРегламентногоЗадания;
	Расписание.Месяцы                   = Месяцы;
	Расписание.ДниНедели                = ДниНедели;
	Расписание.ПериодПовтораВТечениеДня = 60*15; // 15 минут
	Расписание.ПериодПовтораДней        = 1; // каждый день
	
	Возврат Расписание;
КонецФункции

&НаСервереБезКонтекста
Функция ПредопределенноеРасписаниеКаждые30Минут()
	
	Месяцы = Новый Массив;
	Месяцы.Добавить(1);
	Месяцы.Добавить(2);
	Месяцы.Добавить(3);
	Месяцы.Добавить(4);
	Месяцы.Добавить(5);
	Месяцы.Добавить(6);
	Месяцы.Добавить(7);
	Месяцы.Добавить(8);
	Месяцы.Добавить(9);
	Месяцы.Добавить(10);
	Месяцы.Добавить(11);
	Месяцы.Добавить(12);
	
	ДниНедели = Новый Массив;
	ДниНедели.Добавить(1);
	ДниНедели.Добавить(2);
	ДниНедели.Добавить(3);
	ДниНедели.Добавить(4);
	ДниНедели.Добавить(5);
	ДниНедели.Добавить(6);
	ДниНедели.Добавить(7);
	
	Расписание = Новый РасписаниеРегламентногоЗадания;
	Расписание.Месяцы                   = Месяцы;
	Расписание.ДниНедели                = ДниНедели;
	Расписание.ПериодПовтораВТечениеДня = 60*30; // 30 минут
	Расписание.ПериодПовтораДней        = 1; // каждый день
	
	Возврат Расписание;
КонецФункции

&НаСервереБезКонтекста
Функция ПредопределенноеРасписаниеКаждыйЧас()
	
	Месяцы = Новый Массив;
	Месяцы.Добавить(1);
	Месяцы.Добавить(2);
	Месяцы.Добавить(3);
	Месяцы.Добавить(4);
	Месяцы.Добавить(5);
	Месяцы.Добавить(6);
	Месяцы.Добавить(7);
	Месяцы.Добавить(8);
	Месяцы.Добавить(9);
	Месяцы.Добавить(10);
	Месяцы.Добавить(11);
	Месяцы.Добавить(12);
	
	ДниНедели = Новый Массив;
	ДниНедели.Добавить(1);
	ДниНедели.Добавить(2);
	ДниНедели.Добавить(3);
	ДниНедели.Добавить(4);
	ДниНедели.Добавить(5);
	ДниНедели.Добавить(6);
	ДниНедели.Добавить(7);
	
	Расписание = Новый РасписаниеРегламентногоЗадания;
	Расписание.Месяцы                   = Месяцы;
	Расписание.ДниНедели                = ДниНедели;
	Расписание.ПериодПовтораВТечениеДня = 60*60; // 60 минут
	Расписание.ПериодПовтораДней        = 1; // каждый день
	
	Возврат Расписание;
КонецФункции

&НаСервереБезКонтекста
Функция ПредопределенноеРасписаниеКаждыйДеньВ_8_00()
	
	Месяцы = Новый Массив;
	Месяцы.Добавить(1);
	Месяцы.Добавить(2);
	Месяцы.Добавить(3);
	Месяцы.Добавить(4);
	Месяцы.Добавить(5);
	Месяцы.Добавить(6);
	Месяцы.Добавить(7);
	Месяцы.Добавить(8);
	Месяцы.Добавить(9);
	Месяцы.Добавить(10);
	Месяцы.Добавить(11);
	Месяцы.Добавить(12);
	
	ДниНедели = Новый Массив;
	ДниНедели.Добавить(1);
	ДниНедели.Добавить(2);
	ДниНедели.Добавить(3);
	ДниНедели.Добавить(4);
	ДниНедели.Добавить(5);
	ДниНедели.Добавить(6);
	ДниНедели.Добавить(7);
	
	Расписание = Новый РасписаниеРегламентногоЗадания;
	Расписание.Месяцы                   = Месяцы;
	Расписание.ДниНедели                = ДниНедели;
	Расписание.ВремяНачала              = Дата('00010101080000'); // 8:00
	Расписание.ПериодПовтораДней        = 1; // каждый день
	
	Возврат Расписание;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Переопределяемая часть - Обработчики событий переходов

&НаКлиенте
Функция Подключаемый_СтраницаМастераЗаданиеПараметровТранспортаFILE_ПриПереходеДалее(Отказ)
	
	СтраницаМастераЗаданиеПараметровТранспортаFILE_ПриПереходеДалееНаСервере(Отказ);
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаМастераЗаданиеПараметровТранспортаFTP_ПриПереходеДалее(Отказ)
	
	СтраницаМастераЗаданиеПараметровТранспортаFTP_ПриПереходеДалееНаСервере(Отказ);
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаМастераЗаданиеПараметровТранспортаEMAIL_ПриПереходеДалее(Отказ)
	
	СтраницаМастераЗаданиеПараметровТранспортаEMAIL_ПриПереходеДалееНаСервере(Отказ);
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаМастераВыборРежимаРаботыПомощника_ПриОткрытии(Отказ, ПропуститьСтраницу, ЭтоПереходДалее)
	
	Если Не ИспользоватьТранспортСообщенийОбменаCOM Тогда
		
		Объект.ИспользоватьПараметрыТранспортаCOM = Ложь;
		
		ПропуститьСтраницу = Истина;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаМастераЗаданиеПараметровТранспортаFILE_ПриОткрытии(Отказ, ПропуститьСтраницу, ЭтоПереходДалее)
	
	Если Не ИспользоватьТранспортСообщенийОбменаFILE Тогда
		
		Объект.ИспользоватьПараметрыТранспортаFILE = Ложь;
		
		ПропуститьСтраницу = Истина;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаМастераЗаданиеПараметровТранспортаFTP_ПриОткрытии(Отказ, ПропуститьСтраницу, ЭтоПереходДалее)
	
	Если Не ИспользоватьТранспортСообщенийОбменаFTP Тогда
		
		Объект.ИспользоватьПараметрыТранспортаFTP = Ложь;
		
		ПропуститьСтраницу = Истина;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаМастераЗаданиеПараметровТранспортаEMAIL_ПриОткрытии(Отказ, ПропуститьСтраницу, ЭтоПереходДалее)
	
	Если Не ИспользоватьТранспортСообщенийОбменаEMAIL Тогда
		
		Объект.ИспользоватьПараметрыТранспортаEMAIL = Ложь;
		
		ПропуститьСтраницу = Истина;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаМастераНастройкаПараметров_ПриПереходеДалее(Отказ)
	
	Если ПустаяСтрока(Объект.НаименованиеЭтойБазы) Тогда
		
		НСтрока = НСтр("ru = 'Укажите наименование этой программы.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтрока,, "Объект.НаименованиеЭтойБазы",, Отказ);
		
	КонецЕсли;
	
	Если ПустаяСтрока(Объект.НаименованиеВторойБазы) Тогда
		
		НСтрока = НСтр("ru = 'Укажите наименование другой программы.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтрока,, "Объект.НаименованиеВторойБазы",, Отказ);
		
	КонецЕсли;
	
	Если ПустаяСтрока(Объект.ПрефиксИнформационнойБазыПриемника) Тогда
		
		НСтрока = НСтр("ru = 'Укажите существующий или желаемый префикс второй информационной базы.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтрока,, "Объект.ПрефиксИнформационнойБазыПриемника",, Отказ);
		
	КонецЕсли;
	
	Если СокрЛП(Объект.ПрефиксИнформационнойБазыИсточника) = СокрЛП(Объект.ПрефиксИнформационнойБазыПриемника) Тогда
		
		НСтрока = НСтр("ru = 'Префиксы информационных баз должны быть различными.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтрока,, "Объект.ПрефиксИнформационнойБазыПриемника",, Отказ);
		
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ПредусмотреныНастройкиОтборовНаУзле Тогда
		
		// Проверяем заполнение реквизитов в форме настроек ограничения миграции данных
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ВерсияКорреспондента", ВерсияКонфигурацииКорреспондента);
		ПараметрыФормы.Вставить("НастройкаОтборовНаУзле", НастройкаОтборовНаУзле);
		
		ПроверитьЗаполнениеРеквизитовВФорме(Отказ, ФормаНастройкиУзла, ПараметрыФормы, "ОписаниеОграниченийПередачиДанных");
		
	КонецЕсли;
	
	Если ПредусмотреныЗначенияПоУмолчаниюНаУзле Тогда
		
		// Проверяем заполнение реквизитов в форме дополнительных настроек
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ВерсияКорреспондента", ВерсияКонфигурацииКорреспондента);
		ПараметрыФормы.Вставить("ЗначенияПоУмолчаниюНаУзле", ЗначенияПоУмолчаниюНаУзле);
		
		ПроверитьЗаполнениеРеквизитовВФорме(Отказ, ФормаНастройкиЗначенийПоУмолчанию, ПараметрыФормы, "ОписаниеЗначенийПоУмолчанию");
		
	КонецЕсли;
	
	СтраницаМастераНастройкаПараметров_ПриПереходеДалееНаСервере(Отказ);
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаМастераНастройкаПараметровДляВнешнегоСоединенияПервойБазы_ПриПереходеДалее(Отказ)
	
	Если ПустаяСтрока(Объект.НаименованиеЭтойБазы) Тогда
		
		НСтрока = НСтр("ru = 'Укажите наименование информационной базы.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтрока,, "Объект.НаименованиеЭтойБазы",, Отказ);
		Возврат Неопределено;
	КонецЕсли;
	
	Если ПредусмотреныНастройкиОтборовНаУзле Тогда
		
		// Проверяем заполнение реквизитов в форме настроек ограничения миграции данных
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ВерсияКорреспондента", ВерсияКонфигурацииКорреспондента);
		ПараметрыФормы.Вставить("НастройкаОтборовНаУзле", НастройкаОтборовНаУзле);
		
		ПроверитьЗаполнениеРеквизитовВФорме(Отказ, ФормаНастройкиУзла, ПараметрыФормы, "ОписаниеОграниченийПередачиДанных");
		
	КонецЕсли;
	
	Если ПредусмотреныЗначенияПоУмолчаниюНаУзле Тогда
		
		// Проверяем заполнение реквизитов в форме дополнительных настроек
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ВерсияКорреспондента", ВерсияКонфигурацииКорреспондента);
		ПараметрыФормы.Вставить("ЗначенияПоУмолчаниюНаУзле", ЗначенияПоУмолчаниюНаУзле);
		
		ПроверитьЗаполнениеРеквизитовВФорме(Отказ, ФормаНастройкиЗначенийПоУмолчанию, ПараметрыФормы, "ОписаниеЗначенийПоУмолчанию");
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаМастераНастройкаПараметровОбменаДанными_ПриОткрытии(Отказ, ПропуститьСтраницу, ЭтоПереходДалее)
	
	Если ЭтоПереходДалее Тогда
		
		// Получаем контекст и описание контекста формы настройки узлов
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ВерсияКорреспондента", ВерсияКонфигурацииКорреспондента);
		ПараметрыФормы.Вставить("ПолучитьЗначенияПоУмолчанию");
		ПараметрыФормы.Вставить("Настройки", КонтекстФормыНастройкиУзлов);
		
		ИмяФормыНастройки = "ПланОбмена.[ИмяПланаОбмена].Форма.[ФормаНастройкиУзлов]";
		ИмяФормыНастройки = СтрЗаменить(ИмяФормыНастройки, "[ИмяПланаОбмена]", Объект.ИмяПланаОбмена);
		ИмяФормыНастройки = СтрЗаменить(ИмяФормыНастройки, "[ФормаНастройкиУзлов]", ФормаНастройкиУзлов);
		
		ФормаНастройки = ПолучитьФорму(ИмяФормыНастройки, ПараметрыФормы, ЭтаФорма);
		
		КонтекстФормыНастройкиУзлов    = ФормаНастройки.Контекст;
		ОписаниеНастроекВыгрузкиДанных = ФормаНастройки.ОписаниеКонтекста;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаМастераНастройкаПараметровОбменаДанными_ПриПереходеДалее(Отказ)
	
	ПроверитьЗаданиеНастроекДляПервойБазы(Отказ, "ВебСервис");
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаМастераНастройкаПараметровДляВнешнегоСоединенияВторойБазы_ПриПереходеДалее(Отказ)
	
	ПроверитьЗаданиеНастроекДляВторойБазы(Отказ, "ВнешнееСоединение");
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаМастераНастройкаПараметровВторогоЭтапаНастройки_ПриПереходеДалее(Отказ)
	
	Если ПредусмотреныНастройкиОтборовНаУзле Тогда
		
		// Проверяем заполнение реквизитов в форме настроек ограничения миграции данных
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ВерсияКорреспондента", ВерсияКонфигурацииКорреспондента);
		ПараметрыФормы.Вставить("НастройкаОтборовНаУзле", НастройкаОтборовНаУзле);
		
		ПроверитьЗаполнениеРеквизитовВФорме(Отказ, ФормаНастройкиУзла, ПараметрыФормы, "ОписаниеОграниченийПередачиДанных");
		
	КонецЕсли;
	
	Если ПредусмотреныЗначенияПоУмолчаниюНаУзле Тогда
		
		// Проверяем заполнение реквизитов в форме дополнительных настроек
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ВерсияКорреспондента", ВерсияКонфигурацииКорреспондента);
		ПараметрыФормы.Вставить("ЗначенияПоУмолчаниюНаУзле", ЗначенияПоУмолчаниюНаУзле);
		
		ПроверитьЗаполнениеРеквизитовВФорме(Отказ, ФормаНастройкиЗначенийПоУмолчанию, ПараметрыФормы, "ОписаниеЗначенийПоУмолчанию");
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаМастераНачало_ПриПереходеДалее(Отказ)
	
	Если Не Объект.ЭтоНастройкаРаспределеннойИнформационнойБазы Тогда
		
		Если ПустаяСтрока(Объект.ИмяФайлаНастроекОбменаДаннымиДляЗагрузки) Тогда
			
			НСтрока = НСтр("ru = 'Выберите файл с настройками синхронизации данных'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтрока,,"Объект.ИмяФайлаНастроекОбменаДаннымиДляЗагрузки",, Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаМастераНастройкаПараметров_ПриОткрытии(Отказ, ПропуститьСтраницу, ЭтоПереходДалее)
	
	// если перешли на страницу дополнительных параметров и не выбрали ни один вид транспорта, то предупреждаем об ошибке
	Если НЕ    (Объект.ИспользоватьПараметрыТранспортаEMAIL
			ИЛИ Объект.ИспользоватьПараметрыТранспортаFILE
			ИЛИ Объект.ИспользоватьПараметрыТранспортаFTP) Тогда
		
		НСтрока = НСтр("ru = 'Не указаны параметры подключения для синхронизации данных.
						|Следует настроить хотя бы один вариант подключения.'");
		//
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтрока,,,, Отказ);
		
		Возврат Неопределено;
	КонецЕсли;
	
	СтраницаМастераНастройкаПараметров_ПриОткрытииНаСервере(Отказ, ПропуститьСтраницу, ЭтоПереходДалее);
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаМастераНастройкаПараметровДляВнешнегоСоединенияПервойБазы_ПриОткрытии(Отказ, ПропуститьСтраницу, ЭтоПереходДалее)
	
	Элементы.НадписьОписаниеОграниченийПередачиДанных1.Заголовок = СтрЗаменить(Элементы.НадписьОписаниеОграниченийПередачиДанных1.Заголовок,
																	   "%Программа%", СинонимПланаОбмена);
	
	Элементы.НадписьОписаниеЗначенийПоУмолчанию1.Заголовок = СтрЗаменить(Элементы.НадписьОписаниеЗначенийПоУмолчанию1.Заголовок,
																	   "%Программа%", СинонимПланаОбмена);
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаМастераНастройкаПараметровДляВнешнегоСоединенияВторойБазы_ПриОткрытии(Отказ, ПропуститьСтраницу, ЭтоПереходДалее)
	
	Элементы.НадписьОписаниеОграниченийПередачиДанных4.Заголовок = СтрЗаменить(Элементы.НадписьОписаниеОграниченийПередачиДанных4.Заголовок,
																	   "%Программа%", Объект.НаименованиеЭтойБазы);
	
	Элементы.НадписьОписаниеЗначенийПоУмолчанию4.Заголовок = СтрЗаменить(Элементы.НадписьОписаниеЗначенийПоУмолчанию4.Заголовок,
																	   "%Программа%", Объект.НаименованиеЭтойБазы);
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаМастераИтогНастройкиОбмена_ПриОткрытии(Отказ, ПропуститьСтраницу, ЭтоПереходДалее)
	
	Если ВариантРаботыМастера = "НастроитьНовыйОбменДанными" Тогда
		
		// Представление результата настройки обмена
		СтрокаСообщения = НСтр("ru = '%1%2%3Префикс этой информационной базы: %4
		|Префикс второй информационной базы: %5'");
		
		ПредставлениеРезультатаНастройкиОбмена = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения,
							ПредставлениеРезультатаТранспортСообщений(),
							ПредставлениеРезультатаОтборыНаУзле(),
							ПредставлениеРезультатаЗначенияПоУмолчаниюНаУзле(),
							Объект.ПрефиксИнформационнойБазыИсточника,
							Объект.ПрефиксИнформационнойБазыПриемника);
		
	Иначе
		
		// Представление результата настройки обмена
		СтрокаСообщения = НСтр("ru = '%1%2%3Префикс этой информационной базы: %4'");
		
		ПредставлениеРезультатаНастройкиОбмена = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения,
							ПредставлениеРезультатаТранспортСообщений(),
							ПредставлениеРезультатаОтборыНаУзле(),
							ПредставлениеРезультатаЗначенияПоУмолчаниюНаУзле(),
							Объект.ПрефиксИнформационнойБазыИсточника);
		
	КонецЕсли;
	
	// выводим поясняющую надпись
	Элементы.ГруппаНадписиИнформацииОбОткрытииПомощникаСопоставления.Видимость =
	(ВариантРаботыМастера = "ПродолжитьНастройкуОбменаДанными" 
	И Не Объект.ЭтоНастройкаРаспределеннойИнформационнойБазы
	И Не Объект.ЭтоНастройкаСтандартногоОбмена);
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаМастераИтогНастройкиОбмена_ПриОткрытии_ВнешнееСоединение(Отказ, ПропуститьСтраницу, ЭтоПереходДалее)
	
	// Представление результата настройки обмена
	Если НастройкаОбменаССервисом Тогда
		
		СтрокаСообщения = НСтр("ru = '%1
		|Настройки для этой информационной базы:
		|========================================================
		|%2%3Префикс информационной базы: %4
		|
		|Настройки для приложения, расположенного в сервисе:
		|========================================================
		|%5%6Префикс приложения: %7'");
		
	Иначе
		
		СтрокаСообщения = НСтр("ru = '%1
		|Параметры синхронизации данных для этой программы:
		|========================================================
		|%2%3Префикс информационной базы: %4
		|
		|Параметры синхронизации данных для другой программы::
		|========================================================
		|%5%6Префикс информационной базы: %7'");
		
	КонецЕсли;
	
	ПредставлениеРезультатаНастройкиОбмена = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения,
						ПредставлениеРезультатаТранспортСообщений(),
						ПредставлениеРезультатаОтборыНаУзле(),
						ПредставлениеРезультатаЗначенияПоУмолчаниюНаУзле(),
						Объект.ПрефиксИнформационнойБазыИсточника,
						ПредставлениеРезультатаОтборыНаУзлеБазыКорреспондента(),
						ПредставлениеРезультатаЗначенияПоУмолчаниюНаУзлеБазыКорреспондента(),
						Объект.ПрефиксИнформационнойБазыПриемника);
	
	// выводим поясняющую надпись
	Элементы.ГруппаНадписиИнформацииОбОткрытииПомощникаСопоставления.Видимость = Ложь;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаМастераОжиданиеСозданияНастройкиОбменаДанными_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)
	
	СтраницаМастераОжиданиеСозданияНастройкиОбменаДанными_ОбработкаДлительнойОперацииНаСервере(Отказ);
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаМастераОжиданиеСозданияНастройкиОбменаДаннымиЧерезВнешнееСоединение_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)
	
	// создаем настройку обмена через внешнее соединение
	НастроитьНовыйОбменДаннымиНаСервереЧерезВнешнееСоединение(Отказ, НастройкаОтборовНаУзлеБазыКорреспондента, ЗначенияПоУмолчаниюНаУзлеБазыКорреспондента);
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаМастераОжиданиеПроверкиПодключенияВнешнегоСоединения_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)
	
	СтраницаМастераОжиданиеПроверкиПодключенияВнешнегоСоединения_ОбработкаДлительнойОперацииНаСервере(Отказ);
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаМастераОжиданиеПроверкиПодключенияЧерезВебСервис_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)
	
	ПроверитьПодключениеWSНаКлиенте(Отказ, Истина);
	
КонецФункции

//

&НаКлиенте
Функция Подключаемый_СтраницаМастераОжиданиеАнализаДанныхСозданиеНастройкиОбмена_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)
	
	// Создание настройки обмена данными:
	//  - создание узлов в этой базе и в корреспонденте с настройками выгрузки данных
	//  - регистрация справочников к выгрузке в этой базе и в корреспонденте
	
	ДлительнаяОперация = Ложь;
	ДлительнаяОперацияЗавершена = Ложь;
	ИдентификаторДлительнойОперации = "";
	
	НастроитьНовыйОбменДаннымиНаСервереЧерезВебСервис(Отказ);
	
	Если Отказ Тогда
		
		Предупреждение(НСтр("ru = 'Возникли ошибки на этапе создания настройки синхронизации данных.
					|Для решения проблем воспользуйтесь журналом регистрации.'"));
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаМастераОжиданиеАнализаДанныхСозданиеНастройкиОбменаДлительнаяОперация_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)
	
	Если ДлительнаяОперация Тогда
		
		ПерейтиДалее = Ложь;
		
		ПодключитьОбработчикОжидания("ОбработчикОжиданияДлительнойОперации", 5, Истина);
		
	КонецЕсли;
	
КонецФункции

//

&НаКлиенте
Функция Подключаемый_СтраницаМастераОжиданиеАнализаДанныхПолучениеСообщения_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)
	
	ДлительнаяОперация = Ложь;
	ДлительнаяОперацияЗавершена = Ложь;
	ИдентификаторФайлаСообщенияВСервисе = "";
	ИдентификаторДлительнойОперации = "";
	
	СтруктураДанных = ОбменДаннымиВызовСервера.ПолучитьСообщениеОбменаВоВременныйКаталогИзИнформационнойБазыКорреспондентаЧерезВебСервис(
		Отказ,
		Объект.УзелИнформационнойБазы,
		ИдентификаторФайлаСообщенияВСервисе,
		ДлительнаяОперация,
		ИдентификаторДлительнойОперации,
		Объект.WSПароль);
	
	Если Отказ Тогда
		
		Предупреждение(НСтр("ru = 'Возникли ошибки на этапе анализа данных.
					|Для решения проблем воспользуйтесь журналом регистрации.'"));
		
	ИначеЕсли Не ДлительнаяОперация Тогда
		
		Объект.ИмяВременногоКаталогаСообщенийОбмена = СтруктураДанных.ИмяВременногоКаталогаСообщенийОбмена;
		Объект.ИмяФайлаСообщенияОбмена              = СтруктураДанных.ИмяФайлаСообщенияОбмена;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаМастераОжиданиеАнализаДанныхПолучениеСообщенияДлительнаяОперация_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)
	
	Если ДлительнаяОперация Тогда
		
		ПерейтиДалее = Ложь;
		
		ПодключитьОбработчикОжидания("ОбработчикОжиданияДлительнойОперации", 5, Истина);
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаМастераОжиданиеАнализаДанныхПолучениеСообщенияДлительнаяОперацияОкончание_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)
	
	Если ДлительнаяОперацияЗавершена Тогда
		
		СтруктураДанных = ОбменДаннымиВызовСервера.ПолучитьСообщениеОбменаВоВременныйКаталогИзИнформационнойБазыКорреспондентаЧерезВебСервисЗавершениеДлительнойОперации(
			Отказ,
			Объект.УзелИнформационнойБазы,
			ИдентификаторФайлаСообщенияВСервисе,
			Объект.WSПароль);
		
		Если Отказ Тогда
			
			Предупреждение(НСтр("ru = 'Возникли ошибки на этапе анализа данных.
						|Для решения проблем воспользуйтесь журналом регистрации.'"));
			
		Иначе
			
			Объект.ИмяВременногоКаталогаСообщенийОбмена = СтруктураДанных.ИмяВременногоКаталогаСообщенийОбмена;
			Объект.ИмяФайлаСообщенияОбмена              = СтруктураДанных.ИмяФайлаСообщенияОбмена;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаМастераОжиданиеАнализаДанныхАвтоматическоеСопоставление_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)
	
	СтраницаМастераОжиданиеАнализаДанныхАвтоматическоеСопоставление_ОбработкаДлительнойОперации(Отказ);
	
	Если Отказ Тогда
		
		Предупреждение(НСтр("ru = 'Возникли ошибки на этапе анализа данных.'"));
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура СтраницаМастераОжиданиеАнализаДанныхАвтоматическоеСопоставление_ОбработкаДлительнойОперации(Отказ)
	
	ПомощникИнтерактивногоОбменаДанными = Обработки.ПомощникИнтерактивногоОбменаДанными.Создать();
	
	ЗаполнитьЗначенияСвойств(ПомощникИнтерактивногоОбменаДанными, Объект,, "ИнформацияСтатистики");
	
	ПомощникИнтерактивногоОбменаДанными.ИнформацияСтатистики.Загрузить(Объект.ИнформацияСтатистики.Выгрузить());
	
	ПомощникИнтерактивногоОбменаДанными.ВыполнитьАнализСообщенияОбмена(Отказ);
	
	ПомощникИнтерактивногоОбменаДанными.ВыполнитьАвтоматическоеСопоставлениеПоУмолчаниюИПолучитьСтатистикуСопоставления(Отказ);
	
	Если Не Отказ Тогда
		
		ТаблицаИнформацииСтатистики = ПомощникИнтерактивногоОбменаДанными.ТаблицаИнформацииСтатистики();
		
		// Удаляем строки, в которых сопоставление 100%
		ОбратныйИндекс = ТаблицаИнформацииСтатистики.Количество() - 1;
		
		Пока ОбратныйИндекс >= 0 Цикл
			
			СтрокаТаблицы = ТаблицаИнформацииСтатистики[ОбратныйИндекс];
			
			Если СтрокаТаблицы.КоличествоОбъектовНесопоставленных = 0 Тогда
				
				ТаблицаИнформацииСтатистики.Удалить(СтрокаТаблицы);
				
			КонецЕсли;
			
			ОбратныйИндекс = ОбратныйИндекс - 1;
		КонецЦикла;
		
		Объект.ИнформацияСтатистики.Загрузить(ТаблицаИнформацииСтатистики);
		
		ПолучитьДеревоИнформацииСтатистики(ТаблицаИнформацииСтатистики);
		
		УстановитьВидимостьГруппыДополнительнойИнформации();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьГруппыДополнительнойИнформации()
	
	// если в таблице информации статистике есть хотя бы одна строка с сопоставлением меньшим 100%,
	// то группу дополнительной информации делаем видимой
	МассивСтрок = Объект.ИнформацияСтатистики.НайтиСтроки(Новый Структура("ИндексКартинки", 1));
	
	ВсеДанныеСопоставлены = (МассивСтрок.Количество() = 0);
	
	Элементы.СтраницыСтатусаСопоставленияДанных.ТекущаяСтраница = ?(ВсеДанныеСопоставлены,
				Элементы.СтатусСопоставленияВсеДанныеСопоставлены,
				Элементы.СтатусСопоставленияЕстьНесопоставленныеДанные);
	
КонецПроцедуры

&НаКлиенте
Функция Подключаемый_СтраницаМастераСопоставлениеДанных_ПриОткрытии(Отказ, ПропуститьСтраницу, ЭтоПереходДалее)
	
	Если ЭтоПереходДалее И ВсеДанныеСопоставлены Тогда
		
		ПропуститьСтраницу = Истина;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаМастераСопоставлениеДанных_ПриПереходеДалее(Отказ)
	
	Если Не ВсеДанныеСопоставлены Тогда
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, "Продолжить");
		Кнопки.Добавить(КодВозвратаДиалога.Нет, "Отмена");
		
		Сообщение = НСтр("ru = 'Не все данные сопоставлены. Наличие несопоставленных данных
							   |может привести к появлению одинаковых элементов справочников (дублей).
							   |Продолжить?'");
		
		Ответ = Вопрос(Сообщение, Кнопки,, КодВозвратаДиалога.Нет);
		
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			
			Отказ = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

//

&НаКлиенте
Функция Подключаемый_СтраницаМастераОжиданиеСинхронизацииСправочниковЗагрузка_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)
	
	ОбменДаннымиВызовСервера.ВыполнитьЗагрузкуДляУзлаИнформационнойБазыЧерезФайл(Отказ, Объект.УзелИнформационнойБазы, Объект.ИмяФайлаСообщенияОбмена);
	
	Если Отказ Тогда
		
		Предупреждение(НСтр("ru = 'Возникли ошибки на этапе синхронизации справочников.
					|Для решения проблем воспользуйтесь журналом регистрации.'"));
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаМастераОжиданиеСинхронизацииСправочниковВыгрузка_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)
	
	ДлительнаяОперация = Ложь;
	ДлительнаяОперацияЗавершена = Ложь;
	ИдентификаторФайлаСообщенияВСервисе = "";
	ИдентификаторДлительнойОперации = "";
	
	СтраницаМастераОжиданиеСинхронизацииСправочниковВыгрузка_ОбработкаДлительнойОперации(
											Отказ,
											Объект.УзелИнформационнойБазы,
											ДлительнаяОперация,
											ИдентификаторДлительнойОперации,
											ИдентификаторФайлаСообщенияВСервисе,
											ДатаНачалаОперации,
											Объект.WSПароль);
	
	Если Отказ Тогда
		
		Предупреждение(НСтр("ru = 'Возникли ошибки на этапе синхронизации справочников.
					|Для решения проблем воспользуйтесь журналом регистрации.'"));
		
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Процедура СтраницаМастераОжиданиеСинхронизацииСправочниковВыгрузка_ОбработкаДлительнойОперации(
											Отказ,
											УзелИнформационнойБазы,
											ДлительнаяОперация,
											ИдентификаторОперации,
											ИдентификаторФайла,
											ДатаНачалаОперации,
											Пароль)
	
	ДатаНачалаОперации = ТекущаяДатаСеанса();
	
	// запускаем выполнение обмена
	ОбменДаннымиСервер.ВыполнитьОбменДаннымиДляУзлаИнформационнойБазы(
											Отказ,
											УзелИнформационнойБазы,
											Ложь,
											Истина,
											Перечисления.ВидыТранспортаСообщенийОбмена.WS,
											ДлительнаяОперация,
											ИдентификаторОперации,
											ИдентификаторФайла,
											Истина,
											Пароль);
	
КонецПроцедуры

&НаКлиенте
Функция Подключаемый_СтраницаМастераОжиданиеСинхронизацииСправочниковВыгрузкаДлительнаяОперация_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)
	
	Если ДлительнаяОперация Тогда
		
		ПерейтиДалее = Ложь;
		
		ПодключитьОбработчикОжидания("ОбработчикОжиданияДлительнойОперации", 5, Истина);
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаМастераОжиданиеСинхронизацииСправочниковВыгрузкаДлительнаяОперацияОкончание_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)
	
	Если ДлительнаяОперацияЗавершена Тогда
		
		ОбменДаннымиВызовСервера.ЗафиксироватьВыполнениеВыгрузкиДанныхВРежимеДлительнойОперации(Объект.УзелИнформационнойБазы, ДатаНачалаОперации);
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаМастераОжиданиеСохраненияНастроек_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)
	
	// Обновление настройки обмена данными в этой базе и корреспонденте:
	//  - обновление информации значений по умолчанию в узлах планов обмена
	//  - регистрация всех данных, кроме справочников и ПВХ к выгрузке в этой базе и в корреспонденте
	
	ДлительнаяОперация = Ложь;
	ДлительнаяОперацияЗавершена = Ложь;
	ИдентификаторДлительнойОперации = "";
	
	ОбновитьНастройкиОбменаДанными(Отказ);
	
	Если Отказ Тогда
		
		Предупреждение(НСтр("ru = 'Возникли ошибки на этапе сохранения настроек.
					|Для решения проблем воспользуйтесь журналом регистрации.'"));
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаМастераОжиданиеСохраненияНастроекДлительнаяОперация_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)
	
	Если ДлительнаяОперация Тогда
		
		ПерейтиДалее = Ложь;
		
		ПодключитьОбработчикОжидания("ОбработчикОжиданияДлительнойОперации", 5, Истина);
		
	КонецЕсли;
	
КонецФункции

//

&НаКлиенте
Функция Подключаемый_СтраницаМастераОжиданиеСинхронизацииДанныхЗагрузка_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)
	
	ДлительнаяОперация = Ложь;
	ДлительнаяОперацияЗавершена = Ложь;
	ИдентификаторФайлаСообщенияВСервисе = "";
	ИдентификаторДлительнойОперации = "";
	
	СтраницаМастераОжиданиеСинхронизацииДанныхЗагрузка_ОбработкаДлительнойОперации(
											Отказ,
											Объект.УзелИнформационнойБазы,
											ДлительнаяОперация,
											ИдентификаторДлительнойОперации,
											ИдентификаторФайлаСообщенияВСервисе,
											ДатаНачалаОперации,
											Объект.WSПароль);
	
	Если Отказ Тогда
		
		Предупреждение(НСтр("ru = 'Возникли ошибки на этапе синхронизации данных.
					|Для решения проблем воспользуйтесь журналом регистрации.'"));
		
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Процедура СтраницаМастераОжиданиеСинхронизацииДанныхЗагрузка_ОбработкаДлительнойОперации(
											Отказ,
											УзелИнформационнойБазы,
											ДлительнаяОперация,
											ИдентификаторОперации,
											ИдентификаторФайла,
											ДатаНачалаОперации,
											Пароль)
	
	ДатаНачалаОперации = ТекущаяДатаСеанса();
	
	// запускаем выполнение обмена
	ОбменДаннымиСервер.ВыполнитьОбменДаннымиДляУзлаИнформационнойБазы(
											Отказ,
											УзелИнформационнойБазы,
											Истина,
											Ложь,
											Перечисления.ВидыТранспортаСообщенийОбмена.WS,
											ДлительнаяОперация,
											ИдентификаторОперации,
											ИдентификаторФайла,
											Истина,
											Пароль);
	
КонецПроцедуры

&НаКлиенте
Функция Подключаемый_СтраницаМастераОжиданиеСинхронизацииДанныхЗагрузкаДлительнаяОперация_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)
	
	Если ДлительнаяОперация Тогда
		
		ПерейтиДалее = Ложь;
		
		ПодключитьОбработчикОжидания("ОбработчикОжиданияДлительнойОперации", 5, Истина);
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаМастераОжиданиеСинхронизацииДанныхЗагрузкаДлительнаяОперацияОкончание_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)
	
	Если ДлительнаяОперацияЗавершена Тогда
		
		ОбменДаннымиВызовСервера.ВыполнитьОбменДаннымиДляУзлаИнформационнойБазыЗавершениеДлительнойОперации(
										Отказ,
										Объект.УзелИнформационнойБазы,
										ИдентификаторФайлаСообщенияВСервисе,
										ДатаНачалаОперации,
										Объект.WSПароль);
		
		Если Отказ Тогда
			
			Предупреждение(НСтр("ru = 'Возникли ошибки на этапе синхронизации данных.
						|Для решения проблем воспользуйтесь журналом регистрации.'"));
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаМастераОжиданиеСинхронизацииДанныхВыгрузка_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)
	
	ДлительнаяОперация = Ложь;
	ДлительнаяОперацияЗавершена = Ложь;
	ИдентификаторФайлаСообщенияВСервисе = "";
	ИдентификаторДлительнойОперации = "";
	
	СтраницаМастераОжиданиеСинхронизацииДанныхВыгрузка_ОбработкаДлительнойОперации(
											Отказ,
											Объект.УзелИнформационнойБазы,
											ДлительнаяОперация,
											ИдентификаторДлительнойОперации,
											ИдентификаторФайлаСообщенияВСервисе,
											ДатаНачалаОперации,
											Объект.WSПароль);
	
	Если Отказ Тогда
		
		Предупреждение(НСтр("ru = 'Возникли ошибки на этапе синхронизации данных.
					|Для решения проблем воспользуйтесь журналом регистрации.'"));
		
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Процедура СтраницаМастераОжиданиеСинхронизацииДанныхВыгрузка_ОбработкаДлительнойОперации(
											Отказ,
											УзелИнформационнойБазы,
											ДлительнаяОперация,
											ИдентификаторОперации,
											ИдентификаторФайла,
											ДатаНачалаОперации,
											Пароль)
	
	ДатаНачалаОперации = ТекущаяДатаСеанса();
	
	// запускаем выполнение обмена
	ОбменДаннымиСервер.ВыполнитьОбменДаннымиДляУзлаИнформационнойБазы(
											Отказ,
											УзелИнформационнойБазы,
											Ложь,
											Истина,
											Перечисления.ВидыТранспортаСообщенийОбмена.WS,
											ДлительнаяОперация,
											ИдентификаторОперации,
											ИдентификаторФайла,
											Истина,
											Пароль);
	
КонецПроцедуры

&НаКлиенте
Функция Подключаемый_СтраницаМастераОжиданиеСинхронизацииДанныхВыгрузкаДлительнаяОперация_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)
	
	Если ДлительнаяОперация Тогда
		
		ПерейтиДалее = Ложь;
		
		ПодключитьОбработчикОжидания("ОбработчикОжиданияДлительнойОперации", 5, Истина);
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаМастераОжиданиеСинхронизацииДанныхВыгрузкаДлительнаяОперацияОкончание_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)
	
	Если ДлительнаяОперацияЗавершена Тогда
		
		ОбменДаннымиВызовСервера.ЗафиксироватьВыполнениеВыгрузкиДанныхВРежимеДлительнойОперации(Объект.УзелИнформационнойБазы, ДатаНачалаОперации);
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаМастераНастройкиОтраженияДокументовВУчете_ПриОткрытии(Отказ, ПропуститьСтраницу, ЭтоПереходДалее)
	
	Если ЭтоПереходДалее Тогда
		
		ТипСоединения = "ВебСервис";
		
		ПроверитьНастройкиПараметровУчетаНаСервере(
										Ложь,
										ТипСоединения,
										Объект.ИмяПланаОбмена,
										СтруктураПараметровПодключенияВнешнегоСоединения(ТипСоединения));
		
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаМастераНастройкиОтраженияДокументовВУчете_ПриПереходеДалее(Отказ)
	
	ТипСоединения = "ВебСервис";
	
	ПроверитьНастройкиОтраженияДокументовВУчете(Отказ, ТипСоединения);
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПроверитьНастройкиПараметровУчетаНаСервере(
									Отказ,
									ТипСоединения,
									Объект.ИмяПланаОбмена,
									СтруктураПараметровПодключенияВнешнегоСоединения(ТипСоединения));
	
КонецФункции

&НаКлиенте
Функция Подключаемый_СтраницаМастераСозданиеОбменаДаннымиУспешноЗавершено_ПриОткрытии(Отказ, ПропуститьСтраницу, ЭтоПереходДалее)
	
	ПредопределенноеРасписаниеОбменаДаннымиПриИзмененииЗначения();
	
	ВыполнятьОбменДаннымиАвтоматическиПриИзмененииЗначения();
	
КонецФункции

//

&НаКлиенте
Процедура ПроверитьНастройкиОтраженияДокументовВУчете(Отказ, ТипСоединения)
	
	Если ПредусмотреныЗначенияПоУмолчаниюНаУзле Тогда
		
		// Проверяем заполнение реквизитов в форме дополнительных настроек
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ВерсияКорреспондента", ВерсияКонфигурацииКорреспондента);
		ПараметрыФормы.Вставить("ЗначенияПоУмолчаниюНаУзле", ЗначенияПоУмолчаниюНаУзле);
		
		ПроверитьЗаполнениеРеквизитовВФорме(Отказ, ФормаНастройкиЗначенийПоУмолчанию, ПараметрыФормы, "ОписаниеЗначенийПоУмолчанию");
		
	КонецЕсли;
	
	Если ПредусмотреныЗначенияПоУмолчаниюНаУзлеБазыКорреспондента Тогда
		
		// Проверяем заполнение реквизитов в форме дополнительных настроек
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ВерсияКорреспондента", ВерсияКонфигурацииКорреспондента);
		ПараметрыФормы.Вставить("ПараметрыВнешнегоСоединения", СтруктураПараметровПодключенияВнешнегоСоединения(ТипСоединения));
		ПараметрыФормы.Вставить("ЗначенияПоУмолчаниюНаУзле", ЗначенияПоУмолчаниюНаУзлеБазыКорреспондента);
		
		ПроверитьЗаполнениеРеквизитовВФорме(Отказ, ФормаНастройкиЗначенийПоУмолчаниюБазыКорреспондента, ПараметрыФормы, "ОписаниеЗначенийПоУмолчаниюБазыКорреспондента");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьНастройкиПараметровУчетаНаСервере(
									Отказ,
									Знач ТипСоединения,
									Знач ИмяПланаОбмена,
									ПараметрыПодключения)
	
	СообщениеОбОшибке = "";
	СообщениеОбОшибкеКорреспондента = "";
	
	КодУзла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Объект.УзелИнформационнойБазы, "Код");
	
	НастройкиПараметровУчетаЗаданы = ОбменДаннымиСервер.НастройкиПараметровУчетаВСистемеУстановлены(ИмяПланаОбмена, КодУзла, СообщениеОбОшибке);
	
	Если ТипСоединения = "ВебСервис" Тогда
		
		СтрокаСообщенияОбОшибке = "";
		
		Если Объект.ВерсияКорреспондента_2_1_1_7 Тогда
			
			WSПрокси = ОбменДаннымиСервер.ПолучитьWSПрокси_2_1_1_7(ПараметрыПодключения, СтрокаСообщенияОбОшибке);
			
		ИначеЕсли Объект.ВерсияКорреспондента_2_0_1_6 Тогда
			
			WSПрокси = ОбменДаннымиСервер.ПолучитьWSПрокси_2_0_1_6(ПараметрыПодключения, СтрокаСообщенияОбОшибке);
			
		Иначе
			
			WSПрокси = ОбменДаннымиСервер.ПолучитьWSПрокси(ПараметрыПодключения, СтрокаСообщенияОбОшибке);
			
		КонецЕсли;
		
		Если WSПрокси = Неопределено Тогда
			ОбменДаннымиСервер.СообщитьОбОшибке(СтрокаСообщенияОбОшибке, Отказ);
			Возврат;
		КонецЕсли;
		
		КодУзла = ОбменДаннымиВызовСервера.ПолучитьКодЭтогоУзлаДляПланаОбмена(Объект.ИмяПланаОбмена);
		
		// Получаем параметры второй информационной базы
		Если Объект.ВерсияКорреспондента_2_1_1_7 Тогда
			
			ПараметрыПриемника = СериализаторXDTO.ПрочитатьXDTO(WSПрокси.GetIBParameters(ИмяПланаОбмена, КодУзла, СообщениеОбОшибкеКорреспондента));
			
		ИначеЕсли Объект.ВерсияКорреспондента_2_0_1_6 Тогда
			
			ПараметрыПриемника = СериализаторXDTO.ПрочитатьXDTO(WSПрокси.GetIBParameters(ИмяПланаОбмена, КодУзла, СообщениеОбОшибкеКорреспондента));
			
		Иначе
			
			ПараметрыПриемника = ЗначениеИзСтрокиВнутр(WSПрокси.GetIBParameters(ИмяПланаОбмена, КодУзла, СообщениеОбОшибкеКорреспондента));
			
		КонецЕсли;
		
		НастройкиПараметровУчетаКорреспондентаЗаданы = ПараметрыПриемника.НастройкиПараметровУчетаЗаданы;
		
	ИначеЕсли ТипСоединения = "ВнешнееСоединение" Тогда
		
		СтрокаСообщенияОбОшибке = "";
		
		ВнешнееСоединение = ОбменДаннымиСервер.УстановитьВнешнееСоединение(ПараметрыПодключения, СтрокаСообщенияОбОшибке);
		
		Если ВнешнееСоединение = Неопределено Тогда
			ОбменДаннымиСервер.СообщитьОбОшибке(СтрокаСообщенияОбОшибке, Отказ);
			Возврат;
		КонецЕсли;
		
		КодУзла = ОбменДаннымиВызовСервера.ПолучитьКодЭтогоУзлаДляПланаОбмена(Объект.ИмяПланаОбмена);
		
		// Получаем параметры второй информационной базы
		Если Объект.ВерсияКорреспондента_2_1_1_7 Тогда
			
			ПараметрыПриемника = ОбщегоНазначения.ЗначениеИзСтрокиXML(ВнешнееСоединение.ОбменДаннымиВнешнееСоединение.ПолучитьПараметрыИнформационнойБазы_2_0_1_6(ИмяПланаОбмена, КодУзла, СообщениеОбОшибкеКорреспондента));
			
		ИначеЕсли Объект.ВерсияКорреспондента_2_0_1_6 Тогда
			
			ПараметрыПриемника = ОбщегоНазначения.ЗначениеИзСтрокиXML(ВнешнееСоединение.ОбменДаннымиВнешнееСоединение.ПолучитьПараметрыИнформационнойБазы_2_0_1_6(ИмяПланаОбмена, КодУзла, СообщениеОбОшибкеКорреспондента));
			
		Иначе
			
			ПараметрыПриемника = ЗначениеИзСтрокиВнутр(ВнешнееСоединение.ОбменДаннымиВнешнееСоединение.ПолучитьПараметрыИнформационнойБазы(ИмяПланаОбмена, КодУзла, СообщениеОбОшибкеКорреспондента));
			
		КонецЕсли;
		
		НастройкиПараметровУчетаКорреспондентаЗаданы = ПараметрыПриемника.НастройкиПараметровУчетаЗаданы;
		
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если Не НастройкиПараметровУчетаЗаданы Тогда
		
		Если ПустаяСтрока(СообщениеОбОшибке) Тогда
			СообщениеОбОшибке = НСтр("ru = 'Не заданы параметры учета в этой программе.'");
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке,, "НастройкиПараметровУчетаПоясняющаяНадпись",, Отказ);
		
	КонецЕсли;
	
	Если Не НастройкиПараметровУчетаКорреспондентаЗаданы Тогда
		
		Если ПустаяСтрока(СообщениеОбОшибкеКорреспондента) Тогда
			СообщениеОбОшибкеКорреспондента = НСтр("ru = 'Не заданы параметры учета в приложении, расположенном в Интернете.'");
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибкеКорреспондента,, "НастройкиПараметровУчетаКорреспондентаПоясняющаяНадпись",, Отказ);
		
	КонецЕсли;
	
	Элементы.НастройкиПараметровУчета.Видимость = Не НастройкиПараметровУчетаЗаданы;
	Элементы.НастройкиПараметровУчетаКорреспондента.Видимость = Не НастройкиПараметровУчетаКорреспондентаЗаданы;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗаданиеНастроекДляПервойБазы(Отказ, ТипСоединения = "ВебСервис")
	
	Если ПустаяСтрока(Объект.НаименованиеЭтойБазы) Тогда
		
		НСтрока = НСтр("ru = 'Укажите наименование этой программы.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтрока,, "Объект.НаименованиеЭтойБазы",, Отказ);
		
	КонецЕсли;
	
	Если ПустаяСтрока(Объект.НаименованиеВторойБазы) Тогда
		
		НСтрока = НСтр("ru = 'Укажите наименование приложения в Интернете.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтрока,, "Объект.НаименованиеВторойБазы",, Отказ);
		
	КонецЕсли;
	
	Если СокрЛП(Объект.ПрефиксИнформационнойБазыИсточника) = СокрЛП(Объект.ПрефиксИнформационнойБазыПриемника) Тогда
		
		НСтрока = НСтр("ru = 'Префиксы информационных баз должны быть различными.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтрока,, "Объект.ПрефиксИнформационнойБазыИсточника",, Отказ);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтрока,, "Объект.ПрефиксИнформационнойБазыПриемника",, Отказ);
		
		Элементы.ПрефиксИнформационнойБазыИсточникаОбменССервисом.Видимость = Истина;
		Элементы.ПрефиксИнформационнойБазыИсточникаОбменССервисом.Доступность = Истина;
		Элементы.ПрефиксИнформационнойБазыПриемникаОбменССервисом.Видимость = Истина;
		
		Элементы.ПрефиксИнформационнойБазыИсточникаОбменЧерезВебСервис.Видимость = Истина;
		Элементы.ПрефиксИнформационнойБазыИсточникаОбменЧерезВебСервис.Доступность = Истина;
		Элементы.ПрефиксИнформационнойБазыПриемникаОбменЧерезВебСервис.Видимость = Истина;
		Элементы.ПрефиксИнформационнойБазыПриемникаОбменЧерезВебСервис.Доступность = Истина;
		
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если ПредусмотреныНастройкиОтборовНаУзле Тогда
		
		// Проверяем заполнение реквизитов в форме
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ВерсияКорреспондента", ВерсияКонфигурацииКорреспондента);
		ПараметрыФормы.Вставить("ПараметрыПодключения", СтруктураПараметровПодключенияВнешнегоСоединения(ТипСоединения));
		ПараметрыФормы.Вставить("Настройки", КонтекстФормыНастройкиУзлов);
		ПараметрыФормы.Вставить("ПроверкаЗаполнения");
		
		ПроверитьЗаполнениеРеквизитовВФорме(Отказ, ФормаНастройкиУзлов, ПараметрыФормы, "ОписаниеНастроекВыгрузкиДанных");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьЗаданиеНастроекДляВторойБазы(Отказ, ТипСоединения)
	
	Если ПустаяСтрока(Объект.НаименованиеВторойБазы) Тогда
		
		НСтрока = НСтр("ru = 'Укажите наименование программы.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтрока,, "Объект.НаименованиеВторойБазы",, Отказ);
		
	КонецЕсли;
	
	Если СокрЛП(Объект.ПрефиксИнформационнойБазыИсточника) = СокрЛП(Объект.ПрефиксИнформационнойБазыПриемника) Тогда
		
		НСтрока = НСтр("ru = 'Префиксы информационных баз должны быть различными.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтрока,, "Объект.ПрефиксИнформационнойБазыПриемника",, Отказ);
		
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Если ПредусмотреныНастройкиОтборовНаУзлеБазыКорреспондента Тогда
		
		// Проверяем заполнение реквизитов в форме настроек ограничения миграции данных
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ВерсияКорреспондента", ВерсияКонфигурацииКорреспондента);
		ПараметрыФормы.Вставить("ПараметрыВнешнегоСоединения", СтруктураПараметровПодключенияВнешнегоСоединения(ТипСоединения));
		ПараметрыФормы.Вставить("НастройкаОтборовНаУзле", НастройкаОтборовНаУзлеБазыКорреспондента);
		
		ПроверитьЗаполнениеРеквизитовВФорме(Отказ, ФормаНастройкиУзлаБазыКорреспондента, ПараметрыФормы, "ОписаниеОграниченийПередачиДанныхБазыКорреспондента");
		
	КонецЕсли;
	
	Если ПредусмотреныЗначенияПоУмолчаниюНаУзлеБазыКорреспондента Тогда
		
		// Проверяем заполнение реквизитов в форме дополнительных настроек
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ВерсияКорреспондента", ВерсияКонфигурацииКорреспондента);
		ПараметрыФормы.Вставить("ПараметрыВнешнегоСоединения", СтруктураПараметровПодключенияВнешнегоСоединения(ТипСоединения));
		ПараметрыФормы.Вставить("ЗначенияПоУмолчаниюНаУзле", ЗначенияПоУмолчаниюНаУзлеБазыКорреспондента);
		
		ПроверитьЗаполнениеРеквизитовВФорме(Отказ, ФормаНастройкиЗначенийПоУмолчаниюБазыКорреспондента, ПараметрыФормы, "ОписаниеЗначенийПоУмолчаниюБазыКорреспондента");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СтраницаМастераЗаданиеПараметровТранспортаFILE_ПриПереходеДалееНаСервере(Отказ)
	
	Если Объект.ИспользоватьПараметрыТранспортаFILE Тогда
		
		ОбменДаннымиСервер.ПроверитьПодключениеОбработкиТранспортаСообщенийОбмена(Отказ, Объект, Перечисления.ВидыТранспортаСообщенийОбмена.FILE);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СтраницаМастераЗаданиеПараметровТранспортаFTP_ПриПереходеДалееНаСервере(Отказ)
	
	Если Объект.ИспользоватьПараметрыТранспортаFTP Тогда
		
		ОбменДаннымиСервер.ПроверитьПодключениеОбработкиТранспортаСообщенийОбмена(Отказ, Объект, Перечисления.ВидыТранспортаСообщенийОбмена.FTP);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СтраницаМастераЗаданиеПараметровТранспортаEMAIL_ПриПереходеДалееНаСервере(Отказ)
	
	Если Объект.ИспользоватьПараметрыТранспортаEMAIL Тогда
		
		ОбменДаннымиСервер.ПроверитьПодключениеОбработкиТранспортаСообщенийОбмена(Отказ, Объект, Перечисления.ВидыТранспортаСообщенийОбмена.EMAIL);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СтраницаМастераНастройкаПараметров_ПриПереходеДалееНаСервере(Отказ)
	
	Если Не ПланыОбмена[Объект.ИмяПланаОбмена].НайтиПоКоду(ОбменДаннымиСервер.КодУзлаПланаОбменаСтрокой(Объект.ПрефиксИнформационнойБазыПриемника)).Пустая() Тогда
		
		НСтрока = НСтр("ru = 'Значение префикса второй информационной базы не уникально.
			|В системе уже существует синхронизация данных для информационной базы (программы) с указанным префиксом.
			|Измените значение префикса или используйте существующую синхронизацию.'");
		//
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтрока,, "Объект.ПрефиксИнформационнойБазыПриемника",, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СтраницаМастераНастройкаПараметров_ПриОткрытииНаСервере(Отказ, ПропуститьСтраницу, ЭтоПереходДалее)
	
	// Заполняем список выбора транспортов обмена из доступных видов (выбранных пользователем)
	СписокЗначений = Новый СписокЗначений;
	
	Если Объект.ИспользоватьПараметрыТранспортаFILE Тогда
		ЗначениеПеречисления = Перечисления.ВидыТранспортаСообщенийОбмена.FILE;
		СписокЗначений.Добавить(ЗначениеПеречисления, Строка(ЗначениеПеречисления));
	КонецЕсли;
	
	Если Объект.ИспользоватьПараметрыТранспортаFTP Тогда
		ЗначениеПеречисления = Перечисления.ВидыТранспортаСообщенийОбмена.FTP;
		СписокЗначений.Добавить(ЗначениеПеречисления, Строка(ЗначениеПеречисления));
	КонецЕсли;
	
	Если Объект.ИспользоватьПараметрыТранспортаEMAIL Тогда
		ЗначениеПеречисления = Перечисления.ВидыТранспортаСообщенийОбмена.EMAIL;
		СписокЗначений.Добавить(ЗначениеПеречисления, Строка(ЗначениеПеречисления));
	КонецЕсли;
	
	СписокВыбора = Элементы.ВидТранспортаСообщенийОбмена.СписокВыбора;
	СписокВыбора.Очистить();
	
	Для Каждого Элемент Из СписокЗначений Цикл
		
		ЗаполнитьЗначенияСвойств(СписокВыбора.Добавить(), Элемент);
		
	КонецЦикла;
	
	// устанавливаем вид транспорта сообщений обмена по умолчанию
	// в зависимости от тех видов транспорта, которые были выбраны пользователем
	Если Объект.ИспользоватьПараметрыТранспортаFILE Тогда
		
		Объект.ВидТранспортаСообщенийОбмена = Перечисления.ВидыТранспортаСообщенийОбмена.FILE;
		
	ИначеЕсли Объект.ИспользоватьПараметрыТранспортаFTP Тогда
		
		Объект.ВидТранспортаСообщенийОбмена = Перечисления.ВидыТранспортаСообщенийОбмена.FTP;
		
	ИначеЕсли Объект.ИспользоватьПараметрыТранспортаEMAIL Тогда
		
		Объект.ВидТранспортаСообщенийОбмена = Перечисления.ВидыТранспортаСообщенийОбмена.EMAIL;
		
	КонецЕсли;
	
	Элементы.НадписьОписаниеОграниченийПередачиДанных.Заголовок = СтрЗаменить(Элементы.НадписьОписаниеОграниченийПередачиДанных.Заголовок,
																	   "%Программа%", СинонимПланаОбмена);
	Элементы.НадписьОписаниеОграниченийПередачиДанных2.Заголовок = Элементы.НадписьОписаниеОграниченийПередачиДанных.Заголовок;
	
	Элементы.НадписьОписаниеЗначенийПоУмолчанию.Заголовок = СтрЗаменить(Элементы.НадписьОписаниеЗначенийПоУмолчанию.Заголовок,
																 "%Программа%", СинонимПланаОбмена);
	Элементы.НадписьОписаниеЗначенийПоУмолчанию2.Заголовок = Элементы.НадписьОписаниеЗначенийПоУмолчанию.Заголовок;
	
КонецПроцедуры

&НаСервере
Процедура СтраницаМастераОжиданиеСозданияНастройкиОбменаДанными_ОбработкаДлительнойОперацииНаСервере(Отказ)
	
	// создаем настройку обмена
	НастроитьНовыйОбменДаннымиНаСервере(Отказ, НастройкаОтборовНаУзле, ЗначенияПоУмолчаниюНаУзле);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// выгружаем файл с настройками для второй ИБ
	Если Объект.ЭтоНастройкаРаспределеннойИнформационнойБазы Тогда
		
		ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
		
		ОбработкаОбъект.ВыполнитьВыгрузкуПараметровМастераВКонстанту(Отказ);
		
		ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
		
	ИначеЕсли Объект.ВидТранспортаСообщенийОбмена = Перечисления.ВидыТранспортаСообщенийОбмена.FILE Тогда
		
		АдресВременногоХранилища = "";
		
		ВыгрузитьНастройкиОбменаДляПриемника(Отказ, АдресВременногоХранилища);
		
		Если Не Отказ Тогда
			
			Объект.ИмяФайлаНастроекОбменаДанными = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(Объект.FILEКаталогОбменаИнформацией, ИмяФайлаНастроекДляПриемника);
			
			ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
			
			УдалитьИзВременногоХранилища(АдресВременногоХранилища);
			
			// получаем файл
			ДвоичныеДанные.Записать(Объект.ИмяФайлаНастроекОбменаДанными);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ВыполнитьОбменДаннымиСейчас21.Заголовок = СтрЗаменить(Элементы.ВыполнитьОбменДаннымиСейчас21.Заголовок, "%Программа%", СинонимПланаОбмена);
	
КонецПроцедуры

&НаСервере
Процедура СтраницаМастераОжиданиеПроверкиПодключенияВнешнегоСоединения_ОбработкаДлительнойОперацииНаСервере(Отказ)
	
	Если Объект.COMВариантРаботыИнформационнойБазы = 0 Тогда
		
		Если ПустаяСтрока(Объект.COMКаталогИнформационнойБазы) Тогда
			
			НСтрока = НСтр("ru = 'Укажите каталог информационной базы.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтрока,, "Объект.COMКаталогИнформационнойБазы",, Отказ);
			Отказ = Истина;
			Возврат;
			
		КонецЕсли;
		
	Иначе
		
		Если ПустаяСтрока(Объект.COMИмяСервера1СПредприятия) Тогда
			
			НСтрока = НСтр("ru = 'Укажите имя кластера серверов.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтрока,, "Объект.COMИмяСервера1СПредприятия",, Отказ);
			Отказ = Истина;
			Возврат;
			
		ИначеЕсли ПустаяСтрока(Объект.COMИмяИнформационнойБазыНаСервере1СПредприятия) Тогда
			
			НСтрока = НСтр("ru = 'Укажите имя информационной базы.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтрока,, "Объект.COMИмяИнформационнойБазыНаСервере1СПредприятия",, Отказ);
			Отказ = Истина;
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОшибкаПодключенияКомпоненты = Ложь;
	СтрокаСообщенияОбОшибке = "";
	
	ВнешнееСоединение = ОбменДаннымиСервер.УстановитьВнешнееСоединение(Объект, СтрокаСообщенияОбОшибке, ОшибкаПодключенияКомпоненты);
	
	Если ВнешнееСоединение = Неопределено Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщенияОбОшибке,,,, Отказ);
		
		Если ОшибкаПодключенияКомпоненты И ИнформационнаяБазаФайловая Тогда
			Элементы.ГруппаComcntr.Видимость = Истина;
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	// {Обработчик: ПриПодключенииККорреспонденту} Начало
	ВерсияКонфигурацииКорреспондента = ВнешнееСоединение.Метаданные.Версия;
	
	ПриПодключенииККорреспонденту(Отказ, ВерсияКонфигурацииКорреспондента);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	// {Обработчик: ПриПодключенииККорреспонденту} Окончание
	
	ВерсииКорреспондента = ОбменДаннымиСервер.ВерсииКорреспондентаЧерезВнешнееСоединение(ВнешнееСоединение);
	
	Объект.ВерсияКорреспондента_2_0_1_6 = (ВерсииКорреспондента.Найти("2.0.1.6") <> Неопределено);
	Объект.ВерсияКорреспондента_2_1_1_7 = (ВерсииКорреспондента.Найти("2.1.1.7") <> Неопределено);
	
	Попытка
		ПланОбменаСуществует = ВнешнееСоединение.ОбменДаннымиВнешнееСоединение.ПланОбменаСуществует(Объект.ИмяПланаОбмена);
	Исключение
		ПланОбменаСуществует = Ложь;
	КонецПопытки;
	
	Если Не ПланОбменаСуществует Тогда
		
		Сообщение = НСтр("ru = 'Другая программа не предназначена для синхронизации с текущей.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Сообщение,,,, Отказ);
		Возврат;
		
	КонецЕсли;
	
	Если НРег(СтрокаСоединенияИнформационнойБазы()) = НРег(ВнешнееСоединение.СтрокаСоединенияИнформационнойБазы()) Тогда
		
		Сообщение = НСтр("ru = 'Настройки подключения указывают на текущую информационную базу.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Сообщение,,,, Отказ);
		Возврат;
		
	КонецЕсли;
	
	Объект.ПрефиксИнформационнойБазыПриемника           = ВнешнееСоединение.ПолучитьФункциональнуюОпцию("ПрефиксИнформационнойБазы");
	Объект.ПрефиксИнформационнойБазыПриемникаУстановлен = ЗначениеЗаполнено(Объект.ПрефиксИнформационнойБазыПриемника);
	
	Если Не Объект.ПрефиксИнформационнойБазыПриемникаУстановлен Тогда
		Объект.ПрефиксИнформационнойБазыПриемника = ВнешнееСоединение.ОбменДаннымиВнешнееСоединение.ПрефиксИнформационнойБазыПоУмолчанию();
	КонецЕсли;
	
	Элементы.ПрефиксИнформационнойБазыПриемника.Видимость = Не Объект.ПрефиксИнформационнойБазыПриемникаУстановлен;
	
	// Проверка на существование обмена с базой-корреспондентом
	ПроверитьНаличиеСуществующегоОбменаДаннымиСВторойБазой(Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Объект.НаименованиеВторойБазы = ВнешнееСоединение.ОбменДаннымиВнешнееСоединение.НаименованиеПредопределенногоУзлаПланаОбмена(Объект.ИмяПланаОбмена);
	ЗаданоНаименованиеВторойБазы = Не ПустаяСтрока(Объект.НаименованиеВторойБазы);
	
	Элементы.НаименованиеВторойБазы2.ТолькоПросмотр = ЗаданоНаименованиеВторойБазы;
	
	Если Не ЗаданоНаименованиеВторойБазы Тогда
		
		Объект.НаименованиеВторойБазы = ВнешнееСоединение.ОбменДаннымиПовтИсп.ИмяЭтойИнформационнойБазы();
		
	КонецЕсли;
	
	ФормаНастройкиУзла = "";
	ФормаНастройкиУзлаБазыКорреспондента = "";
	ФормаНастройкиЗначенийПоУмолчанию = "";
	ФормаНастройкиЗначенийПоУмолчаниюБазыКорреспондента = "";
	ФормаНастройкиУзлов = "";
	
	НастройкаОтборовНаУзле    = ОбменДаннымиСервер.НастройкаОтборовНаУзле(Объект.ИмяПланаОбмена, ВерсияКонфигурацииКорреспондента, ФормаНастройкиУзла);
	ЗначенияПоУмолчаниюНаУзле = ОбменДаннымиСервер.ЗначенияПоУмолчаниюНаУзле(Объект.ИмяПланаОбмена, ВерсияКонфигурацииКорреспондента, ФормаНастройкиЗначенийПоУмолчанию);
	
	НастройкаОтборовНаУзлеБазыКорреспондента = ОбменДаннымиСервер.НастройкаОтборовНаУзлеБазыКорреспондента(Объект.ИмяПланаОбмена, ВерсияКонфигурацииКорреспондента, ФормаНастройкиУзлаБазыКорреспондента);
	ЗначенияПоУмолчаниюНаУзлеБазыКорреспондента = ОбменДаннымиСервер.ЗначенияПоУмолчаниюНаУзлеБазыКорреспондента(Объект.ИмяПланаОбмена, ВерсияКонфигурацииКорреспондента, ФормаНастройкиЗначенийПоУмолчаниюБазыКорреспондента);
	
	ПредусмотреныНастройкиОтборовНаУзлеБазыКорреспондента    = НастройкаОтборовНаУзлеБазыКорреспондента.Количество() > 0;
	ПредусмотреныЗначенияПоУмолчаниюНаУзлеБазыКорреспондента = ЗначенияПоУмолчаниюНаУзлеБазыКорреспондента.Количество() > 0;
	
	Элементы.РамкаГруппыОграничений4.Видимость                          = ПредусмотреныНастройкиОтборовНаУзлеБазыКорреспондента;
	Элементы.РамкаГруппыЗначенийПоУмолчанию4.Видимость                  = ПредусмотреныЗначенияПоУмолчаниюНаУзлеБазыКорреспондента;
	Элементы.РамкаГруппыЗначенийПоУмолчаниюБазыКорреспондента.Видимость = ПредусмотреныЗначенияПоУмолчаниюНаУзлеБазыКорреспондента;
	
	ОписаниеОграниченийПередачиДанныхБазыКорреспондента = ОбменДаннымиСервер.ОписаниеОграниченийПередачиДанныхБазыКорреспондента(Объект.ИмяПланаОбмена, НастройкаОтборовНаУзлеБазыКорреспондента, ВерсияКонфигурацииКорреспондента);
	ОписаниеЗначенийПоУмолчаниюБазыКорреспондента       = ОбменДаннымиСервер.ОписаниеЗначенийПоУмолчаниюБазыКорреспондента(Объект.ИмяПланаОбмена, ЗначенияПоУмолчаниюНаУзлеБазыКорреспондента, ВерсияКонфигурацииКорреспондента);
	
	НастройкиПараметровУчетаКорреспондентаПоясняющаяНадпись = ОбменДаннымиСервер.ПояснениеДляНастройкиПараметровУчетаБазыКорреспондента(Объект.ИмяПланаОбмена, ВерсияКонфигурацииКорреспондента);
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьНаличиеСуществующегоОбменаДаннымиСВторойБазой(Отказ)
	
	КодУзла = ?(ПустаяСтрока(Объект.КодУзлаКорреспондента),
					ОбменДаннымиСервер.КодУзлаПланаОбменаСтрокой(Объект.ПрефиксИнформационнойБазыПриемника),
					Объект.КодУзлаКорреспондента);
	
	Если Не ПустаяСтрока(КодУзла)
		И Не ПланыОбмена[Объект.ИмяПланаОбмена].НайтиПоКоду(КодУзла).Пустая() Тогда
		
		Сообщение = НСтр("ru = 'Синхронизация данных уже настроена в системе. Используйте существующую синхронизацию.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Сообщение,,,, Отказ);
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Переопределяемая часть - Инициализация переходов помощника

&НаСервере
Процедура ТаблицаПереходовПервогоЭтапаНастройкиОбмена()
	
	ТаблицаПереходов.Очистить();
	
	ТаблицаПереходовНоваяСтрока(1, "СтраницаМастераНачало",                                 "", "СтраницаНавигацииНачало");
	ТаблицаПереходовНоваяСтрока(2, "СтраницаМастераВыборРежимаРаботыПомощника",             "", "СтраницаНавигацииПродолжение", "",,"СтраницаМастераВыборРежимаРаботыПомощника_ПриОткрытии");
	ТаблицаПереходовНоваяСтрока(3, "СтраницаМастераЗаданиеПараметровТранспортаFILE",        "", "СтраницаНавигацииПродолжение", "СтраницаМастераЗаданиеПараметровТранспортаFILE_ПриПереходеДалее",,"СтраницаМастераЗаданиеПараметровТранспортаFILE_ПриОткрытии");
	ТаблицаПереходовНоваяСтрока(4, "СтраницаМастераЗаданиеПараметровТранспортаFTP",         "", "СтраницаНавигацииПродолжение", "СтраницаМастераЗаданиеПараметровТранспортаFTP_ПриПереходеДалее",,"СтраницаМастераЗаданиеПараметровТранспортаFTP_ПриОткрытии");
	ТаблицаПереходовНоваяСтрока(5, "СтраницаМастераЗаданиеПараметровТранспортаEMAIL",       "", "СтраницаНавигацииПродолжение", "СтраницаМастераЗаданиеПараметровТранспортаEMAIL_ПриПереходеДалее",,"СтраницаМастераЗаданиеПараметровТранспортаEMAIL_ПриОткрытии");
	ТаблицаПереходовНоваяСтрока(6, "СтраницаМастераНастройкаПараметров",                    "", "СтраницаНавигацииПродолжение", "СтраницаМастераНастройкаПараметров_ПриПереходеДалее",, "СтраницаМастераНастройкаПараметров_ПриОткрытии");
	ТаблицаПереходовНоваяСтрока(7, "СтраницаМастераИтогНастройкиОбмена",                    "", "СтраницаНавигацииПродолжение",,,"СтраницаМастераИтогНастройкиОбмена_ПриОткрытии");
	ТаблицаПереходовНоваяСтрока(8, "СтраницаМастераОжиданиеСозданияНастройкиОбменаДанными", "", "СтраницаНавигацииОжидание",,,, Истина, "СтраницаМастераОжиданиеСозданияНастройкиОбменаДанными_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрока(9, "СтраницаМастераОкончаниеСВыгрузкойНастройки",           "", "СтраницаНавигацииОкончание");
	
КонецПроцедуры

&НаСервере
Процедура ТаблицаПереходовВторогоЭтапаНастройкиОбмена()
	
	ТаблицаПереходов.Очистить();
	
	ТаблицаПереходовНоваяСтрока(1, "СтраницаМастераНачало",                                   "", "СтраницаНавигацииНачало", "СтраницаМастераНачало_ПриПереходеДалее");
	ТаблицаПереходовНоваяСтрока(2, "СтраницаМастераЗаданиеПараметровТранспортаFILE",          "", "СтраницаНавигацииПродолжение", "СтраницаМастераЗаданиеПараметровТранспортаFILE_ПриПереходеДалее",,"СтраницаМастераЗаданиеПараметровТранспортаFILE_ПриОткрытии");
	ТаблицаПереходовНоваяСтрока(3, "СтраницаМастераЗаданиеПараметровТранспортаFTP",           "", "СтраницаНавигацииПродолжение", "СтраницаМастераЗаданиеПараметровТранспортаFTP_ПриПереходеДалее",,"СтраницаМастераЗаданиеПараметровТранспортаFTP_ПриОткрытии");
	ТаблицаПереходовНоваяСтрока(4, "СтраницаМастераЗаданиеПараметровТранспортаEMAIL",         "", "СтраницаНавигацииПродолжение", "СтраницаМастераЗаданиеПараметровТранспортаEMAIL_ПриПереходеДалее",,"СтраницаМастераЗаданиеПараметровТранспортаEMAIL_ПриОткрытии");
	ТаблицаПереходовНоваяСтрока(5, "СтраницаМастераНастройкаПараметровВторогоЭтапаНастройки", "", "СтраницаНавигацииПродолжение", "СтраницаМастераНастройкаПараметровВторогоЭтапаНастройки_ПриПереходеДалее",, "СтраницаМастераНастройкаПараметров_ПриОткрытии");
	ТаблицаПереходовНоваяСтрока(6, "СтраницаМастераИтогНастройкиОбмена",                      "", "СтраницаНавигацииОкончаниеИНазад",,,"СтраницаМастераИтогНастройкиОбмена_ПриОткрытии");
	
КонецПроцедуры

&НаСервере
Процедура ТаблицаПереходовНастройкиОбменаЧерезВнешнееСоединение()
	
	ТаблицаПереходов.Очистить();
	
	ТаблицаПереходовНоваяСтрока(1, "СтраницаМастераНачало",                                             "", "СтраницаНавигацииНачало");
	ТаблицаПереходовНоваяСтрока(2, "СтраницаМастераВыборРежимаРаботыПомощника",                         "", "СтраницаНавигацииПродолжение");
	ТаблицаПереходовНоваяСтрока(3, "СтраницаМастераОжиданиеПроверкиПодключенияВнешнегоСоединения",      "", "СтраницаНавигацииОжидание",,,, Истина, "СтраницаМастераОжиданиеПроверкиПодключенияВнешнегоСоединения_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрока(4, "СтраницаМастераНастройкаПараметровДляВнешнегоСоединенияПервойБазы", "", "СтраницаНавигацииПродолжение", "СтраницаМастераНастройкаПараметровДляВнешнегоСоединенияПервойБазы_ПриПереходеДалее",,"СтраницаМастераНастройкаПараметровДляВнешнегоСоединенияПервойБазы_ПриОткрытии");
	ТаблицаПереходовНоваяСтрока(5, "СтраницаМастераНастройкаПараметровДляВнешнегоСоединенияВторойБазы", "", "СтраницаНавигацииПродолжение", "СтраницаМастераНастройкаПараметровДляВнешнегоСоединенияВторойБазы_ПриПереходеДалее",,"СтраницаМастераНастройкаПараметровДляВнешнегоСоединенияВторойБазы_ПриОткрытии");
	ТаблицаПереходовНоваяСтрока(6, "СтраницаМастераИтогНастройкиОбмена",                                "", "СтраницаНавигацииПродолжение",,,"СтраницаМастераИтогНастройкиОбмена_ПриОткрытии_ВнешнееСоединение");
	ТаблицаПереходовНоваяСтрока(7, "СтраницаМастераОжиданиеСозданияНастройкиОбменаДанными",             "", "СтраницаНавигацииОжидание",,,, Истина, "СтраницаМастераОжиданиеСозданияНастройкиОбменаДаннымиЧерезВнешнееСоединение_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрока(8, "СтраницаМастераОкончаниеСОбменомПоВнешнемуСоединению",              "", "СтраницаНавигацииОкончание");
	
КонецПроцедуры

&НаСервере
Процедура ТаблицаПереходовНастройкиОбменаЧерезВебСервис()
	
	ТаблицаПереходов.Очистить();
	
	ТаблицаПереходовНоваяСтрока(1,  "СтраницаМастераНачало",, "СтраницаНавигацииНачало");
	ТаблицаПереходовНоваяСтрока(2,  "СтраницаМастераВыборРежимаРаботыПомощника", , "СтраницаНавигацииПродолжение");
	
	// Задание параметров подключения; Проверка подключения
	ТаблицаПереходовНоваяСтрока(3,  "СтраницаМастераОжиданиеПроверкиПодключенияКСервису", "", "СтраницаНавигацииОжидание",,,, Истина, "СтраницаМастераОжиданиеПроверкиПодключенияЧерезВебСервис_ОбработкаДлительнойОперации");
	
	// Настройка параметров для выгрузки данных (отборы на узлах)
	ТаблицаПереходовНоваяСтрока(4,  "СтраницаМастераНастройкаПараметровОбменаДаннымиЧерезВебСервис", "", "СтраницаНавигацииПродолжение", "СтраницаМастераНастройкаПараметровОбменаДанными_ПриПереходеДалее",, "СтраницаМастераНастройкаПараметровОбменаДанными_ПриОткрытии");
	
	// Создание настройки обмена; Регистрация справочников для выгрузки
	ТаблицаПереходовНоваяСтрока(5,  "СтраницаМастераОжиданиеАнализаДанныхСозданиеНастройкиОбмена",  "", "СтраницаНавигацииОжидание",,,, Истина, "СтраницаМастераОжиданиеАнализаДанныхСозданиеНастройкиОбмена_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрока(6,  "СтраницаМастераОжиданиеАнализаДанныхСозданиеНастройкиОбмена",, "СтраницаНавигацииОжидание",,,, Истина, "СтраницаМастераОжиданиеАнализаДанныхСозданиеНастройкиОбменаДлительнаяОперация_ОбработкаДлительнойОперации");
	
	// Получение справочников от корреспондента
	ТаблицаПереходовНоваяСтрока(7,  "СтраницаМастераОжиданиеАнализаДанныхПолучениеСообщения",, "СтраницаНавигацииОжидание",,,, Истина, "СтраницаМастераОжиданиеАнализаДанныхПолучениеСообщения_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрока(8,  "СтраницаМастераОжиданиеАнализаДанныхПолучениеСообщения",, "СтраницаНавигацииОжидание",,,, Истина, "СтраницаМастераОжиданиеАнализаДанныхПолучениеСообщенияДлительнаяОперация_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрока(9,  "СтраницаМастераОжиданиеАнализаДанныхПолучениеСообщения",, "СтраницаНавигацииОжидание",,,, Истина, "СтраницаМастераОжиданиеАнализаДанныхПолучениеСообщенияДлительнаяОперацияОкончание_ОбработкаДлительнойОперации");
	
	// Выполнение автоматического сопоставления данных; Получение статистики сопоставления
	ТаблицаПереходовНоваяСтрока(10, "СтраницаМастераОжиданиеАнализаДанныхАвтоматическоеСопоставление",, "СтраницаНавигацииОжидание",,,, Истина, "СтраницаМастераОжиданиеАнализаДанныхАвтоматическоеСопоставление_ОбработкаДлительнойОперации");
	
	// Ручное сопоставление данных
	ТаблицаПереходовНоваяСтрока(11, "СтраницаМастераСопоставлениеДанных",, "СтраницаНавигацииПродолжениеТолькоДалее", "СтраницаМастераСопоставлениеДанных_ПриПереходеДалее",, "СтраницаМастераСопоставлениеДанных_ПриОткрытии");
	
	// Синхронизация справочников
	ТаблицаПереходовНоваяСтрока(12, "ОжиданиеСинхронизацииДанных",, "СтраницаНавигацииОжидание",,,, Истина, "СтраницаМастераОжиданиеСинхронизацииСправочниковЗагрузка_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрока(13, "ОжиданиеСинхронизацииДанных",, "СтраницаНавигацииОжидание",,,, Истина, "СтраницаМастераОжиданиеСинхронизацииСправочниковВыгрузка_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрока(14, "ОжиданиеСинхронизацииДанных",, "СтраницаНавигацииОжидание",,,, Истина, "СтраницаМастераОжиданиеСинхронизацииСправочниковВыгрузкаДлительнаяОперация_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрока(15, "ОжиданиеСинхронизацииДанных",, "СтраницаНавигацииОжидание",,,, Истина, "СтраницаМастераОжиданиеСинхронизацииСправочниковВыгрузкаДлительнаяОперацияОкончание_ОбработкаДлительнойОперации");
	
	// Настройки параметров учета; Значения по умолчанию при загрузке данных.
	ТаблицаПереходовНоваяСтрока(16, "СтраницаМастераНастройкиОтраженияДокументовВУчете",, "СтраницаНавигацииПродолжениеТолькоДалее", "СтраницаМастераНастройкиОтраженияДокументовВУчете_ПриПереходеДалее",, "СтраницаМастераНастройкиОтраженияДокументовВУчете_ПриОткрытии");
	
	// Сохранение настроек; Регистрация всех данных к выгрузке, кроме справочников
	ТаблицаПереходовНоваяСтрока(17, "СтраницаМастераОжиданиеСохраненияНастроек",, "СтраницаНавигацииОжидание",,,, Истина, "СтраницаМастераОжиданиеСохраненияНастроек_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрока(18, "СтраницаМастераОжиданиеСохраненияНастроек",, "СтраницаНавигацииОжидание",,,, Истина, "СтраницаМастераОжиданиеСохраненияНастроекДлительнаяОперация_ОбработкаДлительнойОперации");
	
	// Синхронизация всех данных, кроме справочников
	ТаблицаПереходовНоваяСтрока(19, "ОжиданиеСинхронизацииДанных",, "СтраницаНавигацииОжидание",,,, Истина, "СтраницаМастераОжиданиеСинхронизацииДанныхЗагрузка_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрока(20, "ОжиданиеСинхронизацииДанных",, "СтраницаНавигацииОжидание",,,, Истина, "СтраницаМастераОжиданиеСинхронизацииДанныхЗагрузкаДлительнаяОперация_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрока(21, "ОжиданиеСинхронизацииДанных",, "СтраницаНавигацииОжидание",,,, Истина, "СтраницаМастераОжиданиеСинхронизацииДанныхЗагрузкаДлительнаяОперацияОкончание_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрока(22, "ОжиданиеСинхронизацииДанных",, "СтраницаНавигацииОжидание",,,, Истина, "СтраницаМастераОжиданиеСинхронизацииДанныхВыгрузка_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрока(23, "ОжиданиеСинхронизацииДанных",, "СтраницаНавигацииОжидание",,,, Истина, "СтраницаМастераОжиданиеСинхронизацииДанныхВыгрузкаДлительнаяОперация_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрока(24, "ОжиданиеСинхронизацииДанных",, "СтраницаНавигацииОжидание",,,, Истина, "СтраницаМастераОжиданиеСинхронизацииДанныхВыгрузкаДлительнаяОперацияОкончание_ОбработкаДлительнойОперации");
	
	ТаблицаПереходовНоваяСтрока(25, "СтраницаМастераСозданиеОбменаДаннымиУспешноЗавершено",, "СтраницаНавигацииОкончание",,, "СтраницаМастераСозданиеОбменаДаннымиУспешноЗавершено_ПриОткрытии");
	
КонецПроцедуры

&НаСервере
Процедура ТаблицаПереходовРасширеннойНастройкиОбменаССервисом()
	
	ТаблицаПереходов.Очистить();
	
	// Задание параметров подключения; Проверка подключения
	ТаблицаПереходовНоваяСтрока(1,  "СтраницаМастераНачалоНастройкиОбменаССервисом", "", "СтраницаНавигацииНачало");
	ТаблицаПереходовНоваяСтрока(2,  "СтраницаМастераОжиданиеПроверкиПодключенияКСервису", "", "СтраницаНавигацииОжидание",,,, Истина, "СтраницаМастераОжиданиеПроверкиПодключенияЧерезВебСервис_ОбработкаДлительнойОперации");
	
	// Настройка параметров для выгрузки данных (отборы на узлах)
	ТаблицаПереходовНоваяСтрока(3,  "СтраницаМастераНастройкаПараметровОбменаДанными", "", "СтраницаНавигацииПродолжение", "СтраницаМастераНастройкаПараметровОбменаДанными_ПриПереходеДалее",, "СтраницаМастераНастройкаПараметровОбменаДанными_ПриОткрытии");
	
	// Создание настройки обмена; Регистрация справочников для выгрузки
	ТаблицаПереходовНоваяСтрока(4,  "СтраницаМастераОжиданиеАнализаДанныхСозданиеНастройкиОбмена",  "", "СтраницаНавигацииОжидание",,,, Истина, "СтраницаМастераОжиданиеАнализаДанныхСозданиеНастройкиОбмена_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрока(5,  "СтраницаМастераОжиданиеАнализаДанныхСозданиеНастройкиОбмена",, "СтраницаНавигацииОжидание",,,, Истина, "СтраницаМастераОжиданиеАнализаДанныхСозданиеНастройкиОбменаДлительнаяОперация_ОбработкаДлительнойОперации");
	
	// Получение справочников от корреспондента
	ТаблицаПереходовНоваяСтрока(6,  "СтраницаМастераОжиданиеАнализаДанныхПолучениеСообщения",, "СтраницаНавигацииОжидание",,,, Истина, "СтраницаМастераОжиданиеАнализаДанныхПолучениеСообщения_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрока(7,  "СтраницаМастераОжиданиеАнализаДанныхПолучениеСообщения",, "СтраницаНавигацииОжидание",,,, Истина, "СтраницаМастераОжиданиеАнализаДанныхПолучениеСообщенияДлительнаяОперация_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрока(8,  "СтраницаМастераОжиданиеАнализаДанныхПолучениеСообщения",, "СтраницаНавигацииОжидание",,,, Истина, "СтраницаМастераОжиданиеАнализаДанныхПолучениеСообщенияДлительнаяОперацияОкончание_ОбработкаДлительнойОперации");
	
	// Выполнение автоматического сопоставления данных; Получение статистики сопоставления
	ТаблицаПереходовНоваяСтрока(9,  "СтраницаМастераОжиданиеАнализаДанныхАвтоматическоеСопоставление",, "СтраницаНавигацииОжидание",,,, Истина, "СтраницаМастераОжиданиеАнализаДанныхАвтоматическоеСопоставление_ОбработкаДлительнойОперации");
	
	// Ручное сопоставление данных
	ТаблицаПереходовНоваяСтрока(10, "СтраницаМастераСопоставлениеДанных",, "СтраницаНавигацииПродолжениеТолькоДалее", "СтраницаМастераСопоставлениеДанных_ПриПереходеДалее",, "СтраницаМастераСопоставлениеДанных_ПриОткрытии");
	
	// Синхронизация справочников
	ТаблицаПереходовНоваяСтрока(11, "ОжиданиеСинхронизацииДанных",, "СтраницаНавигацииОжидание",,,, Истина, "СтраницаМастераОжиданиеСинхронизацииСправочниковЗагрузка_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрока(12, "ОжиданиеСинхронизацииДанных",, "СтраницаНавигацииОжидание",,,, Истина, "СтраницаМастераОжиданиеСинхронизацииСправочниковВыгрузка_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрока(13, "ОжиданиеСинхронизацииДанных",, "СтраницаНавигацииОжидание",,,, Истина, "СтраницаМастераОжиданиеСинхронизацииСправочниковВыгрузкаДлительнаяОперация_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрока(14, "ОжиданиеСинхронизацииДанных",, "СтраницаНавигацииОжидание",,,, Истина, "СтраницаМастераОжиданиеСинхронизацииСправочниковВыгрузкаДлительнаяОперацияОкончание_ОбработкаДлительнойОперации");
	
	// Настройки параметров учета; Значения по умолчанию при загрузке данных.
	ТаблицаПереходовНоваяСтрока(15, "СтраницаМастераНастройкиОтраженияДокументовВУчете",, "СтраницаНавигацииПродолжениеТолькоДалее", "СтраницаМастераНастройкиОтраженияДокументовВУчете_ПриПереходеДалее",, "СтраницаМастераНастройкиОтраженияДокументовВУчете_ПриОткрытии");
	
	// Сохранение настроек; Регистрация всех данных к выгрузке, кроме справочников
	ТаблицаПереходовНоваяСтрока(16, "СтраницаМастераОжиданиеСохраненияНастроек",, "СтраницаНавигацииОжидание",,,, Истина, "СтраницаМастераОжиданиеСохраненияНастроек_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрока(17, "СтраницаМастераОжиданиеСохраненияНастроек",, "СтраницаНавигацииОжидание",,,, Истина, "СтраницаМастераОжиданиеСохраненияНастроекДлительнаяОперация_ОбработкаДлительнойОперации");
	
	// Синхронизация всех данных, кроме справочников
	ТаблицаПереходовНоваяСтрока(18, "ОжиданиеСинхронизацииДанных",, "СтраницаНавигацииОжидание",,,, Истина, "СтраницаМастераОжиданиеСинхронизацииДанныхЗагрузка_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрока(19, "ОжиданиеСинхронизацииДанных",, "СтраницаНавигацииОжидание",,,, Истина, "СтраницаМастераОжиданиеСинхронизацииДанныхЗагрузкаДлительнаяОперация_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрока(20, "ОжиданиеСинхронизацииДанных",, "СтраницаНавигацииОжидание",,,, Истина, "СтраницаМастераОжиданиеСинхронизацииДанныхЗагрузкаДлительнаяОперацияОкончание_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрока(21, "ОжиданиеСинхронизацииДанных",, "СтраницаНавигацииОжидание",,,, Истина, "СтраницаМастераОжиданиеСинхронизацииДанныхВыгрузка_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрока(22, "ОжиданиеСинхронизацииДанных",, "СтраницаНавигацииОжидание",,,, Истина, "СтраницаМастераОжиданиеСинхронизацииДанныхВыгрузкаДлительнаяОперация_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрока(23, "ОжиданиеСинхронизацииДанных",, "СтраницаНавигацииОжидание",,,, Истина, "СтраницаМастераОжиданиеСинхронизацииДанныхВыгрузкаДлительнаяОперацияОкончание_ОбработкаДлительнойОперации");
	
	ТаблицаПереходовНоваяСтрока(24, "СтраницаМастераСозданиеОбменаДаннымиУспешноЗавершено",, "СтраницаНавигацииОкончание",,, "СтраницаМастераСозданиеОбменаДаннымиУспешноЗавершено_ПриОткрытии");
	
КонецПроцедуры
