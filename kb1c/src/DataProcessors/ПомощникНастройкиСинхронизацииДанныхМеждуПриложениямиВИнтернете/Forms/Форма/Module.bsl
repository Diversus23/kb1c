&НаКлиенте
Перем ЗакрытьФормуБезусловно;

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Переопределяемая часть

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(Параметры.ИмяПланаОбмена) Тогда
		ВызватьИсключение НСтр("ru='Обработка не предназначена для непосредственного использования.'");
	КонецЕсли;
	
	// Включать синхронизацию данных может только администратор обмена (для абонента).
	ОбменДаннымиСервер.ПроверитьВозможностьАдминистрированияОбменов();
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не ОбменДаннымиВМоделиСервисаПовтИсп.СинхронизацияДанныхПоддерживается() Тогда
		
		ВызватьИсключение НСтр("ru = 'Синхронизация данных для конфигурации не поддерживается!'");
		
	КонецЕсли;
	
	ИмяПланаОбмена              = Параметры.ИмяПланаОбмена;
	ОбластьДанныхКорреспондента = Параметры.ОбластьДанныхКорреспондента;
	НаименованиеКорреспондента  = Параметры.НаименованиеКорреспондента;
	КонечнаяТочкаКорреспондента = Параметры.КонечнаяТочкаКорреспондента;
	Префикс                     = Параметры.Префикс;
	ПрефиксКорреспондента       = Параметры.ПрефиксКорреспондента;
	ВерсияКорреспондента        = Параметры.ВерсияКорреспондента;
	
	НаименованиеЭтогоПриложения = ОбменДаннымиВМоделиСервиса.СформироватьНаименованиеПредопределенногоУзла();
	
	// Получаем узел корреспондента, при необходимости создаем.
	КодКорреспондента = ОбменДаннымиВМоделиСервиса.КодУзлаПланаОбменаВСервисе(ОбластьДанныхКорреспондента);
	
	Корреспондент = Неопределено;
	
	// получаем значения по умолчанию для плана обмена
	МенеджерПланаОбмена = ПланыОбмена[ИмяПланаОбмена];
	
	СсылкаНаПодробноеОписание = МенеджерПланаОбмена.ПодробнаяИнформацияПоОбмену();
	
	ФормаНастройкиУзлов = "";
	ФормаНастройкиЗначенийПоУмолчанию = "";
	ФормаНастройкиЗначенийПоУмолчаниюБазыКорреспондента = "";
	
	НастройкаОтборовНаУзле = ОбменДаннымиСервер.НастройкаОтборовНаУзле(ИмяПланаОбмена, ВерсияКорреспондента);
	ЗначенияПоУмолчаниюНаУзле = ОбменДаннымиСервер.ЗначенияПоУмолчаниюНаУзле(ИмяПланаОбмена, ВерсияКорреспондента, ФормаНастройкиЗначенийПоУмолчанию);
	ЗначенияПоУмолчаниюНаУзлеБазыКорреспондента = ОбменДаннымиСервер.ЗначенияПоУмолчаниюНаУзлеБазыКорреспондента(ИмяПланаОбмена, ВерсияКорреспондента, ФормаНастройкиЗначенийПоУмолчаниюБазыКорреспондента);
	ОбменДаннымиСервер.ОбщиеДанныеУзлов(ИмяПланаОбмена, ВерсияКорреспондента, ФормаНастройкиУзлов);
	
	ПредусмотреныНастройкиОтборовНаУзле = НастройкаОтборовНаУзле.Количество() > 0;
	ПредусмотреныЗначенияПоУмолчаниюНаУзле = ЗначенияПоУмолчаниюНаУзле.Количество() > 0;
	ПредусмотреныЗначенияПоУмолчаниюНаУзлеБазыКорреспондента = ЗначенияПоУмолчаниюНаУзлеБазыКорреспондента.Количество() > 0;
	
	Элементы.ГруппаОписаниеЗначенийПоУмолчанию.Видимость = ПредусмотреныЗначенияПоУмолчаниюНаУзле;
	Элементы.ГруппаОписаниеЗначенийПоУмолчаниюКорреспондента.Видимость = ПредусмотреныЗначенияПоУмолчаниюНаУзлеБазыКорреспондента;
	Элементы.ГруппаОписаниеНастроекВыгрузкиДанных.Видимость = ПредусмотреныНастройкиОтборовНаУзле;
	
	ОписаниеЗначенийПоУмолчанию = ОписаниеЗначенийПоУмолчанию(ИмяПланаОбмена, ЗначенияПоУмолчаниюНаУзле, ВерсияКорреспондента);
	ОписаниеЗначенийПоУмолчаниюКорреспондента = ОписаниеЗначенийПоУмолчаниюКорреспондента(ИмяПланаОбмена, ЗначенияПоУмолчаниюНаУзлеБазыКорреспондента, ВерсияКорреспондента);
	
	ПараметрыУчетаПоясняющаяНадпись = МенеджерПланаОбмена.ПояснениеДляНастройкиПараметровУчета();
	ПараметрыУчетаКорреспондентаПоясняющаяНадпись = ОбменДаннымиСервер.ПояснениеДляНастройкиПараметровУчетаБазыКорреспондента(ИмяПланаОбмена, ВерсияКорреспондента);
	
	ТаблицыКорреспондента = ОбменДаннымиСервер.ТаблицыКорреспондентаДляЗначенийПоУмолчанию(ИмяПланаОбмена, ВерсияКорреспондента);
	
	// Устанавливаем заголовок помощника
	Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Настройка синхронизации данных с ""%1""'"), НаименованиеКорреспондента);
	Элементы.ОписаниеСинхронизацииДанных.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Описание синхронизации данных с ""%1""'"), НаименованиеКорреспондента);
	
	СобытиеЖурналаРегистрацииНастройкаСинхронизацииДанных = ОбменДаннымиВМоделиСервиса.СобытиеЖурналаРегистрацииНастройкаСинхронизацииДанных();
	
	КонтекстФормыНастройкиУзлов = Новый Структура;
	
	ПолучитьСтатистикуСопоставления = Ложь;
	СтатистикаПустая = Ложь;
	
	// Устанавливаем текущую таблицу переходов
	СценарийНастройкиСинхронизацииДанных();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Получаем описание контекста формы настройки узлов
	Если ПредусмотреныНастройкиОтборовНаУзле Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ВерсияКорреспондента", ВерсияКорреспондента);
		ПараметрыФормы.Вставить("ПолучитьЗначенияПоУмолчанию");
		ПараметрыФормы.Вставить("Настройки", КонтекстФормыНастройкиУзлов);
		
		ИмяФормыНастройки = "ПланОбмена.[ИмяПланаОбмена].Форма.[ФормаНастройкиУзлов]";
		ИмяФормыНастройки = СтрЗаменить(ИмяФормыНастройки, "[ИмяПланаОбмена]", ИмяПланаОбмена);
		ИмяФормыНастройки = СтрЗаменить(ИмяФормыНастройки, "[ФормаНастройкиУзлов]", ФормаНастройкиУзлов);
		
		ФормаНастройки = ПолучитьФорму(ИмяФормыНастройки, ПараметрыФормы, ЭтаФорма);
		
		КонтекстФормыНастройкиУзлов    = ФормаНастройки.Контекст;
		ОписаниеНастроекВыгрузкиДанных = ФормаНастройки.ОписаниеКонтекста;
		
	КонецЕсли;
	
	// Позиционируемся на первом шаге помощника
	УстановитьПорядковыйНомерПерехода(1);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ЗапроситьПодтверждениеЗакрытияФормы(Отказ, , ЗакрытьФормуБезусловно,
		НСтр("ru = 'Отменить настройку синхронизации данных?'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ПолученыДанныеКорреспондента" Тогда
		
		АдресХранилищаДанныхКорреспондента = Параметр;
		
		ОткрытьФормуНастройкиЗначенийПоУмолчаниюКорреспондента(Параметр);
		
	ИначеЕсли ИмяСобытия = "ПолученыОбщиеДанныеУзловКорреспондента" Тогда
		
		ОткрытьФормуНастройкиВыгрузкиДанных(Параметр);
		
	ИначеЕсли ИмяСобытия = "ЗакрытиеФормыСопоставленияОбъектов" Тогда
		
		ИнформацияСтатистики_Ключ                   = Параметр.КлючУникальности;
		ИнформацияСтатистики_ДанныеУспешноЗагружены = Параметр.ДанныеУспешноЗагружены;
		
		ПолучитьСтатистикуСопоставления = Истина;
		
		ПорядковыйНомерПерехода = 0;
		УстановитьПорядковыйНомерПерехода(НомерСтраницы_ПолучениеСтатистикиСопоставления());
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчики ожидания

&НаКлиенте
Процедура ОбработчикОжиданияДлительнойОперации()
	
	Попытка
		СтатусСессии = СтатусСессии(Сессия);
	Исключение
		ЗаписатьОшибкуВЖурналРегистрации(
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), СобытиеЖурналаРегистрацииНастройкаСинхронизацииДанных);
		ПерейтиНазад();
		Предупреждение(НСтр("ru = 'Не удалось выполнить операцию.'"));
		Возврат;
	КонецПопытки;
	
	Если СтатусСессии = "Успешно" Тогда
		
		ПерейтиДалее();
		
	ИначеЕсли СтатусСессии = "Ошибка" Тогда
		
		ПерейтиНазад();
		
		Предупреждение(НСтр("ru = 'Не удалось выполнить операцию.'"));
		
	Иначе
		
		ПодключитьОбработчикОжидания("ОбработчикОжиданияДлительнойОперации", 5, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОжиданияФоновогоЗадания()
	
	Попытка
		
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
			
			ПерейтиДалее();
			
		Иначе
			ПодключитьОбработчикОжидания("ОбработчикОжиданияФоновогоЗадания", 5, Истина);
		КонецЕсли;
		
	Исключение
		ЗаписатьОшибкуВЖурналРегистрации(
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), СобытиеЖурналаРегистрацииНастройкаСинхронизацииДанных);
		ПерейтиНазад();
		Предупреждение(НСтр("ru = 'Не удалось выполнить операцию.'"));
	КонецПопытки;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

// Поставляемая часть

&НаКлиенте
Процедура КомандаДалее(Команда)
	
	ПерейтиДалее();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаНазад(Команда)
	
	ПерейтиНазад();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаГотово(Команда)
	
	ЗакрытьФормуБезусловно = Истина;
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтмена(Команда)
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеСинхронизацииДанных(Команда)
	
	ОбменДаннымиКлиент.ОткрытьПодробноеОписаниеСинхронизации(СсылкаНаПодробноеОписание);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Переопределяемая часть

&НаКлиенте
Процедура ВыполнитьНастройкуВыгрузкиДанных(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ИмяПланаОбмена", ИмяПланаОбмена);
	ПараметрыФормы.Вставить("ОбластьДанныхКорреспондента", ОбластьДанныхКорреспондента);
	ПараметрыФормы.Вставить("Режим", "ПолучитьОбщиеДанныеУзловКорреспондента");
	ПараметрыФормы.Вставить("УникальныйИдентификаторВладельца", ЭтаФорма.УникальныйИдентификатор);
	
	ОткрытьФорму("Обработка.ПомощникНастройкиСинхронизацииДанныхМеждуПриложениямиВИнтернете.Форма.ПолучениеДанныхКорреспондента",
		ПараметрыФормы, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьНастройкуЗначенийПоУмолчаниюКорреспондента(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ИмяПланаОбмена", ИмяПланаОбмена);
	ПараметрыФормы.Вставить("ОбластьДанныхКорреспондента", ОбластьДанныхКорреспондента);
	ПараметрыФормы.Вставить("Режим", "ПолучитьДанныеКорреспондента");
	ПараметрыФормы.Вставить("УникальныйИдентификаторВладельца", ЭтаФорма.УникальныйИдентификатор);
	ПараметрыФормы.Вставить("ТаблицыКорреспондента", ТаблицыКорреспондента);
	
	ОткрытьФорму("Обработка.ПомощникНастройкиСинхронизацииДанныхМеждуПриложениямиВИнтернете.Форма.ПолучениеДанныхКорреспондента",
		ПараметрыФормы, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьНастройкуЗначенийПоУмолчанию(Команда)
	
	ИмяФормыНастройкиУзла = "ПланОбмена.[ИмяПланаОбмена].Форма.[ФормаНастройкиЗначенийПоУмолчанию]";
	ИмяФормыНастройкиУзла = СтрЗаменить(ИмяФормыНастройкиУзла, "[ИмяПланаОбмена]", ИмяПланаОбмена);
	ИмяФормыНастройкиУзла = СтрЗаменить(ИмяФормыНастройкиУзла, "[ФормаНастройкиЗначенийПоУмолчанию]", ФормаНастройкиЗначенийПоУмолчанию);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВерсияКорреспондента", ВерсияКорреспондента);
	ПараметрыФормы.Вставить("ЗначенияПоУмолчаниюНаУзле", ЗначенияПоУмолчаниюНаУзле);
	
	РезультатОткрытия = ОткрытьФормуМодально(ИмяФормыНастройкиУзла, ПараметрыФормы, ЭтаФорма);
	
	Если РезультатОткрытия <> Неопределено Тогда
		
		Для Каждого Настройка ИЗ ЗначенияПоУмолчаниюНаУзле Цикл
			
			ЗначенияПоУмолчаниюНаУзле[Настройка.Ключ] = РезультатОткрытия[Настройка.Ключ];
			
		КонецЦикла;
		
		ОписаниеЗначенийПоУмолчанию = ОписаниеЗначенийПоУмолчанию(ИмяПланаОбмена, ЗначенияПоУмолчаниюНаУзле, ВерсияКорреспондента);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьСопоставлениеДанных(Команда)
	
	ОткрытьФормуСопоставления();
	
КонецПроцедуры

&НаКлиенте
Процедура ИнформацияСтатистикиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОткрытьФормуСопоставления();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Поставляемая часть

&НаКлиенте
Процедура ИзменитьПорядковыйНомерПерехода(Итератор)
	
	ОчиститьСообщения();
	
	УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + Итератор);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПорядковыйНомерПерехода(Знач Значение)
	
	ЭтоПереходДалее = (Значение > ПорядковыйНомерПерехода);
	
	ПорядковыйНомерПерехода = Значение;
	
	Если ПорядковыйНомерПерехода < 0 Тогда
		
		ПорядковыйНомерПерехода = 0;
		
	КонецЕсли;
	
	ПорядковыйНомерПереходаПриИзменении(ЭтоПереходДалее);
	
КонецПроцедуры

&НаКлиенте
Процедура ПорядковыйНомерПереходаПриИзменении(Знач ЭтоПереходДалее)
	
	// Выполняем обработчики событий перехода
	ВыполнитьОбработчикиСобытийПерехода(ЭтоПереходДалее);
	
	// Устанавливаем отображение страниц
	СтрокиПереходаТекущие = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода));
	
	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не определена страница для отображения.'");
	КонецЕсли;
	
	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];
	
	Элементы.ПанельОсновная.ТекущаяСтраница  = Элементы[СтрокаПереходаТекущая.ИмяОсновнойСтраницы];
	Элементы.ПанельНавигации.ТекущаяСтраница = Элементы[СтрокаПереходаТекущая.ИмяСтраницыНавигации];
	
	// Устанавливаем текущую кнопку по умолчанию
	КнопкаДалее = ПолучитьКнопкуФормыПоИмениКоманды(Элементы.ПанельНавигации.ТекущаяСтраница, "КомандаДалее");
	
	Если КнопкаДалее <> Неопределено Тогда
		
		КнопкаДалее.КнопкаПоУмолчанию = Истина;
		
	Иначе
		
		КнопкаГотово = ПолучитьКнопкуФормыПоИмениКоманды(Элементы.ПанельНавигации.ТекущаяСтраница, "КомандаГотово");
		
		Если КнопкаГотово <> Неопределено Тогда
			
			КнопкаГотово.КнопкаПоУмолчанию = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЭтоПереходДалее И СтрокаПереходаТекущая.ДлительнаяОперация Тогда
		
		ПодключитьОбработчикОжидания("ВыполнитьОбработчикДлительнойОперации", 0.1, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбработчикиСобытийПерехода(Знач ЭтоПереходДалее)
	
	// Обработчики событий переходов
	Если ЭтоПереходДалее Тогда
		
		СтрокиПерехода = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода - 1));
		
		Если СтрокиПерехода.Количество() > 0 Тогда
			
			СтрокаПерехода = СтрокиПерехода[0];
			
			// обработчик ПриПереходеДалее
			Если Не ПустаяСтрока(СтрокаПерехода.ИмяОбработчикаПриПереходеДалее)
				И Не СтрокаПерехода.ДлительнаяОперация Тогда
				
				ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ)";
				ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПерехода.ИмяОбработчикаПриПереходеДалее);
				
				Отказ = Ложь;
				
				А = Вычислить(ИмяПроцедуры);
				
				Если Отказ Тогда
					
					УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
					
					Возврат;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		СтрокиПерехода = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода + 1));
		
		Если СтрокиПерехода.Количество() > 0 Тогда
			
			СтрокаПерехода = СтрокиПерехода[0];
			
			// обработчик ПриПереходеНазад
			Если Не ПустаяСтрока(СтрокаПерехода.ИмяОбработчикаПриПереходеНазад)
				И Не СтрокаПерехода.ДлительнаяОперация Тогда
				
				ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ)";
				ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПерехода.ИмяОбработчикаПриПереходеНазад);
				
				Отказ = Ложь;
				
				А = Вычислить(ИмяПроцедуры);
				
				Если Отказ Тогда
					
					УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
					
					Возврат;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтрокиПереходаТекущие = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода));
	
	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не определена страница для отображения.'");
	КонецЕсли;
	
	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];
	
	Если СтрокаПереходаТекущая.ДлительнаяОперация И Не ЭтоПереходДалее Тогда
		
		УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
		Возврат;
	КонецЕсли;
	
	// обработчик ПриОткрытии
	Если Не ПустаяСтрока(СтрокаПереходаТекущая.ИмяОбработчикаПриОткрытии) Тогда
		
		ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ, ПропуститьСтраницу, ЭтоПереходДалее)";
		ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПереходаТекущая.ИмяОбработчикаПриОткрытии);
		
		Отказ = Ложь;
		ПропуститьСтраницу = Ложь;
		
		А = Вычислить(ИмяПроцедуры);
		
		Если Отказ Тогда
			
			УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
			
			Возврат;
			
		ИначеЕсли ПропуститьСтраницу Тогда
			
			Если ЭтоПереходДалее Тогда
				
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
				
				Возврат;
				
			Иначе
				
				УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
				
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбработчикДлительнойОперации()
	
	СтрокиПереходаТекущие = ТаблицаПереходов.НайтиСтроки(Новый Структура("ПорядковыйНомерПерехода", ПорядковыйНомерПерехода));
	
	Если СтрокиПереходаТекущие.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не определена страница для отображения.'");
	КонецЕсли;
	
	СтрокаПереходаТекущая = СтрокиПереходаТекущие[0];
	
	// обработчик ОбработкаДлительнойОперации
	Если Не ПустаяСтрока(СтрокаПереходаТекущая.ИмяОбработчикаДлительнойОперации) Тогда
		
		ИмяПроцедуры = "Подключаемый_[ИмяОбработчика](Отказ, ПерейтиДалее)";
		ИмяПроцедуры = СтрЗаменить(ИмяПроцедуры, "[ИмяОбработчика]", СтрокаПереходаТекущая.ИмяОбработчикаДлительнойОперации);
		
		Отказ = Ложь;
		ПерейтиДалее = Истина;
		
		А = Вычислить(ИмяПроцедуры);
		
		Если Отказ Тогда
			
			УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода - 1);
			
			Возврат;
			
		ИначеЕсли ПерейтиДалее Тогда
			
			УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
			
			Возврат;
			
		КонецЕсли;
		
	Иначе
		
		УстановитьПорядковыйНомерПерехода(ПорядковыйНомерПерехода + 1);
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

// Добавляет новую строку в конец текущей таблицы переходов
//
// Параметры:
//
//  ПорядковыйНомерПерехода (обязательный) – Число. Порядковый номер перехода, который соответствует текущему шагу перехода
//  ИмяОсновнойСтраницы (обязательный) – Строка. Имя страницы панели "ПанельОсновная", которая соответствует текущему номеру перехода
//  ИмяСтраницыНавигации (обязательный) – Строка. Имя страницы панели "ПанельНавигации", которая соответствует текущему номеру перехода
//  ИмяСтраницыДекорации (необязательный) – Строка. Имя страницы панели "ПанельДекорации", которая соответствует текущему номеру перехода
//  ИмяОбработчикаПриОткрытии (необязательный) – Строка. Имя функции-обработчика события открытия текущей страницы помощника
//  ИмяОбработчикаПриПереходеДалее (необязательный) – Строка. Имя функции-обработчика события перехода на следующую страницу помощника
//  ИмяОбработчикаПриПереходеНазад (необязательный) – Строка. Имя функции-обработчика события перехода на предыдущую страницу помощника
//  ДлительнаяОперация (необязательный) - Булево. Признак отображения страницы длительной операции.
//  Истина - отображается страница длительной операции; Ложь - отображается обычная страница. Значение по умолчанию - Ложь.
// 
&НаСервере
Процедура ТаблицаПереходовНоваяСтрока(ПорядковыйНомерПерехода,
									ИмяОсновнойСтраницы,
									ИмяСтраницыНавигации,
									ИмяСтраницыДекорации = "",
									ИмяОбработчикаПриОткрытии = "",
									ИмяОбработчикаПриПереходеДалее = "",
									ИмяОбработчикаПриПереходеНазад = "",
									ДлительнаяОперация = Ложь,
									ИмяОбработчикаДлительнойОперации = "")
	НоваяСтрока = ТаблицаПереходов.Добавить();
	
	НоваяСтрока.ПорядковыйНомерПерехода = ПорядковыйНомерПерехода;
	НоваяСтрока.ИмяОсновнойСтраницы     = ИмяОсновнойСтраницы;
	НоваяСтрока.ИмяСтраницыДекорации    = ИмяСтраницыДекорации;
	НоваяСтрока.ИмяСтраницыНавигации    = ИмяСтраницыНавигации;
	
	НоваяСтрока.ИмяОбработчикаПриПереходеДалее = ИмяОбработчикаПриПереходеДалее;
	НоваяСтрока.ИмяОбработчикаПриПереходеНазад = ИмяОбработчикаПриПереходеНазад;
	НоваяСтрока.ИмяОбработчикаПриОткрытии      = ИмяОбработчикаПриОткрытии;
	
	НоваяСтрока.ДлительнаяОперация = ДлительнаяОперация;
	НоваяСтрока.ИмяОбработчикаДлительнойОперации = ИмяОбработчикаДлительнойОперации;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьКнопкуФормыПоИмениКоманды(ЭлементФормы, ИмяКоманды)
	
	Для Каждого Элемент Из ЭлементФормы.ПодчиненныеЭлементы Цикл
		
		Если ТипЗнч(Элемент) = Тип("ГруппаФормы") Тогда
			
			ЭлементФормыПоИмениКоманды = ПолучитьКнопкуФормыПоИмениКоманды(Элемент, ИмяКоманды);
			
			Если ЭлементФормыПоИмениКоманды <> Неопределено Тогда
				
				Возврат ЭлементФормыПоИмениКоманды;
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Элемент) = Тип("КнопкаФормы")
			И Найти(Элемент.ИмяКоманды, ИмяКоманды) > 0 Тогда
			
			Возврат Элемент;
			
		Иначе
			
			Продолжить;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Переопределяемая часть: Служебные процедуры и функции

&НаКлиенте
Процедура ПерейтиДалее()
	
	ИзменитьПорядковыйНомерПерехода(+1);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНазад()
	
	ИзменитьПорядковыйНомерПерехода(-1);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СтатусСессии(Знач Сессия)
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат РегистрыСведений.СессииОбменаСообщениямиСистемы.СтатусСессии(Сессия);
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаписатьОшибкуВЖурналРегистрации(СтрокаСообщенияОбОшибке, Событие)
	
	ЗаписьЖурналаРегистрации(Событие, УровеньЖурналаРегистрации.Ошибка,,, СтрокаСообщенияОбОшибке);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(Знач ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуНастройкиВыгрузкиДанных(Знач АдресВременногоХранилищаСДаннымиКорреспондента)
	
	ИмяФормыНастройкиУзла = "ПланОбмена.[ИмяПланаОбмена].Форма.[ФормаНастройкиУзлов]";
	ИмяФормыНастройкиУзла = СтрЗаменить(ИмяФормыНастройкиУзла, "[ИмяПланаОбмена]", ИмяПланаОбмена);
	ИмяФормыНастройкиУзла = СтрЗаменить(ИмяФормыНастройкиУзла, "[ФормаНастройкиУзлов]", ФормаНастройкиУзлов);
	
	ПараметрыПодключения = Новый Структура;
	ПараметрыПодключения.Вставить("ТипСоединения", "ВременноеХранилище");
	ПараметрыПодключения.Вставить("АдресВременногоХранилища", АдресВременногоХранилищаСДаннымиКорреспондента);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВерсияКорреспондента", ВерсияКорреспондента);
	ПараметрыФормы.Вставить("ПараметрыПодключения", ПараметрыПодключения);
	ПараметрыФормы.Вставить("Настройки", КонтекстФормыНастройкиУзлов);
	
	РезультатОткрытия = ОткрытьФормуМодально(ИмяФормыНастройкиУзла, ПараметрыФормы, ЭтаФорма);
	
	Если РезультатОткрытия <> Неопределено Тогда
		
		КонтекстФормыНастройкиУзлов = РезультатОткрытия;
		
		ОписаниеНастроекВыгрузкиДанных = РезультатОткрытия.ОписаниеКонтекста;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастройкиЗначенийПоУмолчаниюКорреспондента(Знач АдресВременногоХранилищаСДаннымиКорреспондента)
	
	ИмяФормыНастройкиУзла = "ПланОбмена.[ИмяПланаОбмена].Форма.[ФормаНастройкиЗначенийПоУмолчаниюБазыКорреспондента]";
	ИмяФормыНастройкиУзла = СтрЗаменить(ИмяФормыНастройкиУзла, "[ИмяПланаОбмена]", ИмяПланаОбмена);
	ИмяФормыНастройкиУзла = СтрЗаменить(ИмяФормыНастройкиУзла, "[ФормаНастройкиЗначенийПоУмолчаниюБазыКорреспондента]", ФормаНастройкиЗначенийПоУмолчаниюБазыКорреспондента);
	
	ПараметрыПодключения = Новый Структура;
	ПараметрыПодключения.Вставить("ТипСоединения", "ВременноеХранилище");
	ПараметрыПодключения.Вставить("АдресВременногоХранилища", АдресВременногоХранилищаСДаннымиКорреспондента);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВерсияКорреспондента", ВерсияКорреспондента);
	ПараметрыФормы.Вставить("ПараметрыВнешнегоСоединения", ПараметрыПодключения);
	ПараметрыФормы.Вставить("ЗначенияПоУмолчаниюНаУзле", ЗначенияПоУмолчаниюНаУзлеБазыКорреспондента);
	
	РезультатОткрытия = ОткрытьФормуМодально(ИмяФормыНастройкиУзла, ПараметрыФормы, ЭтаФорма);
	
	Если РезультатОткрытия <> Неопределено Тогда
		
		Для Каждого Настройка ИЗ ЗначенияПоУмолчаниюНаУзлеБазыКорреспондента Цикл
			
			ЗначенияПоУмолчаниюНаУзлеБазыКорреспондента[Настройка.Ключ] = РезультатОткрытия[Настройка.Ключ];
			
		КонецЦикла;
		
		ОписаниеЗначенийПоУмолчаниюКорреспондента = ОписаниеЗначенийПоУмолчаниюКорреспондента(ИмяПланаОбмена, ЗначенияПоУмолчаниюНаУзлеБазыКорреспондента, ВерсияКорреспондента);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОписаниеЗначенийПоУмолчанию(Знач ИмяПланаОбмена, Знач Настройки, Знач ВерсияКорреспондента)
	
	Возврат ОбменДаннымиСервер.ОписаниеЗначенийПоУмолчанию(ИмяПланаОбмена, Настройки, ВерсияКорреспондента);
	
КонецФункции

&НаСервереБезКонтекста
Функция ОписаниеЗначенийПоУмолчаниюКорреспондента(Знач ИмяПланаОбмена, Знач Настройки, Знач ВерсияКорреспондента)
	
	Возврат ОбменДаннымиСервер.ОписаниеЗначенийПоУмолчаниюБазыКорреспондента(ИмяПланаОбмена, Настройки, ВерсияКорреспондента);
	
КонецФункции

&НаСервере
Процедура СообщитьОбОшибке(Отказ)
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не удалось выполнить операцию.'"),,,, Отказ);
	
КонецПроцедуры

//

&НаКлиенте
Процедура ОткрытьФормуСопоставления()
	
	ТекущиеДанные = Элементы.ИнформацияСтатистики.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(ТекущиеДанные.Ключ) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ТекущиеДанные.ИспользоватьПредварительныйПросмотр Тогда
		Предупреждение(НСтр("ru = 'Для этих данных нельзя выполнить сопоставление.'"));
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ИмяТаблицыПриемника",            ТекущиеДанные.ИмяТаблицыПриемника);
	ПараметрыФормы.Вставить("ИмяТипаОбъектаТаблицыИсточника", ТекущиеДанные.ТипОбъектаСтрокой);
	ПараметрыФормы.Вставить("ПоляТаблицыПриемника",           ТекущиеДанные.ПоляТаблицы);
	ПараметрыФормы.Вставить("ПоляПоискаТаблицыПриемника",     ТекущиеДанные.ПоляПоиска);
	ПараметрыФормы.Вставить("ТипИсточникаСтрокой",            ТекущиеДанные.ТипИсточникаСтрокой);
	ПараметрыФормы.Вставить("ТипПриемникаСтрокой",            ТекущиеДанные.ТипПриемникаСтрокой);
	ПараметрыФормы.Вставить("ЭтоУдалениеОбъекта",             ТекущиеДанные.ЭтоУдалениеОбъекта);
	ПараметрыФормы.Вставить("ДанныеУспешноЗагружены",         ТекущиеДанные.ДанныеУспешноЗагружены);
	ПараметрыФормы.Вставить("Ключ",                           ТекущиеДанные.Ключ);
	
	ПараметрыФормы.Вставить("УзелИнформационнойБазы",  Корреспондент);
	ПараметрыФормы.Вставить("ИмяФайлаСообщенияОбмена", ИмяФайлаСообщенияОбмена);
	
	ПараметрыФормы.Вставить("ВыполнятьЗагрузкуДанных", Ложь);
	
	ОткрытьФорму("Обработка.СопоставлениеОбъектовИнформационныхБаз.Форма", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Функция ИдентификаторСтрокиТаблицы(Знач ИмяПоля, Знач Ключ, ДанныеФормыКоллекция)
	
	ЭлементыКоллекции = ДанныеФормыКоллекция.НайтиСтроки(Новый Структура(ИмяПоля, Ключ));
	
	Если ЭлементыКоллекции.Количество() > 0 Тогда
		
		Возврат ЭлементыКоллекции[0].ПолучитьИдентификатор();
		
	КонецЕсли;
	
	Возврат Неопределено;
КонецФункции

&НаСервере
Функция ПолучитьИндексыСтрокТаблицыИнформацииСтатистики(КлючиСтрок)
	
	ИндексыСтрок = Новый Массив;
	
	Для Каждого Ключ ИЗ КлючиСтрок Цикл
		
		СтрокиТаблицы = Объект.ИнформацияСтатистики.НайтиСтроки(Новый Структура("Ключ", Ключ));
		
		ИндексСтроки = Объект.ИнформацияСтатистики.Индекс(СтрокиТаблицы[0]);
		
		ИндексыСтрок.Добавить(ИндексСтроки);
		
	КонецЦикла;
	
	Возврат ИндексыСтрок;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Переопределяемая часть: Обработчики событий переходов

// Страница 1 (Начало):
// Выполняем проверку заполнения настроек выгрузки
//
&НаКлиенте
Функция Подключаемый_Начало_ПриПереходеДалее(Отказ)
	
	// Проверяем заполнение реквизитов в форме
	Если ПредусмотреныНастройкиОтборовНаУзле Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ВерсияКорреспондента", ВерсияКорреспондента);
		ПараметрыФормы.Вставить("Настройки", КонтекстФормыНастройкиУзлов);
		ПараметрыФормы.Вставить("ПроверкаЗаполнения");
		
		ИмяФормыНастройки = "ПланОбмена.[ИмяПланаОбмена].Форма.[ФормаНастройкиУзлов]";
		ИмяФормыНастройки = СтрЗаменить(ИмяФормыНастройки, "[ИмяПланаОбмена]", ИмяПланаОбмена);
		ИмяФормыНастройки = СтрЗаменить(ИмяФормыНастройки, "[ФормаНастройкиУзлов]", ФормаНастройкиУзлов);
		
		ФормаНастройки = ПолучитьФорму(ИмяФормыНастройки, ПараметрыФормы, ЭтаФорма);
		
		Если Не ФормаНастройки.ПроверитьЗаполнение() Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Необходимо задать обязательные настройки.'"),,, "ОписаниеНастроекВыгрузкиДанных", Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

//

// Страница 2 (ожидание):
// Создаем настройку обмена в этой базе
// Регистрируем справочники к выгрузке в этой базе
// Отправляем сообщение корреспонденту:
//   Создаем настройку обмена в корреспонденте
//   Регистрируем справочники к выгрузке в корреспонденте
//   Запускаем выгрузку данных в корреспонденте
//   Отправляем сообщение текущей ИБ об успешной или неуспешной операции
// После получения ответа от корреспондента:
// Выполняем автоматическое сопоставление данных, полученных от корреспондента
// Получаем статистику сопоставления
//
&НаКлиенте
Функция Подключаемый_ОжиданиеАнализаДанных_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)
	
	ОжиданиеАнализаДанных_ОбработкаДлительнойОперации(Отказ);
	
КонецФункции

// Страница 2 (ожидание):
// Создаем настройку обмена в этой базе
// Регистрируем справочники к выгрузке в этой базе
// Отправляем сообщение корреспонденту
&НаСервере
Процедура ОжиданиеАнализаДанных_ОбработкаДлительнойОперации(Отказ)
	
	Попытка
		ПараметрыМетода = Новый Структура;
		ПараметрыМетода.Вставить("ИмяПланаОбмена", ИмяПланаОбмена);
		ПараметрыМетода.Вставить("КодКорреспондента", КодКорреспондента);
		ПараметрыМетода.Вставить("НаименованиеКорреспондента", НаименованиеКорреспондента);
		ПараметрыМетода.Вставить("ОбластьДанныхКорреспондента", ОбластьДанныхКорреспондента);
		ПараметрыМетода.Вставить("КонечнаяТочкаКорреспондента", КонечнаяТочкаКорреспондента);
		ПараметрыМетода.Вставить("НастройкаОтборовНаУзле", КонтекстФормыНастройкиУзлов);
		ПараметрыМетода.Вставить("Префикс", Префикс);
		ПараметрыМетода.Вставить("ПрефиксКорреспондента", ПрефиксКорреспондента);
		
		Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
			УникальныйИдентификатор,
			"Обработки.ПомощникНастройкиСинхронизацииДанныхМеждуПриложениямиВИнтернете.НастроитьОбменШаг1",
			ПараметрыМетода,
			НСтр("ru = 'Настройка синхронизации данных между приложениями в сети Интернет (шаг 1)'"));
		
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
		АдресВременногоХранилища = Результат.АдресХранилища;
	Исключение
		ЗаписатьОшибкуВЖурналРегистрации(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			СобытиеЖурналаРегистрацииНастройкаСинхронизацииДанных);
		СообщитьОбОшибке(Отказ);
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

// Страница 2 (ожидание): Ожидаем завершения работы фонового задания
//
&НаКлиенте
Функция Подключаемый_ОжиданиеАнализаДанныхФоновоеЗадание_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)
	
	ПерейтиДалее = Ложь;
	
	ПодключитьОбработчикОжидания("ОбработчикОжиданияФоновогоЗадания", 5, Истина);
	
КонецФункции

// Страница 2 (ожидание): Ожидаем ответа от корреспондента
//
&НаКлиенте
Функция Подключаемый_ОжиданиеАнализаДанныхДлительнаяОперация_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)
	
	ВыходныеПараметры = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
	Корреспондент = ВыходныеПараметры.Корреспондент;
	Сессия        = ВыходныеПараметры.Сессия;
	
	ПерейтиДалее = Ложь;
	
	ПодключитьОбработчикОжидания("ОбработчикОжиданияДлительнойОперации", 5, Истина);
	
КонецФункции

// Страница 2 (ожидание):
// После получения ответа от корреспондента:
// Выполняем автоматическое сопоставление данных, полученных от корреспондента
// Получаем статистику сопоставления
//
&НаКлиенте
Функция Подключаемый_ОжиданиеАнализаДанныхДлительнаяОперацияОкончание_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)
	
	ВыполнитьАвтоматическоеСопоставлениеДанных(Отказ);
	
КонецФункции

// Страница 2 (ожидание):
// Выполняем автоматическое сопоставление данных, полученных от корреспондента
// Получаем статистику сопоставления
//
&НаСервере
Процедура ВыполнитьАвтоматическоеСопоставлениеДанных(Отказ)
	
	Попытка
		ПараметрыМетода = Новый Структура;
		ПараметрыМетода.Вставить("Корреспондент", Корреспондент);
		
		Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
			УникальныйИдентификатор,
			"Обработки.ПомощникНастройкиСинхронизацииДанныхМеждуПриложениямиВИнтернете.ВыполнитьАвтоматическоеСопоставлениеДанных",
			ПараметрыМетода,
			НСтр("ru = 'Настройка синхронизации данных между приложениями в сети Интернет (автоматическое сопоставление данных)'"));
		
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
		АдресВременногоХранилища = Результат.АдресХранилища;
	Исключение
		ЗаписатьОшибкуВЖурналРегистрации(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			СобытиеЖурналаРегистрацииНастройкаСинхронизацииДанных);
		СообщитьОбОшибке(Отказ);
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

// Страница 2 (ожидание): Ожидаем завершения работы фонового задания
//
&НаКлиенте
Функция Подключаемый_ОжиданиеСопоставленияДанныхФоновоеЗадание_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)
	
	ПерейтиДалее = Ложь;
	
	ПодключитьОбработчикОжидания("ОбработчикОжиданияФоновогоЗадания", 5, Истина);
	
КонецФункции

// Страница 2 (ожидание):
//
&НаКлиенте
Функция Подключаемый_ОжиданиеСопоставленияДанныхФоновоеЗаданиеОкончание_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)
	
	ЗагрузитьСтатистикуСопоставления_21(Отказ);
	
КонецФункции

// Страница 2 (ожидание):
//
&НаСервере
Процедура ЗагрузитьСтатистикуСопоставления_21(Отказ)
	
	Попытка
		
		ВыходныеПараметры = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
		
		ВсеДанныеСопоставлены = ВыходныеПараметры.ВсеДанныеСопоставлены;
		ИмяФайлаСообщенияОбмена = ВыходныеПараметры.ИмяФайлаСообщенияОбмена;
		СтатистикаПустая = ВыходныеПараметры.СтатистикаПустая;
		
		Объект.ИнформацияСтатистики.Загрузить(ВыходныеПараметры.ИнформацияСтатистики);
		Объект.ИнформацияСтатистики.Сортировать("Представление");
		
	Исключение
		ЗаписатьОшибкуВЖурналРегистрации(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			СобытиеЖурналаРегистрацииНастройкаСинхронизацииДанных);
		СообщитьОбОшибке(Отказ);
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

//

// Страница 2 (ожидание): Получение статистики сопоставления (опционально)
//
&НаКлиенте
Функция Подключаемый_ОжиданиеПолученияСтатистикиСопоставления_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)
	
	Если ПолучитьСтатистикуСопоставления Тогда
		
		ПолучитьСтатистикуСопоставления(Отказ);
		
	КонецЕсли;
	
КонецФункции

// Страница 2 (ожидание): Получение статистики сопоставления (опционально)
//
&НаКлиенте
Функция Подключаемый_ОжиданиеПолученияСтатистикиСопоставленияФоновоеЗадание_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)
	
	Если ПолучитьСтатистикуСопоставления Тогда
		
		ПерейтиДалее = Ложь;
		
		ПодключитьОбработчикОжидания("ОбработчикОжиданияФоновогоЗадания", 5, Истина);
		
	КонецЕсли;
	
КонецФункции

// Страница 2 (ожидание): Получение статистики сопоставления (опционально)
//
&НаКлиенте
Функция Подключаемый_ОжиданиеПолученияСтатистикиСопоставленияФоновоеЗаданиеОкончание_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)
	
	Если ПолучитьСтатистикуСопоставления Тогда
		
		ЗагрузитьСтатистикуСопоставления_22(Отказ);
		
	КонецЕсли;
	
КонецФункции

// Страница 2 (ожидание): Получение статистики сопоставления (опционально)
//
&НаСервере
Процедура ПолучитьСтатистикуСопоставления(Отказ)
	
	Попытка
		
		СтрокиТаблицы = Объект.ИнформацияСтатистики.НайтиСтроки(Новый Структура("Ключ", ИнформацияСтатистики_Ключ));
		СтрокиТаблицы[0].ДанныеУспешноЗагружены = ИнформацияСтатистики_ДанныеУспешноЗагружены;
		
		КлючиСтрок = Новый Массив;
		КлючиСтрок.Добавить(ИнформацияСтатистики_Ключ);
		
		ПараметрыМетода = Новый Структура;
		ПараметрыМетода.Вставить("Корреспондент", Корреспондент);
		ПараметрыМетода.Вставить("ИмяФайлаСообщенияОбмена", ИмяФайлаСообщенияОбмена);
		ПараметрыМетода.Вставить("ИнформацияСтатистики", Объект.ИнформацияСтатистики.Выгрузить());
		ПараметрыМетода.Вставить("ИндексыСтрок", ПолучитьИндексыСтрокТаблицыИнформацииСтатистики(КлючиСтрок));
		
		Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
			УникальныйИдентификатор,
			"Обработки.ПомощникНастройкиСинхронизацииДанныхМеждуПриложениямиВИнтернете.ПолучитьСтатистикуСопоставления",
			ПараметрыМетода,
			НСтр("ru = 'Настройка синхронизации данных между приложениями в сети Интернет (получение статистики сопоставления)'"));
		
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
		АдресВременногоХранилища = Результат.АдресХранилища;
	Исключение
		ЗаписатьОшибкуВЖурналРегистрации(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			СобытиеЖурналаРегистрацииНастройкаСинхронизацииДанных);
		СообщитьОбОшибке(Отказ);
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

// Страница 2 (ожидание): Получение статистики сопоставления (опционально)
//
&НаСервере
Процедура ЗагрузитьСтатистикуСопоставления_22(Отказ)
	
	Попытка
		
		ПолучитьСтатистикуСопоставления = Ложь;
		
		ВыходныеПараметры = ПолучитьИзВременногоХранилища(АдресВременногоХранилища);
		
		ВсеДанныеСопоставлены = ВыходныеПараметры.ВсеДанныеСопоставлены;
		
		Объект.ИнформацияСтатистики.Загрузить(ВыходныеПараметры.ИнформацияСтатистики);
		Объект.ИнформацияСтатистики.Сортировать("Представление");
		
		// Позиционирование на текущей строке списка
		Элементы.ИнформацияСтатистики.ТекущаяСтрока = ИдентификаторСтрокиТаблицы("Ключ", ИнформацияСтатистики_Ключ, Объект.ИнформацияСтатистики);
		
	Исключение
		ЗаписатьОшибкуВЖурналРегистрации(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			СобытиеЖурналаРегистрацииНастройкаСинхронизацииДанных);
		СообщитьОбОшибке(Отказ);
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

//

// Страница 3: Сопоставление данных пользователем
//
&НаКлиенте
Функция Подключаемый_СопоставлениеДанных_ПриОткрытии(Отказ, ПропуститьСтраницу, ЭтоПереходДалее)
	
	Если СтатистикаПустая Тогда
		ПропуститьСтраницу = Истина;
	КонецЕсли;
	
	Элементы.СтраницыСтатусаСопоставленияДанных.ТекущаяСтраница = ?(ВсеДанныеСопоставлены,
		Элементы.СтатусСопоставленияВсеДанныеСопоставлены,
		Элементы.СтатусСопоставленияЕстьНесопоставленныеДанные);
КонецФункции

// Страница 3: Сопоставление данных пользователем
//
&НаКлиенте
Функция Подключаемый_СопоставлениеДанных_ПриПереходеДалее(Отказ)
	
	Если Не ВсеДанныеСопоставлены Тогда
		
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Да, "Продолжить");
		Кнопки.Добавить(КодВозвратаДиалога.Нет, "Отмена");
		
		Сообщение = НСтр("ru = 'Не все данные сопоставлены. Наличие несопоставленных данных
							   |может привести к появлению одинаковых элементов справочников (дублей).
							   |Продолжить?'");
		
		Ответ = Вопрос(Сообщение, Кнопки,, КодВозвратаДиалога.Нет);
		
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			
			Отказ = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

//

// Страница 4 (ожидание): Синхронизация данных
// Выполняем загрузку сообщения обмена, полученного от корреспондента
// Выполняем выгрузку сообщения обмена для корреспондента (только справочники)
// Отправляем сообщение корреспонденту:
//   Загружаем сообщение обмена в корреспонденте
//   Отправляем сообщение текущей ИБ об успешной или неуспешной операции загрузки.
&НаКлиенте
Функция Подключаемый_ОжиданиеСинхронизацииДанных_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)
	
	ОжиданиеСинхронизацииДанных_ОбработкаДлительнойОперации(Отказ);
	
КонецФункции

// Страница 4 (ожидание): Синхронизация данных
// Выполняем загрузку сообщения обмена, полученного от корреспондента
// Выполняем выгрузку сообщения обмена для корреспондента (только справочники)
// Отправляем сообщение корреспонденту
//
&НаСервере
Процедура ОжиданиеСинхронизацииДанных_ОбработкаДлительнойОперации(Отказ)
	
	Попытка
		
		ПараметрыМетода = Новый Структура;
		ПараметрыМетода.Вставить("Корреспондент", Корреспондент);
		ПараметрыМетода.Вставить("ОбластьДанныхКорреспондента", ОбластьДанныхКорреспондента);
		
		Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
			УникальныйИдентификатор,
			"Обработки.ПомощникНастройкиСинхронизацииДанныхМеждуПриложениямиВИнтернете.ВыполнитьСинхронизациюСправочников",
			ПараметрыМетода,
			НСтр("ru = 'Настройка синхронизации данных между приложениями в сети Интернет (синхронизация справочников)'"));
		
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
		АдресВременногоХранилища = Результат.АдресХранилища;
	Исключение
		ЗаписатьОшибкуВЖурналРегистрации(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			СобытиеЖурналаРегистрацииНастройкаСинхронизацииДанных);
		СообщитьОбОшибке(Отказ);
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

// Страница 4 (ожидание): Ожидаем завершения работы фонового задания
//
&НаКлиенте
Функция Подключаемый_ОжиданиеСинхронизацииДанныхФоновоеЗадание_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)
	
	ПерейтиДалее = Ложь;
	
	ПодключитьОбработчикОжидания("ОбработчикОжиданияФоновогоЗадания", 5, Истина);
	
КонецФункции

// Страница 4 (ожидание): Ожидаем ответа от корреспондента
//
&НаКлиенте
Функция Подключаемый_ОжиданиеСинхронизацииДанныхДлительнаяОперация_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)
	
	Сессия = ПолучитьИзВременногоХранилища(АдресВременногоХранилища).Сессия;
	
	ПерейтиДалее = Ложь;
	
	ПодключитьОбработчикОжидания("ОбработчикОжиданияДлительнойОперации", 5, Истина);
	
КонецФункции

//

// Страница 4 (ожидание): Получение значений по умолчанию от корреспондента
//
&НаКлиенте
Функция Подключаемый_ПроверкаЗначенийПоУмолчаниюДляКорреспондента_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)
	
	Если ПредусмотреныЗначенияПоУмолчаниюНаУзлеБазыКорреспондента Тогда
		
		ПолучитьДанныеКорреспондента(Отказ);
		
	КонецЕсли;
	
КонецФункции

// Страница 4 (ожидание): Получение значений по умолчанию от корреспондента
//
&НаКлиенте
Функция Подключаемый_ПроверкаЗначенийПоУмолчаниюДляКорреспондентаДлительнаяОперация_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)
	
	Если ПредусмотреныЗначенияПоУмолчаниюНаУзлеБазыКорреспондента Тогда
		
		ПерейтиДалее = Ложь;
		
		ПодключитьОбработчикОжидания("ОбработчикОжиданияДлительнойОперации", 5, Истина);
		
	КонецЕсли;
	
КонецФункции

// Страница 4 (ожидание): Получение значений по умолчанию от корреспондента
//
&НаКлиенте
Функция Подключаемый_ПроверкаЗначенийПоУмолчаниюДляКорреспондентаДлительнаяОперацияОкончание_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)
	
	Если ПредусмотреныЗначенияПоУмолчаниюНаУзлеБазыКорреспондента Тогда
		
		ЗагрузитьДанныеКорреспондентаВХранилище(Отказ);
		
	КонецЕсли;
	
КонецФункции

// Страница 4 (ожидание)
//
&НаСервере
Процедура ПолучитьДанныеКорреспондента(Отказ)
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	Попытка
		
		// Отправляем сообщение корреспонденту
		Сообщение = СообщенияВМоделиСервиса.НовоеСообщение(
			СообщенияОбменаДаннымиУправлениеИнтерфейс.СообщениеПолучитьДанныеКорреспондента());
		Сообщение.Body.CorrespondentZone = ОбластьДанныхКорреспондента;
		
		Сообщение.Body.Tables = СериализаторXDTO.ЗаписатьXDTO(ТаблицыКорреспондента);
		Сообщение.Body.ExchangePlan = ИмяПланаОбмена;
		
		Сессия = ОбменДаннымиВМоделиСервиса.ОтправитьСообщение(Сообщение);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ЗаписатьОшибкуВЖурналРегистрации(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			СобытиеЖурналаРегистрацииНастройкаСинхронизацииДанных);
		СообщитьОбОшибке(Отказ);
		Возврат;
	КонецПопытки;
	
	СообщенияВМоделиСервиса.ДоставитьБыстрыеСообщения();
	
КонецПроцедуры

// Страница 4 (ожидание)
//
&НаСервере
Процедура ЗагрузитьДанныеКорреспондентаВХранилище(Отказ)
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	Попытка
		
		ДанныеКорреспондента = РегистрыСведений.СессииОбменаСообщениямиСистемы.ПолучитьДанныеСессии(Сессия);
		
		АдресХранилищаДанныхКорреспондента = ПоместитьВоВременноеХранилище(ДанныеКорреспондента, ЭтаФорма.УникальныйИдентификатор);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ЗаписатьОшибкуВЖурналРегистрации(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			СобытиеЖурналаРегистрацииНастройкаСинхронизацииДанных);
		СообщитьОбОшибке(Отказ);
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

//

// Страница 4, 6 (ожидание): Проверка параметров учета корреспондента
//
&НаКлиенте
Функция Подключаемый_ПроверкаПараметровУчетаКорреспондента_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)
	
	ПолучитьПараметрыУчетаКорреспондента(Отказ);
	
КонецФункции

// Страница 4, 6 (ожидание): Проверка параметров учета корреспондента
//
&НаКлиенте
Функция Подключаемый_ПроверкаПараметровУчетаКорреспондентаДлительнаяОперация_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)
	
	ПерейтиДалее = Ложь;
	
	ПодключитьОбработчикОжидания("ОбработчикОжиданияДлительнойОперации", 5, Истина);
	
КонецФункции

// Страница 4 (ожидание): Проверка параметров учета корреспондента
//
&НаКлиенте
Функция Подключаемый_ПроверкаПараметровУчетаКорреспондентаДлительнаяОперацияОкончание4_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)
	
	ЗагрузитьПараметрыУчетаКорреспондента(Отказ);
	
КонецФункции

// Страница 6 (ожидание): Проверка параметров учета корреспондента
//
&НаКлиенте
Функция Подключаемый_ПроверкаПараметровУчетаКорреспондентаДлительнаяОперацияОкончание6_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)
	
	СообщениеОбОшибке = "";
	СообщениеОбОшибкеКорреспондента = "";
	
	ЗагрузитьПараметрыУчетаКорреспондента(Отказ, СообщениеОбОшибке, СообщениеОбОшибкеКорреспондента);
	
	Если Отказ Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не ПараметрыУчетаЗаданы Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке,, "ПараметрыУчетаПоясняющаяНадпись",, Отказ);
	КонецЕсли;
	
	Если Не ПараметрыУчетаКорреспондентаЗаданы Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибкеКорреспондента,, "ПараметрыУчетаКорреспондентаПоясняющаяНадпись",, Отказ);
	КонецЕсли;
	
КонецФункции

// Страница 4, 6 (ожидание)
//
&НаСервере
Процедура ПолучитьПараметрыУчетаКорреспондента(Отказ)
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	Попытка
		
		// Отправляем сообщение корреспонденту
		Сообщение = СообщенияВМоделиСервиса.НовоеСообщение(
			СообщенияОбменаДаннымиУправлениеИнтерфейс.СообщениеПолучитьПараметрыУчетаКорреспондента());
		Сообщение.Body.CorrespondentZone = ОбластьДанныхКорреспондента;
		
		Сообщение.Body.ExchangePlan = ИмяПланаОбмена;
		Сообщение.Body.CorrespondentCode = ОбменДаннымиПовтИсп.ПолучитьКодЭтогоУзлаДляПланаОбмена(ИмяПланаОбмена);
		
		Сессия = ОбменДаннымиВМоделиСервиса.ОтправитьСообщение(Сообщение);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ЗаписатьОшибкуВЖурналРегистрации(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			СобытиеЖурналаРегистрацииНастройкаСинхронизацииДанных);
		СообщитьОбОшибке(Отказ);
		Возврат;
	КонецПопытки;
	
	СообщенияВМоделиСервиса.ДоставитьБыстрыеСообщения();
	
КонецПроцедуры

// Страница 4, 6 (ожидание)
//
&НаСервере
Процедура ЗагрузитьПараметрыУчетаКорреспондента(Отказ, СообщениеОбОшибке = "", СообщениеОбОшибкеКорреспондента = "")
	
	УстановитьПривилегированныйРежим(Истина);
	
	Попытка
		
		// Параметры учета корреспондента
		ДанныеКорреспондента = РегистрыСведений.СессииОбменаСообщениямиСистемы.ПолучитьДанныеСессии(Сессия).Получить();
		
		ПараметрыУчетаКорреспондентаЗаданы = ДанныеКорреспондента.ПараметрыУчетаЗаданы;
		СообщениеОбОшибкеКорреспондента    = ДанныеКорреспондента.ПредставлениеОшибки;
		
		Если ПустаяСтрока(СообщениеОбОшибкеКорреспондента) Тогда
			СообщениеОбОшибкеКорреспондента = НСтр("ru = 'Не заданы параметры учета в приложении ""%1"".'");
			СообщениеОбОшибкеКорреспондента = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СообщениеОбОшибкеКорреспондента, НаименованиеКорреспондента);
		КонецЕсли;
		
		// Параметры учета этого приложения
		ПараметрыУчетаЗаданы = ОбменДаннымиСервер.НастройкиПараметровУчетаВСистемеУстановлены(ИмяПланаОбмена, Корреспондент, СообщениеОбОшибке);
		
		Если ПустаяСтрока(СообщениеОбОшибке) Тогда
			СообщениеОбОшибке = НСтр("ru = 'Не заданы параметры учета в этом приложении.'");
		КонецЕсли;
		
	Исключение
		ЗаписатьОшибкуВЖурналРегистрации(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			СобытиеЖурналаРегистрацииНастройкаСинхронизацииДанных);
		СообщитьОбОшибке(Отказ);
		Возврат;
	КонецПопытки;
	
	Элементы.ПараметрыУчета.Видимость = Не ПараметрыУчетаЗаданы;
	Элементы.ПараметрыУчетаКорреспондента.Видимость = Не ПараметрыУчетаКорреспондентаЗаданы;
	
КонецПроцедуры

//

// Страница 5 (Настройка параметров учета):
// Если задание значений по умолчанию не требуется, и заданы все параметры учета, то пропускаем шаг.
//
&НаКлиенте
Функция Подключаемый_НастройкаПараметровУчета_ПриОткрытии(Отказ, ПропуститьСтраницу, ЭтоПереходДалее)
	
	Если  ПараметрыУчетаЗаданы
		И ПараметрыУчетаКорреспондентаЗаданы
		И Не ПредусмотреныЗначенияПоУмолчаниюНаУзле
		И Не ПредусмотреныЗначенияПоУмолчаниюНаУзлеБазыКорреспондента Тогда
		
		ПропуститьСтраницу = Истина;
		
	КонецЕсли;
	
	Элементы.НаименованиеЭтогоПриложения.Видимость = Элементы.ПараметрыУчета.Видимость ИЛИ Элементы.ГруппаОписаниеЗначенийПоУмолчанию.Видимость;
	Элементы.НаименованиеКорреспондента.Видимость = Элементы.ПараметрыУчетаКорреспондента.Видимость ИЛИ Элементы.ГруппаОписаниеЗначенийПоУмолчаниюКорреспондента.Видимость;
	
КонецФункции

// Страница 5 (Настройка параметров учета):
// Выполняем проверку заполнения настроек параметров учета
//
&НаКлиенте
Функция Подключаемый_НастройкаПараметровУчета_ПриПереходеДалее(Отказ)
	
	// Проверяем заполнение реквизитов в форме дополнительных настроек
	Если ПредусмотреныЗначенияПоУмолчаниюНаУзле Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ВерсияКорреспондента", ВерсияКорреспондента);
		ПараметрыФормы.Вставить("ЗначенияПоУмолчаниюНаУзле", ЗначенияПоУмолчаниюНаУзле);
		
		ИмяФормыНастройки = "ПланОбмена.[ИмяПланаОбмена].Форма.[ФормаНастройкиЗначенийПоУмолчанию]";
		ИмяФормыНастройки = СтрЗаменить(ИмяФормыНастройки, "[ИмяПланаОбмена]", ИмяПланаОбмена);
		ИмяФормыНастройки = СтрЗаменить(ИмяФормыНастройки, "[ФормаНастройкиЗначенийПоУмолчанию]", ФормаНастройкиЗначенийПоУмолчанию);
		
		ФормаНастройки = ПолучитьФорму(ИмяФормыНастройки, ПараметрыФормы, ЭтаФорма);
		
		Если Не ФормаНастройки.ПроверитьЗаполнение() Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Необходимо задать обязательные настройки.'"),,, "ОписаниеЗначенийПоУмолчанию", Отказ);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Проверяем заполнение реквизитов в форме дополнительных настроек
	Если ПредусмотреныЗначенияПоУмолчаниюНаУзлеБазыКорреспондента Тогда
		
		ПараметрыПодключения = Новый Структура;
		ПараметрыПодключения.Вставить("ТипСоединения", "ВременноеХранилище");
		ПараметрыПодключения.Вставить("АдресВременногоХранилища", АдресХранилищаДанныхКорреспондента);
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ВерсияКорреспондента", ВерсияКорреспондента);
		ПараметрыФормы.Вставить("ПараметрыВнешнегоСоединения", ПараметрыПодключения);
		ПараметрыФормы.Вставить("ЗначенияПоУмолчаниюНаУзле", ЗначенияПоУмолчаниюНаУзлеБазыКорреспондента);
		
		ИмяФормыНастройки = "ПланОбмена.[ИмяПланаОбмена].Форма.[ФормаНастройкиЗначенийПоУмолчаниюБазыКорреспондента]";
		ИмяФормыНастройки = СтрЗаменить(ИмяФормыНастройки, "[ИмяПланаОбмена]", ИмяПланаОбмена);
		ИмяФормыНастройки = СтрЗаменить(ИмяФормыНастройки, "[ФормаНастройкиЗначенийПоУмолчаниюБазыКорреспондента]", ФормаНастройкиЗначенийПоУмолчаниюБазыКорреспондента);
		
		ФормаНастройки = ПолучитьФорму(ИмяФормыНастройки, ПараметрыФормы, ЭтаФорма);
		
		Если Не ФормаНастройки.ПроверитьЗаполнение() Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Необходимо задать обязательные настройки для второго приложения.'")
				,,, "ОписаниеЗначенийПоУмолчаниюКорреспондента", Отказ);
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

//

// Страница 6 (ожидание):
// Сохраняем настройки, заданные пользователем
// Регистрируем все данные к выгрузке, кроме справочников
// Отправляем сообщение корреспонденту:
//   Сохраняем настройки, заданные пользователем
//   Регистрируем все данные к выгрузке, кроме справочников
//   Отправляем сообщение текущей ИБ об успешной или неуспешной операции
// Запускам выполнение обмена в фоне из текущей ИБ.
//
&НаКлиенте
Функция Подключаемый_ОжиданиеСохраненияНастроек_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)
	
	ОжиданиеСохраненияНастроек_ОбработкаДлительнойОперации(Отказ);
	
КонецФункции

// Страница 6 (ожидание):
// Сохраняем настройки, заданные пользователем
// Регистрируем все данные к выгрузке, кроме справочников
// Отправляем сообщение корреспонденту
//
&НаСервере
Процедура ОжиданиеСохраненияНастроек_ОбработкаДлительнойОперации(Отказ)
	
	Попытка
		ПараметрыМетода = Новый Структура;
		ПараметрыМетода.Вставить("Корреспондент", Корреспондент);
		ПараметрыМетода.Вставить("ОбластьДанныхКорреспондента", ОбластьДанныхКорреспондента);
		ПараметрыМетода.Вставить("ЗначенияПоУмолчаниюНаУзле", ЗначенияПоУмолчаниюНаУзле);
		ПараметрыМетода.Вставить("ЗначенияПоУмолчаниюНаУзлеБазыКорреспондента", ЗначенияПоУмолчаниюНаУзлеБазыКорреспондента);
		
		Результат = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
			УникальныйИдентификатор,
			"Обработки.ПомощникНастройкиСинхронизацииДанныхМеждуПриложениямиВИнтернете.НастроитьОбменШаг2",
			ПараметрыМетода,
			НСтр("ru = 'Настройка синхронизации данных между приложениями в сети Интернет (шаг 2)'"));
		
		ИдентификаторЗадания = Результат.ИдентификаторЗадания;
		АдресВременногоХранилища = Результат.АдресХранилища;
	Исключение
		ЗаписатьОшибкуВЖурналРегистрации(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			СобытиеЖурналаРегистрацииНастройкаСинхронизацииДанных);
		СообщитьОбОшибке(Отказ);
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

// Страница 6 (ожидание): Ожидаем завершения работы фонового задания
//
&НаКлиенте
Функция Подключаемый_ОжиданиеСохраненияНастроекФоновоеЗадание_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)
	
	ПерейтиДалее = Ложь;
	
	ПодключитьОбработчикОжидания("ОбработчикОжиданияФоновогоЗадания", 5, Истина);
	
КонецФункции

// Страница 6 (ожидание): Ожидаем ответа от корреспондента
//
&НаКлиенте
Функция Подключаемый_ОжиданиеСохраненияНастроекДлительнаяОперация_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)
	
	Сессия = ПолучитьИзВременногоХранилища(АдресВременногоХранилища).Сессия;
	
	ПерейтиДалее = Ложь;
	
	ПодключитьОбработчикОжидания("ОбработчикОжиданияДлительнойОперации", 5, Истина);
	
КонецФункции

//

// Страница 6 (ожидание): Фиксация создания настройки обмена в МС
//
&НаКлиенте
Функция Подключаемый_ФиксацияСозданияНастройкиОбмена_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)
	
	ЗафиксироватьСозданиеНастройкиОбменаВМенеджереСервиса(Отказ);
	
КонецФункции

// Страница 6 (ожидание): Фиксация создания настройки обмена в МС
//
&НаКлиенте
Функция Подключаемый_ФиксацияСозданияНастройкиОбменаДлительнаяОперация_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)
	
	ПерейтиДалее = Ложь;
	
	ПодключитьОбработчикОжидания("ОбработчикОжиданияДлительнойОперации", 5, Истина);
	
КонецФункции

// Страница 6 (ожидание): Фиксация создания настройки обмена в МС
//
&НаКлиенте
Функция Подключаемый_ФиксацияСозданияНастройкиОбменаДлительнаяОперацияОкончание_ОбработкаДлительнойОперации(Отказ, ПерейтиДалее)
	
	Оповестить("Создание_СинхронизацияДанных");
	
КонецФункции

// Страница 6 (ожидание): Фиксация создания настройки обмена в МС
//
&НаСервере
Процедура ЗафиксироватьСозданиеНастройкиОбменаВМенеджереСервиса(Отказ)
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	Попытка
		
		// Отправляем сообщение менеджеру сервиса - включить синхронизацию
		Сообщение = СообщенияВМоделиСервиса.НовоеСообщение(
			СообщенияАдминистрированиеОбменаДаннымиУправлениеИнтерфейс.СообщениеВключитьСинхронизацию());
		Сообщение.Body.CorrespondentZone = ОбластьДанныхКорреспондента;
		
		Сообщение.Body.ExchangePlan = ИмяПланаОбмена;
		
		Сессия = ОбменДаннымиВМоделиСервиса.ОтправитьСообщение(Сообщение);
		
		// Отправляем сообщение менеджеру сервиса - запрос на выполнение синхронизации между двумя приложениями
		Сообщение = СообщенияВМоделиСервиса.НовоеСообщение(
			СообщенияАдминистрированиеОбменаДаннымиУправлениеИнтерфейс.СообщениеПротолкнутьСинхронизациюДвухПриложений());
		Сообщение.Body.CorrespondentZone = ОбластьДанныхКорреспондента;
		
		ОбменДаннымиВМоделиСервиса.ОтправитьСообщение(Сообщение);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ЗаписатьОшибкуВЖурналРегистрации(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
			СобытиеЖурналаРегистрацииНастройкаСинхронизацииДанных);
		СообщитьОбОшибке(Отказ);
		Возврат;
	КонецПопытки;
	
	СообщенияВМоделиСервиса.ДоставитьБыстрыеСообщения();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Переопределяемая часть: Инициализация переходов помощника

&НаСервере
Процедура СценарийНастройкиСинхронизацииДанных()
	
	ТаблицаПереходов.Очистить();
	
	ТаблицаПереходовНоваяСтрока(1, "Начало",                      "СтраницаНавигацииНачало",,, "Начало_ПриПереходеДалее");
	
	// Создание настройки и автоматическое сопоставление данных
	ТаблицаПереходовНоваяСтрока(2, "ОжиданиеАнализаДанных",       "СтраницаНавигацииОжидание",,,,, Истина, "ОжиданиеАнализаДанных_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрока(3, "ОжиданиеАнализаДанных",       "СтраницаНавигацииОжидание",,,,, Истина, "ОжиданиеАнализаДанныхФоновоеЗадание_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрока(4, "ОжиданиеАнализаДанных",       "СтраницаНавигацииОжидание",,,,, Истина, "ОжиданиеАнализаДанныхДлительнаяОперация_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрока(5, "ОжиданиеАнализаДанных",       "СтраницаНавигацииОжидание",,,,, Истина, "ОжиданиеАнализаДанныхДлительнаяОперацияОкончание_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрока(6, "ОжиданиеАнализаДанных",       "СтраницаНавигацииОжидание",,,,, Истина, "ОжиданиеСопоставленияДанныхФоновоеЗадание_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрока(7, "ОжиданиеАнализаДанных",       "СтраницаНавигацииОжидание",,,,, Истина, "ОжиданиеСопоставленияДанныхФоновоеЗаданиеОкончание_ОбработкаДлительнойОперации");
	
	// Получение статистики сопоставления (опционально)
	ТаблицаПереходовНоваяСтрока(НомерСтраницы_ПолучениеСтатистикиСопоставления(),
									"ОжиданиеАнализаДанных",       "СтраницаНавигацииОжидание",,,,, Истина, "ОжиданиеПолученияСтатистикиСопоставления_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрока(9,  "ОжиданиеАнализаДанных",       "СтраницаНавигацииОжидание",,,,, Истина, "ОжиданиеПолученияСтатистикиСопоставленияФоновоеЗадание_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрока(10, "ОжиданиеАнализаДанных",       "СтраницаНавигацииОжидание",,,,, Истина, "ОжиданиеПолученияСтатистикиСопоставленияФоновоеЗаданиеОкончание_ОбработкаДлительнойОперации");
	
	// Сопоставление данных пользователем
	ТаблицаПереходовНоваяСтрока(11, "СопоставлениеДанных",         "СтраницаНавигацииПродолжение",, "СопоставлениеДанных_ПриОткрытии", "СопоставлениеДанных_ПриПереходеДалее");
	
	// Синхронизация справочников
	ТаблицаПереходовНоваяСтрока(12, "ОжиданиеСинхронизацииДанных", "СтраницаНавигацииОжидание",,,,, Истина, "ОжиданиеСинхронизацииДанных_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрока(13, "ОжиданиеСинхронизацииДанных", "СтраницаНавигацииОжидание",,,,, Истина, "ОжиданиеСинхронизацииДанныхФоновоеЗадание_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрока(14, "ОжиданиеСинхронизацииДанных", "СтраницаНавигацииОжидание",,,,, Истина, "ОжиданиеСинхронизацииДанныхДлительнаяОперация_ОбработкаДлительнойОперации");
	
	// Получение значений по умолчанию корреспондента
	ТаблицаПереходовНоваяСтрока(15, "ОжиданиеСинхронизацииДанных", "СтраницаНавигацииОжидание",,,,, Истина, "ПроверкаЗначенийПоУмолчаниюДляКорреспондента_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрока(16, "ОжиданиеСинхронизацииДанных", "СтраницаНавигацииОжидание",,,,, Истина, "ПроверкаЗначенийПоУмолчаниюДляКорреспондентаДлительнаяОперация_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрока(17, "ОжиданиеСинхронизацииДанных", "СтраницаНавигацииОжидание",,,,, Истина, "ПроверкаЗначенийПоУмолчаниюДляКорреспондентаДлительнаяОперацияОкончание_ОбработкаДлительнойОперации");
	
	// Проверка параметров учета корреспондента
	ТаблицаПереходовНоваяСтрока(18, "ОжиданиеСинхронизацииДанных", "СтраницаНавигацииОжидание",,,,, Истина, "ПроверкаПараметровУчетаКорреспондента_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрока(19, "ОжиданиеСинхронизацииДанных", "СтраницаНавигацииОжидание",,,,, Истина, "ПроверкаПараметровУчетаКорреспондентаДлительнаяОперация_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрока(20, "ОжиданиеСинхронизацииДанных", "СтраницаНавигацииОжидание",,,,, Истина, "ПроверкаПараметровУчетаКорреспондентаДлительнаяОперацияОкончание4_ОбработкаДлительнойОперации");
	
	ТаблицаПереходовНоваяСтрока(21, "НастройкаПараметровУчета",    "СтраницаНавигацииПродолжение",, "НастройкаПараметровУчета_ПриОткрытии", "НастройкаПараметровУчета_ПриПереходеДалее");
	
	// Проверка параметров учета корреспондента
	ТаблицаПереходовНоваяСтрока(22, "ОжиданиеСохраненияНастроек", "СтраницаНавигацииОжидание",,,,, Истина, "ПроверкаПараметровУчетаКорреспондента_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрока(23, "ОжиданиеСохраненияНастроек", "СтраницаНавигацииОжидание",,,,, Истина, "ПроверкаПараметровУчетаКорреспондентаДлительнаяОперация_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрока(24, "ОжиданиеСохраненияНастроек", "СтраницаНавигацииОжидание",,,,, Истина, "ПроверкаПараметровУчетаКорреспондентаДлительнаяОперацияОкончание6_ОбработкаДлительнойОперации");
	
	// Обновление настройки и регистрация данных для синхронизации
	ТаблицаПереходовНоваяСтрока(25, "ОжиданиеСохраненияНастроек", "СтраницаНавигацииОжидание",,,,, Истина, "ОжиданиеСохраненияНастроек_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрока(26, "ОжиданиеСохраненияНастроек", "СтраницаНавигацииОжидание",,,,, Истина, "ОжиданиеСохраненияНастроекФоновоеЗадание_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрока(27, "ОжиданиеСохраненияНастроек", "СтраницаНавигацииОжидание",,,,, Истина, "ОжиданиеСохраненияНастроекДлительнаяОперация_ОбработкаДлительнойОперации");
	
	// Отправка сообщения в менеджер сервиса для фиксации факта настройки обмена
	ТаблицаПереходовНоваяСтрока(28, "ОжиданиеСохраненияНастроек", "СтраницаНавигацииОжидание",,,,, Истина, "ФиксацияСозданияНастройкиОбмена_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрока(29, "ОжиданиеСохраненияНастроек", "СтраницаНавигацииОжидание",,,,, Истина, "ФиксацияСозданияНастройкиОбменаДлительнаяОперация_ОбработкаДлительнойОперации");
	ТаблицаПереходовНоваяСтрока(30, "ОжиданиеСохраненияНастроек", "СтраницаНавигацииОжидание",,,,, Истина, "ФиксацияСозданияНастройкиОбменаДлительнаяОперацияОкончание_ОбработкаДлительнойОперации");
	
	ТаблицаПереходовНоваяСтрока(31, "Окончание",                  "СтраницаНавигацииОкончание");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НомерСтраницы_ПолучениеСтатистикиСопоставления()
	
	Возврат 8;
	
КонецФункции
