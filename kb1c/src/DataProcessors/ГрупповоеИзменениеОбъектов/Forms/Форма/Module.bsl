////////////////////////////////////////////////////////////////////////////////
// Создаваемые реквизиты в реквизите ИзменяемыеОбъекты имеют имена  Реквизит_<поля>
// Создаваемые поля на форме в таблице формы ОбъектыДляИзменения имеют имена Элемент_<имя>
//
// ОПИСАНИЕ РЕКВИЗИТОВ
//
// --- Настройки транзакционной обработки ---------------------------------------
// ТОНастройкаПорции - число
//   1 - одной порцией
//   2 - порциями по числу объектов
//   3 - порциями по проценту объектов
// ТОПроцентОбъектовВПорции - содержит значение если НастройкаПорцииИзменения = 2
// ТОЧислоОбъектовВПорции - содержит значение если НастройкаПорцииИзменения = 3
// ------------------------------------------------------------------------------
//
// --- Изменение блокируемых реквизитов -----------------------------------------
// ЕстьФормаРазблокированияРеквизитов - имеет смысл использовать для объектов
//						с блокируемыми реквизитами, Истина - если есть форма, для работы
//						с блокируемыми реквизитами (ФормаРаботыСБлокируемымиРеквизитами).
//
// ПолноеИмяФормыРаботыСБлокируемымиРеквизитами - строка - полное имя формы для использования
//						в функции ОткрытьФорму, Например,
//						"Справочник.Номенклатура.Форма.ФормаРаботыСБлокируемымиРеквизитами"
// ------------------------------------------------------------------------------
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	НекорректныйВызовОбработки = ТипЗнч(Параметры.МассивОбъектов) <> Тип("Массив");
	Если НекорректныйВызовОбработки Тогда
		Возврат;
	КонецЕсли;
	
	ТипПереданногоОбъекта = ТипЗнч(Параметры.МассивОбъектов[0]);
	КоличествоОбъектов    = Параметры.МассивОбъектов.Количество();
	ШаблонЗаголовка       = НСтр("ru = 'Изменение выделенных элементов ""%1"" (%2)'");
	Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		ШаблонЗаголовка, ТипПереданногоОбъекта, КоличествоОбъектов);
	
	ЗапретРедактированияВстроен = Метаданные.НайтиПоПолномуИмени("ОбщийМодуль.ЗапретРедактированияРеквизитовОбъектовКлиент") <> Неопределено;
	СвойстваВстроены = Метаданные.НайтиПоПолномуИмени("ОбщийМодуль.УправлениеСвойствами") <> Неопределено;
	
	// При отсутствии права сохранения настроек необходимо спрятать весь функционал работы с настройками
	Элементы.ИсторияОпераций.Видимость = ПравоДоступа("СохранениеДанныхПользователя", Метаданные);
	
	// Оптимизация, для того, что бы не переформировывать таблицу
	// изменяемых объектов при простом перелистывании
	ИзменитьТаблицуОбъектов = Ложь;
	
	МетаданныеОбъекта = Параметры.МассивОбъектов[0].Метаданные();
	
	ПолноеИмя = МетаданныеОбъекта.ПолноеИмя();
	
	ТекущийПользователь = Пользователи.АвторизованныйПользователь();
	
	// Подгружаем настройки обработки
	ЗагрузитьНастройкиОбработки();
	
	// Подгружаем историю операций с данным типом объектов
	ЗагрузитьИсториюОпераций();
	
	// Устанавливаем заголовок для таблицы изменяемых объектов
	Элементы.ОбъектыДляИзмененияСсылка.Заголовок = МетаданныеОбъекта.Синоним;
	
	// Объект иерархический
	УчитыватьИерархию = ОбъектМетаданныхИерархический(Параметры.МассивОбъектов[0]);
	ИерархияГрупп = ИерархияГруппИЭлементов(Параметры.МассивОбъектов[0]);
	
	// По переданному составу объектов и типу объекта заполнить допустимые действия с объектом
	ЗаполнитьДеревоОбъектовИОпераций();
	
	// Если нет заблокированных реквизитов скрываем кнопку "РазрешитьРедактированиеРеквизитов"
	Если НЕ ЗапретРедактированияВстроен
		ИЛИ Объект.Операции.НайтиСтроки(
			Новый Структура("ЗаблокированныйРеквизит", Истина) ).Количество() = 0 Тогда
		Если Элементы.Найти("РазрешитьРедактированиеРеквизитов") <> Неопределено Тогда
			Элементы.РазрешитьРедактированиеРеквизитов.Видимость = Ложь;
		КонецЕсли;
	Иначе
		Если МетаданныеОбъекта.Формы.Найти("РазблокированиеРеквизитов") = Неопределено Тогда
			ЕстьФормаРазблокированияРеквизитов = Ложь;
		Иначе
			ЕстьФормаРазблокированияРеквизитов = Истина;
			ПолноеИмяФормыРаботыСБлокируемымиРеквизитами = ПолноеИмя + ".Форма.РазблокированиеРеквизитов";
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если НекорректныйВызовОбработки Тогда
		Отказ = Истина;
		Предупреждение(НСтр("ru = 'Самостоятельное использование формы не предусмотрено.'"));
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ВРег(ИсточникВыбора.ИмяФормы) = ВРег("Обработка.ГрупповоеИзменениеОбъектов.Форма.Настройка") Тогда
		
		ПереформироватьСоставОперацийИДеревоОбъектов = Ложь;
		
		Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
			Если УчитыватьИерархию И ОбрабатыватьРекурсивно <> ВыбранноеЗначение.ОбрабатыватьРекурсивно Тогда
				ОбрабатыватьРекурсивно = ВыбранноеЗначение.ОбрабатыватьРекурсивно;
				ПереформироватьСоставОперацийИДеревоОбъектов = Истина;
			КонецЕсли;
			Объект.ИзменятьВТранзакции = ВыбранноеЗначение.ИзменятьВТранзакции;
			Объект.ПрерыватьПриОшибке  = ВыбранноеЗначение.ПрерыватьПриОшибке;
			ТОНастройкаПорции          = ВыбранноеЗначение.НастройкаПорции;
			ТОПроцентОбъектовВПорции   = ВыбранноеЗначение.ПроцентОбъектовВПорции;
			ТОЧислоОбъектовВПорции     = ВыбранноеЗначение.ЧислоОбъектовВПорции;
		КонецЕсли;
		
		Если ПереформироватьСоставОперацийИДеревоОбъектов Тогда
			ЗаполнитьДеревоОбъектовИОпераций();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	Если ТипЗнч(РезультатФоновогоЗадания) = Тип("Структура")
		И Не РезультатФоновогоЗадания.ЗаданиеВыполнено Тогда
		ОтменитьВыполнениеЗадания(РезультатФоновогоЗадания.ИдентификаторЗадания);
	КонецЕсли;

	СохранитьНастройкиОбработки(
			ПолноеИмя,
			Объект.ИзменятьВТранзакции,
			Объект.ПрерыватьПриОшибке,
			ТОНастройкаПорции,
			ТОПроцентОбъектовВПорции,
			ТОЧислоОбъектовВПорции,
			ОбрабатыватьРекурсивно);
			
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ТаблицаОпераций

&НаКлиенте
Процедура ТаблицаОперацийПередНачаломИзменения(Элемент, Отказ)
	
	Если (Элемент.ТекущийЭлемент.Имя = "ТаблицаОперацийИзменять"
		ИЛИ Элемент.ТекущийЭлемент.Имя = "ТаблицаОперацийЗначение")
	   И Элемент.ТекущиеДанные.ЗаблокированныйРеквизит Тогда
		ВопросПерейтиКРазблокированиюРеквизитов();
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	УстановитьОграниченияВыбираемыхТиповИПараметрыВыбора(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОперацийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ТаблицаОперацийЗначение"
	   И Элемент.ТекущиеДанные.ЗаблокированныйРеквизит Тогда
		
		ВопросПерейтиКРазблокированиюРеквизитов();
		СтандартнаяОбработка = Ложь;
		
		Возврат;
		
	КонецЕсли;
	
	УстановитьОграниченияВыбираемыхТиповИПараметрыВыбора(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОперацийПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент.Имя = "ТаблицаОперацийЗначение" Тогда
		Элемент.ТекущиеДанные.Изменять = ЗначениеЗаполнено(Элемент.ТекущиеДанные.Значение);
	КонецЕсли;
	
	ИзменитьТаблицуОбъектов = Истина;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура Далее(Команда)
	
	ПерейтиНаСтраницуИзмененияОбъектов();
	
КонецПроцедуры

&НаКлиенте
Процедура Изменить(Команда)
	
	Если Не ВыполняетсяОбработка Тогда
	
		Если Объект.Операции.НайтиСтроки(Новый Структура("Изменять", Истина)).Количество() = 0 Тогда
			
			ТекстВопроса = НСтр("ru = 'Не задано ни одного действия. Выполнить перезапись данных без изменений?'");
			Результат = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ОКОтмена, , , 
				НСтр("ru = 'Изменение элементов'"));
			
			Если Результат <> КодВозвратаДиалога.ОК Тогда
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
		УстановитьКнопкиНаВремяИзменения(Истина);
		ПерейтиНаСтраницуИзмененияОбъектов();
		ПодключитьОбработчикОжидания("ИзменитьОбъекты", 0.1, Истина);
		
	ИначеЕсли ТекущееСостояниеИзменения <> Неопределено Тогда
		
		Если Не РезультатФоновогоЗадания.ЗаданиеВыполнено Тогда
			ОтключитьОбработчикОжидания("ПроверитьВыполнениеИзменения");
			ЗавершитьИзменениеОбъектов();
		Иначе
			ТекущееСостояниеИзменения.ПрерватьИзменение = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияОпераций(Команда)
	
	СтандартнаяОбработка = Ложь;
	
	Если ИсторияОперацийСписок.Количество() = 0 Тогда
		Предупреждение(НСтр("ru = 'Изменение элементов не выполнялось ранее.'"));
		Возврат;
	КонецЕсли;
	
	СписокЗначений = Новый СписокЗначений;
	
	Для Каждого ОписаниеИзменения Из ИсторияОперацийСписок Цикл
		СписокЗначений.Добавить(ОписаниеИзменения.Значение, ОписаниеИзменения.Представление);
	КонецЦикла;
	
	Выбор = ВыбратьИзМеню(СписокЗначений, Элементы.ИсторияОпераций);
	
	Если Выбор <> Неопределено Тогда
		УстановитьОперацииИзменения(Выбор.Значение);
	КонецЕсли;
	
	ИзменитьТаблицуОбъектов = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.ИзменениеОбъектов Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.НастройкаИзменений;
		УстановитьСостояниеЭлементовФормы(Элементы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьПараметрыИзменения(Команда)
	
	ПараметрыФормы = Новый Структура;
	
	ПараметрыФормы.Вставить("ИзменятьВТранзакции",    Объект.ИзменятьВТранзакции);
	ПараметрыФормы.Вставить("ОбрабатыватьРекурсивно", ОбрабатыватьРекурсивно);
	ПараметрыФормы.Вставить("ПрерыватьПриОшибке",     Объект.ПрерыватьПриОшибке);
	ПараметрыФормы.Вставить("НастройкаПорции",        ТОНастройкаПорции);
	ПараметрыФормы.Вставить("ПроцентОбъектовВПорции", ТОПроцентОбъектовВПорции);
	ПараметрыФормы.Вставить("ЧислоОбъектовВПорции",   ТОЧислоОбъектовВПорции);
	ПараметрыФормы.Вставить("УчитыватьИерархию",      УчитыватьИерархию);
	
	ОткрытьФорму("Обработка.ГрупповоеИзменениеОбъектов.Форма.Настройка", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОбъектПоСсылкеОбработчикКоманды(Команда)
	
	ОткрытьОбъектПоСсылке();
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиВЖурналРегистрации(Команда)
	
	ПараметрыФормы = Новый Структура("Пользователь", ТекущийПользователь);
	
	ОткрытьФорму("Обработка.ЖурналРегистрации.Форма", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПометкаИзмененияПометитьВсе(Команда)
	
	УстановитьЗначениеПометкиИзменения(ИзменяемыеОбъекты.ПолучитьЭлементы(), Истина);
	
КонецПроцедуры

&НаКлиенте             
Процедура ПометкаИзмененияСнятьВсе(Команда)
	
	УстановитьЗначениеПометкиИзменения(ИзменяемыеОбъекты.ПолучитьЭлементы(), Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура РазрешитьРедактированиеРеквизитовОбработчикКоманды(Команда)
	
	РазрешитьРедактированиеРеквизитов();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

///////////////////////////////////////////////////////////////////////////////
// Операции с историей изменений

&НаСервере
Процедура ДобавитьИзменениеВИсторию(СтруктураИзменения, ПредставлениеИзменения)
	
	// Настройки истории изменений это массив структур с ключами:
	// Изменение - массив со структурой изменения
	// Представление - представление настройки пользователю
	Настройки = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"ГрупповоеИзменениеОбъектов", 
		"ИсторияИзменений/"+ПолноеИмя);
	
	Если Настройки = Неопределено Тогда
		Настройки = Новый Массив;
	Иначе
		Для Индекс = 0 ПО Настройки.ВГраница() Цикл
			Если Настройки.Получить(Индекс).Представление = ПредставлениеИзменения Тогда
				Настройки.Удалить(Индекс);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Настройки.Вставить(0, Новый Структура("Изменение, Представление", СтруктураИзменения, ПредставлениеИзменения));
	
	Если Настройки.Количество() > 20 Тогда
		Настройки.Удалить(19);
	КонецЕсли;
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		"ГрупповоеИзменениеОбъектов", 
		"ИсторияИзменений/"+ПолноеИмя, 
		Настройки);
	
	ЗагрузитьИсториюОпераций();
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьИсториюОпераций()
	
	ИсторияОпераций = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"ГрупповоеИзменениеОбъектов", 
		"ИсторияИзменений/"+ПолноеИмя);
	
	Если ИсторияОпераций = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИсторияОперацийСписок.Очистить();
	
	Для Каждого ОписаниеОперации Из ИсторияОпераций Цикл
		ИсторияОперацийСписок.Добавить(ОписаниеОперации.Изменение, ОписаниеОперации.Представление);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОперацииИзменения(МассивОпераций)
	
	СброситьОперации();
	
	ЕстьЗаблокированные = Ложь;
	
	Для Каждого ОписаниеИзменения Из МассивОпераций Цикл
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("ВидОперации", ОписаниеИзменения.ВидОперации);
		
		Если ОписаниеИзменения.ВидОперации = 1 Тогда // реквизит объекта
			СтруктураПоиска.Вставить("ИмяРеквизита", ОписаниеИзменения.ИмяРеквизита);
		Иначе
			СтруктураПоиска.Вставить("Свойство", ОписаниеИзменения.Свойство);
		КонецЕсли;
		
		НайденныеСтроки = Объект.Операции.НайтиСтроки(СтруктураПоиска);
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			Если НайденныеСтроки[0].ЗаблокированныйРеквизит  Тогда
				ЕстьЗаблокированные = Истина;
				Продолжить;
			КонецЕсли;
			НайденныеСтроки[0].Значение = ОписаниеИзменения.Значение;
			НайденныеСтроки[0].Изменять = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьЗаблокированные Тогда
		Предупреждение(НСтр("ru = 'Некоторые реквизиты заблокированы для изменения, изменения не установлены.'"));
	КонецЕсли;
	
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
// Операции с элементами формы

&НаКлиенте
Процедура ВопросПерейтиКРазблокированиюРеквизитов()
	
	ТекстВопроса = НСтр("ru = 'Реквизит заблокирован, перейти к разблокированию реквизитов?'");
	
	Кнопки = Новый СписокЗначений;
	Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru = 'Да'"));
	Кнопки.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru = 'Отмена'"));
	
	Результат = Вопрос(ТекстВопроса, Кнопки, , КодВозвратаДиалога.Да, НСтр("ru = 'Реквизит заблокирован'"));
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		РазрешитьРедактированиеРеквизитов();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораСервер(ПараметрыВыбора, ПараметрыВыбораМассив)
	
		Для Индекс = 1 по СтрЧислоСтрок(ПараметрыВыбора) Цикл
			
			ПараметрыВыбораСтрока = СтрПолучитьСтроку(ПараметрыВыбора, Индекс);
			
			ПараметрыВыбораМассивСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПараметрыВыбораСтрока, ";");
			ИмяПоляОтбора = СокрЛП(ПараметрыВыбораМассивСтрок[0]);
			ИмяТипа       = СокрЛП(ПараметрыВыбораМассивСтрок[1]);
			XMLСтрока     = СокрЛП(ПараметрыВыбораМассивСтрок[2]);
			
			Если Тип(ИмяТипа) = Тип("ФиксированныйМассив") Тогда
				
				Массив = Новый Массив;
				
				XMLСтрокаМассив = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(XMLСтрока, "%%");
				
				Для Каждого Элемент Из XMLСтрокаМассив Цикл
					
					ЭлементМассив = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Элемент, "%");
					
					ЗначениеЭлемента = XMLЗначение(Тип(ЭлементМассив[0]), ЭлементМассив[1]);
					
					Массив.Добавить(ЗначениеЭлемента);
					
				КонецЦикла;
				
				Значение = Новый ФиксированныйМассив(Массив);
				
			Иначе
				Значение = XMLЗначение(Тип(ИмяТипа), XMLСтрока);
			КонецЕсли;
			
			ПараметрыВыбораМассив.Добавить(Новый ПараметрВыбора(ИмяПоляОтбора, Значение));
		
		КонецЦикла;
	
КонецПроцедуры

// Устанавливает ограничения выбираемых типов значений и параметры выбора
//
&НаКлиенте
Процедура УстановитьОграниченияВыбираемыхТиповИПараметрыВыбора(Элемент)
	
	Поле = Элемент.ПодчиненныеЭлементы.ТаблицаОперацийЗначение;
	Поле.ОграничениеТипа = Элемент.ТекущиеДанные.ОписаниеТипов;
	
	ПараметрыВыбораМассив = Новый Массив;
	
	Если НЕ ПустаяСтрока(Элемент.ТекущиеДанные.ПараметрыВыбора) Тогда
		УстановитьПараметрыВыбораСервер(Элемент.ТекущиеДанные.ПараметрыВыбора, ПараметрыВыбораМассив)
	КонецЕсли;
	
	Если Не ПустаяСтрока(Элемент.ТекущиеДанные.СвязиПараметровВыбора) Тогда
	
		Для Индекс = 1 по СтрЧислоСтрок(Элемент.ТекущиеДанные.СвязиПараметровВыбора) Цикл
			
			СвязьПараметровВыбораСтрока = СтрПолучитьСтроку(Элемент.ТекущиеДанные.СвязиПараметровВыбора, Индекс);
			РазложенныеСтроки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СвязьПараметровВыбораСтрока, ";");
			ИмяПараметра = СокрЛП(РазложенныеСтроки[0]);
			ИмяРеквизита = СокрЛП(РазложенныеСтроки[1]);
			НайденныеСтроки = Объект.Операции.НайтиСтроки(Новый Структура("ВидОперации,ИмяРеквизита", 1, ИмяРеквизита));
			Если НайденныеСтроки.Количество() = 1 Тогда
				Значение = НайденныеСтроки[0].Значение;
				Если ЗначениеЗаполнено(Значение) Тогда
					ПараметрыВыбораМассив.Добавить(Новый ПараметрВыбора(ИмяПараметра, Значение));
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Элемент.ТекущиеДанные.Свойство) Тогда
		ПараметрыВыбораМассив.Добавить(Новый ПараметрВыбора("Отбор.Владелец", Элемент.ТекущиеДанные.Свойство));
	КонецЕсли;
	
	Поле.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораМассив);
	
	ВыборГруппИЭлементов = Элемент.ТекущиеДанные.ВыборГруппИЭлементов;
	
	Если ВыборГруппИЭлементов <> "" Тогда
		Если	  ВыборГруппИЭлементов = "Группы" Тогда
			Поле.ВыборГруппИЭлементов = ГруппыИЭлементы.Группы;
		ИначеЕсли ВыборГруппИЭлементов = "ГруппыИЭлементы" Тогда
			Поле.ВыборГруппИЭлементов = ГруппыИЭлементы.ГруппыИЭлементы;
		ИначеЕсли ВыборГруппИЭлементов = "Элементы" Тогда
			Поле.ВыборГруппИЭлементов = ГруппыИЭлементы.Элементы;
		Иначе
			Поле.ВыборГруппИЭлементов = ГруппыИЭлементы.Авто;
		КонецЕсли;
	Иначе
		Поле.ВыборГруппИЭлементов = ГруппыИЭлементы.Авто;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыДляИзмененияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.ОбъектыДляИзмененияСсылка Тогда
		СтандартнаяОбработка = Ложь;
		ОткрытьОбъектПоСсылке();
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Операции с формой

&НаСервереБезКонтекста
Процедура СохранитьНастройкиОбработки(ПолноеИмя, ИзменятьВТранзакции, ПрерыватьПриОшибке,
			ТОНастройкаПорции, ТОПроцентОбъектовВПорции, ТОЧислоОбъектовВПорции, ОбрабатыватьРекурсивно)
	
	СтруктураНастроек = Новый Структура;
	
	СтруктураНастроек.Вставить("ИзменятьВТранзакции",		ИзменятьВТранзакции);
	СтруктураНастроек.Вставить("ПрерыватьПриОшибке",		ПрерыватьПриОшибке);
	СтруктураНастроек.Вставить("ТОНастройкаПорции",			ТОНастройкаПорции);
	СтруктураНастроек.Вставить("ТОПроцентОбъектовВПорции",	ТОПроцентОбъектовВПорции);
	СтруктураНастроек.Вставить("ТОЧислоОбъектовВПорции",	ТОЧислоОбъектовВПорции);
	СтруктураНастроек.Вставить("ОбрабатыватьРекурсивно",	ОбрабатыватьРекурсивно);
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		"Обработка.ГрупповоеИзменениеОбъектов", 
		ПолноеИмя, 
		СтруктураНастроек);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНастройкиОбработки()
	
	СтруктураНастроек = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"Обработка.ГрупповоеИзменениеОбъектов", 
		ПолноеИмя);
	
	Если СтруктураНастроек <> Неопределено Тогда
		Объект.ИзменятьВТранзакции = СтруктураНастроек.ИзменятьВТранзакции;
		Объект.ПрерыватьПриОшибке  = СтруктураНастроек.ПрерыватьПриОшибке;
		ТОНастройкаПорции          = СтруктураНастроек.ТОНастройкаПорции;
		ТОПроцентОбъектовВПорции   = СтруктураНастроек.ТОПроцентОбъектовВПорции;
		ТОЧислоОбъектовВПорции     = СтруктураНастроек.ТОЧислоОбъектовВПорции;
		ОбрабатыватьРекурсивно     = СтруктураНастроек.ОбрабатыватьРекурсивно;
		Возврат;
	КонецЕсли;
	
	Объект.ИзменятьВТранзакции = Истина;
	Объект.ПрерыватьПриОшибке  = Истина;
	ТОНастройкаПорции          = 1;
	ТОПроцентОбъектовВПорции   = 100;
	ТОЧислоОбъектовВПорции     = 1;
	ОбрабатыватьРекурсивно     = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоОбъектовИОпераций()
	
	МассивЗаполненных = Новый Массив;
	ЗаполнитьМассивИзмененных(МассивЗаполненных, ИзменяемыеОбъекты.ПолучитьЭлементы());
	
	// --------------------------------------------------------
	// сохраняем уже введенные операции, что бы перенести их
	// в список операций при переформировании списка операций
	//
	
	ВведенныеОперации = Новый ТаблицаЗначений;
	ВведенныеОперации.Колонки.Добавить("ВидОперации",  Новый ОписаниеТипов("Число"));
	ВведенныеОперации.Колонки.Добавить("ИмяРеквизита", Новый ОписаниеТипов("Строка"));
	ВведенныеОперации.Колонки.Добавить("Изменять",     Новый ОписаниеТипов("Булево"));
	ВведенныеОперации.Колонки.Добавить("Значение");
	
	Если СвойстваВстроены Тогда
		ВведенныеОперации.Колонки.Добавить("Свойство", Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ДополнительныеРеквизитыИСведения"));
	КонецЕсли;
	
	Для Каждого ОписаниеОперации Из Объект.Операции.НайтиСтроки(Новый Структура("Изменять", Истина)) Цикл
		ЗаполнитьЗначенияСвойств(ВведенныеОперации.Добавить(), ОписаниеОперации);
	КонецЦикла;
	
	//
	// --------------------------------------------------------
	
	Объект.ОбъектыДляИзменения.Очистить();
	Объект.Операции.Очистить();
	ИзменяемыеОбъекты.ПолучитьЭлементы().Очистить();
	
	ЗаполнитьДеревоОбъектовДляИзменения(МассивЗаполненных);
	
	ЗаполнитьСплошнойСписокОбъектовДляИзменения(ИзменяемыеОбъекты.ПолучитьЭлементы());
	
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	ОбъектОбработка.ЗаполнитьТаблицуОперацийСОбъектом();
	
	// --------------------------------------------------------
	// восстанавливаем значения сохраненных операций,
	// если применимо
	//
	
	Для Каждого ОписаниеОперации Из ОбъектОбработка.Операции Цикл
		Отбор = Новый Структура;
		Отбор.Вставить("ВидОперации", ОписаниеОперации.ВидОперации);
		Если ОписаниеОперации.ВидОперации = 1 Тогда
			Отбор.Вставить("ИмяРеквизита", ОписаниеОперации.ИмяРеквизита);
		Иначе
			Отбор.Вставить("Свойство", ОписаниеОперации.Свойство);
		КонецЕсли;
		НайденныеСтроки = ВведенныеОперации.НайтиСтроки(Отбор);
		Если НайденныеСтроки.Количество() = 1 Тогда
			НайденнаяСтрока = НайденныеСтроки[0];
			ОписаниеОперации.Изменять = НайденнаяСтрока.Изменять;
			ОписаниеОперации.Значение = НайденнаяСтрока.Значение;
		КонецЕсли;
	КонецЦикла;
	
	// --------------------------------------------------------
	
	ЗначениеВРеквизитФормы(ОбъектОбработка, "Объект");
	
	Для Каждого Операция Из Объект.Операции Цикл
		Операция.ОписаниеТипов = XMLЗначение(Тип("ХранилищеЗначения"), Операция.ДопустимыеТипы).Получить();
	КонецЦикла;
	
	УстановитьСостояниеЭлементовФормы(Элементы, Объект.ОбъектыДляИзменения.Количество());
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Обработчики команд

&НаКлиенте
Процедура РазрешитьРедактированиеРеквизитов()
	
	ЗаблокированныеРеквизитыСтроки = Объект.Операции.НайтиСтроки(Новый Структура("ЗаблокированныйРеквизит", Истина));
	
	Если ЕстьФормаРазблокированияРеквизитов Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("РежимВыбора", Истина);
		РазрешенныеРеквизиты = ОткрытьФормуМодально(ПолноеИмяФормыРаботыСБлокируемымиРеквизитами, ПараметрыФормы, ЭтаФорма);
		
		Если ТипЗнч(РазрешенныеРеквизиты) = Тип("Массив")
			И РазрешенныеРеквизиты.Количество() > 0 Тогда
			
			Для Каждого ОписаниеОперацииСтрока Из ЗаблокированныеРеквизитыСтроки Цикл
				Если ОписаниеОперацииСтрока.ЗаблокированныйРеквизит
				   И РазрешенныеРеквизиты.Найти(ОписаниеОперацииСтрока.ИмяРеквизита) <> Неопределено Тогда
					ОписаниеОперацииСтрока.ЗаблокированныйРеквизит = Ложь;
				КонецЕсли;
			КонецЦикла;
			
			Если Объект.Операции.НайтиСтроки(Новый Структура("ЗаблокированныйРеквизит", Истина)).Количество() = 0 Тогда
				Если Элементы.Найти("РазрешитьРедактированиеРеквизитов") <> Неопределено Тогда
					Элементы.РазрешитьРедактированиеРеквизитов.Доступность = Ложь;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		
	Иначе
		
		МассивСсылок = Новый Массив;
		
		ЗаполнитьМассивИзменяемыхОбъектов(ИзменяемыеОбъекты.ПолучитьЭлементы(), МассивСсылок);
		
		СинонимыРеквизитов = Новый Массив;
		
		Для Каждого ОписаниеОперацииСтрока Из ЗаблокированныеРеквизитыСтроки Цикл
			СинонимыРеквизитов.Добавить(ОписаниеОперацииСтрока.Представление);
		КонецЦикла;
		
		ЗапретРедактированияРеквизитовОбъектовКлиентМодуль =
			ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ЗапретРедактированияРеквизитовОбъектовКлиент");
		
		Если ЗапретРедактированияРеквизитовОбъектовКлиентМодуль.ПроверитьСсылкиНаОбъект(МассивСсылок, СинонимыРеквизитов) Тогда
			Если Элементы.Найти("РазрешитьРедактированиеРеквизитов") <> Неопределено Тогда
				Элементы.РазрешитьРедактированиеРеквизитов.Доступность = Ложь;
			КонецЕсли;
			
			Для Каждого ОписаниеОперацииСтрока Из ЗаблокированныеРеквизитыСтроки Цикл
				ОписаниеОперацииСтрока.ЗаблокированныйРеквизит = Ложь;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаСтраницуИзмененияОбъектов()
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.НастройкаИзменений Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.ИзменениеОбъектов;
		УстановитьСостояниеЭлементовФормы(Элементы);
		Если ИзменитьТаблицуОбъектов Тогда
			СформироватьИЗаполнитьДеревоИзменяемыхОбъектов();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьКнопкиНаВремяИзменения(НачалоИзменения)
	
	ВыполняетсяОбработка = НачалоИзменения;

	Элементы.ФормаНазад.Доступность = НЕ НачалоИзменения;
	Элементы.ФормаОтмена.Доступность = НЕ НачалоИзменения;
	
	Если НачалоИзменения Тогда
		Если Объект.ИзменятьВТранзакции И СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ИнформационнаяБазаФайловая Тогда
			Элементы.ФормаИзменить.Доступность = Ложь;
		Иначе
			Элементы.ФормаИзменить.Заголовок = НСтр("ru = 'Прервать'");
		КонецЕсли;
	Иначе
		Элементы.ФормаИзменить.Доступность = Истина;
		Элементы.ФормаИзменить.Заголовок = НСтр("ru = 'Изменить'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПодготовитьДеревоДляИзменения(КоллекцияЭлементов, ТекущиеИзменяемыеОбъекты)
	
	КоличествоИзменяемых = 0;
	
	Для Каждого ИзменяемыйЭлемент Из КоллекцияЭлементов Цикл
		ИзменяемыйЭлемент.КодОшибки = "";
		Если ИзменяемыйЭлемент.Изменять Тогда
			КоличествоИзменяемых = КоличествоИзменяемых + 1;
			ТекущиеИзменяемыеОбъекты.Добавить(ИзменяемыйЭлемент.Ссылка, ИзменяемыйЭлемент.ПолучитьИдентификатор());
		КонецЕсли;
		КоличествоИзменяемых = КоличествоИзменяемых + ПодготовитьДеревоДляИзменения(ИзменяемыйЭлемент.ПолучитьЭлементы(), ТекущиеИзменяемыеОбъекты);
	КонецЦикла;
	
	Возврат КоличествоИзменяемых;
	
КонецФункции

&НаКлиенте
Процедура ИзменитьОбъекты()
	
	ОчиститьСообщения();
	
	ТекущееСостояниеИзменения = Новый Структура;
	
	ТекущиеИзменяемыеОбъекты = Новый СписокЗначений;
	
	КоличествоОбъектовДляОбработки = ПодготовитьДеревоДляИзменения(ИзменяемыеОбъекты.ПолучитьЭлементы(), ТекущиеИзменяемыеОбъекты);
	
	Если КоличествоОбъектовДляОбработки = 0 Тогда
		УстановитьКнопкиНаВремяИзменения(Ложь);
		Предупреждение(НСтр("ru = 'Не указаны объекты для изменения'"));
		Возврат;
	КонецЕсли;
	
	ТекущееСостояниеИзменения.Вставить("ТекущиеИзменяемыеОбъекты", ТекущиеИзменяемыеОбъекты);
	
	Если Объект.ИзменятьВТранзакции Тогда
		
		Если ТОНастройкаПорции = 1 Тогда // обработка одним вызовом
			
			ПоказатьОповещениеПользователя(НСтр("ru = 'Изменение выделенных элементов'"), ,НСтр("ru = 'Пожалуйста подождите, обработка может занять некоторое время...'"));
			ПоказыватьПроцентОбработанных = Ложь;
			
			РазмерПорции = КоличествоОбъектовДляОбработки;
			
		Иначе
			
			ПоказыватьПроцентОбработанных = Истина;
			
			Если ТОНастройкаПорции = 2 Тогда // порциями по числу объектов
				РазмерПорции = ?(ТОЧислоОбъектовВПорции < КоличествоОбъектовДляОбработки, 
									ТОЧислоОбъектовВПорции, КоличествоОбъектовДляОбработки);
			Иначе // порциями по проценту объектов
				РазмерПорции = Окр(КоличествоОбъектовДляОбработки * ТОПроцентОбъектовВПорции / 100);
				Если РазмерПорции = 0 Тогда
					РазмерПорции = 1;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	Иначе
		
		Если КоличествоОбъектовДляОбработки >= НетранзакционнаяПорцияГраницаПерехода() Тогда
			// Число объектов - постоянная величина
			РазмерПорции = НетранзакционнаяПорцияПолученияДанныхОбъектов();
		Иначе
			// Число объектов - переменная величина, процент от общего числа
			РазмерПорции = Окр(КоличествоОбъектовДляОбработки * НетранзакционнаяПорцияПолученияДанныхПроцент() / 100);
			Если РазмерПорции = 0 Тогда
				РазмерПорции = 1;
			КонецЕсли;
		КонецЕсли;
		
		Состояние(НСтр("ru = 'Обрабатываются элементы...'"), 0, НСтр("ru = 'Изменение выделенных элементов'"));
		
		ПоказыватьПроцентОбработанных = Истина;
	КонецЕсли;
	
	ТекущееСостояниеИзменения.Вставить("ЕстьЭлементыДляОбработки", Истина);
	ТекущееСостояниеИзменения.Вставить("ТекущаяПозиция", 0); 			// позиция последнего обработанного элемента. 1 - первый элемент.
	ТекущееСостояниеИзменения.Вставить("КоличествоОшибок", 0);			// инициализируем счетчик ошибок
	ТекущееСостояниеИзменения.Вставить("КоличествоИзмененных", 0);		// инициализируем счетчик измененных
	ТекущееСостояниеИзменения.Вставить("ОстанавливатьИзменениеПриОшибке", Объект.ПрерыватьПриОшибке);
	ТекущееСостояниеИзменения.Вставить("КоличествоОбъектовДляОбработки", КоличествоОбъектовДляОбработки);
	ТекущееСостояниеИзменения.Вставить("РазмерПорции", РазмерПорции);
	ТекущееСостояниеИзменения.Вставить("ПоказыватьПроцентОбработанных", ПоказыватьПроцентОбработанных);
	ТекущееСостояниеИзменения.Вставить("ПрерватьИзменение", Ложь);
	
	ПодключитьОбработчикОжидания("ИзменитьПорциюОбъектов", 0.1, Истина);
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.ОжиданиеОбработки;
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПорциюОбъектов()
	
	НачальнаяПозиция = ТекущееСостояниеИзменения.ТекущаяПозиция;
	ОконечнаяПозиция = ТекущееСостояниеИзменения.ТекущаяПозиция+ТекущееСостояниеИзменения.РазмерПорции;
	
	ПорцияМассив = ПолучитьПорциюОбрабатываемыхОбъектов(НачальнаяПозиция+1, ОконечнаяПозиция);
		
	// Изменяем порцию на сервере
	РезультатИзменения = ИзменитьНаСервере(ПорцияМассив, ТекущееСостояниеИзменения.ОстанавливатьИзменениеПриОшибке);
		
	Если РезультатФоновогоЗадания.ЗаданиеВыполнено Тогда
		ОбработатьРезультатИзменения(ПолучитьИзВременногоХранилища(РезультатФоновогоЗадания.АдресХранилища));
	Иначе
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("ПроверитьВыполнениеИзменения", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьВыполнениеИзменения()
	
	Попытка
		РезультатФоновогоЗадания.ЗаданиеВыполнено = ЗаданиеВыполнено(РезультатФоновогоЗадания.ИдентификаторЗадания);
	Исключение
		ПерейтиНаСтраницуИзмененияОбъектов();
		ВызватьИсключение;
	КонецПопытки;
	
	Если РезультатФоновогоЗадания.ЗаданиеВыполнено Тогда
		ОбработатьРезультатИзменения(ПолучитьИзВременногоХранилища(РезультатФоновогоЗадания.АдресХранилища));
	Иначе
		ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("ПроверитьВыполнениеИзменения", ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатИзменения(РезультатИзменения)
	
	Перем КоличествоОшибок, КоличествоИзмененных;
	
	НачальнаяПозиция = ТекущееСостояниеИзменения.ТекущаяПозиция;
	
	Пока Истина Цикл
		// Переносим информацию по обработанным объектам в таблицу
		ЗаполнитьСостояниеОбработанных(РезультатИзменения, КоличествоОшибок, КоличествоИзмененных);
		
		ТекущееСостояниеИзменения.КоличествоОшибок = КоличествоОшибок + ТекущееСостояниеИзменения.КоличествоОшибок;
		ТекущееСостояниеИзменения.КоличествоИзмененных = КоличествоИзмененных + ТекущееСостояниеИзменения.КоличествоИзмененных;
		
		Если НЕ (ТекущееСостояниеИзменения.ОстанавливатьИзменениеПриОшибке И РезультатИзменения.ЕстьОшибки) Тогда
			Прервать;
		КонецЕсли;
		
		// При наличии ошибок в транзакции - откатываем всю транзакцию
		Если Объект.ИзменятьВТранзакции Тогда
			ТекстПредупреждения = НСтр("ru = 'При изменении элементов обнаружены ошибки - изменения отменены.'");
			ПодключитьОбработчикОжидания("ЗавершитьИзменениеОбъектов", 0.1, Истина);
			Возврат; // досрочный выход из цикла и процедуры
		КонецЕсли;
		
		ТекстВопроса = НСтр("ru = 'При изменении элементов (группы элементов) возникли ошибки.
		|Прервать изменение элементов и перейти к просмотру ошибок?
		|'");
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Прервать, НСтр("ru = 'Прервать'"));
		Кнопки.Добавить(КодВозвратаДиалога.Пропустить, НСтр("ru = 'Продолжить'"));
		Кнопки.Добавить(КодВозвратаДиалога.Нет, НСтр("ru = 'Больше не спрашивать'"));
		
		Результат = Вопрос(ТекстВопроса, Кнопки, , КодВозвратаДиалога.Прервать, НСтр("ru = 'Ошибки при изменении элементов'"));
		
		Если Результат = Неопределено Или Результат = КодВозвратаДиалога.Прервать Тогда
			ПодключитьОбработчикОжидания("ЗавершитьИзменениеОбъектов", 0.1, Истина);
			Возврат; // досрочный выход из цикла и процедуры
		КонецЕсли;
		
		Если Результат = КодВозвратаДиалога.Пропустить ИЛИ Результат = КодВозвратаДиалога.Нет Тогда
			// переходим к дообработке объектов порции
			
			Если Результат = КодВозвратаДиалога.Нет Тогда
				// более в этом цикле изменения не останавливаться по ошибке
				ТекущееСостояниеИзменения.ОстанавливатьИзменениеПриОшибке = Ложь;
			КонецЕсли;
			
			Для Каждого СостояниеОбработанногоОбъекта Из РезультатИзменения.СостояниеОбработки Цикл
				НачальнаяПозиция = НачальнаяПозиция + 1;
				Если Не ПустаяСтрока(СостояниеОбработанногоОбъекта.Значение.КодОшибки) Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		Прервать;
	КонецЦикла;
	
	Элементы.ОбъектыДляИзменения.ТекущаяСтрока = ТекущееСостояниеИзменения.ТекущаяПозиция;
	
	ТекущееСостояниеИзменения.ТекущаяПозиция = ТекущееСостояниеИзменения.ТекущаяПозиция + ТекущееСостояниеИзменения.РазмерПорции;
	
	Если ТекущееСостояниеИзменения.ПоказыватьПроцентОбработанных Тогда
		// вычисляем текущий процент обработанных объектов
		ТекущийПроцент = ТекущееСостояниеИзменения.ТекущаяПозиция / ТекущееСостояниеИзменения.КоличествоОбъектовДляОбработки * 100;
		Состояние(НСтр("ru = 'Обрабатываются элементы...'"), ТекущийПроцент, НСтр("ru = 'Изменение выделенных элементов'"));
	КонецЕсли;
	
	ЕстьЭлементыДляОбработки = ?(ТекущееСостояниеИзменения.ТекущаяПозиция < ТекущееСостояниеИзменения.КоличествоОбъектовДляОбработки, Истина, Ложь);
	
	Если ЕстьЭлементыДляОбработки И НЕ ТекущееСостояниеИзменения.ПрерватьИзменение Тогда
		ПодключитьОбработчикОжидания("ИзменитьПорциюОбъектов", 0.1, Истина);
	Иначе
		ПодключитьОбработчикОжидания("ЗавершитьИзменениеОбъектов", 0.1, Истина);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьИзменениеОбъектов()
	
	Если Объект.ИзменятьВТранзакции
	   И ТОНастройкаПорции = 1 Тогда // обработка одним вызовом
		ПоказатьОповещениеПользователя(НСтр("ru = 'Изменение выделенных элементов'"), , НСтр("ru = 'Обработка элементов завершена...'"));
	КонецЕсли;
	
	УстановитьКнопкиНаВремяИзменения(Ложь);
	ЗавершающиеДействияПриИзмененииСервер();
	ОповеститьОбИзменении(ТипЗнч(Параметры.МассивОбъектов[0]));
	Оповестить("ЗавершениеГрупповогоИзмененияОбъектов");
	ТекущееСостояниеИзменения = Неопределено;
	
КонецПроцедуры

&НаСервере
Процедура ЗавершающиеДействияПриИзмененииСервер()
	
	Если РезультатФоновогоЗадания.Свойство("ИдентификаторЗадания") Тогда
		ДлительныеОперации.ОтменитьВыполнениеЗадания(РезультатФоновогоЗадания.ИдентификаторЗадания);
	КонецЕсли;
	
	Если ТекущееСостояниеИзменения.КоличествоОшибок > 0 Тогда
		
		Элементы.СтраницыПодсказокИзмененияОбъектов.ТекущаяСтраница =
			Элементы.СтраницаПодсказкаПослеИзмененияЕстьОшибки;
		
		Если Объект.ИзменятьВТранзакции Тогда
			КоличествоИзмененных = 0;
		Иначе
			КоличествоИзмененных = Строка(ТекущееСостояниеИзменения.КоличествоИзмененных);
		КонецЕсли;
		
		НеИзмененоОбъектов = ТекущееСостояниеИзменения.КоличествоОбъектовДляОбработки - КоличествоИзмененных;
		Элементы.ПодсказкаПослеИзмененияЕстьОшибки.Заголовок = 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось изменить все выбранные элементы (%1 из %2).'"),
				НеИзмененоОбъектов,
				Строка(ТекущееСостояниеИзменения.КоличествоОбъектовДляОбработки));
		
	Иначе
		Элементы.СтраницыПодсказокИзмененияОбъектов.ТекущаяСтраница =
			Элементы.СтраницаПодсказкаУспешноеИзменение;
		Элементы.ПодсказкаУспешноеИзменение.Заголовок = 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Изменение элементов успешно завершено: %1.'"),
				Строка(ТекущееСостояниеИзменения.КоличествоИзмененных));
		
	КонецЕсли;
	
	КоллекцияОпераций = Объект.Операции.НайтиСтроки(Новый Структура("Изменять", Истина));
	
	ОписаниеИзменения = Новый Массив;
	ШаблонПредставления = "[Поле]=<Значение>";
	ПредставлениеИзменения = "";
	
	Для Каждого ОписаниеОперации Из КоллекцияОпераций Цикл
		
		СтруктураИзменения = Новый Структура;
		СтруктураИзменения.Вставить("ВидОперации",	ОписаниеОперации.ВидОперации);
		СтруктураИзменения.Вставить("ИмяРеквизита",	ОписаниеОперации.ИмяРеквизита);
		СтруктураИзменения.Вставить("Свойство",		ОписаниеОперации.Свойство);
		СтруктураИзменения.Вставить("Значение",		ОписаниеОперации.Значение);
		
		ОписаниеИзменения.Добавить(СтруктураИзменения);
		ТекущаяОперация = СтрЗаменить(ШаблонПредставления, "[Поле]", СокрЛП(Строка(ОписаниеОперации.Представление)));
		ТекущаяОперация = СтрЗаменить(ТекущаяОперация, "<Значение>", СокрЛП(Строка(ОписаниеОперации.Значение)));
		ПредставлениеИзменения = ПредставлениеИзменения + ТекущаяОперация +"; ";
	КонецЦикла;
	
	ПредставлениеИзменения = Лев(ПредставлениеИзменения, СтрДлина(ПредставлениеИзменения) - 2);
	
	Если ЗначениеЗаполнено(ПредставлениеИзменения) Тогда
		ДобавитьИзменениеВИсторию(ОписаниеИзменения, ПредставлениеИзменения);
	КонецЕсли;
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.ИзменениеОбъектов;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСостояниеОбработанных(РезультатИзменения, КоличествоОшибок, КоличествоИзмененных)
	
	КоличествоОшибок = 0;
	КоличествоИзмененных = 0;
	
	Для Каждого СостояниеОбработанногоОбъекта Из РезультатИзменения.СостояниеОбработки Цикл
		
		НомерСтроки = -1;
		
		Идентификатор = Число(ТекущееСостояниеИзменения.ТекущиеИзменяемыеОбъекты.НайтиПоЗначению(СостояниеОбработанногоОбъекта.Ключ).Представление);
		
		ЭлементДерева = ИзменяемыеОбъекты.НайтиПоИдентификатору(Идентификатор);
		
		ЭлементДерева.КодОшибки = СостояниеОбработанногоОбъекта.Значение.КодОшибки;
		
		Если Не ПустаяСтрока(СостояниеОбработанногоОбъекта.Значение.КодОшибки) Тогда
			КоличествоОшибок = КоличествоОшибок + 1;
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					СостояниеОбработанногоОбъекта.Значение.СообщениеОбОшибке
					+ "(" + Строка(СостояниеОбработанногоОбъекта.Ключ) + ")", );
		Иначе
			КоличествоИзмененных = КоличествоИзмененных + 1;
			
			Если НЕ (Объект.ИзменятьВТранзакции И РезультатИзменения.ЕстьОшибки) Тогда
				Для Каждого ИзмененныйРеквизит Из СостояниеОбработанногоОбъекта.Значение.ЗначенияИзмененныхРеквизитов Цикл
					ИмяСвязанногоРеквизита = ПрефиксИмениРеквизита() + ИзмененныйРеквизит.Ключ;
					Если ЭлементДерева.Свойство(ИмяСвязанногоРеквизита) Тогда
						ЭлементДерева[ИмяСвязанногоРеквизита] = ИзмененныйРеквизит.Значение;
					КонецЕсли;
				КонецЦикла;
				Для Каждого ИзмененныйРеквизит Из СостояниеОбработанногоОбъекта.Значение.ЗначенияИзмененныхДопРеквизитов Цикл
					Если ЭлементДерева.Свойство(ИзмененныйРеквизит.Ключ) Тогда
						ЭлементДерева[ИзмененныйРеквизит.Ключ] = ИзмененныйРеквизит.Значение;
					КонецЕсли;
				КонецЦикла;
				Для Каждого ИзмененныйРеквизит Из СостояниеОбработанногоОбъекта.Значение.ЗначенияИзмененныхДопСведений Цикл
					Если ЭлементДерева.Свойство(ИзмененныйРеквизит.Ключ) Тогда
						ЭлементДерева[ИзмененныйРеквизит.Ключ] = ИзмененныйРеквизит.Значение;
					КонецЕсли;
				КонецЦикла;
				
				ЭлементДерева.Изменять = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПорциюОбрабатываемыхОбъектов(НижняяГраница, ВерхняяГраница)
	
	Порция = Новый Массив;
	
	Для Индекс = НижняяГраница По ВерхняяГраница Цикл
		Если Индекс <= ТекущееСостояниеИзменения.КоличествоОбъектовДляОбработки Тогда
			Порция.Добавить(
				ИзменяемыеОбъекты.НайтиПоИдентификатору(
					Число(ТекущееСостояниеИзменения.ТекущиеИзменяемыеОбъекты.Получить(Индекс-1).Представление)).Ссылка);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Порция;
	
КонецФункции

&НаСервере
Функция ИзменитьНаСервере(ОбъектыДляОбработки, знач ОстанавливатьИзменениеПриОшибке)
	
	УправлениеСвойствамиМодуль =
	?(Метаданные.НайтиПоПолномуИмени("ОбщийМодуль.УправлениеСвойствами") = Неопределено,
				Неопределено,
				Вычислить("УправлениеСвойствами"));
				
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ОбрабатываемыеОбъекты", ОбъектыДляОбработки);
	СтруктураПараметров.Вставить("ОстанавливатьИзменениеПриОшибке", ОстанавливатьИзменениеПриОшибке);
	СтруктураПараметров.Вставить("ИзменятьВТранзакции", ОбработкаОбъект.ИзменятьВТранзакции);
	СтруктураПараметров.Вставить("ПрерыватьПриОшибке", ОбработкаОбъект.ПрерыватьПриОшибке);
	СтруктураПараметров.Вставить("ИспользуютсяДопРеквизиты", ОбработкаОбъект.ИспользуютсяДопРеквизиты);
	СтруктураПараметров.Вставить("ИспользуютсяДопСведения", ОбработкаОбъект.ИспользуютсяДопСведения);
	СтруктураПараметров.Вставить("Операции", ОбработкаОбъект.Операции.Выгрузить());
	СтруктураПараметров.Вставить("ОбъектыДляИзменения", ОбработкаОбъект.ОбъектыДляИзменения.Выгрузить());
	СтруктураПараметров.Вставить("УправлениеСвойствамиМодуль", УправлениеСвойствамиМодуль);
	
	Если ОбщегоНазначения.ИнформационнаяБазаФайловая() Или Не Объект.ИзменятьВТранзакции Тогда
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
		Обработки.ГрупповоеИзменениеОбъектов.ВыполнитьИзменениеОбъектов(СтруктураПараметров, АдресХранилища);
		РезультатФоновогоЗадания = Новый Структура("ЗаданиеВыполнено, АдресХранилища", Истина, АдресХранилища);
	Иначе
		НаименованиеЗадания = НСтр("ru = 'Групповое изменение объектов'");
		
		РезультатФоновогоЗадания = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
			УникальныйИдентификатор,
			"Обработки.ГрупповоеИзменениеОбъектов.ВыполнитьИзменениеОбъектов", 
			СтруктураПараметров, 
			НаименованиеЗадания);
	КонецЕсли;
	
	Возврат РезультатФоновогоЗадания;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьМассивИзменяемыхОбъектов(КоллекцияСтрок, МассивСсылок)
	
	Для Каждого СтрокаИзменяемыйОбъект Из КоллекцияСтрок Цикл
		МассивСсылок.Добавить(СтрокаИзменяемыйОбъект.Ссылка);
		ЗаполнитьМассивИзменяемыхОбъектов(СтрокаИзменяемыйОбъект.ПолучитьЭлементы(), МассивСсылок)
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОбъектПоСсылке()
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ТолькоПросмотр", Истина);
	СтруктураПараметров.Вставить("Ключ", Элементы.ОбъектыДляИзменения.ТекущиеДанные.Ссылка);
	
	Если Элементы.ОбъектыДляИзменения.ТекущиеДанные.ЭтоГруппа Тогда
		ОткрытьФорму(ПолноеИмя + ".ФормаГруппы", СтруктураПараметров);
	Иначе
		ОткрытьФорму(ПолноеИмя + ".ФормаОбъекта", СтруктураПараметров);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗначениеПометкиИзменения(КоллекцияЭлементов, Значение)
	
	Для Каждого ЭлементКоллекции Из КоллекцияЭлементов Цикл
		ЭлементКоллекции.Изменять = Значение;
		УстановитьЗначениеПометкиИзменения(ЭлементКоллекции.ПолучитьЭлементы(), Значение);
	КонецЦикла;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// Прочие операции

&НаСервере
Процедура ЗаполнитьДеревоОбъектовДляИзменения(МассивЗаполненных)
	
	ТаблицаОтработанных = Новый ТаблицаЗначений;
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(ТипЗнч(Параметры.МассивОбъектов[0]));
	ТаблицаОтработанных.Колонки.Добавить("Ссылка", Новый ОписаниеТипов(МассивТипов));
	
	Для Каждого Элемент Из МассивЗаполненных Цикл
		ТаблицаОтработанных.Добавить().Ссылка = Элемент;
	КонецЦикла;
	
	ОбъектМетаданных = Параметры.МассивОбъектов[0].Метаданные();
	
	ВидОбъектаМетаданных = ОбщегоНазначения.ВидОбъектаПоСсылке(Параметры.МассивОбъектов[0]);
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Ссылка
		|Поместить
		|	Отработанные
		|ИЗ
		|	&ТаблицаОтработанных КАК Отработанные
		|;
		|ВЫБРАТЬ
		|	Таблица.Ссылка КАК Ссылка,
		|	"""" КАК КодОшибки,
		|	ВЫБОР КОГДА Отработанные.Ссылка ЕСТЬ NULL 
		|		ТОГДА Истина
		|	ИНАЧЕ Ложь
		|КОНЕЦ КАК Изменять,";
		
	Если УчитыватьИерархию И ИерархияГрупп Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|	ВЫБОР КОГДА Таблица.ПометкаУдаления ТОГДА
		|		ВЫБОР КОГДА Таблица.ЭтоГруппа ТОГДА	1
		|		ИНАЧЕ 4
		|		КОНЕЦ
		|	ИНАЧЕ
		|		ВЫБОР КОГДА Таблица.ЭтоГруппа ТОГДА	0
		|		ИНАЧЕ 3
		|		КОНЕЦ
		|	Конец КАК КодКартинки";
	Иначе
		ТекстЗапроса = ТекстЗапроса + "
		|	ВЫБОР КОГДА Таблица.ПометкаУдаления ТОГДА 4
		|	ИНАЧЕ 3
		|	КОНЕЦ КАК КодКартинки";
	КонецЕсли;
	
	Если УчитыватьИерархию И ИерархияГрупп Тогда
		ТекстЗапроса = ТекстЗапроса + "," + "
			|	Таблица.ЭтоГруппа КАК ЭтоГруппа";
	Иначе
		ТекстЗапроса = ТекстЗапроса + "," + "
			|	Ложь КАК ЭтоГруппа";
	КонецЕсли;
	
	СчетчикДопРеквизитов = 0;
	СчетчикДопСведений = 0;
	
	ЛевоеСоединениеПоДопРеквизитам = "";
	ЛевоеСоединениеПоДопСведениям = "";
	
	ПараметрыСвойства = Новый Соответствие;
	
	Для Каждого ОписаниеКолонки Из РеквизитФормыВЗначение("ИзменяемыеОбъекты").Колонки Цикл
		
		Если ПроверитьНеизменяемыйРеквизит(ОписаниеКолонки.Имя) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ИмеетПрефикс(ОписаниеКолонки.Имя, ПрефиксИмениРеквизита()) Тогда
			
			ТекстЗапроса = ТекстЗапроса + "," + Символы.ПС + СтрокаБезПрефикса(ОписаниеКолонки.Имя, ПрефиксИмениРеквизита()) + " КАК " + ОписаниеКолонки.Имя
			
		ИначеЕсли ИмеетПрефикс(ОписаниеКолонки.Имя, ПрефиксИмениДопРеквизита()) Тогда
			
			СчетчикДопРеквизитов = СчетчикДопРеквизитов + 1;
			ТекстЗапроса = ТекстЗапроса + "," + Символы.ПС + 
			СтрЗаменить("ДополнительныеРеквизиты[x].Значение КАК ", "[x]", Строка(СчетчикДопРеквизитов)) + ОписаниеКолонки.Имя;
			
			ЛевоеСоединениеПоДопРеквизитам = ЛевоеСоединениеПоДопРеквизитам + "
			|		ЛЕВОЕ СОЕДИНЕНИЕ
			|			[ВидОбъектаМетаданных].[ИмяОбъектаМетаданных].ДополнительныеРеквизиты КАК ДополнительныеРеквизиты[x]
			|			ПО ДополнительныеРеквизиты[x].Ссылка = Таблица.Ссылка
			|			 И ДополнительныеРеквизиты[x].Свойство = &ДопРеквизит[x]";
			
			ЛевоеСоединениеПоДопРеквизитам = СтрЗаменить(ЛевоеСоединениеПоДопРеквизитам, "[x]", Строка(СчетчикДопРеквизитов));
			
			УнИдСтрока = СтрЗаменить(СтрокаБезПрефикса(ОписаниеКолонки.Имя, ПрефиксИмениДопРеквизита()), "_", "-");
			УнИд = Новый УникальныйИдентификатор(УнИдСтрока);
			Свойство = ПланыВидовХарактеристик["ДополнительныеРеквизитыИСведения"].ПолучитьСсылку(УнИд);
			
			ПараметрыСвойства.Вставить(СтрЗаменить("ДопРеквизит[x]", "[x]", Строка(СчетчикДопРеквизитов)), Свойство);
		
		ИначеЕсли ИмеетПрефикс(ОписаниеКолонки.Имя, ПрефиксИмениДопСведения()) Тогда
			СчетчикДопСведений = СчетчикДопСведений + 1;
			ТекстЗапроса = ТекстЗапроса + "," + Символы.ПС + 
			СтрЗаменить("ДополнительныеСведения[x].Значение КАК ", "[x]", Строка(СчетчикДопСведений)) + ОписаниеКолонки.Имя;
			
			ЛевоеСоединениеПоДопСведениям = ЛевоеСоединениеПоДопСведениям + "
			|		ЛЕВОЕ СОЕДИНЕНИЕ
			|			РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения[x]
			|			ПО ДополнительныеСведения[x].Объект = Таблица.Ссылка
			|			 И ДополнительныеСведения[x].Свойство = &ДопСведение[x]";
			
			ЛевоеСоединениеПоДопСведениям = СтрЗаменить(ЛевоеСоединениеПоДопСведениям, "[x]", Строка(СчетчикДопСведений));
			
			УнИдСтрока = СтрЗаменить(СтрокаБезПрефикса(ОписаниеКолонки.Имя, ПрефиксИмениДопСведения()), "_", "-");
			УнИд = Новый УникальныйИдентификатор(УнИдСтрока);
			Свойство = ПланыВидовХарактеристик["ДополнительныеРеквизитыИСведения"].ПолучитьСсылку(УнИд);
			
			ПараметрыСвойства.Вставить(СтрЗаменить("ДопСведение[x]", "[x]", Строка(СчетчикДопСведений)), Свойство);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
		|ИЗ
		|	[ВидОбъектаМетаданных].[ИмяОбъектаМетаданных] КАК Таблица
		|		ЛЕВОЕ СОЕДИНЕНИЕ Отработанные
		|			ПО Таблица.Ссылка = Отработанные.Ссылка";
	
	ТекстЗапроса = ТекстЗапроса + ЛевоеСоединениеПоДопРеквизитам;
	ТекстЗапроса = ТекстЗапроса + ЛевоеСоединениеПоДопСведениям;
	
	ТекстЗапроса = ТекстЗапроса + "
		|ГДЕ";
	
	Если ОбрабатыватьРекурсивно И УчитыватьИерархию Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|	Таблица.Ссылка В ИЕРАРХИИ(&МассивСсылок)";
	Иначе
		ТекстЗапроса = ТекстЗапроса + "
		|	Таблица.Ссылка В (&МассивСсылок)";
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + "
		|УПОРЯДОЧИТЬ ПО";
	
	Если ОбрабатыватьРекурсивно И УчитыватьИерархию И ИерархияГрупп Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|	Таблица.ЭтоГруппа ИЕРАРХИЯ ВОЗР,";
	КонецЕсли;
	
	Если ОбрабатыватьРекурсивно И УчитыватьИерархию И НЕ ИерархияГрупп Тогда
		ТекстЗапроса = ТекстЗапроса + "
			|	Таблица.Ссылка ИЕРАРХИЯ ВОЗР";
	Иначе
		ТекстЗапроса = ТекстЗапроса + "
			|	Таблица.Ссылка ВОЗР";
	КонецЕсли;
		
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ВидОбъектаМетаданных]", ВидОбъектаМетаданных);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ИмяОбъектаМетаданных]", ОбъектМетаданных.Имя);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.Параметры.Вставить("МассивСсылок", Параметры.МассивОбъектов);
	Запрос.УстановитьПараметр("ТаблицаОтработанных", ТаблицаОтработанных);
	
	Для Каждого ПараметрСвойство Из ПараметрыСвойства Цикл
		Запрос.УстановитьПараметр(ПараметрСвойство.Ключ, ПараметрСвойство.Значение);
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией), "ИзменяемыеОбъекты");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСплошнойСписокОбъектовДляИзменения(КоллекцияЭлементов)
	
	Для Каждого ЭлементКоллекции Из КоллекцияЭлементов Цикл
		НоваяСтрока = Объект.ОбъектыДляИзменения.Добавить();
		НоваяСтрока.СсылкаНаОбъект = ЭлементКоллекции.Ссылка;
		ЗаполнитьСплошнойСписокОбъектовДляИзменения(ЭлементКоллекции.ПолучитьЭлементы());
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ТекстПодсказкиСтраницыДействий(КоличествоОбъектов)
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '
							|Нажмите кнопку ""Далее"", чтобы перейти к просмотру изменяемых элементов списка (%1)'"),
				КоличествоОбъектов);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьСостояниеЭлементовФормы(Элементы, Количество = 0)
	
	Если Количество > 0 Тогда
		Элементы.ПодсказкаСтраницыДействий.Заголовок = ТекстПодсказкиСтраницыДействий(Количество);
	КонецЕсли;
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.НастройкаИзменений Тогда
		Элементы.ФормаНазад.Доступность = Ложь;
		Элементы.ФормаДалее.Доступность = Истина;
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.ИзменениеОбъектов Тогда
		Элементы.ФормаНазад.Доступность = Истина;
		Элементы.ФормаДалее.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьМассивИзмененных(Массив, Элементы)
	
	Для Каждого Элемент Из Элементы Цикл
		Если НЕ Элемент.Изменять Тогда
			Массив.Добавить(Элемент.Ссылка);
		КонецЕсли;
		Дочерние = Элемент.ПолучитьЭлементы();
		Если Дочерние.Количество() > 0 Тогда
			ЗаполнитьМассивИзмененных(Массив, Дочерние);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьИЗаполнитьДеревоИзменяемыхОбъектов()
	
	МассивЗаполненных = Новый Массив;
	
	ЗаполнитьМассивИзмененных(МассивЗаполненных, ИзменяемыеОбъекты.ПолучитьЭлементы());
	
	СформироватьДеревоИзменяемыхОбъектов();
	ЗаполнитьДеревоОбъектовДляИзменения(МассивЗаполненных);
	
	ИзменитьТаблицуОбъектов = Ложь;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаБезПрефикса(ИмяРеквизитаСПрефиксом, Префикс)
	Возврат Прав(ИмяРеквизитаСПрефиксом, СтрДлина(ИмяРеквизитаСПрефиксом) - СтрДлина(Префикс));
КонецФункции

&НаСервере
Процедура СформироватьДеревоИзменяемыхОбъектов()
	
	СуществующийСоставРеквизитов = Новый Массив;
	
	Для Каждого ОписаниеКолонки Из РеквизитФормыВЗначение("ИзменяемыеОбъекты").Колонки Цикл
		
		Если ПроверитьНеизменяемыйРеквизит(ОписаниеКолонки.Имя) Тогда
			Продолжить;
		КонецЕсли;
		
		СуществующийСоставРеквизитов.Добавить(ОписаниеКолонки.Имя);
	КонецЦикла;
	
	НовыйСоставРеквизитов = Новый Массив;
	
	Для Каждого Операция Из Объект.Операции Цикл
		Если      Операция.Изменять И Операция.ВидОперации = 1 Тогда
			НовыйСоставРеквизитов.Добавить(ПрефиксИмениРеквизита()+Операция.ИмяРеквизита);
		ИначеЕсли Операция.Изменять И Операция.ВидОперации = 2 Тогда
			НовыйСоставРеквизитов.Добавить(ПрефиксИмениДопРеквизита()+СтрЗаменить(Операция.Свойство.УникальныйИдентификатор(), "-", "_"));
		ИначеЕсли Операция.Изменять И Операция.ВидОперации = 3 Тогда
			НовыйСоставРеквизитов.Добавить(ПрефиксИмениДопСведения()+СтрЗаменить(Операция.Свойство.УникальныйИдентификатор(), "-", "_"));
		КонецЕсли;
	КонецЦикла;
	
	ИменаДобавляемыхРеквизитов = РазницаМассивов(НовыйСоставРеквизитов, СуществующийСоставРеквизитов);
	ИменаУдаляемыхРеквизитов = РазницаМассивов(СуществующийСоставРеквизитов, НовыйСоставРеквизитов);
	
	ДобавляемыеРеквизиты = Новый Массив;
	
	Для Каждого ИмяРеквизита Из ИменаДобавляемыхРеквизитов Цикл
		
		Если ИмеетПрефикс(ИмяРеквизита, ПрефиксИмениРеквизита()) Тогда
		
			Операция = Объект.Операции.НайтиСтроки(Новый Структура("ИмяРеквизита", СтрокаБезПрефикса(ИмяРеквизита, ПрефиксИмениРеквизита())))[0];
			
			ОписаниеТипов = Операция.ОписаниеТипов;
			
		ИначеЕсли ИмеетПрефикс(ИмяРеквизита, ПрефиксИмениДопРеквизита())
			  ИЛИ ИмеетПрефикс(ИмяРеквизита, ПрефиксИмениДопСведения()) Тогда
			
			Префикс = ?(ИмеетПрефикс(ИмяРеквизита, ПрефиксИмениДопРеквизита()),
							ПрефиксИмениДопРеквизита(),
							ПрефиксИмениДопСведения());
			
			УнИд = Новый УникальныйИдентификатор(СтрЗаменить(СтрокаБезПрефикса(ИмяРеквизита, Префикс), "_", "-"));
			
			Свойство = ПланыВидовХарактеристик["ДополнительныеРеквизитыИСведения"].ПолучитьСсылку(УнИд);
			
			ОписаниеТипов = Свойство.ТипЗначения;
			
			Операция = Объект.Операции.НайтиСтроки(Новый Структура("Свойство", Свойство))[0];
			
		КонецЕсли;
		
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИмяРеквизита, ОписаниеТипов, "ИзменяемыеОбъекты", Операция.Представление));
		
	КонецЦикла;
	
	УдаляемыеРеквизиты = Новый Массив;
	
	Для Каждого ИмяРеквизита Из ИменаУдаляемыхРеквизитов Цикл
		УдаляемыеРеквизиты.Добавить("ИзменяемыеОбъекты."+ИмяРеквизита);
	КонецЦикла;
	
	ИзменитьРеквизиты(ДобавляемыеРеквизиты, УдаляемыеРеквизиты);
	
	УдаляемыеПоляФормы = Новый Массив;
	
	Для Каждого ПолеФормы Из Элементы.ОбъектыДляИзменения.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(ПолеФормы) = Тип("ПолеФормы") И ПолеФормы.ПутьКДанным = "" Тогда
			УдаляемыеПоляФормы.Добавить(ПолеФормы);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ДобавленныйРеквизит Из ДобавляемыеРеквизиты Цикл
		НовыйЭлементФормы = Элементы.Добавить(ПрефиксИмениПоляФормы()+ДобавленныйРеквизит.Имя, Тип("ПолеФормы"), Элементы.ОбъектыДляИзменения);
		НовыйЭлементФормы.ПутьКДанным = "ИзменяемыеОбъекты."+ДобавленныйРеквизит.Имя;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РазницаМассивов(МассивИсточник, МассивВычитаемый)
	
	Результат = Новый Массив;
	
	Для Каждого ЭлементМассива Из МассивИсточник Цикл
		Если МассивВычитаемый.Найти(ЭлементМассива) = Неопределено Тогда
			Результат.Добавить(ЭлементМассива);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПроверитьНеизменяемыйРеквизит(ИмяРеквизита)
	
	Если ИмяРеквизита = "Ссылка"
	 ИЛИ ИмяРеквизита = "Изменять"
	 ИЛИ ИмяРеквизита = "КодОшибки"
	 ИЛИ ИмяРеквизита = "КодКартинки"
	 ИЛИ ИмяРеквизита = "ЭтоГруппа"
	Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОбъектМетаданныхИерархический(СсылкаПервого)
	
	ВидОбъектаПоСсылке = ОбщегоНазначения.ВидОбъектаПоСсылке(СсылкаПервого);
	
	Если ((ВидОбъектаПоСсылке = "Справочник" ИЛИ ВидОбъектаПоСсылке = "ПланВидовХарактеристик") И СсылкаПервого.Метаданные().Иерархический)
	 ИЛИ (ВидОбъектаПоСсылке = "ПланСчетов") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервереБезКонтекста
Функция ИерархияГруппИЭлементов(СсылкаПервого)
	
	ВидОбъектаПоСсылке = ОбщегоНазначения.ВидОбъектаПоСсылке(СсылкаПервого);
	
	Если   (ВидОбъектаПоСсылке = "Справочник"
	      И СсылкаПервого.Метаданные().Иерархический
	      И СсылкаПервого.Метаданные().ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов)
	   ИЛИ (ВидОбъектаПоСсылке = "ПланВидовХарактеристик"
	      И СсылкаПервого.Метаданные().Иерархический)
	   Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ИмеетПрефикс(ИмяРеквизита, Префикс)
	
	Возврат Лев(ИмяРеквизита, СтрДлина(Префикс)) = Префикс;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПрефиксИмениРеквизита()
	Возврат "Реквизит_";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПрефиксИмениДопРеквизита()
	Возврат "ДопРеквизит_";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПрефиксИмениДопСведения()
	Возврат "ДопСведение_";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПрефиксИмениПоляФормы()
	Возврат "Элемент_";
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НетранзакционнаяПорцияГраницаПерехода()
	
	Возврат 100; // если в списке изменяемых более 100 объектов
				 // изменение происходит для постоянного количества объектов
				 // см . НетранзакционнаяПорцияПолученияДанныхОбъектов()
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НетранзакционнаяПорцияПолученияДанныхПроцент()
	
	Возврат 10;	// если в списке изменяемых менее 100 объектов
				// изменение происходит порциями по проценту объектов от общей массы
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НетранзакционнаяПорцияПолученияДанныхОбъектов()
	
	Возврат 10;	// если в списке изменяемых более 100 объектов
				// изменение происходит порциями по постоянному
				// числу объектов
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаКлиенте
Процедура СброситьОперации()
	Для Каждого Операция Из Объект.Операции Цикл
		Операция.Значение = Неопределено;
		Операция.Изменять = Ложь;
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
КонецПроцедуры

