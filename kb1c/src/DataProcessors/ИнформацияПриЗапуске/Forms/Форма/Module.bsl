////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрокаИндекс = -1;
	КонфигурацияБазовая       = СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации();
	КонфигурацияМоделиСервиса = ОбщегоНазначенияПовтИсп.РазделениеВключено();
	
	ОпределитьКаталогВременныхФайлов();
	
	СтандартныйПрефикс = ПолучитьНавигационнуюСсылкуИнформационнойБазы() + "/";
	ЭтоВебКлиент = Найти(СтандартныйПрефикс, "http://") > 0;
	Если ЭтоВебКлиент Тогда
		КодЛокализации = ТекущийКодЛокализации();
		СтандартныйПрефикс = СтандартныйПрефикс + КодЛокализации + "/";
	КонецЕсли;
	
	ПравоСохраненияДанных = ПравоДоступа("СохранениеДанныхПользователя", Метаданные);
	
	Если КонфигурацияБазовая ИЛИ НЕ ПравоСохраненияДанных Тогда
		Элементы.ПоказыватьПриНачалеРаботы.Видимость = Ложь;
	Иначе
		ПоказыватьПриНачалеРаботы = Истина;
	КонецЕсли;
	
	ОтсутствуютДанныеДляОтображения = Ложь;
	
	Если НЕ ЗаполнитьКоманды()
		ИЛИ НЕ ПодготовитьДанныеФормы() Тогда
		
		ОтсутствуютДанныеДляОтображения = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ОтсутствуютДанныеДляОтображения Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	Если НЕ КонфигурацияБазовая И ПравоСохраненияДанных Тогда
		СохранитьСостояниеФлажка(ПоказыватьПриНачалеРаботы);
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ВебСодержимоеПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	Если ДанныеСобытия.Свойство("href") И ЗначениеЗаполнено(ДанныеСобытия.href) Тогда
		ИмяОткрываемойСтраницы = СокрЛП(ДанныеСобытия.href);
		Если Лев(ИмяОткрываемойСтраницы, 5) <> "http:" И Лев(ИмяОткрываемойСтраницы, 4) <> "e1c:" Тогда
			Возврат; // Не ссылка
		КонецЕсли;
		
		Если Найти(ИмяОткрываемойСтраницы, СтандартныйПрефикс) > 0 Тогда
			ИмяОткрываемойСтраницы = СтрЗаменить(ИмяОткрываемойСтраницы, СтандартныйПрефикс, "");
			ПросмотрСтраницы("ПоВнутреннейСсылке", ИмяОткрываемойСтраницы);
		ИначеЕсли Найти(ИмяОткрываемойСтраницы, СтрЗаменить(СтандартныйПрефикс, " ", "%20")) > 0 Тогда
			ИмяОткрываемойСтраницы = СтрЗаменить(ИмяОткрываемойСтраницы, "%20", " ");
			ИмяОткрываемойСтраницы = СтрЗаменить(ИмяОткрываемойСтраницы, СтандартныйПрефикс, "");
			ПросмотрСтраницы("ПоВнутреннейСсылке", ИмяОткрываемойСтраницы);
		Иначе
			#Если ТолстыйКлиентОбычноеПриложение Тогда
				ЗапуститьПриложение(ИмяОткрываемойСтраницы);
			#Иначе
				ПерейтиПоНавигационнойСсылке(ИмяОткрываемойСтраницы);
			#КонецЕсли
		КонецЕсли;
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура Вперед(Команда)
	ПросмотрСтраницы("Вперед", Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	ПросмотрСтраницы("Назад", Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПерейтиКСтранице(Команда)
	ПросмотрСтраницы("КомандаИзКоманднойПанели", Команда.Имя);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура ОпределитьКаталогВременныхФайлов()
	ПутьККаталогу = ПолучитьИмяВременногоФайла("extras");
	СоздатьКаталог(ПутьККаталогу);
	Каталог = Новый Файл(ПутьККаталогу);
	КаталогВременныхФайлов = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(Каталог.ПолноеИмя);
	Каталог = Неопределено;
КонецПроцедуры

&НаСервере
Функция ЗаполнитьКоманды()
	// Считывает данные макета "Описатель", заполняя таблицу "ДобавленныеКоманды"
	ЭтаОбработка = РеквизитФормыВЗначение("Объект");
	ТекущаяДатаСеанса = ТекущаяДатаСеанса();
	ТабличныйДокумент = ЭтаОбработка.ПолучитьМакет("Описатель");
	
	Для НомерСтроки = 3 По ТабличныйДокумент.ВысотаТаблицы Цикл
		ПрефиксСтроки = "R"+ НомерСтроки +"C";
		
		// Чтение данных первой колонки
		ИмяМакета = ДанныеКолонки(ТабличныйДокумент, ПрефиксСтроки, 1, , "КонецТаблицы");
		Если НРег(ИмяМакета) = "конецтаблицы" Тогда
			Прервать;
		КонецЕсли;
		
		// Чтение и преобразование сведений о команде в требуемый формат
		СведенияОКоманде = Новый Структура;
		СведенияОКоманде.Вставить("Раздел",                        ДанныеКолонки(ТабличныйДокумент, ПрефиксСтроки, 2));
		СведенияОКоманде.Вставить("НаименованиеСтартовойСтраницы", ДанныеКолонки(ТабличныйДокумент, ПрефиксСтроки, 3));
		СведенияОКоманде.Вставить("ИмяФайлаСтартовойСтраницы",     ДанныеКолонки(ТабличныйДокумент, ПрефиксСтроки, 4));
		СведенияОКоманде.Вставить("ДатаНачалаПоказа",              ДанныеКолонки(ТабличныйДокумент, ПрефиксСтроки, 5, "Дата", '00010101'));
		СведенияОКоманде.Вставить("ДатаОкончанияПоказа",           ДанныеКолонки(ТабличныйДокумент, ПрефиксСтроки, 6, "Дата", '29990101'));
		СведенияОКоманде.Вставить("ВключатьВПервыйПоказ",          ДанныеКолонки(ТабличныйДокумент, ПрефиксСтроки, 7, "Число", 0));
		СведенияОКоманде.Вставить("ПоказыватьВПроф",               ДанныеКолонки(ТабличныйДокумент, ПрефиксСтроки, 8,  "Булево", Истина));
		СведенияОКоманде.Вставить("ПоказыватьВБазовой",            ДанныеКолонки(ТабличныйДокумент, ПрефиксСтроки, 9,  "Булево", Истина));
		СведенияОКоманде.Вставить("ПоказыватьВМоделиСервиса",      ДанныеКолонки(ТабличныйДокумент, ПрефиксСтроки, 10, "Булево", Истина));
		
		// Пропуск если данные не актуальны
		Если СведенияОКоманде.ДатаНачалаПоказа > ТекущаяДатаСеанса
			ИЛИ СведенияОКоманде.ДатаОкончанияПоказа < ТекущаяДатаСеанса Тогда
			Продолжить;
		КонецЕсли;
		
		// Пропуск если данные не подходят к конфигурации
		Если КонфигурацияБазовая Тогда
			Если НЕ СведенияОКоманде.ПоказыватьВБазовой Тогда
				Продолжить;
			КонецЕсли;
		ИначеЕсли КонфигурацияМоделиСервиса Тогда
			Если НЕ СведенияОКоманде.ПоказыватьВМоделиСервиса Тогда
				Продолжить;
			КонецЕсли;
		Иначе
			Если НЕ СведенияОКоманде.ПоказыватьВПроф Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		// Добавление информации о команде
		СтрокаТаблицы = ДобавленныеКоманды.Добавить();
		СтрокаТаблицы.ИмяМакета = ИмяМакета;
		СтрокаТаблицы.Идентификатор = Строка(НомерСтроки - 2);
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СведенияОКоманде);
		
		Если НРег(СтрокаТаблицы.Раздел) = НРег(НСтр("ru = 'Реклама'")) Тогда
			СтрокаТаблицы.Приоритет = 0;
		ИначеЕсли СтрокаТаблицы.ВключатьВПервыйПоказ <> 0 Тогда
			СтрокаТаблицы.Приоритет = СтрокаТаблицы.ВключатьВПервыйПоказ;
		Иначе
			СтрокаТаблицы.Приоритет = 100;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ДобавленныеКоманды.Количество() > 0;
	
КонецФункции

&НаСервере
Функция ПодготовитьДанныеФормы()
	ПоказываемыеИнформационныеСтраницы = Новый Массив;
	ИнформационныеСтраницы = Новый Массив;
	РекламныеСтраницы = Новый Массив;
	
	НаименованиеТекущегоРаздела = "-";
	ТекущееПодменю = Неопределено;
	ДобавленоПодменю = 0;
	МинимальныйПриоритет = 100;
	
	ДобавленныеКоманды.Сортировать("Раздел");
	Для Каждого СтрокаТаблицы Из ДобавленныеКоманды Цикл
		
		НаименованиеРаздела = СокрЛП(СтрокаТаблицы.Раздел);
		
		Если НаименованиеТекущегоРаздела <> НаименованиеРаздела Тогда
			НаименованиеТекущегоРаздела = НаименованиеРаздела;
			
			Если НаименованиеРаздела = НСтр("ru = 'Главная'") ИЛИ НаименованиеРаздела = "" Тогда
				ТекущееПодменю = Элементы.БезПодменю;
			Иначе
				ДобавленоПодменю = ДобавленоПодменю + 1;
				ТекущееПодменю = Элементы.Добавить("Подменю" + Строка(ДобавленоПодменю), Тип("ГруппаФормы"), Элементы.ВерхняяПанель);
				ТекущееПодменю.Вид = ВидГруппыФормы.Подменю;
				ТекущееПодменю.Заголовок = НаименованиеРаздела;
			КонецЕсли;
			
		КонецЕсли;
		
		СтрокаТаблицы.ЗаголовокФормы = НСтр("ru = 'Информация'");
		Если ТекущееПодменю <> Элементы.БезПодменю Тогда
			СтрокаТаблицы.ЗаголовокФормы = СтрокаТаблицы.ЗаголовокФормы + ": " + СтрокаТаблицы.Раздел +" / "+ СтрокаТаблицы.НаименованиеСтартовойСтраницы;
		КонецЕсли;
		
		ИмяКоманды = "ДобавленныйЭлемент_" + СтрокаТаблицы.Идентификатор;
		
		Команда = Команды.Добавить(ИмяКоманды);
		Команда.Действие = "Подключаемый_ПерейтиКСтранице";
		Команда.Заголовок = СтрокаТаблицы.НаименованиеСтартовойСтраницы;
		
		Кнопка = Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), ТекущееПодменю);
		Кнопка.ИмяКоманды = ИмяКоманды;
		
		МинимальныйПриоритет = Мин(СтрокаТаблицы.Приоритет, МинимальныйПриоритет);
		
	КонецЦикла;
	
	Если МинимальныйПриоритет = 100 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Найденные = ДобавленныеКоманды.НайтиСтроки(Новый Структура("Приоритет", МинимальныйПриоритет));
	ГенераторСлучайныхЧисел = Новый ГенераторСлучайныхЧисел;
	НомерСтроки = ГенераторСлучайныхЧисел.СлучайноеЧисло(1, Найденные.Количество());
	
	Возврат ПросмотрСтраницы("КомандаИзТаблицыДобавленных", Найденные[НомерСтроки-1]);
КонецФункции

&НаСервере
Функция ПросмотрСтраницы(ТипДействия, Параметр = Неопределено)
	Перем СтрокаКоманды, АдресСтраницы, НоваяСтрокаИстории, НоваяСтрокаИндекс;
	
	Если ТипДействия = "ПоВнутреннейСсылке" Тогда
		
		ИмяОткрываемойСтраницы = Параметр;
		СтрокаИстории = ИсторияПросмотра.Получить(ТекущаяСтрокаИндекс);
		СтрокаКоманды = ДобавленныеКоманды.НайтиПоИдентификатору(СтрокаИстории.КомандаИдентификатор);
		
		Поиск = Новый Структура("ОтносительноеИмя", СтрЗаменить(ИмяОткрываемойСтраницы, "\", "/"));
		
		Найденные = СтрокаКоманды.ВебСтраницы.НайтиСтроки(Поиск);
		Если Найденные.Количество() = 0 Тогда
			Возврат Ложь;
		КонецЕсли;
		АдресСтраницы = Найденные[0].Адрес;
		
	ИначеЕсли ТипДействия = "Назад" ИЛИ ТипДействия = "Вперед" Тогда
		
		СтрокаИстории = ИсторияПросмотра.Получить(ТекущаяСтрокаИндекс);
		
		НоваяСтрокаИндекс = ТекущаяСтрокаИндекс + ?(ТипДействия = "Назад", -1, +1);
		НоваяСтрокаИстории = ИсторияПросмотра[НоваяСтрокаИндекс];
		
		СтрокаКоманды = ДобавленныеКоманды.НайтиПоИдентификатору(НоваяСтрокаИстории.КомандаИдентификатор);
		АдресСтраницы = НоваяСтрокаИстории.АдресСтраницы;
		
	ИначеЕсли ТипДействия = "КомандаИзКоманднойПанели" Тогда
		
		ИмяКоманды = Параметр;
		Найденные = ДобавленныеКоманды.НайтиСтроки(Новый Структура("Идентификатор", СтрЗаменить(ИмяКоманды, "ДобавленныйЭлемент_", "")));
		Если Найденные.Количество() = 0 Тогда
			Возврат Ложь;
		КонецЕсли;
		СтрокаКоманды = Найденные[0];
		
	ИначеЕсли ТипДействия = "КомандаИзТаблицыДобавленных" Тогда
		
		СтрокаКоманды = Параметр;
		
	Иначе
		
		Возврат Ложь;
		
	КонецЕсли;
	
	// Размещение во временном хранилище
	РазместитьСтраницыКоманды(СтрокаКоманды);
	
	// Получение адреса размещения страницы во временном хранилище
	Если АдресСтраницы = Неопределено Тогда
		АдресСтраницы = СтрокаКоманды.АдресСтартовойСтраницы;
	КонецЕсли;
	
	// Регистрация в истории просмотра
	Если НоваяСтрокаИстории = Неопределено Тогда
		
		НоваяСтрокаИсторииСтруктура = Новый Структура("КомандаИдентификатор, АдресСтраницы");
		НоваяСтрокаИсторииСтруктура.КомандаИдентификатор = СтрокаКоманды.ПолучитьИдентификатор();
		НоваяСтрокаИсторииСтруктура.АдресСтраницы = АдресСтраницы;
		
		Найденные = ИсторияПросмотра.НайтиСтроки(НоваяСтрокаИсторииСтруктура);
		Для Каждого НоваяСтрокаИсторииДубль Из Найденные Цикл
			ИсторияПросмотра.Удалить(НоваяСтрокаИсторииДубль);
		КонецЦикла;
		
		НоваяСтрокаИстории = ИсторияПросмотра.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаИстории, НоваяСтрокаИсторииСтруктура);
		
	КонецЕсли;
	
	Если НоваяСтрокаИндекс = Неопределено Тогда
		НоваяСтрокаИндекс = ИсторияПросмотра.Индекс(НоваяСтрокаИстории);
	КонецЕсли;
	
	Если ТипДействия = "ПоВнутреннейСсылке" И ТекущаяСтрокаИндекс <> -1 И ТекущаяСтрокаИндекс <> НоваяСтрокаИндекс - 1 Тогда
		РазницаИндексов = ТекущаяСтрокаИндекс - НоваяСтрокаИндекс;
		Сдвиг = РазницаИндексов + ?(РазницаИндексов < 0, 1, 0);
		ИсторияПросмотра.Сдвинуть(НоваяСтрокаИндекс, Сдвиг);
		НоваяСтрокаИндекс = НоваяСтрокаИндекс + Сдвиг;
	КонецЕсли;
	
	ТекущаяСтрокаИндекс = НоваяСтрокаИндекс;
	
	// Видимость / Доступность
	Элементы.ФормаНазад.Доступность = (ТекущаяСтрокаИндекс > 0);
	Элементы.ФормаВперед.Доступность = (ТекущаяСтрокаИндекс < ИсторияПросмотра.Количество() - 1);
	
	// Установка веб содержимого и заголовка формы
	ВебСодержимое = ПолучитьИзВременногоХранилища(АдресСтраницы);
	Заголовок = СтрокаКоманды.ЗаголовокФормы;
	
	Возврат Истина;
КонецФункции

&НаСервере
Процедура РазместитьСтраницыКоманды(СтрокаТаблицы)
	// Выход если страницы команды уже размещены.
	Если СтрокаТаблицы.АдресСтартовойСтраницы <> "" Тогда
		Возврат;
	КонецЕсли;
	
	// Извлечение страницы
	Попытка
		ДвоичныеДанные = РеквизитФормыВЗначение("Объект").ПолучитьМакет(СтрокаТаблицы.ИмяМакета);
		ДвоичныеДанные.Записать(КаталогВременныхФайлов + "tmp.zip");
	Исключение
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Стандартные подсистемы. Дополнительная информация'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат;
	КонецПопытки;
	
	ЧтениеZipФайла = Новый ЧтениеZipФайла(КаталогВременныхФайлов + "tmp.zip");
	ЧтениеZipФайла.ИзвлечьВсе(КаталогВременныхФайлов, РежимВосстановленияПутейФайловZIP.Восстанавливать);
	УдалитьФайлы(КаталогВременныхФайлов, "tmp.zip");
	
	Картинки = Новый Соответствие; // Ключ - относительное имя, Значение - адрес в хранилище.
	
	// Регистрация ссылок страниц и создание списка картинок.
	Найденные = НайтиФайлы(КаталогВременныхФайлов, "*", Истина);
	Для Каждого Файл Из Найденные Цикл
		Если Файл.ЭтоКаталог() Тогда
			Продолжить;
		КонецЕсли;
		
		ОтносительноеИмя = СтрЗаменить(Файл.ПолноеИмя, КаталогВременныхФайлов, "");
		ОтносительноеИмя = СтрЗаменить(ОтносительноеИмя, "\", "/");
		
		Расширение = СтрЗаменить(НРег(Файл.Расширение), ".", "");
		
		Если Расширение = "htm" ИЛИ Расширение = "html" Тогда
			ОтносительныйКаталог = "";
			Каталоги = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ОтносительноеИмя, "/");
			Каталоги.Удалить(Каталоги.ВГраница());
			Для Каждого Каталог Из Каталоги Цикл
				ОтносительныйКаталог = ОтносительныйКаталог + Каталог + "/";
			КонецЦикла;
			
			РазмещениеФайла = СтрокаТаблицы.ВебСтраницы.Добавить();
			РазмещениеФайла.ОтносительноеИмя = ОтносительноеИмя;
			РазмещениеФайла.Адрес = Файл.ПолноеИмя;
			РазмещениеФайла.ОтносительныйКаталог = ОтносительныйКаталог;
		Иначе
			АдресКартинки = ПоместитьВоВременноеХранилище(Новый Картинка(Новый ДвоичныеДанные(Файл.ПолноеИмя)), УникальныйИдентификатор);
			Картинки.Вставить(ОтносительноеИмя, АдресКартинки);
		КонецЕсли;
		
	КонецЦикла;
	
	// Регистрация картинок и ссылок на страницы встроенной справки.
	Для НомерСтроки = 1 По СтрокаТаблицы.ВебСтраницы.Количество() Цикл
		РазмещениеФайла = СтрокаТаблицы.ВебСтраницы[НомерСтроки-1];
		
		ЧтениеТекста = Новый ЧтениеТекста(РазмещениеФайла.Адрес, );
		ТекстHTML = ЧтениеТекста.Прочитать();
		ЧтениеТекста.Закрыть();
		ЧтениеТекста = Неопределено;
		
		// Регистрация картинок
		ФайлВПодкаталоге = ЗначениеЗаполнено(РазмещениеФайла.ОтносительныйКаталог);
		Для Каждого КлючИЗначение Из Картинки Цикл
			ПутьККартинке = КлючИЗначение.Ключ;
			АдресКартинки = КлючИЗначение.Значение;
			Если ФайлВПодкаталоге Тогда
				Если Найти(ПутьККартинке, "/") = 0 Тогда
					Продолжить;
				КонецЕсли;
				ПутьККартинке = СтрЗаменить(ПутьККартинке, РазмещениеФайла.ОтносительныйКаталог, "");
			КонецЕсли;
			ТекстHTML = СтрЗаменить(ТекстHTML, ПутьККартинке, АдресКартинки);
		КонецЦикла;
		
		// Замена относительных встроенных ссылок на абсолютные для этой ИБ.
		ТекстHTML = СтрЗаменить(ТекстHTML, "v8config://", СтандартныйПрефикс + "e1cib/helpservice/topics/v8config/");
		
		// Регистрация гиперссылок встроенной справки.
		ДобавитьГиперссылкиВстроеннойСправки(ТекстHTML, СтрокаТаблицы.ВебСтраницы);
		
		// Размещение HTML содержимого во временном хранилище.
		РазмещениеФайла.Адрес = ПоместитьВоВременноеХранилище(ТекстHTML, УникальныйИдентификатор);
		
		// Регистрация стартовой страницы.
		Если РазмещениеФайла.ОтносительноеИмя = СтрокаТаблицы.ИмяФайлаСтартовойСтраницы Тогда
			СтрокаТаблицы.АдресСтартовойСтраницы = РазмещениеФайла.Адрес;
		КонецЕсли;
		
	КонецЦикла;
	
	// Удаление временных файлов (все файлы были помещены во временные хранилища).
	УдалитьФайлы(КаталогВременныхФайлов, "*");
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьСостояниеФлажка(ПоказыватьПриНачалеРаботы)
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ИнформацияПриЗапуске", "Показывать", ПоказыватьПриНачалеРаботы);
	Если Не ПоказыватьПриНачалеРаботы Тогда
		ДатаБлижайшегоПоказа = НачалоДня(ТекущаяДатаСеанса() + 14*24*60*60);
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("ИнформацияПриЗапуске", "ДатаБлижайшегоПоказа", ДатаБлижайшегоПоказа);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ДанныеКолонки(ТабличныйДокумент, ПрефиксСтроки, НомерКолонки, Тип = "Строка", ЗначениеПоУмолчанию = "")
	Результат = СокрЛП(ТабличныйДокумент.Область(ПрефиксСтроки + Строка(НомерКолонки)).Текст);
	Если ПустаяСтрока(Результат) Тогда
		Возврат ЗначениеПоУмолчанию;
	ИначеЕсли Тип = "Число" Тогда
		Возврат Число(Результат);
	ИначеЕсли Тип = "Дата" Тогда
		Возврат Дата(Результат);
	ИначеЕсли Тип = "Булево" Тогда
		Возврат Результат <> "0";
	Иначе
		Возврат Результат;
	КонецЕсли;
КонецФункции

&НаСервере
Функция ДобавитьГиперссылкиВстроеннойСправки(ТекстHTML, ВебСтраницы)
	ПрефиксГиперссылкиВстроеннойСправки = """" + СтандартныйПрефикс + "e1cib/helpservice/topics/v8config/v8cfgHelp/";
	Остаток = ТекстHTML;
	Пока Истина Цикл
		ПозицияПрефикса = Найти(Остаток, ПрефиксГиперссылкиВстроеннойСправки);
		Если ПозицияПрефикса = 0 Тогда
			Прервать;
		КонецЕсли;
		Остаток = Сред(Остаток, ПозицияПрефикса + 1);
		
		ПозицияКавычки = Найти(Остаток, """");
		Если ПозицияКавычки = 0 Тогда
			Прервать;
		КонецЕсли;
		Гиперссылка = Лев(Остаток, ПозицияКавычки - 1);
		Остаток = Сред(Остаток, ПозицияКавычки + 1);
		
		ОтносительноеИмя = СтрЗаменить(Гиперссылка, СтандартныйПрефикс, "");
		Содержимое = Гиперссылка;
		
		РазмещениеФайла = ВебСтраницы.Добавить();
		РазмещениеФайла.ОтносительноеИмя = ОтносительноеИмя;
		РазмещениеФайла.Адрес = ПоместитьВоВременноеХранилище(Содержимое, УникальныйИдентификатор);
		РазмещениеФайла.ОтносительныйКаталог = "";
	КонецЦикла;
КонецФункции

