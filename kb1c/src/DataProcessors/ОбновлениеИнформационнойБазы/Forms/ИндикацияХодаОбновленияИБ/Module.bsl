///////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЭтоПлатформа83БезРежимаСовместимости() Тогда
		Выполнить("РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс");
	КонецЕсли;
	
	ПриЗапускеКлиентскогоПриложения = Параметры.ПриЗапускеКлиентскогоПриложения;
	
	НачальноеЗаполнениеДанных = ОбновлениеИнформационнойБазы.НачальноеЗаполнениеДанных();
	Если НачальноеЗаполнениеДанных Тогда
		Заголовок = НСтр("ru = 'Начальное заполнение данных'");
		Элементы.РежимЗапуска.ТекущаяСтраница = Элементы.НачальноеЗаполнение;
	Иначе
		Элементы.ТекстСообщенияОбновляемаяКонфигурация.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			Элементы.ТекстСообщенияОбновляемаяКонфигурация.Заголовок, Метаданные.Синоним, Метаданные.Версия);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ОбновитьИнформационнуюБазуПриЗапуске", 0.1, Истина);
КонецПроцедуры

///////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте
Процедура ОбновитьИнформационнуюБазуПриЗапуске()
	
	Отказ = Ложь;
	
	НовыйПараметрЗапуска = СтрЗаменить(ПараметрЗапуска, "ЗапуститьОбновлениеИнформационнойБазы", "");
	НовыйПараметрЗапуска = СтрЗаменить(НовыйПараметрЗапуска, """", """""");
	НовыйПараметрЗапуска = "/C """ + НовыйПараметрЗапуска + """";
	
	ОбновитьИнформационнуюБазу(Отказ, ПриЗапускеКлиентскогоПриложения);
	Если Отказ Тогда
		ПрекратитьРаботуСистемы();
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено()
		И ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
		СтандартныеПодсистемыКлиент.ЗавершающиеДействияПриНачалеРаботыСистемы();
		Закрыть();
		Возврат;
	КонецЕсли;
	
	ПрекратитьРаботуСистемы(Истина, НовыйПараметрЗапуска);
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИнформационнуюБазу(Отказ, ПриЗапускеКлиентскогоПриложения = Ложь)
	
	Если Не НачальноеЗаполнениеДанных Тогда
		ТекстСостояния = НСтр("ru = 'Пожалуйста, подождите, выполняется обновление информационной базы...'");
	КонецЕсли;
	
	Состояние(ТекстСостояния);
	ДокументОписаниеОбновлений = Неопределено;
	ИнформацияОбОшибке = Неопределено;
	
	ВремяНачалаОбновления = ОбщегоНазначенияКлиент.ДатаСеанса();
	
	Попытка
		ПризнакВыполненияОбработчиков = ОбновлениеИнформационнойБазыВызовСервера.ВыполнитьОбновлениеИнформационнойБазы(
			Ложь, ПриЗапускеКлиентскогоПриложения);
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
	КонецПопытки;
	
	Если ИнформацияОбОшибке = Неопределено Тогда
		ВремяОкончанияОбновления = ОбщегоНазначенияКлиент.ДатаСеанса();
		
		Пока ПризнакВыполненияОбработчиков = "ОшибкаУстановкиМонопольногоРежима" Цикл
			// Открытие формы для отключения активных сеансов
			ПриОткрытииФормыОшибкиУстановкиМонопольногоРежима(Отказ);
			Если Не Отказ Тогда
				Состояние(ТекстСостояния);
				
				Попытка
					ПризнакВыполненияОбработчиков = ОбновлениеИнформационнойБазыВызовСервера.ВыполнитьОбновлениеИнформационнойБазы(
						Ложь, ПриЗапускеКлиентскогоПриложения);
				Исключение
					ИнформацияОбОшибке = ИнформацияОбОшибке();
					Прервать;
				КонецПопытки;
				
				ВремяОкончанияОбновления = ОбщегоНазначенияКлиент.ДатаСеанса();
				Если ПризнакВыполненияОбработчиков <> "ОшибкаУстановкиМонопольногоРежима" Тогда
					ОбновлениеИнформационнойБазыВызовСервера.СнятьБлокировкуФайловойБазы();
				КонецЕсли;
				
			Иначе
				Возврат;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Если ИнформацияОбОшибке <> Неопределено Тогда
		ВремяОкончанияОбновления = ОбщегоНазначенияКлиент.ДатаСеанса();
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("КраткоеСообщениеОбОшибке", КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
		ПараметрыФормы.Вставить("ПодробноеСообщениеОбОшибке", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		ПараметрыФормы.Вставить("ВремяНачалаОбновления", ВремяНачалаОбновления);
		ПараметрыФормы.Вставить("ВремяОкончанияОбновления", ВремяОкончанияОбновления);
		
		ЗавершитьРаботу = ОткрытьФормуМодально("Обработка.ОбновлениеИнформационнойБазы.Форма.СообщениеОНеудачномОбновлении", ПараметрыФормы);
		Если ЗавершитьРаботу = Неопределено
			Или ЗавершитьРаботу Тогда
			Отказ = Истина;
			Возврат;
		Иначе
			ПрекратитьРаботуСистемы(Истина, НовыйПараметрЗапуска);
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если Не НачальноеЗаполнениеДанных Тогда
		Состояние(НСтр("ru = 'Обновление информационной базы выполнено успешно.'"));
	КонецЕсли;
	
	ОбновлениеИнформационнойБазыВызовСервера.ЗаписатьВремяВыполненияОбновления(ВремяНачалаОбновления, ВремяОкончанияОбновления);
	
	Если ТипЗнч(ПараметрыРаботыКлиентаПриОбновлении) <> Тип("Структура") Тогда
		ПараметрыРаботыКлиентаПриОбновлении = Новый Структура;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики условных вызовов в другие подсистемы

// Вызывается при неудачной попытке установить монопольный режим в файловой базе.
// 
// Параметры:
//  Отказ - булево - если Истина - завершает работу программы
//
&НаКлиенте
Процедура ПриОткрытииФормыОшибкиУстановкиМонопольногоРежима(Отказ)
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.ЗавершениеРаботыПользователей") Тогда
		МодульСоединенияИБКлиент = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("СоединенияИБКлиент");
		МодульСоединенияИБКлиент.ПриОткрытииФормыОшибкиУстановкиМонопольногоРежима(Отказ);
	КонецЕсли;
	
КонецПроцедуры

