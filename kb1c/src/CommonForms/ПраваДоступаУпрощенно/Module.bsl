////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Параметры.Пользователь) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Пользователи.ЭтоПолноправныйПользователь() Тогда
		// Просмотр и редактирование состава профилей и ограничений доступа.
		ОтборПрофилейТолькоТекущегоПользователя = Ложь;
		
	ИначеЕсли Параметры.Пользователь = Пользователи.АвторизованныйПользователь() Тогда
		// Просмотр своих профилей и отчета о правах доступа.
		ОтборПрофилейТолькоТекущегоПользователя = Истина;
		// Скрытие лишних сведений.
		Элементы.Профили.ТолькоПросмотр = Истина;
		Элементы.ПрофилиПометка.Видимость = Ложь;
		Элементы.Доступ.Видимость = Ложь;
		Элементы.ФормаЗаписать.Видимость = Ложь;
	Иначе
		Элементы.ФормаЗаписать.Видимость = Ложь;
		Элементы.ФормаОтчетПраваДоступа.Видимость = Ложь;
		Элементы.ПраваИОграничения.Видимость = Ложь;
		Элементы.НедостаточноПравНаПросмотр.Видимость = Истина;
		Возврат;
	КонецЕсли;
	
	// Заполнение вспомогательных данных.
	
	Если ТипЗнч(Параметры.Пользователь) = Тип("СправочникСсылка.ВнешниеПользователи") Тогда
		Элементы.Профили.Заголовок = НСтр("ru = 'Профили внешнего пользователя'");
	Иначе
		Элементы.Профили.Заголовок = НСтр("ru = 'Профили пользователя'");
	КонецЕсли;
	
	// Заполнение списка видов доступа через права по значениям доступа.
	Отбор = Новый Структура("ВидДоступаЧерезПраваПоЗначениямДоступа", Истина);
	Для каждого СвойстваВидаДоступа Из УправлениеДоступомСлужебный.СвойстваВидаДоступа().НайтиСтроки(Отбор) Цикл
		ВидыДоступаЧерезПраваПоЗначениямДоступа.Добавить(СвойстваВидаДоступа.ВидДоступа);
	КонецЦикла;
	
	// Заполнение типов значений доступа всех видов доступа.
	Для каждого СвойстваВидаДоступа Из УправлениеДоступомСлужебный.СвойстваВидаДоступа() Цикл
		
		Для каждого Тип Из СвойстваВидаДоступа.ВидДоступа.ТипЗначения.Типы() Цикл
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(Тип);
			ОписаниеТипа = Новый ОписаниеТипов(МассивТипов);
			
			МетаданныеТипа = Метаданные.НайтиПоТипу(Тип);
			Если Метаданные.Перечисления.Найти(МетаданныеТипа.Имя) = МетаданныеТипа Тогда
				
				ПредставлениеТипа = МетаданныеТипа.Представление();
			Иначе
				ПредставлениеТипа =
					?(ЗначениеЗаполнено(МетаданныеТипа.ПредставлениеОбъекта),
					  МетаданныеТипа.ПредставлениеОбъекта,
					  МетаданныеТипа.Представление());
			КонецЕсли;
			
			НоваяСтрока = ТипыЗначенийДоступаВидовДоступа.Добавить();
			НоваяСтрока.ВидДоступа = СвойстваВидаДоступа.ВидДоступа;
			НоваяСтрока.ТипЗначенияДоступа = ОписаниеТипа.ПривестиЗначение(Неопределено);
			НоваяСтрока.ПредставлениеТипа  = ПредставлениеТипа;
		КонецЦикла;
	КонецЦикла;
	
	ПрофильАдминистратор        = Справочники.ПрофилиГруппДоступа.Администратор;
	ГруппаДоступаАдминистраторы = Справочники.ГруппыДоступа.Администраторы;
	
	ВидДоступаПользователи        = ПланыВидовХарактеристик.ВидыДоступа.Пользователи;
	ВидДоступаВнешниеПользователи = ПланыВидовХарактеристик.ВидыДоступа.ВнешниеПользователи;
	
	ИспользоватьВнешнихПользователей      = ВнешниеПользователи.ИспользоватьВнешнихПользователей();
	СправочникВнешниеПользователиДоступен =
		ПравоДоступа("Просмотр", Метаданные.Справочники.ВнешниеПользователи);
	
	// Заполнение данных.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь", Параметры.Пользователь);
	Запрос.УстановитьПараметр("ОтборПрофилейТолькоТекущегоПользователя",
	                           ОтборПрофилейТолькоТекущегоПользователя);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Профили.Ссылка,
	|	ЕСТЬNULL(ГруппыДоступа.Ссылка, НЕОПРЕДЕЛЕНО) КАК ПерсональнаяГруппаДоступа,
	|	ВЫБОР
	|		КОГДА ГруппыДоступаПользователи.Ссылка ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Пометка
	|ПОМЕСТИТЬ Профили
	|ИЗ
	|	Справочник.ПрофилиГруппДоступа КАК Профили
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступа КАК ГруппыДоступа
	|		ПО Профили.Ссылка = ГруппыДоступа.Профиль
	|			И (ГруппыДоступа.Пользователь = &Пользователь
	|				ИЛИ Профили.Ссылка В (ЗНАЧЕНИЕ(Справочник.ПрофилиГруппДоступа.Администратор)))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
	|		ПО (ГруппыДоступа.Ссылка = ГруппыДоступаПользователи.Ссылка)
	|			И (ГруппыДоступаПользователи.Пользователь = &Пользователь)
	|ГДЕ
	|	НЕ Профили.ПометкаУдаления
	|	И НЕ(&ОтборПрофилейТолькоТекущегоПользователя = ИСТИНА
	|				И ГруппыДоступаПользователи.Ссылка ЕСТЬ NULL )
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Профили.Ссылка КАК Профиль,
	|	Профили.Ссылка.Наименование КАК ПрофильПредставление,
	|	Профили.Пометка
	|ИЗ
	|	Профили КАК Профили
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПрофильПредставление
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Профили.Ссылка КАК Профиль,
	|	ПрофилиВидыДоступа.ВидДоступа,
	|	ЕСТЬNULL(ГруппыДоступаВидыДоступа.ДоступРазрешен, ПрофилиВидыДоступа.ДоступРазрешен) КАК ДоступРазрешен,
	|	"""" КАК Использование,
	|	НЕОПРЕДЕЛЕНО КАК ТекущийТипЗначенияДоступа
	|ИЗ
	|	Профили КАК Профили
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПрофилиГруппДоступа.ВидыДоступа КАК ПрофилиВидыДоступа
	|		ПО Профили.Ссылка = ПрофилиВидыДоступа.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступа.ВидыДоступа КАК ГруппыДоступаВидыДоступа
	|		ПО Профили.ПерсональнаяГруппаДоступа = ГруппыДоступаВидыДоступа.Ссылка
	|			И (ПрофилиВидыДоступа.ВидДоступа = ГруппыДоступаВидыДоступа.ВидДоступа)
	|ГДЕ
	|	НЕ ПрофилиВидыДоступа.Предустановленный
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Профили.Ссылка КАК Профиль,
	|	ПрофилиВидыДоступа.ВидДоступа,
	|	0 КАК НомерСтрокиПоВиду,
	|	ГруппыДоступаЗначенияДоступа.ЗначениеДоступа
	|ИЗ
	|	Профили КАК Профили
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПрофилиГруппДоступа.ВидыДоступа КАК ПрофилиВидыДоступа
	|		ПО Профили.Ссылка = ПрофилиВидыДоступа.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступа.ЗначенияДоступа КАК ГруппыДоступаЗначенияДоступа
	|		ПО Профили.ПерсональнаяГруппаДоступа = ГруппыДоступаЗначенияДоступа.Ссылка
	|			И (ПрофилиВидыДоступа.ВидДоступа = ГруппыДоступаЗначенияДоступа.ВидДоступа)
	|ГДЕ
	|	НЕ ПрофилиВидыДоступа.Предустановленный";
	
	УстановитьПривилегированныйРежим(Истина);
	РезультатыЗапроса = Запрос.ВыполнитьПакет();
	УстановитьПривилегированныйРежим(Ложь);
	
	ЗначениеВРеквизитФормы(РезультатыЗапроса[1].Выгрузить(), "Профили");
	ЗначениеВРеквизитФормы(РезультатыЗапроса[2].Выгрузить(), "ВидыДоступа");
	ЗначениеВРеквизитФормы(РезультатыЗапроса[3].Выгрузить(), "ЗначенияДоступа");
	
	
	// Определение необходимости настройки ограничений доступа.
	Если НЕ УправлениеДоступом.ОграничиватьДоступНаУровнеЗаписей() Тогда
		Элементы.Доступ.Видимость = Ложь;
	КонецЕсли;
	
	Для каждого СвойстваПрофиля Из Профили Цикл
		
		Отбор = Новый Структура("Профиль", СвойстваПрофиля.Профиль);
		Для каждого ОписаниеВидаДоступа Из ВидыДоступа.НайтиСтроки(Отбор) Цикл
			
			ОбновитьПредставлениеИспользованияВидаДоступа(ЭтаФорма, СвойстваПрофиля, ОписаниеВидаДоступа);
			ОбновитьНомерСтрокиПоВиду(ЭтаФорма, СвойстваПрофиля, ОписаниеВидаДоступа);
		КонецЦикла;
	КонецЦикла;
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		ДействияСПользователемСервиса = Неопределено;
		УправлениеДоступомСлужебный.ПриПолученииДействийСПользователемСервиса(
			ДействияСПользователемСервиса, Параметры.Пользователь);
		ЗапретИзмененияАдминистративногоДоступа = НЕ ДействияСПользователемСервиса.ИзменениеАдминистративногоДоступа;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ЗапроситьПодтверждениеЗакрытияФормы(Отказ, Модифицированность);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ВРег(ИсточникВыбора.ИмяФормы) = ВРег("ОбщаяФорма.АутентификацияВСервисе")
	   И ВыбранноеЗначение <> Неопределено Тогда
		
		ПарольПользователяСервиса = ВыбранноеЗначение;
		ЗаписатьИзменения();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Ошибки = Неопределено;
	
	Для каждого СвойстваПрофиля Из Профили Цикл
		
		ПроверитьЗаполнениеПрофиля(ЭтаФорма, СвойстваПрофиля, Ошибки, Отказ);
		
		Если Отказ Тогда
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки, Отказ);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ Профили

&НаКлиенте
Процедура ПрофилиПриАктивизацииСтроки(Элемент)
	
	ПриИзмененииТекущегоПрофиля(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрофилиПометкаПриИзменении(Элемент)
	
	Отказ = Ложь;
	ТекущиеДанные = Элементы.Профили.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено
	   И НЕ ТекущиеДанные.Пометка Тогда
		// Проверка незаполненных и повторяющихся значений доступа
		// перед отключением профиля и отключением доступности его настройки.
		ОчиститьСообщения();
		СвойстваПрофиля = Профили.НайтиПоИдентификатору(Элементы.Профили.ТекущаяСтрока);
		Ошибки = Неопределено;
		ПроверитьЗаполнениеПрофиля(ЭтаФорма, СвойстваПрофиля, Ошибки, Отказ);
		ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки, Отказ);
	КонецЕсли;
	
	Если Отказ Тогда
		ТекущиеДанные.Пометка = Истина;
	Иначе
		ПриИзмененииТекущегоПрофиля(ЭтаФорма);
	КонецЕсли;
	
	Если ТекущиеДанные <> Неопределено
		И ТекущиеДанные.Профиль = ПредопределенноеЗначение("Справочник.ПрофилиГруппДоступа.Администратор") Тогда
		
		ТребуетсяСинхронизацияССервисом = Истина;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ВидыДоступа

&НаКлиенте
Процедура ВидыДоступаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если РедактированиеТекущихОграничений Тогда
		Элементы.ВидыДоступа.ИзменитьСтроку();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыДоступаПриАктивизацииСтроки(Элемент)
	
	ПриИзмененииТекущегоВидаДоступа(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыДоступаПриАктивизацииЯчейки(Элемент)
	
	Если Элементы.ВидыДоступа.ТекущийЭлемент <> Элементы.ВидыДоступаИспользование Тогда
		Элементы.ВидыДоступа.ТекущийЭлемент = Элементы.ВидыДоступаИспользование;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыДоступаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ПриИзмененииТекущегоВидаДоступа(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий элемента Использование таблицы формы ВидыДоступа

&НаКлиенте
Процедура ВидыДоступаИспользованиеПриИзменении(Элемент)
	
	Элементы.ВидыДоступа.ЗакончитьРедактированиеСтроки(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыДоступаИспользованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеВыбора = Элемент.СписокВыбора;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыДоступаИспользованиеОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидыДоступаИспользованиеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Элементы.ВидыДоступа.ТекущиеДанные.ДоступРазрешен = (ВыбранноеЗначение = "ВсеРазрешены");
	
	Модифицированность = Истина;
	ПриИзмененииТекущегоВидаДоступа(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ЗначенияДоступа

&НаКлиенте
Процедура ЗначенияДоступаПриИзменении(Элемент)
	
	Если Элемент.ТекущиеДанные <> Неопределено
	   И НЕ ЗначениеЗаполнено(Элемент.ТекущиеДанные.ВидДоступа) Тогда
		
		Элемент.ТекущиеДанные.Профиль    = ТекущийПрофиль;
		Элемент.ТекущиеДанные.ВидДоступа = ТекущийВидДоступа;
		
		Отбор = Новый Структура("Профиль, ВидДоступа", ТекущийПрофиль, ТекущийВидДоступа);
		Элемент.ТекущиеДанные.НомерСтрокиПоВиду = ЗначенияДоступа.НайтиСтроки(Отбор).Количество();
	КонецЕсли;
	
	ОбновитьНомерСтрокиПоВиду(
		ЭтаФорма,
		Элементы.Профили.ТекущиеДанные,
		Элементы.ВидыДоступа.ТекущиеДанные);
	
	ОбновитьПредставлениеИспользованияВидаДоступа(
		ЭтаФорма,
		Элементы.Профили.ТекущиеДанные,
		Элементы.ВидыДоступа.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначенияДоступаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Элемент.ТекущиеДанные.ЗначениеДоступа = Неопределено Тогда
		Элемент.ТекущиеДанные.ЗначениеДоступа = ТекущиеТипыЗначенийДоступа[0].Значение;
	КонецЕсли;
	
	Элементы.ЗначениеДоступа.КнопкаОчистки
		= ТекущийТипЗначенияДоступа <> Неопределено
		И ТекущиеТипыЗначенийДоступа.Количество() > 1;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеДоступаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если НЕ ВыбранТипЗначенияДоступа(ТекущиеТипыЗначенийДоступа) Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ЗначенияДоступа.ТекущиеДанные;
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.ЗначениеДоступа)
	   И ТекущиеДанные.ЗначениеДоступа <> ТекущийТипЗначенияДоступа Тогда
		
		ТекущиеДанные.ЗначениеДоступа = ТекущийТипЗначенияДоступа;
	КонецЕсли;
	
	Элементы.ЗначениеДоступа.КнопкаОчистки
		= ТекущийТипЗначенияДоступа <> Неопределено
		И ТекущиеТипыЗначенийДоступа.Количество() > 1;
	
	Если ТекущийТипЗначенияДоступа = ПользовательПустаяСсылка ИЛИ
	     ТекущийТипЗначенияДоступа = ГруппаПользователейПустаяСсылка Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("РежимВыбора", Истина);
		ПараметрыФормы.Вставить("ТекущаяСтрока", ТекущиеДанные.ЗначениеДоступа);
		ПараметрыФормы.Вставить("ВыборГруппПользователей", Ложь);
		
		ОткрытьФорму("Справочник.Пользователи.ФормаВыбора", ПараметрыФормы, Элемент);
		
	ИначеЕсли ТекущийТипЗначенияДоступа = ВнешнийПользовательПустаяСсылка ИЛИ
	          ТекущийТипЗначенияДоступа = ГруппаВнешнихПользователейПустаяСсылка Тогда
			
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("РежимВыбора", Истина);
		ПараметрыФормы.Вставить("ТекущаяСтрока", ТекущиеДанные.ЗначениеДоступа);
		ПараметрыФормы.Вставить("ВыборГруппВнешнихПользователей", Ложь);
		
		ОткрытьФорму("Справочник.ВнешниеПользователи.ФормаВыбора", ПараметрыФормы, Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеДоступаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ЗначенияДоступа.ТекущиеДанные;
	
	Если ВыбранноеЗначение = Тип("СправочникСсылка.Пользователи") ИЛИ
	     ВыбранноеЗначение = Тип("СправочникСсылка.ГруппыПользователей") Тогда
	
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("РежимВыбора", Истина);
		ПараметрыФормы.Вставить("ТекущаяСтрока", ТекущиеДанные.ЗначениеДоступа);
		ПараметрыФормы.Вставить("ВыборГруппПользователей", Истина);
		
		ОткрытьФорму("Справочник.Пользователи.ФормаВыбора", ПараметрыФормы, Элемент);
	
	ИначеЕсли ВыбранноеЗначение = Тип("СправочникСсылка.ВнешниеПользователи") ИЛИ
	          ВыбранноеЗначение = Тип("СправочникСсылка.ГруппыВнешнихПользователей") Тогда
	
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("РежимВыбора", Истина);
		ПараметрыФормы.Вставить("ТекущаяСтрока", ТекущиеДанные.ЗначениеДоступа);
		ПараметрыФормы.Вставить("ВыборГруппВнешнихПользователей", Истина);
		
		ОткрытьФорму("Справочник.ВнешниеПользователи.ФормаВыбора", ПараметрыФормы, Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеДоступаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущийТипЗначенияДоступа = Неопределено;
	
	Элементы.ЗначенияДоступа.ТекущиеДанные.ЗначениеДоступа = ТекущиеТипыЗначенийДоступа[0].Значение;
	Элементы.ЗначениеДоступа.КнопкаОчистки = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеДоступаАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		
		Если ТекущийВидДоступа = ВидДоступаВнешниеПользователи
		 ИЛИ ТекущийВидДоступа = ВидДоступаПользователи Тогда
			
			ДанныеВыбора = СформироватьДанныеВыбораПользователя(
				Текст,
				,
				ТекущийВидДоступа = ВидДоступаВнешниеПользователи,
				ТекущийВидДоступа <> ВидДоступаПользователи);
		Иначе
			ДанныеВыбора = СформироватьДанныеВыбораЗначенияДоступа(
				Текст, ТекущийВидДоступа, Ложь);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗначениеДоступаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		
		Если ТекущийВидДоступа = ВидДоступаВнешниеПользователи
		 ИЛИ ТекущийВидДоступа = ВидДоступаПользователи Тогда
			
			ДанныеВыбора = СформироватьДанныеВыбораПользователя(
				Текст,
				,
				ТекущийВидДоступа = ВидДоступаВнешниеПользователи,
				ТекущийВидДоступа <> ВидДоступаПользователи);
		Иначе
			ДанныеВыбора = СформироватьДанныеВыбораЗначенияДоступа(
				Текст, ТекущийВидДоступа, Ложь);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура Записать(Команда)
	
	Если СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().РазделениеВключено
		И ТребуетсяСинхронизацияССервисом Тогда
		
		ПарольЕщёНеВведен = Ложь;
		СтандартныеПодсистемыКлиент.ПриЗапросеПароляДляАутентификацииВСервисе(
			ЭтаФорма, ПарольПользователяСервиса, ПарольЕщёНеВведен);
		
		Если ПарольЕщёНеВведен Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЗаписатьИзменения();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетПоПравамДоступа(Команда)
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Пользователь", Параметры.Пользователь);
	
	ОткрытьФорму("Отчет.ПраваДоступа.Форма", ПараметрыФормы);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиенте
Процедура ЗаписатьИзменения(Отказ = Ложь)
	
	ОчиститьСообщения();
	ЗаписатьИзмененияНаСервере(Отказ);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьИзмененияНаСервере(Отказ)
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Пользователи.НайтиНеоднозначныхПользователейИБ();
	
	// Получение списка изменений.
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Пользователь", Параметры.Пользователь);
	
	Запрос.УстановитьПараметр(
		"Профили", Профили.Выгрузить(, "Профиль, Пометка"));
	
	Запрос.УстановитьПараметр(
		"ВидыДоступа", ВидыДоступа.Выгрузить(, "Профиль, ВидДоступа, ДоступРазрешен"));
	
	Запрос.УстановитьПараметр(
		"ЗначенияДоступа", ЗначенияДоступа.Выгрузить(, "Профиль, ВидДоступа, ЗначениеДоступа"));
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Профили.Профиль КАК Ссылка,
	|	Профили.Пометка
	|ПОМЕСТИТЬ Профили
	|ИЗ
	|	&Профили КАК Профили
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВидыДоступа.Профиль,
	|	ВидыДоступа.ВидДоступа,
	|	ВидыДоступа.ДоступРазрешен
	|ПОМЕСТИТЬ ВидыДоступа
	|ИЗ
	|	&ВидыДоступа КАК ВидыДоступа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗначенияДоступа.Профиль,
	|	ЗначенияДоступа.ВидДоступа,
	|	ЗначенияДоступа.ЗначениеДоступа
	|ПОМЕСТИТЬ ЗначенияДоступа
	|ИЗ
	|	&ЗначенияДоступа КАК ЗначенияДоступа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Профили.Ссылка,
	|	ЕСТЬNULL(ГруппыДоступа.Ссылка, НЕОПРЕДЕЛЕНО) КАК ПерсональнаяГруппаДоступа,
	|	ВЫБОР
	|		КОГДА ГруппыДоступаПользователи.Ссылка ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК Пометка
	|ПОМЕСТИТЬ ТекущиеПрофили
	|ИЗ
	|	Справочник.ПрофилиГруппДоступа КАК Профили
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступа КАК ГруппыДоступа
	|		ПО Профили.Ссылка = ГруппыДоступа.Профиль
	|			И (ГруппыДоступа.Пользователь = &Пользователь
	|				ИЛИ Профили.Ссылка В (ЗНАЧЕНИЕ(Справочник.ПрофилиГруппДоступа.Администратор)))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
	|		ПО (ГруппыДоступа.Ссылка = ГруппыДоступаПользователи.Ссылка)
	|			И (ГруппыДоступаПользователи.Пользователь = &Пользователь)
	|ГДЕ
	|	НЕ Профили.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Профили.Ссылка КАК Профиль,
	|	ГруппыДоступаВидыДоступа.ВидДоступа,
	|	ГруппыДоступаВидыДоступа.ДоступРазрешен
	|ПОМЕСТИТЬ ТекущиеВидыДоступа
	|ИЗ
	|	ТекущиеПрофили КАК Профили
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступа.ВидыДоступа КАК ГруппыДоступаВидыДоступа
	|		ПО Профили.ПерсональнаяГруппаДоступа = ГруппыДоступаВидыДоступа.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Профили.Ссылка КАК Профиль,
	|	ГруппыДоступаЗначенияДоступа.ВидДоступа,
	|	ГруппыДоступаЗначенияДоступа.ЗначениеДоступа
	|ПОМЕСТИТЬ ТекущиеЗначенияДоступа
	|ИЗ
	|	ТекущиеПрофили КАК Профили
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступа.ЗначенияДоступа КАК ГруппыДоступаЗначенияДоступа
	|		ПО Профили.ПерсональнаяГруппаДоступа = ГруппыДоступаЗначенияДоступа.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПрофилиИзмененныхГрупп.Профиль
	|ПОМЕСТИТЬ ПрофилиИзмененныхГрупп
	|ИЗ
	|	(ВЫБРАТЬ
	|		Профили.Ссылка КАК Профиль
	|	ИЗ
	|		Профили КАК Профили
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТекущиеПрофили КАК ТекущиеПрофили
	|			ПО Профили.Ссылка = ТекущиеПрофили.Ссылка
	|	ГДЕ
	|		Профили.Пометка <> ТекущиеПрофили.Пометка
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВидыДоступа.Профиль
	|	ИЗ
	|		ВидыДоступа КАК ВидыДоступа
	|			ЛЕВОЕ СОЕДИНЕНИЕ ТекущиеВидыДоступа КАК ТекущиеВидыДоступа
	|			ПО ВидыДоступа.Профиль = ТекущиеВидыДоступа.Профиль
	|				И ВидыДоступа.ВидДоступа = ТекущиеВидыДоступа.ВидДоступа
	|				И ВидыДоступа.ДоступРазрешен = ТекущиеВидыДоступа.ДоступРазрешен
	|	ГДЕ
	|		ТекущиеВидыДоступа.ВидДоступа ЕСТЬ NULL 
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТекущиеВидыДоступа.Профиль
	|	ИЗ
	|		ТекущиеВидыДоступа КАК ТекущиеВидыДоступа
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВидыДоступа КАК ВидыДоступа
	|			ПО (ВидыДоступа.Профиль = ТекущиеВидыДоступа.Профиль)
	|				И (ВидыДоступа.ВидДоступа = ТекущиеВидыДоступа.ВидДоступа)
	|				И (ВидыДоступа.ДоступРазрешен = ТекущиеВидыДоступа.ДоступРазрешен)
	|	ГДЕ
	|		ВидыДоступа.ВидДоступа ЕСТЬ NULL 
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЗначенияДоступа.Профиль
	|	ИЗ
	|		ЗначенияДоступа КАК ЗначенияДоступа
	|			ЛЕВОЕ СОЕДИНЕНИЕ ТекущиеЗначенияДоступа КАК ТекущиеЗначенияДоступа
	|			ПО ЗначенияДоступа.Профиль = ТекущиеЗначенияДоступа.Профиль
	|				И ЗначенияДоступа.ВидДоступа = ТекущиеЗначенияДоступа.ВидДоступа
	|				И ЗначенияДоступа.ЗначениеДоступа = ТекущиеЗначенияДоступа.ЗначениеДоступа
	|	ГДЕ
	|		ТекущиеЗначенияДоступа.ВидДоступа ЕСТЬ NULL 
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТекущиеЗначенияДоступа.Профиль
	|	ИЗ
	|		ТекущиеЗначенияДоступа КАК ТекущиеЗначенияДоступа
	|			ЛЕВОЕ СОЕДИНЕНИЕ ЗначенияДоступа КАК ЗначенияДоступа
	|			ПО (ЗначенияДоступа.Профиль = ТекущиеЗначенияДоступа.Профиль)
	|				И (ЗначенияДоступа.ВидДоступа = ТекущиеЗначенияДоступа.ВидДоступа)
	|				И (ЗначенияДоступа.ЗначениеДоступа = ТекущиеЗначенияДоступа.ЗначениеДоступа)
	|	ГДЕ
	|		ЗначенияДоступа.ВидДоступа ЕСТЬ NULL ) КАК ПрофилиИзмененныхГрупп
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Профили.Ссылка КАК Профиль,
	|	СправочникПрофили.Наименование КАК ПрофильНаименование,
	|	Профили.Пометка,
	|	ТекущиеПрофили.ПерсональнаяГруппаДоступа
	|ИЗ
	|	ПрофилиИзмененныхГрупп КАК ПрофилиИзмененныхГрупп
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Профили КАК Профили
	|		ПО ПрофилиИзмененныхГрупп.Профиль = Профили.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ТекущиеПрофили КАК ТекущиеПрофили
	|		ПО ПрофилиИзмененныхГрупп.Профиль = ТекущиеПрофили.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПрофилиГруппДоступа КАК СправочникПрофили
	|		ПО (СправочникПрофили.Ссылка = ПрофилиИзмененныхГрупп.Профиль)";
	
	НачатьТранзакцию();
	Попытка
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			
			Если ЗначениеЗаполнено(Выборка.ПерсональнаяГруппаДоступа) Тогда
				ЗаблокироватьДанныеДляРедактирования(Выборка.ПерсональнаяГруппаДоступа);
				ГруппаДоступаОбъект = Выборка.ПерсональнаяГруппаДоступа.ПолучитьОбъект();
			Иначе
				// Создание персональной группы доступа.
				ГруппаДоступаОбъект = Справочники.ГруппыДоступа.СоздатьЭлемент();
				ГруппаДоступаОбъект.Родитель     = Справочники.ГруппыДоступа.РодительПерсональныхГруппДоступа();
				ГруппаДоступаОбъект.Наименование = Выборка.ПрофильНаименование;
				ГруппаДоступаОбъект.Пользователь = Параметры.Пользователь;
				ГруппаДоступаОбъект.Профиль      = Выборка.Профиль;
			КонецЕсли;
			
			Если Выборка.Профиль = Справочники.ПрофилиГруппДоступа.Администратор Тогда
				
				Если ТребуетсяСинхронизацияССервисом Тогда
					ГруппаДоступаОбъект.ДополнительныеСвойства.Вставить("ПарольПользователяСервиса", ПарольПользователяСервиса);
				КонецЕсли;
				
				Если Выборка.Пометка Тогда
					Если ГруппаДоступаОбъект.Пользователи.Найти(
							Параметры.Пользователь, "Пользователь") = Неопределено Тогда
						
						ГруппаДоступаОбъект.Пользователи.Добавить().Пользователь = Параметры.Пользователь;
					КонецЕсли;
				Иначе
					ОписаниеПользователя =  ГруппаДоступаОбъект.Пользователи.Найти(
						Параметры.Пользователь, "Пользователь");
					
					Если ОписаниеПользователя <> Неопределено Тогда
						ГруппаДоступаОбъект.Пользователи.Удалить(ОписаниеПользователя);
						
						Если НЕ ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
							// Проверка пустого списка пользователей ИБ в группе доступа Администраторы.
							НайденПользовательИБ = Ложь;
							Для каждого ОписаниеПользователя ИЗ ГруппаДоступаОбъект.Пользователи Цикл
								Если ЗначениеЗаполнено(ОписаниеПользователя.Пользователь)
								   И ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(
								     	ОписаниеПользователя.Пользователь.ИдентификаторПользователяИБ)
								     	<> Неопределено Тогда
									
									НайденПользовательИБ = Истина;
									Прервать;
								КонецЕсли;
							КонецЦикла;
							Если НЕ НайденПользовательИБ Тогда
								ВызватьИсключение
									НСтр("ru = 'Профиль Администратор должен быть хотя бы у одного пользователя,
									           |которому разрешен доступ к информационной базе.'");
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			Иначе
				ГруппаДоступаОбъект.Пользователи.Очистить();
				Если Выборка.Пометка Тогда
					ГруппаДоступаОбъект.Пользователи.Добавить().Пользователь = Параметры.Пользователь;
				КонецЕсли;
				
				Отбор = Новый Структура("Профиль", Выборка.Профиль);
				
				ГруппаДоступаОбъект.ВидыДоступа.Загрузить(
					ВидыДоступа.Выгрузить(Отбор, "ВидДоступа, ДоступРазрешен"));
				
				ГруппаДоступаОбъект.ЗначенияДоступа.Загрузить(
					ЗначенияДоступа.Выгрузить(Отбор, "ВидДоступа, ЗначениеДоступа"));
			КонецЕсли;
			ГруппаДоступаОбъект.Записать();
			
			Если ЗначениеЗаполнено(Выборка.ПерсональнаяГруппаДоступа) Тогда
				РазблокироватьДанныеДляРедактирования(Выборка.ПерсональнаяГруппаДоступа);
			КонецЕсли;
		КонецЦикла;
		ЗафиксироватьТранзакцию();
		Модифицированность = Ложь;
		ТребуетсяСинхронизацияССервисом = Ложь;
	Исключение
		ОтменитьТранзакцию();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()), , , , Отказ);
	КонецПопытки;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПриИзмененииТекущегоПрофиля(Знач Форма)
	
	Элементы    = Форма.Элементы;
	Профили     = Форма.Профили;
	ВидыДоступа = Форма.ВидыДоступа;
	
	#Если Клиент Тогда
		ТекущиеДанные = Элементы.Профили.ТекущиеДанные;
	#Иначе
		ТекущиеДанные = Профили.НайтиПоИдентификатору(?(Элементы.Профили.ТекущаяСтрока = Неопределено, -1, Элементы.Профили.ТекущаяСтрока));
	#КонецЕсли
	
	Форма.ТекущийПрофиль = Неопределено;
	РедактированиеТекущихОграничений = Ложь;
	
	Если ТекущиеДанные <> Неопределено Тогда
		Форма.ТекущийПрофиль = ТекущиеДанные.Профиль;
		РедактированиеТекущихОграничений = ТекущиеДанные.Пометка
		                                   И Форма.ТекущийПрофиль <> Форма.ПрофильАдминистратор
		                                   И НЕ Форма.ТолькоПросмотр;
	КонецЕсли;
	
	Элементы.НадписьПрофиль.Доступность                     =    ТекущиеДанные <> Неопределено И ТекущиеДанные.Пометка;
	Элементы.ВидыДоступа.ТолькоПросмотр                     = НЕ РедактированиеТекущихОграничений;
	Элементы.НадписьВидДоступа.Доступность                  =    ТекущиеДанные <> Неопределено И ТекущиеДанные.Пометка;
	Элементы.ЗначенияДоступа.ТолькоПросмотр                 = НЕ РедактированиеТекущихОграничений;
	Элементы.ВидыДоступаИзменить.Доступность                =    РедактированиеТекущихОграничений;
	Элементы.ВидыДоступаКонтекстноеМенюИзменить.Доступность =    РедактированиеТекущихОграничений;
	
	Если Элементы.ВидыДоступа.ОтборСтрок = Неопределено
	 ИЛИ Элементы.ВидыДоступа.ОтборСтрок.Профиль <> Форма.ТекущийПрофиль Тогда
		//
		Элементы.ВидыДоступа.ОтборСтрок     = Новый ФиксированнаяСтруктура("Профиль", Форма.ТекущийПрофиль);
		ТекущиеВидыДоступа = ВидыДоступа.НайтиСтроки(Новый Структура("Профиль", Форма.ТекущийПрофиль));
		Если ТекущиеВидыДоступа.Количество() = 0 Тогда
			Элементы.ЗначенияДоступа.ОтборСтрок = Новый ФиксированнаяСтруктура("Профиль, ВидДоступа", Форма.ТекущийПрофиль, Неопределено);
			ПриИзмененииТекущегоВидаДоступа(Форма);
		Иначе
			Элементы.ВидыДоступа.ТекущаяСтрока = ТекущиеВидыДоступа[0].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ПриИзмененииТекущегоВидаДоступа(Знач Форма)
	
	Элементы        = Форма.Элементы;
	ВидыДоступа     = Форма.ВидыДоступа;
	ЗначенияДоступа = Форма.ЗначенияДоступа;
	
	ЗначенияЗадаются = Ложь;
	
	#Если Клиент Тогда
		ТекущиеДанные = Элементы.ВидыДоступа.ТекущиеДанные;
	#Иначе
		ТекущиеДанные = ВидыДоступа.НайтиПоИдентификатору(
			?(Элементы.ВидыДоступа.ТекущаяСтрока = Неопределено,
			  -1,
			  Элементы.ВидыДоступа.ТекущаяСтрока));
	#КонецЕсли
	
	Если ТекущиеДанные <> Неопределено Тогда
		
		Форма.ТекущийВидДоступа = ТекущиеДанные.ВидДоступа;
		
		Если Форма.ВидыДоступаЧерезПраваПоЗначениямДоступа.НайтиПоЗначению(
				ТекущиеДанные.ВидДоступа) = Неопределено Тогда
			
			ЗначенияЗадаются = Истина;
			Элементы.ТипыВидовДоступа.ТекущаяСтраница = Элементы.ОбычныйВидДоступа;
			// Установка отбора значений.
			Если Элементы.ЗначенияДоступа.ОтборСтрок = Неопределено
			 ИЛИ Элементы.ЗначенияДоступа.ОтборСтрок.Профиль <> Форма.ТекущийПрофиль
			 ИЛИ Элементы.ЗначенияДоступа.ОтборСтрок.ВидДоступа <> ТекущиеДанные.ВидДоступа Тогда
				
				Элементы.ЗначенияДоступа.ОтборСтрок = Новый ФиксированнаяСтруктура(
					"Профиль, ВидДоступа", Форма.ТекущийПрофиль, ТекущиеДанные.ВидДоступа);
			КонецЕсли;
		Иначе
			Элементы.ТипыВидовДоступа.ТекущаяСтраница =
				?(ТекущиеДанные.ДоступРазрешен,
				  Элементы.ВидДоступаЧерезПраваПоЗначениямДоступаПредупреждение,
				  Элементы.ВидДоступаЧерезПраваПоЗначениямДоступаИнформация);
		КонецЕсли;
		
		// Обновление поля НадписьВидДоступа.
		Форма.НадписьВидДоступа = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			?(ТекущиеДанные.ВидДоступа = Форма.ВидДоступаПользователи,
			  ?(ТекущиеДанные.ДоступРазрешен,
			    НСтр("ru = 'Разрешенные значения (%1) - текущий пользователь всегда разрешен'"),
			    НСтр("ru = 'Разрешенные значения (%1) - текущий пользователь всегда разрешен'") ),
			  ?(ТекущиеДанные.ВидДоступа = Форма.ВидДоступаВнешниеПользователи,
			    ?(ТекущиеДанные.ДоступРазрешен,
			      НСтр("ru = 'Запрещенные значения (%1) - текущий внешний пользователь всегда разрешен'"),
			      НСтр("ru = 'Запрещенные значения (%1) - текущий внешний пользователь всегда разрешен'") ),
			    ?(ТекущиеДанные.ДоступРазрешен,
			      НСтр("ru = 'Запрещенные значения (%1)'"),
			      НСтр("ru = 'Разрешенные значения (%1)'") ))
			),
			Строка(ТекущиеДанные.ВидДоступа));
		
		ОбновитьПредставлениеИспользованияВидаДоступа(
			Форма, Элементы.Профили.ТекущиеДанные, ТекущиеДанные);
	Иначе
		Форма.НадписьВидДоступа = "";
		Форма.ТекущийВидДоступа = Неопределено;
		
		Элементы.ЗначенияДоступа.ОтборСтрок = Новый ФиксированнаяСтруктура(
			"Профиль, ВидДоступа", Форма.ТекущийПрофиль, Неопределено);
		
		Если ВидыДоступа.Количество() = 0 Тогда
			ЗначенияДоступа.Очистить();
		КонецЕсли;
	КонецЕсли;
	
	Форма.ТекущийТипЗначенияДоступа  =
		?(ТекущиеДанные = Неопределено,
		  Неопределено,
		  ТекущиеДанные.ТекущийТипЗначенияДоступа);
	
	Форма.ТекущиеТипыЗначенийДоступа = Новый СписокЗначений;
	
	Если ЗначенияЗадаются Тогда
		
		Отбор = Новый Структура("ВидДоступа", ТекущиеДанные.ВидДоступа);
		ОписанияТиповВидовДоступа = Форма.ТипыЗначенийДоступаВидовДоступа.НайтиСтроки(Отбор);
		
		Для каждого ОписаниеТипаВидаДоступа Из ОписанияТиповВидовДоступа Цикл
			Форма.ТекущиеТипыЗначенийДоступа.Добавить(
				ОписаниеТипаВидаДоступа.ТипЗначенияДоступа,
				ОписаниеТипаВидаДоступа.ПредставлениеТипа);
		КонецЦикла;
	Иначе
		Если ТекущиеДанные <> Неопределено Тогда
			
			Отбор = Новый Структура;
			Отбор.Вставить("Профиль",    Форма.ТекущийПрофиль);
			Отбор.Вставить("ВидДоступа", Форма.ТекущийВидДоступа);
			
			Для каждого Строка Из ЗначенияДоступа.НайтиСтроки(Отбор) Цикл
				ЗначенияДоступа.Удалить(Строка);
			КонецЦикла
		КонецЕсли;
	КонецЕсли;
	
	Если Форма.ТекущиеТипыЗначенийДоступа.Количество() = 0 Тогда
		Форма.ТекущиеТипыЗначенийДоступа.Добавить(Неопределено, НСтр("ru = 'Неопределено'"));
	КонецЕсли;
	
	Элементы.ЗначенияДоступа.Доступность = ЗначенияЗадаются;
	
	Элементы.ЗначенияДоступа.КоманднаяПанель.ПодчиненныеЭлементы.ЗначенияДоступаДобавить.Доступность =
		ЗначенияЗадаются;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьПредставлениеИспользованияВидаДоступа(Форма, СвойстваПрофиля, ОписаниеВидаДоступа)
	
	Элементы                                = Форма.Элементы;
	ЗначенияДоступа                         = Форма.ЗначенияДоступа;
	ВидыДоступаЧерезПраваПоЗначениямДоступа = Форма.ВидыДоступаЧерезПраваПоЗначениямДоступа;
	
	Если СвойстваПрофиля = Неопределено
	 ИЛИ ОписаниеВидаДоступа = Неопределено Тогда
		
		ОписаниеВидаДоступа.Использование = "";
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Профиль",    СвойстваПрофиля.Профиль);
	Отбор.Вставить("ВидДоступа", ОписаниеВидаДоступа.ВидДоступа);
	КоличествоЗначений = ЗначенияДоступа.НайтиСтроки(Отбор).Количество();
	
	Если КоличествоЗначений > 0 Тогда
		
		ПрописьЧисла          = ЧислоПрописью(
			КоличествоЗначений, "Л = ru_RU", НСтр("ru = ',,,,,,,,0'"));
		
		ПрописьЧислаИПредмета = ЧислоПрописью(
			КоличествоЗначений,
			"Л = ru_RU",
			НСтр("ru = '-го значения,-х значений,-и значений,,,,,,0'"));
		
		ЧислоИПредмет = СтрЗаменить(
			ПрописьЧислаИПредмета,
			ПрописьЧисла,
			Формат(КоличествоЗначений, "ЧГ="));
		
		ОписаниеВидаДоступа.Использование = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			?(ОписаниеВидаДоступа.ДоступРазрешен,
			  НСтр("ru = 'Все разрешены, кроме %1'"),
			  НСтр("ru = 'Все запрещены, кроме %1'") ),
			ЧислоИПредмет);
		
	ИначеЕсли ВидыДоступаЧерезПраваПоЗначениямДоступа.НайтиПоЗначению(
			ОписаниеВидаДоступа.ВидДоступа) = Неопределено Тогда
		
		ОписаниеВидаДоступа.Использование =
			?(ОписаниеВидаДоступа.ДоступРазрешен,
			  НСтр("ru = 'Все разрешены, без исключений'"),
			  НСтр("ru = 'Все запрещены, без исключений'") );
	Иначе
		ОписаниеВидаДоступа.Использование =
			?(ОписаниеВидаДоступа.ДоступРазрешен,
			  НСтр("ru = 'Все разрешены, без исключений'"),
			  НСтр("ru = 'Все запрещены, кроме исключений'") );
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьНомерСтрокиПоВиду(Форма, СвойстваПрофиля, ОписаниеВидаДоступа)
	
	ЗначенияДоступа = Форма.ЗначенияДоступа;
	
	Отбор = Новый Структура("Профиль",    СвойстваПрофиля.Профиль);
	Отбор = Новый Структура("ВидДоступа", ОписаниеВидаДоступа.ВидДоступа);
	ЗначенияДоступаПоВиду = ЗначенияДоступа.НайтиСтроки(Отбор);
	
	ТекущийНомер = 1;
	Для каждого Строка Из ЗначенияДоступаПоВиду Цикл
		Строка.НомерСтрокиПоВиду = ТекущийНомер;
		ТекущийНомер = ТекущийНомер + 1;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ВыбранТипЗначенияДоступа(Знач ТипыЗначенияДоступа)
	
	Если ТекущийТипЗначенияДоступа <> Неопределено Тогда
		Возврат Истина;
		
	ИначеЕсли ТипыЗначенияДоступа.Количество() = 1 Тогда
		
		ТекущийТипЗначенияДоступа = ТипыЗначенияДоступа[0].Значение;
		Возврат Истина;
		
	ИначеЕсли ТипыЗначенияДоступа.Количество() > 0 Тогда
		
		Если ТипыЗначенияДоступа.Количество() = 2 Тогда
		
			Если ТипыЗначенияДоступа.НайтиПоЗначению(ПользовательПустаяСсылка) <> Неопределено
			   И ТипыЗначенияДоступа.НайтиПоЗначению(ГруппаПользователейПустаяСсылка) <> Неопределено Тогда
				
				ТекущийТипЗначенияДоступа = ПользовательПустаяСсылка;
				Возврат Истина;
			КонецЕсли;
			
			Если ТипыЗначенияДоступа.НайтиПоЗначению(ВнешнийПользовательПустаяСсылка) <> Неопределено
			   И ТипыЗначенияДоступа.НайтиПоЗначению(ГруппаВнешнихПользователейПустаяСсылка) <> Неопределено Тогда
				
				ТекущийТипЗначенияДоступа = ВнешнийПользовательПустаяСсылка;
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
		
		Элемент = ТипыЗначенияДоступа.ВыбратьЭлемент(
			НСтр("ru = 'Выбор типа данных'"),
			ТипыЗначенияДоступа[0]);
		
		Если Элемент <> Неопределено Тогда
			ТекущийТипЗначенияДоступа = Элемент.Значение;
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ПроверитьЗаполнениеПрофиля(Знач Форма, Знач СвойстваПрофиля, Ошибки, Отказ)
	
	ВидыДоступа     = Форма.ВидыДоступа;
	ЗначенияДоступа = Форма.ЗначенияДоступа;
	Элементы        = Форма.Элементы;
	
	ВидыДоступаПрофиля = ВидыДоступа.НайтиСтроки(Новый Структура("Профиль", СвойстваПрофиля.Профиль));
	НомерСтрокиВидаДоступа = ВидыДоступаПрофиля.Количество()-1;
	
	Пока НЕ Отказ И НомерСтрокиВидаДоступа >= 0 Цикл
		ТекущаяСтрокаВидаДоступа = ВидыДоступаПрофиля[НомерСтрокиВидаДоступа];
		
		Отбор = Новый Структура;
		Отбор.Вставить("Профиль",    СвойстваПрофиля.Профиль);
		Отбор.Вставить("ВидДоступа", ТекущаяСтрокаВидаДоступа.ВидДоступа);
		ЗначенияДоступаВидаДоступа = ЗначенияДоступа.НайтиСтроки(Отбор);
		
		НомерСтроки = ЗначенияДоступаВидаДоступа.Количество()-1;
		
		Пока НомерСтроки >= 0 Цикл
			
			ТекущаяСтрока = ЗначенияДоступаВидаДоступа[НомерСтроки];
			
			// Проверка заполнения значения.
			Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.ЗначениеДоступа) Тогда
				
				Элементы.Профили.ТекущаяСтрока     = СвойстваПрофиля.ПолучитьИдентификатор();
				Элементы.ВидыДоступа.ТекущаяСтрока = ТекущаяСтрокаВидаДоступа.ПолучитьИдентификатор();
				
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,
					"Объект.ЗначенияДоступа[%1].ЗначениеДоступа",
					НСтр("ru = 'Значение не выбрано.'"),
					"ЗначенияДоступа",
					НомерСтроки,
					НСтр("ru = 'Значение в строке %1 не выбрано.'"));
				
				Отказ = Истина;
				Прервать;
			КонецЕсли;
			
			// Проверка наличия повторяющихся значений.
			Отбор = Новый Структура;
			Отбор.Вставить("Профиль",         СвойстваПрофиля.Профиль);
			Отбор.Вставить("ВидДоступа",      ТекущаяСтрокаВидаДоступа.ВидДоступа);
			Отбор.Вставить("ЗначениеДоступа", ТекущаяСтрока.ЗначениеДоступа);
			
			НайденныеЗначения = ЗначенияДоступа.НайтиСтроки(Отбор);
			
			Если НайденныеЗначения.Количество() > 1 Тогда
				
				Элементы.Профили.ТекущаяСтрока     = СвойстваПрофиля.ПолучитьИдентификатор();
				Элементы.ВидыДоступа.ТекущаяСтрока = ТекущаяСтрокаВидаДоступа.ПолучитьИдентификатор();
				
				ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,
					"Объект.ЗначенияДоступа[%1].ЗначениеДоступа",
					НСтр("ru = 'Значение повторяется.'"),
					"ЗначенияДоступа",
					НомерСтроки,
					НСтр("ru = 'Значение в строке %1 повторяется.'"));
				
				Отказ = Истина;
				Прервать;
			КонецЕсли;
			
			НомерСтроки = НомерСтроки - 1;
		КонецЦикла;
		
		НомерСтрокиВидаДоступа = НомерСтрокиВидаДоступа - 1;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СформироватьДанныеВыбораПользователя(Знач Текст,
                                             Знач ВключаяГруппы = Истина,
                                             Знач ВключаяВнешнихПользователей = Неопределено,
                                             Знач БезПользователей = Ложь) Экспорт
	
	Возврат Пользователи.СформироватьДанныеВыбораПользователя(
		Текст,
		ВключаяГруппы,
		ВключаяВнешнихПользователей,
		БезПользователей);
	
КонецФункции

&НаСервереБезКонтекста
Функция СформироватьДанныеВыбораЗначенияДоступа(Знач Текст, Знач ВидДоступа, ВключаяГруппы = Истина)
	
	Возврат УправлениеДоступомСлужебный.СформироватьДанныеВыбораЗначенияДоступа(
		Текст,
		ВидДоступа,
		ВключаяГруппы);
	
КонецФункции
