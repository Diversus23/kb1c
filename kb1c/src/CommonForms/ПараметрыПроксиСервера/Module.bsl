////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	НастройкаПроксиНаКлиенте = Параметры.НастройкаПроксиНаКлиенте;
	Если НЕ Параметры.НастройкаПроксиНаКлиенте
		И НЕ Пользователи.ЭтоПолноправныйПользователь(, Истина) Тогда
		ВызватьИсключение НСтр("ru = 'Недостаточно прав доступа.
			|
			|Настройка прокси-сервера выполняется администратором.'");
	КонецЕсли;
	
	Если НастройкаПроксиНаКлиенте Тогда
		НастройкаПроксиСервера = ПолучениеФайловИзИнтернета.НастройкиПроксиНаКлиенте();
	Иначе
		НастройкаПроксиСервера = ПолучениеФайловИзИнтернета.НастройкиПроксиНаСервере();
	КонецЕсли;
	
	Если ТипЗнч(НастройкаПроксиСервера) = Тип("Соответствие") Тогда
		
		ИспользоватьПрокси = НастройкаПроксиСервера.Получить("ИспользоватьПрокси");
		ИспользоватьСистемныеНастройки = НастройкаПроксиСервера.Получить("ИспользоватьСистемныеНастройки");
		
		Если ИспользоватьПрокси И НЕ ИспользоватьСистемныеНастройки Тогда
			
			// Заполнить данные формы настройками, заданными вручную
			Сервер       = НастройкаПроксиСервера.Получить("Сервер");
			Пользователь = НастройкаПроксиСервера.Получить("Пользователь");
			Пароль       = НастройкаПроксиСервера.Получить("Пароль");
			Порт         = НастройкаПроксиСервера.Получить("Порт");
			НеИспользоватьПроксиДляЛокальныхАдресов = НастройкаПроксиСервера.Получить("НеИспользоватьПроксиДляЛокальныхАдресов");
			
			АдресаСерверовИсключенийМассив = НастройкаПроксиСервера.Получить("НеИспользоватьПроксиДляАдресов");
			Если ТипЗнч(АдресаСерверовИсключенийМассив) = Тип("Массив") Тогда
				СерверыИсключений.ЗагрузитьЗначения(АдресаСерверовИсключенийМассив);
			КонецЕсли;
			
			ДополнительныеПрокси = НастройкаПроксиСервера.Получить("ДополнительныеНастройкиПрокси");
			
			Если ТипЗнч(ДополнительныеПрокси) <> Тип("Соответствие") Тогда
				ОдинПроксиДляВсехПротоколов = Истина;
			Иначе
				
				// Если в настройках заданы дополнительные прокси-серверы,
				// то прочитать их из настроек
				Для каждого ПротоколСервер Из ДополнительныеПрокси Цикл
					Протокол             = ПротоколСервер.Ключ;
					НастройкаПоПротоколу = ПротоколСервер.Значение;
					ЭтаФорма["Сервер" + Протокол] = НастройкаПоПротоколу.Адрес;
					ЭтаФорма["Порт"   + Протокол] = НастройкаПоПротоколу.Порт;
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Варианты использования прокси-сервера:
	// 0 - Не использовать прокси-сервер (по умолчанию, соответствует Новый ИнтернетПрокси(Ложь))
	// 1 - Использовать системные настройки прокси-сервера (соответствует Новый ИнтернетПрокси(Истина))
	// 2 - Использовать свои настройки прокси-сервера (соответствует ручной настройке параметров прокси-сервера)
	// Для последнего становятся доступно ручное изменение параметров прокси-сервера
	ВариантИспользованияПроксиСервера = ?(ИспользоватьПрокси, ?(ИспользоватьСистемныеНастройки = Истина, 1, 2), 0);
	Если ВариантИспользованияПроксиСервера = 0 Тогда
		ИнициализироватьЭлементыФормы(ЭтаФорма, ПустыеНастройкиПроксиСервера());
	ИначеЕсли ВариантИспользованияПроксиСервера = 1 И Не НастройкаПроксиНаКлиенте Тогда
		ИнициализироватьЭлементыФормы(ЭтаФорма, СистемныеНастройкиПроксиСервера());
	КонецЕсли;
	
	// Управление видимостью дополнительных элементов формы
	ФайловыйРежимРаботы = ОбщегоНазначенияПовтИсп.РежимРаботыПрограммы().Файловый;
	Элементы.ГруппаИнформацияДляВебСервисов.Видимость = (НастройкаПроксиНаКлиенте И ФайловыйРежимРаботы)
		ИЛИ (НЕ НастройкаПроксиНаКлиенте И НЕ ФайловыйРежимРаботы);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если НастройкаПроксиНаКлиенте Тогда
#Если ВебКлиент Тогда
		Предупреждение(НСтр("ru = 'В веб-клиенте параметры прокси-сервера необходимо задавать в настройках браузера.'"));
		Отказ = Истина;
		Возврат;
#КонецЕсли
		
		Если ВариантИспользованияПроксиСервера = 1 Тогда
			ИнициализироватьЭлементыФормы(ЭтаФорма, СистемныеНастройкиПроксиСервера());
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ВРег(ИсточникВыбора.ИмяФормы) = ВРег("ОбщаяФорма.ДополнительныеПараметрыПроксиСервера") Тогда
		
		Если ТипЗнч(ВыбранноеЗначение) <> Тип("Структура") Тогда
			Возврат;
		КонецЕсли;
		
		Для Каждого КлючИЗначение Из ВыбранноеЗначение Цикл
			Если КлючИЗначение.Ключ <> "НеИспользоватьПроксиДляАдресов" Тогда
				ЭтаФорма[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
			КонецЕсли;
		КонецЦикла;
		
		СерверыИсключений = ВыбранноеЗначение.НеИспользоватьПроксиДляАдресов;
		
		Модифицированность = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	Если Модифицированность Тогда
		
		КодВозврата = Вопрос(НСтр("ru = 'Параметры прокси-сервера были изменены. Сохранить изменения?'"),
			РежимДиалогаВопрос.ДаНетОтмена);
		Если КодВозврата = КодВозвратаДиалога.Отмена Тогда
			Отказ = Истина;
		ИначеЕсли КодВозврата = КодВозвратаДиалога.Да Тогда
			Отказ = Истина; // При закрытии форма должна возвратить настройки прокси-сервера.
			СохранитьНастройкиПроксиСервера();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ВариантыИспользованияПроксиСервераПриИзменении(Элемент)
	
	ИспользоватьПрокси = (ВариантИспользованияПроксиСервера > 0);
	ИспользоватьСистемныеНастройки = (ВариантИспользованияПроксиСервера = 1);
	
	НастройкиПрокси = Неопределено;
	// Варианты настройки прокси-сервера:
	// 0 - Не использовать прокси-сервер (по умолчанию, соответствует Новый ИнтернетПрокси(Ложь))
	// 1 - Использовать системные настройки прокси-сервера (соответствует Новый ИнтернетПрокси(Истина))
	// 2 - Использовать свои настройки прокси-сервера (соответствует ручной настройке параметров прокси-сервера)
	// Для последнего становятся доступно ручное изменение параметров прокси-сервера
	Если ВариантИспользованияПроксиСервера = 0 Тогда
		НастройкиПрокси = ПустыеНастройкиПроксиСервера();
	ИначеЕсли ВариантИспользованияПроксиСервера = 1 Тогда
		НастройкиПрокси = ?(НастройкаПроксиНаКлиенте,
							СистемныеНастройкиПроксиСервера(),
							СистемныеНастройкиПроксиСервераНаСервере());
	КонецЕсли;
	
	ИнициализироватьЭлементыФормы(ЭтаФорма, НастройкиПрокси);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ДополнительныеПараметрыПроксиСервера(Команда)
	
	// Формирование параметров для дополнительных настроек
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ОдинПроксиДляВсехПротоколов", ОдинПроксиДляВсехПротоколов);
	
	ПараметрыФормы.Вставить("Сервер"     , Сервер);
	ПараметрыФормы.Вставить("Порт"       , Порт);
	ПараметрыФормы.Вставить("СерверHTTP" , СерверHTTP);
	ПараметрыФормы.Вставить("ПортHTTP"   , ПортHTTP);
	ПараметрыФормы.Вставить("СерверHTTPS", СерверHTTPS);
	ПараметрыФормы.Вставить("ПортHTTPS"  , ПортHTTPS);
	ПараметрыФормы.Вставить("СерверFTP"  , СерверFTP);
	ПараметрыФормы.Вставить("ПортFTP"    , ПортFTP);
	
	ПараметрыФормы.Вставить("НеИспользоватьПроксиДляАдресов", СерверыИсключений);
	
	ОткрытьФорму("ОбщаяФорма.ДополнительныеПараметрыПроксиСервера", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьВФайл(Команда)
	
	Если Модифицированность Тогда
		
		КодВозврата = Вопрос(НСтр("ru = 'Для продолжения требуется сохранить изменения параметров прокси-сервера.
								  |Сохранить изменения?'"),
							 РежимДиалогаВопрос.ДаНет);
		Если КодВозврата <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		
		СохранитьНастройкиПроксиСервера(Ложь);
		
	КонецЕсли;
	
	СохранитьНастройкиПроксиВФайлеКонфигурацииСетиПоУмолчанию();
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьКак(Команда)
	
#Если ВебКлиент Тогда
	
	КодВозврата = Вопрос(НСтр("ru = 'Сохранить настройки прокси-сервера в файл?'"), РежимДиалогаВопрос.ДаНет);
	Если КодВозврата = КодВозвратаДиалога.Да Тогда
		АдресФайла = ДанныеФайлаКонфигурацииСетиИзДанныхФормыВоВременномХранилище();
		ПолучитьФайл(АдресФайла, "inetcfg.xml", Истина);
	КонецЕсли;
	
#Иначе
	
	ДиалогСохранения = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогСохранения.Фильтр = НСтр("ru = 'Документ XML(*.xml)|*.xml'");
	ДиалогСохранения.ПолноеИмяФайла = "inetcfg.xml";
	Если ДиалогСохранения.Выбрать() Тогда
		АдресФайла = ДанныеФайлаКонфигурацииСетиИзДанныхФормыВоВременномХранилище();
		ПолучитьФайл(АдресФайла, ДиалогСохранения.ПолноеИмяФайла, Ложь);
	КонецЕсли;
	
#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаОК(Команда)
	
	// Сохраняет настройки прокси-сервера и закрывает форму,
	// передавая в качестве возвращаемого результата параметры прокси.
	СохранитьНастройкиПроксиСервера();
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаОтмена(Команда)
	
	Модифицированность = Ложь;
	Закрыть();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаКлиентеНаСервереБезКонтекста
Процедура ИнициализироватьЭлементыФормы(Форма, НастройкиПрокси)
	
	Если НастройкиПрокси <> Неопределено Тогда
		
		Форма.Сервер       = НастройкиПрокси.Сервер;
		Форма.Порт         = НастройкиПрокси.Порт;
		Форма.СерверHTTP   = НастройкиПрокси.СерверHTTP;
		Форма.ПортHTTP     = НастройкиПрокси.ПортHTTP;
		Форма.СерверHTTPS  = НастройкиПрокси.СерверHTTPS;
		Форма.ПортHTTPS    = НастройкиПрокси.ПортHTTPS;
		Форма.СерверFTP    = НастройкиПрокси.СерверFTP;
		Форма.ПортFTP      = НастройкиПрокси.ПортFTP;
		Форма.Пользователь = НастройкиПрокси.Пользователь;
		Форма.Пароль       = НастройкиПрокси.Пароль;
		Форма.НеИспользоватьПроксиДляЛокальныхАдресов = НастройкиПрокси.НеИспользоватьПроксиДляЛокальныхАдресов;
		Форма.СерверыИсключений.ЗагрузитьЗначения(НастройкиПрокси.НеИспользоватьПроксиДляАдресов);
		
		// Если настройки по всем протоколам совпадают с настройками прокси
		// по умолчанию, то считаем, что один прокси используется для всех протоколов
		Форма.ОдинПроксиДляВсехПротоколов = (Форма.Сервер = Форма.СерверHTTP
			И Форма.СерверHTTP = Форма.СерверHTTPS
			И Форма.СерверHTTPS = Форма.СерверFTP
			И Форма.Порт = Форма.ПортHTTP
			И Форма.ПортHTTP = Форма.ПортHTTPS
			И Форма.ПортHTTPS = Форма.ПортFTP);
		
	КонецЕсли;
	
	// Изменяем доступность группы редактирования параметров прокси в зависимости
	// от варианта использования прокси-сервера
	Форма.Элементы.ПараметрыПрокси.Доступность = (Форма.ВариантИспользованияПроксиСервера = 2);
	Форма.Элементы.СохранитьКак.Доступность = (Форма.ВариантИспользованияПроксиСервера <> 1);
	
КонецПроцедуры

// Выполняет сохранение настроек прокси-сервера в интерактивном режиме в
// результате действий пользователя с отображением сообщений пользователю,
// после чего закрывает форму с возвратом настроек прокси-сервера.
//
&НаКлиенте
Процедура СохранитьНастройкиПроксиСервера(ЗакрытьФорму = Истина)
	
	НастройкаПроксиСервера = Новый Соответствие;
	
	НастройкаПроксиСервера.Вставить("ИспользоватьПрокси", ИспользоватьПрокси);
	НастройкаПроксиСервера.Вставить("Пользователь"      , Пользователь);
	НастройкаПроксиСервера.Вставить("Пароль"            , Пароль);
	НастройкаПроксиСервера.Вставить("Сервер"            , НормализованныйАдресПроксиСервера(Сервер));
	НастройкаПроксиСервера.Вставить("Порт"              , Порт);
	НастройкаПроксиСервера.Вставить("НеИспользоватьПроксиДляЛокальныхАдресов", НеИспользоватьПроксиДляЛокальныхАдресов);
	НастройкаПроксиСервера.Вставить("НеИспользоватьПроксиДляАдресов", СерверыИсключений.ВыгрузитьЗначения());
	НастройкаПроксиСервера.Вставить("ИспользоватьСистемныеНастройки", ИспользоватьСистемныеНастройки);
	
	// Формирование дополнительных адресов прокси-серверов
	
	Если НЕ ОдинПроксиДляВсехПротоколов Тогда
		
		ДополнительныеНастройки = Новый Соответствие;
		Если НЕ ПустаяСтрока(СерверHTTP) Тогда
			ДополнительныеНастройки.Вставить("http",
				Новый Структура("Адрес,Порт", НормализованныйАдресПроксиСервера(СерверHTTP), ПортHTTP));
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(СерверHTTPS) Тогда
			ДополнительныеНастройки.Вставить("https",
				Новый Структура("Адрес,Порт", НормализованныйАдресПроксиСервера(СерверHTTPS), ПортHTTPS));
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(СерверFTP) Тогда
			ДополнительныеНастройки.Вставить("ftp",
				Новый Структура("Адрес,Порт", НормализованныйАдресПроксиСервера(СерверFTP), ПортFTP));
		КонецЕсли;
		
		Если ДополнительныеНастройки.Количество() > 0 Тогда
			НастройкаПроксиСервера.Вставить("ДополнительныеНастройкиПрокси", ДополнительныеНастройки);
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаписатьНастройкиПроксиСервераВИнформационнуюБазу(НастройкаПроксиНаКлиенте, НастройкаПроксиСервера);
	
	ТребуетсяВыполнитьПопыткуЗаписиНастроекВФайл = Модифицированность ИЛИ НЕ ВыполненаПопыткаСохраненияНастроекВФайл;
	Модифицированность = Ложь;
	
	Если ЗакрытьФорму Тогда
		
		Если ТребуетсяВыполнитьПопыткуЗаписиНастроекВФайл Тогда
			
			ЭтоФайловаяИБ = ОбщегоНазначенияПовтИсп.РежимРаботыПрограммы().Файловый;
			ТекстВопроса = "";
			Если ЭтоФайловаяИБ И НастройкаПроксиНаКлиенте Тогда
				ТекстВопроса = НСтр("ru = 'Возможно применить настройки параметров прокси-сервера для механизмов, рассчитанных на работу с веб-сервисами.
									|Для этого необходимо сохранить настройки параметров прокси-сервера в файле конфигурации сети на этом компьютере.
									|Сохранить настройки параметров прокси-сервера в файле конфигурации сети на этом компьютере (подробнее см. в справке)?'");
			ИначеЕсли НЕ ЭтоФайловаяИБ И НЕ НастройкаПроксиНаКлиенте Тогда
				ТекстВопроса = НСтр("ru = 'Возможно применить настройки параметров прокси-сервера для механизмов, рассчитанных на работу с веб-сервисами.
									|Для этого необходимо сохранить настройки параметров прокси-сервера в файле конфигурации сети на компьютере сервера 1С:Предприятия.
									|Сохранить настройки параметров прокси-сервера в файле конфигурации сети на компьютере сервера 1С:Предприятия (подробнее см. в справке)?'");
			КонецЕсли;
			
			Если НЕ ПустаяСтрока(ТекстВопроса) Тогда
				КодВозврата = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
				Если КодВозврата = КодВозвратаДиалога.Да Тогда
					СохранитьНастройкиПроксиВФайлеКонфигурацииСетиПоУмолчанию();
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Закрыть(НастройкаПроксиСервера);
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет непосредственное сохранение настроек прокси-сервера.
&НаСервереБезКонтекста
Процедура ЗаписатьНастройкиПроксиСервераВИнформационнуюБазу(НастройкаПроксиНаКлиенте, НастройкаПроксиСервера)
	
	Если НастройкаПроксиНаКлиенте
		ИЛИ ОбщегоНазначенияПовтИсп.РежимРаботыПрограммы().Файловый Тогда
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("НастройкаПроксиСервера", , НастройкаПроксиСервера);
		ОбновитьПовторноИспользуемыеЗначения();
	Иначе
		ПолучениеФайловИзИнтернетаСлужебный.СохранитьНастройкиПроксиНаСервере1СПредприятие(НастройкаПроксиСервера);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ПустыеНастройкиПроксиСервера()
	
	Результат = Новый Структура;
	Результат.Вставить("Сервер"      , "");
	Результат.Вставить("Порт"        , 0);
	Результат.Вставить("СерверHTTP"  , "");
	Результат.Вставить("ПортHTTP"    , 0);
	Результат.Вставить("СерверHTTPS" , "");
	Результат.Вставить("ПортHTTPS"   , 0);
	Результат.Вставить("СерверFTP"   , "");
	Результат.Вставить("ПортFTP"     , 0);
	Результат.Вставить("Пользователь", "");
	Результат.Вставить("Пароль"      , "");
	
	Результат.Вставить("НеИспользоватьПроксиДляЛокальныхАдресов", Ложь);
	Результат.Вставить("НеИспользоватьПроксиДляАдресов", Новый Массив);
	Возврат Результат;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СистемныеНастройкиПроксиСервера()
	
	Прокси = Новый ИнтернетПрокси(Истина);
	
	Результат = Новый Структура;
	Результат.Вставить("Сервер", Прокси.Сервер());
	Результат.Вставить("Порт"  , Прокси.Порт());
	
	Результат.Вставить("СерверHTTP" , Прокси.Сервер("http"));
	Результат.Вставить("ПортHTTP"   , Прокси.Порт("http"));
	Результат.Вставить("СерверHTTPS", Прокси.Сервер("https"));
	Результат.Вставить("ПортHTTPS"  , Прокси.Порт("https"));
	Результат.Вставить("СерверFTP"  , Прокси.Сервер("ftp"));
	Результат.Вставить("ПортFTP"    , Прокси.Порт("ftp"));
	
	Результат.Вставить("Пользователь", Прокси.Пользователь);
	Результат.Вставить("Пароль"      , Прокси.Пароль);
	
	Результат.Вставить("НеИспользоватьПроксиДляЛокальныхАдресов",
		Прокси.НеИспользоватьПроксиДляЛокальныхАдресов);
	
	НеИспользоватьПроксиДляАдресов = Новый Массив;
	Для Каждого АдресСервера Из Прокси.НеИспользоватьПроксиДляАдресов Цикл
		НеИспользоватьПроксиДляАдресов.Добавить(АдресСервера);
	КонецЦикла;
	Результат.Вставить("НеИспользоватьПроксиДляАдресов", НеИспользоватьПроксиДляАдресов);
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция СистемныеНастройкиПроксиСервераНаСервере()
	
	Возврат СистемныеНастройкиПроксиСервера();
	
КонецФункции

// Возвращает нормализованный адрес прокси-сервера - без пробелов.
// Если между значащими символами встречаются пробелы, то адрес
// обрезается до первого пробела.
//
// Параметры:
//	АдресПроксиСервера (Строка) - нормализуемый адрес прокси-сервера.
//
// Возвращаемое значение: Строка - нормализованный адрес прокси-сервера.
//
&НаКлиентеНаСервереБезКонтекста
Функция НормализованныйАдресПроксиСервера(Знач АдресПроксиСервера)
	
	АдресПроксиСервера = СокрЛП(АдресПроксиСервера);
	ПозицияПробела = Найти(АдресПроксиСервера, " ");
	Если ПозицияПробела > 0 Тогда
		// Если в адресе сервера присутствуют пробелы, то
		// берется часть адреса перед первым пробелом
		АдресПроксиСервера = Лев(АдресПроксиСервера, ПозицияПробела - 1);
	КонецЕсли;
	
	Возврат АдресПроксиСервера;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Служебные процедуры и функции для формирования и записи конфигурационного
// файла с настройками прокси-сервера

&НаКлиенте
Процедура СохранитьНастройкиПроксиВФайлеКонфигурацииСетиПоУмолчанию()
	
	// Выбор подробного текста предупреждения, чтобы пользователь
	// четко осознавал, какие действия произойдут
	
	ЭтоФайловаяИБ = ОбщегоНазначенияПовтИсп.РежимРаботыПрограммы().Файловый;
	Если ЭтоФайловаяИБ И НастройкаПроксиНаКлиенте Тогда
		
		ПутьККонфФайлу = ПутьКФайлуКонфигурацииСети();
		Если ВариантИспользованияПроксиСервера = 1 Тогда
			ТекстПредупреждения = НСтр("ru = 'Для применения системных настроек требуется удаление файла ""%1"" на
										|этом компьютере (подробнее см. в справке).
										|Удалить указанный файл?'");
		Иначе
			ТекстПредупреждения = НСтр("ru = 'Настройки прокси-сервера будут записаны в файл ""%1"" на этом компьютере (подробнее см. в справке).
										|Записать настройки прокси-сервера в указанный файл?'");
		КонецЕсли;
		
		ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстПредупреждения,
			ПутьККонфФайлу);
		
	Иначе
		
		// Это клиент-серверная ИБ и настройки для сервера 1С:Предприятия.
		// В предупреждении отсутствует путь файла на сервере, т.к. в кластере
		// может присутствовать несколько серверов 1С:Предприятия и после обращения
		// к серверу за путем файла, в следующий раз вызов может быть обработан на
		// другом сервере 1С:Предприятия.
		Если ВариантИспользованияПроксиСервера = 1 Тогда
			ТекстПредупреждения = НСтр("ru = 'Для применения системных настроек требуется удаление файла ""inetcfg.xml"" на сервере 1С:Предприятия.
										|Удалить указанный файл?'");
		Иначе
			ТекстПредупреждения = НСтр("ru = 'Настройки прокси-сервера будут записаны в файл ""inetcfg.xml"" на сервере 1С:Предприятия.
										|Записать настройки прокси-сервера в указанный файл?'");
		КонецЕсли;
		
	КонецЕсли;
	
	КодВозврата = Вопрос(ТекстПредупреждения, РежимДиалогаВопрос.ДаНет);
	
	Если КодВозврата <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ВыполненаПопыткаСохраненияНастроекВФайл = Истина;
	РезультатЗаписиВФайл = ЗаписатьНастройкиПроксиВДействующийФайлКонфигурацииСети(?(ЭтоФайловаяИБ, ПутьККонфФайлу, ""));
	Предупреждение(РезультатЗаписиВФайл);
	
КонецПроцедуры

// Формирует двоичные данные конфигурационного файла настроек сети из
// данных формы.
// Возвращаемое значение: Строка - адрес двоичных данных конфигурационного
// файла во временном хранилище.
&НаСервере
Функция ДанныеФайлаКонфигурацииСетиИзДанныхФормыВоВременномХранилище()
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла("xml");
	ЗаписатьНастройкиПроксиИзДанныхФормыВФайлНаДиске(ИмяВременногоФайла);
	
	АдресФайла = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяВременногоФайла));
	
	Попытка
		УдалитьФайлы(ИмяВременногоФайла);
	Исключение
	КонецПопытки;
	
	Возврат АдресФайла;
	
КонецФункции

&НаСервере
Функция ЗаписатьНастройкиПроксиВДействующийФайлКонфигурацииСети(знач ПутьККонфФайлу = "")
	
	Если ПустаяСтрока(ПутьККонфФайлу) Тогда
		ПутьККонфФайлу = ПутьКФайлуКонфигурацииСети();
	КонецЕсли;
	
	ЭтоФайловаяИБ = ОбщегоНазначенияПовтИсп.РежимРаботыПрограммы().Файловый;
	Если ВариантИспользованияПроксиСервера = 1 Тогда
		
		// При системных настройках файл "inetcfg.xml" должен отсутствовать
		ОписательФайлаКонфигурации = Новый Файл(ПутьККонфФайлу);
		Если ОписательФайлаКонфигурации.Существует() Тогда
			Попытка
				УдалитьФайлы(ПутьККонфФайлу);
			Исключение
				
				Если ЭтоФайловаяИБ Тогда
					ТекстСообщения = НСтр("ru = 'Не удалось удалить файл ""%1"" на этом компьютере.
						|Возможно, у текущего пользователя недостаточно прав для выполнения файловой операции. Требуется обратиться к администратору.'");
				Иначе
					ТекстСообщения = НСтр("ru = 'Не удалось удалить файл ""%1"" на сервере 1С:Предприятия.
						|Возможно, у пользователя, от имени которого запущен рабочий процесс, недостаточно прав на выполнение файловой операции.
						|Требуется войти на сервер 1С:Предприятия от имени пользователя с административными правами и удалить указанный файл.
						|Если в кластере задействовано несколько рабочих серверов, то необходимо вручную на каждом рабочем сервере удалить
						|указанный файл (подробнее см. в справке)'");
				КонецЕсли;
				
				Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ПутьККонфФайлу);
				
			КонецПопытки;
		КонецЕсли;
		
		Если ЭтоФайловаяИБ Тогда
			ТекстСообщения = НСтр("ru = 'Файл ""%1"" удален на этом компьютере.'");
		Иначе
			ТекстСообщения = НСтр("ru = 'Файл ""%1"" удален на сервере 1С:Предприятия.
				|Если в кластере задействовано несколько рабочих серверов, то необходимо вручную на каждом рабочем сервере
				|удалить указанный файл (подробнее см. в справке)'");
		КонецЕсли;
		
		Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ПутьККонфФайлу);
		
	Иначе
		
		Попытка
			
			ЗаписатьНастройкиПроксиИзДанныхФормыВФайлНаДиске(ПутьККонфФайлу);
			
			Если ЭтоФайловаяИБ Тогда
				ТекстСообщения = НСтр("ru = 'Настройки прокси-сервера записаны в файл ""%1"" на этом компьютере.'");
			Иначе
				ТекстСообщения = НСтр("ru = 'Настройки прокси-сервера записаны в файл ""%1"" на сервере 1С:Предприятия.
					|Если в кластере задействовано несколько рабочих серверов, то необходимо сохранить настройки в файл (Сохранить как...),
					|войти на каждый рабочий сервер 1С:Предприятия с административными правами и скопировать сохраненный в файл в
					|соответствующий каталог (подробнее см. в справке)'");
			КонецЕсли;
			
			Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ПутьККонфФайлу);
			
		Исключение
			
			Если ЭтоФайловаяИБ Тогда
				ТекстСообщения = НСтр("ru = 'Не удалось записать настройки прокси-сервера в файл ""%1"" на этом компьютере.
					|Возможно, у текущего пользователя недостаточно прав. Требуется обратиться к администратору.'");
			Иначе
				ТекстСообщения = НСтр("ru = 'Не удалось записать настройки прокси-сервера в файл ""%1"" на сервере 1С:Предприятия.
					|Возможно, у пользователя, от имени которого запущен рабочий процесс, недостаточно прав на выполнение файловой операции.
					|Требуется сохранить настройки в файле (Сохранить как...), войти на сервер 1С:Предприятия с административными правами
					|и скопировать сохраненный файл в соответствующий каталог. Если в кластере задействовано несколько рабочих серверов,
					|то сохраненный файл требуется поместить в соответствующий каталог на каждом рабочем сервере (подробнее см. в справке).'");
			КонецЕсли;
			
			Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ПутьККонфФайлу);
			
		КонецПопытки;
		
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ЗаписатьНастройкиПроксиИзДанныхФормыВФайлНаДиске(ПутьКФайлу)
	
	// Последовательная запись настроек конфигурации в файл конфигурации
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(ПутьКФайлу, "utf-8");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	ЗаписьXML.ЗаписатьНачалоЭлемента("InternetProxy");
	
	Если НЕ ИспользоватьПрокси Тогда
		
		// Если не использовать прокси-сервер, то содержимое файла должно иметь вид:
		// <InternetProxy ntlm="false" />
		ЗаписьXML.ЗаписатьАтрибут("ntlm", "false");
		
	иначе
		
		СтрокаПротоколов = "";
		Если НЕ ОдинПроксиДляВсехПротоколов Тогда
			ДобавитьПротоколКСтрокеПротоколов("http" , СтрокаПротоколов);
			ДобавитьПротоколКСтрокеПротоколов("https", СтрокаПротоколов);
			ДобавитьПротоколКСтрокеПротоколов("ftp"  , СтрокаПротоколов);
		КонецЕсли;
		ДобавитьПротоколКСтрокеПротоколов("", СтрокаПротоколов);
		
		Если НЕ ПустаяСтрока(СтрокаПротоколов) Тогда
			ЗаписьXML.ЗаписатьАтрибут("protocols", СтрокаПротоколов);
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(Пользователь) Тогда
			ЗаписьXML.ЗаписатьАтрибут("user", Пользователь);
			Если НЕ ПустаяСтрока(Пароль) Тогда
				ЗаписьXML.ЗаписатьАтрибут("password", Пароль);
			КонецЕсли;
		КонецЕсли;
		
		ЗаписьXML.ЗаписатьАтрибут("bypassOnLocal", XMLСтрока(НеИспользоватьПроксиДляЛокальныхАдресов));
		
		СтрокаАдресовСерверовИсключений = "";
		Для каждого ЭлементСпискаСерверовИсключений Из СерверыИсключений Цикл
			СтрокаАдресовСерверовИсключений = СтрокаАдресовСерверовИсключений
				+ ?(ПустаяСтрока(СтрокаАдресовСерверовИсключений), "", " ")
				+ ЭлементСпискаСерверовИсключений.Значение;
			РазделитьПробелом = Истина;
		КонецЦикла;
		Если НЕ ПустаяСтрока(СтрокаАдресовСерверовИсключений) Тогда
			ЗаписьXML.ЗаписатьАтрибут("bypassOnAddresses", СтрокаАдресовСерверовИсключений);
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПротоколКСтрокеПротоколов(Протокол, СтрокаПротоколов)
	
	ИмяРеквизитаАдреса = "Сервер" + Протокол;
	ИмяРеквизитаПорта  = "Порт" + Протокол;
	
	Если НЕ ПустаяСтрока(ЭтаФорма[ИмяРеквизитаАдреса]) Тогда
		
		СтрокаПротоколов = СтрокаПротоколов
			+ ?(ПустаяСтрока(СтрокаПротоколов), "", " ")
			+ Протокол
			+ ?(ПустаяСтрока(Протокол), "", "=")
			+ НормализованныйАдресПроксиСервера(ЭтаФорма[ИмяРеквизитаАдреса])
			+ ?(ЭтаФорма[ИмяРеквизитаПорта] = 0,
				"",
				":" + СтрЗаменить(Строка(ЭтаФорма[ИмяРеквизитаПорта]), Символ(160), ""));
		
	КонецЕсли;
	
КонецПроцедуры

// Определяет путь к файлу конфигурации сети платформы "inetcfg.xml".
// Возвращаемое значение: Строка - путь к файлу конфигурации сети
//						  на клиенте или на сервере - в зависимости
//						  от контекста вызова
//
&НаСервереБезКонтекста
Функция ПутьКФайлуКонфигурацииСети()
	
	КаталогКонфФайловВерсии  = КаталогПрограммы() + "conf\";
	ПутьККонфФайлуСетиВерсии = КаталогКонфФайловВерсии + "inetcfg.xml";
	
	Результат = КаталогКонфФайловВерсии;
	
	// 1. Проверить, существует ли файл inetcfg.xml в каталоге "...\bin\conf\",
	// т.к. этот файл имеет больший приоритет, чем файл в каталоге общих
	// настроечных файлов версий платформы.
	ОписательКонфФайла = Новый Файл(ПутьККонфФайлуСетиВерсии);
	Если ОписательКонфФайла.Существует() Тогда
		Возврат Результат;
	КонецЕсли;
	
	// 2. Определить из конфигурационного файла платформы путь к каталогу общих
	// конфигурационных файлов версий платформы.
	
	ПутьККонфФайлуВерсии = КаталогКонфФайловВерсии + "conf.cfg";
	ОписательКонфФайла = Новый Файл(ПутьККонфФайлуВерсии);
	Если НЕ ОписательКонфФайла.Существует() Тогда
		Возврат Результат;
	КонецЕсли;
	
	// 3. Разбор содержимого файла "conf.cfg" для определения
	// пути конфигурационного файла "inetcfg.xml"
	ПутьККаталогуКонфФайлов = "";
	Попытка
		
		ЧтениеФайла = Новый ЧтениеТекста(ПутьККонфФайлуВерсии);
		ПрочитаннаяСтрока = ЧтениеФайла.ПрочитатьСтроку();
		Пока ПрочитаннаяСтрока <> Неопределено Цикл
			СтрокаКонфигурации = СокрЛП(ПрочитаннаяСтрока);
			Если Найти(ВРег(СтрокаКонфигурации), "CONFLOCATION") = 1 Тогда
				ПраваяЧастьСтрокиКонфигурации = СокрЛП(Сред(СтрокаКонфигурации, 13));
				Если Лев(ПраваяЧастьСтрокиКонфигурации, 1) = "=" Тогда
					ПутьККаталогуКонфФайлов = СокрЛП(Сред(ПраваяЧастьСтрокиКонфигурации, 2));
				КонецЕсли;
			КонецЕсли;
			Если НЕ ПустаяСтрока(ПутьККаталогуКонфФайлов) Тогда
				Прервать;
			КонецЕсли;
			ПрочитаннаяСтрока = ЧтениеФайла.ПрочитатьСтроку();
		КонецЦикла;
		ЧтениеФайла.Закрыть();
		
	Исключение
		Возврат Результат;
	КонецПопытки;
	
	Если ПустаяСтрока(ПутьККаталогуКонфФайлов) Тогда
		Возврат Результат;
	КонецЕсли;
	
	ПравыйСимвол = Прав(ПутьККаталогуКонфФайлов, 1);
	Если ПравыйСимвол <> "\" И ПравыйСимвол <> "/" Тогда
		ПутьККаталогуКонфФайлов = ПутьККаталогуКонфФайлов + "\";
	КонецЕсли;
	
	ОписательКаталогаОбщихКонфФайлов = Новый Файл(ПутьККаталогуКонфФайлов);
	Если ОписательКаталогаОбщихКонфФайлов.Существует()
		И ОписательКаталогаОбщихКонфФайлов.ЭтоКаталог() Тогда
		Результат = ПутьККаталогуКонфФайлов + "inetcfg.xml";
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

