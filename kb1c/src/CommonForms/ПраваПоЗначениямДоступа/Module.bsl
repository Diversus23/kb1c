////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	СсылкаНаОбъект = Параметры.СсылкаНаОбъект;
	ПараметрыОграниченияДоступа = УправлениеДоступомСлужебныйПовтИсп.Параметры();
	ВозможныеПрава = ПараметрыОграниченияДоступа.ВозможныеПраваПоЗначениямДоступа;
	
	Если ВозможныеПрава.ПоТипамСсылок[ТипЗнч(СсылкаНаОбъект)] = Неопределено Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Права доступа не настраиваются
			           |для значений типа ""%1"".'"),
			Строка(ТипЗнч(СсылкаНаОбъект)));
	КонецЕсли;
	
	// Проверка разрешения на открытие формы.
	ОписаниеОшибки = "";
	Если НЕ УправлениеДоступом.РазрешеноУправлениеПравамиПоЗначениямДоступа(
	     	СсылкаНаОбъект, ОписаниеОшибки, ТолькоПросмотр) Тогда
		
		ВызватьИсключение ОписаниеОшибки;
	КонецЕсли;
	
	ИспользоватьВнешнихПользователей
		= ВнешниеПользователи.ИспользоватьВнешнихПользователей()
		И ПравоДоступа("Просмотр", Метаданные.Справочники.ВнешниеПользователи);
	
	УстановитьПривилегированныйРежим(Истина);
	
	СписокТиповПользователей.Добавить(
		Тип("СправочникСсылка.Пользователи"),
		"Пользователи");
	
	СписокТиповПользователей.Добавить(
		Тип("СправочникСсылка.ВнешниеПользователи"),
		"ВнешниеПользователи");
	
	МетаданныеОбъекта = СсылкаНаОбъект.Метаданные();
	
	НазваниеЗначенийДоступа = УправлениеДоступомСлужебный.НазваниеОбъектаИзМетаданных(МетаданныеОбъекта);
	ТаблицаЗначенийДоступа = МетаданныеОбъекта.ПолноеИмя();
	
	ВидыДоступаЗначенийДоступа = ПараметрыОграниченияДоступа.СвойстваВидовДоступа.ВидыДоступаЗначенийДоступа;
	ВидыДоступа = ВидыДоступаЗначенийДоступа.ПоПолнымИменам.Получить(ТаблицаЗначенийДоступа);
	
	Если ВидыДоступа.Количество() <> 1
	 ИЛИ НЕ УправлениеДоступомСлужебный.СвойстваВидаДоступа(
	          ВидыДоступа[0]).ВидДоступаЧерезПраваПоЗначениямДоступа Тогда
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Для значений доступа ""%1"" не найдено вида доступа
			           |через права по значениям доступа.'"),
			Метаданные.НайтиПоПолномуИмени(ТаблицаЗначенийДоступа).Синоним);
	КонецЕсли;
	
	ВидДоступа = ВидыДоступа[0];
	
	ЗаполнитьПрава();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ЗапроситьПодтверждениеЗакрытияФормы(Отказ, Модифицированность);
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Ошибки = Неопределено;
	
	// Проверка незаполненных прав.
	ИмяПервогоПрава = "";
	Для каждого ВозможноеПраво Из ВозможныеПрава Цикл
		ИмяПервогоПрава = ВозможноеПраво.Ключ;
		Прервать;
	КонецЦикла;
	
	Для каждого ТекущаяСтрока Из ГруппыПрав Цикл
		НомерСтроки = ГруппыПрав.Индекс(ТекущаяСтрока);
		
		// Проверка заполнения флажков прав.
		НетЗаполненногоПрава = Истина;
		Для каждого ВозможноеПраво Из ВозможныеПрава Цикл
			Если ТекущаяСтрока[ВозможноеПраво.Ключ] Тогда
				НетЗаполненногоПрава = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НетЗаполненногоПрава Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,
				"ГруппыПрав[%1]." + ИмяПервогоПрава,
				НСтр("ru = 'Необходимо заполнить не менее одного права доступа.'"),
				"ГруппыПрав",
				НомерСтроки,
				НСтр("ru = 'В строке %1 необходимо заполнить не менее одного права доступа.'"));
		КонецЕсли;
		
		// Проверка заполнения.
		Если НЕ ЗначениеЗаполнено(ТекущаяСтрока["Пользователь"]) Тогда
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,
				"ГруппыПрав[%1].Пользователь",
				НСтр("ru = 'Пользователь не выбран.'"),
				"ГруппыПрав",
				НомерСтроки,
				НСтр("ru = 'Пользователь в строке %1 не выбран.'"));
			Продолжить;
		КонецЕсли;
		
		// Проверка наличия повторяющихся значений.
		Отбор = Новый Структура;
		Отбор.Вставить("НаследуетсяОт" , ТекущаяСтрока["НаследуетсяОт"]);
		Отбор.Вставить("Пользователь",   ТекущаяСтрока["Пользователь"]);
		
		Если ГруппыПрав.НайтиСтроки(Отбор).Количество() > 1 Тогда
			
			Если ТипЗнч(Отбор.Пользователь) = Тип("СправочникСсылка.Пользователи") Тогда
				ТекстДляОднойОшибки      = НСтр("ru = 'Пользователь повторяется.'");
				ТекстДляНесколькихОшибок = НСтр("ru = 'Пользователь в строке %1 повторяется.'");
				
			ИначеЕсли ТипЗнч(Отбор.Пользователь) = Тип("СправочникСсылка.ВнешниеПользователи") Тогда
				ТекстДляОднойОшибки      = НСтр("ru = 'Внешний пользователь повторяется.'");
				ТекстДляНесколькихОшибок = НСтр("ru = 'Внешний пользователь в строке %1 повторяется.'");
				
			ИначеЕсли ТипЗнч(Отбор.Пользователь) = Тип("СправочникСсылка.ГруппыПользователей") Тогда
				ТекстДляОднойОшибки      = НСтр("ru = 'Группа пользователей повторяется.'");
				ТекстДляНесколькихОшибок = НСтр("ru = 'Группа пользователей в строке %1 повторяется.'");
			Иначе
				ТекстДляОднойОшибки      = НСтр("ru = 'Группа внешних пользователей повторяется.'");
				ТекстДляНесколькихОшибок = НСтр("ru = 'Группа внешних пользователей в строке %1 повторяется.'");
			КонецЕсли;
			
			ОбщегоНазначенияКлиентСервер.ДобавитьОшибкуПользователю(Ошибки,
				"ГруппыПрав[%1].Пользователь",
				ТекстДляОднойОшибки,
				"ГруппыПрав",
				НомерСтроки,
				ТекстДляНесколькихОшибок);
		КонецЕсли;
	КонецЦикла;
	
	ОбщегоНазначенияКлиентСервер.СообщитьОшибкиПользователю(Ошибки, Отказ);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура НаследоватьПраваРодителейПриИзменении(Элемент)
	
	НаследоватьПраваРодителейПриИзмененииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура НаследоватьПраваРодителейПриИзмененииНаСервере()
	
	Если НаследоватьПраваРодителей Тогда
		ДобавитьПраваНаследуемыеПоИерархии();
		ЗаполнитьНомераКартинокПользователей();
	Иначе
		// Очистка настроек, наследуемых от родителей по иерархии.
		Индекс = ГруппыПрав.Количество()-1;
		Пока Индекс >= 0 Цикл
			Если ТипЗнч(ГруппыПрав.Получить(Индекс).НаследуетсяОт) <> Тип("Строка") Тогда
				ГруппыПрав.Удалить(Индекс);
			КонецЕсли;
			Индекс = Индекс - 1;
		КонецЦикла;
	КонецЕсли;
	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ ГруппыПрав

&НаКлиенте
Процедура ГруппыПравПередНачаломИзменения(Элемент, Отказ)
	
	ПроверкаВозможностиИзмененияПрав(Отказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппыПравПередУдалением(Элемент, Отказ)
	
	ПроверкаВозможностиИзмененияПрав(Отказ, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппыПравПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		// Установка начальных значений.
		Если Копирование Тогда
			Если Элементы.Найти("ГруппыПравНаследуетсяОт") <> Неопределено Тогда
				Элементы.ГруппыПрав.ТекущиеДанные.НаследуетсяОт = ДобавленныеРеквизиты.НаследуетсяОт;
			КонецЕсли;
			Если Элементы.Найти("ГруппыПравГруппаПользователей") <> Неопределено Тогда
				Элементы.ГруппыПрав.ТекущиеДанные.ГруппаПользователей =
					ДобавленныеРеквизиты.ГруппаПользователей;
			КонецЕсли;
		Иначе
			Элементы.ГруппыПрав.ТекущиеДанные.РаспространяетсяВИерархии = Истина;
			
			Для каждого ДобавленныйРеквизит Из ДобавленныеРеквизиты Цикл
				
				Элементы.ГруппыПрав.ТекущиеДанные[ДобавленныйРеквизит.Ключ] =
					ДобавленныйРеквизит.Значение;
				
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ГруппыПравПользовательПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Элементы.ГруппыПрав.ТекущиеДанные.Пользователь) Тогда
		ЗаполнитьНомераКартинокПользователей(Элементы.ГруппыПрав.ТекущаяСтрока);
	Иначе
		Элементы.ГруппыПрав.ТекущиеДанные.НомерКартинки = ДобавленныеРеквизиты.НомерКартинки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппыПравПользовательНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ВыбратьПользователей();
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппыПравПользовательОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Элементы.ГруппыПрав.ТекущиеДанные.Пользователь  = ДобавленныеРеквизиты.Пользователь;
	Элементы.ГруппыПрав.ТекущиеДанные.НомерКартинки = ДобавленныеРеквизиты.НомерКартинки;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппыПравПользовательОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = СформироватьДанныеВыбораПользователя(Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппыПравПользовательАвтоПодбор(Элемент, Текст, ДанныеВыбора, Ожидание, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = СформироватьДанныеВыбораПользователя(Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппыПравЗапрещеноПриИзменении(Элемент)
	
	// При изменении вида настройки необходимо сбросить флажки прав.
	Для каждого ВозможноеПраво Из ВозможныеПрава Цикл
		Элементы.ГруппыПрав.ТекущиеДанные[ВозможноеПраво.Ключ] = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппыПравПравоПриИзменении(Элемент)
	
	// Обновить зависимости прав.
	ЗависимыеПрава = Неопределено;
	ТекущееПраво = Сред(Элемент.Имя, СтрДлина("ГруппыПрав")+1);
	Если Элементы.ГруппыПрав.ТекущиеДанные[ТекущееПраво] Тогда
		Если Элементы.ГруппыПрав.ТекущиеДанные.Запрещено Тогда
			// Увеличены запрещения.
			ОбратныеЗависимостиПрав.Свойство(ТекущееПраво, ЗависимыеПрава);
			ЗначениеЗависимогоПрава = Истина;
		Иначе
			// Увеличены разрешения.
			ПрямыеЗависимостиПрав.Свойство(ТекущееПраво, ЗависимыеПрава);
			ЗначениеЗависимогоПрава = Истина;
		КонецЕсли;
	Иначе
		Если Элементы.ГруппыПрав.ТекущиеДанные.Запрещено Тогда
			// Уменьшены запрещения.
			ПрямыеЗависимостиПрав.Свойство(ТекущееПраво, ЗависимыеПрава);
			ЗначениеЗависимогоПрава = Ложь;
		Иначе
			// Уменьшены разрешения.
			ОбратныеЗависимостиПрав.Свойство(ТекущееПраво, ЗависимыеПрава);
			ЗначениеЗависимогоПрава = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗависимыеПрава <> Неопределено Тогда
		Для каждого ЗависимоеПраво Из ЗависимыеПрава Цикл
			Элементы.ГруппыПрав.ТекущиеДанные[ЗависимоеПраво] = ЗначениеЗависимогоПрава;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	Отказ = Ложь;
	ОчиститьСообщения();
	ЗаписатьПрава(Отказ);
	
	Если НЕ Отказ Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Записать(Команда)
	
	Отказ = Ложь;
	РазрешеноУправлениеПравамиПослеЗаписи = Ложь;
	ОписаниеПредупреждения = "";
	ОчиститьСообщения();
	ЗаписатьПрава(Отказ, РазрешеноУправлениеПравамиПослеЗаписи, ОписаниеПредупреждения);
	
	Если НЕ Отказ И НЕ РазрешеноУправлениеПравамиПослеЗаписи Тогда
		Предупреждение(ОписаниеПредупреждения, 7, НСтр("ru = 'После успешной записи'"));
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Перечитать(Команда)
	
	Если НЕ Модифицированность Тогда
		ПрочитатьПрава();
	Иначе
		Ответ = Вопрос(НСтр("ru = 'Данные изменены. Прочитать без сохранения?'"),
		               РежимДиалогаВопрос.ДаНет,
		               5,
		               КодВозвратаДиалога.Нет);
		
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ПрочитатьПрава();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Подготовка таблиц прав, проверяемых в стандартных шаблонах ограничения доступа по возможным правам.
&НаСервере
Функция ПолучитьПраваТаблицДляШаблонов(ТаблицаЗначенийДоступа, Право)
	
	ПраваТаблицДляШаблонов = Новый Соответствие;
	
	ОписаниеПрава = УправлениеДоступомСлужебныйПовтИсп.Параметры(
		).ВозможныеПраваПоЗначениямДоступа.ПоПолнымИменам[ТаблицаЗначенийДоступа][Право];
	
	Для каждого Таблица Из ОписаниеПрава.ЧтениеВТаблицах Цикл
		ПраваТаблицы = ПраваТаблицДляШаблонов.Получить(Таблица);
		Если ПраваТаблицы = Неопределено Тогда
			ПраваТаблицы = СтруктураПрав();
			ПраваТаблицДляШаблонов.Вставить(Таблица, ПраваТаблицы);
		КонецЕсли;
		ПраваТаблицы.Чтение = Истина;
	КонецЦикла;
	
	Для каждого Таблица Из ОписаниеПрава.ДобавлениеВТаблицах Цикл
		ПраваТаблицы = ПраваТаблицДляШаблонов.Получить(Таблица);
		Если ПраваТаблицы = Неопределено Тогда
			ПраваТаблицы = СтруктураПрав();
			ПраваТаблицДляШаблонов.Вставить(Таблица, ПраваТаблицы);
		КонецЕсли;
		ПраваТаблицы.Добавление = Истина;
	КонецЦикла;
	
	Для каждого Таблица Из ОписаниеПрава.ИзменениеВТаблицах Цикл
		ПраваТаблицы = ПраваТаблицДляШаблонов.Получить(Таблица);
		Если ПраваТаблицы = Неопределено Тогда
			ПраваТаблицы = СтруктураПрав();
			ПраваТаблицДляШаблонов.Вставить(Таблица, ПраваТаблицы);
		КонецЕсли;
		ПраваТаблицы.Изменение = Истина;
	КонецЦикла;
	
	Для каждого Таблица Из ОписаниеПрава.УдалениеВТаблицах Цикл
		ПраваТаблицы = ПраваТаблицДляШаблонов.Получить(Таблица);
		Если ПраваТаблицы = Неопределено Тогда
			ПраваТаблицы = СтруктураПрав();
			ПраваТаблицДляШаблонов.Вставить(Таблица, ПраваТаблицы);
		КонецЕсли;
		ПраваТаблицы.Удаление = Истина;
	КонецЦикла;
	
	Если ПраваТаблицДляШаблонов.Количество() = 0 Тогда
		ПраваТаблицДляШаблонов.Вставить("", СтруктураПрав());
	КонецЕсли;
	
	Возврат ПраваТаблицДляШаблонов;
	
КонецФункции

&НаСервере
Функция СтруктураПрав()
	
	Возврат Новый Структура("Чтение, Добавление, Изменение, Удаление", Ложь, Ложь, Ложь, Ложь);
	
КонецФункции

&НаСервере
Процедура ДобавитьРеквизит(НовыеРеквизиты, Реквизит, НачальноеЗначение)
	
	НовыеРеквизиты.Добавить(Реквизит);
	ДобавленныеРеквизиты.Вставить(Реквизит.Имя, НачальноеЗначение);
	
КонецПроцедуры

&НаСервере
Функция ДобавитьЭлемент(Имя, Тип, Родитель)
	
	Элемент = Элементы.Добавить(Имя, Тип, Родитель);
	Элемент.ФиксацияВТаблице = ФиксацияВТаблице.Нет;
	ДобавленныеЭлементы.Вставить(Имя);
	Возврат Элемент;
	
КонецФункции

&НаСервере
Процедура ДобавитьРеквизитыЭлементыФормы(НовыеРеквизиты = Неопределено)
	
	ОписанияВозможныхПрав = УправлениеДоступомСлужебныйПовтИсп.Параметры(
		).ВозможныеПраваПоЗначениямДоступа.ПоПолнымИменам[ТаблицаЗначенийДоступа];
	
	Если НовыеРеквизиты <> Неопределено Тогда
		
		// Добавление реквизита формы Пользователь.
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("СправочникСсылка.Пользователи"));
		МассивТипов.Добавить(Тип("СправочникСсылка.ГруппыПользователей"));
		МассивТипов.Добавить(Тип("СправочникСсылка.ВнешниеПользователи"));
		МассивТипов.Добавить(Тип("СправочникСсылка.ГруппыВнешнихПользователей"));
		ОписаниеТипов = Новый ОписаниеТипов(МассивТипов);
		
		РеквизитФормы = Новый РеквизитФормы(
			"Пользователь",
			ОписаниеТипов,
			"ГруппыПрав",
			НСтр("ru = 'Пользователь'"));
		
		ДобавитьРеквизит(НовыеРеквизиты, РеквизитФормы, Справочники.Пользователи.ПустаяСсылка());
		
		// Добавление реквизита формы НомерКартинки.
		РеквизитФормы = Новый РеквизитФормы(
			"НомерКартинки",
			Новый ОписаниеТипов("Число"),
			"ГруппыПрав");
			
		ДобавитьРеквизит(НовыеРеквизиты, РеквизитФормы, -1);
	Иначе
		Элемент = ДобавитьЭлемент("ГруппыПравПользователь", Тип("ПолеФормы"), Элементы.ГруппыПрав);
		Элемент.Вид            = ВидПоляФормы.ПолеВвода;
		Элемент.ПутьКДанным    = "ГруппыПрав.Пользователь";
		Элемент.ТолькоПросмотр = Ложь;
		Элемент.УстановитьДействие("ПриИзменении",         "ГруппыПравПользовательПриИзменении");
		Элемент.УстановитьДействие("НачалоВыбора",         "ГруппыПравПользовательНачалоВыбора");
		Элемент.УстановитьДействие("Очистка",              "ГруппыПравПользовательОчистка");
		Элемент.УстановитьДействие("ОкончаниеВводаТекста", "ГруппыПравПользовательОкончаниеВводаТекста");
		Элемент.УстановитьДействие("АвтоПодбор",           "ГруппыПравПользовательАвтоПодбор");
		
		Элементы.ГруппыПрав.ПутьКДаннымКартинкиСтроки = "ГруппыПрав.НомерКартинки";
	КонецЕсли;
	
	// Добавление возможных прав, настраиваемых по владельцу (таблице значений доступа).
	Для каждого КлючИЗначение Из ОписанияВозможныхПрав Цикл
		ОписаниеПрава = КлючИЗначение.Значение;
		
		Если НовыеРеквизиты <> Неопределено Тогда
			// Добавление реквизита формы права.
			РеквизитФормы = Новый РеквизитФормы(
				ОписаниеПрава.Имя,
				Новый ОписаниеТипов("Булево"),
				"ГруппыПрав",
				ОписаниеПрава.Синоним);
			
			ДобавитьРеквизит(НовыеРеквизиты, РеквизитФормы, ОписаниеПрава.НачальноеЗначение);
			
			ВозможныеПрава.Вставить(ОписаниеПрава.Имя);
			
			// Добавление прямых и обратных зависимостей прав.
			ПрямыеЗависимостиПрав.Вставить(ОписаниеПрава.Имя, ОписаниеПрава.ТребуемыеПрава);
			Для каждого ЗависимоеПраво Из ОписаниеПрава.ТребуемыеПрава Цикл
				Если ОбратныеЗависимостиПрав.Свойство(ЗависимоеПраво) Тогда
					ЗависимыеПрава = ОбратныеЗависимостиПрав[ЗависимоеПраво];
				Иначе
					ЗависимыеПрава = Новый Массив;
					ОбратныеЗависимостиПрав.Вставить(ЗависимоеПраво, ЗависимыеПрава);
				КонецЕсли;
				Если ЗависимыеПрава.Найти(ОписаниеПрава.Имя) = Неопределено Тогда
					ЗависимыеПрава.Добавить(ОписаниеПрава.Имя);
				КонецЕсли;
			КонецЦикла;
		Иначе
			Элемент = ДобавитьЭлемент(
				"ГруппыПрав" + ОписаниеПрава.Имя,
				Тип("ПолеФормы"),
				Элементы.ГруппыПрав);
			
			Элемент.Вид         = ВидПоляФормы.ПолеФлажка;
			Элемент.ПутьКДанным = "ГруппыПрав."+ ОписаниеПрава.Имя;
			Элемент.УстановитьДействие("ПриИзменении", "ГруппыПравПравоПриИзменении");
			Если ЗначениеЗаполнено(ОписаниеПрава.Заголовок) Тогда
				Элемент.Заголовок = ОписаниеПрава.Заголовок;
			ИначеЕсли ЗначениеЗаполнено(ОписаниеПрава.Сокращение) Тогда
				Элемент.Заголовок = ОписаниеПрава.Сокращение;
			Иначе
				Элемент.Заголовок = ОписаниеПрава.Имя;
			КонецЕсли;
			Элемент.Подсказка = ОписаниеПрава.Синоним;
		КонецЕсли;
	КонецЦикла;
	
	Если НовыеРеквизиты <> Неопределено Тогда
		
		ТипыНаследуетсяОт = Метаданные.РегистрыСведений.ПраваПоЗначениямДоступа
			.Измерения.ЗначениеДоступа.Тип.Типы();
		
		ТипыНаследуетсяОт.Добавить(Тип("Строка"));
		
		// Добавление реквизита формы НаследуетсяОт.
		РеквизитФормы = Новый РеквизитФормы(
			"НаследуетсяОт",
			Новый ОписаниеТипов(ТипыНаследуетсяОт),
			"ГруппыПрав",
			НСтр("ru = 'Наследуется от'"));
		
		ДобавитьРеквизит(НовыеРеквизиты, РеквизитФормы, НСтр("ru = '<не наследуется>'"));
	Иначе
		Элемент = ДобавитьЭлемент(
			"ГруппыПравНаследуетсяОт",
			Тип("ПолеФормы"),
			Элементы.ГруппыПрав);
		
		Элемент.Вид            = ВидПоляФормы.ПолеВвода;
		Элемент.ПутьКДанным    = "ГруппыПрав.НаследуетсяОт";
		Элемент.ТолькоПросмотр = Истина;
		Элемент.Подсказка      = НСтр("ru = 'Наследуется от (значения доступа)'");
	КонецЕсли;

	Если НовыеРеквизиты = Неопределено Тогда
		Элемент = ДобавитьЭлемент("ГруппыПравЗапрещено", Тип("ПолеФормы"), Элементы.ГруппыПрав);
		Элемент.Вид         = ВидПоляФормы.ПолеВвода;
		Элемент.ПутьКДанным = "ГруппыПрав.Запрещено";
		Элемент.Заголовок   = НСтр("ru = 'Тип прав'");
		Элемент.Формат      = НСтр("ru = 'БЛ=Разрешить; БИ=Запретить'");
		Элемент.Подсказка   = НСтр("ru = 'Запретить/Разрешить'");
		Элемент.УстановитьДействие("ПриИзменении", "ГруппыПравЗапрещеноПриИзменении");
		Элемент.ФорматРедактирования = Элемент.Формат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПрава()
	
	ПрямыеЗависимостиПрав   = Новый Структура;
	ОбратныеЗависимостиПрав = Новый Структура;
	ВозможныеПрава          = Новый Структура;
	
	Если ДобавленныеЭлементы = Неопределено Тогда
		ДобавленныеЭлементы = Новый Структура;
	Иначе
		// Удаление ранее добавленных элементов.
		Для каждого ОписаниеЭлемента Из ДобавленныеЭлементы Цикл
			Элементы.Удалить(Элементы[ОписаниеЭлемента.Ключ]);
		КонецЦикла;
		ДобавленныеЭлементы.Очистить();
	КонецЕсли;
	
	УдаляемыеРеквизиты = Новый Массив;
	Если ДобавленныеРеквизиты = Неопределено Тогда
		ДобавленныеРеквизиты = Новый Структура;
	Иначе
		// Подготовка массива удаляемых реквизитов.
		Для каждого ОписаниеРеквизита Из ДобавленныеРеквизиты Цикл
			УдаляемыеРеквизиты.Добавить("ГруппыПрав." + ОписаниеРеквизита.Ключ);
		КонецЦикла;
		ДобавленныеРеквизиты.Очистить();
	КонецЕсли;

	// Подготовка новых реквизитов формы.
	НовыеРеквизиты = Новый Массив;
	ДобавитьРеквизитыЭлементыФормы(НовыеРеквизиты);
	
	// Обновление реквизитов формы.
	ИзменитьРеквизиты(НовыеРеквизиты, УдаляемыеРеквизиты);
	
	// Добавление новых элементов формы.
	ДобавитьРеквизитыЭлементыФормы();
	
	ПрочитатьПрава();
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьПрава()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ГруппыПрав.Очистить();
	Запрос = Новый Запрос;
	
	// Чтение прав по значению доступа (флажок НаследоватьПраваРодителей).
	Запрос.УстановитьПараметр("ВидДоступа",      ВидДоступа);
	Запрос.УстановитьПараметр("ЗначениеДоступа", Параметры.СсылкаНаОбъект);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ИерархияЗначений.НаследоватьПраваРодителей
	|ИЗ
	|	РегистрСведений.ГруппыЗначенийДоступа КАК ИерархияЗначений
	|ГДЕ
	|	ИерархияЗначений.ГруппаЗначенийДоступа = &ЗначениеДоступа
	|	И ИерархияЗначений.ЗначениеДоступа = &ЗначениеДоступа";
	Выборка = Запрос.Выполнить().Выбрать();
	НаследоватьПраваРодителей = ?(Выборка.Следующий(), Выборка.НаследоватьПраваРодителей, Ложь);
	
	// Чтение прав по значению доступа (без прав, наследуемых по иерархии).
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПраваПоЗначениямДоступа.Пользователь,
	|	ПраваПоЗначениямДоступа.Право,
	|	ПраваПоЗначениямДоступа.Запрещено,
	|	ПраваПоЗначениямДоступа.РаспространяетсяВИерархии
	|ИЗ
	|	РегистрСведений.ПраваПоЗначениямДоступа КАК ПраваПоЗначениямДоступа
	|ГДЕ
	|	ПраваПоЗначениямДоступа.ЗначениеДоступа = &ЗначениеДоступа
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПраваПоЗначениямДоступа.Пользователь";
	Выборка = Запрос.Выполнить().Выбрать();
	ТекущийПользователь       = Неопределено;
	Пока Выборка.Следующий() Цикл
		Если ТекущийПользователь <> Выборка.Пользователь Тогда
			ТекущийПользователь      = Выборка.Пользователь;
			ГруппаПрав = ГруппыПрав.Добавить();
			ГруппаПрав.НаследуетсяОт             = НСтр("ru = '<не наследуется>'");
			ГруппаПрав.Пользователь              = Выборка.Пользователь;
			ГруппаПрав.Запрещено                 = Выборка.Запрещено;
			ГруппаПрав.РаспространяетсяВИерархии = Выборка.РаспространяетсяВИерархии;
		КонецЕсли;
		Если ВозможныеПрава.Свойство(Выборка.Право) Тогда
			ГруппаПрав[Выборка.Право] = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если НаследоватьПраваРодителей Тогда
		ДобавитьПраваНаследуемыеПоИерархии();
	КонецЕсли;
	
	ЗаполнитьНомераКартинокПользователей();
	
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПраваНаследуемыеПоИерархии()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЗначениеДоступа", Параметры.СсылкаНаОбъект);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПраваПоЗначениямДоступа.ЗначениеДоступа КАК ВладелецПрава,
	|	ПраваПоЗначениямДоступа.Пользователь КАК Пользователь,
	|	ПраваПоЗначениямДоступа.Право,
	|	МАКСИМУМ(ПраваПоЗначениямДоступа.Запрещено) КАК Запрещено,
	|	МАКСИМУМ(ПраваПоЗначениямДоступа.РаспространяетсяВИерархии) КАК РаспространяетсяВИерархии
	|ИЗ
	|	РегистрСведений.ПраваПоЗначениямДоступа КАК ПраваПоЗначениямДоступа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГруппыЗначенийДоступа КАК ИерархияЗначений
	|		ПО ПраваПоЗначениямДоступа.ЗначениеДоступа = ИерархияЗначений.ГруппаЗначенийДоступа
	|			И (ПраваПоЗначениямДоступа.ЗначениеДоступа <> &ЗначениеДоступа)
	|			И (ПраваПоЗначениямДоступа.РаспространяетсяВИерархии)
	|			И (ИерархияЗначений.ЗначениеДоступа = &ЗначениеДоступа)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПраваПоЗначениямДоступа.ЗначениеДоступа,
	|	ПраваПоЗначениямДоступа.Пользователь,
	|	ПраваПоЗначениямДоступа.Право
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВладелецПрава,
	|	Пользователь";
	
	Выборка = Запрос.Выполнить().Выбрать();
	ТекущийВладелецПрава = Неопределено;
	ТекущийПользователь  = Неопределено;
	
	Пока Выборка.Следующий() Цикл
		
		Если ТекущийВладелецПрава <> Выборка.ВладелецПрава
		 ИЛИ ТекущийПользователь <> Выборка.Пользователь Тогда
			
			ТекущийВладелецПрава = Выборка.ВладелецПрава;
			ТекущийПользователь  = Выборка.Пользователь;
			ГруппаПрав = ГруппыПрав.Добавить();
			ГруппаПрав.НаследуетсяОт             = Выборка.ВладелецПрава;
			ГруппаПрав.Пользователь              = Выборка.Пользователь;
			ГруппаПрав.Запрещено                 = Выборка.Запрещено;
			ГруппаПрав.РаспространяетсяВИерархии = Выборка.РаспространяетсяВИерархии;
		КонецЕсли;
		
		Если ВозможныеПрава.Свойство(Выборка.Право) Тогда
			ГруппаПрав[Выборка.Право] = Истина;
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура ЗаписатьПрава(Отказ = Ложь, РазрешеноУправлениеПравамиПослеЗаписи = Ложь, ОписаниеПредупреждения = "")
	
	Если НЕ ПроверитьЗаполнение() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ОписаниеОшибки = "";
	Если НЕ УправлениеДоступом.РазрешеноУправлениеПравамиПоЗначениямДоступа(
	    	Параметры.СсылкаНаОбъект, ОписаниеОшибки) Тогда
		
		ВызватьИсключение(ОписаниеОшибки);
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	Попытка
		// Запись флажка "Наследовать права родителей".
		НаборЗаписей = РегистрыСведений.ГруппыЗначенийДоступа.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ВидДоступа.Установить(ВидДоступа);
		НаборЗаписей.Отбор.ЗначениеДоступа.Установить(Параметры.СсылкаНаОбъект);
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() = 0 Тогда
			Запись = НаборЗаписей.Добавить();
			Запись.ВидДоступа            = ВидДоступа;
			Запись.ЗначениеДоступа       = Параметры.СсылкаНаОбъект;
			Запись.ГруппаЗначенийДоступа = Параметры.СсылкаНаОбъект;
		КонецЕсли;
		
		Для каждого Запись Из НаборЗаписей Цикл
			
			Запись.ТолькоВидДоступа = Ложь;
			Запись.СвязьСРодителем  = Запись.ГруппаЗначенийДоступа <> Запись.ЗначениеДоступа;
			
			Запись.НаследоватьПраваРодителей =
				?(Запись.СвязьСРодителем, Ложь, НаследоватьПраваРодителей);
			
			Запись.ИспользоватьПраваСсылки =
				?(Запись.СвязьСРодителем, НаследоватьПраваРодителей, Истина);
		КонецЦикла;
		
		НаборЗаписей.Записать();
		
		// Подготовка новых прав в формате регистра, исключая права, наследуемые от родителей по иерархии.
		НаборЗаписей = РегистрыСведений.ПраваПоЗначениямДоступа.СоздатьНаборЗаписей();
		
		Для каждого ГруппаПрав ИЗ ГруппыПрав Цикл
			Если ТипЗнч(ГруппаПрав.НаследуетсяОт) = Тип("Строка") Тогда
				
				Для каждого ВозможноеПраво Из ВозможныеПрава Цикл
					Если ГруппаПрав[ВозможноеПраво.Ключ] Тогда
						
						ОписанияТаблиц = ПолучитьПраваТаблицДляШаблонов(
							ТаблицаЗначенийДоступа, ВозможноеПраво.Ключ);
						
						Для каждого ОписаниеТаблицы Из ОписанияТаблиц Цикл
							
							Право = НаборЗаписей.Добавить();
							Право.ЗначениеДоступа = Параметры.СсылкаНаОбъект;
							Право.Пользователь    = ГруппаПрав.Пользователь;
							Право.Право           = ВозможноеПраво.Ключ;
							Право.Запрещено       = ГруппаПрав.Запрещено;
							Право.РаспространяетсяВИерархии = ГруппаПрав.РаспространяетсяВИерархии;
							
							// Заполнение данных для стандартных шаблонов ограничения доступа.
							Право.Таблица                   = ОписаниеТаблицы.Ключ;
							Если Право.Запрещено Тогда
								Право.ЧтениеЗапрещено     = ОписаниеТаблицы.Значение.Чтение;
								Право.ДобавлениеЗапрещено = ОписаниеТаблицы.Значение.Добавление;
								Право.ИзменениеЗапрещено  = ОписаниеТаблицы.Значение.Изменение;
								Право.УдалениеЗапрещено   = ОписаниеТаблицы.Значение.Удаление;
							Иначе
								Право.Чтение              = ОписаниеТаблицы.Значение.Чтение;
								Право.Добавление          = ОписаниеТаблицы.Значение.Добавление;
								Право.Изменение           = ОписаниеТаблицы.Значение.Изменение;
								Право.Удаление            = ОписаниеТаблицы.Значение.Удаление;
							КонецЕсли;
						КонецЦикла;
						
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
		КонецЦикла;
		
		НаборЗаписей.Отбор.ЗначениеДоступа.Установить(Параметры.СсылкаНаОбъект);
		НаборЗаписей.Записать();
		
		РазрешеноУправлениеПравамиПослеЗаписи
			= УправлениеДоступом.РазрешеноУправлениеПравамиПоЗначениямДоступа(
				Параметры.СсылкаНаОбъект,
				ОписаниеПредупреждения);
		
		Модифицированность = Ложь;
		ЗафиксироватьТранзакцию();
		
	Исключение
		ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		ОтменитьТранзакцию();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Ошибка при записи прав:'") + Символы.ПС + ПредставлениеОшибки, , , , Отказ);
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаВозможностиИзмененияПрав(Отказ, ПроверкаУдаления = Ложь)
	
	Если ТипЗнч(Элементы.ГруппыПрав.ТекущиеДанные["НаследуетсяОт"]) <> Тип("Строка") Тогда
		
		Отказ = Истина;
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Эта наследуемая настройка редактируется только в форме
			           |""Права доступа: %1 (%2)"" .'"),
			Элементы.ГруппыПрав.ТекущиеДанные["НаследуетсяОт"],
			НазваниеЗначенийДоступа);
		
		ТекстСообщения = ТекстСообщения + ?(
			ПроверкаУдаления,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = '
				           |
				           |Для удаления всех наследуемых настроек для ""%1""
				           |можно снять флажок ""Наследовать права родителей""."),
				НаименованиеНастройки),
			"");
	КонецЕсли;
	
	Если Отказ Тогда
		Предупреждение(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ВыбранТипПользователиИлиВнешниеПользователи(ВыборИПодборВнешнихПользователей)
	
	ВыборИПодборВнешнихПользователей = Ложь;
	
	Если ИспользоватьВнешнихПользователей Тогда
		
		Элемент = СписокТиповПользователей.ВыбратьЭлемент(
			"Выбор типа данных", СписокТиповПользователей[0]);
		
		Если Элемент <> Неопределено Тогда
			ВыборИПодборВнешнихПользователей =
				Элемент.Значение = Тип("СправочникСсылка.ВнешниеПользователи");
		Иначе
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ВыбратьПользователей()
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	ПараметрыФормы.Вставить("ТекущаяСтрока", ?(
		Элементы.ГруппыПрав.ТекущиеДанные = Неопределено,
		Неопределено,
		Элементы.ГруппыПрав.ТекущиеДанные.Пользователь));
	
	Если ЗначениеЗаполнено(ПараметрыФормы.ТекущаяСтрока)
	   И (    ТипЗнч(ПараметрыФормы.ТекущаяСтрока) = Тип("СправочникСсылка.Пользователи")
	      ИЛИ ТипЗнч(ПараметрыФормы.ТекущаяСтрока) = Тип("СправочникСсылка.ГруппыПользователей") ) Тогда
		
		ВыборИПодборВнешнихПользователей = Ложь;
		
	ИначеЕсли ИспользоватьВнешнихПользователей
	        И ЗначениеЗаполнено(ПараметрыФормы.ТекущаяСтрока)
	        И (    ТипЗнч(ПараметрыФормы.ТекущаяСтрока) = Тип("СправочникСсылка.ВнешниеПользователи")
	           ИЛИ ТипЗнч(ПараметрыФормы.ТекущаяСтрока) = Тип("СправочникСсылка.ГруппыВнешнихПользователей") ) Тогда
	
		ВыборИПодборВнешнихПользователей = Истина;
	Иначе
		Если НЕ ВыбранТипПользователиИлиВнешниеПользователи(ВыборИПодборВнешнихПользователей) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ВыборИПодборВнешнихПользователей Тогда
		ПараметрыФормы.Вставить("ВыборГруппВнешнихПользователей", Истина);
	Иначе
		ПараметрыФормы.Вставить("ВыборГруппПользователей", Истина);
	КонецЕсли;
	
	Если ВыборИПодборВнешнихПользователей Тогда
		
		ОткрытьФорму(
			"Справочник.ВнешниеПользователи.ФормаВыбора",
			ПараметрыФормы,
			Элементы.ГруппыПравПользователь);
	Иначе
		ОткрытьФорму(
			"Справочник.Пользователи.ФормаВыбора",
			ПараметрыФормы,
			Элементы.ГруппыПравПользователь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНомераКартинокПользователей(ИдентификаторСтроки = Неопределено)
	
	Если Элементы.Найти("ГруппыПравПользователь") = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Пользователи.ЗаполнитьНомераКартинокПользователей(
		ГруппыПрав, "Пользователь", "НомерКартинки", ИдентификаторСтроки);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СформироватьДанныеВыбораПользователя(Знач Текст,
                                             Знач ВключаяГруппы = Истина,
                                             Знач ВключаяВнешнихПользователей = Неопределено,
                                             Знач БезПользователей = Ложь) Экспорт
	
	Возврат Пользователи.СформироватьДанныеВыбораПользователя(
		Текст,
		ВключаяГруппы,
		ВключаяВнешнихПользователей,
		БезПользователей);
	
	
КонецФункции
