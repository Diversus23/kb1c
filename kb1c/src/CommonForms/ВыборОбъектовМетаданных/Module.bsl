////////////////////////////////////////////////////////////////////////////////
//                          ИСПОЛЬЗОВАНИЕ ФОРМЫ                               //
//
// Форма предназначена для выбора объектов метаданных конфигурации и передачи
// выбранных их списка в вызывающую среду.
//
// Параметры вызова:
// КоллекцииВыбираемыхОбъектовМетаданных - СписокЗначений - фактически фильтр
//				по типам объектов метаданных, которые могут быть выбраны.
//				Например:
//					ФильтрПоСсылочнымМетаданным = Новый СписокЗначений;
//					ФильтрПоСсылочнымМетаданным.Добавить("Справочники");
//					ФильтрПоСсылочнымМетаданным.Добавить("Документы");
//				Позволяет выбирать только объекты метаданных справочники и документы
// ВыбранныеОбъектыМетаданных - СписокЗначений - уже выбранные объекты метаданных.
//				В дереве метаданных такие объекты будут отмечены флажком выбора.
//				Может быть полезным для установки объектов метаданных выбора по умолчанию
//				или переустановки уже установленного списка
// РодительскиеПодсистемы - СписокЗначений - подсистемы, только подчиненные подсистемы которых
// 				будут отображаться в форме (спец. для помощника внедрения БСП). 
// ТолькоПодсистемыСКИ - булево - признак того, что в списке выбора будут только те подсистемы, 
//				которые включены в командный интерфейс (спец. для помощника внедрения БСП).
// ВыборЕдинственного - булево - признак того, что выбирается единственный объект метаданных.
//              при этом пометка нескольких будет невозможна, кроме того двойной клик по строке
//              с объектом метаданных осуществит выбор
// НачальноеЗначениеВыбора - Строка - полное имя метаданных, на котором будет спозиционирован
//              список при открытии формы
//

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ВыбранныеОбъектыМетаданных.ЗагрузитьЗначения(Параметры.ВыбранныеОбъектыМетаданных.ВыгрузитьЗначения());
	
	Если Параметры.ФильтрПоОбъектамМетаданных.Количество() > 0 Тогда
		Параметры.КоллекцииВыбираемыхОбъектовМетаданных.Очистить();
		Для Каждого ОбъектМетаданныхПолноеИмя Из Параметры.ФильтрПоОбъектамМетаданных Цикл
			ИмяБазовогоТипа = ОбщегоНазначения.ИмяБазовогоТипаПоОбъектуМетаданных(Метаданные.НайтиПоПолномуИмени(ОбъектМетаданныхПолноеИмя));
			Если Параметры.КоллекцииВыбираемыхОбъектовМетаданных.НайтиПоЗначению(ИмяБазовогоТипа) = Неопределено Тогда
				Параметры.КоллекцииВыбираемыхОбъектовМетаданных.Добавить(ИмяБазовогоТипа);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Параметры.Свойство("ТолькоПодсистемыСКИ") И Параметры.ТолькоПодсистемыСКИ Тогда
		СписокПодсистем = Метаданные.Подсистемы;
		ЗаполнитьСписокПодсистем(СписокПодсистем);
	КонецЕсли;
	
	Если Параметры.Свойство("ВыборЕдинственного", ВыборЕдинственного) И ВыборЕдинственного Тогда
		Элементы.Пометка.Видимость = Ложь;
	КонецЕсли;
	
	Если Параметры.Свойство("Заголовок") Тогда
		АвтоЗаголовок = Ложь;
		Заголовок = Параметры.Заголовок;
	КонецЕсли;
	
	Параметры.Свойство("НачальноеЗначениеВыбора", НачальноеЗначениеВыбора);
	
	ДеревоОбъектовМетаданныхЗаполнить();
	
	Если Параметры.РодительскиеПодсистемы.Количество()> 0 Тогда
		Элементы.ДеревоОбъектовМетаданных.НачальноеОтображениеДерева = НачальноеОтображениеДерева.РаскрыватьВсеУровни;
	КонецЕсли;
	
	НачальнаяПометкаКоллекций();
			
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Устанавливаем начальное значение выбора
	Если ИдентификаторТекущейСтрокиПриОткрытии > 0 Тогда
		
		Элементы.ДеревоОбъектовМетаданных.ТекущаяСтрока = ИдентификаторТекущейСтрокиПриОткрытии;
		
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

// Процедура обработчик события нажатия на поле "Пометка" дерева формы
&НаКлиенте
Процедура ПометкаПриИзменении(Элемент)

	ТекущиеДанные = ТекущийЭлемент.ТекущиеДанные;
	Если ТекущиеДанные.Пометка = 2 Тогда
		ТекущиеДанные.Пометка = 0;
	КонецЕсли;
	ПометитьВложенныеЭлементы(ТекущиеДанные);
	ПометитьЭлементыРодителей(ТекущиеДанные);

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЦЫ ФОРМЫ "ДеревоОбъектовМетаданных"

&НаКлиенте
Процедура ДеревоОбъектовМетаданныхВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	Если ВыборЕдинственного Тогда
		
		ВыбратьВыполнить();
		
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ВыбратьВыполнить()
	
	Если ВыборЕдинственного Тогда
		
		ТекДанные = Элементы.ДеревоОбъектовМетаданных.ТекущиеДанные;
		Если ТекДанные <> Неопределено
			И ТекДанные.ЭтоОбъектМетаданных Тогда
			
			ВыбранныеОбъектыМетаданных.Очистить();
			ВыбранныеОбъектыМетаданных.Добавить(ТекДанные.ПолноеИмя);
			
		Иначе
			
			Возврат;
			
		КонецЕсли;
	Иначе
		
		ВыбранныеОбъектыМетаданных.Очистить();
		
		ПолучениеДанных();
		
	КонецЕсли;
	Оповестить("ВыборОбъектовМетаданных", ВыбранныеОбъектыМетаданных, Параметры.УникальныйИдентификаторИсточник);
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьВыполнить()
	
	Закрыть();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Процедура ЗаполнитьСписокПодсистем(СписокПодсистем) 
	Для Каждого Подсистема Из СписокПодсистем Цикл
		Если Подсистема.ВключатьВКомандныйИнтерфейс Тогда
			ЭлементыПодсистемСКоманднымИнтерфейсом.Добавить(Подсистема.ПолноеИмя());
		КонецЕсли;	
		
		Если Подсистема.Подсистемы.Количество() > 0 Тогда
			ЗаполнитьСписокПодсистем(Подсистема.Подсистемы);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Процедура заполняет дерево значений объектов конфигурации.
// Если список значений "Параметры.КоллекцииВыбираемыхОбъектовМетаданных" не пуст, тогда
// дерево будет ограничено переданным списком коллекций объектов метаданных.
//  Если объекты метаданных в сформированном дереве будут найдены в списке значений
// "Параметры.ВыбранныеОбъектыМетаданных", тогда они будут помечены, как выбранные.
//
&НаСервере
Процедура ДеревоОбъектовМетаданныхЗаполнить()
	
	КоллекцииОбъектовМетаданных = Новый ТаблицаЗначений;
	КоллекцииОбъектовМетаданных.Колонки.Добавить("Имя");
	КоллекцииОбъектовМетаданных.Колонки.Добавить("Синоним");
	КоллекцииОбъектовМетаданных.Колонки.Добавить("Картинка");
	КоллекцииОбъектовМетаданных.Колонки.Добавить("КартинкаОбъекта");
	КоллекцииОбъектовМетаданных.Колонки.Добавить("ЭтоКоллекцияОбщие");
	КоллекцииОбъектовМетаданных.Колонки.Добавить("ПолноеИмя");
	КоллекцииОбъектовМетаданных.Колонки.Добавить("Родитель");
	
	КоллекцииОбъектовМетаданных_НоваяСтрока("Подсистемы",                   "Подсистемы",                     35, 36, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("ОбщиеМодули",                  "Общие модули",                   37, 38, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("ПараметрыСеанса",              "Параметры сеанса",               39, 40, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("Роли",                         "Роли",                           41, 42, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("ПланыОбмена",                  "Планы обмена",                   43, 44, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("КритерииОтбора",               "Критерии отбора",                45, 46, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("ПодпискиНаСобытия",            "Подписки на события",            47, 48, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("РегламентныеЗадания",          "Регламентные задания",           49, 50, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("ФункциональныеОпции",          "Функциональные опции",           51, 52, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("ПараметрыФункциональныхОпций", "Параметры функциональных опций", 53, 54, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("ХранилищаНастроек",            "Хранилища настроек",             55, 56, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("ОбщиеФормы",                   "Общие формы",                    57, 58, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("ОбщиеКоманды",                 "Общие команды",                  59, 60, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("ГруппыКоманд",                 "Группы команд",                  61, 62, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("Интерфейсы",                   "Интерфейсы",                     63, 64, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("ОбщиеМакеты",                  "Общие макеты",                   65, 66, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("ОбщиеКартинки",                "Общие картинки",                 67, 68, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("ПакетыXDTO",                   "XDTO-пакеты",                    69, 70, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("WebСервисы",                   "Web-сервисы",                    71, 72, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("WSСсылки",                     "WS-ссылки",                      73, 74, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("Стили",                        "Стили",                          75, 76, Истина, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("Языки",                        "Языки",                          77, 78, Истина, КоллекцииОбъектовМетаданных);
	
	КоллекцииОбъектовМетаданных_НоваяСтрока("Константы",                    "Константы",                      БиблиотекаКартинок.Константа,              БиблиотекаКартинок.Константа,                    Ложь, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("Справочники",                  "Справочники",                    БиблиотекаКартинок.Справочник,             БиблиотекаКартинок.Справочник,                   Ложь, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("Документы",                    "Документы",                      БиблиотекаКартинок.Документ,               БиблиотекаКартинок.ДокументОбъект,               Ложь, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("ЖурналыДокументов",            "Журналы документов",             БиблиотекаКартинок.ЖурналДокументов,       БиблиотекаКартинок.ЖурналДокументов,             Ложь, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("Перечисления",                 "Перечисления",                   БиблиотекаКартинок.Перечисление,           БиблиотекаКартинок.Перечисление,                 Ложь, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("Отчеты",                       "Отчеты",                         БиблиотекаКартинок.Отчет,                  БиблиотекаКартинок.Отчет,                        Ложь, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("Обработки",                    "Обработки",                      БиблиотекаКартинок.Обработка,              БиблиотекаКартинок.Обработка,                    Ложь, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("ПланыВидовХарактеристик",      "Планы видов характеристик",      БиблиотекаКартинок.ПланВидовХарактеристик, БиблиотекаКартинок.ПланВидовХарактеристикОбъект, Ложь, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("ПланыСчетов",                  "Планы счетов",                   БиблиотекаКартинок.ПланСчетов,             БиблиотекаКартинок.ПланСчетовОбъект,             Ложь, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("ПланыВидовРасчета",            "Планы видов характеристик",      БиблиотекаКартинок.ПланВидовХарактеристик, БиблиотекаКартинок.ПланВидовХарактеристикОбъект, Ложь, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("РегистрыСведений",             "Регистры сведений",              БиблиотекаКартинок.РегистрСведений,        БиблиотекаКартинок.РегистрСведений,              Ложь, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("РегистрыНакопления",           "Регистры накопления",            БиблиотекаКартинок.РегистрНакопления,      БиблиотекаКартинок.РегистрНакопления,            Ложь, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("РегистрыБухгалтерии",          "Регистры бухгалтерии",           БиблиотекаКартинок.РегистрБухгалтерии,     БиблиотекаКартинок.РегистрБухгалтерии,           Ложь, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("РегистрыРасчета",              "Регистры расчета",               БиблиотекаКартинок.РегистрРасчета,         БиблиотекаКартинок.РегистрРасчета,               Ложь, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("БизнесПроцессы",               "Бизнес-процессы",                БиблиотекаКартинок.БизнесПроцесс,          БиблиотекаКартинок.БизнесПроцессОбъект,          Ложь, КоллекцииОбъектовМетаданных);
	КоллекцииОбъектовМетаданных_НоваяСтрока("Задачи",                       "Задачи",                         БиблиотекаКартинок.Задача,                 БиблиотекаКартинок.ЗадачаОбъект,                 Ложь, КоллекцииОбъектовМетаданных);
	
	// Создание предопределенных элементов.
	ПараметрыЭлемента = ПараметрыЭлементаДереваОбъектовМетаданных();
	ПараметрыЭлемента.Имя = Метаданные.Имя;
	ПараметрыЭлемента.Синоним = Метаданные.Синоним;
	ПараметрыЭлемента.Картинка = 79;
	ПараметрыЭлемента.Родитель = ДеревоОбъектовМетаданных;
	ЭлементКонфигурация = НоваяСтрокаДерева(ПараметрыЭлемента);
	
	ПараметрыЭлемента = ПараметрыЭлементаДереваОбъектовМетаданных();
	ПараметрыЭлемента.Имя = "Общие";
	ПараметрыЭлемента.Синоним = "Общие";
	ПараметрыЭлемента.Картинка = 0;
	ПараметрыЭлемента.Родитель = ЭлементКонфигурация;
	ЭлементОбщие = НоваяСтрокаДерева(ПараметрыЭлемента);
	
	// Заполнение дерева объектов метаданных.
	Для каждого Строка ИЗ КоллекцииОбъектовМетаданных Цикл
		Если Параметры.КоллекцииВыбираемыхОбъектовМетаданных.Количество() = 0 ИЛИ
			 Параметры.КоллекцииВыбираемыхОбъектовМетаданных.НайтиПоЗначению(Строка.Имя) <> Неопределено Тогда
			 Строка.Родитель = ?(Строка.ЭтоКоллекцияОбщие, ЭлементОбщие, ЭлементКонфигурация);
			 ДобавитьЭлементДереваОбъектовМетаданных(Строка, ?(Строка.Имя = "Подсистемы", Метаданные.Подсистемы, Неопределено));
		КонецЕсли;
	КонецЦикла;
	
	Если ЭлементОбщие.ПолучитьЭлементы().Количество() = 0 Тогда
		ЭлементКонфигурация.ПолучитьЭлементы().Удалить(ЭлементОбщие);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает новую структуру параметров элемента дерева объектов метаданных.
//
// Возвращаемое значение:
//   Структура с полями:
//     Имя           - Строка - имя родительского элемента
//     Синоним       - Строка - синоним родительского элемента
//     Пометка       - Булево - начальная пометка коллекции или объекта метаданных.
//     Картинка      - Число - код картинки родительского элемента
//     КартинкаОбъекта - Число - код картинки подэлемента
//     Родитель        - ссылка на элемента дерева значений, который является корнем
//                       для добавляемого элемента
//
Функция ПараметрыЭлементаДереваОбъектовМетаданных()
	
	Возврат Новый Структура("Имя,ПолноеИмя,Синоним,Пометка,Картинка,КартинкаОбъекта,Родитель", "", "", Ложь, 0, 0, Неопределено);
	
КонецФункции

// Добавляет новую строку в дерево значений формы (дерево),
// а также заполняет полный набор строк из метаданных по переданному параметру.
//
// Если параметр Подсистемы заполнен, то вызывается рекурсивно для всех дочерних подсистем.
//
// Параметры:
//   ПараметрыЭлемента - Структура с полями:
//     Имя           - Строка - имя родительского элемента
//     Синоним       - Строка - синоним родительского элемента
//     Пометка       - Булево - начальная пометка коллекции или объекта метаданных.
//     Картинка      - Число - код картинки родительского элемента
//     КартинкаОбъекта - Число - код картинки подэлемента
//     Родитель        - ссылка на элемента дерева значений, который является корнем
//                       для добавляемого элемента
//   Подсистемы      - если заполнен, то содержит значение Метаданные.Подсистемы (коллекцию элементов)
//   Проверять       - Булево - признак проверки на принадлежность родительским подсистемам
// 
// Возвращаемое значение:
// 
//   Строка дерева объектов метаданных
//
&НаСервере
Функция ДобавитьЭлементДереваОбъектовМетаданных(ПараметрыЭлемента, Подсистемы = Неопределено, Проверять = Истина)
	
	// Проверка на наличие командного интерфейса только в листьях дерева.
	Если Подсистемы <> Неопределено  И Параметры.Свойство("ТолькоПодсистемыСКИ") 
		И Не ПустаяСтрока(ПараметрыЭлемента.ПолноеИмя) 
		И ЭлементыПодсистемСКоманднымИнтерфейсом.НайтиПоЗначению(ПараметрыЭлемента.ПолноеИмя) = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Подсистемы = Неопределено Тогда
		
		Если Метаданные[ПараметрыЭлемента.Имя].Количество() = 0 Тогда
			
			// Если нет ни одного объекта метаданных из нужной ветки. 
			// Например, нет ни одного регистра бухгалтерии,
			// то корень "Регистры бухгалтерии" добавлять не нужно.
			Возврат Неопределено;
			
		КонецЕсли;
		
		НоваяСтрока = НоваяСтрокаДерева(ПараметрыЭлемента, Подсистемы <> Неопределено И Подсистемы <> Метаданные.Подсистемы);
		
		Для каждого ЭлементКоллекцииМетаданных ИЗ Метаданные[ПараметрыЭлемента.Имя] Цикл
			
			Если Параметры.ФильтрПоОбъектамМетаданных.Количество() > 0 
				И Параметры.ФильтрПоОбъектамМетаданных.НайтиПоЗначению(ЭлементКоллекцииМетаданных.ПолноеИмя()) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ПараметрыЭлемента = ПараметрыЭлементаДереваОбъектовМетаданных();
			ПараметрыЭлемента.Имя = ЭлементКоллекцииМетаданных.Имя;
			ПараметрыЭлемента.ПолноеИмя = ЭлементКоллекцииМетаданных.ПолноеИмя();
			ПараметрыЭлемента.Синоним = ЭлементКоллекцииМетаданных.Синоним;
			ПараметрыЭлемента.КартинкаОбъекта = ПараметрыЭлемента.КартинкаОбъекта;
			ПараметрыЭлемента.Родитель = НоваяСтрока;
			НоваяСтрокаДерева(ПараметрыЭлемента, Истина);
		КонецЦикла;
						
		Возврат НоваяСтрока;
		
	КонецЕсли;
		
	Если Подсистемы.Количество() = 0 и ПараметрыЭлемента.Имя = "Подсистемы" Тогда
		// Если нет ни одной подсистемы, то корень "Подсистемы" добавлять не нужно.
		Возврат Неопределено;
	КонецЕсли;
	
	НоваяСтрока = НоваяСтрокаДерева(ПараметрыЭлемента, Подсистемы <> Неопределено И Подсистемы <> Метаданные.Подсистемы);
	
	Для каждого ЭлементКоллекцииМетаданных ИЗ Подсистемы Цикл
		
		Если Не Проверять ИЛИ Параметры.РодительскиеПодсистемы.Количество() = 0 ИЛИ
			Параметры.РодительскиеПодсистемы.НайтиПоЗначению(ЭлементКоллекцииМетаданных.Имя) <> Неопределено Тогда
	        			
			ПараметрыЭлемента = ПараметрыЭлементаДереваОбъектовМетаданных();
			ПараметрыЭлемента.Имя = ЭлементКоллекцииМетаданных.Имя;
			ПараметрыЭлемента.ПолноеИмя = ЭлементКоллекцииМетаданных.ПолноеИмя();
			ПараметрыЭлемента.Синоним = ЭлементКоллекцииМетаданных.Синоним;
			ПараметрыЭлемента.Картинка = ПараметрыЭлемента.Картинка;
			ПараметрыЭлемента.КартинкаОбъекта = ПараметрыЭлемента.КартинкаОбъекта;
			ПараметрыЭлемента.Родитель = НоваяСтрока;
			ДобавитьЭлементДереваОбъектовМетаданных(ПараметрыЭлемента, ЭлементКоллекцииМетаданных.Подсистемы, Ложь);
		КонецЕсли;
	КонецЦикла;
	
	Возврат НоваяСтрока;
	
КонецФункции

&НаСервере
Функция НоваяСтрокаДерева(ПараметрыСтроки, ЭтоОбъектМетаданных = Ложь)
	
	Коллекция = ПараметрыСтроки.Родитель.ПолучитьЭлементы();
	НоваяСтрока = Коллекция.Добавить();
	НоваяСтрока.Имя                 = ПараметрыСтроки.Имя;
	НоваяСтрока.Представление       = ?(ЗначениеЗаполнено(ПараметрыСтроки.Синоним), ПараметрыСтроки.Синоним, ПараметрыСтроки.Имя);
	НоваяСтрока.Пометка             = ?(Параметры.ВыбранныеОбъектыМетаданных.НайтиПоЗначению(ПараметрыСтроки.ПолноеИмя) = Неопределено, 0, 1);
	НоваяСтрока.Картинка            = ПараметрыСтроки.Картинка;
	НоваяСтрока.ПолноеИмя           = ПараметрыСтроки.ПолноеИмя;
	НоваяСтрока.ЭтоОбъектМетаданных = ЭтоОбъектМетаданных;
	
	Если НоваяСтрока.ЭтоОбъектМетаданных 
		И НоваяСтрока.ПолноеИмя = НачальноеЗначениеВыбора Тогда
		ИдентификаторТекущейСтрокиПриОткрытии = НоваяСтрока.ПолучитьИдентификатор();
	КонецЕсли;
	
	Возврат НоваяСтрока;
	
КонецФункции

// Добавляет новую строку в таблицу значений видов объектов метаданных
// конфигурации
//
// Параметры:
// Имя           - имя объекта метаданных или вида объекта метаданных
// Синоним       - синоним объекта метаданных
// Картинка      - картинка поставленная в соответствие объекту метаданных
//                 или виду объекта метаданных
// ЭтоКоллекцияОбщие - признак того, что текущий элемент содержит подэлементы
//
&НаСервере
Процедура КоллекцииОбъектовМетаданных_НоваяСтрока(Имя, Синоним, Картинка, КартинкаОбъекта, ЭтоКоллекцияОбщие, Таб)
	
	НоваяСтрока = Таб.Добавить();
	НоваяСтрока.Имя               = Имя;
	НоваяСтрока.Синоним           = Синоним;
	НоваяСтрока.Картинка          = Картинка;
	НоваяСтрока.КартинкаОбъекта   = КартинкаОбъекта;
	НоваяСтрока.ЭтоКоллекцияОбщие = ЭтоКоллекцияОбщие;
	
КонецПроцедуры

// Процедура рекурсивно устанавливает/снимает пометку для родителей передаваемого элемента.
//
// Параметры:
// Элемент      - ДанныеФормыКоллекцияЭлементовДерева 
//
&НаКлиенте
Процедура ПометитьЭлементыРодителей(Элемент)

	Родитель = Элемент.ПолучитьРодителя();
	
	Если Родитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Родитель.ЭтоОбъектМетаданных Тогда
	
		ЭлементыРодителя = Родитель.ПолучитьЭлементы();
		Если ЭлементыРодителя.Количество() = 0 Тогда
			Родитель.Пометка = 0;
		ИначеЕсли Элемент.Пометка = 2 Тогда
			Родитель.Пометка = 2;
		Иначе
			Родитель.Пометка = ЗначениеПометкиЭлементов(ЭлементыРодителя);
		КонецЕсли;

	КонецЕсли;
	
	ПометитьЭлементыРодителей(Родитель);

КонецПроцедуры

&НаКлиенте
Функция ЗначениеПометкиЭлементов(ЭлементыРодителя)
	
	ЕстьПомеченные    = Ложь;
	ЕстьНепомеченные = Ложь;
	
	Для каждого ЭлементРодителя Из ЭлементыРодителя Цикл
		
		Если ЭлементРодителя.Пометка = 2 ИЛИ (ЕстьПомеченные И ЕстьНепомеченные) Тогда
			ЕстьПомеченные    = Истина;
			ЕстьНепомеченные = Истина;
			Прервать;
		ИначеЕсли ЭлементРодителя.ЭтоОбъектМетаданных Тогда
			ЕстьПомеченные    = ЕстьПомеченные    ИЛИ    ЭлементРодителя.Пометка;
			ЕстьНепомеченные = ЕстьНепомеченные ИЛИ НЕ ЭлементРодителя.Пометка;
		Иначе
			ВложенныеЭлементы = ЭлементРодителя.ПолучитьЭлементы();
			Если ВложенныеЭлементы.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			ЗначениеПометкиВложенныхЭлементов = ЗначениеПометкиЭлементов(ВложенныеЭлементы);
			ЕстьПомеченные    = ЕстьПомеченные    ИЛИ    ЭлементРодителя.Пометка ИЛИ    ЗначениеПометкиВложенныхЭлементов;
			ЕстьНепомеченные = ЕстьНепомеченные ИЛИ НЕ ЭлементРодителя.Пометка ИЛИ НЕ ЗначениеПометкиВложенныхЭлементов;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ?(ЕстьПомеченные И ЕстьНепомеченные, 2, ?(ЕстьПомеченные, 1, 0));
	
КонецФункции

&НаСервере
Процедура ПометитьЭлементыРодителейНаСервере(Элемент)

	Родитель = Элемент.ПолучитьРодителя();
	
	Если Родитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Родитель.ЭтоОбъектМетаданных Тогда
	
		ЭлементыРодителя = Родитель.ПолучитьЭлементы();
		Если ЭлементыРодителя.Количество() = 0 Тогда
			Родитель.Пометка = 0;
		ИначеЕсли Элемент.Пометка = 2 Тогда
			Родитель.Пометка = 2;
		Иначе
			Родитель.Пометка = ЗначениеПометкиЭлементовНаСервере(ЭлементыРодителя);
		КонецЕсли;

	КонецЕсли;
	
	ПометитьЭлементыРодителейНаСервере(Родитель);

КонецПроцедуры

&НаСервере
Функция ЗначениеПометкиЭлементовНаСервере(ЭлементыРодителя)
	
	ЕстьПомеченные    = Ложь;
	ЕстьНепомеченные = Ложь;
	
	Для каждого ЭлементРодителя Из ЭлементыРодителя Цикл
		
		Если ЭлементРодителя.Пометка = 2 ИЛИ (ЕстьПомеченные И ЕстьНепомеченные) Тогда
			ЕстьПомеченные    = Истина;
			ЕстьНепомеченные = Истина;
			Прервать;
		ИначеЕсли ЭлементРодителя.ЭтоОбъектМетаданных Тогда
			ЕстьПомеченные    = ЕстьПомеченные    ИЛИ    ЭлементРодителя.Пометка;
			ЕстьНепомеченные = ЕстьНепомеченные ИЛИ НЕ ЭлементРодителя.Пометка;
		Иначе
			ВложенныеЭлементы = ЭлементРодителя.ПолучитьЭлементы();
			Если ВложенныеЭлементы.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			ЗначениеПометкиВложенныхЭлементов = ЗначениеПометкиЭлементовНаСервере(ВложенныеЭлементы);
			ЕстьПомеченные    = ЕстьПомеченные    ИЛИ    ЭлементРодителя.Пометка ИЛИ    ЗначениеПометкиВложенныхЭлементов;
			ЕстьНепомеченные = ЕстьНепомеченные ИЛИ НЕ ЭлементРодителя.Пометка ИЛИ НЕ ЗначениеПометкиВложенныхЭлементов;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ?(ЕстьПомеченные И ЕстьНепомеченные, 2, ?(ЕстьПомеченные, 1, 0));
	
КонецФункции


// Процедура НачальнаяПометкаКоллекций устанавливает пометку для коллекций
// объектов метаданных, которые не имеют объектов метаданных (истина) и 
// которые имеют объекты метаданных с заданной пометкой.
//
// Параметры:
// Элемент      - ДанныеФормыКоллекцияЭлементовДерева 
//
&НаСервере
Процедура НачальнаяПометкаКоллекций(Родитель = Неопределено)

	Если Родитель = Неопределено Тогда
		Родитель = ДеревоОбъектовМетаданных.ПолучитьЭлементы()[0];
	КонецЕсли;
	
	Если НЕ Родитель.ЭтоОбъектМетаданных Тогда
		
		ВложенныеЭлементы = Родитель.ПолучитьЭлементы();
	
		Если ВложенныеЭлементы.Количество() = 0 Тогда
			Родитель.Пометка = 0;
		ИначеЕсли ВложенныеЭлементы[0].ЭтоОбъектМетаданных Тогда
			ПометитьЭлементыРодителейНаСервере(ВложенныеЭлементы[0]);
		Иначе
			Для каждого ВложенныйЭлемент ИЗ ВложенныеЭлементы Цикл
				НачальнаяПометкаКоллекций(ВложенныйЭлемент);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

// Процедура рекурсивно устанавливает/снимает пометку для вложенных элементов начиная
// с передаваемого элемента.
//
// Параметры:
// Элемент      - ДанныеФормыКоллекцияЭлементовДерева 
//
&НаКлиенте
Процедура ПометитьВложенныеЭлементы(Элемент)

	ВложенныеЭлементы = Элемент.ПолучитьЭлементы();
	
	Если ВложенныеЭлементы.Количество() = 0 Тогда
		Если НЕ Элемент.ЭтоОбъектМетаданных Тогда
			Элемент.Пометка = 0;
		КонецЕсли;
	Иначе
		Для Каждого ВложенныйЭлемент ИЗ ВложенныеЭлементы Цикл
			ВложенныйЭлемент.Пометка = Элемент.Пометка;
			ПометитьВложенныеЭлементы(ВложенныйЭлемент);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Процедура для заполнения списка выбранных элементов дерева
// Рекурсивно просматривает все дерево элементов и в случае, если элемент
// выбран добавляет его ПолноеИмя в список выбранных.
//
// Родитель      - ДанныеФормыЭлементДерева
//
&НаСервере
Процедура ПолучениеДанных(Родитель = Неопределено)
	
	Родитель = ?(Родитель = Неопределено, ДеревоОбъектовМетаданных, Родитель);
	
	КоллекцияЭлементов = Родитель.ПолучитьЭлементы();
	
	Для каждого Элемент ИЗ КоллекцияЭлементов Цикл
		Если Элемент.Пометка И НЕ ПустаяСтрока(Элемент.ПолноеИмя) Тогда
			ВыбранныеОбъектыМетаданных.Добавить(Элемент.ПолноеИмя);
		КонецЕсли;
		ПолучениеДанных(Элемент);
	КонецЦикла;
	
КонецПроцедуры

