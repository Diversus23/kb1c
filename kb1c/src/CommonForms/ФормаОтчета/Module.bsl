&НаКлиенте
Перем ПараметрыОбработчика;

&НаКлиенте
Перем ПеременныеКлиента;

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Локальные переменные
	ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
	ОтчетМетаданные = ОтчетОбъект.Метаданные();
	СхемаКомпоновкиДанных = ОтчетОбъект.СхемаКомпоновкиДанных;
	
	РежимРасшифровки = (Параметры.Свойство("Расшифровка") И Параметры.Расшифровка <> Неопределено);
	РежимВариантаОтчета = (Параметры.Свойство("КлючВарианта") И Параметры.КлючВарианта <> Неопределено);
	КлючОбъекта = ОтчетМетаданные.ПолноеИмя();
	НаименованиеОтчета = СокрЛП(ОтчетМетаданные.Представление());
	ПравоВывода = ПравоДоступа("Вывод", Метаданные);
	
	// Реквизиты
	ВерсияСтандартныхФункцийОтчетов = "";
	Попытка
		ВерсияСтандартныхФункцийОтчетов = ОтчетОбъект.ВерсияСтандартныхФункцийОтчетов();
	Исключение
		// Обработка не требуется. Отчет не имеет программного интерфейса для тесной интеграции с формой отчета.
	КонецПопытки;
	
	// Параметры по умолчанию
	Если ВерсияСтандартныхФункцийОтчетов = "1" Тогда
		НастройкиОтчета = ОтчетОбъект.ПолучитьНастройкиОтчета();
	Иначе
		НастройкиОтчета = ФункцииОтчетовКлиентСервер.ПолучитьНастройкиОтчетаПоУмолчанию();
	КонецЕсли;
	
	Если НастройкиОтчета.Свойство("ВыводитьСуммуВыделенныхЯчеек") И Не НастройкиОтчета.ВыводитьСуммуВыделенныхЯчеек Тогда
		Элементы.ГруппаСумма.Видимость = Ложь;
		Элементы.ОтчетТабличныйДокумент.УстановитьДействие("ПриАктивизацииОбласти", "");
	КонецЕсли;
	
	// Параметры печати печати и сохранения положения окна.
	УстановитьКлючиФормы();
	
	// Параметры формы
	ЭтаФормаПараметры = Новый Структура(
		"КлючНазначенияИспользования, КлючПользовательскихНастроек,
		|Расшифровка, СформироватьПриОткрытии, ТолькоПросмотр,
		|ФиксированныеНастройки, ОтчетСсылка");
	ЗаполнитьЗначенияСвойств(ЭтаФормаПараметры, Параметры);
	Если НЕ ЗначениеЗаполнено(ЭтаФормаПараметры.ОтчетСсылка) Тогда
		ОтчетИнформация = ВариантыОтчетов.СформироватьИнформациюОбОтчетеПоПолномуИмени(КлючОбъекта);
		Если НЕ ЗначениеЗаполнено(ОтчетИнформация.ТекстОшибки) Тогда
			ЭтаФормаПараметры.ОтчетСсылка = ОтчетИнформация.Отчет;
		Иначе
			ЭтаФормаПараметры.ОтчетСсылка = КлючОбъекта;
		КонецЕсли;
	КонецЕсли;
	
	ЭтаФормаПараметры = Новый ФиксированнаяСтруктура(ЭтаФормаПараметры);
	
	ВариантСсылка = ВариантыОтчетов.ПолучитьСсылку(ЭтаФормаПараметры.ОтчетСсылка, КлючТекущегоВарианта);
	
	// Скрытие команд вариантов
	Если НЕ Параметры.Свойство("ВидимостьКомандВариантовОтчетов", ВидимостьКомандВариантовОтчетов) Тогда
		ВидимостьКомандВариантовОтчетов = ПравоДоступа("СохранениеДанныхПользователя", Метаданные) И ПравоДоступа("Добавление", Метаданные.Справочники.ВариантыОтчетов);
	КонецЕсли;
	
	// Регистрация элементов, команд и реквизитов формы, которые не удаляются при перезаполнении быстрых настроек
	НаборРеквизитов = ПолучитьРеквизиты();
	Для Каждого Реквизит Из НаборРеквизитов Цикл
		ПостоянныеРеквизиты.Добавить(Реквизит.Имя);
	КонецЦикла;
	
	Для Каждого Команда Из Команды Цикл
		ПостоянныеКоманды.Добавить(Команда.Имя);
	КонецЦикла;
	
	НаборЭлементов = Новый Массив;
	ДобавитьПодчиненныеЭлементы(НаборЭлементов, Элементы.БыстрыеНастройки.ПодчиненныеЭлементы, Истина);
	Для Каждого Элемент Из НаборЭлементов Цикл
		ПостоянныеЭлементы.Добавить(Элемент.Имя);
	КонецЦикла;
	
	// Скрытие кнопки выбора варианта из расшифровки.
	Если РежимРасшифровки Тогда
		Элементы.ФормаЗагрузитьВариант.Видимость = Ложь;
		Если ЗначениеЗаполнено(ОтчетНаименованиеТекущегоВарианта) Тогда
			РежимРасшифровкиПредставлениеВладельца = ОтчетНаименованиеТекущегоВарианта;
		КонецЕсли;
	КонецЕсли;
	
	// Приведение зависимых элементов формы к кондиции
	ВидимостьДоступностьКорректность();
	
	// Механизмы расширения
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.РассылкаОтчетов") Тогда
		МодульРассылкаОтчетов = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("РассылкаОтчетов");
		МодульРассылкаОтчетов.ФормаОтчетаДобавитьКоманды(ЭтаФорма, Отказ, СтандартнаяОбработка);
	КонецЕсли;
	ФормаОтчетаПереопределяемый.ПриСозданииНаСервере(ЭтаФорма, Отказ, СтандартнаяОбработка);
	
	// Если в подменю одна команда, то выпадающий список не отображается.
	Если Элементы.Отправить.ПодчиненныеЭлементы.Количество() = 1 Тогда
		Элементы.Отправить.Вид = ВидГруппыФормы.ГруппаКнопок;
		Элементы.ОтправитьПоЭлектроннойПочте.Заголовок = Элементы.Отправить.Заголовок + "...";
	КонецЕсли;
	Если Элементы.ОтправитьВсеДействия.ПодчиненныеЭлементы.Количество() = 1 Тогда
		Элементы.ОтправитьВсеДействия.Вид = ВидГруппыФормы.ГруппаКнопок;
		Элементы.ОтправитьПоЭлектроннойПочтеВсеДействия.Заголовок = Элементы.ОтправитьВсеДействия.Заголовок + "...";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Результат = Ложь;
	
	СуффиксФормыИсточника = ИсточникВыбора.ИмяФормы;
	ПозицияТочки = СтрДлина(СуффиксФормыИсточника);
	Пока Сред(СуффиксФормыИсточника, ПозицияТочки, 1) <> "." Цикл
		ПозицияТочки = ПозицияТочки - 1;
	КонецЦикла;
	СуффиксФормыИсточника = ВРег(Сред(СуффиксФормыИсточника, ПозицияТочки + 1));
	
	Если СуффиксФормыИсточника = ВРег("ФормаНастроекОтчета")
		Или СуффиксФормыИсточника = ВРег("ФормаНастроек") Тогда
		ИзмененияИзФормыВариантаОтчета = Ложь;
	ИначеЕсли СуффиксФормыИсточника = ВРег("ФормаВариантаОтчета")
		Или СуффиксФормыИсточника = ВРег("ФормаВарианта") Тогда
		ИзмененияИзФормыВариантаОтчета = Истина;
	Иначе
		ИзмененияИзФормыВариантаОтчета = Неопределено;
	КонецЕсли;
	
	Если ИзмененияИзФормыВариантаОтчета <> Неопределено Тогда
		БыстрыеНастройкиЗагрузитьСхемуИОчиститьФорму(ВыбранноеЗначение, ИзмененияИзФормыВариантаОтчета);
		БыстрыеНастройкиЗаполнить();
		
		Результат = Истина;
	КонецЕсли;
	
	// Механизмы расширения
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.РассылкаОтчетов") Тогда
		МодульРассылкаОтчетовКлиент = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("РассылкаОтчетовКлиент");
		МодульРассылкаОтчетовКлиент.ФормаОтчетаОбработкаВыбора(ЭтаФорма, ВыбранноеЗначение, ИсточникВыбора, Результат);
	КонецЕсли;
	ФормаОтчетаКлиентПереопределяемый.ОбработкаВыбора(ЭтаФорма, ВыбранноеЗначение, ИсточникВыбора, Результат);
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеВариантаНаСервере(НовыеНастройкиКД)
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	// Вызов переопределяемого модуля
	ФормаОтчетаПереопределяемый.ПередЗагрузкойВариантаНаСервере(ЭтаФорма, НовыеНастройкиКД);
	
	// Загрузка фиксированных настроек для режима расшифровки.
	Если РежимРасшифровки Тогда
		Если Параметры <> Неопределено И Параметры.Свойство("Расшифровка") Тогда
			Отчет.КомпоновщикНастроек.ЗагрузитьФиксированныеНастройки(Параметры.Расшифровка.ПрименяемыеНастройки);
			Отчет.КомпоновщикНастроек.ФиксированныеНастройки.ДополнительныеСвойства.Вставить("РежимРасшифровки", Истина);
		КонецЕсли;
	КонецЕсли;
	
	// Параметры печати печати и сохранения положения окна.
	УстановитьКлючиФормы();
	
	// Заполнение панели быстрых настроек
	РежимВариантаОтчета = Истина;
	ВариантСсылка = ВариантыОтчетов.ПолучитьСсылку(ЭтаФормаПараметры.ОтчетСсылка, КлючТекущегоВарианта);
	БыстрыеНастройкиЗагрузитьСхемуИОчиститьФорму(НовыеНастройкиКД, Неопределено);
	БыстрыеНастройкиЗаполнить();
	
	// Вызов переопределяемого модуля
	ФормаОтчетаПереопределяемый.ПриЗагрузкеВариантаНаСервере(ЭтаФорма, НовыеНастройкиКД);
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииВариантаНаСервере(Настройки)
	
	// Заголовок
	ВидимостьДоступностьКорректность("ВариантОтчета");
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеПользовательскихНастроекНаСервере(НовыеПользовательскиеНастройкиКД)
	// Вызов переопределяемого модуля
	ФормаОтчетаПереопределяемый.ПередЗагрузкойПользовательскихНастроекНаСервере(ЭтаФорма, НовыеПользовательскиеНастройкиКД);
	
	Если РежимВариантаОтчета Тогда
		БыстрыеНастройкиЗагрузитьСхемуИОчиститьФорму(НовыеПользовательскиеНастройкиКД, Неопределено);
		БыстрыеНастройкиЗаполнить();
	КонецЕсли;
	
	// Вызов переопределяемого модуля
	ФормаОтчетаПереопределяемый.ПриЗагрузкеПользовательскихНастроекНаСервере(ЭтаФорма, НовыеПользовательскиеНастройкиКД);
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	Если ФоновоеЗаданиеИдентификатор <> Неопределено Тогда
		ФоновоеЗаданиеОтменить(ФоновоеЗаданиеИдентификатор);
		ФоновоеЗаданиеИдентификатор = Неопределено;
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

////////////////////////////////////////////////////////////////////////////////
// Табличный документ

&НаКлиенте
Процедура ОтчетТабличныйДокументОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	ФормаОтчетаКлиентПереопределяемый.ОбработкаРасшифровки(ЭтаФорма, Элемент, Расшифровка, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ОтчетТабличныйДокументОбработкаДополнительнойРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	ФормаОтчетаКлиентПереопределяемый.ОбработкаДополнительнойРасшифровки(ЭтаФорма, Элемент, Расшифровка, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ОтчетТабличныйДокументПриАктивизацииОбласти(Элемент)
	Если НастройкиОтчета.ВыводитьСуммуВыделенныхЯчеек Тогда
		ИнтервалОжидания = ?(ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая, 1, 0.2);
		ПодключитьОбработчикОжидания("Подключаемый_РассчитатьСуммуЯчеек", ИнтервалОжидания, Истина);
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Подключаемые

&НаКлиенте
Процедура Подключаемый_ФлажокИспользование_ПриИзменении(Элемент)
	ИдентификаторЭлемента = Прав(Элемент.Имя, 32);
	
	ПользовательскаяНастройкаКД = НайтиПользовательскуюНастройкуЭлемента(ИдентификаторЭлемента);
	ПользовательскаяНастройкаКД.Использование = ЭтаФорма[Элемент.Имя];
	
	ВсеСвязиВедущего = БыстрыйПоискОтключаемыхСвязей.Получить(ИдентификаторЭлемента);
	Если ВсеСвязиВедущего <> Неопределено Тогда
		Если ТипЗнч(ПользовательскаяНастройкаКД) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
			Значение = ПользовательскаяНастройкаКД.Значение;
		Иначе
			Значение = ПользовательскаяНастройкаКД.ПравоеЗначение;
		КонецЕсли;
		ОбновитьСвязиВедущегоСПодчиненными(ИдентификаторЭлемента, Значение, ПользовательскаяНастройкаКД.Использование, ВсеСвязиВедущего, Ложь);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолеВвода_ПриИзменении(Элемент)
	ЗначениеИмя = Элемент.Имя;
	ИдентификаторЭлемента  = Прав(ЗначениеИмя, 32);
	ШаблонГенерацииПрефикс = Лев(ЗначениеИмя, Найти(ЗначениеИмя, "_Значение_")-1);
	
	ИспользованиеИмя = ШаблонГенерацииПрефикс + "_Использование_" + ИдентификаторЭлемента;
	Значение = ЭтаФорма[ЗначениеИмя];
	
	ПользовательскаяНастройкаКД = НайтиПользовательскуюНастройкуЭлемента(ИдентификаторЭлемента);
	Если ТипЗнч(ПользовательскаяНастройкаКД) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
		ПользовательскаяНастройкаКД.Значение = Значение;
	Иначе
		ПользовательскаяНастройкаКД.ПравоеЗначение = Значение;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Значение) И Не ПользовательскаяНастройкаКД.Использование Тогда
		ПользовательскаяНастройкаКД.Использование = Истина;
		Если Элементы.Найти(ИспользованиеИмя) <> Неопределено Тогда
			ЭтаФорма[ИспользованиеИмя] = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ПользовательскаяНастройкаКД.Использование Тогда
		// Включение связей когда был включен флажок "Использование".
		// Когда связи включены - очистка значений при изменении значения.
		ВсеСвязиВедущего = БыстрыйПоискОтключаемыхСвязей.Получить(ИдентификаторЭлемента);
		Если ВсеСвязиВедущего <> Неопределено Тогда
			ОбновитьСвязиВедущегоСПодчиненными(ИдентификаторЭлемента, Значение, ПользовательскаяНастройкаКД.Использование, ВсеСвязиВедущего, Истина);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ТаблицаПорядка_Выбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ИмяКолонки = Поле.Имя;
	Если Лев(ИмяКолонки, 39) = "ПорядокКомпоновкиДанных_КолонкаПорядок_" Тогда // Изменение порядка.
		
		СтандартнаяОбработка = Ложь;
		
		ИзменитьНаправлениеСортировкиТаблицы(ИмяКолонки, Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ТаблицаПорядка_КолонкаИспользование_ПриИзменении(Элемент)
	
	КолонкаИспользованиеИмя = Элемент.Имя;
	
	ТаблицаИмя = СтрЗаменить(КолонкаИспользованиеИмя, "_КолонкаИспользование_", "_Таблица_");
	СтрокаТаблицы = Элементы[ТаблицаИмя].ТекущиеДанные;
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПользовательскаяНастройкаКД = НайтиПользовательскуюНастройкуЭлемента(КолонкаИспользованиеИмя);
	
	// Отражение изменений флажка элемента таблицы в соответствующей пользовательской настройке.
	Если ТипЗнч(ПользовательскаяНастройкаКД) = Тип("СтруктураНастроекКомпоновкиДанных") Тогда
		ИндексСтрокиТаблицы = ЭтаФорма[ТаблицаИмя].Индекс(СтрокаТаблицы);
		ПолеГруппировки = ПользовательскаяНастройкаКД.Структура.Получить(ИндексСтрокиТаблицы);
		ПолеГруппировки.Использование = СтрокаТаблицы.Использование;
		ПолеГруппировки.Состояние     = СостояниеЭлементаНастройкиКомпоновкиДанных[?(СтрокаТаблицы.Использование, "Включен", "Отключен")];
	Иначе //ВыбранныеПоляКомпоновкиДанных, ПорядокКомпоновкиДанных
		СтрокаПользовательскойНастройки = ФункцииОтчетовКлиентСервер.НайтиВложеннуюПользовательскуюНастройку(ПользовательскаяНастройкаКД, СтрокаТаблицы.Идентификатор);
		Если СтрокаПользовательскойНастройки <> Неопределено Тогда
			СтрокаПользовательскойНастройки.Использование = СтрокаТаблицы.Использование;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Подключаемые - Стандартный период

&НаКлиенте
Процедура Подключаемый_СтандартныйПериод_Вид_ПриИзменении(Элемент)
	
	ВидПериодаИмя = Элемент.Имя;
	ИдентификаторЭлемента  = Прав(ВидПериодаИмя, 32);
	ШаблонГенерацииПрефикс = Лев(ВидПериодаИмя, Найти(ВидПериодаИмя, "_Вид_")-1);
	
	СтраницыИмя            = ШаблонГенерацииПрефикс + "_Страницы_"      + ИдентификаторЭлемента;
	ИспользованиеИмя       = ШаблонГенерацииПрефикс + "_Использование_" + ИдентификаторЭлемента;
	ПериодЗначениеИмя      = ШаблонГенерацииПрефикс + "_Значение_"      + ИдентификаторЭлемента;
	ПериодПредставлениеИмя = ШаблонГенерацииПрефикс + "_Представление_" + ИдентификаторЭлемента;
	
	Значение = ЭтаФорма[ПериодЗначениеИмя];
	
	ВидПериода = ЭтаФорма[ВидПериодаИмя];
	
	Если ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.ПроизвольныйПериод") Тогда
		
		// Переключение страницы.
		СтраницаПроизвольныйИмя = ШаблонГенерацииПрефикс + "_СтраницаПроизвольный_" + ИдентификаторЭлемента;
		Элементы[СтраницыИмя].ТекущаяСтраница = Элементы[СтраницаПроизвольныйИмя];
		
		Значение.Вариант = ВариантСтандартногоПериода.ПроизвольныйПериод;
		
	Иначе
		
		// Переключение страницы.
		СтраницаСтандартныйИмя = ШаблонГенерацииПрефикс + "_СтраницаСтандартный_" + ИдентификаторЭлемента;
		Элементы[СтраницыИмя].ТекущаяСтраница = Элементы[СтраницаСтандартныйИмя];
		
		// Приведение значения периода в соответствие с выбранным видом.
		НачалоПериода = НачалоДня(Значение.ДатаНачала);
		Если НЕ ЗначениеЗаполнено(НачалоПериода) Тогда
			НачалоПериода = НачалоДня(ОбщегоНазначенияКлиент.ДатаСеанса());
		КонецЕсли;
		НачалоПериода = ФункцииОтчетовКлиентСервер.НачалоПериодаОтчета(ВидПериода, НачалоПериода);
		КонецПериода  = ФункцииОтчетовКлиентСервер.КонецПериодаОтчета(ВидПериода, НачалоПериода);
		
		Значение.ДатаНачала    = НачалоПериода;
		Значение.ДатаОкончания = КонецПериода;
		
	КонецЕсли;
	
	Представление = ФункцииОтчетовКлиентСервер.ПредставлениеСтандартногоПериода(Значение, ВидПериода);
	ЭтаФорма[ПериодПредставлениеИмя] = Представление;
	ЭтаФорма[ПериодЗначениеИмя]      = Значение;
	
	ПользовательскаяНастройкаКД = НайтиПользовательскуюНастройкуЭлемента(ИдентификаторЭлемента);
	Если ШаблонГенерацииПрефикс = "Параметр" Тогда
		ПользовательскаяНастройкаКД.Значение = Значение;
	Иначе
		ПользовательскаяНастройкаКД.ПравоеЗначение = Значение;
	КонецЕсли;
	
	Если Элементы.Найти(ИспользованиеИмя) <> Неопределено Тогда
		ЭтаФорма[ИспользованиеИмя] = Истина;
		ПользовательскаяНастройкаКД.Использование = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СтандартныйПериод_Значение_НачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	// Формирование сведений по элементу.
	ПериодПредставлениеИмя = Элемент.Имя;
	ИдентификаторЭлемента  = Прав(ПериодПредставлениеИмя, 32);
	ШаблонГенерацииПрефикс = Лев(ПериодПредставлениеИмя, Найти(ПериодПредставлениеИмя, "_Представление_")-1);
	
	ПериодЗначениеИмя = ШаблонГенерацииПрефикс + "_Значение_"      + ИдентификаторЭлемента;
	ВидПериодаИмя     = ШаблонГенерацииПрефикс + "_Вид_"       + ИдентификаторЭлемента;
	ИспользованиеИмя  = ШаблонГенерацииПрефикс + "_Использование_" + ИдентификаторЭлемента;
	
	Значение   = ЭтаФорма[ПериодЗначениеИмя];
	ВидПериода = ЭтаФорма[ВидПериодаИмя];
	
	НачалоПериода = Значение.ДатаНачала;
	Если НачалоПериода = '00010101' тогда
		НачалоПериода = ФункцииОтчетовКлиентСервер.НачалоПериодаОтчета(ВидПериода, ОбщегоНазначенияКлиент.ДатаСеанса());
	КонецЕсли;
	
	// Выбор периода из выпадающего списка.
	РезультатВыбора = ВыбратьПериодИзВыпадающегоСписка(Элемент, ВидПериода, НачалоПериода, Значение.Вариант, Неопределено);
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Запись результата выбора в данные формы и пользовательские настройки КД.
	Если ТипЗнч(РезультатВыбора.Значение) = Тип("ВариантСтандартногоПериода") Тогда
		ЭтаФорма[ПериодПредставлениеИмя] = ?(ПустаяСтрока(РезультатВыбора.Представление), Строка(РезультатВыбора.Значение), РезультатВыбора.Представление);
		Значение.Вариант = РезультатВыбора.Значение;
	Иначе
		НачалоПериода = ФункцииОтчетовКлиентСервер.НачалоПериодаОтчета(ВидПериода, РезультатВыбора.Значение);
		КонецПериода  = ФункцииОтчетовКлиентСервер.КонецПериодаОтчета(ВидПериода, РезультатВыбора.Значение);
		
		ЭтаФорма[ПериодПредставлениеИмя] = РезультатВыбора.Представление;
		
		Значение.Вариант = ВариантСтандартногоПериода.ПроизвольныйПериод;
		Значение.ДатаНачала    = НачалоПериода;
		Значение.ДатаОкончания = КонецПериода;
	КонецЕсли;
	
	ЭтаФорма[ПериодЗначениеИмя] = Значение;
	
	ПользовательскаяНастройкаКД = НайтиПользовательскуюНастройкуЭлемента(ИдентификаторЭлемента);
	Если ШаблонГенерацииПрефикс = "Параметр" Тогда
		ПользовательскаяНастройкаКД.Значение = Значение;
	Иначе
		ПользовательскаяНастройкаКД.ПравоеЗначение = Значение;
	КонецЕсли;
	
	Если Элементы.Найти(ИспользованиеИмя) <> Неопределено Тогда
		ЭтаФорма[ИспользованиеИмя] = Истина;
		ПользовательскаяНастройкаКД.Использование = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СтандартныйПериод_Значение_НачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	// Формирование сведений по элементу.
	ПериодПредставлениеИмя = Элемент.Имя;
	ИдентификаторЭлемента  = Прав(ПериодПредставлениеИмя, 32);
	ШаблонГенерацииПрефикс = Лев(ПериодПредставлениеИмя, Найти(ПериодПредставлениеИмя, "_Представление_")-1);
	
	ПериодЗначениеИмя = ШаблонГенерацииПрефикс + "_Значение_" + ИдентификаторЭлемента;
	ВидПериодаИмя     = ШаблонГенерацииПрефикс + "_Вид_"      + ИдентификаторЭлемента;
	
	Значение   = ЭтаФорма[ПериодЗначениеИмя];
	ВидПериода = ЭтаФорма[ВидПериодаИмя];
	МинимальнаяПериодичность = Элементы[ВидПериодаИмя].СписокВыбора[0].Значение;
	
	// Выбор периода из отдельной формы.
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("НачалоПериода",     Значение.ДатаНачала);
	ПараметрыФормы.Вставить("КонецПериода",      Значение.ДатаОкончания);
	ПараметрыФормы.Вставить("МинимальныйПериод", МинимальнаяПериодичность);
	ПараметрыФормы.Вставить("ВидПериода",        ВидПериода);
	ПараметрыФормы.Вставить("ИмяЭлемента",       ПериодПредставлениеИмя);
	ПараметрыФормы.Вставить("РежимВыбора",       Истина);
	
	ОткрытьФорму("ОбщаяФорма.ВыборПроизвольногоПериода", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СтандартныйПериод_Значение_ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	// Формирование сведений по элементу.
	ПериодПредставлениеИмя = Элемент.Имя;
	ИдентификаторЭлемента  = Прав(ПериодПредставлениеИмя, 32);
	ШаблонГенерацииПрефикс = Лев(ПериодПредставлениеИмя, Найти(ПериодПредставлениеИмя, "_Представление_")-1);
	
	ПериодЗначениеИмя = ШаблонГенерацииПрефикс + "_Значение_" + ИдентификаторЭлемента;
	ВидПериодаИмя     = ШаблонГенерацииПрефикс + "_Вид_"      + ИдентификаторЭлемента;
	ИспользованиеИмя  = ШаблонГенерацииПрефикс + "_Использование_" + ИдентификаторЭлемента;
	
	// Запись результата выбора...
	НачалоПериода = ВыбранноеЗначение.НачалоПериода;
	КонецПериода  = ВыбранноеЗначение.КонецПериода;
	Если НачалоПериода <> '00010101' Тогда
		НачалоПериода = НачалоДня(НачалоПериода);
	КонецЕсли;
	Если КонецПериода <> '00010101' Тогда
		КонецПериода = КонецДня(КонецПериода);
	КонецЕсли;
	
	Значение = ЭтаФорма[ПериодЗначениеИмя];
	Значение.Вариант = ВариантСтандартногоПериода.ПроизвольныйПериод;
	Значение.ДатаНачала    = НачалоПериода;
	Значение.ДатаОкончания = КонецПериода;
	
	// ... в данные формы.
	ЭтаФорма[ПериодЗначениеИмя] = Значение;
	ЭтаФорма[ВидПериодаИмя]     = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.ПроизвольныйПериод");
	
	// ... в пользовательские настройки компоновки данных.
	ПользовательскаяНастройкаКД = НайтиПользовательскуюНастройкуЭлемента(ИдентификаторЭлемента);
	Если ШаблонГенерацииПрефикс = "Параметр" Тогда
		ПользовательскаяНастройкаКД.Значение = Значение;
	Иначе
		ПользовательскаяНастройкаКД.ПравоеЗначение = Значение;
	КонецЕсли;
	
	Если Элементы.Найти(ИспользованиеИмя) <> Неопределено Тогда
		ЭтаФорма[ИспользованиеИмя] = Истина;
		ПользовательскаяНастройкаКД.Использование = Истина;
	КонецЕсли;
	
	// Переключение страницы.
	Если ТипЗнч(ПеременныеКлиента) <> Тип("Структура") Тогда
		ПеременныеКлиента = Новый Структура;
	КонецЕсли;
	ПеременныеКлиента.Вставить("ИмяГруппыСтраниц",   ШаблонГенерацииПрефикс + "_Страницы_"             + ИдентификаторЭлемента);
	ПеременныеКлиента.Вставить("ИмяТекущейСтраницы", ШаблонГенерацииПрефикс + "_СтраницаПроизвольный_" + ИдентификаторЭлемента);
	ПодключитьОбработчикОжидания("Подключаемый_ПереключитьСтраницу", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СтандартныйПериод_НачалоПериода_ПриИзменении(Элемент)
	
	// Формирование сведений по элементу.
	ПериодНачалоИмя = Элемент.Имя;
	ИдентификаторЭлемента  = Прав(ПериодНачалоИмя, 32);
	ШаблонГенерацииПрефикс = Лев(ПериодНачалоИмя, Найти(ПериодНачалоИмя, "_Начало_")-1);
	ПериодЗначениеИмя = ШаблонГенерацииПрефикс + "_Значение_" + ИдентификаторЭлемента;
	ИспользованиеИмя  = ШаблонГенерацииПрефикс + "_Использование_" + ИдентификаторЭлемента;
	
	Значение = ЭтаФорма[ПериодЗначениеИмя];
	
	Если Значение.ДатаНачала <> '00010101' Тогда
		Значение.ДатаНачала = НачалоДня(Значение.ДатаНачала);
	КонецЕсли;
	
	// Запись значения в пользовательские настройки компоновки данных.
	ПользовательскаяНастройкаКД = НайтиПользовательскуюНастройкуЭлемента(ИдентификаторЭлемента);
	Если ШаблонГенерацииПрефикс = "Параметр" Тогда
		ПользовательскаяНастройкаКД.Значение = Значение;
	Иначе
		ПользовательскаяНастройкаКД.ПравоеЗначение = Значение;
	КонецЕсли;
	
	Если Значение.ДатаНачала <> '00010101' И Элементы.Найти(ИспользованиеИмя) <> Неопределено Тогда
		ЭтаФорма[ИспользованиеИмя] = Истина;
		ПользовательскаяНастройкаКД.Использование = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СтандартныйПериод_КонецПериода_ПриИзменении(Элемент)
	
	// Формирование сведений по элементу.
	ПериодОкончаниеИмя = Элемент.Имя;
	ИдентификаторЭлемента  = Прав(ПериодОкончаниеИмя, 32);
	ШаблонГенерацииПрефикс = Лев(ПериодОкончаниеИмя, Найти(ПериодОкончаниеИмя, "_Окончание_")-1);
	
	ПериодЗначениеИмя = ШаблонГенерацииПрефикс + "_Значение_" + ИдентификаторЭлемента;
	ИспользованиеИмя  = ШаблонГенерацииПрефикс + "_Использование_" + ИдентификаторЭлемента;
	
	Значение = ЭтаФорма[ПериодЗначениеИмя];
	
	Если Значение.ДатаОкончания <> '00010101' Тогда
		Значение.ДатаОкончания = КонецДня(Значение.ДатаОкончания);
	КонецЕсли;
	
	// Запись значения в пользовательские настройки компоновки данных.
	ПользовательскаяНастройкаКД = НайтиПользовательскуюНастройкуЭлемента(ИдентификаторЭлемента);
	Если ШаблонГенерацииПрефикс = "Параметр" Тогда
		ПользовательскаяНастройкаКД.Значение = Значение;
	Иначе
		ПользовательскаяНастройкаКД.ПравоеЗначение = Значение;
	КонецЕсли;
	
	Если Значение.ДатаОкончания <> '00010101' И Элементы.Найти(ИспользованиеИмя) <> Неопределено Тогда
		ЭтаФорма[ИспользованиеИмя] = Истина;
		ПользовательскаяНастройкаКД.Использование = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СтандартныйПериод_Значение_Очистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Подключаемые - Список значений с кнопкой "Подбор"

&НаКлиенте
Процедура Подключаемый_СписокСПодбором_ПриИзменении(Элемент)
	
	ПользовательскаяНастройкаКД = НайтиПользовательскуюНастройкуЭлемента(Элемент.Имя);
	Если ТипЗнч(ПользовательскаяНастройкаКД) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
		ПользовательскаяНастройкаКД.Значение = ЭтаФорма[Элемент.Имя];
	Иначе
		ПользовательскаяНастройкаКД.ПравоеЗначение = ЭтаФорма[Элемент.Имя];
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СписокСПодбором_ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	// Добавление выбранных элементов с контролем уникальности.
	СписокЗначений = ЭтаФорма[Элемент.Имя];
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Массив") Тогда
		Для Каждого ЭлементМассива Из ВыбранноеЗначение Цикл
			Если СписокЗначений.НайтиПоЗначению(ЭлементМассива) = Неопределено Тогда
				СписокЗначений.Добавить(ЭлементМассива);
			КонецЕсли;
		КонецЦикла;
	Иначе
		Если СписокЗначений.НайтиПоЗначению(ВыбранноеЗначение) = Неопределено Тогда
			СписокЗначений.Добавить(ВыбранноеЗначение);
		КонецЕсли;
	КонецЕсли;
	
	// Отражение изменений в пользовательской настройке.
	ПользовательскаяНастройкаКД = НайтиПользовательскуюНастройкуЭлемента(Элемент.Имя);
	Если ТипЗнч(ПользовательскаяНастройкаКД) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
		ПользовательскаяНастройкаКД.Значение = СписокЗначений;
	Иначе
		ПользовательскаяНастройкаКД.ПравоеЗначение = СписокЗначений;
	КонецЕсли;
	
	// Включение флажка Использование.
	ИспользованиеИмя = СтрЗаменить(Элемент.Имя, "_СписокЗначений_", "_Использование_");
	Если Элементы.Найти(ИспользованиеИмя) <> Неопределено Тогда
		ЭтаФорма[ИспользованиеИмя] = Истина;
	КонецЕсли;
	ПользовательскаяНастройкаКД.Использование = Истина;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура СкрытьПоказатьБыстрыеНастройки(Команда)
	
	СостояниеДоИзменения = Новый Структура("Видимость, ДополнительныйРежимОтображения, Картинка, Текст");
	ЗаполнитьЗначенияСвойств(СостояниеДоИзменения, Элементы.ОтчетТабличныйДокумент.ОтображениеСостояния);
	
	Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ВидимостьБыстрыхНастроек", НЕ Элементы.БыстрыеНастройки.Видимость);
	ВидимостьДоступностьКорректность("СкрытьПоказатьБыстрыеНастройки");
	
	ЗаполнитьЗначенияСвойств(Элементы.ОтчетТабличныйДокумент.ОтображениеСостояния, СостояниеДоИзменения);
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьОтчет(Команда)
	
	ПараметрыФормы = Новый Структура;
	Для Каждого КлючИЗначение Из ЭтаФормаПараметры Цикл
		ПараметрыФормы.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	ПараметрыФормы.Вставить("Вариант",                               Отчет.КомпоновщикНастроек.Настройки);
	ПараметрыФормы.Вставить("КлючВарианта",                          Строка(КлючТекущегоВарианта));
	ПараметрыФормы.Вставить("ПользовательскиеНастройки",             Отчет.КомпоновщикНастроек.ПользовательскиеНастройки);
	ПараметрыФормы.Вставить("ПредставлениеВарианта",                 Строка(ОтчетНаименованиеТекущегоВарианта));
	ПараметрыФормы.Вставить("ПредставлениеПользовательскихНастроек", "");
	
	ОткрытьФорму(КлючОбъекта + ".ФормаНастроек", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВариантОтчета(Команда)
	
	ПараметрыФормы = Новый Структура;
	Для Каждого КлючИЗначение Из ЭтаФормаПараметры Цикл
		ПараметрыФормы.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	ПараметрыФормы.Вставить("Вариант",                               Отчет.КомпоновщикНастроек.Настройки);
	ПараметрыФормы.Вставить("КлючВарианта",                          Строка(КлючТекущегоВарианта));
	ПараметрыФормы.Вставить("ПользовательскиеНастройки",             Отчет.КомпоновщикНастроек.ПользовательскиеНастройки);
	ПараметрыФормы.Вставить("ПредставлениеВарианта",                 Строка(ОтчетНаименованиеТекущегоВарианта));
	ПараметрыФормы.Вставить("ПредставлениеПользовательскихНастроек", "");
	
	ОткрытьФорму(КлючОбъекта + ".ФормаВарианта", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СброситьНастройки(Команда)
	Если ВариантМодифицирован = Истина Тогда
		Предупреждение(НСтр("ru = 'Перед сбросом пользовательских настроек необходимо сохранить вариант отчета.'"));
		Возврат;
	КонецЕсли;
	
	// Заполнение панели быстрых настроек
	БыстрыеНастройкиЗагрузитьСхемуИОчиститьФорму("СброситьНастройки", Неопределено);
	БыстрыеНастройкиЗаполнить();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПоЭлектроннойПочте(Команда)
	ОтображениеСостояния = Элементы.ОтчетТабличныйДокумент.ОтображениеСостояния;
	Если ОтображениеСостояния.Видимость = Истина
		И ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.Неактуальность Тогда
		
		ТекстВопроса = НСтр("ru = 'Отчет не сформирован. Сформировать?'");
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		
		СформироватьНепосредственно();
	КонецЕсли;
	
	ТабличныеДокументы = Новый СписокЗначений;
	ТабличныеДокументы.Добавить(ЭтаФорма.ОтчетТабличныйДокумент, ЭтаФорма.ОтчетНаименованиеТекущегоВарианта);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТабличныеДокументы", ТабличныеДокументы);
	ПараметрыФормы.Вставить("Тема", ЭтаФорма.ОтчетНаименованиеТекущегоВарианта);
	ПараметрыФормы.Вставить("Заголовок", СтрЗаменить(
			НСтр("ru = 'Отправка отчета ""%1"" по почте'"),
			"%1",
			ЭтаФорма.ОтчетНаименованиеТекущегоВарианта));
	
	ОткрытьФорму("ОбщаяФорма.ОтправкаТабличныхДокументовПоПочте", ПараметрыФормы, , );
КонецПроцедуры

&НаКлиенте
Процедура ОтчетСкомпоноватьРезультат(Команда)
	
	Если СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ИнформационнаяБазаФайловая
		ИЛИ ТипЗнч(ЭтаФормаПараметры.ОтчетСсылка) = Тип("Строка") Тогда
		
		СформироватьНепосредственно();
		
	Иначе
		
		Если ФоновоеЗаданиеЗапустить() Тогда
			ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчика);
			ПодключитьОбработчикОжидания("ФоновоеЗаданиеПроверитьНаКлиенте", 1, Истина);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВычислитьСумму(Команда)
	СуммаВыделенныхЯчеек = ВычислитьСуммуСервер(ОтчетТабличныйДокумент, ВыделенныеОбласти());
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Подключаемые

&НаКлиенте
Процедура Подключаемый_Команда(Команда)
	// Механизмы расширения
	Результат = Ложь;
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.РассылкаОтчетов") Тогда
		МодульРассылкаОтчетовКлиент = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("РассылкаОтчетовКлиент");
		МодульРассылкаОтчетовКлиент.ФормаОтчетаОбработчикКоманды(ЭтаФорма, Команда, Результат);
	КонецЕсли;
	ФормаОтчетаКлиентПереопределяемый.ОбработчикКоманды(ЭтаФорма, Команда, Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СписокСПодбором_Подбор(Команда)
	
	КнопкаПодборИмя    = Команда.Имя;
	
	ИдентификаторЭлемента  = Прав(КнопкаПодборИмя, 32);
	ШаблонГенерацииПрефикс = Лев(КнопкаПодборИмя, Найти(КнопкаПодборИмя, "_Подбор_")-1);
	
	ТаблицаИмя         = ШаблонГенерацииПрефикс + "_СписокЗначений_"   + ИдентификаторЭлемента;
	КолонкаЗначениеИмя = ШаблонГенерацииПрефикс + "_Колонка_Значение_" + ИдентификаторЭлемента;
	КоманднаяПанельИмя = ШаблонГенерацииПрефикс + "_КоманднаяПанель_"  + ИдентификаторЭлемента;
	
	ТаблицаЭлемент = Элементы[ТаблицаИмя];
	ТаблицаЗначение = ЭтаФорма[ТаблицаИмя];
	КолонкаЗначениеЭлемент = Элементы[КолонкаЗначениеИмя];
	
	// Тип выбираемого значения.
	СписокВыбора = Новый СписокЗначений;
	
	ТипОпределенВедущим = Ложь;
	Если ЗначениеЗаполнено(КолонкаЗначениеЭлемент.СвязьПоТипу.ПутьКДанным) Тогда
		ЗначениеВедущего = ЭтаФорма[КолонкаЗначениеЭлемент.СвязьПоТипу.ПутьКДанным];
		Если ЗначениеЗаполнено(ЗначениеВедущего) Тогда
			ТипВедущего = ТипЗнч(ЗначениеВедущего);
			Если ТаблицаЗначение.ТипЗначения.СодержитТип(ТипВедущего) Тогда
				ТипОпределенВедущим = Истина;
				ВыбранныйТип = ТипВедущего;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ТипОпределенВедущим Тогда
		
		ПростыеТипы = Новый Соответствие;
		ПростыеТипы.Вставить(Тип("Строка"), Истина);
		ПростыеТипы.Вставить(Тип("Дата"),   Истина);
		ПростыеТипы.Вставить(Тип("Число"),  Истина);
		
		МассивТипов = ТаблицаЗначение.ТипЗначения.Типы();
		Для Каждого Тип Из МассивТипов Цикл
			Если ПростыеТипы[Тип] = Неопределено Тогда
				СписокВыбора.Добавить(Тип, Строка(Тип));
			КонецЕсли;
		КонецЦикла;
		
		Если СписокВыбора.Количество() = 0 Тогда
			Возврат;
		ИначеЕсли СписокВыбора.Количество() = 1 Тогда
			ВыбранныйТип = СписокВыбора[0].Значение;
		Иначе
			ВыбранныйЭлемент = ВыбратьИзМеню(СписокВыбора, Элементы[КоманднаяПанельИмя]);
			Если ВыбранныйЭлемент = Неопределено Тогда
				Возврат;
			КонецЕсли;
			ВыбранныйТип = ВыбранныйЭлемент.Значение;
		КонецЕсли;
		
	КонецЕсли;
	
	// Полное имя формы выбора.
	// Свойство "ФормаВыбора" недоступно на клиенте даже для чтения,
	//   поэтому для хранения предустановленных имен форм выбора используется коллекция БыстрыйПоискИменОбъектовМетаданных.
	ПутьКФорме = БыстрыйПоискИменОбъектовМетаданных.Получить(ИдентификаторЭлемента);
	Если Не ЗначениеЗаполнено(ПутьКФорме) Тогда
		ИмяОбъектаМетаданных = БыстрыйПоискИменОбъектовМетаданных.Получить(ВыбранныйТип);
		Если КолонкаЗначениеЭлемент.ВыборГруппИЭлементов = ГруппыИЭлементы.Группы Тогда
			ПутьКФорме = ИмяОбъектаМетаданных + ".ФормаВыбораГруппы";
		Иначе
			ПутьКФорме = ИмяОбъектаМетаданных + ".ФормаВыбора";
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыФормыВыбора = Новый Структура;
	// Стандартные параметры формы.
	ПараметрыФормыВыбора.Вставить("ЗакрыватьПриВыборе",            Ложь);
	ПараметрыФормыВыбора.Вставить("ЗакрыватьПриЗакрытииВладельца", Истина);
	ПараметрыФормыВыбора.Вставить("Отбор",                         Новый Структура);
	// Стандартные параметры формы выбора (см. Расширение управляемой формы для динамического списка).
	ПараметрыФормыВыбора.Вставить("ВыборГруппИЭлементов",          ФункцииОтчетовКлиентСервер.ПривестиЗначениеКТипуИспользованиеГруппИЭлементов(КолонкаЗначениеЭлемент.ВыборГруппИЭлементов));
	ПараметрыФормыВыбора.Вставить("МножественныйВыбор",            Истина);
	ПараметрыФормыВыбора.Вставить("РежимВыбора",                   Истина);
	// Предполагаемые реквизиты.
	ПараметрыФормыВыбора.Вставить("РежимОткрытияОкна",             РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ПараметрыФормыВыбора.Вставить("РазрешитьНачалоПеретаскивания", Ложь);
	
	// Добавление фиксированных параметров выбора.
	Для Каждого ПараметрВыбора Из КолонкаЗначениеЭлемент.ПараметрыВыбора Цикл
		Если ПустаяСтрока(ПараметрВыбора.Имя) Тогда
			Продолжить;
		КонецЕсли;
		Если ЗначениеЗаполнено(ПараметрВыбора.Имя) Тогда
			Если ВРег(Лев(ПараметрВыбора.Имя, 6)) = ВРег("Отбор.") Тогда
				ПараметрыФормыВыбора.Отбор.Вставить(Сред(ПараметрВыбора.Имя, 7), ПараметрВыбора.Значение);
			Иначе
				ПараметрыФормыВыбора.Вставить(ПараметрВыбора.Имя, ПараметрВыбора.Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Добавление динамических параметров выбора (от ведущих).
	Для Каждого СвязьПараметраВыбора Из КолонкаЗначениеЭлемент.СвязиПараметровВыбора Цикл
		Если ПустаяСтрока(СвязьПараметраВыбора.Имя) Тогда
			Продолжить;
		КонецЕсли;
		ВедущийЗначение = ЭтаФорма[СвязьПараметраВыбора.ПутьКДанным];
		Если ВРег(Лев(СвязьПараметраВыбора.Имя, 6)) = ВРег("Отбор.") Тогда
			ПараметрыФормыВыбора.Отбор.Вставить(Сред(СвязьПараметраВыбора.Имя, 7), ВедущийЗначение);
		Иначе
			ПараметрыФормыВыбора.Вставить(СвязьПараметраВыбора.Имя, ВедущийЗначение);
		КонецЕсли;
	КонецЦикла;
	
	ОткрытьФорму(ПутьКФорме, ПараметрыФормыВыбора, ТаблицаЭлемент);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ТаблицаПорядка_ПереместитьВверх(Команда)
	Направление = -1;
	ТаблицаИмя = СтрЗаменить(Команда.Имя, "_Команда_ПереместитьВверх_", "_Таблица_");
	ПереместитьСтрокуТаблицы(Направление, ТаблицаИмя);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ТаблицаПорядка_ПереместитьВниз(Команда)
	Направление = 1;
	ТаблицаИмя = СтрЗаменить(Команда.Имя, "_Команда_ПереместитьВниз_", "_Таблица_");
	ПереместитьСтрокуТаблицы(Направление, ТаблицаИмя);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ТаблицаПорядка_СортироватьПоВозрастанию(Команда)
	
	// Установка направления сортировки.
	ИзменитьНаправлениеСортировкиТаблицы(Команда.Имя, НаправлениеСортировкиКомпоновкиДанных.Возр);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ТаблицаПорядка_СортироватьПоУбыванию(Команда)
	
	// Установка направления сортировки.
	ИзменитьНаправлениеСортировкиТаблицы(Команда.Имя, НаправлениеСортировкиКомпоновкиДанных.Убыв);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Клиент

&НаКлиенте
Функция ВыбратьПериодИзВыпадающегоСписка(Элемент, ВидПериода, НачалоПериода, Вариант, ИндексНачальногоЗначения)
	
	Если Вариант = Неопределено Или Вариант = ВариантСтандартногоПериода.ПроизвольныйПериод Тогда
		СписокПериодов = ФункцииОтчетовКлиентСервер.СписокФиксированныхПериодов(НачалоПериода, ВидПериода);
		СписокПериодов.Добавить("ВыборАвтоматическиВычисляемогоПериода", НСтр("ru = 'Относительный...'"));
		Если ИндексНачальногоЗначения = Неопределено Тогда
			ИндексНачальногоЗначения = СписокПериодов.НайтиПоЗначению(НачалоПериода);
		КонецЕсли;
	Иначе
		СписокПериодов = ФункцииОтчетовКлиентСервер.СписокВычисляемыхПериодов(ВидПериода);
		СписокПериодов.Добавить("ВыборФиксированногоПериода", НСтр("ru = 'Фиксированный...'"));
		Если ИндексНачальногоЗначения = Неопределено Тогда
			ИндексНачальногоЗначения = СписокПериодов.НайтиПоЗначению(Вариант);
		КонецЕсли;
	КонецЕсли;
	Если ИндексНачальногоЗначения = Неопределено Тогда
		ИндексНачальногоЗначения = СписокПериодов.Количество() - 1;
	КонецЕсли;
	
	РезультатВыбора = ВыбратьИзСписка(СписокПериодов, Элемент, ИндексНачальногоЗначения);
	Если РезультатВыбора = Неопределено Тогда
		Возврат Неопределено;
	ИначеЕсли ТипЗнч(РезультатВыбора.Значение) = Тип("ВариантСтандартногоПериода") Тогда
		Возврат РезультатВыбора;
	ИначеЕсли РезультатВыбора.Значение = "ВыборАвтоматическиВычисляемогоПериода" Тогда
		ВариантКопия = ВариантСтандартногоПериодаПоВиду(ВидПериода);
		Возврат ВыбратьПериодИзВыпадающегоСписка(Элемент, ВидПериода, НачалоПериода, ВариантКопия, Неопределено);
	ИначеЕсли РезультатВыбора.Значение = "ВыборФиксированногоПериода" Тогда
		Возврат ВыбратьПериодИзВыпадающегоСписка(Элемент, ВидПериода, НачалоПериода, Неопределено, Неопределено);
	КонецЕсли;
	
	// Листание вверх-вниз.
	Индекс = СписокПериодов.Индекс(РезультатВыбора);
	Если Индекс = 0 Или Индекс = СписокПериодов.Количество() - 2 Тогда
		Возврат ВыбратьПериодИзВыпадающегоСписка(Элемент, ВидПериода, РезультатВыбора.Значение, Вариант, Индекс);
	КонецЕсли;
	
	Возврат РезультатВыбора;
	
КонецФункции

&НаКлиенте
Функция ВариантСтандартногоПериодаПоВиду(ВидПериода)
	Если ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.День") Тогда
		Возврат ВариантСтандартногоПериода.Сегодня;
	ИначеЕсли ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Неделя") Тогда
		Возврат ВариантСтандартногоПериода.ЭтаНеделя;
	ИначеЕсли ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Декада") Тогда
		Возврат ВариантСтандартногоПериода.ЭтаДекада;
	ИначеЕсли ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Месяц") Тогда
		Возврат ВариантСтандартногоПериода.ЭтотМесяц;
	ИначеЕсли ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Квартал") Тогда
		Возврат ВариантСтандартногоПериода.ЭтотКвартал;
	ИначеЕсли ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Полугодие") Тогда
		Возврат ВариантСтандартногоПериода.ЭтоПолугодие;
	ИначеЕсли ВидПериода = ПредопределенноеЗначение("Перечисление.ДоступныеПериодыОтчета.Год") Тогда
		Возврат ВариантСтандартногоПериода.ЭтотГод;
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура ПереместитьСтрокуТаблицы(Направление, ТаблицаИмя)
	
	СтрокаТаблицы = Элементы[ТаблицаИмя].ТекущиеДанные;
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Таблица = ЭтаФорма[ТаблицаИмя];
	ИндексСтрокиТаблицы = Таблица.Индекс(СтрокаТаблицы);
	Если ИндексСтрокиТаблицы + Направление < 0 ИЛИ ИндексСтрокиТаблицы + Направление >= Таблица.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	ПользовательскаяНастройкаКД = НайтиПользовательскуюНастройкуЭлемента(ТаблицаИмя);
	СтрокаПользовательскойНастройки = ФункцииОтчетовКлиентСервер.НайтиВложеннуюПользовательскуюНастройку(ПользовательскаяНастройкаКД, СтрокаТаблицы.Идентификатор);
	
	ПользовательскаяНастройкаКД.Элементы.Сдвинуть(СтрокаПользовательскойНастройки, Направление);
	Таблица.Сдвинуть(ИндексСтрокиТаблицы, Направление);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьНаправлениеСортировкиТаблицы(ИмяЭлемента, Направление)
	
	// Формирование сведений о таблице.
	ИдентификаторЭлемента  = Прав(ИмяЭлемента, 32);
	ШаблонГенерацииПрефикс = Лев(ИмяЭлемента, Найти(ИмяЭлемента, "_")-1);
	ТаблицаИмя = ШаблонГенерацииПрефикс + "_Таблица_" + ИдентификаторЭлемента;
	
	// Получение данных.
	СтрокаТаблицы = Элементы[ТаблицаИмя].ТекущиеДанные;
	Если СтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПользовательскаяНастройкаКД = НайтиПользовательскуюНастройкуЭлемента(ИдентификаторЭлемента);
	СтрокаПользовательскойНастройки = ФункцииОтчетовКлиентСервер.НайтиВложеннуюПользовательскуюНастройку(ПользовательскаяНастройкаКД, СтрокаТаблицы.Идентификатор);
	Если СтрокаПользовательскойНастройки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Заполнение необязательных параметров.
	Если Направление = Неопределено Тогда
		Если СтрокаПользовательскойНастройки.ТипУпорядочивания = НаправлениеСортировкиКомпоновкиДанных.Возр Тогда
			Направление = НаправлениеСортировкиКомпоновкиДанных.Убыв;
		Иначе
			Направление = НаправлениеСортировкиКомпоновкиДанных.Возр;
		КонецЕсли;
	КонецЕсли;
	
	// Изменение направления сортировки.
	СтрокаПользовательскойНастройки.ТипУпорядочивания = Направление;
	СтрокаТаблицы.Направление = Направление;
	
КонецПроцедуры

&НаКлиенте
Функция НайтиПользовательскуюНастройкуЭлемента(ИмяИлиИдентификаторЭлемента)
	// Для пользовательских настроек хранятся идентификаторы компоновки данных,
	//  поскольку они не могут храниться по ссылке (происходит копирование значения).
	Если СтрДлина(ИмяИлиИдентификаторЭлемента) = 32 Тогда
		ИдентификаторЭлемента = ИмяИлиИдентификаторЭлемента;
	Иначе
		ИдентификаторЭлемента = Прав(ИмяИлиИдентификаторЭлемента, 32);
	КонецЕсли;
	ИдентификаторКД = БыстрыйПоискПользовательскихНастроек.Получить(ИдентификаторЭлемента);
	Возврат Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.ПолучитьОбъектПоИдентификатору(ИдентификаторКД);
КонецФункции

&НаКлиенте
Функция ВыполнитьКонтекстныйВызовСервера(КлючОперации, ПараметрыОперации) Экспорт // Исключение из стандартов разработки
	// Программный интерфейс для контекстного вызова сервера из клиентского общего модуля.
	
	Возврат КонтекстныйВызовСервера(КлючОперации, ПараметрыОперации);
	
КонецФункции

&НаКлиенте
Процедура ФоновоеЗаданиеПроверитьНаКлиенте()
	Если ФоновоеЗаданиеВыполнено() Тогда
		ПоказатьОповещениеПользователя(НСтр("ru = 'Отчет сформирован'"), , Заголовок);
	Иначе
		ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчика);
		ПодключитьОбработчикОжидания("ФоновоеЗаданиеПроверитьНаКлиенте", ПараметрыОбработчика.ТекущийИнтервал, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПереключитьСтраницу()
	// Подключается из Подключаемый_СтандартныйПериод_Значение_ОбработкаВыбора.
	
	Если ТипЗнч(ПеременныеКлиента) = Тип("Структура")
		И ПеременныеКлиента.Свойство("ИмяГруппыСтраниц")
		И ПеременныеКлиента.Свойство("ИмяТекущейСтраницы") Тогда
		Элементы[ПеременныеКлиента.ИмяГруппыСтраниц].ТекущаяСтраница = Элементы[ПеременныеКлиента.ИмяТекущейСтраницы];
		ПеременныеКлиента.Удалить("ИмяГруппыСтраниц");
		ПеременныеКлиента.Удалить("ИмяТекущейСтраницы");
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВычислитьСуммуСервер(Знач ОтчетТабличныйДокумент, Знач ВыделенныеОбласти)
	Сумма = РассчитатьСуммуВыделенныхЯчеек(ОтчетТабличныйДокумент, ВыделенныеОбласти);
	Возврат Формат(Сумма, "ЧН=0");
КонецФункции

&НаКлиенте
Процедура Подключаемый_РассчитатьСуммуЯчеек()
	Сумма = РассчитатьСуммуВыделенныхЯчеек(ОтчетТабличныйДокумент, Неопределено);
	Если ТипЗнч(Сумма) = Тип("Число") Тогда
		СуммаВыделенныхЯчеек = Формат(Сумма, "ЧН=0");
	Иначе
		СуммаВыделенныхЯчеек = "-";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ВыделенныеОбласти()
	Результат = Новый Массив;
	Для Каждого ВыделеннаяОбласть Из ОтчетТабличныйДокумент.ВыделенныеОбласти Цикл
		Если ТипЗнч(ВыделеннаяОбласть) <> Тип("ОбластьЯчеекТабличногоДокумента") Тогда
			Продолжить;
		КонецЕсли;
		Структура = Новый Структура("Верх, Низ, Лево, Право, ТипОбласти");
		ЗаполнитьЗначенияСвойств(Структура, ВыделеннаяОбласть);
		Результат.Добавить(Структура);
	КонецЦикла;
	Возврат Результат;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Клиент или сервер

&НаКлиентеНаСервереБезКонтекста
Функция ПривестиИдентификаторКИмени(Идентификатор)
	Возврат СтрЗаменить(Строка(Идентификатор), "-", "");
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция РассчитатьСуммуВыделенныхЯчеек(ТабличныйДокумент, ВыделенныеОбласти)
	
	#Если Клиент Тогда
		ВыделенныеОбласти = ТабличныйДокумент.ВыделенныеОбласти;
	#КонецЕсли
	
	#Если Клиент И Не ТолстыйКлиентОбычноеПриложение Тогда
		КоличествоВыделенныхОбластей = ВыделенныеОбласти.Количество();
		Если КоличествоВыделенныхОбластей = 0 Тогда
			Возврат 0;
		ИначеЕсли КоличествоВыделенныхОбластей >= 100 Тогда
			Возврат Неопределено; // Нужен вызов сервера.
		КонецЕсли;
		КоличествоВыделенныхЯчеек = 0;
	#КонецЕсли
	
	Сумма = 0;
	ПроверенныеЯчейки = Новый Соответствие;
	
	Для Каждого ВыделеннаяОбласть Из ВыделенныеОбласти Цикл
		#Если Клиент Тогда
			Если ТипЗнч(ВыделеннаяОбласть) <> Тип("ОбластьЯчеекТабличногоДокумента") Тогда
				Продолжить;
			КонецЕсли;
		#КонецЕсли
		
		ВыделеннаяОбластьВерх = ВыделеннаяОбласть.Верх;
		ВыделеннаяОбластьНиз = ВыделеннаяОбласть.Низ;
		ВыделеннаяОбластьЛево = ВыделеннаяОбласть.Лево;
		ВыделеннаяОбластьПраво = ВыделеннаяОбласть.Право;
		
		Если ВыделеннаяОбластьВерх = 0 Тогда
			ВыделеннаяОбластьВерх = 1;
		КонецЕсли;
		
		Если ВыделеннаяОбластьНиз = 0 Тогда
			ВыделеннаяОбластьНиз = ТабличныйДокумент.ВысотаТаблицы;
		КонецЕсли;
		
		Если ВыделеннаяОбластьЛево = 0 Тогда
			ВыделеннаяОбластьЛево = 1;
		КонецЕсли;
		
		Если ВыделеннаяОбластьПраво = 0 Тогда
			ВыделеннаяОбластьПраво = ТабличныйДокумент.ШиринаТаблицы;
		КонецЕсли;
		
		Если ВыделеннаяОбласть.ТипОбласти = ТипОбластиЯчеекТабличногоДокумента.Колонки Тогда
			ВыделеннаяОбластьВерх = ВыделеннаяОбласть.Низ;
			ВыделеннаяОбластьНиз = ТабличныйДокумент.ВысотаТаблицы;
		КонецЕсли;
		
		ВыделеннаяОбластьВысота = ВыделеннаяОбластьНиз   - ВыделеннаяОбластьВерх;
		ВыделеннаяОбластьШирина = ВыделеннаяОбластьПраво - ВыделеннаяОбластьЛево;
		
		#Если Клиент И Не ТолстыйКлиентОбычноеПриложение Тогда
			КоличествоВыделенныхЯчеек = КоличествоВыделенныхЯчеек + ВыделеннаяОбластьШирина * ВыделеннаяОбластьВысота;
			Если КоличествоВыделенныхЯчеек >= 1000 Тогда
				Возврат Неопределено; // Нужен вызов сервера.
			КонецЕсли;
		#КонецЕсли
		
		Для НомерКолонки = ВыделеннаяОбластьЛево По ВыделеннаяОбластьПраво Цикл
			Для НомерСтроки = ВыделеннаяОбластьВерх По ВыделеннаяОбластьНиз Цикл
				Ячейка = ТабличныйДокумент.Область(НомерСтроки, НомерКолонки, НомерСтроки, НомерКолонки);
				Если ПроверенныеЯчейки.Получить(Ячейка.Имя) = Неопределено Тогда
					ПроверенныеЯчейки.Вставить(Ячейка.Имя, Истина);
				Иначе
					Продолжить;
				КонецЕсли;
				
				Если Ячейка.Видимость = Истина Тогда
					Если Ячейка.СодержитЗначение И ТипЗнч(Ячейка.Значение) = Тип("Число") Тогда
						Сумма = Сумма + Ячейка.Значение;
					ИначеЕсли ЗначениеЗаполнено(Ячейка.Текст) Тогда
						Сумма = Сумма + СтрокаВЧисло(Ячейка.Текст);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Сумма;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СтрокаВЧисло(ИсходнаяСтрока)
	// Превращает строку в число без вызова исключений. Стандартная функция преобразования
	//   Число() строго контролирует отсутствие каких-либо символов кроме числовых.
	
	Результат = 0;
	ЗнаковПослеЗапятой = -1;
	ЗнакОтрицательный = Ложь;
	Для НомерСимвола = 1 По СтрДлина(ИсходнаяСтрока) Цикл
		КодСимвола = КодСимвола(ИсходнаяСтрока, НомерСимвола);
		Если КодСимвола = 32 Или КодСимвола = 160 Тогда // Пробел или неразрывный пробел.
			// Пропуск (действие не требуется).
		ИначеЕсли КодСимвола = 45 Тогда // Минус
			Если Результат <> 0 Тогда
				Возврат 0;
			КонецЕсли;
			ЗнакОтрицательный = Истина;
		ИначеЕсли КодСимвола = 44 Или КодСимвола = 46 Тогда // Запятая или точка.
			ЗнаковПослеЗапятой = 0; // Запуск отсчета знаков после запятой.
		ИначеЕсли КодСимвола > 47 И КодСимвола < 58 Тогда // Число.
			Если ЗнаковПослеЗапятой <> -1 Тогда
				ЗнаковПослеЗапятой = ЗнаковПослеЗапятой + 1;
			КонецЕсли;
			Число = КодСимвола - 48;
			Результат = Результат * 10 + Число;
		Иначе
			Возврат 0;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗнаковПослеЗапятой > 0 Тогда
		Результат = Результат / Pow(10, ЗнаковПослеЗапятой);
	КонецЕсли;
	Если ЗнакОтрицательный Тогда
		Результат = -Результат;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Вызов сервера

&НаСервере
Процедура ВидимостьДоступностьКорректность(Изменения = "")
	// Быстрые настройки
	Если Изменения = "" ИЛИ Изменения = "СкрытьПоказатьБыстрыеНастройки" Тогда
		Элементы.КомандыВариантовПользовательскихНастроек.Видимость = Ложь;
		Элементы.КомандыВариантовОтчета.Видимость = РежимВариантаОтчета И ВидимостьКомандВариантовОтчетов;
		Элементы.БыстрыеНастройки.Видимость = РежимВариантаОтчета И НЕ РежимРасшифровки;
		ПользовательскиеНастройкиКД = Отчет.КомпоновщикНастроек.ПользовательскиеНастройки;
		Если РежимВариантаОтчета И ПользовательскиеНастройкиКД.Элементы.Количество() > 0 Тогда
			Элементы.КомандыВариантовПользовательскихНастроек.Видимость = ВидимостьКомандВариантовОтчетов;
			Если Элементы.ГруппаСкрытьПоказатьБыстрыеНастройки.Видимость = Истина Тогда
				ВидимостьБыстрыхНастроек = Неопределено;
				ПользовательскиеНастройкиКД.ДополнительныеСвойства.Свойство("ВидимостьБыстрыхНастроек", ВидимостьБыстрыхНастроек);
				Если ВидимостьБыстрыхНастроек = Истина Тогда
					Элементы.БыстрыеНастройки.Видимость = Истина;
					Элементы.СкрытьПоказатьБыстрыеНастройки.Пометка = Истина;
					Команды.СкрытьПоказатьБыстрыеНастройки.Подсказка = НСтр("ru = 'Скрыть быстрые настройки'");
				Иначе
					Элементы.БыстрыеНастройки.Видимость = Ложь;
					Элементы.СкрытьПоказатьБыстрыеНастройки.Пометка = Ложь;
					Команды.СкрытьПоказатьБыстрыеНастройки.Подсказка = НСтр("ru = 'Показать быстрые настройки'");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Заголовок
	Если Изменения = "" ИЛИ Изменения = "ВариантОтчета" Тогда
		ОтчетНаименованиеТекущегоВарианта = СокрЛП(ОтчетНаименованиеТекущегоВарианта);
		Если ЗначениеЗаполнено(ОтчетНаименованиеТекущегоВарианта) Тогда
			Заголовок = ОтчетНаименованиеТекущегоВарианта;
		Иначе
			Заголовок = НаименованиеОтчета;
		Конецесли;
		Если РежимРасшифровки Тогда
			Заголовок = РежимРасшифровкиПредставлениеВладельца + " (" + НРег(Заголовок) + ")";
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура БыстрыеНастройкиЗагрузитьСхемуИОчиститьФорму(НовыеНастройки, ИзмененияИзФормыВариантаОтчета)
	
	Если НовыеНастройки <> Неопределено Тогда
		ОтображениеСостояния = Элементы.ОтчетТабличныйДокумент.ОтображениеСостояния;
		ОтображениеСостояния.Видимость = Истина;
		ОтображениеСостояния.Текст     = НСтр("ru = 'Отчет не сформирован. Нажмите ""Сформировать"" для получения отчета.'");
		ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.Неактуальность;
	КонецЕсли;
	
	Если ТипЗнч(НовыеНастройки) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		
		ПользовательскиеНастройкиМодифицированы = Истина;
		
		// Включение флажка "ВариантМодифицирован"...
		Если ИзмененияИзФормыВариантаОтчета = Истина Тогда
			// ... если редактировался вариант отчета.
			ВариантМодифицирован = Истина;
		ИначеЕсли ИзмененияИзФормыВариантаОтчета = Ложь И ВариантМодифицирован = Ложь Тогда
			// ... если в результате изменения пользовательских настроек так же изменился их состав.
			ПользовательскиеНастройкиКД = НовыеНастройки.ПользовательскиеНастройки;
			КоличествоНовыхНастроек = 0;
			Режимы = РежимОтображенияЭлементаНастройкиКомпоновкиДанных;
			Для Каждого ПользовательскаяНастройка Из ПользовательскиеНастройкиКД.Элементы Цикл
				Если ПользовательскаяНастройка.РежимОтображения = Режимы.Недоступный ИЛИ ПользовательскаяНастройка.РежимОтображения = Режимы.Обычный Тогда
					Продолжить;
				КонецЕсли;
				ИдентификаторСКД = ПользовательскаяНастройка.ИдентификаторПользовательскойНастройки;
				ИдентификаторЭлемента = ПривестиИдентификаторКИмени(ИдентификаторСКД);
				Если БыстрыйПоискПользовательскихНастроек.Получить(ИдентификаторЭлемента) = Неопределено Тогда
					ВариантМодифицирован = Истина;
					Прервать;
				КонецЕсли;
				КоличествоНовыхНастроек = КоличествоНовыхНастроек + 1;
			КонецЦикла;
			Если БыстрыйПоискПользовательскихНастроек.Количество() <> КоличествоНовыхНастроек Тогда
				ВариантМодифицирован = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(НовыеНастройки.Настройки);
		Отчет.КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(НовыеНастройки.ПользовательскиеНастройки);
		
	ИначеЕсли ТипЗнч(НовыеНастройки) = Тип("НастройкиКомпоновкиДанных") Тогда
		Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(НовыеНастройки);
	ИначеЕсли ТипЗнч(НовыеНастройки) = Тип("ПользовательскиеНастройкиКомпоновкиДанных") Тогда
		Отчет.КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(НовыеНастройки);
	ИначеЕсли НовыеНастройки = "СброситьНастройки" Тогда
		ОтчетОбъект = РеквизитФормыВЗначение("Отчет");
		ОтчетМетаданные = ОтчетОбъект.Метаданные();
		
		// Чтение настроек варианта
		КомпоновщикНастроекКД = Отчет.КомпоновщикНастроек;
		ВариантНастройкиКД = ОтчетОбъект.СхемаКомпоновкиДанных.ВариантыНастроек.Найти(КлючТекущегоВарианта);
		Если ВариантНастройкиКД = Неопределено Тогда
			// Из хранилища
			Если ОтчетМетаданные.ХранилищеВариантов = Неопределено Тогда
				МенеджерХранилища = ХранилищеВариантовОтчетов;
			Иначе
				МенеджерХранилища = ХранилищаНастроек[ОтчетМетаданные.ХранилищеВариантов.Имя];
			КонецЕсли;
			НастройкиКД = МенеджерХранилища.Загрузить(КлючОбъекта, КлючТекущегоВарианта);
		Иначе
			// Из метаданных СКД
			НастройкиКД = ВариантНастройкиКД.Настройки;
		КонецЕсли;
		Если НастройкиКД = Неопределено Тогда
			// По умолчанию
			НастройкиКД = ОтчетОбъект.СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
		КонецЕсли;
		
		АдресСхемыКД = ПоместитьВоВременноеХранилище(ОтчетОбъект.СхемаКомпоновкиДанных, УникальныйИдентификатор);
		КомпоновщикНастроекКД.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКД));
		КомпоновщикНастроекКД.ЗагрузитьНастройки(НастройкиКД);
		
		ПользовательскиеНастройкиМодифицированы = Истина;
	КонецЕсли;
	
	// Удаление элементов
	УдаляемыеЭлементы = Новый Массив;
	ДобавитьПодчиненныеЭлементы(УдаляемыеЭлементы, Элементы.БыстрыеНастройки.ПодчиненныеЭлементы, Истина);
	Для Каждого УдаляемыйЭлемент Из УдаляемыеЭлементы Цикл
		Элементы.Удалить(УдаляемыйЭлемент);
	КонецЦикла;
	
	// Удаление реквизитов
	УдаляемыеРеквизиты = Новый Массив;
	НаборРеквизитов = ПолучитьРеквизиты();
	Для Каждого Реквизит Из НаборРеквизитов Цикл
		Если ПостоянныеРеквизиты.НайтиПоЗначению(Реквизит.Имя) = Неопределено Тогда
			УдаляемыеРеквизиты.Добавить(Реквизит.Имя);
		КонецЕсли;
	КонецЦикла;
	ИзменитьРеквизиты(Новый Массив, УдаляемыеРеквизиты);
	
	// Удаление команд
	УдаляемыеКоманды = Новый Массив;
	Для Каждого Команда Из Команды Цикл
		Если ПостоянныеКоманды.НайтиПоЗначению(Команда.Имя) = Неопределено Тогда
			УдаляемыеКоманды.Добавить(Команда);
		КонецЕсли;
	КонецЦикла;
	Для Каждого Команда Из УдаляемыеКоманды Цикл
		Команды.Удалить(Команда);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура БыстрыеНастройкиЗаполнить()
	
	// Элементы управления и их значения.
	БыстрыеНастройкиСоздатьЭлементыУправленияИЗагрузитьЗначения();
	
	// Заголовок
	ВидимостьДоступностьКорректность();
	
	// Вызов переопределяемого модуля
	ФормаОтчетаПереопределяемый.ПослеЗаполненияПанелиБыстрыхНастроек(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Функция КонтекстныйВызовСервера(КлючОперации, ПараметрыОперации)
	РезультатВызова = Новый Структура;
	ФормаОтчетаПереопределяемый.КонтекстныйВызовСервера(ЭтаФорма, КлючОперации, ПараметрыОперации, РезультатВызова);
	Возврат РезультатВызова;
КонецФункции

&НаСервере
Процедура СформироватьНепосредственно()
	
	ДопСвойства = Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства;
	
	// Формирование отчета.
	ДопСвойства.Вставить("КлючВарианта", КлючТекущегоВарианта);
	КлючПараметровПечатиДоКомпоновки = ОтчетТабличныйДокумент.КлючПараметровПечати;
	Попытка
		СкомпоноватьРезультат(РежимКомпоновкиРезультата.Авто);
		ДопСвойства.Удалить("КлючВарианта");
	Исключение
		ДопСвойства.Удалить("КлючВарианта");
		ПоказатьОшибкиФормирования(ИнформацияОбОшибке());
		ВызватьИсключение;
	КонецПопытки;
	ОтчетТабличныйДокумент.КлючПараметровПечати = КлючПараметровПечатиДоКомпоновки;
	
	// Перезаполнение настроек.
	Перезаполнить = Ложь;
	Если ДопСвойства.Свойство("ВариантМодифицирован") Тогда
		Если ДопСвойства.ВариантМодифицирован = Истина Тогда
			Перезаполнить = Истина;
			ВариантМодифицирован = Истина;
			ПользовательскиеНастройкиМодифицированы = Истина;
		КонецЕсли;
		ДопСвойства.Удалить("ВариантМодифицирован");
	КонецЕсли;
	Если ДопСвойства.Свойство("ПользовательскиеНастройкиМодифицированы") Тогда
		Если ДопСвойства.ПользовательскиеНастройкиМодифицированы = Истина Тогда
			Перезаполнить = Истина;
			ПользовательскиеНастройкиМодифицированы = Истина;
		КонецЕсли;
		ДопСвойства.Удалить("ПользовательскиеНастройкиМодифицированы");
	КонецЕсли;
	Если Перезаполнить Тогда
		БыстрыеНастройкиЗагрузитьСхемуИОчиститьФорму(Неопределено, Неопределено);
		БыстрыеНастройкиЗаполнить();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ФоновоеЗаданиеЗапустить()
	
	ДопСвойства = Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства;
	ДопСвойства.Вставить("КлючВарианта", КлючТекущегоВарианта);
	
	// Запуск фонового задания
	ПараметрыФормированияОтчета = Новый Структура;
	ПараметрыФормированияОтчета.Вставить("ОтчетСсылка", ЭтаФормаПараметры.ОтчетСсылка);
	ПараметрыФормированияОтчета.Вставить("Настройки",                 Отчет.КомпоновщикНастроек.Настройки);
	ПараметрыФормированияОтчета.Вставить("ФиксированныеНастройки",    Отчет.КомпоновщикНастроек.ФиксированныеНастройки);
	ПараметрыФормированияОтчета.Вставить("ПользовательскиеНастройки", Отчет.КомпоновщикНастроек.ПользовательскиеНастройки);
	
	Попытка
		РезультатФоновогоЗадания = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
			УникальныйИдентификатор,
			"ВариантыОтчетов.СформироватьОтчет",
			ПараметрыФормированияОтчета,
			НСтр("ru = 'Варианты отчетов: Формирование отчета'"));
		ДопСвойства.Удалить("КлючВарианта");
	Исключение
		ДопСвойства.Удалить("КлючВарианта");
		ПоказатьОшибкиФормирования(ИнформацияОбОшибке());
		ВызватьИсключение;
	КонецПопытки;
	
	ФоновоеЗаданиеИдентификатор  = РезультатФоновогоЗадания.ИдентификаторЗадания;
	ФоновоеЗаданиеАдресХранилища = РезультатФоновогоЗадания.АдресХранилища;
	
	Если РезультатФоновогоЗадания.ЗаданиеВыполнено Тогда
		ФоновоеЗаданиеЗагрузитьРезультат();
		ЗаданиеЗапущено = Ложь;
	Иначе
		ОтображениеСостояния = Элементы.ОтчетТабличныйДокумент.ОтображениеСостояния;
		ОтображениеСостояния.Видимость                      = Истина;
		ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.Неактуальность;
		ОтображениеСостояния.Картинка                       = БиблиотекаКартинок.ДлительнаяОперация48;
		ОтображениеСостояния.Текст                          = НСтр("ru = 'Отчет формируется...'");
		
		ЗаданиеЗапущено = Истина;
	КонецЕсли;
	
	Возврат ЗаданиеЗапущено;
	
КонецФункции

&НаСервере
Функция ФоновоеЗаданиеВыполнено()
	Попытка
		ЗаданиеВыполнено = ДлительныеОперации.ЗаданиеВыполнено(ФоновоеЗаданиеИдентификатор);
	Исключение
		ПоказатьОшибкиФормирования(ИнформацияОбОшибке());
		ВызватьИсключение;
	КонецПопытки;
	
	Если ЗаданиеВыполнено Тогда
		ФоновоеЗаданиеЗагрузитьРезультат();
	КонецЕсли;
	
	Возврат ЗаданиеВыполнено;
КонецФункции

&НаСервереБезКонтекста
Процедура ФоновоеЗаданиеОтменить(ФоновоеЗаданиеИдентификатор)
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ФоновоеЗаданиеИдентификатор);
КонецПроцедуры

&НаСервере
Процедура ОбновитьСвязиВедущегоСПодчиненными(ИдентификаторЭлемента, Значение, Использование, ВсеСвязиВедущего, ЗначениеИзменено)
	
	// Если ведущий используется, тогда связь регистрируется в элементе подчиненного в соответствии с выбранным типом.
	Если ВсеСвязиВедущего.Свойство("ПараметрыВыбораПодчиненныхПоТипуВедущего") Тогда
		ЗначениеТип = ТипЗнч(Значение);
		Для Каждого СтрокаСвязиОтбора Из ВсеСвязиВедущего.ПараметрыВыбораПодчиненныхПоТипуВедущего Цикл
			СвязьВключена = Использование И ЗначениеТип = СтрокаСвязиОтбора.ВедущийТип;
			ПодчиненныйЭлемент = Элементы[СтрокаСвязиОтбора.ПодчиненныйИмяЭлемента];
			УстановитьСвязьПараметровВыбора(ПодчиненныйЭлемент, СтрокаСвязиОтбора, СвязьВключена);
		КонецЦикла;
	КонецЕсли;
	
	Если ВсеСвязиВедущего.Свойство("ПараметрыВыбораПодчиненных") Тогда
		Для Каждого СтрокаСвязиОтбора Из ВсеСвязиВедущего.ПараметрыВыбораПодчиненных Цикл
			ПодчиненныйЭлемент = Элементы[СтрокаСвязиОтбора.ПодчиненныйИмяЭлемента];
			УстановитьСвязьПараметровВыбора(ПодчиненныйЭлемент, СтрокаСвязиОтбора, Использование);
			Если ЗначениеИзменено = Истина И СтрокаСвязиОтбора.Действие = РежимИзмененияСвязанногоЗначения.Очищать Тогда
				Если ТипЗнч(ЭтаФорма[СтрокаСвязиОтбора.ПодчиненныйИмяРеквизита]) = Тип("СписокЗначений") Тогда
					ЭтаФорма[СтрокаСвязиОтбора.ПодчиненныйИмяРеквизита].Очистить();
				Иначе
					ЭтаФорма[СтрокаСвязиОтбора.ПодчиненныйИмяРеквизита] = Неопределено;
				КонецЕсли;
				Если Не ПустаяСтрока(СтрокаСвязиОтбора.ПодчиненныйИмяФлажка) Тогда
					ЭтаФорма[СтрокаСвязиОтбора.ПодчиненныйИмяФлажка] = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Сервер

&НаСервере
Процедура БыстрыеНастройкиСоздатьЭлементыУправленияИЗагрузитьЗначения()
	// Кэши для быстрого поиска с клиента.
	СоответствиеПользовательскихНастроек = Новый Соответствие;
	СоответствиеИменОбъектовМетаданных   = Новый Соответствие;
	СоответствиеОтключаемыхСвязей        = Новый Соответствие;
	
	ДобавляемыеРеквизиты = Новый Массив;
	
	// Локальные переменные для установки значений и свойств после создания реквизитов.
	ДобавленныеПоляВвода = Новый Структура;
	ДобавленныеСпискиЗначений = Новый Массив;
	ДобавленныеТаблицыСФлажками = Новый Массив;
	ДобавленныеСтандартныеПериоды = Новый Массив;
	
	// Структура связей.
	Связи = СоздатьСтруктуруТаблицСвязей();
	
	ПоискИдентификаторовБыстрыхНастроекПоПолюКомпоновкиДанных = Новый Соответствие;
	ИменаОсновныхРеквизитовФормы = Новый Соответствие;
	ИменаЭлементовДляУстановкиСвязей = Новый Соответствие;
	ИменаФлажковИспользование = Новый Соответствие;
	НастройкиСВидомСравненияРавно = Новый Соответствие;
	
	КомпоновщикНастроекКД       = Отчет.КомпоновщикНастроек;
	ПользовательскиеНастройкиКД = КомпоновщикНастроекКД.ПользовательскиеНастройки;
	НастройкиКД                 = КомпоновщикНастроекКД.ПолучитьНастройки();
	
	Режимы = РежимОтображенияЭлементаНастройкиКомпоновкиДанных;
	Для Каждого ПользовательскаяНастройка Из ПользовательскиеНастройкиКД.Элементы Цикл
		Если ПользовательскаяНастройка.РежимОтображения = Режимы.Недоступный ИЛИ ПользовательскаяНастройка.РежимОтображения = Режимы.Обычный Тогда
			Продолжить;
		КонецЕсли;
		
		ИдентификаторСКД = ПользовательскаяНастройка.ИдентификаторПользовательскойНастройки;
		ИдентификаторЭлемента = ПривестиИдентификаторКИмени(ИдентификаторСКД);
		
		СоответствиеПользовательскихНастроек.Вставить(ИдентификаторЭлемента, ПользовательскиеНастройкиКД.ПолучитьИдентификаторПоОбъекту(ПользовательскаяНастройка));
		
		ОбщаяНастройка = ФункцииОтчетовКлиентСервер.ПолучитьОбъектПоПользовательскомуИдентификатору(НастройкиКД, ИдентификаторСКД);
		Если ОбщаяНастройка = Неопределено Тогда
			Продолжить;
		ИначеЕсли ПользовательскаяНастройка.РежимОтображения = Режимы.Авто И ОбщаяНастройка.РежимОтображения <> Режимы.БыстрыйДоступ Тогда
			Продолжить;
		КонецЕсли;
		ТипОбщейНастройки = ТипЗнч(ОбщаяНастройка);
		ДоступнаяНастройка = ФункцииОтчетовКлиентСервер.НайтиДоступнуюНастройку(НастройкиКД, ОбщаяНастройка);
		
		СтруктураПредставлений = Новый Структура("Представление, ПредставлениеПользовательскойНастройки", "", "");
		ЗаполнитьЗначенияСвойств(СтруктураПредставлений, ОбщаяНастройка);
		Если ЗначениеЗаполнено(СтруктураПредставлений.ПредставлениеПользовательскойНастройки) Тогда
			ЭлементЗаголовок = СтруктураПредставлений.ПредставлениеПользовательскойНастройки;
		ИначеЕсли ЗначениеЗаполнено(СтруктураПредставлений.Представление) Тогда
			ЭлементЗаголовок = СтруктураПредставлений.Представление;
		ИначеЕсли ДоступнаяНастройка <> Неопределено И ЗначениеЗаполнено(ДоступнаяНастройка.Заголовок) Тогда
			ЭлементЗаголовок = ДоступнаяНастройка.Заголовок;
		Иначе
			ЭлементЗаголовок = ПредставлениеПользовательскойНастройки(ПользовательскаяНастройка, ОбщаяНастройка, ТипОбщейНастройки);
		КонецЕсли;
		
		СменитьТипНаГруппуЭлементовОтбора = ЗначениеЗаполнено(СтруктураПредставлений.Представление);
		
		Если ТипОбщейНастройки = Тип("ГруппаЭлементовОтбораКомпоновкиДанных")
			ИЛИ ТипОбщейНастройки = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных")
			ИЛИ СменитьТипНаГруппуЭлементовОтбора Тогда
			
			ШаблонГенерации = Новый Структура;
			ШаблонГенерации.Вставить("Тип",     "ТолькоФлажокИспользование");
			ШаблонГенерации.Вставить("Префикс", "ГруппаОтбора");
			
		ИначеЕсли ТипОбщейНастройки = Тип("ГруппировкаКомпоновкиДанных")
			ИЛИ ТипОбщейНастройки = Тип("ТаблицаКомпоновкиДанных")
			ИЛИ ТипОбщейНастройки = Тип("ГруппировкаТаблицыКомпоновкиДанных")
			ИЛИ ТипОбщейНастройки = Тип("ДиаграммаКомпоновкиДанных")
			ИЛИ ТипОбщейНастройки = Тип("ГруппировкаДиаграммыКомпоновкиДанных") Тогда
			
			ШаблонГенерации = Новый Структура;
			ШаблонГенерации.Вставить("Тип",     "ТолькоФлажокИспользование");
			ШаблонГенерации.Вставить("Префикс", "ЭлементСтруктуры");
			
		ИначеЕсли ТипОбщейНастройки = Тип("ЭлементУсловногоОформленияКомпоновкиДанных") Тогда
			
			ШаблонГенерации = Новый Структура;
			ШаблонГенерации.Вставить("Тип",     "ТолькоФлажокИспользование");
			ШаблонГенерации.Вставить("Префикс", "УсловноеОформление");
			
		ИначеЕсли ТипОбщейНастройки = Тип("ВыбранныеПоляКомпоновкиДанных") Тогда
			
			ШаблонГенерации = Новый Структура;
			ШаблонГенерации.Вставить("Тип",      "ТаблицаПорядкаСФлажками");
			ШаблонГенерации.Вставить("Префикс",  "ВыбранныеПоляКомпоновкиДанных");
			ШаблонГенерации.Вставить("Иерархия", Истина);
			
		ИначеЕсли ТипОбщейНастройки = Тип("ПорядокКомпоновкиДанных") Тогда
			
			ШаблонГенерации = Новый Структура;
			ШаблонГенерации.Вставить("Тип",      "ТаблицаПорядкаСФлажками");
			ШаблонГенерации.Вставить("Префикс",  "ПорядокКомпоновкиДанных");
			ШаблонГенерации.Вставить("Иерархия", Ложь);
			
		ИначеЕсли ТипОбщейНастройки = Тип("СтруктураНастроекКомпоновкиДанных") Тогда
			
			ШаблонГенерации = Новый Структура;
			ШаблонГенерации.Вставить("Тип",      "ТаблицаПорядкаСФлажками");
			ШаблонГенерации.Вставить("Префикс",  "СтруктураНастроекКомпоновкиДанных");
			ШаблонГенерации.Вставить("Иерархия", Ложь);
			
		ИначеЕсли ТипОбщейНастройки = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
			
			Если ДоступнаяНастройка = Неопределено Тогда
				Продолжить; // Имя параметра изменилось или параметр был удален.
			КонецЕсли;
			
			ШаблонГенерации = Новый Структура;
			ШаблонГенерации.Вставить("Префикс", "Параметр");
			
			АнализТиповИСвязей(ИдентификаторЭлемента, ДоступнаяНастройка, ШаблонГенерации, СоответствиеИменОбъектовМетаданных, Связи); // Определение типа значения настройки.
			
			ШаблонГенерации.Вставить("ФлажокИспользование", ДоступнаяНастройка.Использование <> ИспользованиеПараметраКомпоновкиДанных.Всегда);
			Если ТипЗнч(ПользовательскаяНастройка.Значение) = Тип("СтандартныйПериод") Тогда
				ШаблонГенерации.Вставить("Тип", "СтандартныйПериод");
			ИначеЕсли ДоступнаяНастройка.ДоступенСписокЗначений Тогда
				ШаблонГенерации.Вставить("Тип", "СписокСПодбором");
				НастройкиСВидомСравненияРавно.Вставить(ИдентификаторЭлемента, Истина);
			ИначеЕсли Не ШаблонГенерации.ФлажокИспользование И ШаблонГенерации.СодержитТипБулево И ШаблонГенерации.КоличествоТипов = 1 Тогда
				ШаблонГенерации.Вставить("Тип", "ТолькоФлажокЗначения"); // Замена поля "Да/Нет" на флажок.
			Иначе
				ШаблонГенерации.Вставить("Тип", "ПолеВвода");
				НастройкиСВидомСравненияРавно.Вставить(ИдентификаторЭлемента, Истина);
			КонецЕсли;
			
			Если ТипЗнч(ДоступнаяНастройка.ДоступныеЗначения) = Тип("СписокЗначений") И ДоступнаяНастройка.ДоступныеЗначения.Количество() > 0 Тогда
				ШаблонГенерации.Вставить("ВыборИзСписка", Истина);
			Иначе
				ШаблонГенерации.Вставить("ВыборИзСписка", Ложь);
			КонецЕсли;
			
			Если Не ШаблонГенерации.ФлажокИспользование Тогда
				ПользовательскаяНастройка.Использование = Истина;
			КонецЕсли;
			
			ПолеКД = Новый ПолеКомпоновкиДанных("ПараметрыДанных." + Строка(ОбщаяНастройка.Параметр));
			ПоискИдентификаторовБыстрыхНастроекПоПолюКомпоновкиДанных.Вставить(ПолеКД, ИдентификаторЭлемента);
			
		ИначеЕсли ТипОбщейНастройки = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			
			Если ДоступнаяНастройка = Неопределено Тогда
				Продолжить; // Имя поля изменилось или поле было удалено.
			КонецЕсли;
			
			ШаблонГенерации = Новый Структура;
			ШаблонГенерации.Вставить("Префикс", "Отбор");
			ШаблонГенерации.Вставить("ФлажокИспользование", Истина);
			
			АнализТиповИСвязей(ИдентификаторЭлемента, ДоступнаяНастройка, ШаблонГенерации, СоответствиеИменОбъектовМетаданных, Связи); // Определение типа значения настройки.
			
			Если ТипЗнч(ПользовательскаяНастройка.ПравоеЗначение) = Тип("СтандартныйПериод") Тогда
				ШаблонГенерации.Вставить("Тип", "СтандартныйПериод");
			ИначеЕсли ПользовательскаяНастройка.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено
				Или ПользовательскаяНастройка.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено Тогда
				ШаблонГенерации.Вставить("Тип", "ТолькоФлажокИспользование");
				ЭлементЗаголовок = ЭлементЗаголовок + ": " + НРег(Строка(ПользовательскаяНастройка.ВидСравнения));
			ИначеЕсли ПользовательскаяНастройка.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке
				Или ПользовательскаяНастройка.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии
				Или ПользовательскаяНастройка.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке
				Или ПользовательскаяНастройка.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии Тогда
				ШаблонГенерации.Вставить("Тип", "СписокСПодбором");
				Если ПользовательскаяНастройка.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке
					Или ПользовательскаяНастройка.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии Тогда
					ЭлементЗаголовок = ЭлементЗаголовок + " (" + НСтр("ru = 'за исключением выбранных'") + ")";
				КонецЕсли;
				Если ПользовательскаяНастройка.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии
					Или ПользовательскаяНастройка.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии Тогда
					ШаблонГенерации.Вставить("ВыборГруппИЭлементов", ГруппыИЭлементы.Группы);
				Иначе
					ШаблонГенерации.Вставить("ВыборГруппИЭлементов", ГруппыИЭлементы.ГруппыИЭлементы);
				КонецЕсли;
			Иначе
				ШаблонГенерации.Вставить("Тип", "ПолеВвода");
				Если ПользовательскаяНастройка.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
					НастройкиСВидомСравненияРавно.Вставить(ИдентификаторЭлемента, Истина);
				КонецЕсли;
				Если ПользовательскаяНастройка.ВидСравнения <> ВидСравненияКомпоновкиДанных.Равно
					И ПользовательскаяНастройка.ВидСравнения <> ВидСравненияКомпоновкиДанных.Содержит Тогда
					ЭлементЗаголовок = ЭлементЗаголовок + " (" + НРег(Строка(ПользовательскаяНастройка.ВидСравнения)) + ")";
				КонецЕсли;
				Если ПользовательскаяНастройка.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии
					Или ПользовательскаяНастройка.ВидСравнения = ВидСравненияКомпоновкиДанных.НеВИерархии Тогда
					ШаблонГенерации.Вставить("ВыборГруппИЭлементов", ГруппыИЭлементы.Группы);
				КонецЕсли;
			КонецЕсли;
			
			ПоискИдентификаторовБыстрыхНастроекПоПолюКомпоновкиДанных.Вставить(ОбщаяНастройка.ЛевоеЗначение, ИдентификаторЭлемента);
			
			Если ТипЗнч(ДоступнаяНастройка.ДоступныеЗначения) = Тип("СписокЗначений") И ДоступнаяНастройка.ДоступныеЗначения.Количество() > 0 Тогда
				ШаблонГенерации.Вставить("ВыборИзСписка", Истина);
			Иначе
				ШаблонГенерации.Вставить("ВыборИзСписка", Ложь);
			КонецЕсли;
		Иначе
			
			Продолжить;
			
		КонецЕсли;
		
		////////////////////////////////////////////////////////////////////////////////
		// Генерация
		//
		Если ШаблонГенерации.Тип = "ТолькоФлажокИспользование" Или ШаблонГенерации.Тип = "ТолькоФлажокЗначения" Тогда
			
			Если ШаблонГенерации.Тип = "ТолькоФлажокИспользование" Тогда
				ФлажокИмя = ШаблонГенерации.Префикс + "_Использование_" + ИдентификаторЭлемента;
				ДействиеПриИзменении = "Подключаемый_ФлажокИспользование_ПриИзменении";
			Иначе
				ФлажокИмя = ШаблонГенерации.Префикс + "_Значение_" + ИдентификаторЭлемента;
				ДействиеПриИзменении = "Подключаемый_ПолеВвода_ПриИзменении";
			КонецЕсли;
			
			// Реквизиты.
			ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ФлажокИмя, Новый ОписаниеТипов("Булево")));
			
			// Флажок.
			ИспользованиеОтбора = Элементы.Добавить(ФлажокИмя, Тип("ПолеФормы"), Элементы.ПараметрыИОтборы);
			ИспользованиеОтбора.Вид                = ВидПоляФормы.ПолеФлажка;
			ИспользованиеОтбора.Заголовок          = ЭлементЗаголовок;
			ИспользованиеОтбора.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
			ИспользованиеОтбора.УстановитьДействие("ПриИзменении", ДействиеПриИзменении);
			
			// Значения.
			ДобавленныеПоляВвода.Вставить(ФлажокИмя, ПользовательскаяНастройка.Использование);
			
		ИначеЕсли ШаблонГенерации.Тип = "СтандартныйПериод" Тогда
			
			ГруппаИмя = ШаблонГенерации.Префикс + "_Группа_" + ИдентификаторЭлемента;
			ИспользованиеИмя       = ШаблонГенерации.Префикс + "_Использование_"    + ИдентификаторЭлемента;
			ВидПериодаИмя          = ШаблонГенерации.Префикс + "_Вид_"       + ИдентификаторЭлемента;
			ПериодЗначениеИмя      = ШаблонГенерации.Префикс + "_Значение_"  + ИдентификаторЭлемента;
			ПериодПредставлениеИмя = ШаблонГенерации.Префикс + "_Представление_"  + ИдентификаторЭлемента;
			ПериодНачалоИмя        = ШаблонГенерации.Префикс + "_Начало_"    + ИдентификаторЭлемента;
			ПериодОкончаниеИмя     = ШаблонГенерации.Префикс + "_Окончание_" + ИдентификаторЭлемента;
			СтраницыИмя             = ШаблонГенерации.Префикс + "_Страницы_"             + ИдентификаторЭлемента;
			СтраницаСтандартныйИмя  = ШаблонГенерации.Префикс + "_СтраницаСтандартный_"  + ИдентификаторЭлемента;
			СтраницаПроизвольныйИмя = ШаблонГенерации.Префикс + "_СтраницаПроизвольный_" + ИдентификаторЭлемента;
			
			// Реквизиты
			ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ВидПериодаИмя,          Новый ОписаниеТипов("ПеречислениеСсылка.ДоступныеПериодыОтчета")));
			ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ПериодПредставлениеИмя, Новый ОписаниеТипов("Строка")));
			ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ПериодЗначениеИмя,      Новый ОписаниеТипов("СтандартныйПериод")));
			
			// Основная Группа
			ГруппаСтрок = ?(ШаблонГенерации.Префикс = "Параметр", Элементы.Периоды, Элементы.ПараметрыИОтборы);
			Группа = Элементы.Добавить(ГруппаИмя, Тип("ГруппаФормы"), ГруппаСтрок);
			Группа.Вид                 = ВидГруппыФормы.ОбычнаяГруппа;
			Группа.Группировка         = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
			Группа.Отображение         = ОтображениеОбычнойГруппы.Нет;
			Группа.ОтображатьЗаголовок = Ложь;
			Группа.Заголовок           = ЭлементЗаголовок;
			
			Если ШаблонГенерации.ФлажокИспользование Тогда
				
				ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИспользованиеИмя, Новый ОписаниеТипов("Булево")));
				
				// Флажок
				ПолеФлажка = Элементы.Добавить(ИспользованиеИмя, Тип("ПолеФормы"), Группа);
				ПолеФлажка.Вид                = ВидПоляФормы.ПолеФлажка;
				ПолеФлажка.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
				ПолеФлажка.УстановитьДействие("ПриИзменении", "Подключаемый_ФлажокИспользование_ПриИзменении");
				ПолеФлажка.Заголовок = ЭлементЗаголовок + ":";
				
				// Значение флажка.
				ДобавленныеПоляВвода.Вставить(ИспользованиеИмя, ПользовательскаяНастройка.Использование);
				
			КонецЕсли;
			
			// Вид периода
			ВидПериодаЭлемент = Элементы.Добавить(ВидПериодаИмя, Тип("ПолеФормы"), Группа);
			ВидПериодаЭлемент.Вид                      = ВидПоляФормы.ПолеВвода;
			ВидПериодаЭлемент.Заголовок                = ЭлементЗаголовок;
			ВидПериодаЭлемент.КнопкаВыбора             = Ложь;
			ВидПериодаЭлемент.КнопкаОткрытия           = Ложь;
			ВидПериодаЭлемент.КнопкаОчистки            = Ложь;
			ВидПериодаЭлемент.КнопкаРегулирования      = Ложь;
			ВидПериодаЭлемент.РастягиватьПоГоризонтали = Ложь;
			ВидПериодаЭлемент.Ширина                   = 12;
			ВидПериодаЭлемент.УстановитьДействие("ПриИзменении", "Подключаемый_СтандартныйПериод_Вид_ПриИзменении");
			
			Если ШаблонГенерации.ФлажокИспользование Тогда
				ВидПериодаЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
			Иначе
				ВидПериодаЭлемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Лево;
			КонецЕсли;
			
			// Вид периода - Список выбора
			Если ШаблонГенерации.Префикс = "Параметр" Тогда
				МинимальнаяПериодичность = НастройкиОтчета.СоответствиеПериодичностиПараметров[ОбщаяНастройка.Параметр];
			Иначе
				МинимальнаяПериодичность = НастройкиОтчета.СоответствиеПериодичностиПараметров[ОбщаяНастройка.ЛевоеЗначение];
			КонецЕсли;
			Если МинимальнаяПериодичность = Неопределено Тогда
				МинимальнаяПериодичность = Перечисления.ДоступныеПериодыОтчета.День;
			КонецЕсли;
			
			ДоступныеПериоды = ФункцииОтчетовКлиентСервер.ПолучитьСписокДоступныхПериодов();
			Для Индекс = ДоступныеПериоды.Найти(МинимальнаяПериодичность) По ДоступныеПериоды.ВГраница() Цикл
				ВидПериодаЭлемент.СписокВыбора.Добавить(ДоступныеПериоды[Индекс]);
			КонецЦикла;
			
			// Страницы.
			ГруппаСтраниц = Элементы.Добавить(СтраницыИмя, Тип("ГруппаФормы"), Группа);
			ГруппаСтраниц.Вид                = ВидГруппыФормы.Страницы;
			ГруппаСтраниц.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
			
			// Страница СтандартныйПериод.
			СтраницаСтандартныйПериод = Элементы.Добавить(СтраницаСтандартныйИмя, Тип("ГруппаФормы"), ГруппаСтраниц);
			СтраницаСтандартныйПериод.Вид                 = ВидГруппыФормы.Страница;
			СтраницаСтандартныйПериод.Группировка         = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
			СтраницаСтандартныйПериод.ОтображатьЗаголовок = Ложь;
			
			// Страница Произвольный.
			СтраницаПроизвольныйПериод = Элементы.Добавить(СтраницаПроизвольныйИмя, Тип("ГруппаФормы"), ГруппаСтраниц);
			СтраницаПроизвольныйПериод.Вид                 = ВидГруппыФормы.Страница;
			СтраницаПроизвольныйПериод.Группировка         = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
			СтраницаПроизвольныйПериод.ОтображатьЗаголовок = Ложь;
			
			// Стандартный период.
			Период = Элементы.Добавить(ПериодПредставлениеИмя, Тип("ПолеФормы"), СтраницаСтандартныйПериод);
			Период.Вид                  = ВидПоляФормы.ПолеВвода;
			Период.Заголовок            = НСтр("ru = 'Период'");
			Период.ПоложениеЗаголовка   = ПоложениеЗаголовкаЭлементаФормы.Нет;
			Период.КнопкаВыбора         = Истина;
			Период.КнопкаОткрытия       = Ложь;
			Период.КнопкаОчистки        = Ложь;
			Период.КнопкаРегулирования  = Ложь;
			Период.РедактированиеТекста = Ложь;
			Период.УстановитьДействие("Очистка",              "Подключаемый_СтандартныйПериод_Значение_Очистка");
			Период.УстановитьДействие("ОбработкаВыбора",      "Подключаемый_СтандартныйПериод_Значение_ОбработкаВыбора");
			Если ОбщегоНазначенияКлиентСервер.ЭтоПлатформа83БезРежимаСовместимости() Тогда
				ВидПериодаЭлемент.РежимВыбораИзСписка = Истина;
				Период.КнопкаСпискаВыбора = Ложь;
				Период.УстановитьДействие("НачалоВыбора", "Подключаемый_СтандартныйПериод_Значение_НачалоВыбораИзСписка");
			Иначе
				ВидПериодаЭлемент.КнопкаСпискаВыбора = Истина;
				Период.КнопкаСпискаВыбора = Истина;
				Период.УстановитьДействие("НачалоВыбораИзСписка", "Подключаемый_СтандартныйПериод_Значение_НачалоВыбораИзСписка");
				Период.УстановитьДействие("НачалоВыбора",         "Подключаемый_СтандартныйПериод_Значение_НачалоВыбора");
			КонецЕсли;
			
			// Начало произвольного периода
			ПериодНачало = Элементы.Добавить(ПериодНачалоИмя, Тип("ПолеФормы"), СтраницаПроизвольныйПериод);
			ПериодНачало.Вид                       = ВидПоляФормы.ПолеВвода;
			ПериодНачало.РастягиватьПоГоризонтали  = Истина;
			ПериодНачало.КнопкаВыбора              = Истина;
			ПериодНачало.КнопкаОткрытия            = Ложь;
			ПериодНачало.КнопкаОчистки             = Ложь;
			ПериодНачало.КнопкаРегулирования       = Ложь;
			ПериодНачало.КнопкаСпискаВыбора        = Ложь;
			ПериодНачало.РедактированиеТекста      = Истина;
			ПериодНачало.Заголовок                 = НСтр("ru = 'с'");
			ПериодНачало.УстановитьДействие("ПриИзменении", "Подключаемый_СтандартныйПериод_НачалоПериода_ПриИзменении");
			
			Если ШаблонГенерации.Префикс = "Параметр" Тогда
				ПериодНачало.АвтоОтметкаНезаполненного = ДоступнаяНастройка.ЗапрещатьНезаполненныеЗначения;
			КонецЕсли;
			
			// Окончание произвольного периода.
			ПериодОкончание = Элементы.Добавить(ПериодОкончаниеИмя, Тип("ПолеФормы"), СтраницаПроизвольныйПериод);
			ПериодОкончание.Вид = ВидПоляФормы.ПолеВвода;
			ЗаполнитьЗначенияСвойств(ПериодОкончание, ПериодНачало, "РастягиватьПоГоризонтали, РедактированиеТекста,
			|КнопкаВыбора, КнопкаОткрытия, КнопкаОчистки, КнопкаРегулирования, КнопкаСпискаВыбора, АвтоОтметкаНезаполненного");
			ПериодОкончание.Заголовок = НСтр("ru = 'по'");
			ПериодОкончание.УстановитьДействие("ПриИзменении", "Подключаемый_СтандартныйПериод_КонецПериода_ПриИзменении");
			
			// Значения.
			Если ШаблонГенерации.Префикс = "Параметр" Тогда
				Значение = ПользовательскаяНастройка.Значение;
			Иначе
				Значение = ПользовательскаяНастройка.ПравоеЗначение;
			КонецЕсли;
			НачалоПериода = Значение.ДатаНачала;
			КонецПериода  = Значение.ДатаОкончания;
			ВидПериода    = ФункцииОтчетовКлиентСервер.ПолучитьВидСтандартногоПериода(Значение, ВидПериодаЭлемент.СписокВыбора);
			Представление = ФункцииОтчетовКлиентСервер.ПредставлениеСтандартногоПериода(Значение, ВидПериода);
			
			ОписаниеРеквизита = Новый Структура;
			ОписаниеРеквизита.Вставить("ПериодЗначениеИмя",      ПериодЗначениеИмя);
			ОписаниеРеквизита.Вставить("ВидПериодаИмя",          ВидПериодаИмя);
			ОписаниеРеквизита.Вставить("ПериодНачалоИмя",        ПериодНачалоИмя);
			ОписаниеРеквизита.Вставить("ПериодОкончаниеИмя",     ПериодОкончаниеИмя);
			ОписаниеРеквизита.Вставить("ПериодПредставлениеИмя", ПериодПредставлениеИмя);
			ОписаниеРеквизита.Вставить("Значение",               Значение);
			ОписаниеРеквизита.Вставить("ВидПериода",             ВидПериода);
			ОписаниеРеквизита.Вставить("Представление",          Представление);
			ДобавленныеСтандартныеПериоды.Добавить(ОписаниеРеквизита);
			
			// Активация страницы.
			Если ВидПериода = Перечисления.ДоступныеПериодыОтчета.ПроизвольныйПериод Тогда
				ГруппаСтраниц.ТекущаяСтраница = СтраницаПроизвольныйПериод;
			Иначе
				ГруппаСтраниц.ТекущаяСтраница = СтраницаСтандартныйПериод;
			КонецЕсли;
			
		ИначеЕсли ШаблонГенерации.Тип = "ПолеВвода" Тогда
			
			ГруппаИмя        = ШаблонГенерации.Префикс + "_Группа_"        + ИдентификаторЭлемента;
			ИспользованиеИмя = ШаблонГенерации.Префикс + "_Использование_" + ИдентификаторЭлемента;
			ЗначениеИмя      = ШаблонГенерации.Префикс + "_Значение_"      + ИдентификаторЭлемента;
			
			ИменаОсновныхРеквизитовФормы.Вставить(ИдентификаторЭлемента, ЗначениеИмя);
			ИменаЭлементовДляУстановкиСвязей.Вставить(ИдентификаторЭлемента, ЗначениеИмя);
			ИменаФлажковИспользование.Вставить(ИдентификаторЭлемента, ?(ШаблонГенерации.ФлажокИспользование, ИспользованиеИмя, ""));
			
			// Группа с флажком.
			Если ШаблонГенерации.ФлажокИспользование Тогда
				
				// Добавление основной группы
				Группа = Элементы.Добавить(ГруппаИмя, Тип("ГруппаФормы"), Элементы.ПараметрыИОтборы);
				Группа.Вид                 = ВидГруппыФормы.ОбычнаяГруппа;
				Группа.Группировка         = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
				Группа.Отображение         = ОтображениеОбычнойГруппы.Нет;
				Группа.Заголовок           = ЭлементЗаголовок;
				Группа.ОтображатьЗаголовок = Ложь;
				
				ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИспользованиеИмя, Новый ОписаниеТипов("Булево")));
				
				// Флажок
				ПолеФлажка = Элементы.Добавить(ИспользованиеИмя, Тип("ПолеФормы"), Группа);
				ПолеФлажка.Вид                = ВидПоляФормы.ПолеФлажка;
				ПолеФлажка.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
				ПолеФлажка.УстановитьДействие("ПриИзменении", "Подключаемый_ФлажокИспользование_ПриИзменении");
				ПолеФлажка.Заголовок = ЭлементЗаголовок + ":";
				
				// Значение флажка.
				ДобавленныеПоляВвода.Вставить(ИспользованиеИмя, ПользовательскаяНастройка.Использование);
				
			Иначе
				
				Группа = Элементы.ПараметрыИОтборы;
				
			КонецЕсли;
			
			// Реквизит
			ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ЗначениеИмя, ШаблонГенерации.ОписаниеТипов));
			
			ПолеВвода = Элементы.Добавить(ЗначениеИмя, Тип("ПолеФормы"), Группа);
			ПолеВвода.Вид                 = ВидПоляФормы.ПолеВвода;
			ПолеВвода.Заголовок           = ЭлементЗаголовок;
			ПолеВвода.КнопкаВыбора        = Истина;
			ПолеВвода.КнопкаОткрытия      = Ложь;
			ПолеВвода.КнопкаРегулирования = Ложь;
			ПолеВвода.КнопкаСпискаВыбора  = Ложь;
			ПолеВвода.УстановитьДействие("ПриИзменении", "Подключаемый_ПолеВвода_ПриИзменении");
			
			ЗаполнитьЗначенияСвойств(ПолеВвода, ДоступнаяНастройка, "БыстрыйВыбор, Маска, ФормаВыбора, ФорматРедактирования");
			
			Если ШаблонГенерации.ФлажокИспользование Тогда
				ПолеВвода.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
			Иначе
				ПолеВвода.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Авто;
			КонецЕсли;
			
			Если ШаблонГенерации.Свойство("ВыборГруппИЭлементов") Тогда
				ПолеВвода.ВыборГруппИЭлементов = ШаблонГенерации.ВыборГруппИЭлементов;
			Иначе
				ПолеВвода.ВыборГруппИЭлементов = ФункцииОтчетовКлиентСервер.ПривестиЗначениеКТипуГруппыИЭлементы(ДоступнаяНастройка.ВыборГруппИЭлементов);
			КонецЕсли;
			
			Если ШаблонГенерации.Префикс = "Параметр" Тогда
				ПолеВвода.АвтоОтметкаНезаполненного = ДоступнаяНастройка.ЗапрещатьНезаполненныеЗначения;
			КонецЕсли;
			
			// Поля ввода следующих типов не растягиваются по горизонтали и не имеют кнопки очистки:
			//     Дата, Булево, Число, Тип.
			ПолеВвода.КнопкаОчистки            = ШаблонГенерации.СодержитДругиеТипы;
			ПолеВвода.РастягиватьПоГоризонтали = ШаблонГенерации.СодержитДругиеТипы;
			
			Если ШаблонГенерации.ВыборИзСписка Тогда
				ПолеВвода.РежимВыбораИзСписка = Истина;
				ПолеВвода.РастягиватьПоГоризонтали = Истина;
				Для Каждого ЭлементСписка Из ДоступнаяНастройка.ДоступныеЗначения Цикл
					ЭлементСпискаВыбора = ПолеВвода.СписокВыбора.Добавить();
					ЗаполнитьЗначенияСвойств(ЭлементСпискаВыбора, ЭлементСписка);
					Если ТипЗнч(ЭлементСпискаВыбора.Значение) = Тип("Тип") Тогда
						МассивТипов = Новый Массив;
						МассивТипов.Добавить(ЭлементСпискаВыбора.Значение);
						ЭлементСпискаВыбора.Значение = Новый ОписаниеТипов(МассивТипов);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			// Фиксированные параметры выбора.
			Если ШаблонГенерации.Свойство("ПараметрыВыбора") Тогда
				ПолеВвода.ПараметрыВыбора = Новый ФиксированныйМассив(ШаблонГенерации.ПараметрыВыбора);
			КонецЕсли;
			
			// Значение реквизита.
			Если ШаблонГенерации.Префикс = "Параметр" Тогда
				Значение = ПользовательскаяНастройка.Значение;
			Иначе
				Значение = ПользовательскаяНастройка.ПравоеЗначение;
			КонецЕсли;
			Если ТипЗнч(Значение) = Тип("СтандартнаяДатаНачала") Тогда
				Значение = Дата(Значение);
			ИначеЕсли ТипЗнч(Значение) = Тип("Тип") Тогда
				МассивТипов = Новый Массив;
				МассивТипов.Добавить(Значение);
				Значение = Новый ОписаниеТипов(МассивТипов);
			КонецЕсли;
			ДобавленныеПоляВвода.Вставить(ЗначениеИмя, Значение);
			
		ИначеЕсли ШаблонГенерации.Тип = "СписокСПодбором" Тогда
			
			ГруппаИмя          = ШаблонГенерации.Префикс + "_Группа_"           + ИдентификаторЭлемента;
			ГруппаЗаголовокИмя = ШаблонГенерации.Префикс + "_ГруппаЗаголовка_"  + ИдентификаторЭлемента;
			ИспользованиеИмя   = ШаблонГенерации.Префикс + "_Использование_"    + ИдентификаторЭлемента;
			ДекорацияИмя       = ШаблонГенерации.Префикс + "_Декорация_"        + ИдентификаторЭлемента;
			ТаблицаИмя         = ШаблонГенерации.Префикс + "_СписокЗначений_"   + ИдентификаторЭлемента;
			КолонкаЗначениеИмя = ШаблонГенерации.Префикс + "_Колонка_Значение_" + ИдентификаторЭлемента;
			КоманднаяПанельИмя = ШаблонГенерации.Префикс + "_КоманднаяПанель_"  + ИдентификаторЭлемента;
			КнопкаПодборИмя    = ШаблонГенерации.Префикс + "_Подбор_"           + ИдентификаторЭлемента;
			
			ИменаОсновныхРеквизитовФормы.Вставить(ИдентификаторЭлемента, ТаблицаИмя);
			ИменаЭлементовДляУстановкиСвязей.Вставить(ИдентификаторЭлемента, КолонкаЗначениеИмя);
			ИменаФлажковИспользование.Вставить(ИдентификаторЭлемента, ?(ШаблонГенерации.ФлажокИспользование, ИспользованиеИмя, ""));
			
			// Добавление основной группы
			Группа = Элементы.Добавить(ГруппаИмя, Тип("ГруппаФормы"), Элементы.ПараметрыИОтборы);
			Группа.Вид                 = ВидГруппыФормы.ОбычнаяГруппа;
			Группа.Группировка         = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
			Группа.Отображение         = ОтображениеОбычнойГруппы.Нет;
			Группа.Заголовок           = ЭлементЗаголовок;
			Группа.ОтображатьЗаголовок = Ложь;
			
			// Группа-строка для заголовка и командной панели таблицы.
			ГруппаЗаголовокТаблицы = Элементы.Добавить(ГруппаЗаголовокИмя, Тип("ГруппаФормы"), Группа);
			ГруппаЗаголовокТаблицы.Вид                 = ВидГруппыФормы.ОбычнаяГруппа;
			ГруппаЗаголовокТаблицы.Группировка         = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
			ГруппаЗаголовокТаблицы.Отображение         = ОтображениеОбычнойГруппы.Нет;
			ГруппаЗаголовокТаблицы.ОтображатьЗаголовок = Ложь;
			
			// Флажок.
			Если ШаблонГенерации.ФлажокИспользование Тогда
				
				ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИспользованиеИмя, Новый ОписаниеТипов("Булево")));
				
				ПолеФлажка = Элементы.Добавить(ИспользованиеИмя, Тип("ПолеФормы"), ГруппаЗаголовокТаблицы);
				ПолеФлажка.Вид                = ВидПоляФормы.ПолеФлажка;
				ПолеФлажка.Заголовок          = ЭлементЗаголовок + ":";
				ПолеФлажка.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
				ПолеФлажка.УстановитьДействие("ПриИзменении", "Подключаемый_ФлажокИспользование_ПриИзменении");
				
				// Значение флажка
				ДобавленныеПоляВвода.Вставить(ИспользованиеИмя, ПользовательскаяНастройка.Использование);
				
			КонецЕсли;
			
			// Заголовок / Пустая декорация.
			ПустаяДекорация = Элементы.Добавить(ДекорацияИмя, Тип("ДекорацияФормы"), ГруппаЗаголовокТаблицы);
			ПустаяДекорация.Вид                      = ВидДекорацииФормы.Надпись;
			ПустаяДекорация.Заголовок                = ?(ШаблонГенерации.ФлажокИспользование, " ", ЭлементЗаголовок + ":");
			ПустаяДекорация.РастягиватьПоГоризонтали = Истина;
			
			// Подбор.
			ТаблицаКоманднаяПанель = Элементы.Добавить(КоманднаяПанельИмя, Тип("ГруппаФормы"), ГруппаЗаголовокТаблицы);
			ТаблицаКоманднаяПанель.Вид                      = ВидГруппыФормы.КоманднаяПанель;
			ТаблицаКоманднаяПанель.ГоризонтальноеПоложение  = ГоризонтальноеПоложениеЭлемента.Право;
			ТаблицаКоманднаяПанель.РастягиватьПоГоризонтали = Ложь;
			ТаблицаКоманднаяПанель.Ширина                   = 10;
			
			КомандаПодбор = Команды.Добавить(КнопкаПодборИмя);
			КомандаПодбор.Действие    = "Подключаемый_СписокСПодбором_Подбор";
			КомандаПодбор.Заголовок   = НСтр("ru = 'Подбор'");
			КомандаПодбор.Отображение = ОтображениеКнопки.Текст;
			
			КнопкаПодбор = Элементы.Добавить(КнопкаПодборИмя, Тип("КнопкаФормы"), ТаблицаКоманднаяПанель);
			КнопкаПодбор.ИмяКоманды = КнопкаПодборИмя;
			
			// Таблица.
			ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ТаблицаИмя, Новый ОписаниеТипов("СписокЗначений")));
			
			ТаблицаФормы = Элементы.Добавить(ТаблицаИмя, Тип("ТаблицаФормы"), Группа);
			ТаблицаФормы.Отображение               = ОтображениеТаблицы.Список;
			ТаблицаФормы.ПоложениеЗаголовка        = ПоложениеЗаголовкаЭлементаФормы.Нет;
			ТаблицаФормы.ПоложениеКоманднойПанели  = ПоложениеКоманднойПанелиЭлементаФормы.Нет;
			ТаблицаФормы.ВертикальныеЛинии         = Ложь;
			ТаблицаФормы.ГоризонтальныеЛинии       = Ложь;
			ТаблицаФормы.Шапка                     = Ложь;
			ТаблицаФормы.Подвал                    = Ложь;
			ТаблицаФормы.ИзменятьПорядокСтрок      = Истина;
			ТаблицаФормы.РастягиватьПоГоризонтали  = Истина;
			ТаблицаФормы.РастягиватьПоВертикали    = Истина;
			ТаблицаФормы.Высота                    = 3;
			
			// Колонка "Значение".
			КолонкаЗначениеЭлемент = Элементы.Добавить(КолонкаЗначениеИмя, Тип("ПолеФормы"), ТаблицаФормы);
			КолонкаЗначениеЭлемент.Вид = ВидПоляФормы.ПолеВвода;
			
			ЗаполнитьЗначенияСвойств(КолонкаЗначениеЭлемент, ДоступнаяНастройка, "БыстрыйВыбор, Маска, ФормаВыбора, ФорматРедактирования");
			
			Если ШаблонГенерации.Свойство("ВыборГруппИЭлементов") Тогда
				КолонкаЗначениеЭлемент.ВыборГруппИЭлементов = ШаблонГенерации.ВыборГруппИЭлементов;
			Иначе
				КолонкаЗначениеЭлемент.ВыборГруппИЭлементов = ФункцииОтчетовКлиентСервер.ПривестиЗначениеКТипуГруппыИЭлементы(ДоступнаяНастройка.ВыборГруппИЭлементов);
			КонецЕсли;
			
			Если ШаблонГенерации.ВыборИзСписка Тогда
				КолонкаЗначениеЭлемент.РежимВыбораИзСписка = Истина;
				Для Каждого ЭлементСписка Из ДоступнаяНастройка.ДоступныеЗначения Цикл
					ЭлементСпискаВыбора = КолонкаЗначениеЭлемент.СписокВыбора.Добавить();
					ЗаполнитьЗначенияСвойств(ЭлементСпискаВыбора, ЭлементСписка);
					Если ТипЗнч(ЭлементСпискаВыбора.Значение) = Тип("Тип") Тогда
						МассивТипов = Новый Массив;
						МассивТипов.Добавить(ЭлементСпискаВыбора.Значение);
						ЭлементСпискаВыбора.Значение = Новый ОписаниеТипов(МассивТипов);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			// Заполнение имен объектов метаданных в разрезах типов и идентификаторов элементов (для предустановленных).
			// Используется при клике по кнопке "Подбор" для получения имени формы подбора.
			Если ЗначениеЗаполнено(КолонкаЗначениеЭлемент.ФормаВыбора) Тогда
				СоответствиеИменОбъектовМетаданных.Вставить(ИдентификаторЭлемента, КолонкаЗначениеЭлемент.ФормаВыбора);
			КонецЕсли;
			
			// Фиксированные параметры выбора.
			Если ШаблонГенерации.Свойство("ПараметрыВыбора") Тогда
				КолонкаЗначениеЭлемент.ПараметрыВыбора = Новый ФиксированныйМассив(ШаблонГенерации.ПараметрыВыбора);
			КонецЕсли;
			
			// Некоторые обработчики событий можно подключить только после установки связи элементов с данными.
			СобытияТаблицы = Новый Структура;
			СобытияТаблицы.Вставить("ПриИзменении",    "Подключаемый_СписокСПодбором_ПриИзменении");
			СобытияТаблицы.Вставить("ОбработкаВыбора", "Подключаемый_СписокСПодбором_ОбработкаВыбора");
			
			// Значение списка.
			Если ШаблонГенерации.Префикс = "Параметр" Тогда
				СписокЗначений = ПользовательскаяНастройка.Значение;
			Иначе
				СписокЗначений = ПользовательскаяНастройка.ПравоеЗначение;
			КонецЕсли;
			
			ОписаниеРеквизита = Новый Структура;
			ОписаниеРеквизита.Вставить("ИмяТаблицы",         ТаблицаИмя);
			ОписаниеРеквизита.Вставить("СобытияТаблицы",     СобытияТаблицы);
			ОписаниеРеквизита.Вставить("ИмяКолонкиЗначение", КолонкаЗначениеИмя);
			ОписаниеРеквизита.Вставить("Значение",           СписокЗначений);
			ОписаниеРеквизита.Вставить("ОписаниеТипов",      ШаблонГенерации.ОписаниеТипов);
			ДобавленныеСпискиЗначений.Добавить(ОписаниеРеквизита);
			
		ИначеЕсли ШаблонГенерации.Тип = "ТаблицаПорядкаСФлажками" Тогда
			
			ГруппаИмя                  = ШаблонГенерации.Префикс + "_Группа_"                   + ИдентификаторЭлемента;
			ТаблицаИмя                 = ШаблонГенерации.Префикс + "_Таблица_"                  + ИдентификаторЭлемента;
			КолонкаИспользованиеИмя    = ШаблонГенерации.Префикс + "_КолонкаИспользование_"     + ИдентификаторЭлемента;
			КолонкаПредставлениеИмя    = ШаблонГенерации.Префикс + "_КолонкаПредставление_"     + ИдентификаторЭлемента;
			КолонкаПорядокИмя          = ШаблонГенерации.Префикс + "_КолонкаПорядок_"           + ИдентификаторЭлемента;
			КоманднаяПанельИмя         = ШаблонГенерации.Префикс + "_КоманднаяПанель_"          + ИдентификаторЭлемента;
			КомандаПереместитьВверхИмя = ШаблонГенерации.Префикс + "_Команда_ПереместитьВверх_" + ИдентификаторЭлемента;
			КомандаПереместитьВнизИмя  = ШаблонГенерации.Префикс + "_Команда_ПереместитьВниз_"  + ИдентификаторЭлемента;
			КомандаСортироватьПоВозрастаниюИмя = ШаблонГенерации.Префикс + "_Команда_СортироватьПоВозрастанию_" + ИдентификаторЭлемента;
			КомандаСортироватьПоУбываниюИмя    = ШаблонГенерации.Префикс + "_Команда_СортироватьПоУбыванию_"    + ИдентификаторЭлемента;
			
			// Реквизиты.
			ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ТаблицаИмя, Новый ОписаниеТипов("ТаблицаЗначений")));
			ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Идентификатор", Новый ОписаниеТипов("Строка"), ТаблицаИмя));
			ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Использование", Новый ОписаниеТипов("Булево"), ТаблицаИмя));
			ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Представление", Новый ОписаниеТипов("Строка"), ТаблицаИмя));
			
			// Группы и элементы
			Группа = Элементы.Добавить(ГруппаИмя, Тип("ГруппаФормы"), Элементы.ТаблицыСФлажками);
			Группа.Вид                      = ВидГруппыФормы.ОбычнаяГруппа;
			Группа.Группировка              = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
			Группа.Отображение              = ОбщегоНазначенияКлиентСервер.ОтображениеОбычнойГруппыЛиния();
			Группа.ОтображатьЗаголовок      = Истина;
			Группа.РастягиватьПоГоризонтали = Истина;
			Группа.Заголовок                = ЭлементЗаголовок + ":";
			
			ТаблицаФормы = Элементы.Добавить(ТаблицаИмя, Тип("ТаблицаФормы"), Группа);
			ТаблицаФормы.Отображение               = ОтображениеТаблицы.Список;
			ТаблицаФормы.ПоложениеЗаголовка        = ПоложениеЗаголовкаЭлементаФормы.Нет;
			ТаблицаФормы.ПоложениеКоманднойПанели  = ПоложениеКоманднойПанелиЭлементаФормы.Нет;
			ТаблицаФормы.ВертикальныеЛинии         = Ложь;
			ТаблицаФормы.ГоризонтальныеЛинии       = Ложь;
			ТаблицаФормы.Шапка                     = Ложь;
			ТаблицаФормы.Подвал                    = Ложь;
			ТаблицаФормы.ИзменятьПорядокСтрок      = Истина;
			ТаблицаФормы.РастягиватьПоГоризонтали  = Истина;
			ТаблицаФормы.РастягиватьПоВертикали    = Истина;
			ТаблицаФормы.Высота                    = 3;
			ТаблицаФормы.ИзменятьСоставСтрок       = Ложь;
			ТаблицаФормы.ИзменятьПорядокСтрок      = Ложь;
			ТаблицаФормы.РежимВыделения            = РежимВыделенияТаблицы.Одиночный;
			
			КолонкаИспользование = Элементы.Добавить(КолонкаИспользованиеИмя, Тип("ПолеФормы"), ТаблицаФормы);
			КолонкаИспользование.Вид                 = ВидПоляФормы.ПолеФлажка;
			КолонкаИспользование.РежимРедактирования = РежимРедактированияКолонки.Непосредственно;
			КолонкаИспользование.УстановитьДействие("ПриИзменении", "Подключаемый_ТаблицаПорядка_КолонкаИспользование_ПриИзменении");
			
			КолонкаПредставление = Элементы.Добавить(КолонкаПредставлениеИмя, Тип("ПолеФормы"), ТаблицаФормы);
			КолонкаПредставление.Вид            = ВидПоляФормы.ПолеВвода;
			КолонкаПредставление.ТолькоПросмотр = Истина;
			
			// Командная панель
			ТаблицаКоманднаяПанель = Элементы.Добавить(КоманднаяПанельИмя, Тип("ГруппаФормы"), Группа);
			ТаблицаКоманднаяПанель.Вид                 = ВидГруппыФормы.ОбычнаяГруппа;
			ТаблицаКоманднаяПанель.Группировка         = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
			ТаблицаКоманднаяПанель.Отображение         = ОтображениеОбычнойГруппы.Нет;
			ТаблицаКоманднаяПанель.ОтображатьЗаголовок = Ложь;
			
			// Команды
			КомандаПереместитьВверх = Команды.Добавить(КомандаПереместитьВверхИмя);
			КомандаПереместитьВверх.Действие    = "Подключаемый_ТаблицаПорядка_ПереместитьВверх";
			КомандаПереместитьВверх.Картинка    = БиблиотекаКартинок.ПереместитьВверх;
			КомандаПереместитьВверх.Отображение = ОтображениеКнопки.Картинка;
			
			КомандаПереместитьВниз = Команды.Добавить(КомандаПереместитьВнизИмя);
			КомандаПереместитьВниз.Действие    = "Подключаемый_ТаблицаПорядка_ПереместитьВниз";
			КомандаПереместитьВниз.Картинка    = БиблиотекаКартинок.ПереместитьВниз;
			КомандаПереместитьВниз.Отображение = ОтображениеКнопки.Картинка;
			
			// Кнопки
			КнопкаПереместитьВверх = Элементы.Добавить(КомандаПереместитьВверхИмя, Тип("КнопкаФормы"), ТаблицаКоманднаяПанель);
			КнопкаПереместитьВверх.ИмяКоманды = КомандаПереместитьВверхИмя;
			КнопкаПереместитьВверх.Заголовок  = НСтр("ru = 'Переместить строку вверх'");
			
			КнопкаПереместитьВниз = Элементы.Добавить(КомандаПереместитьВнизИмя, Тип("КнопкаФормы"), ТаблицаКоманднаяПанель);
			КнопкаПереместитьВниз.ИмяКоманды = КомандаПереместитьВнизИмя;
			КнопкаПереместитьВниз.Заголовок  = НСтр("ru = 'Переместить строку вниз'");
			
			Если ШаблонГенерации.Префикс = "ПорядокКомпоновкиДанных" Тогда
				
				КомандаПереместитьВверх.Подсказка = НСтр("ru = 'Поднять приоритет сортировки по колонке'");
				КомандаПереместитьВниз.Подсказка  = НСтр("ru = 'Понизить приоритет сортировки по колонке'");
				
				ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Направление", Новый ОписаниеТипов("НаправлениеСортировкиКомпоновкиДанных"), ТаблицаИмя));
				
				КолонкаПорядок = Элементы.Добавить(КолонкаПорядокИмя, Тип("ПолеФормы"), ТаблицаФормы);
				КолонкаПорядок.Вид                      = ВидПоляФормы.ПолеВвода;
				КолонкаПорядок.ТолькоПросмотр           = Истина;
				КолонкаПорядок.РастягиватьПоГоризонтали = Ложь;
				КолонкаПорядок.Ширина                   = 11;
				КолонкаПорядок.ГиперссылкаЯчейки        = Истина;
				
				// Команды
				КомандаПереместитьВверх = Команды.Добавить(КомандаСортироватьПоВозрастаниюИмя);
				КомандаПереместитьВверх.Действие    = "Подключаемый_ТаблицаПорядка_СортироватьПоВозрастанию";
				КомандаПереместитьВверх.Картинка    = БиблиотекаКартинок.СортироватьСписокПоВозрастанию;
				КомандаПереместитьВверх.Отображение = ОтображениеКнопки.Картинка;
				
				КомандаПереместитьВниз = Команды.Добавить(КомандаСортироватьПоУбываниюИмя);
				КомандаПереместитьВниз.Действие    = "Подключаемый_ТаблицаПорядка_СортироватьПоУбыванию";
				КомандаПереместитьВниз.Картинка    = БиблиотекаКартинок.СортироватьСписокПоУбыванию;
				КомандаПереместитьВниз.Отображение = ОтображениеКнопки.Картинка;
				
				// Кнопки
				КнопкаПереместитьВверх = Элементы.Добавить(КомандаСортироватьПоВозрастаниюИмя, Тип("КнопкаФормы"), ТаблицаФормы.КонтекстноеМеню);
				КнопкаПереместитьВверх.ИмяКоманды = КомандаСортироватьПоВозрастаниюИмя;
				КнопкаПереместитьВверх.Заголовок  = НСтр("ru = 'Сортировать по возрастанию'");
				
				КнопкаПереместитьВниз = Элементы.Добавить(КомандаСортироватьПоУбываниюИмя, Тип("КнопкаФормы"), ТаблицаФормы.КонтекстноеМеню);
				КнопкаПереместитьВниз.ИмяКоманды = КомандаСортироватьПоУбываниюИмя;
				КнопкаПереместитьВниз.Заголовок  = НСтр("ru = 'Сортировать по убыванию'");
				
			ИначеЕсли ШаблонГенерации.Префикс = "ВыбранныеПоляКомпоновкиДанных" Тогда
				
				КомандаПереместитьВверх.Подсказка = НСтр("ru = 'Переместить поле выше или левее'");
				КомандаПереместитьВниз.Подсказка  = НСтр("ru = 'Переместить поле ниже или правее'");
				
				ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ЭтоГруппа", Новый ОписаниеТипов("Булево"), ТаблицаИмя));
				
				// Условное оформление для групп
				ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить(); 
				ЭлементУсловногоОформления.Использование = Истина;
				
				ОтборОформления = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ОтборОформления.Использование = Истина;
				ОтборОформления.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ТаблицаИмя + ".ЭтоГруппа");
				ОтборОформления.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
				ОтборОформления.ПравоеЗначение = Истина;
				
				ПолеОформление = ЭлементУсловногоОформления.Поля.Элементы.Добавить(); 
				ПолеОформление.Использование = Истина;
				ПолеОформление.Поле          = Новый ПолеКомпоновкиДанных(ТаблицаИмя);
				
				ШрифтОформления = ЭлементУсловногоОформления.Оформление.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Шрифт")); 
				ШрифтОформления.Значение      = Новый Шрифт(ШрифтОформления.Значение, , , Истина, , Истина, ); 
				ШрифтОформления.Использование = Истина;
				
				
			ИначеЕсли ШаблонГенерации.Префикс = "СтруктураНастроекКомпоновкиДанных" Тогда
				
				КомандаПереместитьВверх.Подсказка = НСтр("ru = 'Переместить поле вверх'");
				КомандаПереместитьВниз.Подсказка  = НСтр("ru = 'Переместить поле вниз'");
				
			КонецЕсли;
			
			// Значения.
			ОписаниеРеквизита = Новый Структура;
			ОписаниеРеквизита.Вставить("ИмяГруппы",                 ГруппаИмя);
			ОписаниеРеквизита.Вставить("ИмяТаблицы",                ТаблицаИмя);
			ОписаниеРеквизита.Вставить("ИмяКолонкиИспользование",   КолонкаИспользованиеИмя);
			ОписаниеРеквизита.Вставить("ИмяКолонкиПредставление",   КолонкаПредставлениеИмя);
			ОписаниеРеквизита.Вставить("ИмяКолонкиПорядок",         КолонкаПорядокИмя);
			ОписаниеРеквизита.Вставить("ПользовательскаяНастройка", ПользовательскаяНастройка);
			ДобавленныеТаблицыСФлажками.Добавить(ОписаниеРеквизита);
			
		КонецЕсли;
	КонецЦикла;
	
	ИзменитьРеквизиты(ДобавляемыеРеквизиты, Новый Массив);
	
	// Установка значений и связей полей ввода.
	Для Каждого КлючИЗначение Из ДобавленныеПоляВвода Цикл
		ИмяРеквизита = КлючИЗначение.Ключ;
		ЭтаФорма[ИмяРеквизита] = КлючИЗначение.Значение;
		Элементы[ИмяРеквизита].ПутьКДанным = ИмяРеквизита;
	КонецЦикла;
	
	// Установка значений и связей списков значений.
	Для Каждого ОписаниеРеквизита Из ДобавленныеСтандартныеПериоды Цикл
		ЭтаФорма[ОписаниеРеквизита.ПериодЗначениеИмя]      = ОписаниеРеквизита.Значение;
		ЭтаФорма[ОписаниеРеквизита.ВидПериодаИмя]          = ОписаниеРеквизита.ВидПериода;
		ЭтаФорма[ОписаниеРеквизита.ПериодПредставлениеИмя] = ОписаниеРеквизита.Представление;
		Элементы[ОписаниеРеквизита.ВидПериодаИмя].ПутьКДанным          = ОписаниеРеквизита.ВидПериодаИмя;
		Элементы[ОписаниеРеквизита.ПериодПредставлениеИмя].ПутьКДанным = ОписаниеРеквизита.ПериодПредставлениеИмя;
		Элементы[ОписаниеРеквизита.ПериодНачалоИмя].ПутьКДанным        = ОписаниеРеквизита.ПериодЗначениеИмя + ".ДатаНачала";
		Элементы[ОписаниеРеквизита.ПериодОкончаниеИмя].ПутьКДанным     = ОписаниеРеквизита.ПериодЗначениеИмя + ".ДатаОкончания";
	КонецЦикла;
	
	// Установка значений и связей списков значений.
	Для Каждого ОписаниеРеквизита Из ДобавленныеСпискиЗначений Цикл
		ИмяТаблицы = ОписаниеРеквизита.ИмяТаблицы;
		ТаблицаФормы = Элементы[ИмяТаблицы];
		ТаблицаЗначение = ЭтаФорма[ИмяТаблицы];
		ТаблицаЗначение.ТипЗначения = ОписаниеРеквизита.ОписаниеТипов;
		ТаблицаЗначение.Очистить();
		ТаблицаЗначение = ОписаниеРеквизита.Значение;
		ТаблицаФормы.ПутьКДанным = ИмяТаблицы;
		Элементы[ОписаниеРеквизита.ИмяКолонкиЗначение].ПутьКДанным = ИмяТаблицы + ".Значение";
		// Некоторые обработчики событий можно подключить только после установки связи элементов с данными.
		Для Каждого КлючИЗначение Из ОписаниеРеквизита.СобытияТаблицы Цикл
			ТаблицаФормы.УстановитьДействие(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
	КонецЦикла;
	
	// Установка значений и связей таблиц порядка с флажками.
	Для Каждого ОписаниеРеквизита Из ДобавленныеТаблицыСФлажками Цикл
		
		ИмяТаблицы = ОписаниеРеквизита.ИмяТаблицы;
		Таблица = ЭтаФорма[ИмяТаблицы];
		ПользовательскаяНастройка = ОписаниеРеквизита.ПользовательскаяНастройка;
		ТипОбщейНастройки = ТипЗнч(ПользовательскаяНастройка);
		
		Если ТипОбщейНастройки = Тип("ВыбранныеПоляКомпоновкиДанных") Тогда
			
			ФункцииОтчетовКлиентСервер.ДобавитьЭлементыНастройки(ЭтаФорма, Таблица, ПользовательскаяНастройка, ПользовательскаяНастройка, Истина);
			
		ИначеЕсли ТипОбщейНастройки = Тип("ПорядокКомпоновкиДанных") Тогда
		
			Для Каждого ЭлементПорядка Из ПользовательскаяНастройка.Элементы Цикл
				Если ТипЗнч(ЭлементПорядка) = Тип("ЭлементПорядкаКомпоновкиДанных") Тогда
					ДоступноеПоле = ФункцииОтчетовКлиентСервер.ПолучитьДоступноеПоле(НастройкиКД.ДоступныеПоляПорядка, ЭлементПорядка.Поле);
					Если ДоступноеПоле = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					СтрокаПорядка = Таблица.Добавить();
					СтрокаПорядка.Использование = ЭлементПорядка.Использование;
					СтрокаПорядка.Идентификатор = ПользовательскаяНастройка.ПолучитьИдентификаторПоОбъекту(ЭлементПорядка);
					СтрокаПорядка.Представление = ДоступноеПоле.Заголовок;
					СтрокаПорядка.Направление   = ЭлементПорядка.ТипУпорядочивания;
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли ТипОбщейНастройки = Тип("СтруктураНастроекКомпоновкиДанных") Тогда
			
			Для Каждого ЭлементСтруктуры Из ПользовательскаяНастройка.Структура Цикл
				Представление = "";
				Если ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаКомпоновкиДанных") 
					ИЛИ ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаТаблицыКомпоновкиДанных") 
					ИЛИ ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаДиаграммыКомпоновкиДанных") Тогда
					
					Для Каждого ПолеГруппировки Из ЭлементСтруктуры.ПоляГруппировки.Элементы Цикл
						Если НЕ ПолеГруппировки.Использование Тогда
							Продолжить;
						КонецЕсли;
						ДоступноеПоле = ФункцииОтчетовКлиентСервер.ПолучитьДоступноеПоле(НастройкиКД.ДоступныеПоляГруппировок, ПолеГруппировки.Поле);
						Если ДоступноеПоле = Неопределено Тогда
							Представление = Строка(ПолеГруппировки.Поле);
						ИначеЕсли ДоступноеПоле.Родитель <> Неопределено Тогда
							Представление = Представление + СтрЗаменить(СтрЗаменить(ДоступноеПоле.Заголовок, ДоступноеПоле.Родитель.Заголовок, ""), ".", "")+ ", ";
						ИНаче
							Представление = Представление + ДоступноеПоле.Заголовок + ", ";
						КонецЕсли;
					КонецЦикла;
					
					Представление = Лев(Представление, СтрДлина(Представление) - 2);
				Иначе
					Представление = НСтр("ru = 'Таблица / диаграмма'");
				КонецЕсли;
				
				СтрокиГруппировки = Таблица.Добавить();
				СтрокиГруппировки.Идентификатор = ЭлементСтруктуры.ИдентификаторПользовательскойНастройки;
				СтрокиГруппировки.Использование = ЭлементСтруктуры.Использование;
				СтрокиГруппировки.Представление = Представление;
			КонецЦикла;
			
		КонецЕсли;
		
		Если Таблица.Количество() = 0 Тогда
			Элементы[ОписаниеРеквизита.ИмяГруппы].Видимость = Ложь;
		Иначе
			Элементы[ИмяТаблицы].ПутьКДанным = ИмяТаблицы;
			Элементы[ОписаниеРеквизита.ИмяКолонкиИспользование].ПутьКДанным = ИмяТаблицы + ".Использование";
			Элементы[ОписаниеРеквизита.ИмяКолонкиПредставление].ПутьКДанным = ИмяТаблицы + ".Представление";
			Если ТипОбщейНастройки = Тип("ПорядокКомпоновкиДанных") Тогда
				Элементы[ОписаниеРеквизита.ИмяКолонкиПорядок].ПутьКДанным = ИмяТаблицы + ".Направление";
				Элементы[ИмяТаблицы].УстановитьДействие("Выбор", "Подключаемый_ТаблицаПорядка_Выбор");
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	// Регистрация связи параметров выбора (динамическая связь, отключаемая флажком Использование).
	Найденные = Связи.ОбъектовМетаданных.НайтиСтроки(Новый Структура("ЕстьПодчиненные, ЕстьВедущие", Истина, Истина));
	Для Каждого СтрокаТаблицы Из Найденные Цикл
		ПодчиненныйИмяТипа = СтрЗаменить(СтрокаТаблицы.ПодчиненныйПолноеИмя, ".", "Ссылка.");
		ВедущийИмяТипа     = СтрЗаменить(СтрокаТаблицы.ВедущийПолноеИмя,     ".", "Ссылка.");
		Для Каждого ВедущийИдентификатор Из СтрокаТаблицы.ВедущийМассивИдентификаторов Цикл
			// Если ведущий - отбор, который имеет вид сравнения не равно, тогда связь игнорируется.
			Если НастройкиСВидомСравненияРавно.Получить(ВедущийИдентификатор) <> Истина Тогда
				Продолжить;
			КонецЕсли;
			
			ВсеСвязиВедущего = СоответствиеОтключаемыхСвязей.Получить(ВедущийИдентификатор);
			Если ВсеСвязиВедущего = Неопределено Тогда
				ВсеСвязиВедущего = Новый Структура;
			КонецЕсли;
			Если ВсеСвязиВедущего.Свойство("ПараметрыВыбораПодчиненныхПоТипуВедущего") Тогда
				ПараметрыВыбораПодчиненныхПоТипуВедущего = ВсеСвязиВедущего.ПараметрыВыбораПодчиненныхПоТипуВедущего;
			Иначе
				ПараметрыВыбораПодчиненныхПоТипуВедущего = Новый Массив;
			КонецЕсли;
			
			ИдентификаторКД = СоответствиеПользовательскихНастроек.Получить(ВедущийИдентификатор);
			ВедущийПользовательскаяНастройкаКД = Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.ПолучитьОбъектПоИдентификатору(ИдентификаторКД);
			Для Каждого ПодчиненныйИдентификатор Из СтрокаТаблицы.ПодчиненныйМассивИдентификаторов Цикл
				
				// Если ведущий может отключаться (используется НЕ всегда),
				//   то связь регистрируется в таблице связей.
				//   Связь должна включаться/отключаться из события ПриИзменении флажка Использование
				//   Если связь типизирована по владельцу
				//         - владелец имеет несколько типов
				//         - связь задана для конкретного типа
				//       тогда связь должна включаться/отключаться также и из обработчика события ПриИзменении.
				ОписаниеСвязи = Новый Структура;
				ОписаниеСвязи.Вставить("ВедущийТип", СтрокаТаблицы.ВедущийТип);
				ОписаниеСвязи.Вставить("ВедущийИмяРеквизита", ИменаОсновныхРеквизитовФормы[ВедущийИдентификатор]);
				ОписаниеСвязи.Вставить("ПодчиненныйИдентификатор", ПодчиненныйИдентификатор);
				ОписаниеСвязи.Вставить("ПодчиненныйИмяРеквизита", ИменаОсновныхРеквизитовФормы[ПодчиненныйИдентификатор]);
				ОписаниеСвязи.Вставить("ПодчиненныйИмяЭлемента", ИменаЭлементовДляУстановкиСвязей[ПодчиненныйИдентификатор]);
				ОписаниеСвязи.Вставить("ПодчиненныйИмяПараметраФормы", "Отбор." + СтрокаТаблицы.ПодчиненныйРеквизит);
				ОписаниеСвязи.Вставить("Действие", РежимИзмененияСвязанногоЗначения.НеИзменять);
				
				ПараметрыВыбораПодчиненныхПоТипуВедущего.Добавить(ОписаниеСвязи);
				
				// Если ведущий используется, тогда связь регистрируется в элементе подчиненного в соответствии с выбранным типом.
				Если ВедущийПользовательскаяНастройкаКД.Использование
					И ТипЗнч(ЭтаФорма[ОписаниеСвязи.ВедущийИмяРеквизита]) = ОписаниеСвязи.ВедущийТип Тогда
					ПодчиненныйЭлемент = Элементы.Найти(ОписаниеСвязи.ПодчиненныйИмяЭлемента);
					Если ПодчиненныйЭлемент <> Неопределено Тогда
						УстановитьСвязьПараметровВыбора(ПодчиненныйЭлемент, ОписаниеСвязи, Истина);
					КонецЕсли;
				КонецЕсли;
				
			КонецЦикла;
			
			ВсеСвязиВедущего.Вставить("ПараметрыВыбораПодчиненныхПоТипуВедущего", ПараметрыВыбораПодчиненныхПоТипуВедущего);
			СоответствиеОтключаемыхСвязей.Вставить(ВедущийИдентификатор, ВсеСвязиВедущего);
		КонецЦикла;
	КонецЦикла;
	
	ПоискЗначенийОбычныхНастроекПоПолюКомпоновкиДанных = Неопределено;
	
	// Связи по типу
	Для Каждого СтрокаТаблицы Из Связи.ПоТипу Цикл
		
		ВедущийИдентификатор = ПоискИдентификаторовБыстрыхНастроекПоПолюКомпоновкиДанных.Получить(СтрокаТаблицы.ВедущийПолеКД);
		ПодчиненныйИдентификатор = СтрокаТаблицы.ПодчиненныйИдентификатор;
		ПодчиненныйИмяЭлемента   = ИменаЭлементовДляУстановкиСвязей[ПодчиненныйИдентификатор];
		ПодчиненныйЭлемент       = Элементы.Найти(ПодчиненныйИмяЭлемента);
		
		Если ВедущийИдентификатор = Неопределено Тогда
			
			// Инициализация соответствия для быстрого поиска значений обычных настроек.
			Если ПоискЗначенийОбычныхНастроекПоПолюКомпоновкиДанных = Неопределено Тогда
				ПоискЗначенийОбычныхНастроекПоПолюКомпоновкиДанных = Новый Соответствие;
				РекурсивныйАнализНастроекКД(Неопределено, ПоискЗначенийОбычныхНастроекПоПолюКомпоновкиДанных); // Заполнение соответствия.
			КонецЕсли;
			
			// Поиск значения ведущего.
			ВедущийЗначение = ПоискЗначенийОбычныхНастроекПоПолюКомпоновкиДанных.Получить(СтрокаТаблицы.ВедущийПолеКД);
			Если ВедущийЗначение = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			// Установка фиксированного ограничения типа.
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(ТипЗнч(ВедущийЗначение));
			ПодчиненныйЭлемент.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов);
			
		Иначе
			
			// Регистрация отключаемой связи ведущего с подчиненным (по типу).
			ВсеСвязиВедущего = СоответствиеОтключаемыхСвязей.Получить(ВедущийИдентификатор);
			Если ВсеСвязиВедущего = Неопределено Тогда
				ВсеСвязиВедущего = Новый Структура;
			КонецЕсли;
			Если ВсеСвязиВедущего.Свойство("СвязиСПодчиненнымиПоТипу") Тогда
				СвязиСПодчиненнымиПоТипу = ВсеСвязиВедущего.СвязиСПодчиненнымиПоТипу;
			Иначе
				СвязиСПодчиненнымиПоТипу = Новый Массив;
			КонецЕсли;
			
			ОписаниеСвязи = Новый Структура;
			ОписаниеСвязи.Вставить("ВедущийИмяРеквизита", ИменаОсновныхРеквизитовФормы[ВедущийИдентификатор]);
			ОписаниеСвязи.Вставить("ПодчиненныйИдентификатор", ПодчиненныйИдентификатор);
			ОписаниеСвязи.Вставить("ПодчиненныйИмяРеквизита", ИменаОсновныхРеквизитовФормы[ПодчиненныйИдентификатор]);
			ОписаниеСвязи.Вставить("ПодчиненныйИмяЭлемента", ПодчиненныйИмяЭлемента);
			ОписаниеСвязи.Вставить("НомерСубконто", СтрокаТаблицы.НомерСубконто);
			
			СвязиСПодчиненнымиПоТипу.Добавить(ОписаниеСвязи);
			
			ВсеСвязиВедущего.Вставить("СвязиСПодчиненнымиПоТипу", СвязиСПодчиненнымиПоТипу);
			СоответствиеОтключаемыхСвязей.Вставить(ВедущийИдентификатор, ВсеСвязиВедущего);
			
			// Если ведущий используется, тогда связь регистрируется в элементе подчиненного в соответствии с выбранным типом.
			ИдентификаторКД = СоответствиеПользовательскихНастроек.Получить(ВедущийИдентификатор);
			ВедущийПользовательскаяНастройкаКД = Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.ПолучитьОбъектПоИдентификатору(ИдентификаторКД);
			Если ВедущийПользовательскаяНастройкаКД.Использование Тогда
				ПодчиненныйЭлемент.СвязьПоТипу = Новый СвязьПоТипу(ОписаниеСвязи.ВедущийИмяРеквизита, ОписаниеСвязи.НомерСубконто);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Связи параметров выбора
	Для Каждого СтрокаТаблицы Из Связи.ПараметровВыбора Цикл
		
		ВедущийИдентификатор = ПоискИдентификаторовБыстрыхНастроекПоПолюКомпоновкиДанных.Получить(СтрокаТаблицы.ВедущийПолеКД);
		ПодчиненныйИдентификатор = СтрокаТаблицы.ПодчиненныйИдентификатор;
		ПодчиненныйИмяЭлемента   = ИменаЭлементовДляУстановкиСвязей[ПодчиненныйИдентификатор];
		ПодчиненныйЭлемент       = Элементы[ПодчиненныйИмяЭлемента];
		
		Если ВедущийИдентификатор = Неопределено Тогда
			
			// Инициализация соответствия для быстрого поиска значений обычных настроек.
			Если ПоискЗначенийОбычныхНастроекПоПолюКомпоновкиДанных = Неопределено Тогда
				ПоискЗначенийОбычныхНастроекПоПолюКомпоновкиДанных = Новый Соответствие;
				РекурсивныйАнализНастроекКД(Неопределено, ПоискЗначенийОбычныхНастроекПоПолюКомпоновкиДанных);
			КонецЕсли;
			
			// Поиск значения ведущего.
			ВедущийЗначение = ПоискЗначенийОбычныхНастроекПоПолюКомпоновкиДанных.Получить(СтрокаТаблицы.ВедущийПолеКД);
			Если ВедущийЗначение = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			// Установка фиксированного значения параметра подчиненного.
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(ТипЗнч(ВедущийЗначение));
			ПодчиненныйЭлемент.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов);
			
		Иначе
			
			// Регистрация отключаемой связи ведущего с подчиненными (параметров выбора).
			ВсеСвязиВедущего = СоответствиеОтключаемыхСвязей.Получить(ВедущийИдентификатор);
			Если ВсеСвязиВедущего = Неопределено Тогда
				ВсеСвязиВедущего = Новый Структура;
			КонецЕсли;
			Если ВсеСвязиВедущего.Свойство("ПараметрыВыбораПодчиненных") Тогда
				ПараметрыВыбораПодчиненных = ВсеСвязиВедущего.ПараметрыВыбораПодчиненных;
			Иначе
				ПараметрыВыбораПодчиненных = Новый Массив;
			КонецЕсли;
			
			ОписаниеСвязи = Новый Структура;
			ОписаниеСвязи.Вставить("ВедущийИмяРеквизита",          ИменаОсновныхРеквизитовФормы[ВедущийИдентификатор]);
			ОписаниеСвязи.Вставить("ПодчиненныйИдентификатор",     ПодчиненныйИдентификатор);
			ОписаниеСвязи.Вставить("ПодчиненныйИмяРеквизита",      ИменаОсновныхРеквизитовФормы[ПодчиненныйИдентификатор]);
			ОписаниеСвязи.Вставить("ПодчиненныйИмяФлажка",         ИменаФлажковИспользование[ПодчиненныйИдентификатор]);
			ОписаниеСвязи.Вставить("ПодчиненныйИмяЭлемента",       ПодчиненныйИмяЭлемента);
			ОписаниеСвязи.Вставить("ПодчиненныйИмяПараметраФормы", СтрокаТаблицы.ПодчиненныйИмяПараметра);
			ОписаниеСвязи.Вставить("Действие",                     СтрокаТаблицы.Действие);
			
			ПараметрыВыбораПодчиненных.Добавить(ОписаниеСвязи);
			
			ВсеСвязиВедущего.Вставить("ПараметрыВыбораПодчиненных", ПараметрыВыбораПодчиненных);
			СоответствиеОтключаемыхСвязей.Вставить(ВедущийИдентификатор, ВсеСвязиВедущего);
			
			// Если ведущий используется, тогда связь регистрируется в элементе подчиненного в соответствии с выбранным типом.
			ИдентификаторКД = СоответствиеПользовательскихНастроек.Получить(ВедущийИдентификатор);
			ВедущийПользовательскаяНастройкаКД = Отчет.КомпоновщикНастроек.ПользовательскиеНастройки.ПолучитьОбъектПоИдентификатору(ИдентификаторКД);
			Если ВедущийПользовательскаяНастройкаКД.Использование Тогда
				УстановитьСвязьПараметровВыбора(ПодчиненныйЭлемент, ОписаниеСвязи, Истина);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Элементы.Периоды.ПодчиненныеЭлементы.Количество() > 0 Тогда
		Элементы.ПараметрыИОтборы.Отображение = ОбщегоНазначенияКлиентСервер.ОтображениеОбычнойГруппыЛиния();
	Иначе
		Элементы.ПараметрыИОтборы.Отображение = ОтображениеОбычнойГруппы.Нет;
	КонецЕсли;
	
	// Сохранение соответствий для быстрого поиска в данные формы.
	БыстрыйПоискПользовательскихНастроек = Новый ФиксированноеСоответствие(СоответствиеПользовательскихНастроек);
	БыстрыйПоискИменОбъектовМетаданных   = Новый ФиксированноеСоответствие(СоответствиеИменОбъектовМетаданных);
	БыстрыйПоискОтключаемыхСвязей        = Новый ФиксированноеСоответствие(СоответствиеОтключаемыхСвязей);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПодчиненныеЭлементы(Куда, Откуда, Рекурсивно)
	Для Каждого ПодчиненныйЭлемент Из Откуда Цикл
		Если Рекурсивно И (ТипЗнч(ПодчиненныйЭлемент) = Тип("ГруппаФормы") ИЛИ ТипЗнч(ПодчиненныйЭлемент) = Тип("ТаблицаФормы")) Тогда
			ДобавитьПодчиненныеЭлементы(Куда, ПодчиненныйЭлемент.ПодчиненныеЭлементы, Истина);
		КонецЕсли;
		Если ПостоянныеЭлементы.НайтиПоЗначению(ПодчиненныйЭлемент.Имя) = Неопределено Тогда
			Куда.Добавить(ПодчиненныйЭлемент);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура УстановитьКлючиФормы()
	Если ПравоВывода Тогда
		ЗаполнитьЗначенияСвойств(ОтчетТабличныйДокумент, НастройкиОтчета.ПараметрыПечатиПоУмолчанию);
		
		Уникальность = КлючОбъекта;
		Если ЗначениеЗаполнено(КлючТекущегоВарианта) Тогда
			Уникальность = Уникальность + "/КлючВарианта." + КлючТекущегоВарианта;
		КонецЕсли;
		
		ОтчетТабличныйДокумент.КлючПараметровПечати = Уникальность;
		КлючСохраненияПоложенияОкна = Уникальность;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ФоновоеЗаданиеЗагрузитьРезультат()
	
	ОтображениеСостояния = Элементы.ОтчетТабличныйДокумент.ОтображениеСостояния;
	ОтображениеСостояния.Видимость                      = Ложь;
	ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.НеИспользовать;
	ОтображениеСостояния.Картинка                       = Новый Картинка;
	ОтображениеСостояния.Текст                          = "";
	
	РезультатФормирования = ПолучитьИзВременногоХранилища(ФоновоеЗаданиеАдресХранилища);
	
	Если РезультатФормирования = Неопределено Тогда
		
		СформироватьНепосредственно();
		
	Иначе
		
		КлючПараметровПечатиДоКомпоновки = ОтчетТабличныйДокумент.КлючПараметровПечати;
		ОтчетТабличныйДокумент = РезультатФормирования.ОтчетТабличныйДокумент;
		ОтчетТабличныйДокумент.КлючПараметровПечати = КлючПараметровПечатиДоКомпоновки;
		
		Если ЗначениеЗаполнено(ОтчетДанныеРасшифровки) И ЭтоАдресВременногоХранилища(ОтчетДанныеРасшифровки) Тогда
			УдалитьИзВременногоХранилища(ОтчетДанныеРасшифровки);
		КонецЕсли;
		ОтчетДанныеРасшифровки = ПоместитьВоВременноеХранилище(РезультатФормирования.ОтчетРасшифровка, УникальныйИдентификатор);
		
		Перезаполнить = Ложь;
		Если РезультатФормирования.ВариантМодифицирован = Истина Тогда
			Перезаполнить = Истина;
			ВариантМодифицирован = Истина;
			Отчет.КомпоновщикНастроек.ЗагрузитьНастройки(РезультатФормирования.НастройкиКД);
		КонецЕсли;
		Если РезультатФормирования.ПользовательскиеНастройкиМодифицированы = Истина Тогда
			Перезаполнить = Истина;
			ПользовательскиеНастройкиМодифицированы = Истина;
			Отчет.КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(РезультатФормирования.ПользовательскиеНастройкиКД);
		КонецЕсли;
		Если Перезаполнить Тогда
			БыстрыеНастройкиЗагрузитьСхемуИОчиститьФорму(Неопределено, Неопределено);
			БыстрыеНастройкиЗаполнить();
		КонецЕсли;
		
	КонецЕсли;
	
	УдалитьИзВременногоХранилища(ФоновоеЗаданиеАдресХранилища);
	ФоновоеЗаданиеАдресХранилища = Неопределено;
	ФоновоеЗаданиеИдентификатор = Неопределено;
	
КонецПроцедуры

&НаСервере
Процедура ПоказатьОшибкиФормирования(ИнформацияОбОшибке)
	
	ОписаниеОшибки = ФункцииОтчетовКлиентСервер.КраткоеПредставлениеОшибкиФормированияОтчета(ИнформацияОбОшибке);
	
	ОтображениеСостояния = Элементы.ОтчетТабличныйДокумент.ОтображениеСостояния;
	ОтображениеСостояния.Видимость                      = Истина;
	ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.Неактуальность;
	ОтображениеСостояния.Картинка                       = Новый Картинка;
	ОтображениеСостояния.Текст                          = ?(ПустаяСтрока(ОписаниеОшибки), ПодробноеПредставлениеОшибки(ИнформацияОбОшибке), ОписаниеОшибки);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПредставлениеПользовательскойНастройки(ПользовательскаяНастройка, ОбщаяНастройка, ТипОбщейНастройки)
	
	Если ТипОбщейНастройки = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
		ЭлементЗаголовок = Строка(ПользовательскаяНастройка.ТипГруппы);
	ИначеЕсли ТипОбщейНастройки = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
		ЭлементЗаголовок = Строка(ОбщаяНастройка.ЛевоеЗначение);
	ИначеЕсли ТипОбщейНастройки = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
		ЭлементЗаголовок = Строка(ОбщаяНастройка.Параметр);
	ИначеЕсли ТипОбщейНастройки = Тип("ЭлементУсловногоОформленияКомпоновкиДанных") Тогда
		ЭлементЗаголовок = НСтр("ru = 'Оформление'");
		Если НЕ ПустаяСтрока(Строка(ПользовательскаяНастройка.Оформление)) Тогда
			ЭлементЗаголовок = ЭлементЗаголовок +" ("+ НРег(Строка(ПользовательскаяНастройка.Оформление)) +")";
		КонецЕсли;
	ИначеЕсли ТипОбщейНастройки = Тип("ГруппировкаКомпоновкиДанных") Тогда
		Суффикс = СокрЛП(Строка(ОбщаяНастройка.ПоляГруппировки));
		ЭлементЗаголовок = НСтр("ru = 'Группировка'") + ?(Суффикс = "", "", " '" + Суффикс + "'");
	ИначеЕсли ТипОбщейНастройки = Тип("ГруппировкаДиаграммыКомпоновкиДанных") Тогда
		Суффикс = СокрЛП(Строка(ОбщаяНастройка.ПоляГруппировки));
		ЭлементЗаголовок = НСтр("ru = 'Группировка диаграммы'") + ?(Суффикс = "", "", " '" + Суффикс + "'");
	ИначеЕсли ТипОбщейНастройки = Тип("ВыбранныеПоляКомпоновкиДанных") Тогда
		ЭлементЗаголовок = НСтр("ru = 'Выбранные поля'");
	ИначеЕсли ТипОбщейНастройки = Тип("ПорядокКомпоновкиДанных") Тогда
		ЭлементЗаголовок = НСтр("ru = 'Сортировка'");
	ИначеЕсли ТипОбщейНастройки = Тип("ОтборКомпоновкиДанных") Тогда
		ЭлементЗаголовок = НСтр("ru = 'Отбор'");
	ИначеЕсли ТипОбщейНастройки = Тип("УсловноеОформлениеКомпоновкиДанных") Тогда
		ЭлементЗаголовок = НСтр("ru = 'Условное оформление'");
	ИначеЕсли ТипОбщейНастройки = Тип("СтруктураНастроекКомпоновкиДанных") Тогда
		ЭлементЗаголовок = НСтр("ru = 'Структура настроек'");
	ИначеЕсли ТипОбщейНастройки = Тип("ТаблицаКомпоновкиДанных") Тогда
		ЭлементЗаголовок = НСтр("ru = 'Таблица'");
	ИначеЕсли ТипОбщейНастройки = Тип("ГруппировкаТаблицыКомпоновкиДанных") Тогда
		ЭлементЗаголовок = НСтр("ru = 'Группировка таблицы'");
	ИначеЕсли ТипОбщейНастройки = Тип("ДиаграммаКомпоновкиДанных") Тогда
		ЭлементЗаголовок = НСтр("ru = 'Диаграмма'");
	ИначеЕсли ТипОбщейНастройки = Тип("ГруппировкаДиаграммыМакетаКомпоновкиДанных") Тогда
		ЭлементЗаголовок = НСтр("ru = 'Группировка диаграммы макета'");
	ИначеЕсли ТипОбщейНастройки = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда
		ЭлементЗаголовок = СтрЗаменить(НСтр("ru = 'Вложенная группировка ''%1'''"), "%1", Строка(ПользовательскаяНастройка));
	Иначе
		ЭлементЗаголовок = Строка(ПользовательскаяНастройка);
	КонецЕсли;
	
	Возврат СокрЛП(ЭлементЗаголовок);
КонецФункции

&НаСервереБезКонтекста
Процедура АнализТиповИСвязей(ИдентификаторЭлемента, ДоступнаяНастройка, ШаблонГенерации, ИменаОбъектовМетаданных, Связи)
	
	КоличествоИзвестныхТипов = 0;
	
	ИсходноеОписаниеТипов = ДоступнаяНастройка.ТипЗначения;
	ДобавляемыеТипы = Новый Массив;
	ВычитаемыеТипы = Новый Массив;
	
	ШаблонГенерации.Вставить("СодержитТипТип",        Ложь);
	ШаблонГенерации.Вставить("СодержитТипДата",       Ложь);
	ШаблонГенерации.Вставить("СодержитТипБулево",     Ложь);
	ШаблонГенерации.Вставить("СодержитТипЧисло",      Ложь);
	ШаблонГенерации.Вставить("СодержитТипПериод",     Ложь);
	ШаблонГенерации.Вставить("СодержитДругиеТипы",    Ложь);
	ШаблонГенерации.Вставить("СодержитСсылочныеТипы", Ложь);
	
	ДоступнаяНастройкаТипы = ИсходноеОписаниеТипов.Типы();
	Для Каждого Тип Из ДоступнаяНастройкаТипы Цикл
		Если Тип = Тип("ПолеКомпоновкиДанных") Тогда
			ВычитаемыеТипы.Добавить(Тип);
		ИначеЕсли Тип = Тип("Тип") Тогда
			ШаблонГенерации.СодержитТипТип = Истина;
			ДобавляемыеТипы.Добавить(Тип("ОписаниеТипов"));
			ВычитаемыеТипы.Добавить(Тип("Тип"));
		ИначеЕсли Тип = Тип("Дата") Тогда
			ШаблонГенерации.СодержитТипДата = Истина;
		ИначеЕсли Тип = Тип("Булево") Тогда
			ШаблонГенерации.СодержитТипБулево = Истина;
		ИначеЕсли Тип = Тип("Число") Тогда
			ШаблонГенерации.СодержитТипЧисло = Истина;
		ИначеЕсли Тип = Тип("СтандартныйПериод") Тогда
			ШаблонГенерации.СодержитТипПериод = Истина;
		Иначе
			ШаблонГенерации.СодержитДругиеТипы = Истина;
			
			ОбъектМетаданных = Метаданные.НайтиПоТипу(Тип);
			Если ОбъектМетаданных <> Неопределено Тогда
				ШаблонГенерации.СодержитСсылочныеТипы = Истина;
				
				ПолноеИмя = ОбъектМетаданных.ПолноеИмя();
				
				// Регистрация имени объекта метаданных.
				ИменаОбъектовМетаданных.Вставить(Тип, ПолноеИмя);
				
				// Поиск типа в глобальных связях среди подчиненных.
				Найденные = Связи.ОбъектовМетаданных.НайтиСтроки(Новый Структура("ПодчиненныйТип", Тип));
				Для Каждого СтрокаТаблицы Из Найденные Цикл // Регистрация настройки как подчиненной.
					СтрокаТаблицы.ЕстьПодчиненные = Истина;
					СтрокаТаблицы.ПодчиненныйПолноеИмя = ПолноеИмя;
					СтрокаТаблицы.ПодчиненныйМассивИдентификаторов.Добавить(ИдентификаторЭлемента);
				КонецЦикла;
				
				// Поиск типа в глобальных связях среди ведущих.
				Найденные = Связи.ОбъектовМетаданных.НайтиСтроки(Новый Структура("ВедущийТип", Тип));
				Для Каждого СтрокаТаблицы Из Найденные Цикл // Регистрация настройки как ведущей.
					СтрокаТаблицы.ЕстьВедущие = Истина;
					СтрокаТаблицы.ВедущийПолноеИмя = ПолноеИмя;
					СтрокаТаблицы.ВедущийМассивИдентификаторов.Добавить(ИдентификаторЭлемента);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ОписаниеТипов = Новый ОписаниеТипов(ИсходноеОписаниеТипов, ДобавляемыеТипы, ВычитаемыеТипы);
	
	ШаблонГенерации.Вставить("ОписаниеТипов", ОписаниеТипов);
	ШаблонГенерации.Вставить("КоличествоТипов", ОписаниеТипов.Типы().Количество());
	
	// Переменные цикла
	ПараметрыВыбора = Новый Массив;
	
	Если ЗначениеЗаполнено(ДоступнаяНастройка.СвязьПоТипу) Тогда
		
		СтрокаСвязи = Связи.ПоТипу.Добавить();
		СтрокаСвязи.ПодчиненныйИдентификатор = ИдентификаторЭлемента;
		СтрокаСвязи.ВедущийПолеКД            = ДоступнаяНастройка.СвязьПоТипу.Поле;
		СтрокаСвязи.НомерСубконто            = ДоступнаяНастройка.СвязьПоТипу.ЭлементСвязи;
		
	КонецЕсли;
	
	Для Каждого СтрокаСвязи Из ДоступнаяНастройка.ПолучитьСвязиПараметровВыбора() Цикл
		
		Если Не ПустаяСтрока(Строка(СтрокаСвязи.Поле)) Тогда
			СтрокаСвязиПараметров = Связи.ПараметровВыбора.Добавить();
			СтрокаСвязиПараметров.ПодчиненныйИдентификатор = ИдентификаторЭлемента;
			СтрокаСвязиПараметров.ПодчиненныйИмяПараметра  = СтрокаСвязи.Имя;
			СтрокаСвязиПараметров.ВедущийПолеКД            = СтрокаСвязи.Поле;
			СтрокаСвязиПараметров.Действие                 = СтрокаСвязи.ИзменениеЗначения;
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого ПараметрВыбораКД Из ДоступнаяНастройка.ПолучитьПараметрыВыбора() Цикл
		ПараметрыВыбора.Добавить(Новый ПараметрВыбора(ПараметрВыбораКД.Имя, ПараметрВыбораКД.Значение));
	КонецЦикла;
	
	Если ПараметрыВыбора.Количество() > 0 Тогда
		ШаблонГенерации.Вставить("ПараметрыВыбора", ПараметрыВыбора);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьСвязьПараметровВыбора(ПодчиненныйЭлемент, СтруктураСвязи, ВключитьСвязь)
	
	Если ПустаяСтрока(СтруктураСвязи.ПодчиненныйИмяПараметраФормы) Тогда
		Возврат;
	КонецЕсли;
	
	СвязьНайдена = Ложь;
	
	МассивЭлементов = Новый Массив;
	Для Каждого СвязьПараметра Из ПодчиненныйЭлемент.СвязиПараметровВыбора Цикл
		Если СвязьПараметра.ПутьКДанным = СтруктураСвязи.ВедущийИмяРеквизита
			И СвязьПараметра.Имя = СтруктураСвязи.ПодчиненныйИмяПараметраФормы
			И СвязьПараметра.ИзменениеЗначения = СтруктураСвязи.Действие Тогда
			Если ВключитьСвязь Тогда
				Возврат; // Включать не требуется - связь найдена.
			Иначе
				СвязьНайдена = Истина;
			КонецЕсли;
		Иначе
			МассивЭлементов.Добавить(СвязьПараметра);
		КонецЕсли;
	КонецЦикла;
	
	Если Не ВключитьСвязь И Не СвязьНайдена Тогда
		Возврат; // Отключать не требуется - связь не найдена.
	КонецЕсли;
	
	Если ВключитьСвязь Тогда
		МассивЭлементов.Добавить(Новый СвязьПараметраВыбора(СтруктураСвязи.ПодчиненныйИмяПараметраФормы, СтруктураСвязи.ВедущийИмяРеквизита, СтруктураСвязи.Действие));
	КонецЕсли;
	
	ПодчиненныйЭлемент.СвязиПараметровВыбора = Новый ФиксированныйМассив(МассивЭлементов);
	
КонецПроцедуры

&НаСервере
Функция СоздатьСтруктуруТаблицСвязей()
	
	Связи = Новый Структура;
	
	// Связи из СКД.
	ТаблицаСвязейПоТипу = Новый ТаблицаЗначений;
	ТаблицаСвязейПоТипу.Колонки.Добавить("ПодчиненныйИдентификатор");
	ТаблицаСвязейПоТипу.Колонки.Добавить("ВедущийПолеКД");
	ТаблицаСвязейПоТипу.Колонки.Добавить("НомерСубконто");
	Связи.Вставить("ПоТипу", ТаблицаСвязейПоТипу);
	
	ТаблицаСвязейПараметровВыбора = Новый ТаблицаЗначений;
	ТаблицаСвязейПараметровВыбора.Колонки.Добавить("ПодчиненныйИдентификатор");
	ТаблицаСвязейПараметровВыбора.Колонки.Добавить("ВедущийПолеКД");
	ТаблицаСвязейПараметровВыбора.Колонки.Добавить("ПодчиненныйИмяПараметра");
	ТаблицаСвязейПараметровВыбора.Колонки.Добавить("Действие");
	Связи.Вставить("ПараметровВыбора", ТаблицаСвязейПараметровВыбора);
	
	// Связи из метаданных.
	ТаблицаСвязейОбъектовМетаданных = Новый ТаблицаЗначений;
	ТаблицаСвязейОбъектовМетаданных.Колонки.Добавить("ПодчиненныйРеквизит", Новый ОписаниеТипов("Строка"));
	ТаблицаСвязейОбъектовМетаданных.Колонки.Добавить("ПодчиненныйТип",      Новый ОписаниеТипов("Тип"));
	ТаблицаСвязейОбъектовМетаданных.Колонки.Добавить("ВедущийТип",          Новый ОписаниеТипов("Тип"));
	
	ФормаОтчетаПереопределяемый.ДополнитьСвязиОбъектовМетаданных(ТаблицаСвязейОбъектовМетаданных);
	
	ТаблицаСвязейОбъектовМетаданных.Колонки.Добавить("ЕстьПодчиненные",                  Новый ОписаниеТипов("Булево"));
	ТаблицаСвязейОбъектовМетаданных.Колонки.Добавить("ПодчиненныйПолноеИмя",             Новый ОписаниеТипов("Строка"));
	ТаблицаСвязейОбъектовМетаданных.Колонки.Добавить("ПодчиненныйМассивИдентификаторов", Новый ОписаниеТипов("Массив"));
	ТаблицаСвязейОбъектовМетаданных.Колонки.Добавить("ЕстьВедущие",                      Новый ОписаниеТипов("Булево"));
	ТаблицаСвязейОбъектовМетаданных.Колонки.Добавить("ВедущийПолноеИмя",                 Новый ОписаниеТипов("Строка"));
	ТаблицаСвязейОбъектовМетаданных.Колонки.Добавить("ВедущийМассивИдентификаторов",     Новый ОписаниеТипов("Массив"));
	Связи.Вставить("ОбъектовМетаданных", ТаблицаСвязейОбъектовМетаданных);
	
	Возврат Связи;
	
КонецФункции

&НаСервере
Процедура РекурсивныйАнализНастроекКД(Коллекция, Соответствие)
	Если Коллекция = Неопределено Тогда
		РекурсивныйАнализНастроекКД(Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы, Соответствие);
		РекурсивныйАнализНастроекКД(Отчет.КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы, Соответствие);
		РекурсивныйАнализНастроекКД(Отчет.КомпоновщикНастроек.ФиксированныеНастройки.Отбор.Элементы, Соответствие);
		РекурсивныйАнализНастроекКД(Отчет.КомпоновщикНастроек.ФиксированныеНастройки.ПараметрыДанных.Элементы, Соответствие);
	Иначе
		// Регистрация значений включенных отборов и параметров КД, не выведенных в быстрый доступ.
		Для Каждого ОбщаяНастройка Из Коллекция Цикл
			// ЭлементОтбораКомпоновкиДанных, ГруппаЭлементовОтбораКомпоновкиДанных,
			// ЗначениеПараметраКомпоновкиДанных, ЗначениеПараметраНастроекКомпоновкиДанных.
			Если ТипЗнч(ОбщаяНастройка) = Тип("ЗначениеПараметраКомпоновкиДанных") Тогда
				Значение = ОбщаяНастройка.Значение;
				Если ЗначениеЗаполнено(Значение) Тогда
					ПолеКД = Новый ПолеКомпоновкиДанных("ПараметрыДанных." + Строка(ОбщаяНастройка.Параметр));
					Соответствие.Вставить(ПолеКД, Значение);
				КонецЕсли;
				РекурсивныйАнализНастроекКД(ОбщаяНастройка.ЗначенияВложенныхПараметров, Соответствие);
				Продолжить;
			КонецЕсли;
			
			Если ОбщаяНастройка.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ
				И ЗначениеЗаполнено(ОбщаяНастройка.ИдентификаторПользовательскойНастройки) Тогда
				Продолжить;
			КонецЕсли;
			Если ОбщаяНастройка.Использование <> Истина Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТипЗнч(ОбщаяНастройка) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
				РекурсивныйАнализНастроекКД(ОбщаяНастройка.Элементы, Соответствие);
				Продолжить;
			КонецЕсли;
			
			Если ТипЗнч(ОбщаяНастройка) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
				Значение = ОбщаяНастройка.ПравоеЗначение;
				Если ЗначениеЗаполнено(Значение) Тогда
					ПолеКД = ОбщаяНастройка.ЛевоеЗначение;
					Соответствие.Вставить(ПолеКД, Значение);
				КонецЕсли;
			ИначеЕсли ТипЗнч(ОбщаяНастройка) = Тип("ЗначениеПараметраКомпоновкиДанных") Тогда
				Значение = ОбщаяНастройка.ПравоеЗначение;
				Если ЗначениеЗаполнено(Значение) Тогда
					ПолеКД = Новый ПолеКомпоновкиДанных("ПараметрыДанных." + Строка(ОбщаяНастройка.Параметр));
					Соответствие.Вставить(ПолеКД, Значение);
				КонецЕсли;
				РекурсивныйАнализНастроекКД(ОбщаяНастройка.ЗначенияВложенныхПараметров, Соответствие);
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры
