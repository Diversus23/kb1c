////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ДействияПриСохраненииСЭЦП = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ЭЦП", "ДействияПриСохраненииСЭЦП");
	Если НЕ ЗначениеЗаполнено(ДействияПриСохраненииСЭЦП) Тогда
		ДействияПриСохраненииСЭЦП = Перечисления.ДействияПриСохраненииСЭЦП.Спрашивать;
	КонецЕсли;
	
	РасширениеДляЗашифрованныхФайлов = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ЭЦП", "РасширениеДляЗашифрованныхФайлов");
	Если НЕ ЗначениеЗаполнено(РасширениеДляЗашифрованныхФайлов) Тогда
		РасширениеДляЗашифрованныхФайлов = "p7m";
	КонецЕсли;
	
	РасширениеДляФайловПодписи = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ЭЦП", "РасширениеДляФайловПодписи");
	Если НЕ ЗначениеЗаполнено(РасширениеДляФайловПодписи) Тогда
		РасширениеДляФайловПодписи = "p7s";
	КонецЕсли;
	
	ПутьМодуляКриптографии = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ЭЦП", "ПутьМодуляКриптографии");
	
	Элементы.ПараметрыВебКлиентаПодУправлениемLinux.Видимость = ОбщегоНазначенияКлиентСервер.ЭтоВебКлиент() И ОбщегоНазначенияКлиентСервер.ЭтоLinuxКлиент();
	
	ОтпечатокЛичногоСертификатаДляШифрования = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ЭЦП", "ОтпечатокЛичногоСертификатаДляШифрования");
	
	Если НЕ Параметры.Свойство("ПоказыватьНастройкиШифрования") Тогда
		Элементы.ЛичныйСертификатДляШифрования.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ОтпечатокЛичногоСертификатаДляШифрования <> Неопределено И НЕ ПустаяСтрока(ОтпечатокЛичногоСертификатаДляШифрования) Тогда
		Сертификат = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьСертификатПоОтпечатку(ОтпечатокЛичногоСертификатаДляШифрования, Истина); // ТолькоЛичные
		Если Сертификат = Неопределено Тогда		
			ОтпечатокЛичногоСертификатаДляШифрования = "";
		Иначе
			СтруктураСертификата = ЭлектроннаяЦифроваяПодписьКлиент.ЗаполнитьСтруктуруСертификатаПоОтпечатку(ОтпечатокЛичногоСертификатаДляШифрования);
			ЛичныйСертификатДляШифрования = СтруктураСертификата.КомуВыдан;
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ВРег(ИсточникВыбора.ИмяФормы) = ВРег("ОбщаяФорма.ВыборСертификата") Тогда
		
		Если ТипЗнч(ВыбранноеЗначение) <> Тип("Структура") Тогда
			Возврат;
		КонецЕсли;
		
		ОтпечатокЛичногоСертификатаДляШифрования = ВыбранноеЗначение.Отпечаток;
		СтруктураСертификата = ЭлектроннаяЦифроваяПодписьКлиент.ЗаполнитьСтруктуруСертификатаПоОтпечатку(ОтпечатокЛичногоСертификатаДляШифрования);
		ЛичныйСертификатДляШифрования = СтруктураСертификата.КомуВыдан;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ЛичныйСертификатНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если НЕ ПодключитьРасширениеРаботыСКриптографией() Тогда
		Предупреждение(
			НСтр("ru='Для выбора сертификата необходимо
			         |установить расширение работы с криптографией.'"));
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	МассивСтруктурЛичныхСертификатов = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьМассивСтруктурСертификатов(Истина); // ТолькоЛичные
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("МассивСтруктурСертификатов", МассивСтруктурЛичныхСертификатов);
	ОткрытьФорму("ОбщаяФорма.ВыборСертификата", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ЛичныйСертификатОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ОтпечатокЛичногоСертификатаДляШифрования <> Неопределено И НЕ ПустаяСтрока(ОтпечатокЛичногоСертификатаДляШифрования) Тогда
		ЭлектроннаяЦифроваяПодписьКлиент.ОткрытьСертификат(ОтпечатокЛичногоСертификатаДляШифрования);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЛичныйСертификатОчистка(Элемент, СтандартнаяОбработка)
	ОтпечатокЛичногоСертификатаДляШифрования = "";
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура ОК(Команда)
	
	ОчиститьСообщения();
	
	Если НЕ СохранитьНастройки() Тогда
		Возврат;
	КонецЕсли;
	
	Закрыть();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

&НаСервере
Функция СохранитьНастройки()
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	МассивСтруктур = Новый Массив;
	
	Элемент = Новый Структура;
	Элемент.Вставить("Объект", "ЭЦП");
	Элемент.Вставить("Настройка", "ДействияПриСохраненииСЭЦП");
	Элемент.Вставить("Значение", ДействияПриСохраненииСЭЦП);
	МассивСтруктур.Добавить(Элемент);
	
	Элемент = Новый Структура;
	Элемент.Вставить("Объект", "ЭЦП");
	Элемент.Вставить("Настройка", "ПутьМодуляКриптографии");
	Элемент.Вставить("Значение", ПутьМодуляКриптографии);
	МассивСтруктур.Добавить(Элемент);
	
	Элемент = Новый Структура;
	Элемент.Вставить("Объект", "ЭЦП");
	Элемент.Вставить("Настройка", "РасширениеДляЗашифрованныхФайлов");
	Элемент.Вставить("Значение", РасширениеДляЗашифрованныхФайлов);
	МассивСтруктур.Добавить(Элемент);
	
	Элемент = Новый Структура;
	Элемент.Вставить("Объект", "ЭЦП");
	Элемент.Вставить("Настройка", "ОтпечатокЛичногоСертификатаДляШифрования");
	Элемент.Вставить("Значение", ОтпечатокЛичногоСертификатаДляШифрования);
	МассивСтруктур.Добавить(Элемент);
	
	Элемент = Новый Структура;
	Элемент.Вставить("Объект", "ЭЦП");
	Элемент.Вставить("Настройка", "РасширениеДляФайловПодписи");
	Элемент.Вставить("Значение", РасширениеДляФайловПодписи);
	МассивСтруктур.Добавить(Элемент);
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранитьМассив(МассивСтруктур);
	
	Возврат Истина;
	
КонецФункции
