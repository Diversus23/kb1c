////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство("АвтоТест") Тогда
		Возврат;
	КонецЕсли;
	
	КартинкаБыстрыйДоступ = БиблиотекаКартинок.БыстрыйДоступ;
	
	РазделПолноеИмя = "Подсистема." + СтрЗаменить(Параметры.ПутьКПодсистеме, ".", ".Подсистема.");
	РазделМетаданные = Метаданные.НайтиПоПолномуИмени(РазделПолноеИмя);
	РазделСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(РазделМетаданные);
	
	Если Параметры.Свойство("Заголовок") Тогда
		Заголовок = Параметры.Заголовок;
	Иначе
		Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Отчеты раздела ""%1""'"),
			РазделМетаданные.Представление());
	КонецЕсли;
	
	ЭтаФорма.КлючНазначенияИспользования = "Раздел_" + Строка(РазделСсылка.УникальныйИдентификатор());
	
	ВсеПодсистемы = ВариантыОтчетовПовтИсп.ПодсистемыТекущегоПользователя();
	Найденные = ВсеПодсистемы.Строки.НайтиСтроки(Новый Структура("РазделСсылка", РазделСсылка), Истина);
	
	Если Найденные.Количество() = 0 Тогда
		МассивДляОбхода = ВсеПодсистемы.Строки.НайтиСтроки(Новый Структура("Ссылка", РазделСсылка), Истина);
		Пока МассивДляОбхода.Количество() > 0 Цикл
			ТекущаяСтрокаДерева = МассивДляОбхода[0];
			Для Каждого СтрокаДерева Из ТекущаяСтрокаДерева.Строки Цикл
				МассивДляОбхода.Добавить(СтрокаДерева);
			КонецЦикла;
			Найденные.Добавить(ТекущаяСтрокаДерева);
			МассивДляОбхода.Удалить(0);
		КонецЦикла;
	КонецЕсли;
		
	Для Каждого СтрокаДерева Из Найденные Цикл
		СтрокаТаблицы = ТаблицаПодсистем.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаДерева);
		СтрокаТаблицы.ИмяЭлемента    = СтрЗаменить(СтрокаТаблицы.ПолноеИмя, ".", "_");
		СтрокаТаблицы.НомерЭлемента  = 0;
		Если СтрокаДерева.Ссылка <> РазделСсылка Тогда
			СтрокаТаблицы.РодительСсылка = СтрокаДерева.Родитель.Ссылка;
		КонецЕсли;
	КонецЦикла;
	
	ЦветСкрытыхВариантов = ЦветаСтиля.СкрытыйВариантОтчетаЦвет;
	ЦветВидимыхВариантов = ЦветаСтиля.ВидимыйВариантОтчетаЦвет;
	ЦветГруппыВариантовОтчетов = ЦветаСтиля.ГруппаВариантовОтчетовЦвет;
	ШрифтЖирный = Новый Шрифт(, , Истина);
	
	НаборРеквизитов = ПолучитьРеквизиты();
	Для Каждого Реквизит Из НаборРеквизитов Цикл
		ПостоянныеРеквизиты.Добавить(Реквизит.Имя);
	КонецЦикла;
	
	Для Каждого Команда Из Команды Цикл
		ПостоянныеКоманды.Добавить(Команда.Имя);
	КонецЦикла;
	
	ОбновитьПанельОтчетов(Ложь, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	#Если ВебКлиент Тогда
		ВебКлиент = Истина;
	#Иначе
		ВебКлиент = Ложь;
	#КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = ВариантыОтчетовКлиентСервер.ИмяСобытияИзменениеВарианта() Тогда
		СохранитьНастройки = Ложь;
		ОставитьИзмененияВНастройках = РежимНастройки;
		ОбновитьПанельОтчетов(СохранитьНастройки, ОставитьИзмененияВНастройках);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	// Вызывается после загрузки данных из настроек в реквизиты формы
	
	ОтборНаименованиеСписокВыбора = Настройки.Получить("ОтборНаименованиеСписокВыбора");
	Если ТипЗнч(ОтборНаименованиеСписокВыбора) = Тип("Массив") Тогда
		Элементы.ОтборНаименование.СписокВыбора.ЗагрузитьЗначения(ОтборНаименованиеСписокВыбора);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	Настройки.Вставить("ОтборНаименованиеСписокВыбора", Элементы.ОтборНаименование.СписокВыбора.ВыгрузитьЗначения());
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	Если ВариантыОтчетовКлиент.СохранитьДанныеПроизвольнойФормы(Модифицированность, Отказ) Тогда
		СохранитьПользовательскиеНастройки();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	Если ВариантыОтчетовКлиент.СохранитьДанныеПроизвольнойФормы(Модифицированность) Тогда
		СохранитьПользовательскиеНастройки();
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ШАПКИ ФОРМЫ

&НаКлиенте
Процедура ВариантНажатие(Элемент)
	Найденные = ДобавленныеВарианты.НайтиСтроки(Новый Структура("НадписьИмя", Элемент.Имя));
	Если Найденные.Количество() <> 1 Тогда
		Возврат;
	КонецЕсли;
	Вариант = Найденные[0];
	
	// Открытие
	Если Вариант.Дополнительный Тогда
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("КлючВарианта", Вариант.КлючВарианта);
		ПараметрыОткрытия.Вставить("Вариант",      Вариант.Ссылка);
		ПараметрыОткрытия.Вставить("Отчет",        Вариант.Отчет);
		ВариантыОтчетовКлиент.ОткрытьВариантДополнительногоОтчета(ПараметрыОткрытия);
		
	ИначеЕсли Не ЗначениеЗаполнено(Вариант.ИмяОтчета) Тогда
		
		Предупреждение(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не заполнено имя отчета для варианта ""%1"".'"),
				Вариант.Наименование));
		
	Иначе
		
		Уникальность = "Отчет." + Вариант.ИмяОтчета;
		Если ЗначениеЗаполнено(Вариант.КлючВарианта) Тогда
			Уникальность = Уникальность + "/КлючВарианта." + Вариант.КлючВарианта;
		КонецЕсли;
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("КлючВарианта", Вариант.КлючВарианта);
		ПараметрыОткрытия.Вставить("Раздел", РазделСсылка);
		ПараметрыОткрытия.Вставить("КлючПараметровПечати", Уникальность);
		ПараметрыОткрытия.Вставить("КлючСохраненияПоложенияОкна", Уникальность);
		
		ОткрытьФорму("Отчет." + Вариант.ИмяОтчета + ".Форма", ПараметрыОткрытия, Неопределено, Уникальность);
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВидимостьВариантаПриИзменении(Элемент)
	Флажок = Элемент;
	Показать = ЭтаФорма[Флажок.Имя];
	
	НадписьИмя = Сред(Флажок.Имя, СтрДлина("Флажок_")+1);
	Элемент = Элементы.Найти(НадписьИмя);
	Найденные = ДобавленныеВарианты.НайтиСтроки(Новый Структура("НадписьИмя", НадписьИмя));
	Если Найденные.Количество() <> 1 ИЛИ Элемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Вариант = Найденные[0];
	
	ПоказатьСкрытьВариант(Вариант, Элемент, Показать);
КонецПроцедуры

&НаКлиенте
Процедура ОтборНаименованиеПриИзменении(Элемент)
	Если ЗначениеЗаполнено(ОтборНаименование) Тогда
		СписокВыбора = Элементы.ОтборНаименование.СписокВыбора;
		ЭлементСписка = СписокВыбора.НайтиПоЗначению(ОтборНаименование);
		Если ЭлементСписка = Неопределено Тогда
			СписокВыбора.Вставить(0, ОтборНаименование);
			Если СписокВыбора.Количество() > 10 Тогда
				СписокВыбора.Удалить(10);
			КонецЕсли;
		Иначе
			Индекс = СписокВыбора.Индекс(ЭлементСписка);
			Если Индекс <> 0 Тогда
				СписокВыбора.Сдвинуть(Индекс, -Индекс);
			КонецЕсли;
		КонецЕсли;
		ТекущийЭлемент = Элементы.ОтборНаименование;
	КонецЕсли;
	
	ОбновитьПанельОтчетов(Ложь, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ОтборАвторПриИзменении(Элемент)
	ОбновитьПанельОтчетов(Ложь, Истина);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ КОМАНД ФОРМЫ

&НаКлиенте
Процедура Настроить(Команда)
	РежимНастройки = НЕ РежимНастройки;
	СохранитьНастройки = Ложь;
	Если НЕ РежимНастройки И Модифицированность Тогда
		ТекстВопроса = НСтр("ru = 'Настройки расположения отчетов были изменены.
		|Сохранить изменения?'");
		
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да); 
		Если Ответ = КодВозвратаДиалога.Да Тогда
			СохранитьНастройки = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьПанельОтчетов(СохранитьНастройки, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура СохранитьИзменения(Команда)
	РежимНастройки = Ложь;
	ОбновитьПанельОтчетов(Истина, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьИзменения(Команда)
	РежимНастройки = Ложь;
	ОбновитьПанельОтчетов(Ложь, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВБыстрыйДоступ(Команда)
	Если ВебКлиент Тогда
		Элемент = Элементы.Найти(Сред(Команда.Имя, Найти(Команда.Имя, "_")+1));
	Иначе
		Элемент = ТекущийЭлемент;
	КонецЕсли;
	Если ТипЗнч(Элемент) <> Тип("ДекорацияФормы") Тогда
		Возврат;
	КонецЕсли;
	
	Найденные = ДобавленныеВарианты.НайтиСтроки(Новый Структура("НадписьИмя", Элемент.Имя));
	Если Найденные.Количество() <> 1 Тогда
		Возврат;
	КонецЕсли;
	Вариант = Найденные[0];
	
	ДобавитьУбратьВариантИзБыстрогоДоступа(Вариант, Элемент, Истина);
КонецПроцедуры

&НаКлиенте
Процедура УбратьИзБыстрогоДоступа(Команда)
	Если ВебКлиент Тогда
		Элемент = Элементы.Найти(Сред(Команда.Имя, Найти(Команда.Имя, "_")+1));
	Иначе
		Элемент = ТекущийЭлемент;
	КонецЕсли;
	Если ТипЗнч(Элемент) <> Тип("ДекорацияФормы") Тогда
		Возврат;
	КонецЕсли;
	
	Найденные = ДобавленныеВарианты.НайтиСтроки(Новый Структура("НадписьИмя", Элемент.Имя));
	Если Найденные.Количество() <> 1 Тогда
		Возврат;
	КонецЕсли;
	Вариант = Найденные[0];
	
	ДобавитьУбратьВариантИзБыстрогоДоступа(Вариант, Элемент, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура Изменить(Команда)
	Если ВебКлиент Тогда
		Элемент = Элементы.Найти(Сред(Команда.Имя, Найти(Команда.Имя, "_")+1));
	Иначе
		Элемент = ТекущийЭлемент;
	КонецЕсли;
	Если ТипЗнч(Элемент) <> Тип("ДекорацияФормы") Тогда
		Возврат;
	КонецЕсли;
	
	Найденные = ДобавленныеВарианты.НайтиСтроки(Новый Структура("НадписьИмя", Элемент.Имя));
	Если Найденные.Количество() <> 1 Тогда
		Возврат;
	КонецЕсли;
	Вариант = Найденные[0];
	
	ОткрытьЗначение(Вариант.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура СброситьНастройки(Команда)
	ТекстВопроса = НСтр("ru = 'Сбросить настройки расположения отчетов?'");
	
	Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Нет);
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		СброситьНастройкиИОбновитьПанельОтчетов();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВсеОтчеты(Команда)
	ФормаПараметры = Новый Структура("РазделСсылка", РазделСсылка);
	ОткрытьФорму("Справочник.ВариантыОтчетов.ФормаСписка", ФормаПараметры, , "ВариантыОтчетов.ВсеОтчеты." + РазделПолноеИмя);
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	СохранитьНастройки = Ложь;
	ОставитьИзмененияВНастройках = РежимНастройки;
	ОбновитьПанельОтчетов(СохранитьНастройки, ОставитьИзмененияВНастройках);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Клиент

&НаКлиенте
Процедура ПоказатьСкрытьВариант(Вариант, Элемент, Показать)
	Модифицированность = Истина;
	Вариант.Видимость = Показать;
	Вариант.ИзмененПользователем = Истина;
	Вариант.СвоиНастройки = Истина;
	Элемент.ЦветТекста = ?(Показать, ЦветВидимыхВариантов, ЦветСкрытыхВариантов);
	ЭтаФорма["Флажок_"+ Вариант.НадписьИмя] = Показать;
	Если Вариант.Важный Тогда
		Если Показать Тогда
			Элемент.Шрифт = ШрифтЖирный;
		Иначе
			Элемент.Шрифт = Новый Шрифт;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьУбратьВариантИзБыстрогоДоступа(Вариант, Элемент, БыстрыйДоступ)
	Модифицированность = Истина;
	Если Вариант.БыстрыйДоступ = БыстрыйДоступ Тогда
		Возврат;
	КонецЕсли;
	
	// Регистрация результата для записи
	Вариант.БыстрыйДоступ = БыстрыйДоступ;
	Вариант.ИзмененПользователем = Истина;
	Вариант.СвоиНастройки = Истина;
	
	// Связанное действие: если добавляемый в быстрый доступ вариант не видим - показываем его
	Если БыстрыйДоступ И НЕ Вариант.Видимость Тогда
		ПоказатьСкрытьВариант(Вариант, Элемент, Истина);
	КонецЕсли;
	
	// Визуальный результат
	ПереместитьВариантБыстрогоДоступа(Вариант.ПолучитьИдентификатор(), БыстрыйДоступ);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Вызов сервера

&НаСервере
Процедура ПереместитьВариантБыстрогоДоступа(Знач ВариантИдентификатор, Знач БыстрыйДоступ)
	Вариант = ДобавленныеВарианты.НайтиПоИдентификатору(ВариантИдентификатор);
	Элемент = Элементы.Найти(Вариант.НадписьИмя);
	
	Если БыстрыйДоступ Тогда
		Элемент.Шрифт = ШрифтЖирный;
		ГруппаДляПереноса = ПодгруппаСНаименьшимКоличествомЭлементов(Элементы.БыстрыйДоступ);
		Если НЕ Элементы.БыстрыйДоступДекорация.Видимость Тогда
			Элементы.БыстрыйДоступДекорация.Видимость = Истина;
		КонецЕсли;
	ИначеЕсли Вариант.СмТакже Тогда
		Элемент.Шрифт = Новый Шрифт;
		ГруппаДляПереноса = ПодгруппаСНаименьшимКоличествомЭлементов(Элементы.СмТакже);
	ИначеЕсли Вариант.БезГруппы Тогда
		Элемент.Шрифт = ?(Вариант.Важный, ШрифтЖирный, Новый Шрифт);
		ГруппаДляПереноса = ПодгруппаСНаименьшимКоличествомЭлементов(Элементы.БезГруппы);
	Иначе
		Элемент.Шрифт = ?(Вариант.Важный, ШрифтЖирный, Новый Шрифт);
		Найденные = ТаблицаПодсистем.НайтиСтроки(Новый Структура("Ссылка", Вариант.Подсистема));
		Подсистема = Найденные[0];
		Если Подсистема.НомерЭлемента = 0 Тогда
			Возврат;
		КонецЕсли;
		
		ГруппаДляПереноса = Элементы.Найти(Подсистема.ИмяЭлемента + "_1");
	КонецЕсли;
	
	ПередКакимЭлементом = Неопределено;
	Если ГруппаДляПереноса.ПодчиненныеЭлементы.Количество() > 0 Тогда
		ПередКакимЭлементом = ГруппаДляПереноса.ПодчиненныеЭлементы.Получить(0);
	КонецЕсли;
	
	Элементы.Переместить(Элемент.Родитель, ГруппаДляПереноса, ПередКакимЭлементом);
	
	КартинкаИмя = "Картинка_" + Вариант.НадписьИмя;
	Картинка = Элементы.Найти(КартинкаИмя);
	КартинкаВыведена = (Картинка <> Неопределено И Картинка.Видимость <> Ложь);
	Если БыстрыйДоступ И Картинка = Неопределено Тогда
		Картинка = Элементы.Вставить(КартинкаИмя, Тип("ДекорацияФормы"), Элемент.Родитель, Элемент);
		Картинка.Вид = ВидДекорацииФормы.Картинка;
		Картинка.Ширина = 2;
		Картинка.Высота = 1;
		Картинка.Картинка = КартинкаБыстрыйДоступ;
		Картинка.РастягиватьПоГоризонтали = Ложь;
		Картинка.РастягиватьПоВертикали = Ложь;
	КонецЕсли;
	Если КартинкаВыведена <> БыстрыйДоступ Тогда
		Картинка.Видимость = БыстрыйДоступ;
	КонецЕсли;
	
	КартинкаОтступа = Элементы.Найти("КартинкаОтступа_" + Вариант.НадписьИмя);
	Если КартинкаОтступа <> Неопределено Тогда
		КартинкаОтступа.Видимость = НЕ БыстрыйДоступ;
	КонецЕсли;
	
	ФлажокИмя = "Флажок_" + Вариант.НадписьИмя;
	Флажок = Элементы.Найти(ФлажокИмя);
	ФлажокВыведен = (Флажок.Видимость = Истина);
	Если ФлажокВыведен = БыстрыйДоступ Тогда
		Флажок.Видимость = НЕ БыстрыйДоступ;
	КонецЕсли;
	
	НадписьКонтекстноеМеню = Элемент.КонтекстноеМеню;
	Если НадписьКонтекстноеМеню <> Неопределено Тогда
		КнопкаУбрать = Элементы.Найти("УбратьИзБыстрогоДоступа_" + Вариант.НадписьИмя);
		КнопкаПереместить = Элементы.Найти("ПереместитьВБыстрыйДоступ_" + Вариант.НадписьИмя);
		КнопкаУбрать.Видимость = БыстрыйДоступ;
		КнопкаПереместить.Видимость = НЕ БыстрыйДоступ;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СброситьНастройкиИОбновитьПанельОтчетов()
	РежимНастройки = Ложь;
	Модифицированность = Ложь;
	РегистрыСведений.НастройкиВариантовОтчетов.СброситьНастройкиПользователяВРазделе(РазделСсылка);
	ОбновитьПанельОтчетов(Ложь, Ложь);
КонецПроцедуры

&НаСервере
Процедура ОбновитьПанельОтчетов(СохранитьНастройки, ОставитьИзмененияВНастройках)
	Если СохранитьНастройки Тогда
		ОставитьИзмененияВНастройках = Ложь;
	КонецЕсли;
	
	Если РежимНастройки И Элементы.ВерхняяПанельНадпись.Заголовок = "" Тогда
		Элементы.ВерхняяПанельНадпись.Заголовок = НСтр("ru = 'Настроить быстрый доступ можно с помощью правой кнопки мыши.'");
	КонецЕсли;
	
	Элементы.ОтборНаименование.Видимость    = РежимНастройки;
	Элементы.ОтборАвтор.Видимость           = РежимНастройки;
	Элементы.СохранитьИзменения.Видимость   = РежимНастройки;
	Элементы.ОтменитьИзменения.Видимость    = РежимНастройки;
	Элементы.ВерхняяПанельСтрока2.Видимость = РежимНастройки;
	Элементы.ВерхняяПанельОтступ.Видимость  = РежимНастройки;
	Элементы.ВсеОтчеты.Видимость            = НЕ РежимНастройки;
	Элементы.СсылкаВсеОтчеты.Видимость      = НЕ РежимНастройки;
	
	// Заголовок
	ПрефиксРежимаНастройки = НСтр("ru = 'Настройка:'") + " ";
	ПрефиксВыведен = (Лев(Заголовок, СтрДлина(ПрефиксРежимаНастройки)) = ПрефиксРежимаНастройки);
	Если ПрефиксВыведен <> РежимНастройки Тогда
		Если РежимНастройки Тогда
			Заголовок = ПрефиксРежимаНастройки + Заголовок;
		Иначе
			Заголовок = СтрЗаменить(Заголовок, ПрефиксРежимаНастройки, "");
		КонецЕсли;
	КонецЕсли;
	
	// Удаление элементов
	УдаляемыеЭлементы = Новый Массив;
	Для Каждого ЭлементУровня2 Из Элементы.Колонки.ПодчиненныеЭлементы Цикл
		Если ТипЗнч(ЭлементУровня2) = Тип("ГруппаФормы") Тогда
			Для Каждого ЭлементУровня3 Из ЭлементУровня2.ПодчиненныеЭлементы Цикл
				Если ТипЗнч(ЭлементУровня3) = Тип("ГруппаФормы") Тогда
					Для Каждого ЭлементУровня4 Из ЭлементУровня3.ПодчиненныеЭлементы Цикл
						УдаляемыеЭлементы.Добавить(ЭлементУровня4);
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	Для Каждого УдаляемыйЭлемент Из УдаляемыеЭлементы Цикл
		Элементы.Удалить(УдаляемыйЭлемент);
	КонецЦикла;
	
	// Удаление реквизитов
	УдаляемыеРеквизиты = Новый Массив;
	НаборРеквизитов = ПолучитьРеквизиты();
	Для Каждого Реквизит Из НаборРеквизитов Цикл
		Если ПостоянныеРеквизиты.НайтиПоЗначению(Реквизит.Имя) = Неопределено Тогда
			УдаляемыеРеквизиты.Добавить(Реквизит.Имя);
		КонецЕсли;
	КонецЦикла;
	ИзменитьРеквизиты(, УдаляемыеРеквизиты);
	
	// Удаление команд
	Если ВебКлиент Тогда
		УдаляемыеКоманды = Новый Массив;
		Для Каждого Команда Из Команды Цикл
			Если ПостоянныеКоманды.НайтиПоЗначению(Команда.Имя) = Неопределено Тогда
				УдаляемыеКоманды.Добавить(Команда);
			КонецЕсли;
		КонецЦикла;
		Для Каждого Команда Из УдаляемыеКоманды Цикл
			Команды.Удалить(Команда);
		КонецЦикла;
	КонецЕсли;
	
	// Сохранение пользовательских настроек
	Если СохранитьНастройки Тогда
		СохранитьПользовательскиеНастройки();
	КонецЕсли;
	
	// Очистка изменений в пользовательских настройках
	Если НЕ ОставитьИзмененияВНастройках Тогда
		ДобавленныеВарианты.Очистить();
		ДобавленоЭлементов = 0;
	КонецЕсли;
	
	// Сброс номера последнего добавленного элемента
	Для Каждого СтрокаТаблицы Из ТаблицаПодсистем Цикл
		СтрокаТаблицы.НомерЭлемента = 0;
	КонецЦикла;
	
	// Заполнение панели отчетов
	ЗаполнитьПанельОтчетов();
	
	// Снятие флажка модифицированности
	Если Модифицированность И НЕ ОставитьИзмененияВНастройках Тогда
		Модифицированность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Сервер

&НаСервере
Процедура ЗаполнитьПанельОтчетов()
	
	Варианты = ВариантыОтчетовЭтойПанели();
	
	ПеременныеКонтекста = Новый Структура("ИмяГруппы, ДобавляемыеРеквизиты", "", Новый Массив);
	ИнициализироватьПеременныеКонтекста(ПеременныеКонтекста);
	
	Если РежимНастройки Тогда
		ПеременныеКонтекста.КонтекстноеМеню.УбратьИзБыстрогоДоступа.Видимость = Истина;
		ПеременныеКонтекста.КонтекстноеМеню.ПереместитьВБыстрыйДоступ.Видимость = Ложь;
	КонецЕсли;
	
	ВариантыБыстрогоДоступа = Варианты.Скопировать(Новый Структура("СкрытОтбором, БыстрыйДоступ", Ложь, Истина));
	ПеременныеКонтекста.ИмяГруппы = "БыстрыйДоступ";
	ВывестиВариантыБезГруппы(ВариантыБыстрогоДоступа, ПеременныеКонтекста);
	
	Если РежимНастройки Тогда
		ПеременныеКонтекста.КонтекстноеМеню.УбратьИзБыстрогоДоступа.Видимость = Ложь;
		ПеременныеКонтекста.КонтекстноеМеню.ПереместитьВБыстрыйДоступ.Видимость = Истина;
	КонецЕсли;
	
	ВариантыБезГруппы = Варианты.Скопировать(Новый Структура("СкрытОтбором, БыстрыйДоступ, БезГруппы", Ложь, Ложь, Истина));
	ПеременныеКонтекста.ИмяГруппы = "БезГруппы";
	ВывестиВариантыБезГруппы(ВариантыБезГруппы, ПеременныеКонтекста);
	
	ВариантыСГруппой = Варианты.Скопировать(Новый Структура("СкрытОтбором, БыстрыйДоступ, БезГруппы, СмТакже", Ложь, Ложь, Ложь, Ложь));
	ПеременныеКонтекста.ИмяГруппы = "СГруппой";
	ВывестиВариантыСГруппой(ВариантыСГруппой, ПеременныеКонтекста);
	
	ВариантыСмТакже = Варианты.Скопировать(Новый Структура("СкрытОтбором, БыстрыйДоступ, БезГруппы, СмТакже", Ложь, Ложь, Ложь, Истина));
	ПеременныеКонтекста.ИмяГруппы = "СмТакже";
	ВывестиВариантыБезГруппы(ВариантыСмТакже, ПеременныеКонтекста);
	
	Если ПеременныеКонтекста.ДобавляемыеРеквизиты.Количество() > 0 Тогда
		ИзменитьРеквизиты(ПеременныеКонтекста.ДобавляемыеРеквизиты);
		Для Каждого Реквизит Из ПеременныеКонтекста.ДобавляемыеРеквизиты Цикл
			Флажок = Элементы.Найти(Реквизит.Имя);
			Флажок.ПутьКДанным = Реквизит.Имя;
			НадписьИмя = Сред(Реквизит.Имя, СтрДлина("Флажок_")+1);
			Найденные = ДобавленныеВарианты.НайтиСтроки(Новый Структура("НадписьИмя", НадписьИмя));
			Если Найденные.Количество() > 0 Тогда
				Вариант = Найденные[0];
				ЭтаФорма[Реквизит.Имя] = Вариант.Видимость;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Добавление вариантов, скрытых отбором (для сохранения их пользовательских настроек).
	ВариантыСкрытыеОтбором = Варианты.НайтиСтроки(Новый Структура("СкрытОтбором", Истина));
	Для Каждого Вариант Из ВариантыСкрытыеОтбором Цикл
		Найденные = ДобавленныеВарианты.НайтиСтроки(Новый Структура("Ссылка, Подсистема", Вариант.Ссылка, Вариант.Подсистема));
		Если Найденные.Количество() = 0 Тогда
			СтрокаТаблицы = ДобавленныеВарианты.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Вариант);
		КонецЕсли;
	КонецЦикла;
	
	Элементы.БыстрыйДоступДекорация.Видимость = (ВариантыБыстрогоДоступа.Количество() > 0);
	Элементы.БезГруппыДекорация.Видимость = (ВариантыБезГруппы.Количество() > 0);
	Элементы.СГруппойДекорация.Видимость = (ВариантыСГруппой.Количество() > 0);
	Элементы.СмТакжеДекорация.Видимость = (ВариантыСмТакже.Количество() > 0);
	
	Если ВариантыБыстрогоДоступа.Количество() = 0 
		И ВариантыБезГруппы.Количество() = 0 
		И ВариантыСГруппой.Количество() = 0 
		И ВариантыСмТакже.Количество() = 0 Тогда
		Надпись = Элементы.Вставить("СписокОтчетовПуст", Тип("ДекорацияФормы"), Элементы.БыстрыйДоступКолонка1);
		Если ВариантыСкрытыеОтбором.Количество() = 0 Тогда
			Надпись.Заголовок = НСтр("ru = 'Нет доступных отчетов.'");
		Иначе
			Надпись.Заголовок = НСтр("ru = 'Варианты отчетов не найдены.'");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьПользовательскиеНастройки()
	ИзмененныеНастройки = ДобавленныеВарианты.Выгрузить(
		Новый Структура("ИзмененПользователем", Истина),
		"Ссылка, Подсистема, Видимость, БыстрыйДоступ");
	ИзмененныеНастройки.Колонки.Ссылка.Имя = "Вариант";
	ИзмененныеНастройки.Колонки.Подсистема.Имя = "РазделИлиГруппа";
	РегистрыСведений.НастройкиВариантовОтчетов.СохранитьНастройкиПользователяВРазделе(ИзмененныеНастройки);
КонецПроцедуры

&НаСервере
Функция ПодгруппаСНаименьшимКоличествомЭлементов(Группа)
	ПодгруппаМин = Неопределено;
	ВложенныхЭлементовМин = 0;
	Для Каждого Подгруппа Из Группа.ПодчиненныеЭлементы Цикл
		ВложенныхЭлементов = Подгруппа.ПодчиненныеЭлементы.Количество();
		Если ВложенныхЭлементов < ВложенныхЭлементовМин ИЛИ ПодгруппаМин = Неопределено Тогда
			ПодгруппаМин          = Подгруппа;
			ВложенныхЭлементовМин = ВложенныхЭлементов;
		КонецЕсли;
	КонецЦикла;
	Возврат ПодгруппаМин;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Сервер / Заполнение панели отчетов

&НаСервере
Функция ВариантыОтчетовЭтойПанели()
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Подсистемы.Ссылка КАК Подсистема,
	|	Подсистемы.Представление,
	|	Подсистемы.Приоритет
	|ПОМЕСТИТЬ втПодсистемы
	|ИЗ
	|	&ТаблицаПодсистем КАК Подсистемы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДобавленныеВарианты.Ссылка,
	|	ДобавленныеВарианты.Подсистема,
	|	ДобавленныеВарианты.Видимость,
	|	ДобавленныеВарианты.БыстрыйДоступ
	|ПОМЕСТИТЬ втНастройки
	|ИЗ
	|	&ДобавленныеВарианты КАК ДобавленныеВарианты
	|ГДЕ
	|	ДобавленныеВарианты.ИзмененПользователем = ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВариантыОтчетов.Ссылка,
	|	ПредопределенныеРазмещение.Подсистема,
	|	ПредопределенныеРазмещение.Важный,
	|	ПредопределенныеРазмещение.СмТакже,
	|	ВЫБОР
	|		КОГДА ВариантыОтчетов.Автор = &ТекущийПользователь
	|			ТОГДА ИСТИНА
	|		КОГДА ВариантыОтчетов.ВидимостьПоУмолчаниюПереопределена
	|			ТОГДА ВариантыОтчетов.ВидимостьПоУмолчанию
	|		ИНАЧЕ ПредопределенныеРазмещение.Ссылка.ВидимостьПоУмолчанию
	|	КОНЕЦ КАК ВидимостьПоУмолчанию,
	|	ВЫРАЗИТЬ(ВариантыОтчетов.Описание КАК СТРОКА(1000)) КАК Описание,
	|	ВариантыОтчетов.Наименование,
	|	ВариантыОтчетов.Отчет,
	|	ВариантыОтчетов.ТипОтчета,
	|	ВариантыОтчетов.КлючВарианта,
	|	ВариантыОтчетов.Автор
	|ПОМЕСТИТЬ втПредопределенные
	|ИЗ
	|	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПредопределенныеВариантыОтчетов.Размещение КАК ПредопределенныеРазмещение
	|		ПО (ПредопределенныеРазмещение.Подсистема В (&МассивПодсистем))
	|			И ВариантыОтчетов.ПредопределенныйВариант = ПредопределенныеРазмещение.Ссылка
	|			И (ВариантыОтчетов.Отчет В (&ОтчетыПользователя))
	|			И (НЕ ПредопределенныеРазмещение.Ссылка В (&ОтключенныеВариантыПрограммы))
	|			И (ВариантыОтчетов.ПометкаУдаления = ЛОЖЬ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВариантыРазмещение.Ссылка,
	|	ВариантыРазмещение.РазделИлиГруппа,
	|	ВариантыРазмещение.Использование,
	|	ВариантыРазмещение.Важный,
	|	ВариантыРазмещение.СмТакже,
	|	ВЫБОР
	|		КОГДА ВариантыРазмещение.Ссылка.Автор = &ТекущийПользователь
	|			ТОГДА ИСТИНА
	|		КОГДА ВариантыРазмещение.Ссылка.ВидимостьПоУмолчаниюПереопределена
	|				ИЛИ ВариантыРазмещение.Ссылка.Пользовательский
	|				ИЛИ ВариантыРазмещение.Ссылка.ПредопределенныйВариант = ЗНАЧЕНИЕ(Справочник.ПредопределенныеВариантыОтчетов.ПустаяСсылка)
	|			ТОГДА ВариантыРазмещение.Ссылка.ВидимостьПоУмолчанию
	|		ИНАЧЕ ВариантыРазмещение.Ссылка.ПредопределенныйВариант.ВидимостьПоУмолчанию
	|	КОНЕЦ КАК ВидимостьПоУмолчанию,
	|	ВЫРАЗИТЬ(ВариантыРазмещение.Ссылка.Описание КАК СТРОКА(1000)) КАК Описание,
	|	ВариантыРазмещение.Ссылка.Наименование,
	|	ВариантыРазмещение.Ссылка.Отчет,
	|	ВариантыРазмещение.Ссылка.ТипОтчета,
	|	ВариантыРазмещение.Ссылка.КлючВарианта,
	|	ВариантыРазмещение.Ссылка.Автор
	|ПОМЕСТИТЬ втВарианты
	|ИЗ
	|	Справочник.ВариантыОтчетов.Размещение КАК ВариантыРазмещение
	|ГДЕ
	|	ВариантыРазмещение.РазделИлиГруппа В(&МассивПодсистем)
	|	И ВариантыРазмещение.Ссылка.Отчет В(&ОтчетыПользователя)
	|	И НЕ ВариантыРазмещение.Ссылка.ПредопределенныйВариант В (&ОтключенныеВариантыПрограммы)
	|	И (НЕ ВариантыРазмещение.Ссылка.ТолькоДляАвтора
	|			ИЛИ ВариантыРазмещение.Ссылка.Автор = &ТекущийПользователь)
	|	И ВариантыРазмещение.Ссылка.ПометкаУдаления = ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ЕСТЬNULL(втВарианты.Ссылка, втПредопределенные.Ссылка) КАК Ссылка,
	|	ЕСТЬNULL(втВарианты.РазделИлиГруппа, втПредопределенные.Подсистема) КАК Подсистема,
	|	ЕСТЬNULL(втВарианты.Важный, втПредопределенные.Важный) КАК Важный,
	|	ЕСТЬNULL(втВарианты.СмТакже, втПредопределенные.СмТакже) КАК СмТакже,
	|	ЕСТЬNULL(втВарианты.Наименование, втПредопределенные.Наименование) КАК Наименование,
	|	ЕСТЬNULL(втВарианты.Описание, втПредопределенные.Описание) КАК Описание,
	|	ЕСТЬNULL(втВарианты.Автор, втПредопределенные.Автор) КАК Автор,
	|	ЕСТЬNULL(втВарианты.Отчет, втПредопределенные.Отчет) КАК Отчет,
	|	ЕСТЬNULL(втВарианты.ТипОтчета, втПредопределенные.ТипОтчета) КАК ТипОтчета,
	|	ЕСТЬNULL(втВарианты.КлючВарианта, втПредопределенные.КлючВарианта) КАК КлючВарианта,
	|	ЕСТЬNULL(втВарианты.ВидимостьПоУмолчанию, втПредопределенные.ВидимостьПоУмолчанию) КАК ВидимостьПоУмолчанию
	|ПОМЕСТИТЬ втВсеВарианты
	|ИЗ
	|	втПредопределенные КАК втПредопределенные
	|		ПОЛНОЕ СОЕДИНЕНИЕ втВарианты КАК втВарианты
	|		ПО втПредопределенные.Ссылка = втВарианты.Ссылка
	|			И втПредопределенные.Подсистема = втВарианты.РазделИлиГруппа
	|ГДЕ
	|	(втВарианты.Использование = ИСТИНА
	|			ИЛИ втВарианты.Использование ЕСТЬ NULL )
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втВсеВарианты.Ссылка,
	|	втВсеВарианты.Подсистема,
	|	втПодсистемы.Представление КАК ПодсистемаПредставление,
	|	втПодсистемы.Приоритет КАК ПодсистемаПриоритет,
	|	ВЫБОР
	|		КОГДА втВсеВарианты.Подсистема = &РазделСсылка
	|				И втВсеВарианты.СмТакже = ЛОЖЬ
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК БезГруппы,
	|	втВсеВарианты.Важный,
	|	втВсеВарианты.СмТакже,
	|	ВЫБОР
	|		КОГДА втВсеВарианты.ТипОтчета = &ТипДополнительный
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Дополнительный,
	|	ВЫБОР
	|		КОГДА втНастройки.Видимость ЕСТЬ NULL 
	|				И НастройкиВариантовОтчетов.Видимость ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК СвоиНастройки,
	|	ЕСТЬNULL(втНастройки.Видимость, ЕСТЬNULL(НастройкиВариантовОтчетов.Видимость, втВсеВарианты.ВидимостьПоУмолчанию)) КАК Видимость,
	|	ЕСТЬNULL(втНастройки.БыстрыйДоступ, ЕСТЬNULL(НастройкиВариантовОтчетов.БыстрыйДоступ, ЛОЖЬ)) КАК БыстрыйДоступ,
	|	ВЫБОР
	|		КОГДА втВсеВарианты.ТипОтчета = &ТипВнутренний
	|			ТОГДА втВсеВарианты.Отчет.Имя
	|		КОГДА втВсеВарианты.ТипОтчета = &ТипДополнительный
	|			ТОГДА """"
	|		ИНАЧЕ ПОДСТРОКА(ВЫРАЗИТЬ(втВсеВарианты.Отчет КАК СТРОКА(150)), 14, 137)
	|	КОНЕЦ КАК ИмяОтчета,
	|	втВсеВарианты.Наименование КАК Наименование,
	|	втВсеВарианты.Описание,
	|	втВсеВарианты.Автор,
	|	втВсеВарианты.Отчет,
	|	втВсеВарианты.ТипОтчета,
	|	втВсеВарианты.КлючВарианта,
	|	ВЫБОР
	|			КОГДА &ОтборНаименование = """"
	|				ТОГДА ЛОЖЬ
	|			КОГДА втВсеВарианты.Наименование ПОДОБНО ""%"" + &ОтборНаименование + ""%""
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|		ИЛИ ВЫБОР
	|			КОГДА &ОтборАвтор = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|				ТОГДА ЛОЖЬ
	|			КОГДА втВсеВарианты.Автор = &ОтборАвтор
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ КАК СкрытОтбором
	|ИЗ
	|	втВсеВарианты КАК втВсеВарианты
	|		ЛЕВОЕ СОЕДИНЕНИЕ втПодсистемы КАК втПодсистемы
	|		ПО втВсеВарианты.Подсистема = втПодсистемы.Подсистема
	|		ЛЕВОЕ СОЕДИНЕНИЕ втНастройки КАК втНастройки
	|		ПО втВсеВарианты.Ссылка = втНастройки.Ссылка
	|			И втВсеВарианты.Подсистема = втНастройки.Подсистема
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиВариантовОтчетов КАК НастройкиВариантовОтчетов
	|		ПО втВсеВарианты.Подсистема = НастройкиВариантовОтчетов.РазделИлиГруппа
	|			И втВсеВарианты.Ссылка = НастройкиВариантовОтчетов.Вариант
	|			И (НастройкиВариантовОтчетов.Пользователь = &ТекущийПользователь)
	|ГДЕ
	|	ЕСТЬNULL(втНастройки.Видимость, ЕСТЬNULL(НастройкиВариантовОтчетов.Видимость, втВсеВарианты.ВидимостьПоУмолчанию))
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПодсистемаПредставление,
	|	Наименование";
	
	Запрос.УстановитьПараметр("ТаблицаПодсистем",    ТаблицаПодсистем.Выгрузить());
	Запрос.УстановитьПараметр("МассивПодсистем",     Запрос.Параметры.ТаблицаПодсистем.ВыгрузитьКолонку("Ссылка"));
	Запрос.УстановитьПараметр("РазделСсылка",        РазделСсылка);
	Запрос.УстановитьПараметр("ДобавленныеВарианты", ДобавленныеВарианты.Выгрузить(, "Ссылка, Подсистема, Видимость, БыстрыйДоступ, ИзмененПользователем"));
	Запрос.УстановитьПараметр("ТекущийПользователь", Пользователи.ТекущийПользователь());
	Запрос.УстановитьПараметр("ОтборНаименование",   ?(РежимНастройки, ОтборНаименование, ""));
	Запрос.УстановитьПараметр("ОтборАвтор",          ?(РежимНастройки, ОтборАвтор, Справочники.Пользователи.ПустаяСсылка()));
	Запрос.УстановитьПараметр("ТипВнутренний",       Перечисления.ТипыОтчетов.Внутренний);
	Запрос.УстановитьПараметр("ТипДополнительный",   Перечисления.ТипыОтчетов.Дополнительный);
	Запрос.УстановитьПараметр("ОтчетыПользователя",           ВариантыОтчетов.ОтчетыТекущегоПользователя());
	Запрос.УстановитьПараметр("ОтключенныеВариантыПрограммы", ВариантыОтчетовПовтИсп.ОтключенныеВариантыПрограммы());
	
	Если РежимНастройки Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, 
			"ГДЕ
			|	ЕСТЬNULL(втНастройки.Видимость, ЕСТЬNULL(НастройкиВариантовОтчетов.Видимость, втВсеВарианты.ВидимостьПоУмолчанию))",
			"");
	КонецЕсли;
	
	ТаблицаРезультат = Запрос.Выполнить().Выгрузить();
	Возврат ТаблицаРезультат;
КонецФункции

&НаСервере
Процедура ИнициализироватьПеременныеКонтекста(ПеременныеКонтекста)
	
	ШаблонГруппыВарианта = Новый Структура(
		"Вид, РастягиватьПоГоризонтали,
		|Отображение, Группировка, 
		|ОтображатьЗаголовок");
	ШаблонГруппыВарианта.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ШаблонГруппыВарианта.РастягиватьПоГоризонтали = Истина;
	ШаблонГруппыВарианта.Отображение = ОтображениеОбычнойГруппы.Нет;
	ШаблонГруппыВарианта.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
	ШаблонГруппыВарианта.ОтображатьЗаголовок = Ложь;
	
	ШаблонКартинкиБыстрогоДоступа = Новый Структура(
		"Вид, Ширина, Высота, Картинка,
		|РастягиватьПоГоризонтали, РастягиватьПоВертикали");
	ШаблонКартинкиБыстрогоДоступа.Вид = ВидДекорацииФормы.Картинка;
	ШаблонКартинкиБыстрогоДоступа.Ширина = 2;
	ШаблонКартинкиБыстрогоДоступа.Высота = 1;
	ШаблонКартинкиБыстрогоДоступа.Картинка = КартинкаБыстрыйДоступ;
	ШаблонКартинкиБыстрогоДоступа.РастягиватьПоГоризонтали = Ложь;
	ШаблонКартинкиБыстрогоДоступа.РастягиватьПоВертикали = Ложь;
	
	ШаблонКартинкиОтступа = Новый Структура(
		"Вид, Ширина, Высота,
		|РастягиватьПоГоризонтали, РастягиватьПоВертикали");
	ШаблонКартинкиОтступа.Вид = ВидДекорацииФормы.Картинка;
	ШаблонКартинкиОтступа.Ширина = 1;
	ШаблонКартинкиОтступа.Высота = 1;
	ШаблонКартинкиОтступа.РастягиватьПоГоризонтали = Ложь;
	ШаблонКартинкиОтступа.РастягиватьПоВертикали = Ложь;
	
	// Шаблоны заполнения создаваемых элементов управления
	ШаблонНадписиВарианта = Новый Структура(
		"Вид, Гиперссылка, Высота, ЦветТекста,
		|РастягиватьПоГоризонтали, РастягиватьПоВертикали");
	ШаблонНадписиВарианта.Вид = ВидДекорацииФормы.Надпись;
	ШаблонНадписиВарианта.Гиперссылка = Истина;
	ШаблонНадписиВарианта.РастягиватьПоГоризонтали = Истина;
	ШаблонНадписиВарианта.РастягиватьПоВертикали = Ложь;
	ШаблонНадписиВарианта.Высота = 1;
	ШаблонНадписиВарианта.ЦветТекста = ЦветВидимыхВариантов;
	
	ПеременныеКонтекста.Вставить("Шаблоны", Новый Структура);
	ПеременныеКонтекста.Шаблоны.Вставить("ГруппаВарианта", ШаблонГруппыВарианта);
	ПеременныеКонтекста.Шаблоны.Вставить("КартинкаБыстрогоДоступа", ШаблонКартинкиБыстрогоДоступа);
	ПеременныеКонтекста.Шаблоны.Вставить("КартинкаОтступа", ШаблонКартинкиОтступа);
	ПеременныеКонтекста.Шаблоны.Вставить("НадписьВарианта", ШаблонНадписиВарианта);
	
	Если РежимНастройки Тогда
		ПеременныеКонтекста.Вставить("КонтекстноеМеню", Новый Структура("УбратьИзБыстрогоДоступа, ПереместитьВБыстрыйДоступ, Изменить"));
		ПеременныеКонтекста.КонтекстноеМеню.УбратьИзБыстрогоДоступа   = Новый Структура("Видимость", Ложь);
		ПеременныеКонтекста.КонтекстноеМеню.ПереместитьВБыстрыйДоступ = Новый Структура("Видимость", Ложь);
		ПеременныеКонтекста.КонтекстноеМеню.Изменить                  = Новый Структура("Видимость", Истина);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ВывестиВариантыБезГруппы(Варианты, ПеременныеКонтекста)
	
	КоличествоВариантов = Варианты.Количество();
	Если КоличествоВариантов = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Базовые свойства группы 2 уровня
	ГруппаУровня2 = Элементы.Найти(ПеременныеКонтекста.ИмяГруппы);
	ВБыстрыйДоступ = (ПеременныеКонтекста.ИмяГруппы = "БыстрыйДоступ");
	ВКореньПодсистемы = (ПеременныеКонтекста.ИмяГруппы = "БезГруппы");
	
	Если РежимНастройки Тогда
		ПеременныеКонтекста.КонтекстноеМеню.УбратьИзБыстрогоДоступа.Видимость = ВБыстрыйДоступ;
		ПеременныеКонтекста.КонтекстноеМеню.ПереместитьВБыстрыйДоступ.Видимость = НЕ ВБыстрыйДоступ;
	КонецЕсли;
	
	// Сортировка вариантов
	Если ВКореньПодсистемы Тогда
		Варианты.Сортировать("Важный УБЫВ, Наименование ВОЗР"); // Есть важные
	Иначе
		Варианты.Сортировать("Наименование ВОЗР"); // Нет важных
	КонецЕсли;
	
	// Переменные для поддержки динамики групп 3 уровня
	КоличествоКолонок = ГруппаУровня2.ПодчиненныеЭлементы.Количество();
	ГруппаУровня3Отсечка = Цел(КоличествоВариантов / КоличествоКолонок); // Количество вариантов для вывода в одной колонке
	ГруппаУровня3Добавка = КоличествоВариантов - ГруппаУровня3Отсечка * КоличествоКолонок; // Остаток распределения вариантов по колонкам
	
	ГруппаУровня3Индекс = 0; // Индекс текущей колонки
	ГруппаУровня3НомерЭлемента = 0; // Номер текущего варианта в текущей колонке
	ГруппаУровня3 = ГруппаУровня2.ПодчиненныеЭлементы.Получить(ГруппаУровня3Индекс); // Текущая колонка
	
	ДобавляемыеРеквизиты = Новый Массив;
	Для Каждого Вариант Из Варианты Цикл
		ГруппаУровня3НомерЭлемента = ГруппаУровня3НомерЭлемента + 1;
		
		// Переход к следующей группе верхнего уровня
		Если ГруппаУровня3НомерЭлемента > ГруппаУровня3Отсечка + ?(ГруппаУровня3Добавка > 0, 1, 0) Тогда
			ГруппаУровня3НомерЭлемента = 1;
			ГруппаУровня3Индекс        = ГруппаУровня3Индекс + 1;
			ГруппаУровня3              = ГруппаУровня2.ПодчиненныеЭлементы.Получить(ГруппаУровня3Индекс);
			ГруппаУровня3Добавка       = ГруппаУровня3Добавка - 1;
		КонецЕсли;
		
		ДобавитьЭлементыВариантаОтчета(ПеременныеКонтекста, Вариант, ГруппаУровня3);
		
	КонецЦикла;
	
	Если КоличествоВариантов > 1 И КоличествоВариантов < КоличествоКолонок Тогда
		Для ГруппаУровня3Индекс = КоличествоВариантов По КоличествоКолонок - 1 Цикл
			ГруппаУровня3 = ГруппаУровня2.ПодчиненныеЭлементы.Получить(ГруппаУровня3Индекс);
			ДобавитьПустуюДекорацию(ПеременныеКонтекста, ГруппаУровня3);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиВариантыСГруппой(Варианты, ПеременныеКонтекста)
	
	КоличествоВариантов = Варианты.Количество();
	Если КоличествоВариантов = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Базовые свойства группы 2 уровня
	ГруппаУровня2Имя = ПеременныеКонтекста.ИмяГруппы;
	ГруппаУровня2 = Элементы.Найти(ГруппаУровня2Имя);
	
	// Сортировка вариантов
	Варианты.Сортировать("ПодсистемаПриоритет ВОЗР, Важный УБЫВ, Наименование ВОЗР"); // Есть группы и важные
	
	// Моделирование распределения вариантов с учетом вложенности подсистем
	ДеревоРаспределения = Новый ДеревоЗначений;
	ДеревоРаспределения.Колонки.Добавить("Подсистема");
	ДеревоРаспределения.Колонки.Добавить("ПодсистемаСсылка", Новый ОписаниеТипов("СправочникСсылка.ИдентификаторыОбъектовМетаданных"));
	ДеревоРаспределения.Колонки.Добавить("Варианты", Новый ОписаниеТипов("Массив"));
	ДеревоРаспределения.Колонки.Добавить("КоличествоВариантов", Новый ОписаниеТипов("Число"));
	ДеревоРаспределения.Колонки.Добавить("КоличествоПустыхСтрок", Новый ОписаниеТипов("Число"));
	ДеревоРаспределения.Колонки.Добавить("ВсегоВложенныхВариантов", Новый ОписаниеТипов("Число"));
	ДеревоРаспределения.Колонки.Добавить("ВсегоВложенныхПодсистем", Новый ОписаниеТипов("Число"));
	ДеревоРаспределения.Колонки.Добавить("ВсегоВложенныхПустыхСтрок", Новый ОписаниеТипов("Число"));
	ДеревоРаспределения.Колонки.Добавить("УровеньВложенности", Новый ОписаниеТипов("Число"));
	
	МаксимальныйУровеньВложенности = 0;
	ТекущаяПодсистема = Неопределено;
	
	ТаблицаПодсистем.Сортировать("Приоритет ВОЗР"); // Сортировка по иерархии
	Для Каждого Подсистема Из ТаблицаПодсистем Цикл
		
		СтрокаРодителя = ДеревоРаспределения.Строки.Найти(Подсистема.РодительСсылка, "ПодсистемаСсылка", Истина);
		Если СтрокаРодителя = Неопределено Тогда
			СтрокаДерева = ДеревоРаспределения.Строки.Добавить();
		Иначе
			СтрокаДерева = СтрокаРодителя.Строки.Добавить();
		КонецЕсли;
		
		СтрокаДерева.Подсистема = Подсистема;
		СтрокаДерева.ПодсистемаСсылка = Подсистема.Ссылка;
		СтрокаДерева.Варианты = Варианты.НайтиСтроки(Новый Структура("Подсистема", Подсистема.Ссылка));
		СтрокаДерева.КоличествоВариантов = СтрокаДерева.Варианты.Количество();
		
		ЕстьВарианты = СтрокаДерева.КоличествоВариантов > 0;
		Если НЕ ЕстьВарианты Тогда
			СтрокаДерева.КоличествоПустыхСтрок = -1;
		КонецЕсли;
		
		// Вычисление уровня вложенности, Учет количества в иерархии (если есть варианты)
		Если СтрокаРодителя <> Неопределено Тогда
			Пока СтрокаРодителя <> Неопределено Цикл
				Если ЕстьВарианты Тогда
					СтрокаРодителя.ВсегоВложенныхВариантов = СтрокаРодителя.ВсегоВложенныхВариантов + СтрокаДерева.КоличествоВариантов;
					СтрокаРодителя.ВсегоВложенныхПодсистем = СтрокаРодителя.ВсегоВложенныхПодсистем + 1;
					СтрокаРодителя.ВсегоВложенныхПустыхСтрок = СтрокаРодителя.ВсегоВложенныхПустыхСтрок + 1;
				КонецЕсли;
				СтрокаРодителя = СтрокаРодителя.Родитель;
				СтрокаДерева.УровеньВложенности = СтрокаДерева.УровеньВложенности + 1;
			КонецЦикла;
		КонецЕсли;
		
		МаксимальныйУровеньВложенности = Макс(МаксимальныйУровеньВложенности, СтрокаДерева.УровеньВложенности);
		
	КонецЦикла;
	
	// Вычисление колонки расположения и необходимости переноса каждой подсистемы на основе данных по количеству
	ПеременныеКонтекста.Вставить("МаксимальныйУровеньВложенности", МаксимальныйУровеньВложенности);
	ДеревоРаспределения.Колонки.Добавить("ГруппаФормы");
	ДеревоРаспределения.Колонки.Добавить("НачатВывод", Новый ОписаниеТипов("Булево"));
	КорневаяСтрока = ДеревоРаспределения.Строки[0];
	КоличествоСтрок = КорневаяСтрока.ВсегоВложенныхВариантов + КорневаяСтрока.ВсегоВложенныхПодсистем + Макс(КорневаяСтрока.ВсегоВложенныхПустыхСтрок - 2, 0);
	
	// Переменные для поддержки динамики групп 3 уровня
	КоличествоКолонок = ГруппаУровня2.ПодчиненныеЭлементы.Количество();
	Если КоличествоКолонок > 1 И КорневаяСтрока.ВсегоВложенныхВариантов <= 5 Тогда
		КоличествоКолонок = 1;
	ИначеЕсли КоличествоКолонок > 2 И КорневаяСтрока.ВсегоВложенныхВариантов <= 10 Тогда
		КоличествоКолонок = 2;
	КонецЕсли;
	ГруппаУровня3Отсечка = Макс(Цел(КоличествоСтрок / КоличествоКолонок), 2); // Количество вариантов для вывода в одной колонке
	
	ПорядокВывода = Новый ТаблицаЗначений;
	ПорядокВывода.Колонки.Добавить("НомерКолонки", Новый ОписаниеТипов("Число"));
	ПорядокВывода.Колонки.Добавить("ЭтоПодсистема", Новый ОписаниеТипов("Булево"));
	ПорядокВывода.Колонки.Добавить("ЭтоПродолжение", Новый ОписаниеТипов("Булево"));
	ПорядокВывода.Колонки.Добавить("ЭтоВариант", Новый ОписаниеТипов("Булево"));
	ПорядокВывода.Колонки.Добавить("ЭтоПустаяСтрока", Новый ОписаниеТипов("Булево"));
	ПорядокВывода.Колонки.Добавить("СтрокаДерева");
	ПорядокВывода.Колонки.Добавить("Подсистема");
	ПорядокВывода.Колонки.Добавить("ПодсистемаСсылка", Новый ОписаниеТипов("СправочникСсылка.ИдентификаторыОбъектовМетаданных"));
	ПорядокВывода.Колонки.Добавить("ПодсистемаПриоритет", Новый ОписаниеТипов("Строка"));
	ПорядокВывода.Колонки.Добавить("Вариант");
	ПорядокВывода.Колонки.Добавить("ВариантСсылка");
	ПорядокВывода.Колонки.Добавить("УровеньВложенности", Новый ОписаниеТипов("Число"));
	
	
	Рекурсия = Новый Структура;
	Рекурсия.Вставить("ВсегоОсталосьВывести", КоличествоСтрок);
	Рекурсия.Вставить("СвободноКолонок", КоличествоКолонок - 1);
	Рекурсия.Вставить("КоличествоКолонок", КоличествоКолонок);
	Рекурсия.Вставить("ГруппаУровня3Отсечка", ГруппаУровня3Отсечка);
	Рекурсия.Вставить("НомерТекущейКолонки", 1);
	Рекурсия.Вставить("ЭтоПоследняяКолонка", Рекурсия.НомерТекущейКолонки = Рекурсия.КоличествоКолонок ИЛИ КоличествоСтрок <= 6);
	Рекурсия.Вставить("СвободноСтрок", ГруппаУровня3Отсечка);// + ?(ГруппаУровня3Добавка > 0, 1, 0);
	Рекурсия.Вставить("НачатВыводВТекущейКолонке", Ложь);
	
	ПеременныеКонтекста.Вставить("Рекурсия", Рекурсия);
	ПеременныеКонтекста.Вставить("Варианты", Варианты);
	
	// Заполнение порядка вывода по данным дерева распределения.
	ЗаполнитьПорядокВывода(ПорядокВывода, КорневаяСтрока, ПеременныеКонтекста);
	
	// Вывод в форму
	НомерТекущейКолонки = 0;
	Для Каждого СтрокаПорядкаВывода Из ПорядокВывода Цикл
		
		Если НомерТекущейКолонки <> СтрокаПорядкаВывода.НомерКолонки Тогда
			НомерТекущейКолонки = СтрокаПорядкаВывода.НомерКолонки;
			ТекущийУровеньВложенности = 0;
			ТекущаяГруппа = ГруппаУровня2.ПодчиненныеЭлементы.Получить(НомерТекущейКолонки - 1);
			ТекущиеГруппыПоУровнямВложенности = Новый Соответствие;
			ТекущиеГруппыПоУровнямВложенности.Вставить(0, ТекущаяГруппа);
		КонецЕсли;
		
		Если СтрокаПорядкаВывода.ЭтоПодсистема Тогда
			
			ТекущийУровеньВложенности = СтрокаПорядкаВывода.УровеньВложенности;
			ВГруппу = ТекущиеГруппыПоУровнямВложенности.Получить(СтрокаПорядкаВывода.УровеньВложенности - 1);
			ТекущаяГруппа = ДобавитьГруппуПодсистемы(ПеременныеКонтекста, СтрокаПорядкаВывода, ВГруппу);
			ТекущиеГруппыПоУровнямВложенности.Вставить(ТекущийУровеньВложенности, ТекущаяГруппа);
			
		ИначеЕсли СтрокаПорядкаВывода.ЭтоВариант Тогда
			
			Если ТекущийУровеньВложенности > СтрокаПорядкаВывода.УровеньВложенности Тогда
				ТекущийУровеньВложенности = СтрокаПорядкаВывода.УровеньВложенности;
				ТекущаяГруппа = ТекущиеГруппыПоУровнямВложенности.Получить(ТекущийУровеньВложенности);
			КонецЕсли;
			
			ДобавитьЭлементыВариантаОтчета(ПеременныеКонтекста, СтрокаПорядкаВывода.Вариант, ТекущаяГруппа, СтрокаПорядкаВывода.УровеньВложенности);
			
		ИначеЕсли СтрокаПорядкаВывода.ЭтоПустаяСтрока Тогда
			
			ВГруппу = ТекущиеГруппыПоУровнямВложенности.Получить(СтрокаПорядкаВывода.УровеньВложенности - 1);
			ДобавитьПустуюДекорацию(ПеременныеКонтекста, ВГруппу);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Для НомерКолонки = 3 По ГруппаУровня2.ПодчиненныеЭлементы.Количество() Цикл
		Найденные = ПорядокВывода.НайтиСтроки(Новый Структура("НомерКолонки, ЭтоПодсистема", НомерКолонки, Ложь));
		Если Найденные.Количество() = 0 Тогда
			ГруппаУровня3 = ГруппаУровня2.ПодчиненныеЭлементы.Получить(НомерКолонки - 1);
			ДобавитьПустуюДекорацию(ПеременныеКонтекста, ГруппаУровня3);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПорядокВывода(ПорядокВывода, СтрокаРодителя, ПеременныеКонтекста)
	
	Рекурсия = ПеременныеКонтекста.Рекурсия;
	
	Для Каждого СтрокаДерева Из СтрокаРодителя.Строки Цикл
		
		Если НЕ Рекурсия.ЭтоПоследняяКолонка И Рекурсия.СвободноСтрок <= 0 Тогда // текущая колонка исчерпана
			// Переход к новой колонке.
			Рекурсия.ВсегоОсталосьВывести = Рекурсия.ВсегоОсталосьВывести - 1; // Пустая группа, которую не надо выводить.
			Рекурсия.НомерТекущейКолонки = Рекурсия.НомерТекущейКолонки + 1;
			Рекурсия.ЭтоПоследняяКолонка = (Рекурсия.НомерТекущейКолонки = Рекурсия.КоличествоКолонок);
			СвободноКолонок = Рекурсия.КоличествоКолонок - Рекурсия.НомерТекущейКолонки + 1;
			Рекурсия.ГруппаУровня3Отсечка = Макс(Цел(Рекурсия.ВсегоОсталосьВывести / СвободноКолонок), 2); // Количество вариантов для вывода в одной колонке
			Рекурсия.СвободноСтрок = Рекурсия.ГруппаУровня3Отсечка; // Количество вариантов для вывода в одной колонке
			
			// Вывод иерархии / Повтор иерархии с добавкой "(продолжение)" если вывод строк текущего родителя уже был начат в предыдущей колонке.
			ТекущийРодитель = СтрокаРодителя;
			Пока ТекущийРодитель.ПодсистемаСсылка <> РазделСсылка Цикл
				
				// Рекурсия.ВсегоОсталосьВывести при этом не уменьшается, т.к. вывод продолжения увеличивает количество строк.
				ВывестиПодсистему = ПорядокВывода.Добавить();
				ВывестиПодсистему.НомерКолонки        = Рекурсия.НомерТекущейКолонки;
				ВывестиПодсистему.ЭтоПодсистема       = Истина;
				ВывестиПодсистему.ЭтоПродолжение      = СтрокаРодителя.НачатВывод;
				ВывестиПодсистему.СтрокаДерева        = СтрокаДерева;
				ВывестиПодсистему.ПодсистемаПриоритет = СтрокаДерева.Подсистема.Приоритет;
				ЗаполнитьЗначенияСвойств(ВывестиПодсистему, ТекущийРодитель, "Подсистема, ПодсистемаСсылка, УровеньВложенности");
				
				ТекущийРодитель = ТекущийРодитель.Родитель;
			КонецЦикла;
			
			Рекурсия.НачатВыводВТекущейКолонке = Ложь;
			
		КонецЕсли;
		
		Если (СтрокаДерева.КоличествоВариантов > 0 ИЛИ СтрокаДерева.ВсегоВложенныхВариантов > 0) И Рекурсия.НачатВыводВТекущейКолонке И СтрокаРодителя.НачатВывод Тогда
			// Вывод пустой строки.
			Рекурсия.ВсегоОсталосьВывести = Рекурсия.ВсегоОсталосьВывести - 1;
			ВывестиПустуюСтроку = ПорядокВывода.Добавить();
			ВывестиПустуюСтроку.НомерКолонки        = Рекурсия.НомерТекущейКолонки;
			ВывестиПустуюСтроку.ЭтоПустаяСтрока     = Истина;
			ВывестиПустуюСтроку.СтрокаДерева        = СтрокаДерева;
			ВывестиПустуюСтроку.ПодсистемаПриоритет = СтрокаДерева.Подсистема.Приоритет;
			ЗаполнитьЗначенияСвойств(ВывестиПустуюСтроку, СтрокаДерева, "Подсистема, ПодсистемаСсылка, УровеньВложенности");
			
			// Учет строк, занятых пустой строкой
			Рекурсия.СвободноСтрок = Рекурсия.СвободноСтрок - 1;
		КонецЕсли;
		
		// Вывод группы.
		ВывестиПодсистему = ПорядокВывода.Добавить();
		ВывестиПодсистему.НомерКолонки        = Рекурсия.НомерТекущейКолонки;
		ВывестиПодсистему.ЭтоПодсистема       = Истина;
		ВывестиПодсистему.СтрокаДерева        = СтрокаДерева;
		ВывестиПодсистему.ПодсистемаПриоритет = СтрокаДерева.Подсистема.Приоритет;
		ЗаполнитьЗначенияСвойств(ВывестиПодсистему, СтрокаДерева, "Подсистема, ПодсистемаСсылка, УровеньВложенности");
		
		Если СтрокаДерева.КоличествоВариантов > 0 Тогда
			
			// Учет строки, занятой группой.
			Рекурсия.ВсегоОсталосьВывести = Рекурсия.ВсегоОсталосьВывести - 1;
			Рекурсия.СвободноСтрок = Рекурсия.СвободноСтрок - 1;
			
			СтрокаДерева.НачатВывод = Истина;
			Рекурсия.НачатВыводВТекущейКолонке = Истина;
			
			Если Рекурсия.ЭтоПоследняяКолонка
				ИЛИ СтрокаДерева.КоличествоВариантов <= 5
				ИЛИ СтрокаДерева.КоличествоВариантов - 2 <= Рекурсия.СвободноСтрок + 2 Тогда
				
				// Вывод всех в текущую колонку.
				НачалоСПродолжением = Ложь;
				КоличествоВТекущуюКолонку = СтрокаДерева.КоличествоВариантов;
				
			Иначе
				
				// Частичный вывод в текущую колонку с продолжением в следующей.
				НачалоСПродолжением = Истина;
				КоличествоВТекущуюКолонку = Макс(Рекурсия.СвободноСтрок + 2, 3);
				
			КонецЕсли;
			
			// Регистрация вариантов в текущей колонке / Довывод вариантов в новой колонке.
			ВариантовВыведено = 0;
			Для Каждого Вариант Из СтрокаДерева.Варианты Цикл
				// СтрокаДерева.Варианты - это результат поиска по таблице значений.
				// Код рассчитан на то, что сортировка результата поиска не отличается от сортировки строк.
				// Если это не так, то исходную таблицу необходимо скопировать
				// с фильтром по подсистеме и отсортировать по наименованию.
				
				Если НачалоСПродолжением И ВариантовВыведено = КоличествоВТекущуюКолонку Тогда
					// Переход к новой колонке.
					Рекурсия.НомерТекущейКолонки = Рекурсия.НомерТекущейКолонки + 1;
					Рекурсия.ЭтоПоследняяКолонка = (Рекурсия.НомерТекущейКолонки = Рекурсия.КоличествоКолонок);
					СвободноКолонок = Рекурсия.КоличествоКолонок - Рекурсия.НомерТекущейКолонки + 1;
					Рекурсия.ГруппаУровня3Отсечка = Макс(Цел(Рекурсия.ВсегоОсталосьВывести / СвободноКолонок), 2); // Количество вариантов для вывода в одной колонке
					Рекурсия.СвободноСтрок = Рекурсия.ГруппаУровня3Отсечка; // Количество вариантов для вывода в одной колонке
					
					Если Рекурсия.ЭтоПоследняяКолонка Тогда
						КоличествоВТекущуюКолонку = -1;
					Иначе
						КоличествоВТекущуюКолонку = Макс(Мин(Рекурсия.СвободноСтрок, СтрокаДерева.КоличествоВариантов - ВариантовВыведено), 3);
					КонецЕсли;
					ВариантовВыведено = 0;
					
					// Повтор иерархии с добавкой "(продолжение)".
					ТекущийРодитель = СтрокаРодителя;
					Пока ТекущийРодитель.ПодсистемаСсылка <> РазделСсылка Цикл
						
						// Рекурсия.ВсегоОсталосьВывести при этом не уменьшается, т.к. вывод продолжения увеличивает количество строк.
						ВывестиПодсистему = ПорядокВывода.Добавить();
						ВывестиПодсистему.НомерКолонки        = Рекурсия.НомерТекущейКолонки;
						ВывестиПодсистему.ЭтоПодсистема       = Истина;
						ВывестиПодсистему.ЭтоПродолжение      = Истина;
						ВывестиПодсистему.СтрокаДерева        = СтрокаДерева;
						ВывестиПодсистему.ПодсистемаПриоритет = СтрокаДерева.Подсистема.Приоритет;
						ЗаполнитьЗначенияСвойств(ВывестиПодсистему, ТекущийРодитель, "Подсистема, ПодсистемаСсылка, УровеньВложенности");
						
						ТекущийРодитель = ТекущийРодитель.Родитель;
					КонецЦикла;
					
					// Вывод группы с добавкой "(продолжение)".
					// Рекурсия.ВсегоОсталосьВывести при этом не уменьшается, т.к. вывод продолжения увеличивает количество строк.
					ВывестиПодсистему = ПорядокВывода.Добавить();
					ВывестиПодсистему.НомерКолонки        = Рекурсия.НомерТекущейКолонки;
					ВывестиПодсистему.ЭтоПодсистема       = Истина;
					ВывестиПодсистему.ЭтоПродолжение      = Истина;
					ВывестиПодсистему.СтрокаДерева        = СтрокаДерева;
					ВывестиПодсистему.ПодсистемаПриоритет = СтрокаДерева.Подсистема.Приоритет;
					ЗаполнитьЗначенияСвойств(ВывестиПодсистему, СтрокаДерева, "Подсистема, ПодсистемаСсылка, УровеньВложенности");
					
					// Учет строки, занятой группой.
					Рекурсия.СвободноСтрок = Рекурсия.СвободноСтрок - 1;
				КонецЕсли;
				
				Рекурсия.ВсегоОсталосьВывести = Рекурсия.ВсегоОсталосьВывести - 1;
				ВывестиВариант = ПорядокВывода.Добавить();
				ВывестиВариант.НомерКолонки        = Рекурсия.НомерТекущейКолонки;
				ВывестиВариант.ЭтоВариант          = Истина;
				ВывестиВариант.СтрокаДерева        = СтрокаДерева;
				ВывестиВариант.Вариант             = Вариант;
				ВывестиВариант.ВариантСсылка       = Вариант.Ссылка;
				ВывестиВариант.ПодсистемаПриоритет = СтрокаДерева.Подсистема.Приоритет;
				ЗаполнитьЗначенияСвойств(ВывестиВариант, СтрокаДерева, "Подсистема, ПодсистемаСсылка, УровеньВложенности");
				
				ВариантовВыведено = ВариантовВыведено + 1;
				
				// Учет строк, занятых вариантами.
				Рекурсия.СвободноСтрок = Рекурсия.СвободноСтрок - 1;
			КонецЦикла;
			
		КонецЕсли;
		
		// Регистрация вложенных строк.
		ЗаполнитьПорядокВывода(ПорядокВывода, СтрокаДерева, ПеременныеКонтекста);
		
		// Проброс НачатВывод вверх по иерархии.
		Если СтрокаДерева.НачатВывод Тогда
			СтрокаРодителя.НачатВывод = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ДобавитьГруппуПодсистемы(ПеременныеКонтекста, СтрокаПорядкаВывода, ВГруппу)
	
	Подсистема = СтрокаПорядкаВывода.Подсистема;
	СтрокаДерева = СтрокаПорядкаВывода.СтрокаДерева;
	УвеличениеРазмераШрифта = ПеременныеКонтекста.МаксимальныйУровеньВложенности - СтрокаПорядкаВывода.УровеньВложенности;
	
	Подсистема.НомерЭлемента = Подсистема.НомерЭлемента + 1;
	ГруппаПодсистемыИмя = Подсистема.ИмяЭлемента + "_" + Формат(Подсистема.НомерЭлемента, "ЧГ=0");
	
	ГруппаПодсистемы = Элементы.Вставить(ГруппаПодсистемыИмя, Тип("ГруппаФормы"), ВГруппу);
	ГруппаПодсистемы.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаПодсистемы.РастягиватьПоГоризонтали = Истина;
	ГруппаПодсистемы.ЦветТекстаЗаголовка      = ЦветГруппыВариантовОтчетов;
	ГруппаПодсистемы.Отображение    = ОтображениеОбычнойГруппы.Нет;
	ГруппаПодсистемы.ШрифтЗаголовка = Новый Шрифт(ШрифтЖирный, , 8 + 2*УвеличениеРазмераШрифта);
	ГруппаПодсистемы.Группировка    = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
	
	ГруппаПодсистемы.Заголовок = Подсистема.Представление;
	Если СтрокаПорядкаВывода.ЭтоПродолжение Тогда
		ГруппаПодсистемы.Заголовок = ГруппаПодсистемы.Заголовок + " " + НСтр("ru = '(продолжение)'");
	КонецЕсли;
	Для Н = 2 По СтрокаПорядкаВывода.УровеньВложенности Цикл
		ГруппаПодсистемы.Заголовок = "    " + ГруппаПодсистемы.Заголовок;
	КонецЦикла;
	
	СтрокаДерева.ГруппаФормы = ГруппаПодсистемы;
	
	Возврат ГруппаПодсистемы;
	
КонецФункции

&НаСервере
Функция ДобавитьЭлементыВариантаОтчета(ПеременныеКонтекста, Вариант, ВГруппу, УровеньВложенности = 0)
	
	// Уникальное имя добавляемого элемента
	ДобавленоЭлементов = ДобавленоЭлементов + 1;
	НадписьИмя = "ДобавленныйЭлемент_" + Формат(ДобавленоЭлементов, "ЧГ=0");
	
	ГруппаВариантаИмя = "Группа_" + НадписьИмя;
	ГруппаВарианта = Элементы.Вставить(ГруппаВариантаИмя, Тип("ГруппаФормы"), ВГруппу);
	ЗаполнитьЗначенияСвойств(ГруппаВарианта, ПеременныеКонтекста.Шаблоны.ГруппаВарианта);
	
	// Добавление пустой картинки для отступа.
	Если УровеньВложенности > 1 Тогда
		КартинкаИмя = "КартинкаОтступа_" + НадписьИмя;
		Картинка = Элементы.Вставить(КартинкаИмя, Тип("ДекорацияФормы"), ГруппаВарианта);
		ЗаполнитьЗначенияСвойств(Картинка, ПеременныеКонтекста.Шаблоны.КартинкаОтступа);
		Картинка.Ширина = УровеньВложенности - 1;
	КонецЕсли;
	
	// Добавление флажка (для быстрого доступа не используется)
	Если РежимНастройки Тогда
		ФлажокИмя = "Флажок_" + НадписьИмя;
		
		РеквизитФормы = Новый РеквизитФормы(ФлажокИмя, Новый ОписаниеТипов("Булево"), , , Истина);
		ПеременныеКонтекста.ДобавляемыеРеквизиты.Добавить(РеквизитФормы);
		
		Флажок = Элементы.Вставить(ФлажокИмя, Тип("ПолеФормы"), ГруппаВарианта);
		Флажок.Вид = ВидПоляФормы.ПолеФлажка;
		Флажок.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		Флажок.Видимость = (ПеременныеКонтекста.ИмяГруппы <> "БыстрыйДоступ");
		Флажок.УстановитьДействие("ПриИзменении", "ВидимостьВариантаПриИзменении");
	КонецЕсли;
	
	// Добавление картинки (используется только для быстрого доступа)
	Если ПеременныеКонтекста.ИмяГруппы = "БыстрыйДоступ" Тогда
		КартинкаИмя = "Картинка_" + НадписьИмя;
		Картинка = Элементы.Вставить(КартинкаИмя, Тип("ДекорацияФормы"), ГруппаВарианта);
		ЗаполнитьЗначенияСвойств(Картинка, ПеременныеКонтекста.Шаблоны.КартинкаБыстрогоДоступа);
	КонецЕсли;
	
	// Добавление надписи-гиперссылки варианта отчета
	Надпись = Элементы.Вставить(НадписьИмя, Тип("ДекорацияФормы"), ГруппаВарианта);
	ЗаполнитьЗначенияСвойств(Надпись, ПеременныеКонтекста.Шаблоны.НадписьВарианта);
	Надпись.Заголовок = СокрЛП(Вариант.Наименование);
	Если ЗначениеЗаполнено(Вариант.Описание) Тогда
		Надпись.Подсказка = СокрЛП(Вариант.Описание);
	КонецЕсли;
	Если ЗначениеЗаполнено(Вариант.Автор) Тогда
		Надпись.Подсказка = Надпись.Подсказка + Символы.ПС + НСтр("ru = 'Автор:'") + " " + СокрЛП(Строка(Вариант.Автор));
	КонецЕсли;
	Надпись.УстановитьДействие("Нажатие", "ВариантНажатие");
	Если НЕ Вариант.Видимость Тогда
		Надпись.ЦветТекста = ЦветСкрытыхВариантов;
	КонецЕсли;
	Если ПеременныеКонтекста.ИмяГруппы <> "СмТакже"
		И (Вариант.Важный ИЛИ ПеременныеКонтекста.ИмяГруппы = "БыстрыйДоступ")
		И Вариант.Видимость Тогда
		Надпись.Шрифт = ШрифтЖирный;
	КонецЕсли;
	
	Если РежимНастройки Тогда
		Для Каждого КлючИЗначение Из ПеременныеКонтекста.КонтекстноеМеню Цикл
			КомандаИмя = КлючИЗначение.Ключ;
			КнопкаИмя = КомандаИмя + "_" + НадписьИмя;
			Кнопка = Элементы.Вставить(КнопкаИмя, Тип("КнопкаФормы"), Надпись.КонтекстноеМеню);
			Если ВебКлиент Тогда
				Команда = Команды.Добавить(КнопкаИмя);
				ЗаполнитьЗначенияСвойств(Команда, Команды[КомандаИмя]);
				Кнопка.ИмяКоманды = КнопкаИмя;
			Иначе
				Кнопка.ИмяКоманды = КомандаИмя;
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(Кнопка, КлючИЗначение.Значение);
		КонецЦикла;
	КонецЕсли;
	
	// Регистрация добавленной надписи
	Найденные = ДобавленныеВарианты.НайтиСтроки(Новый Структура("Ссылка, Подсистема", Вариант.Ссылка, Вариант.Подсистема));
	Если Найденные.Количество() > 0 Тогда
		СтрокаТаблицы = Найденные[0];
	Иначе
		СтрокаТаблицы = ДобавленныеВарианты.Добавить();
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Вариант);
	СтрокаТаблицы.ГруппаУровня2Имя     = ПеременныеКонтекста.ИмяГруппы;
	СтрокаТаблицы.НадписьИмя           = НадписьИмя;
	
	Возврат Надпись;
	
КонецФункции

&НаСервере
Функция ДобавитьПустуюДекорацию(ПеременныеКонтекста, ВГруппу)
	
	ДобавленоЭлементов = ДобавленоЭлементов + 1;
	ДекорацияИмя = "ПустаяДекорация_" + Формат(ДобавленоЭлементов, "ЧГ=0");
	
	Декорация = Элементы.Вставить(ДекорацияИмя, Тип("ДекорацияФормы"), ВГруппу);
	Декорация.Вид = ВидДекорацииФормы.Надпись;
	Декорация.Заголовок = " ";
	
	Возврат Декорация;
	
КонецФункции

