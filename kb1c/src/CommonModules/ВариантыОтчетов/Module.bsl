////////////////////////////////////////////////////////////////////////////////
// Подсистема "Варианты отчетов" (сервер)
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Формирует список разделов, в которых размещены команды вызова панели отчетов.
//
// Параметры:
//   Нет
//
// Возвращаемое значение: 
//   Результат (ТаблицаЗначений)
//       |- Ссылка        (СправочникСсылка.ИдентификаторыОбъектовМетаданных)
//       |- Метаданные    (ОбъектМетаданных)
//       |- Имя           (Строка)
//       |- Представление (Строка)
//
Функция ИспользуемыеРазделы() Экспорт
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Ссылка",        Новый ОписаниеТипов("СправочникСсылка.ИдентификаторыОбъектовМетаданных"));
	Результат.Колонки.Добавить("Метаданные",    Новый ОписаниеТипов("ОбъектМетаданных"));
	Результат.Колонки.Добавить("Имя",           ОписаниеТиповСтрока());
	Результат.Колонки.Добавить("Представление", ОписаниеТиповСтрока());
	
	РазделыМетаданные = Новый Массив;
	
	ВариантыОтчетовПереопределяемый.ОпределитьРазделыСВариантамиОтчетов(РазделыМетаданные);
	
	Для Каждого РазделМетаданные Из РазделыМетаданные Цикл
		Строка = Результат.Добавить();
		Строка.Ссылка        = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(РазделМетаданные);
		Строка.Метаданные    = РазделМетаданные;
		Строка.Имя           = РазделМетаданные.Имя;
		Строка.Представление = РазделМетаданные.Представление();
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

// Получает ссылку варианта отчета по набору ключевых реквизитов.
//
// Параметры:
//   Отчет        (Соответствует реквизиту справочника) Полное имя или ссылка отчета.
//   КлючВарианта (Соответствует реквизиту справочника) Имя варианта отчета.
//
// Возвращаемое значение: 
//   Результат (СправочникСсылка.ВариантыОтчетов, Неопределено)
//
Функция ПолучитьСсылку(Отчет, КлючВарианта) Экспорт
	Результат = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ВариантыОтчетов.Ссылка
	|ИЗ
	|	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
	|ГДЕ
	|	ВариантыОтчетов.Отчет = &Отчет
	|	И ВариантыОтчетов.КлючВарианта = &КлючВарианта";
	Запрос.УстановитьПараметр("Отчет", Отчет);
	Запрос.УстановитьПараметр("КлючВарианта", КлючВарианта);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Формирует массив отчетов, доступных текущему пользователю.
//
// Возвращаемое значение:
//   Результат (Массив) из (*) см. тип реквизита Отчет справочника ВариантыОтчетов.
//       Ссылки отчетов, доступных текущему пользователю.
//
// Описание:
//   Данный массив следует использовать во всех запросах к таблице
//   справочника "ВариантыОтчетов" как отбор по реквизиту "Отчет",
//   кроме случаев выборки вариантов из внешних отчетов.
//
Функция ОтчетыТекущегоПользователя() Экспорт
	
	ДоступныеОтчеты = ВариантыОтчетовПовтИсп.ДоступныеОтчеты();
	
	// Дополнить массив ссылкам дополнительных отчетов, доступных текущему пользователю.
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки") Тогда
		МодульДополнительныеОтчетыИОбработки = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ДополнительныеОтчетыИОбработки");
		МодульДополнительныеОтчетыИОбработки.ПриДобавленииДополнительныхОтчетовДоступныхТекущемуПользователю(ДоступныеОтчеты);
	КонецЕсли;
	
	Возврат ДоступныеОтчеты;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Поддержка переопределяемых модулей

// Формирует описание настроек отчета.
//   Для использования в ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов().
//
// Параметры:
//   ДеревоВариантов (ДеревоЗначений) Используется для описания настроек отчетов и вариантов
//       см. описание к ВариантыОтчетов.ДеревоНастроекВариантовОтчетовКонфигурации()
//   ОтчетЗначениеИлиМетаданные (...) Метаданные или ссылка отчета.
//       |- (ОбъектМетаданных)
//       |- (СправочникСсылка.ИдентификаторыОбъектовМетаданных)
//
// Возвращаемое значение: 
//   Отчет (СтрокаДереваЗначений)
//       см. "Реквизиты для изменения" функции ВариантыОтчетов.ДеревоНастроекВариантовОтчетовКонфигурации()
//
Функция ОписаниеОтчета(ДеревоВариантов, ОтчетЗначениеИлиМетаданные) Экспорт
	ЭтоМетаданные = (ТипЗнч(ОтчетЗначениеИлиМетаданные) = Тип("ОбъектМетаданных"));
	Если ЭтоМетаданные Тогда
		СтрокаОтчет = ДеревоВариантов.Строки.Найти(ОтчетЗначениеИлиМетаданные, "Метаданные", Ложь);
	Иначе
		СтрокаОтчет = ДеревоВариантов.Строки.Найти(ОтчетЗначениеИлиМетаданные, "Отчет", Ложь);
	КонецЕсли;
	
	Если СтрокаОтчет = Неопределено Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка получения описания отчета ""%1"",
			|он не подключен к подсистеме ""%2""'"),
			СтрокаОтчет.Метаданные.Имя,
			ВариантыОтчетовКлиентСервер.НаименованиеПодсистемы(""));
	КонецЕсли;
	
	Возврат СтрокаОтчет;
КонецФункции // ОписаниеОтчета

// Формирует описание настроек варианта отчета.
//   Для использования в ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов().
//
// Параметры:
//   ДеревоВариантов (ДеревоЗначений) Используется для описания настроек отчетов и вариантов
//       см. описание к ВариантыОтчетов.ДеревоНастроекВариантовОтчетовКонфигурации()
//   ОтчетСтрокаДереваИлиЗначениеИлиМетаданные (...) Описание настроек, метаданные или ссылка отчета.
//       |- (СтрокаДерева)
//       |- (ОбъектМетаданных)
//       |- (СправочникСсылка.ИдентификаторыОбъектовМетаданных)
//   КлючВарианта (Строка) Имя варианта отчета как оно задано в схеме компоновки данных.
//
// Возвращаемое значение: 
//   Вариант (СтрокаДереваЗначений)
//       см. "Реквизиты для изменения" функции ВариантыОтчетов.ДеревоНастроекВариантовОтчетовКонфигурации()
//
Функция ОписаниеВарианта(ДеревоВариантов, ОтчетСтрокаДереваИлиЗначениеИлиМетаданные, КлючВарианта) Экспорт
	Если ТипЗнч(ОтчетСтрокаДереваИлиЗначениеИлиМетаданные) <> Тип("СтрокаДереваЗначений") Тогда
		СтрокаОтчет = ОписаниеОтчета(ДеревоВариантов, ОтчетСтрокаДереваИлиЗначениеИлиМетаданные);
	Иначе
		СтрокаОтчет = ОтчетСтрокаДереваИлиЗначениеИлиМетаданные;
	КонецЕсли;
	
	СтрокаВариант = СтрокаОтчет.Строки.Найти(КлючВарианта, "КлючВарианта", Ложь);
	
	Если СтрокаВариант = Неопределено Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка получения описания варианта ""%1"" отчета ""%2"",
			|он не подключен к подсистеме ""%3""'"),
			КлючВарианта,
			СтрокаОтчет.Метаданные.Имя,
			ВариантыОтчетовКлиентСервер.НаименованиеПодсистемы(""));
	КонецЕсли;
	
	ЗаполнитьОписаниеСтрокиВарианта(СтрокаВариант, СтрокаОтчет);
	
	Возврат СтрокаВариант;
КонецФункции // ОписаниеВарианта

////////////////////////////////////////////////////////////////////////////////
// Для вызова из обработчиков обновления прикладной конфигурации

// Переносит пользовательские варианты из стандартного хранилища вариантов в хранилище подсистемы.
//   Используется при частичном внедрении - когда ХранилищеВариантовОтчетов установлено не для всей конфигурации,
//   а в свойствах конкретных отчетов, подключенных к подсистеме.
//   Рекомендуется использовать в обработчиках обновления на конкретную версию.
//
// Параметры:
//   ИменаОтчетов (Строка) Необязательный. Имена отчетов, разделенные запятыми.
//
// Например:
//	// Перенос всех пользовательских вариантов отчетов при обновлении.
//	ВариантыОтчетов.ПеренестиВариантыОтчетовИзСтандартногоХранилища();
//	// Либо перенос пользовательских вариантов отчетов, переведенных на хранилище подсистемы "Варианты отчетов".
//	ВариантыОтчетов.ПеренестиВариантыОтчетовИзСтандартногоХранилища("АнализЖурналаРегистрации, ЗадачиИстекающиеНаДату");
//
Процедура ПеренестиПользовательскиеИзСтандартногоХранилища(ИменаОтчетов = "") Экспорт
	ПредставлениеПроцедуры = НСтр("ru = 'Прямая конвертация вариантов отчетов'");
	ЗапускПроцедуры(ПредставлениеПроцедуры);
	
	// Результат, который будет сохранен в хранилище
	ТаблицаВариантов = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ПереносВариантовОтчетов", "ТаблицаВариантов", , , "");
	Если ТипЗнч(ТаблицаВариантов) <> Тип("ТаблицаЗначений") ИЛИ ТаблицаВариантов.Количество() = 0 Тогда
		ТаблицаВариантов = Новый ТаблицаЗначений;
		ТаблицаВариантов.Колонки.Добавить("Отчет",     ОписаниеТиповСтрока());
		ТаблицаВариантов.Колонки.Добавить("Вариант",   ОписаниеТиповСтрока());
		ТаблицаВариантов.Колонки.Добавить("Автор",     ОписаниеТиповСтрока());
		ТаблицаВариантов.Колонки.Добавить("Настройка", Новый ОписаниеТипов("ХранилищеЗначения"));
		ТаблицаВариантов.Колонки.Добавить("ПредставлениеОтчета",   ОписаниеТиповСтрока());
		ТаблицаВариантов.Колонки.Добавить("ПредставлениеВарианта", ОписаниеТиповСтрока());
		ТаблицаВариантов.Колонки.Добавить("ИдентификаторАвтора",   Новый ОписаниеТипов("УникальныйИдентификатор"));
	КонецЕсли;
	
	УдалятьВсе = (ИменаОтчетов = "" ИЛИ ИменаОтчетов = "*");
	МассивУдаляемыхКлючейОбъектов = Новый Массив;
	
	ВыборкаХранилища = ХранилищеВариантовОтчетов.Выбрать(НовыйФильтрПоКлючуОбъекта(ИменаОтчетов));
	ОшибокЧтенияПодряд = 0;
	Пока Истина Цикл
		Попытка
			ЭлементВыборкиПолучен = ВыборкаХранилища.Следующий();
			ОшибокЧтенияПодряд = 0;
		Исключение
			ЭлементВыборкиПолучен = Неопределено;
			ОшибокЧтенияПодряд = ОшибокЧтенияПодряд + 1;
			ОшибкаПоВарианту(
				Неопределено,
				НСтр("ru = 'В процессе выборки вариантов отчетов из стандартного хранилища возникла ошибка:'")
				+ Символы.ПС
				+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
		Если ЭлементВыборкиПолучен = Ложь Тогда
			Если ИменаОтчетов = "" ИЛИ ИменаОтчетов = "*" Тогда
				Прервать;
			Иначе
				ВыборкаХранилища = ХранилищеВариантовОтчетов.Выбрать(НовыйФильтрПоКлючуОбъекта(ИменаОтчетов));
				Продолжить;
			КонецЕсли;
		ИначеЕсли ЭлементВыборкиПолучен = Неопределено Тогда
			Если ОшибокЧтенияПодряд > 100 Тогда
				Прервать;
			Иначе
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		// Пропуск не подключенных внутренних отчетов.
		ОтчетМетаданные = Метаданные.НайтиПоПолномуИмени(ВыборкаХранилища.КлючОбъекта);
		Если ОтчетМетаданные <> Неопределено Тогда
			ХранилищеМетаданные = ОтчетМетаданные.ХранилищеВариантов;
			Если ХранилищеМетаданные = Неопределено ИЛИ ХранилищеМетаданные.Имя <> "ХранилищеВариантовОтчетов" Тогда
				УдалятьВсе = Ложь;
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		// Внешние варианты отчетов переносятся все, поскольку для них невозможно определить
		// подключены они к хранилищу подсистемы или нет.
		МассивУдаляемыхКлючейОбъектов.Добавить(ВыборкаХранилища.КлючОбъекта);
		
		ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоИмени(ВыборкаХранилища.Пользователь);
		Если ПользовательИБ = Неопределено Тогда
			Пользователь = Справочники.Пользователи.НайтиПоНаименованию(ВыборкаХранилища.Пользователь, Истина);
			Если НЕ ЗначениеЗаполнено(Пользователь) Тогда
				Продолжить;
			КонецЕсли;
			ИдентификаторПользователя = Пользователь.ИдентификаторПользователяИБ;
		Иначе
			ИдентификаторПользователя = ПользовательИБ.УникальныйИдентификатор;
		КонецЕсли;
		
		СтрокаТаблицы = ТаблицаВариантов.Добавить();
		СтрокаТаблицы.Отчет     = ВыборкаХранилища.КлючОбъекта;
		СтрокаТаблицы.Вариант   = ВыборкаХранилища.КлючНастроек;
		СтрокаТаблицы.Автор     = ВыборкаХранилища.Пользователь;
		СтрокаТаблицы.Настройка = Новый ХранилищеЗначения(ВыборкаХранилища.Настройки, Новый СжатиеДанных(9));
		СтрокаТаблицы.ПредставлениеВарианта = ВыборкаХранилища.Представление;
		СтрокаТаблицы.ИдентификаторАвтора   = ИдентификаторПользователя;
		Если ОтчетМетаданные = Неопределено Тогда
			СтрокаТаблицы.ПредставлениеОтчета = ВыборкаХранилища.КлючОбъекта;
		Иначе
			СтрокаТаблицы.ПредставлениеОтчета = ОтчетМетаданные.Представление();
		КонецЕсли;
	КонецЦикла;
	
	// Очистка стандартного хранилища
	Если УдалятьВсе Тогда
		ХранилищеВариантовОтчетов.Удалить(Неопределено, Неопределено, Неопределено);
	Иначе
		Для Каждого КлючОбъекта Из МассивУдаляемыхКлючейОбъектов Цикл
			ХранилищеВариантовОтчетов.Удалить(КлючОбъекта, Неопределено, Неопределено);
		КонецЦикла;
	КонецЕсли;
	
	// Результат выполнения
	ЗавершениеПроцедуры(ПредставлениеПроцедуры);
	
	// Загрузка вариантов в хранилище подсистемы
	ЗагрузитьПользовательские(ТаблицаВариантов);
КонецПроцедуры

// Загружает в хранилище подсистемы варианты отчетов, предварительно сохраненные
//   из системного хранилища вариантов в хранилище общих настроек.
//   Используется для загрузки вариантов отчетов при полном или частичном внедрении.
//   При полном внедрении может вызваться из обработки "ПереносВариантовОтчетов".
//   Рекомендуется использовать в обработчиках обновления на конкретную версию.
//
// Параметры:
//   ТаблицаВариантов (ТаблицаЗначений) Необязательный. Используется в системных целях.
//       |- Отчет   (Строка) Полное имя отчета в формате "Отчет.<ИмяОтчета>".
//       |- Вариант (Строка) Имя варианта отчета.
//       |- Автор   (Строка) Имя пользователя.
//       |- Настройка (ХранилищеЗначения) ПользовательскиеНастройкиКомпоновкиДанных.
//       |- ПредставлениеОтчета   (Строка)
//       |- ПредставлениеВарианта (Строка)
//       |- ИдентификаторАвтора (УникальныйИдентификатор) Идентификатор пользователя.
//
Процедура ЗагрузитьПользовательские(ТаблицаВариантов = Неопределено) Экспорт
	
	Если ТаблицаВариантов = Неопределено Тогда
		ТаблицаВариантов = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ПереносВариантовОтчетов", "ТаблицаВариантов", , , "");
	КонецЕсли;
	
	Если ТипЗнч(ТаблицаВариантов) <> Тип("ТаблицаЗначений") ИЛИ ТаблицаВариантов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПредставлениеПроцедуры = НСтр("ru = 'Завершить конвертацию вариантов отчетов'");
	ЗапускПроцедуры(ПредставлениеПроцедуры);
	
	// Замена имен колонок под структуру справочника.
	ТаблицаВариантов.Колонки.Отчет.Имя = "ОтчетПолноеИмя";
	ТаблицаВариантов.Колонки.Вариант.Имя = "КлючВарианта";
	ТаблицаВариантов.Колонки.ПредставлениеВарианта.Имя = "Наименование";
	
	// Преобразование имен отчетов в ссылки справочника ИОМ.
	ТаблицаВариантов.Колонки.Добавить("Отчет", Метаданные.Справочники.ВариантыОтчетов.Реквизиты.Отчет.Тип);
	ТаблицаВариантов.Колонки.Добавить("Определен", Новый ОписаниеТипов("Булево"));
	ТаблицаВариантов.Колонки.Добавить("ТипОтчета", Метаданные.Справочники.ВариантыОтчетов.Реквизиты.ТипОтчета.Тип);
	Для Каждого СтрокаТаблицы Из ТаблицаВариантов Цикл
		ОтчетИнформация = СформироватьИнформациюОбОтчетеПоПолномуИмени(СтрокаТаблицы.ОтчетПолноеИмя);
		
		// Проверить результат
		Если ТипЗнч(ОтчетИнформация.ТекстОшибки) = Тип("Строка") Тогда
			ОшибкаПоВарианту(Неопределено, ОтчетИнформация.ТекстОшибки);
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицы.Определен = Истина;
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, ОтчетИнформация, "Отчет, ТипОтчета");
	КонецЦикла;
	
	ТаблицаВариантов.Сортировать("ОтчетПолноеИмя Возр, КлючВарианта Возр");
	
	// Существующие варианты отчетов
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаВариантов.Отчет,
	|	ТаблицаВариантов.ОтчетПолноеИмя,
	|	ТаблицаВариантов.ТипОтчета,
	|	ТаблицаВариантов.КлючВарианта,
	|	ТаблицаВариантов.Автор
	|ПОМЕСТИТЬ втВарианты
	|ИЗ
	|	&ТаблицаВариантов КАК ТаблицаВариантов
	|ГДЕ
	|	ТаблицаВариантов.Определен = ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втВарианты.Отчет,
	|	втВарианты.ОтчетПолноеИмя,
	|	втВарианты.ТипОтчета,
	|	втВарианты.КлючВарианта,
	|	ВариантыОтчетов.Ссылка,
	|	ПользователиПоИмени.Ссылка КАК ПользовательПоИмени
	|ИЗ
	|	втВарианты КАК втВарианты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК ПользователиПоИмени
	|		ПО втВарианты.Автор = ПользователиПоИмени.Наименование
	|			И (ПользователиПоИмени.ПометкаУдаления = ЛОЖЬ)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВариантыОтчетов КАК ВариантыОтчетов
	|		ПО втВарианты.Отчет = ВариантыОтчетов.Отчет
	|			И втВарианты.КлючВарианта = ВариантыОтчетов.КлючВарианта
	|			И втВарианты.ТипОтчета = ВариантыОтчетов.ТипОтчета";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаВариантов", ТаблицаВариантов);
	Запрос.Текст = ТекстЗапроса;
	
	ВариантыБД = Запрос.Выполнить().Выгрузить();
	
	// Авторы вариантов
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Пользователь,
	|	Пользователи.ИдентификаторПользователяИБ КАК Идентификатор
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.ИдентификаторПользователяИБ В(&Идентификаторы)
	|	И Пользователи.ПометкаУдаления = ЛОЖЬ";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Идентификаторы", ТаблицаВариантов.ВыгрузитьКолонку("ИдентификаторАвтора"));
	Запрос.Текст = ТекстЗапроса;
	
	ПользователиПоИдентификатору = Запрос.Выполнить().Выгрузить();
	
	ПодсистемыОтчетов = РазмещениеОтчетовВПодсистемах();
	
	// Загрузка вариантов в хранилище подсистемы
	ОпределенныеВарианты = ТаблицаВариантов.НайтиСтроки(Новый Структура("Определен", Истина));
	Для Каждого СтрокаТаблицы Из ОпределенныеВарианты Цикл
		Найденные = ВариантыБД.НайтиСтроки(Новый Структура("Отчет, КлючВарианта", СтрокаТаблицы.Отчет, СтрокаТаблицы.КлючВарианта));
		ВариантБД = Найденные[0];
		
		// Если вариант уже загружен в справочник "Варианты отчетов" - не загружаем его.
		Если ЗначениеЗаполнено(ВариантБД.Ссылка) Тогда
			Продолжить;
		КонецЕсли;
		
		// СправочникОбъект
		ВариантОбъект = Справочники.ВариантыОтчетов.СоздатьЭлемент();
		
		// Уже подготовленные параметры
		ЗаполнитьЗначенияСвойств(ВариантОбъект, СтрокаТаблицы, "Наименование, Отчет, ТипОтчета, КлючВарианта");
		
		// Настройки
		Настройки = СтрокаТаблицы.Настройка;
		Если ТипЗнч(Настройки) = Тип("ХранилищеЗначения") Тогда
			Настройки = Настройки.Получить();
		КонецЕсли;
		ВариантОбъект.Настройки = Новый ХранилищеЗначения(Настройки);
		
		// В стандартном хранилище хранятся только пользовательские ВО
		ВариантОбъект.Пользовательский = Истина;
		ВариантОбъект.ТолькоДляАвтора = Истина;
		
		// Автор варианта
		ПользовательПоИД = ПользователиПоИдентификатору.Найти(СтрокаТаблицы.ИдентификаторАвтора, "Идентификатор");
		Если ПользовательПоИД <> Неопределено И ЗначениеЗаполнено(ПользовательПоИД.Пользователь) Тогда
			ВариантОбъект.Автор = ПользовательПоИД.Пользователь;
		ИначеЕсли ВариантБД <> Неопределено И ЗначениеЗаполнено(ВариантБД.ПользовательПоИмени) Тогда
			ВариантОбъект.Автор = ВариантБД.ПользовательПоИмени;
		Иначе
			ОшибкаПоВарианту(
				ВариантОбъект.Ссылка,
				НСтр("ru = 'Вариант ""%1"" отчета ""%2"": не найден автор ""%3""'"),
				ВариантОбъект.Наименование,
				СтрокаТаблицы.ПредставлениеОтчета,
				СтрокаТаблицы.Автор);
		КонецЕсли;
		
		// Поскольку переносятся пользовательские варианты отчетов,
		// то настройки размещения можно взять только из метаданных отчета.
		Найденные = ПодсистемыОтчетов.НайтиСтроки(Новый Структура("ОтчетПолноеИмя", СтрокаТаблицы.ОтчетПолноеИмя));
		Для Каждого СтрокаПодсистема Из Найденные Цикл
			СтрокаРаздел = ВариантОбъект.Размещение.Добавить();
			СтрокаРаздел.Использование = Истина;
			СтрокаРаздел.РазделИлиГруппа = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(СтрокаПодсистема.ПодсистемаМетаданные);
		КонецЦикла;
		
		ВариантОбъект.Записать();
	КонецЦикла;
	
	// Очистка
	ОбщегоНазначения.ХранилищеОбщихНастроекУдалить("ПереносВариантовОтчетов", "ТаблицаВариантов", "");
	
	ЗавершениеПроцедуры(ПредставлениеПроцедуры);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС

////////////////////////////////////////////////////////////////////////////////
// Добавление обработчиков служебных событий (подписок)

// См. описание этой же процедуры в модуле СтандартныеПодсистемыСервер.
Процедура ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики) Экспорт
	
	// СЕРВЕРНЫЕ ОБРАБОТЧИКИ.
	
	СерверныеОбработчики["СтандартныеПодсистемы.ОбновлениеВерсииИБ\ПриДобавленииОбработчиковОбновления"].Добавить(
		"ВариантыОтчетов");
	
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриДобавленииИсключенийПоискаСсылок"].Добавить(
		"ВариантыОтчетов");
	
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриДобавленииПереименованийОбъектовМетаданных"].Добавить(
		"ВариантыОтчетов");
	
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриПолученииОбязательныхОбъектовПланаОбмена"].Добавить(
		"ВариантыОтчетов");
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса.ВыгрузкаЗагрузкаДанных") Тогда
		
		СерверныеОбработчики["СтандартныеПодсистемы.РаботаВМоделиСервиса.ВыгрузкаЗагрузкаДанных\ПослеВыгрузкиОбласти"].Добавить(
			"ВариантыОтчетов");
			
		СерверныеОбработчики["СтандартныеПодсистемы.РаботаВМоделиСервиса.ВыгрузкаЗагрузкаДанных\ПриФормированииСловаряЗаменПоКаталогуВыгрузки"].Добавить(
			"ВариантыОтчетов");
			
		СерверныеОбработчики["СтандартныеПодсистемы.РаботаВМоделиСервиса.ВыгрузкаЗагрузкаДанных\ПриОпределенииСтандартныхТиповОбщихДанных"].Добавить(
			"ВариантыОтчетов");
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики служебных событий

// Добавляет процедуры-обработчики обновления, необходимые данной подсистеме.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                  общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	////////////////////////////////////////////////////////////////////////////////
	// План обновления:
	
	////////////////////////////////////////////////////////////////////////////////
	// 1. Обновить общие данные.
	Обработчик = Обработчики.Добавить();
	Обработчик.ВыполнятьВГруппеОбязательных = Ложь;
	Обработчик.ОбщиеДанные                  = Истина;
	Обработчик.УправлениеОбработчиками      = Истина;
	Обработчик.МонопольныйРежим             = Ложь;
	Обработчик.Версия    = "*";
	Обработчик.Процедура = "ВариантыОтчетов.ОбновитьОбщиеДанные";
	Обработчик.Приоритет = 90;
	
	////////////////////////////////////////////////////////////////////////////////
	// 2. Обновить разделенные данные.
	// 2.1. Перевести разделенные данные на версию 2.1.1.0.
	Обработчик = Обработчики.Добавить();
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.ОбщиеДанные                  = Ложь;
	Обработчик.УправлениеОбработчиками      = Ложь;
	Обработчик.МонопольныйРежим             = Истина;
	Обработчик.Версия    = "2.1.1.0";
	Обработчик.Процедура = "ВариантыОтчетов.ПерейтиКРедакции21";
	Обработчик.Приоритет = 80;
	
	// 2.2. Перевести разделенные данные на версию 2.1.3.6.
	Обработчик = Обработчики.Добавить();
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.ОбщиеДанные                  = Ложь;
	Обработчик.УправлениеОбработчиками      = Ложь;
	Обработчик.МонопольныйРежим             = Истина;
	Обработчик.Версия    = "2.1.3.6";
	Обработчик.Процедура = "ВариантыОтчетов.ЗаполнитьСсылкиПредопределенных";
	Обработчик.Приоритет = 80;
	
	// 2.3. Обновить разделенные данные в локальном режиме.
	Обработчик = Обработчики.Добавить();
	Обработчик.МонопольныйРежим = Ложь;
	Обработчик.Версия    = "*";
	Обработчик.Процедура = "ВариантыОтчетов.ОбновитьРазделенныеДанные";
	Обработчик.Приоритет = 70;
	
КонецПроцедуры

// Возникает при получении исключений поиска ссылок.
//
Процедура ПриДобавленииИсключенийПоискаСсылок(ИсключенияПоискаСсылок) Экспорт
	
	ИсключенияПоискаСсылок.Добавить(Метаданные.Справочники.ВариантыОтчетов.ТабличныеЧасти.Размещение.Реквизиты.РазделИлиГруппа);
	
КонецПроцедуры

// Заполняет переименования тех объектов метаданных, которые невозможно
// автоматически найти по типу, но ссылки на которые требуется сохранять
// в базе данных (например: подсистемы, роли).
//
// Подробнее: см. ОбщегоНазначения.ДобавитьПереименование().
//
Процедура ПриДобавленииПереименованийОбъектовМетаданных(Итог) Экспорт
	
	Библиотека = "СтандартныеПодсистемы";
	
	ОбщегоНазначения.ДобавитьПереименование(
		Итог, "2.1.0.2", "Роль.ЧтениеВариантовОтчетов", "Роль.ИспользованиеВариантовОтчетов", Библиотека);
	
КонецПроцедуры

// Используется для получения объектов метаданных обязательных для плана обмена.
// Если подсистема имеет объекты метаданных обязательные для включения в состав плана обмена,
// то в параметр <Объект> необходимо добавить эти объекты метаданных.
//
// Параметры:
// Объекты – Массив. Массив объектов метаданных конфигурации, которые необходимо включить в состав плана обмена.
// РаспределеннаяИнформационнаяБаза (только чтение) – Булево. Признак получения объектов для плана обмена РИБ.
// Истина – требуется получить список объектов плана обмена РИБ;
// Ложь – требуется получить список для плана обмена НЕ РИБ.
//
Процедура ПриПолученииОбязательныхОбъектовПланаОбмена(Объекты, Знач РаспределеннаяИнформационнаяБаза) Экспорт
	
	Если РаспределеннаяИнформационнаяБаза Тогда
		
		Объекты.Добавить(Метаданные.Константы.ПараметрыВариантовОтчетов);
		Объекты.Добавить(Метаданные.Справочники.ВариантыОтчетов);
		Объекты.Добавить(Метаданные.Справочники.ПредопределенныеВариантыОтчетов);
		Объекты.Добавить(Метаданные.РегистрыСведений.НастройкиВариантовОтчетов);
		
	КонецЕсли;
	
КонецПроцедуры

// Выгружает данные для идентификации предопределенных вариантов отчетов в XML файл.
Процедура ПослеВыгрузкиОбласти(Знач КаталогВыгрузки) Экспорт
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.ОткрытьФайл(КаталогВыгрузки + "PredefinedReportVariants.xml");
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	ЗаписьXML.ЗаписатьНачалоЭлемента("Data");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("xs",  "http://www.w3.org/2001/XMLSchema");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("xsi", "http://www.w3.org/2001/XMLSchema-instance");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("ns1", "http://v8.1c.ru/8.1/data/core");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("ns2", "http://v8.1c.ru/8.1/data/enterprise");
	ЗаписьXML.ЗаписатьСоответствиеПространстваИмен("v8",  "http://v8.1c.ru/8.1/data/enterprise/current-config");
	
	Запрос = Новый Запрос("ВЫБРАТЬ Ссылка, КлючВарианта, Отчет ИЗ Справочник.ПредопределенныеВариантыОтчетов");
	ТаблицаПредопределенных = Запрос.Выполнить().Выгрузить();
	СериализаторXDTO.ЗаписатьXML(ЗаписьXML, ТаблицаПредопределенных, НазначениеТипаXML.Явное);
	
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ЗаписьXML.Закрыть();
	
КонецПроцедуры

// Добавляет в таблицу замен записи по предопределенным вариантам отчетов.
Процедура ПриФормированииСловаряЗаменПоКаталогуВыгрузки(Знач СловарьЗамен, Знач КаталогВыгрузки) Экспорт
	
	Чтение = Новый ЧтениеXML;
	Чтение.ОткрытьФайл(КаталогВыгрузки + "PredefinedReportVariants.xml");
	Чтение.ПерейтиКСодержимому();
	Если Чтение.ТипУзла <> ТипУзлаXML.НачалоЭлемента ИЛИ Чтение.Имя <> "Data" ИЛИ НЕ Чтение.Прочитать() Тогда
		ВызватьИсключение(НСтр("ru = 'Неверный формат файла PredefinedReportVariants.xml или этот файл не содержит записей.'"));
	КонецЕсли;
	
	Идентификаторы = СловарьЗамен.Найти(Тип("СправочникСсылка.ИдентификаторыОбъектовМетаданных"), "Тип").СоответствиеСсылок;
	СоответствиеСтарыхИАктуальныхИОМ = Новый Соответствие;
	Для Каждого КлючИЗначение Из Идентификаторы Цикл
		СтараяСсылка = Справочники.ИдентификаторыОбъектовМетаданных.ПолучитьСсылку(КлючИЗначение.Значение);
		АктуальнаяСсылка = Справочники.ИдентификаторыОбъектовМетаданных.ПолучитьСсылку(КлючИЗначение.Ключ);
		СоответствиеСтарыхИАктуальныхИОМ.Вставить(СтараяСсылка, АктуальнаяСсылка);
	КонецЦикла;
	
	ТаблицаПредопределенных = СериализаторXDTO.ПрочитатьXML(Чтение); // Ссылка, КлючВарианта, Отчет
	Для Каждого СтрокаТаблицы Из ТаблицаПредопределенных Цикл
		СтрокаТаблицы.Отчет = СоответствиеСтарыхИАктуальныхИОМ.Получить(СтрокаТаблицы.Отчет);
	КонецЦикла;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаПредопределенных.Ссылка,
	|	ТаблицаПредопределенных.КлючВарианта,
	|	ТаблицаПредопределенных.Отчет
	|ПОМЕСТИТЬ втТаблицаПредопределенных
	|ИЗ
	|	&ТаблицаПредопределенных КАК ТаблицаПредопределенных
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТаблицаПредопределенных.Ссылка КАК СтараяСсылка,
	|	ПредопределенныеВариантыОтчетов.Ссылка КАК АктуальнаяСсылка
	|ИЗ
	|	Справочник.ПредопределенныеВариантыОтчетов КАК ПредопределенныеВариантыОтчетов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втТаблицаПредопределенных КАК втТаблицаПредопределенных
	|		ПО ПредопределенныеВариантыОтчетов.Отчет = втТаблицаПредопределенных.Отчет
	|			И ПредопределенныеВариантыОтчетов.КлючВарианта = втТаблицаПредопределенных.КлючВарианта";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаПредопределенных", ТаблицаПредопределенных);
	Запрос.Текст = ТекстЗапроса;
	
	СоответствиеСсылок = Новый Соответствие;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СоответствиеСсылок.Вставить(Выборка.АктуальнаяСсылка.УникальныйИдентификатор(), Выборка.СтараяСсылка.УникальныйИдентификатор());
	КонецЦикла;
	
	СтрокаФрагмента = СловарьЗамен.Добавить();
	СтрокаФрагмента.Тип = Тип("СправочникСсылка.ПредопределенныеВариантыОтчетов");
	СтрокаФрагмента.СтандартнаяОбработка = Ложь;
	СтрокаФрагмента.СоответствиеСсылок = СоответствиеСсылок;
	
КонецПроцедуры

// Заполняет массив типов неразделенных данных. Он используется при обновлении ссылок
// при загрузке-выгрузке конфигурации
// 
// Параметры:
//  МассивТипов - массив
//
Процедура ПриОпределенииСтандартныхТиповОбщихДанных(Знач МассивТипов) Экспорт
	
	МассивТипов.Добавить(Тип("СправочникСсылка.ПредопределенныеВариантыОтчетов"));
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики условных вызовов

// Обновляет варианты дополнительного отчета при его записи.
//
// Параметры:
//   ТекущийОбъект (*) См. Источник подписки ОбработкаВариантовДополнительногоОтчета.
//   Отказ (Булево)
//
Процедура ОбработкаВариантовДополнительногоОтчета(ТекущийОбъект, Отказ, ВнешнийОбъект) Экспорт
	
	Если НЕ ПравоДоступа("Чтение", Метаданные.Справочники.ВариантыОтчетов) Тогда
		ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Недостаточно прав доступа для записи вариантов дополнительного отчета ""%1"".'"),
			ТекущийОбъект.Наименование);
		ОшибкаПоВарианту(ТекущийОбъект.Ссылка, ТекстОшибки);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	ПометкаУдаления = ТекущийОбъект.ПометкаУдаления;
	Если НЕ ТекущийОбъект.ИспользуетХранилищеВариантов ИЛИ НЕ ТекущийОбъект.ДополнительныеСвойства.ПубликацияИспользуется Тогда
		ПометкаУдаления = Истина;
	КонецЕсли;
	
	ПредопределенныеВарианты = Новый СписокЗначений;
	Если ТекущийОбъект.ИспользуетХранилищеВариантов Тогда
		ОтчетМетаданные = ВнешнийОбъект.Метаданные();
		СхемаКДМетаданные = ОтчетМетаданные.ОсновнаяСхемаКомпоновкиДанных;
		Если СхемаКДМетаданные <> Неопределено Тогда
			СхемаКД = ВнешнийОбъект.ПолучитьМакет(СхемаКДМетаданные.Имя);
			Для Каждого ВариантНастроекКД Из СхемаКД.ВариантыНастроек Цикл
				ПредопределенныеВарианты.Добавить(ВариантНастроекКД.Имя, ВариантНастроекКД.Представление);
			КонецЦикла;
		Иначе
			ПредопределенныеВарианты.Добавить("", ОтчетМетаданные.Представление());
		КонецЕсли;
	КонецЕсли;
	
	// При снятии пометки удаления доп. отчета пометка удаления снимается только для предопределенных вариантов отчетов (для пользовательских не снимается).
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Таблица.Ссылка,
	|	Таблица.КлючВарианта,
	|	Таблица.Пользовательский,
	|	Таблица.ПометкаУдаления,
	|	Таблица.Наименование
	|ИЗ
	|	Справочник.ВариантыОтчетов КАК Таблица
	|ГДЕ
	|	Таблица.Отчет = &Отчет
	|	И Таблица.Пользовательский = ЛОЖЬ";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Отчет", ТекущийОбъект.Ссылка);
	Если ПометкаУдаления = Истина Тогда
		// При установке пометки удаления доп. отчета пометка удаления устанавливается для всех вариантов отчетов - и пользовательских и предопределенных.
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И Таблица.Пользовательский = ЛОЖЬ", "");
	КонецЕсли;
	Запрос.Текст = ТекстЗапроса;
	
	// Установка пометки удаления.
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ПометкаУдаленияВарианта = ПометкаУдаления;
		ЭлементСписка = ПредопределенныеВарианты.НайтиПоЗначению(Выборка.КлючВарианта);
		Если НЕ ПометкаУдаленияВарианта И НЕ Выборка.Пользовательский И ЭлементСписка = Неопределено Тогда
			// Предопределенный вариант, который не найден в списке предопределенных для данного отчета
			ПометкаУдаленияВарианта = Истина;
		КонецЕсли;
		
		Если Выборка.ПометкаУдаления <> ПометкаУдаленияВарианта Тогда
			ВариантОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ВариантОбъект.ДополнительныеСвойства.Вставить("ЗаполнениеПредопределенных", Истина);
			ВариантОбъект.УстановитьПометкуУдаления(ПометкаУдаленияВарианта);
		КонецЕсли;
		
		Если ЭлементСписка <> Неопределено Тогда
			ПредопределенныеВарианты.Удалить(ЭлементСписка);
			Если Выборка.Наименование <> ЭлементСписка.Представление Тогда
				ВариантОбъект = Выборка.Ссылка.ПолучитьОбъект();
				ВариантОбъект.Наименование = ЭлементСписка.Представление;
				ВариантОбъект.Записать();
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ПометкаУдаления Тогда
		// Зарегистрировать новые
		Для Каждого ЭлементСписка Из ПредопределенныеВарианты Цикл
			ВариантОбъект = Справочники.ВариантыОтчетов.СоздатьЭлемент();
			ВариантОбъект.Отчет                = ТекущийОбъект.Ссылка;
			ВариантОбъект.ТипОтчета            = Перечисления.ТипыОтчетов.Дополнительный;
			ВариантОбъект.КлючВарианта         = ЭлементСписка.Значение;
			ВариантОбъект.Наименование         = ЭлементСписка.Представление;
			ВариантОбъект.Пользовательский     = Ложь;
			ВариантОбъект.ВидимостьПоУмолчанию = Истина;
			ВариантОбъект.Записать();
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Получает варианты переданного отчета и их представления
//
// Параметры:
//  ОтчетМетаданные                - Объект метаданных - отчет, для которого получаются варианты отчета.
//  ПользовательИнформационнойБазы - Строка - имя пользователя информационной базы.
//  СведенияОВариантахОтчетов      - ТаблицаЗначений - таблица, в которую сохраняется информация о варианте отчета.
//          |-КлючОбъекта          - Строка - ключ отчета вида "Отчет.НазваниеОтчета".
//          |-КлючВарианта         - Строка - ключ варианта отчета.
//          |-Представление        - Строка - представление варианта отчета.
//          |-СтандартнаяОбработка - Булево - если Истина - вариант отчета сохранен в стандартном хранилище.
//  СтандартнаяОбработка           - Булево - если Истина - вариант отчета сохранен в стандартном хранилище.
//
Процедура ПользовательскиеВариантыОтчетов(ОтчетМетаданные, ПользовательИнформационнойБазы, ТаблицаВариантовОтчетов, СтандартнаяОбработка) Экспорт
	
	КлючОтчета = "Отчет" + "." + ОтчетМетаданные.Имя;
	ВсеВариантыОтчета = ХранилищаНастроек.ХранилищеВариантовОтчетов.ПолучитьСписок(КлючОтчета, ПользовательИнформационнойБазы);
	ВариантыОтчета = Новый СписокЗначений;
	
	Для Каждого ВариантОтчета Из ВсеВариантыОтчета Цикл
		
		ЭлементСправочника = Справочники.ВариантыОтчетов.НайтиПоНаименованию(ВариантОтчета.Представление);
		
		Если ЭлементСправочника <> Неопределено
			И ЭлементСправочника.ТолькоДляАвтора Тогда
			
			СтрокаВариантовОтчетов = ТаблицаВариантовОтчетов.Добавить();
			СтрокаВариантовОтчетов.КлючОбъекта = "Отчет." + ОтчетМетаданные.Имя;
			СтрокаВариантовОтчетов.КлючВарианта = ВариантОтчета.Значение;
			СтрокаВариантовОтчетов.Представление = ВариантОтчета.Представление;
			СтрокаВариантовОтчетов.СтандартнаяОбработка = Ложь;
			
			СтандартнаяОбработка = Ложь;
			
		ИначеЕсли ЭлементСправочника <> Неопределено Тогда
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Удаляет переданный вариант отчета из хранилища вариантов отчетов
//
// Параметры:
//  СведенияОВариантахОтчетов      - ТаблицаЗначений - таблица, в которой сохранена информация о варианте отчета.
//          |-КлючОбъекта          - Строка - ключ отчета вида "Отчет.НазваниеОтчета".
//          |-КлючВарианта         - Строка - ключ варианта отчета.
//          |-Представление        - Строка - представление варианта отчета.
//          |-СтандартнаяОбработка - Булево - если Истина - вариант отчета сохранен в стандартном хранилище.
//  ПользовательИнформационнойБазы - Строка - имя пользователя информационной базы у которого очищается вариант отчета
//  СтандартнаяОбработка           - Булево - если Истина - вариант отчета сохранен в стандартном хранилище.
//
Процедура УдалитьПользовательскийВариантОтчета(СведенияОВариантеОтчета, ПользовательИнформационнойБазы, СтандартнаяОбработка) Экспорт
	
	Если СведенияОВариантеОтчета.СтандартнаяОбработка Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	ХранилищаНастроек.ХранилищеВариантовОтчетов.Удалить(СведенияОВариантеОтчета.КлючОбъекта,
		СведенияОВариантеОтчета.КлючВарианта, ПользовательИнформационнойБазы);
	
КонецПроцедуры

// Добавляет оповещение для открытых форм подсистемы если изменилось значение функциональной опции.
//
// Параметры:
//   Результат (Структура) Подробнее см. СтандартныеПодсистемыКлиент.ПоказатьРезультатВыполнения().
//   КонстантаИмя (Строка) Имя константы, значение которой изменилось.
//
Процедура ДобавитьОповещениеПриИзмененииЗначенияКонстанты(Результат, КонстантаМенеджер) Экспорт
	// Варианты отчетов связаны с константами через функциональные опции.
	// ПовтИсп не используется поскольку при изменении значения функциональной опции их значения как правило сбрасываются.
	ПеременныеИнициализированы = Ложь;
	КонстантаМетаданные = КонстантаМенеджер.СоздатьМенеджерЗначения().Метаданные();
	
	// Поиск функциональных опций, связанных с этой константой
	Для Каждого ФункциональнаяОпцияМетаданные Из Метаданные.ФункциональныеОпции Цикл
		Если ФункциональнаяОпцияМетаданные.Хранение = КонстантаМетаданные Тогда
			
			// Поиск связи вариантов отчетов с этой функциональной опцией.
			Если Не ПеременныеИнициализированы Тогда
				ПеременныеИнициализированы = Истина;
				ТаблицаОпций = Константы.ПараметрыВариантовОтчетов.Получить().Получить();
				ИмяСобытия = ВариантыОтчетовКлиентСервер.ИмяСобытияИзменениеВарианта();
			КонецЕсли;
			
			Если ТаблицаОпций.Найти(ФункциональнаяОпцияМетаданные.Имя, "ИмяФункциональнойОпции") <> Неопределено Тогда
				СтандартныеПодсистемыКлиентСервер.РезультатВыполненияДобавитьОповещениеОткрытыхФорм(Результат, ИмяСобытия);
				Возврат;
			КонецЕсли;
			
			// Поиск связи отчетов с этой функциональной опцией.
			Для Каждого ЭлементСоставаФункциональнойОпции Из ФункциональнаяОпцияМетаданные.Состав Цикл
				Если ТипЗнч(ЭлементСоставаФункциональнойОпции.Объект) = Тип("ОбъектМетаданных")
					И Метаданные.Отчеты.Содержит(ЭлементСоставаФункциональнойОпции.Объект) Тогда
					СтандартныеПодсистемыКлиентСервер.РезультатВыполненияДобавитьОповещениеОткрытыхФорм(Результат, ИмяСобытия);
					Возврат;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Получает объект отчета по ссылке варианта отчета.
//
// Параметры:
//   СсылкаВариантаИлиОтчета (...)
//       |- (СправочникСсылка.ВариантыОтчетов) Ссылка варианта отчета, подключенного к хранилищу подсистемы.
//       |- (СправочникСсылка.ИдентификаторыОбъектовМетаданных) Ссылка отчета конфигурации.
//       |- (*) Ссылка дополнительного или внешнего отчета.
//
// Возвращаемое значение:
//   Результат (Структура)
//       |- Ошибки (Строка) Текст ошибки.
//       |- Ссылка (*) Ссылка отчета.
//       |- Имя (Строка) Имя объекта отчета.
//       |- Метаданные (ОбъектМетаданных) Объект метаданных отчета.
//       |- Объект (ОтчетОбъект.<Имя отчета>, ВнешнийОтчет) Объект отчета.
//
Функция ПодключитьОтчетОбъект(СсылкаВариантаИлиОтчета) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("Ссылка",     СсылкаВариантаИлиОтчета);
	Результат.Вставить("Подключен",  Ложь);
	Результат.Вставить("Ошибки",     "");
	Результат.Вставить("Имя",        "");
	Результат.Вставить("Метаданные", Неопределено);
	Результат.Вставить("Объект",     Неопределено);
	
	Если ТипЗнч(Результат.Ссылка) = Тип("СправочникСсылка.ВариантыОтчетов") Тогда
		Результат.Ссылка = Результат.Ссылка.Отчет;
		Если Результат.Ссылка = Неопределено Тогда
			Результат.Ошибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Вариант отчета ""%1"" не найден в программе'"),
				Строка(СсылкаВариантаИлиОтчета));
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(Результат.Ссылка) <> Тип("СправочникСсылка.ИдентификаторыОбъектовМетаданных") Тогда
		Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки") Тогда
			МодульДополнительныеОтчетыИОбработки = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ДополнительныеОтчетыИОбработки");
			МодульДополнительныеОтчетыИОбработки.ПриПодключенииДопОтчета(Результат.Ссылка, Результат, Результат.Подключен);
		КонецЕсли;
		Возврат Результат;
	КонецЕсли;
	
	Результат.Имя = Результат.Ссылка.Имя;
	Результат.Метаданные = Метаданные.Отчеты.Найти(Результат.Имя);
	Если Результат.Метаданные = Неопределено Тогда
		Результат.Ошибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Для варианта ""%1"" отчет ""%2"" не найден в программе'"),
			Строка(СсылкаВариантаИлиОтчета),
			Результат.Имя);
		Возврат Результат;
	КонецЕсли;
	
	Результат.Объект = Отчеты[Результат.Имя].Создать();
	Результат.Подключен = Истина;
	Возврат Результат;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Формирует отчет с указанными настройками, используется в фоновых заданиях.
//
Процедура СформироватьОтчет(ПараметрыФормированияОтчета, АдресХранилища) Экспорт
	
	ОтчетСсылка = ПараметрыФормированияОтчета.ОтчетСсылка;
	Если ТипЗнч(ОтчетСсылка) = Тип("СправочникСсылка.ИдентификаторыОбъектовМетаданных") Тогда
		ОтчетОбъект = Отчеты[ОтчетСсылка.Имя].Создать();
	Иначе
		ОтчетОбъект = ПолучитьОбъектДополнительногоОтчета(ОтчетСсылка);
	КонецЕсли;
	
	Если ОтчетОбъект = Неопределено Тогда
		ОшибкаПоВарианту(Неопределено, НСтр("ru = 'Не удалось получить объект отчета ""%1""'"), ОтчетСсылка);
		Возврат;
	КонецЕсли;
	
	ОтчетОбъект.КомпоновщикНастроек.ЗагрузитьФиксированныеНастройки(ПараметрыФормированияОтчета.ФиксированныеНастройки);
	ОтчетОбъект.КомпоновщикНастроек.ЗагрузитьНастройки(ПараметрыФормированияОтчета.Настройки);
	ОтчетОбъект.КомпоновщикНастроек.ЗагрузитьПользовательскиеНастройки(ПараметрыФормированияОтчета.ПользовательскиеНастройки);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	Расшифровка = Неопределено;
	
	ОтчетОбъект.СкомпоноватьРезультат(ТабличныйДокумент, Расшифровка);
	
	РезультатФормирования = Новый Структура;
	РезультатФормирования.Вставить("ОтчетТабличныйДокумент", ТабличныйДокумент);
	РезультатФормирования.Вставить("ОтчетРасшифровка", Расшифровка);
	РезультатФормирования.Вставить("ВариантМодифицирован", Ложь);
	РезультатФормирования.Вставить("ПользовательскиеНастройкиМодифицированы", Ложь);
	
	ДопСвойства = ОтчетОбъект.КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства;
	ВариантМодифицирован = Ложь;
	ПользовательскиеНастройкиМодифицированы = Ложь;
	Если ДопСвойства.Свойство("ВариантМодифицирован", ВариантМодифицирован)
		ИЛИ ДопСвойства.Свойство("ПользовательскиеНастройкиМодифицированы", ПользовательскиеНастройкиМодифицированы) Тогда
		
		Если ВариантМодифицирован = Истина Тогда
			РезультатФормирования.ВариантМодифицирован = Истина;
			РезультатФормирования.Вставить("НастройкиКД", ОтчетОбъект.КомпоновщикНастроек.Настройки);
		КонецЕсли;
		
		Если ВариантМодифицирован = Истина ИЛИ ПользовательскиеНастройкиМодифицированы = Истина Тогда
			ДопСвойства.Удалить("ВариантМодифицирован");
			ДопСвойства.Удалить("ПользовательскиеНастройкиМодифицированы");
			ДопСвойства.Удалить("КлючВарианта");
			РезультатФормирования.ПользовательскиеНастройкиМодифицированы = Истина;
			РезультатФормирования.Вставить("ПользовательскиеНастройкиКД", ОтчетОбъект.КомпоновщикНастроек.ПользовательскиеНастройки);
		КонецЕсли;
		
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(РезультатФормирования, АдресХранилища);
	
КонецПроцедуры

// Формирует дерево настроек и размещения предопределенных вариантов отчетов
//   конфигурации, подключенных к подсистеме.
//
// Параметры:
//   Нет
//
// Возвращаемое значение: 
//   ДеревоВариантов (ДеревоЗначений)
//   ---- Реквизиты только для чтения: ----
//       |- Отчет               (*) Полное имя или ссылка на отчет
//       |- Метаданные          (ОбъектМетаданных) Метаданные отчета
//       |- КлючВарианта        (Строка) Имя варианта отчета
//       |- ОписаниеПолучено    (Булево)
//       |- СистемнаяИнформация (Структура)
//   ---- Реквизиты для изменения: ----
//       |- Включен              (Булево) Если Ложь, то вариант отчета не регистрируется в подсистеме.
//       |- ВидимостьПоУмолчанию (Булево) Если Ложь, то вариант отчета по умолчанию скрыт в панели отчетов.
//       |- Наименование         (Строка) Наименование варианта отчета.
//       |- Описание             (Строка) Информация о варианте отчета.
//       |- Размещение           (Соответствие) Настройки размещения варианта отчета в разделах.
//           |- Ключ     (ОбъектМетаданных) Подсистема, в которой размещается отчет или вариант отчета
//           |- Значение (Строка)           Настройки размещения в подсистеме.
//               |- ""        - Вывод отчета в своей группе обычным шрифтом.
//               |- "Важный"  - Вывод отчета в своей группе жирным шрифтом.
//               |- "СмТакже" - Вывод отчета в группе "См. также".
//       |- ФункциональныеОпции  (Массив) из (Строка) Имена функциональных опций варианта отчета.
//
Функция ДеревоНастроекВариантовОтчетовКонфигурации() Экспорт
	РеквизитыСправочника = Метаданные.Справочники.ВариантыОтчетов.Реквизиты;
	
	ДеревоВариантов = Новый ДеревоЗначений;
	ДеревоВариантов.Колонки.Добавить("Отчет",                РеквизитыСправочника.Отчет.Тип);
	ДеревоВариантов.Колонки.Добавить("Метаданные",           Новый ОписаниеТипов("ОбъектМетаданных"));
	ДеревоВариантов.Колонки.Добавить("КлючВарианта",         РеквизитыСправочника.КлючВарианта.Тип);
	ДеревоВариантов.Колонки.Добавить("ОписаниеПолучено",     Новый ОписаниеТипов("Булево"));
	ДеревоВариантов.Колонки.Добавить("Включен",              Новый ОписаниеТипов("Булево"));
	ДеревоВариантов.Колонки.Добавить("ВидимостьПоУмолчанию", Новый ОписаниеТипов("Булево"));
	ДеревоВариантов.Колонки.Добавить("Наименование",         ОписаниеТиповСтрока());
	ДеревоВариантов.Колонки.Добавить("Описание",             ОписаниеТиповСтрока());
	ДеревоВариантов.Колонки.Добавить("Размещение",           Новый ОписаниеТипов("Соответствие"));
	ДеревоВариантов.Колонки.Добавить("СистемнаяИнформация",  Новый ОписаниеТипов("Структура"));
	ДеревоВариантов.Колонки.Добавить("ЭтоВариант",           Новый ОписаниеТипов("Булево"));
	ДеревоВариантов.Колонки.Добавить("ФункциональныеОпции",  Новый ОписаниеТипов("Массив"));
	
	ПодсистемыОтчетов = РазмещениеОтчетовВПодсистемах();
	ПодключеныВсеОтчеты = ПодключеныВсеОтчеты();
	Для Каждого ОтчетМетаданные Из Метаданные.Отчеты Цикл
		Если НЕ ПодключеныВсеОтчеты
			И (ОтчетМетаданные.ХранилищеВариантов = Неопределено
			ИЛИ ОтчетМетаданные.ХранилищеВариантов.Имя <> "ХранилищеВариантовОтчетов") Тогда
			Продолжить;
		КонецЕсли;
		
		// Настройки отчета
		СтрокаОтчет = ДеревоВариантов.Строки.Добавить();
		СтрокаОтчет.Отчет                = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ОтчетМетаданные);
		СтрокаОтчет.Метаданные           = ОтчетМетаданные;
		СтрокаОтчет.Включен              = Истина;
		СтрокаОтчет.ВидимостьПоУмолчанию = Истина;
		СтрокаОтчет.Описание             = ОтчетМетаданные.Пояснение;
		СтрокаОтчет.Наименование         = ОтчетМетаданные.Представление();
		СтрокаОтчет.СистемнаяИнформация  = Новый Структура;
		СтрокаОтчет.СистемнаяИнформация.Вставить("ПостроенНаСКД", ОтчетМетаданные.ОсновнаяСхемаКомпоновкиДанных <> Неопределено);
		СтрокаОтчет.ОписаниеПолучено     = Истина;
		СтрокаОтчет.ЭтоВариант           = Ложь;
		
		// Подсистемы отчета
		Найденные = ПодсистемыОтчетов.НайтиСтроки(Новый Структура("ОтчетМетаданные", ОтчетМетаданные));
		Для Каждого СтрокаПодсистема Из Найденные Цикл
			СтрокаОтчет.Размещение.Вставить(СтрокаПодсистема.ПодсистемаМетаданные, "");
		КонецЦикла;
		
		// Варианты отчета
		Если СтрокаОтчет.СистемнаяИнформация.ПостроенНаСКД Тогда
			ОтчетМенеджер = Отчеты[ОтчетМетаданные.Имя];
			ИмяСхемыКД = ОтчетМетаданные.ОсновнаяСхемаКомпоновкиДанных.Имя;
			СхемаКД = ОтчетМенеджер.ПолучитьМакет(ИмяСхемыКД);
			Для Каждого ВариантНастроекКД Из СхемаКД.ВариантыНастроек Цикл
				Вариант = СтрокаОтчет.Строки.Добавить();
				Вариант.Включен      = Истина;
				Вариант.Отчет        = СтрокаОтчет.Отчет;
				Вариант.КлючВарианта = ВариантНастроекКД.Имя;
				Вариант.Наименование = ВариантНастроекКД.Представление;
				Вариант.Размещение   = СтрокаОтчет.Размещение;
				Вариант.ЭтоВариант   = Истина;
			КонецЦикла;
		Иначе
			Вариант = СтрокаОтчет.Строки.Добавить();
			Вариант.Включен      = Истина;
			Вариант.Отчет        = СтрокаОтчет.Отчет;
			Вариант.КлючВарианта = "";
			Вариант.Наименование = СтрокаОтчет.Наименование;
			Вариант.Размещение   = СтрокаОтчет.Размещение;
			Вариант.ЭтоВариант   = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	// Условные вызовы подсистем БСП.
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.ДатыЗапретаИзменения") Тогда
		МодульДатыЗапретаИзмененияСлужебный = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ДатыЗапретаИзмененияСлужебный");
		МодульДатыЗапретаИзмененияСлужебный.ПриНастройкеВариантовОтчетов(ДеревоВариантов);
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступомСлужебный = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("УправлениеДоступомСлужебный");
		МодульУправлениеДоступомСлужебный.ПриНастройкеВариантовОтчетов(ДеревоВариантов);
	КонецЕсли;
	
	// Переопределяемая часть.
	ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов(ДеревоВариантов);
	
	Возврат ДеревоВариантов;
КонецФункции // ДеревоНастроекВариантовОтчетовКонфигурации

// Формирует ссылку и тип отчета по полному имени.
//
// Параметры:
//   ОтчетПолноеИмя (Строка) Полное имя отчета в виде 
//       "Отчет.<ИмяОтчета>" или "ВнешнийОтчет.<ИмяОтчета>"
//
// Возвращаемое значение: 
//   Результат (Структура)
//       |- Отчет
//       |- ТипОтчета
//       |- ОтчетИмя
//       |- ОтчетМетаданные
//       |- ТекстОшибки
//           |- (Неопределено) Если ошибки нет
//           |- (Строка)       Текст ошибки
//
Функция СформироватьИнформациюОбОтчетеПоПолномуИмени(ОтчетПолноеИмя) Экспорт
	Результат = Новый Структура("Отчет, ТипОтчета, ОтчетПолноеИмя, ОтчетИмя, ОтчетМетаданные, ТекстОшибки");
	Результат.ОтчетПолноеИмя = ОтчетПолноеИмя;
	
	ПозицияТочки = Найти(ОтчетПолноеИмя, ".");
	Если ПозицияТочки = 0 Тогда
		Префикс = "";
		Результат.ОтчетИмя = ОтчетПолноеИмя;
	Иначе
		Префикс = Лев(ОтчетПолноеИмя, ПозицияТочки - 1);
		Результат.ОтчетИмя = Сред(ОтчетПолноеИмя, ПозицияТочки + 1);
	КонецЕсли;
	
	Если ВРег(Префикс) = "ОТЧЕТ" Тогда
		Результат.ОтчетМетаданные = Метаданные.Отчеты.Найти(Результат.ОтчетИмя);
		Если Результат.ОтчетМетаданные = Неопределено Тогда
			Результат.ОтчетПолноеИмя = "ВнешнийОтчет." + Результат.ОтчетИмя;
			ПредупреждениеПоВарианту(
				Неопределено,
				НСтр("ru = 'Отчет ""%1"" не найден в программе, он будет значиться как внешний.'"),
				ОтчетПолноеИмя);
		ИначеЕсли НЕ ПравоДоступа("Просмотр", Результат.ОтчетМетаданные) Тогда
			Результат.ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Недостаточно прав доступа к отчету ""%1"".'"),
				ОтчетПолноеИмя);
		КонецЕсли;
	ИначеЕсли ВРег(Префикс) = "ВНЕШНИЙОТЧЕТ" Тогда
		// Получение метаданных и проверок не требуется.
	Иначе
		Результат.ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Для отчета ""%1"" невозможно определить тип (не установлен префикс).'"),
			ОтчетПолноеИмя);
		Возврат Результат;
	КонецЕсли;
	
	Если Результат.ОтчетМетаданные = Неопределено Тогда
		
		Результат.Отчет = Результат.ОтчетПолноеИмя;
		Результат.ТипОтчета = Перечисления.ТипыОтчетов.Внешний;
		
		// Заменить тип и ссылку внешнего отчета для дополнительных отчетов, подключенных к хранилищу подсистемы.
		Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки") Тогда
			
			Результат.Вставить("ПодключеныВсеОтчеты", ПодключеныВсеОтчеты());
			
			МодульДополнительныеОтчетыИОбработки = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ДополнительныеОтчетыИОбработки");
			МодульДополнительныеОтчетыИОбработки.ПриОпределенииТипаИСсылкиЕслиОтчетДополнительный(Результат);
			
			Если Результат.Свойство("ОтчетДополнительный") Тогда
				Результат.ТипОтчета = Перечисления.ТипыОтчетов.Дополнительный;
				Результат.Удалить("ОтчетДополнительный");
			КонецЕсли;
			Результат.Удалить("ПодключеныВсеОтчеты");
			
		КонецЕсли;
		
	Иначе
		
		Результат.Отчет = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Результат.ОтчетМетаданные);
		Результат.ТипОтчета = Перечисления.ТипыОтчетов.Внутренний;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Формирует таблицу размещения отчетов по подсистемам конфигурации.
//
// Параметры:
//   Результат          (Неопределено) Используется для рекурсии.
//   ПодсистемаРодитель (Неопределено) Используется для рекурсии.
//
// Возвращаемое значение: 
//   Результат (ТаблицаЗначений)
//       |- ОтчетМетаданные
//       |- ОтчетПолноеИмя
//       |- ПодсистемаМетаданные
//       |- ПодсистемаПолноеИмя
//
Функция РазмещениеОтчетовВПодсистемах(Результат = Неопределено, ПодсистемаРодитель = Неопределено) Экспорт
	Если Результат = Неопределено Тогда
		ПолноеИмяОписаниеТипов = Метаданные.Справочники.ИдентификаторыОбъектовМетаданных.Реквизиты.ПолноеИмя.Тип;
		
		Результат = Новый ТаблицаЗначений;
		Результат.Колонки.Добавить("ОтчетМетаданные",      Новый ОписаниеТипов("ОбъектМетаданных"));
		Результат.Колонки.Добавить("ОтчетПолноеИмя",       ПолноеИмяОписаниеТипов);
		Результат.Колонки.Добавить("ПодсистемаМетаданные", Новый ОписаниеТипов("ОбъектМетаданных"));
		Результат.Колонки.Добавить("ПодсистемаПолноеИмя",  ПолноеИмяОписаниеТипов);
		
		ПодсистемаРодитель = Метаданные;
	КонецЕсли;
	
	// Перебор вложенных подсистем родителя
	Для Каждого ПодсистемаМетаданные Из ПодсистемаРодитель.Подсистемы Цикл
		Если НЕ ПодсистемаМетаданные.ВключатьВКомандныйИнтерфейс Тогда
			Продолжить;
		КонецЕсли;
		
		// Состав подсистемы
		Для Каждого ОтчетМетаданные Из ПодсистемаМетаданные.Состав Цикл
			Если НЕ Метаданные.Отчеты.Содержит(ОтчетМетаданные) Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаТаблицы = Результат.Добавить();
			СтрокаТаблицы.ОтчетМетаданные      = ОтчетМетаданные;
			СтрокаТаблицы.ОтчетПолноеИмя       = ОтчетМетаданные.ПолноеИмя();
			СтрокаТаблицы.ПодсистемаМетаданные = ПодсистемаМетаданные;
			СтрокаТаблицы.ПодсистемаПолноеИмя  = ПодсистемаМетаданные.ПолноеИмя();
			
		КонецЦикла;
		
		РазмещениеОтчетовВПодсистемах(Результат, ПодсистемаМетаданные);;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

// Сброс настроек предопределенного элемента справочника "Варианты отчетов",
//   связанного с элементом справочника "Варианты отчетов".
//
// Параметры:
//   ВариантОбъект (СправочникОбъект.ВариантыОтчетов, ДанныеФормыСтруктура)
//
Функция СброситьНастройкиВариантаОтчета(ВариантОбъект) Экспорт
	Если ВариантОбъект.Пользовательский
		ИЛИ ВариантОбъект.ТипОтчета <> Перечисления.ТипыОтчетов.Внутренний
		ИЛИ ВариантОбъект.ПредопределенныйВариант = Справочники.ПредопределенныеВариантыОтчетов.ПустаяСсылка() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ВариантОбъект.Автор        = Неопределено;
	ВариантОбъект.Наименование = "";
	ВариантОбъект.Описание     = "";
	ВариантОбъект.Размещение.Очистить();
	ВариантОбъект.ВидимостьПоУмолчаниюПереопределена = Ложь;
	
	Возврат Истина;
КонецФункции

// Добавляет подсистемы родителя с фильтром по правам доступа и функциональным опциям.
//
Процедура ДобавитьПодсистемыТекущегоПользователя(РодительСтрока, РодительМетаданные = Неопределено, РазделСсылка = Неопределено) Экспорт
	ДляКорневойСтроки = (РодительМетаданные = Неопределено);
	ПриоритетРодителя = ?(ДляКорневойСтроки, "", РодительСтрока.Приоритет + ".");
	Подсистемы = ?(ДляКорневойСтроки, ИспользуемыеРазделы(), РодительМетаданные.Подсистемы);
	Приоритет = 0;
	Для Каждого Подсистема Из Подсистемы Цикл
		ПодсистемаМетаданные = ?(ТипЗнч(Подсистема) = Тип("ОбъектМетаданных"), Подсистема, Подсистема.Метаданные);
		Если ПодсистемаМетаданные.ВключатьВКомандныйИнтерфейс
			И ПравоДоступа("Просмотр", ПодсистемаМетаданные)
			И ОбщегоНазначения.ОбъектМетаданныхДоступенПоФункциональнымОпциям(ПодсистемаМетаданные) Тогда
			
			Приоритет = Приоритет + 1;
			
			СтрокаДерева = РодительСтрока.Строки.Добавить();
			СтрокаДерева.Ссылка        = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ПодсистемаМетаданные);
			СтрокаДерева.Имя           = ПодсистемаМетаданные.Имя;
			СтрокаДерева.ПолноеИмя     = ПодсистемаМетаданные.ПолноеИмя();
			СтрокаДерева.Представление = ПодсистемаМетаданные.Представление();
			СтрокаДерева.РазделСсылка  = ?(ДляКорневойСтроки, СтрокаДерева.Ссылка, РазделСсылка);
			СтрокаДерева.Приоритет     = ПриоритетРодителя + Формат(Приоритет, "ЧЦ=4; ЧДЦ=0; ЧВН=; ЧГ=0");
			Если СтрЧислоВхождений(ПриоритетРодителя, ".") > 2 Тогда
				СтрокаДерева.ПолноеПредставление = РодительСтрока.Представление + ": " + СтрокаДерева.Представление;
			Иначе
				СтрокаДерева.ПолноеПредставление = СтрокаДерева.Представление;
			КонецЕсли;
			
			ДобавитьПодсистемыТекущегоПользователя(СтрокаДерева, ПодсистемаМетаданные, СтрокаДерева.РазделСсылка);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Формирует описание типов Строка заданной длины.
//
Функция ОписаниеТиповСтрока(ДлинаСтроки = 1000) Экспорт
	Возврат Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(ДлинаСтроки));
КонецФункции

// По составу ролей определяет полные права к данным подсистемы.
//
Функция ПолныеПраваНаВарианты() Экспорт
	Возврат Пользователи.РолиДоступны("ДобавлениеИзменениеВариантовОтчетов");
КонецФункции

// Проверяет свободно ли наименование варианта отчета.
//
Функция НаименованиеЗанято(Отчет, Ссылка, Наименование) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	1 КАК Поле1
	|ИЗ
	|	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
	|ГДЕ
	|	ВариантыОтчетов.Отчет = &Отчет
	|	И ВариантыОтчетов.Ссылка <> &Ссылка
	|	И ВариантыОтчетов.Наименование = &Наименование
	|	И ВариантыОтчетов.ПометкаУдаления = ЛОЖЬ";
	Запрос.УстановитьПараметр("Отчет",        Отчет);
	Запрос.УстановитьПараметр("Ссылка",       Ссылка);
	Запрос.УстановитьПараметр("Наименование", Наименование);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = НЕ Запрос.Выполнить().Пустой();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
КонецФункции

// Проверяет свободен ли ключ варианта отчета.
//
Функция КлючВариантаЗанят(Отчет, Ссылка, КлючВарианта) Экспорт
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	1 КАК Поле1
	|ИЗ
	|	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
	|ГДЕ
	|	ВариантыОтчетов.Отчет = &Отчет
	|	И ВариантыОтчетов.Ссылка <> &Ссылка
	|	И ВариантыОтчетов.КлючВарианта = &КлючВарианта
	|	И ВариантыОтчетов.ПометкаУдаления = ЛОЖЬ";
	Запрос.УстановитьПараметр("Отчет",        Отчет);
	Запрос.УстановитьПараметр("Ссылка",       Ссылка);
	Запрос.УстановитьПараметр("КлючВарианта", КлючВарианта);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = НЕ Запрос.Выполнить().Пустой();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Результат;
КонецФункции

// Определяет способ внедрения подсистемы.
//
Функция ПодключеныВсеОтчеты() Экспорт
	Возврат (Метаданные.ХранилищеВариантовОтчетов <> Неопределено И Метаданные.ХранилищеВариантовОтчетов.Имя = "ХранилищеВариантовОтчетов");
КонецФункции

// Заполняет описание настроек для строки варианта отчета если оно еще не заполнено.
//
// Параметры:
//   СтрокаВариант (СтрокаДерева) Описание настроек варианта отчета.
//   СтрокаОтчет (СтрокаДерева) Необязательный. Описание настроек отчета.
//
Процедура ЗаполнитьОписаниеСтрокиВарианта(СтрокаВариант, СтрокаОтчет = Неопределено) Экспорт
	Если СтрокаВариант.ОписаниеПолучено Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаОтчет = Неопределено Тогда
		СтрокаОтчет = СтрокаВариант.Родитель;
	КонецЕсли;
	
	// Флажок изменения настроек
	СтрокаВариант.ОписаниеПолучено = Истина;
	
	// Копирование настроек отчета
	СтрокаВариант.Включен = СтрокаОтчет.Включен;
	СтрокаВариант.ВидимостьПоУмолчанию = СтрокаОтчет.ВидимостьПоУмолчанию;
	
	Если СтрокаВариант.КлючВарианта = "" Тогда
		СтрокаВариант.Наименование = СтрокаОтчет.Наименование;
		СтрокаВариант.Описание = СтрокаОтчет.Описание;
	КонецЕсли;
	
	СтрокаВариант.Размещение = ОбщегоНазначенияКлиентСервер.СкопироватьСоответствие(СтрокаОтчет.Размещение);
	СтрокаВариант.ФункциональныеОпции = ОбщегоНазначенияКлиентСервер.СкопироватьМассив(СтрокаОтчет.ФункциональныеОпции);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с деревом подсистем из форм

// Добавляет элементы условного оформления дерева подсистем.
//
Процедура ДеревоПодсистемДобавитьУсловноеОформление(ЭтаФорма) Экспорт
	ЭтаФорма.Элементы.ДеревоПодсистемВажность.СписокВыбора.Добавить(ВариантыОтчетовКлиентСервер.ПредставлениеВажный());
	ЭтаФорма.Элементы.ДеревоПодсистемВажность.СписокВыбора.Добавить(ВариантыОтчетовКлиентСервер.ПредставлениеСмТакже());
	
	Отборы = Новый Соответствие;
	Отборы.Вставить("ДеревоПодсистем.Приоритет", "");
	
	Оформление = Новый Соответствие;
	Оформление.Вставить("ТолькоПросмотр", Истина);
	
	Поля = "ДеревоПодсистем";
	
	ДобавитьЭлементУсловногоОформления(ЭтаФорма, Отборы, Оформление, Поля);
	
	Оформление = Новый Соответствие;
	Оформление.Вставить("Отображать", Ложь);
	
	Поля = "ДеревоПодсистемИспользование, ДеревоПодсистемВажность";
	
	ДобавитьЭлементУсловногоОформления(ЭтаФорма, Отборы, Оформление, Поля);
	
КонецПроцедуры

// Добавляет элемент условного оформления.
//
Функция ДобавитьЭлементУсловногоОформления(ЭтаФорма, Отборы, Оформление, Поля)
	ЭлементУсловногоОформленияКД = ЭтаФорма.УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформленияКД.Использование = Истина;
	
	Для Каждого КлючИЗначение Из Отборы Цикл
		ЭлементОтбораКД = ЭлементУсловногоОформленияКД.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбораКД.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбораКД.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(КлючИЗначение.Ключ);
		ЭлементОтбораКД.ПравоеЗначение = КлючИЗначение.Значение;
		ЭлементОтбораКД.Применение = ТипПримененияОтбораКомпоновкиДанных.Элементы;
	КонецЦикла;
	
	Для Каждого КлючИЗначение Из Оформление Цикл
		ЭлементУсловногоОформленияКД.Оформление.УстановитьЗначениеПараметра(
			Новый ПараметрКомпоновкиДанных(КлючИЗначение.Ключ),
			КлючИЗначение.Значение);
	КонецЦикла;
	
	Если ТипЗнч(Поля) = Тип("Строка") Тогда
		Поля = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Поля, ",");
	КонецЕсли;
	Для Каждого Поле Из Поля Цикл
		ПолеКД = ЭлементУсловногоОформленияКД.Поля.Элементы.Добавить();
		ПолеКД.Использование = Истина;
		ПолеКД.Поле = Новый ПолеКомпоновкиДанных(Поле);
	КонецЦикла;
	
	Возврат Истина;
КонецФункции

// Формирует дерево подсистем по данным варианта-основания.
//
Функция ДеревоПодсистемСформировать(ЭтаФорма, ВариантОснование) Экспорт
	ДеревоИсточник = ВариантыОтчетовПовтИсп.ПодсистемыТекущегоПользователя();
	
	ДеревоПриемник = ЭтаФорма.РеквизитФормыВЗначение("ДеревоПодсистем", Тип("ДеревоЗначений"));
	ДеревоПриемник.Строки.Очистить();
	
	РазмещениеПредопределенного = Неопределено;
	Если НЕ ВариантОснование.Пользовательский И ВариантОснование.ТипОтчета = Перечисления.ТипыОтчетов.Внутренний Тогда
		РазмещениеПредопределенного = ВариантОснование.ПредопределенныйВариант.Размещение;
	КонецЕсли;
	
	ДобавитьПодсистемыВДерево(ДеревоПриемник, ДеревоИсточник, ВариантОснование, РазмещениеПредопределенного);
	
	Возврат ДеревоПриемник;
КонецФункции

// Добавляет строки дерева-источника в строки дерева-приемника.
//
Процедура ДобавитьПодсистемыВДерево(ПриемникРодитель, ИсточникРодитель, ВариантОснование, РазмещениеПредопределенного)
	Для Каждого Источник Из ИсточникРодитель.Строки Цикл
		
		Приемник = ПриемникРодитель.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(Приемник, Источник);
		
		Найденные = ВариантОснование.Размещение.НайтиСтроки(Новый Структура("РазделИлиГруппа", Приемник.Ссылка));
		НайденВПредопределенном = Ложь;
		Если Найденные.Количество() = 0 И РазмещениеПредопределенного <> Неопределено Тогда
			НайденВПредопределенном = Истина;
			Найденные = РазмещениеПредопределенного.НайтиСтроки(Новый Структура("Подсистема", Приемник.Ссылка));
		КонецЕсли;
		Если Найденные.Количество() > 0 Тогда
			СтрокаТаблицы = Найденные[0];
			Если СтрокаТаблицы.Важный Тогда
				Приемник.ВажностьПоУмолчанию = ВариантыОтчетовКлиентСервер.ПредставлениеВажный();
			ИначеЕсли СтрокаТаблицы.СмТакже Тогда
				Приемник.ВажностьПоУмолчанию = ВариантыОтчетовКлиентСервер.ПредставлениеСмТакже();
			Иначе
				Приемник.ВажностьПоУмолчанию = "";
			КонецЕсли;
			
			Приемник.ИспользованиеПоУмолчанию = ?(НайденВПредопределенном ИЛИ СтрокаТаблицы.Использование, 1, 0);
		КонецЕсли;
		
		Приемник.Важность      = Приемник.ВажностьПоУмолчанию;
		Приемник.Использование = Приемник.ИспользованиеПоУмолчанию;
		
		// Рекурсия
		ДобавитьПодсистемыВДерево(Приемник, Источник, ВариантОснование, РазмещениеПредопределенного);
	КонецЦикла;
КонецПроцедуры

// Сохраняет настройки размещения, измененные пользователем в табличную часть варианта отчета.
//
// Параметры:
//   ЭтаФорма      (УправляемаяФорма)
//   ВариантОбъект (СправочникОбъект.ВариантыОтчетов, ДанныеФормыСтруктура)
//   Кэш           (Структура) Необязательный.
//
Процедура ДеревоПодсистемЗаписать(ЭтаФорма, ВариантОбъект, Кэш = Неопределено) Экспорт
	Если Кэш <> Неопределено И Кэш.Свойство("ИзмененияПодсистем") Тогда
		ИзмененияПодсистем = Кэш.ИзмененияПодсистем;
	Иначе
		ДеревоПриемник = ЭтаФорма.РеквизитФормыВЗначение("ДеревоПодсистем", Тип("ДеревоЗначений"));
		ИзмененияПодсистем = ДеревоПриемник.Строки.НайтиСтроки(Новый Структура("ИзмененПользователем", Истина), Истина);
		Если Кэш <> Неопределено Тогда
			Кэш.Вставить("ИзмененияПодсистем", ИзмененияПодсистем);
		КонецЕсли;
	КонецЕсли;
	
	Если ИзмененияПодсистем.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Изменение Из ИзмененияПодсистем Цикл
		СтрокаТабличнойЧасти = ВариантОбъект.Размещение.Найти(Изменение.Ссылка, "РазделИлиГруппа");
		Если СтрокаТабличнойЧасти = Неопределено Тогда
			// Необходимо зарегистрировать настройку размещения варианта безусловно (даже флажок Использование отключен)
			// - только тогда эта настройка заменит предопределенную (из неразделенного справочника).
			СтрокаТабличнойЧасти = ВариантОбъект.Размещение.Добавить();
			СтрокаТабличнойЧасти.РазделИлиГруппа = Изменение.Ссылка;
			ЭтоНоваяСтрока = Истина;
		Иначе
			ЭтоНоваяСтрока = Ложь;
		КонецЕсли;
		
		Если ЭтоНоваяСтрока ИЛИ Изменение.Использование <> Изменение.ИспользованиеПоУмолчанию Тогда
			Если Изменение.Использование = 0 Тогда
				СтрокаТабличнойЧасти.Использование = Ложь;
			ИначеЕсли Изменение.Использование = 1 Тогда
				СтрокаТабличнойЧасти.Использование = Истина;
			Иначе
				// Оставить как есть
			КонецЕсли;
		КонецЕсли;
		
		Если ЭтоНоваяСтрока ИЛИ Изменение.Важность <> Изменение.ВажностьПоУмолчанию Тогда
			Если Изменение.Важность = ВариантыОтчетовКлиентСервер.ПредставлениеВажный() Тогда
				СтрокаТабличнойЧасти.Важный  = Истина;
				СтрокаТабличнойЧасти.СмТакже = Ложь;
			ИначеЕсли Изменение.Важность = ВариантыОтчетовКлиентСервер.ПредставлениеСмТакже() Тогда
				СтрокаТабличнойЧасти.Важный  = Ложь;
				СтрокаТабличнойЧасти.СмТакже = Истина;
			Иначе
				СтрокаТабличнойЧасти.Важный  = Ложь;
				СтрокаТабличнойЧасти.СмТакже = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Журнал регистрации

// Запись ошибки в журнале регистрации по варианту отчета.
//
Процедура ОшибкаПоВарианту(Вариант, Сообщение, Реквизит1 = Неопределено, Реквизит2 = Неопределено, Реквизит3 = Неопределено) Экспорт
	ЗаписьЖурналаРегистрации(
		ВариантыОтчетовКлиентСервер.НаименованиеПодсистемы(Неопределено),
		УровеньЖурналаРегистрации.Ошибка,
		Метаданные.Справочники.ВариантыОтчетов,
		Вариант,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			Сообщение,
			Строка(Реквизит1),
			Строка(Реквизит2),
			Строка(Реквизит3)));
КонецПроцедуры

// Запись информации в журнале регистрации по варианту отчета.
//
Процедура ИнформацияПоВарианту(Вариант, Сообщение, Реквизит1 = Неопределено, Реквизит2 = Неопределено, Реквизит3 = Неопределено) Экспорт
	ЗаписьЖурналаРегистрации(
		ВариантыОтчетовКлиентСервер.НаименованиеПодсистемы(Неопределено),
		УровеньЖурналаРегистрации.Информация,
		Метаданные.Справочники.ВариантыОтчетов,
		Вариант,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			Сообщение,
			Строка(Реквизит1),
			Строка(Реквизит2),
			Строка(Реквизит3)));
КонецПроцедуры

// Запись предупреждения в журнале регистрации по варианту отчета.
//
Процедура ПредупреждениеПоВарианту(Вариант, Сообщение, Реквизит1 = Неопределено, Реквизит2 = Неопределено, Реквизит3 = Неопределено) Экспорт
	ЗаписьЖурналаРегистрации(
		ВариантыОтчетовКлиентСервер.НаименованиеПодсистемы(Неопределено),
		УровеньЖурналаРегистрации.Предупреждение,
		Метаданные.Справочники.ВариантыОтчетов,
		Вариант,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			Сообщение,
			Строка(Реквизит1),
			Строка(Реквизит2),
			Строка(Реквизит3)));
КонецПроцедуры

// Записывает в журнал регистрации событие запуска процедуры и открывает транзакцию.
//
Процедура ЗапускПроцедуры(ПредставлениеПроцедуры)
	ИнформацияПоВарианту(Неопределено, НСтр("ru = 'Запуск процедуры ""%1"".'"), ПредставлениеПроцедуры);
	НачатьТранзакцию();
КонецПроцедуры

// Записывает в журнал регистрации событие завершения процедуры и фиксирует транзакцию.
//
Процедура ЗавершениеПроцедуры(ПредставлениеПроцедуры)
	ЗафиксироватьТранзакцию();
	ИнформацияПоВарианту(Неопределено, НСтр("ru = 'Завершение процедуры ""%1"".'"), ПредставлениеПроцедуры);
КонецПроцедуры

// Создает фильтр по реквизиту КлючОбъекта для СтандартноеХранилищеНастроекМенеджер.Выбрать().
//
Функция НовыйФильтрПоКлючуОбъекта(ИменаОтчетов) Экспорт
	Если ИменаОтчетов = "" ИЛИ ИменаОтчетов = "*" Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПозицияРазделителя = Найти(ИменаОтчетов, ",");
	Если ПозицияРазделителя = 0 Тогда
		КлючОбъекта = ИменаОтчетов;
		ИменаОтчетов = "";
	Иначе
		КлючОбъекта = СокрЛП(Лев(ИменаОтчетов, ПозицияРазделителя - 1));
		ИменаОтчетов = Сред(ИменаОтчетов, ПозицияРазделителя + 1);
	КонецЕсли;
	
	Если Найти(КлючОбъекта, ".") = 0 Тогда
		КлючОбъекта = "Отчет." + КлючОбъекта;
	КонецЕсли;
	
	Возврат Новый Структура("КлючОбъекта", КлючОбъекта);
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработчики стандартных событий

// Удаление личных вариантов отчетов при удалении пользователя
//
Процедура ПриУдаленииПользователя(ПользовательОбъект, Отказ) Экспорт
	Если ПользовательОбъект.ЭтоНовый()
		ИЛИ ПользовательОбъект.ОбменДанными.Загрузка
		ИЛИ Отказ
		ИЛИ НЕ ПользовательОбъект.ПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	// Установить пометку удаления личных вариантов пользователя.
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВариантыОтчетов.Ссылка
	|ИЗ
	|	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
	|ГДЕ
	|	ВариантыОтчетов.Автор = &ПользовательСсылка
	|	И ВариантыОтчетов.ПометкаУдаления = ЛОЖЬ
	|	И ВариантыОтчетов.ТолькоДляАвтора = ИСТИНА";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ПользовательСсылка", ПользовательОбъект.Ссылка);
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ВариантОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ВариантОбъект.УстановитьПометкуУдаления(Истина);
	КонецЦикла;
КонецПроцедуры

// Удаление ссылок подсистем перед их удалением.
//
Процедура ПередУдалениемИдентификатораОбъектаМетаданных(ИдентификаторОбъектаМетаданныхОбъект, Отказ) Экспорт
	Если ИдентификаторОбъектаМетаданныхОбъект.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	РазделИлиГруппа = ИдентификаторОбъектаМетаданныхОбъект.Ссылка;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВариантыОтчетов.Ссылка
	|ИЗ
	|	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
	|ГДЕ
	|	ВариантыОтчетов.Размещение.РазделИлиГруппа = &РазделИлиГруппа";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("РазделИлиГруппа", РазделИлиГруппа);
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ВариантОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		Найденные = ВариантОбъект.Размещение.НайтиСтроки(Новый Структура("РазделИлиГруппа", РазделИлиГруппа));
		Для Каждого СтрокаТаблицы Из Найденные Цикл
			ВариантОбъект.Размещение.Удалить(СтрокаТаблицы);
		КонецЦикла;
		
		ВариантОбъект.Записать();
	КонецЦикла;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Условные вызовы в друге подсистемы

// Создает экземпляр объекта отчета.
//
// Параметры:
//   ОтчетСсылка (*) см. реквизит справочника ВариантыОтчетов.Отчет
//
// Возвращаемое значение: 
//   (ОтчетОбъект, Неопределено)
//
Функция ПолучитьОбъектДополнительногоОтчета(ОтчетСсылка)
	ОтчетОбъект = Неопределено;
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки") Тогда
		МодульДополнительныеОтчетыИОбработки = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ДополнительныеОтчетыИОбработки");
		ОтчетОбъект = МодульДополнительныеОтчетыИОбработки.ПолучитьОбъектВнешнейОбработки(ОтчетСсылка);
	КонецЕсли;
	
	Возврат ОтчетОбъект;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы

// [*] Актуализирует данные справочника "Предопределенные варианты отчетов"
//   и константы "Функциональные опции вариантов отчетов".
//
Процедура ОбновитьОбщиеДанные(ПараметрыОбновления) Экспорт
	
	////////////////////////////////////////////////////////////////////////////////
	// Выполняется только для предопределенных вариантов отчетов.
	// План обновления:
	
	Кэш = Новый Структура;
	Кэш.Вставить("ИспользуемыеРазделы", ИспользуемыеРазделы());
	Кэш.Вставить("ПодключеныВсеОтчеты", ПодключеныВсеОтчеты());
	Кэш.Вставить("ДеревоВариантов", ДеревоНастроекВариантовОтчетовКонфигурации());
	Кэш.Вставить("ОбновитьОбласти", Ложь);
	
	////////////////////////////////////////////////////////////////////////////////
	// 1. Заменить устаревшие ключи вариантов отчетов на актуальные.
	АктуализироватьКлючиПредопределенных(Кэш);
	
	////////////////////////////////////////////////////////////////////////////////
	// 2. Актуализировать предопределенные варианты отчетов и перезаписать
	//    константу, в которой хранятся привязки к функциональным опциям.
	ОбновитьНастройкиПредопределенных(Кэш);
	
	////////////////////////////////////////////////////////////////////////////////
	// 3. Установить пометку удаления вариантов удаленных отчетов.
	ПометитьНаУдалениеВариантыУдаленныхОтчетов(Кэш, Истина);
	
	////////////////////////////////////////////////////////////////////////////////
	// 4. Обновить разделенные данные в модели сервиса.
	Если Кэш.ОбновитьОбласти И ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		Обработчик = ПараметрыОбновления.РазделенныеОбработчики.Добавить();
		Обработчик.МонопольныйРежим = Ложь;
		Обработчик.Версия    = "*";
		Обработчик.Процедура = "ВариантыОтчетов.ОбновитьРазделенныеДанные";
		Обработчик.Приоритет = 70;
	КонецЕсли;
	
КонецПроцедуры

// [*] Актуализирует данные справочника "Варианты отчетов".
//
Процедура ОбновитьРазделенныеДанные() Экспорт
	
	////////////////////////////////////////////////////////////////////////////////
	// План обновления:
	
	////////////////////////////////////////////////////////////////////////////////
	// 1. Актуализировать разделенные варианты отчетов.
	АктуализироватьСоставОбласти();
	
	////////////////////////////////////////////////////////////////////////////////
	// 2. Установить пометку удаления вариантов удаленных отчетов.
	ПометитьНаУдалениеВариантыУдаленныхОтчетов(Неопределено, Ложь);
	
КонецПроцедуры

// [2.1.1.1] Выполняет перенос данных справочника "Варианты отчетов" для редакции 2.1.
//
Процедура ПерейтиКРедакции21() Экспорт
	ПредставлениеПроцедуры = НСтр("ru = 'Перейти к редакции 2.1'");
	ЗапускПроцедуры(ПредставлениеПроцедуры);
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВариантыОтчетов.Ссылка,
	|	ВариантыОтчетов.УдалитьКлючОбъекта КАК ОтчетПолноеИмя
	|ИЗ
	|	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
	|ГДЕ
	|	ВариантыОтчетов.УдалитьКлючОбъекта <> """"";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		// Сформировать информацию об отчете
		ОтчетИнформация = СформироватьИнформациюОбОтчетеПоПолномуИмени(Выборка.ОтчетПолноеИмя);
		
		// Проверить результат
		Если ТипЗнч(ОтчетИнформация.ТекстОшибки) = Тип("Строка") Тогда
			ОшибкаПоВарианту(Выборка.Ссылка, ОтчетИнформация.ТекстОшибки);
			Продолжить;
		КонецЕсли;
		
		ВариантОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		Если ВариантОбъект.ТипОтчета = Перечисления.ТипыОтчетов.УдалитьПользовательский
			ИЛИ ВариантОбъект.ТипОтчета = Перечисления.ТипыОтчетов.Внешний Тогда
			ВариантОбъект.Пользовательский = Истина;
		Иначе
			ВариантОбъект.Пользовательский = Ложь;
		КонецЕсли;
		
		ВариантОбъект.Отчет = ОтчетИнформация.Отчет;
		ВариантОбъект.ТипОтчета = ОтчетИнформация.ТипОтчета;
		
		Если ОтчетИнформация.ТипОтчета = Перечисления.ТипыОтчетов.Внешний Тогда
			// Установка настроек варианта внешнего отчета, характерных для всех вариантов внешних отчетов.
			// Все варианты внешних отчетов являются пользовательскими поскольку
			// предопределенные варианты внешних отчетов не регистрируются в системе,
			// а зачитываются каждый раз динамически.
			ВариантОбъект.Пользовательский = Истина;
			
			// Варианты внешних отчетов не могут открываться из панели отчетов.
			ВариантОбъект.Размещение.Очистить();
			
		Иначе
			
			// Замена полных имен подсистем на ссылки справочника "Идентификаторы объектов метаданных".
			Редакция21ПривестиНастройкиПоРазделам(ВариантОбъект);
			
			// Перенос пользовательских настроек из табличной части в регистр сведений.
			Редакция21ПеренестиПользовательскиеНастройкиВРегистр(ВариантОбъект);
			
		КонецЕсли;
		
		// Варианты поставляются без автора.
		Если НЕ ВариантОбъект.Пользовательский Тогда
			ВариантОбъект.Автор = Неопределено;
		КонецЕсли;
		
		ВариантОбъект.УдалитьКлючОбъекта = "";
		ВариантОбъект.УдалитьПредставлениеОбъекта = "";
		ВариантОбъект.УдалитьИсключенияБыстрогоДоступа.Очистить();
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ВариантОбъект);
	КонецЦикла;
	
	ЗавершениеПроцедуры(ПредставлениеПроцедуры);
КонецПроцедуры

// [2.1.3.6] Заполняет ссылки предопределенных элементов справочника "Варианты отчетов".
//
Процедура ЗаполнитьСсылкиПредопределенных() Экспорт
	ПредставлениеПроцедуры = НСтр("ru = 'Заполнить ссылки предопределенных вариантов отчетов'");
	ЗапускПроцедуры(ПредставлениеПроцедуры);
	
	// Составить таблицу замен старых ключей вариантов на актуальные.
	ОписаниеТиповРеквизитаКлючВарианта = Метаданные.Справочники.ВариантыОтчетов.Реквизиты.КлючВарианта.Тип;
	
	Изменения = Новый ТаблицаЗначений;
	Изменения.Колонки.Добавить("Отчет",                 Новый ОписаниеТипов("ОбъектМетаданных"));
	Изменения.Колонки.Добавить("СтароеИмяВарианта",     ОписаниеТиповРеквизитаКлючВарианта);
	Изменения.Колонки.Добавить("АктуальноеИмяВарианта", ОписаниеТиповРеквизитаКлючВарианта);
	
	ВариантыОтчетовПереопределяемый.ЗарегистрироватьИзмененияКлючейВариантовОтчетов(Изменения);
	
	Изменения.Колонки.Отчет.Имя = "ОтчетМетаданные";
	Изменения.Колонки.Добавить("Отчет", Метаданные.Справочники.ПредопределенныеВариантыОтчетов.Реквизиты.Отчет.Тип);
	Для Каждого Изменение Из Изменения Цикл
		Изменение.Отчет = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Изменение.ОтчетМетаданные);
	КонецЦикла;
	
	// Получить ссылки вариантов отчетов для замены ключей,
	//   исключив из списка замен те варианты отчетов,
	//   актуальные ключи которых уже зарегистрированы,
	//   или старые ключи которых уже не заняты.
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Изменения.Отчет КАК Отчет,
	|	Изменения.СтароеИмяВарианта КАК СтароеИмяВарианта,
	|	Изменения.АктуальноеИмяВарианта КАК АктуальноеИмяВарианта
	|ПОМЕСТИТЬ втИзменения
	|ИЗ
	|	&Изменения КАК Изменения
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Отчет,
	|	СтароеИмяВарианта,
	|	АктуальноеИмяВарианта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВариантыОтчетов.Ссылка КАК Ссылка,
	|	ВЫРАЗИТЬ(ВариантыОтчетов.Отчет КАК Справочник.ИдентификаторыОбъектовМетаданных) КАК Отчет,
	|	ЕСТЬNULL(втИзменения.АктуальноеИмяВарианта, ВариантыОтчетов.КлючВарианта) КАК АктуальныйКлючВарианта
	|ПОМЕСТИТЬ втАктуальные
	|ИЗ
	|	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ втИзменения КАК втИзменения
	|		ПО ВариантыОтчетов.Отчет = втИзменения.Отчет
	|			И ВариантыОтчетов.КлючВарианта = втИзменения.СтароеИмяВарианта
	|ГДЕ
	|	ВариантыОтчетов.Пользовательский = ЛОЖЬ
	|	И ВариантыОтчетов.ТипОтчета = &ТипОтчета
	|	И ВариантыОтчетов.ПометкаУдаления = ЛОЖЬ
	|	И ВариантыОтчетов.ПредопределенныйВариант = &ПредопределенныйВариант
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Отчет,
	|	АктуальныйКлючВарианта,
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втАктуальные.Ссылка,
	|	ПредопределенныеВариантыОтчетов.Наименование,
	|	ПредопределенныеВариантыОтчетов.КлючВарианта,
	|	ЕСТЬNULL(ПредопределенныеВариантыОтчетов.Ссылка, НЕОПРЕДЕЛЕНО) КАК ПредопределенныйВариант
	|ИЗ
	|	втАктуальные КАК втАктуальные
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПредопределенныеВариантыОтчетов КАК ПредопределенныеВариантыОтчетов
	|		ПО втАктуальные.Отчет = ПредопределенныеВариантыОтчетов.Отчет
	|			И втАктуальные.АктуальныйКлючВарианта = ПредопределенныеВариантыОтчетов.КлючВарианта";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Изменения", Изменения);
	Запрос.УстановитьПараметр("ТипОтчета", Перечисления.ТипыОтчетов.Внутренний);
	Запрос.УстановитьПараметр("ПредопределенныйВариант", Справочники.ПредопределенныеВариантыОтчетов.ПустаяСсылка());
	Запрос.Текст = ТекстЗапроса;
	
	// Заменить имена вариантов на ссылки.
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ВариантОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ВариантОбъект.ДополнительныеСвойства.Вставить("ЗаполнениеПредопределенных", Истина);
		Если ЗначениеЗаполнено(Выборка.ПредопределенныйВариант) Тогда
			ЗаполнитьЗначенияСвойств(ВариантОбъект, Выборка, "Наименование, КлючВарианта, ПредопределенныйВариант");
			Найденные = ВариантОбъект.Размещение.НайтиСтроки(Новый Структура("УдалитьПредопределенная", Истина));
			Для Каждого СтрокаТаблицы Из Найденные Цикл
				ВариантОбъект.Размещение.Удалить(СтрокаТаблицы);
			КонецЦикла;
			ВариантОбъект.Описание = "";
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ВариантОбъект);
		Иначе
			ВариантОбъект.УстановитьПометкуУдаления(Истина);
		КонецЕсли;
	КонецЦикла;
	
	ЗавершениеПроцедуры(ПредставлениеПроцедуры);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы / Начальное заполнение и актуализация справочников

// Замена старых ключей вариантов отчетов на актуальные
//
Процедура АктуализироватьКлючиПредопределенных(Кэш)
	ПредставлениеПроцедуры = НСтр("ru = 'Обновить ключи вариантов отчетов'");
	ЗапускПроцедуры(ПредставлениеПроцедуры);
	
	// Составить таблицу замен старых ключей вариантов на актуальные.
	ОписаниеТиповРеквизитаКлючВарианта = Метаданные.Справочники.ВариантыОтчетов.Реквизиты.КлючВарианта.Тип;
	
	Изменения = Новый ТаблицаЗначений;
	Изменения.Колонки.Добавить("Отчет",                 Новый ОписаниеТипов("ОбъектМетаданных"));
	Изменения.Колонки.Добавить("СтароеИмяВарианта",     ОписаниеТиповРеквизитаКлючВарианта);
	Изменения.Колонки.Добавить("АктуальноеИмяВарианта", ОписаниеТиповРеквизитаКлючВарианта);
	
	ВариантыОтчетовПереопределяемый.ЗарегистрироватьИзмененияКлючейВариантовОтчетов(Изменения);
	
	Изменения.Колонки.Отчет.Имя = "ОтчетМетаданные";
	Изменения.Колонки.Добавить("Отчет", Метаданные.Справочники.ПредопределенныеВариантыОтчетов.Реквизиты.Отчет.Тип);
	
	// Проверить корректность замен.
	Для Каждого Изменение Из Изменения Цикл
		Изменение.Отчет = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Изменение.ОтчетМетаданные);
		Найденные = Изменения.НайтиСтроки(Новый Структура("ОтчетМетаданные, СтароеИмяВарианта", Изменение.ОтчетМетаданные, Изменение.АктуальноеИмяВарианта));
		Если Найденные.Количество() > 0 Тогда
			Конфликт = Найденные[0];
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка регистрации изменений имени варианта отчета ""%1"":
				|Актуальное имя варианта ""%2"" (старое имя ""%3"")
				|так же числится как старое имя ""%4"" (актуальное имя ""%5"").'"),
				Строка(Изменение.Отчет),
				Изменение.АктуальноеИмяВарианта,
				Изменение.СтароеИмяВарианта,
				Конфликт.СтароеИмяВарианта,
				Конфликт.АктуальноеИмяВарианта);
		КонецЕсли;
		Найденные = Изменения.НайтиСтроки(Новый Структура("ОтчетМетаданные, СтароеИмяВарианта", Изменение.ОтчетМетаданные, Изменение.СтароеИмяВарианта));
		Если Найденные.Количество() > 2 Тогда
			Конфликт = Найденные[1];
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка регистрации изменений имени варианта отчета ""%1"":
				|Старое имя варианта ""%2"" (актуальное имя ""%3"")
				|так же числится как старое имя 
				|варианта отчета ""%4"" (актуальное имя ""%5"").'"),
				Строка(Изменение.Отчет),
				Изменение.СтароеИмяВарианта,
				Изменение.АктуальноеИмяВарианта,
				Строка(Конфликт.ОтчетМетаданные.Представление()),
				Конфликт.АктуальноеИмяВарианта);
		КонецЕсли;
	КонецЦикла;
	
	// Получить ссылки вариантов отчетов для замены ключей,
	//   исключив из списка замен те варианты отчетов,
	//   актуальные ключи которых уже зарегистрированы,
	//   или старые ключи которых уже не заняты.
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Изменения.Отчет,
	|	Изменения.СтароеИмяВарианта,
	|	Изменения.АктуальноеИмяВарианта
	|ПОМЕСТИТЬ втИзменения
	|ИЗ
	|	&Изменения КАК Изменения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втИзменения.Отчет,
	|	втИзменения.АктуальноеИмяВарианта,
	|	ВариантыОтчетовСтарые.Ссылка
	|ИЗ
	|	втИзменения КАК втИзменения
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПредопределенныеВариантыОтчетов КАК ВариантыОтчетовАктуальные
	|		ПО втИзменения.Отчет = ВариантыОтчетовАктуальные.Отчет
	|			И втИзменения.АктуальноеИмяВарианта = ВариантыОтчетовАктуальные.КлючВарианта
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПредопределенныеВариантыОтчетов КАК ВариантыОтчетовСтарые
	|		ПО втИзменения.Отчет = ВариантыОтчетовСтарые.Отчет
	|			И втИзменения.СтароеИмяВарианта = ВариантыОтчетовСтарые.КлючВарианта
	|ГДЕ
	|	ВариантыОтчетовАктуальные.Ссылка ЕСТЬ NULL 
	|	И НЕ ВариантыОтчетовСтарые.Ссылка ЕСТЬ NULL ";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Изменения", Изменения);
	Запрос.Текст = ТекстЗапроса;
	
	// Заменить старые имена вариантов на актуальные.
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Кэш.ОбновитьОбласти = Истина;
		ВариантОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ВариантОбъект.КлючВарианта = Выборка.АктуальноеИмяВарианта;
		ВариантОбъект.ДополнительныеСвойства.Вставить("ЗаполнениеПредопределенных", Истина);
		ВариантОбъект.Записать();
	КонецЦикла;
	
	ЗавершениеПроцедуры(ПредставлениеПроцедуры);
КонецПроцедуры

// Актуализация предопределенных вариантов отчетов
//
Процедура ОбновитьНастройкиПредопределенных(Кэш)
	ПредставлениеПроцедуры = НСтр("ru = 'Обновить предопределенные'");
	ЗапускПроцедуры(ПредставлениеПроцедуры);
	
	ТаблицаФункциональныхОпций = Новый ТаблицаЗначений;
	ТаблицаФункциональныхОпций.Колонки.Добавить("Отчет", Новый ОписаниеТипов("СправочникСсылка.ИдентификаторыОбъектовМетаданных"));
	ТаблицаФункциональныхОпций.Колонки.Добавить("ПредопределенныйВариант", Новый ОписаниеТипов("СправочникСсылка.ПредопределенныеВариантыОтчетов"));
	ТаблицаФункциональныхОпций.Колонки.Добавить("ИмяФункциональнойОпции", Новый ОписаниеТипов("Строка"));
	
	Кэш.ДеревоВариантов.Колонки.Добавить("НайденВБазеДанных", Новый ОписаниеТипов("Булево"));
	ПоискВарианта = Новый Структура("Отчет, КлючВарианта, НайденВБазеДанных, ЭтоВариант", , , Ложь, Истина);
	
	Запрос = Новый Запрос("ВЫБРАТЬ * ИЗ Справочник.ПредопределенныеВариантыОтчетов УПОРЯДОЧИТЬ ПО ПометкаУдаления");
	ВариантВыборка = Запрос.Выполнить().Выбрать();
	Пока ВариантВыборка.Следующий() Цикл
		ЗаполнитьЗначенияСвойств(ПоискВарианта, ВариантВыборка, "Отчет, КлючВарианта");
		Найденные = Кэш.ДеревоВариантов.Строки.НайтиСтроки(ПоискВарианта, Истина);
		ВариантПометкаУдаления = (Найденные.Количество() = 0);
		Если ВариантПометкаУдаления <> ВариантВыборка.ПометкаУдаления Тогда
			ВариантОбъект = ВариантВыборка.Ссылка.ПолучитьОбъект();
			ВариантОбъект.ДополнительныеСвойства.Вставить("ЗаполнениеПредопределенных", Истина);
			ВариантОбъект.УстановитьПометкуУдаления(ВариантПометкаУдаления);
			Кэш.ОбновитьОбласти = Истина;
		КонецЕсли;
		Если ВариантПометкаУдаления Тогда
			Продолжить;
		КонецЕсли;
		
		ОписаниеВарианта = Найденные[0];
		ЗаполнитьОписаниеСтрокиВарианта(ОписаниеВарианта);
		ОписаниеВарианта.НайденВБазеДанных = Истина;
		
		Для Каждого ИмяФункциональнойОпции Из ОписаниеВарианта.ФункциональныеОпции Цикл
			СвязьСФункциональнойОпцией = ТаблицаФункциональныхОпций.Добавить();
			СвязьСФункциональнойОпцией.Отчет                   = ОписаниеВарианта.Отчет;
			СвязьСФункциональнойОпцией.ПредопределенныйВариант = ВариантВыборка.Ссылка;
			СвязьСФункциональнойОпцией.ИмяФункциональнойОпции  = ИмяФункциональнойОпции;
		КонецЦикла;
		
		Если НЕ ИзменилисьНастройкиПредопределенного(ВариантВыборка, ОписаниеВарианта) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ВариантВыборка.Наименование <> ОписаниеВарианта.Наименование
			ИЛИ ВариантВыборка.ВидимостьПоУмолчанию <> ОписаниеВарианта.ВидимостьПоУмолчанию Тогда
			Кэш.ОбновитьОбласти = Истина;
		КонецЕсли;
		
		ЗаписатьНастройкиПредопределенного(ОписаниеВарианта, ВариантВыборка.Ссылка);
	КонецЦикла;
	
	// Добавить варианты, которых нет в базы данных.
	Найденные = Кэш.ДеревоВариантов.Строки.НайтиСтроки(Новый Структура("НайденВБазеДанных, ЭтоВариант", Ложь, Истина), Истина);
	Для Каждого ОписаниеВарианта Из Найденные Цикл
		Кэш.ОбновитьОбласти = Истина;
		ЗаполнитьОписаниеСтрокиВарианта(ОписаниеВарианта);
		
		СсылкаПредопределенного = ЗаписатьНастройкиПредопределенного(ОписаниеВарианта);
		
		Для Каждого ИмяФункциональнойОпции Из ОписаниеВарианта.ФункциональныеОпции Цикл
			СвязьСФункциональнойОпцией = ТаблицаФункциональныхОпций.Добавить();
			СвязьСФункциональнойОпцией.Отчет                   = ОписаниеВарианта.Отчет;
			СвязьСФункциональнойОпцией.ПредопределенныйВариант = СсылкаПредопределенного;
			СвязьСФункциональнойОпцией.ИмяФункциональнойОпции  = ИмяФункциональнойОпции;
		КонецЦикла;
	КонецЦикла;
	
	// Перезапись константы только в случае если обработчик обновления был запущен "для записи" (в монопольном режиме).
	МенеджерКонстанты = Константы.ПараметрыВариантовОтчетов.СоздатьМенеджерЗначения();
	МенеджерКонстанты.Значение = Новый ХранилищеЗначения(ТаблицаФункциональныхОпций, Новый СжатиеДанных(9));
	МенеджерКонстанты.ОбменДанными.Загрузка = Истина;
	МенеджерКонстанты.Записать();
	
	ЗавершениеПроцедуры(ПредставлениеПроцедуры);
КонецПроцедуры

// Определяет изменились ли настройки предопределенного варианта отчета.
//
Функция ИзменилисьНастройкиПредопределенного(ВариантВыборка, ОписаниеВарианта)
	// Шапка
	Если ВариантВыборка.Наименование <> ОписаниеВарианта.Наименование
		ИЛИ ВариантВыборка.Включен <> ОписаниеВарианта.Включен
		ИЛИ ВариантВыборка.ВидимостьПоУмолчанию <> ОписаниеВарианта.ВидимостьПоУмолчанию
		ИЛИ ВариантВыборка.Описание <> ОписаниеВарианта.Описание Тогда
		Возврат Истина;
	КонецЕсли;
	
	// Таблица "Размещение"
	ТаблицаРазмещения = ВариантВыборка.Размещение.Выгрузить();
	Если ТаблицаРазмещения.Количество() <> ОписаниеВарианта.Размещение.Количество() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из ОписаниеВарианта.Размещение Цикл
		Подсистема = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(КлючИЗначение.Ключ);
		СтрокаРазмещения = ТаблицаРазмещения.Найти(Подсистема, "Подсистема");
		Если СтрокаРазмещения = Неопределено
			ИЛИ СтрокаРазмещения.Важный <> (НРег(КлючИЗначение.Значение) = НРег("Важный"))
			ИЛИ СтрокаРазмещения.СмТакже <> (НРег(КлючИЗначение.Значение) = НРег("СмТакже")) Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
КонецФункции

// Записывает настройки варианта в данные справочника.
//
Функция ЗаписатьНастройкиПредопределенного(ОписаниеВарианта, ВариантСсылка = Неопределено)
	Если ВариантСсылка = Неопределено Тогда
		ВариантОбъект = Справочники.ПредопределенныеВариантыОтчетов.СоздатьЭлемент();
	Иначе
		ВариантОбъект = ВариантСсылка.ПолучитьОбъект();
		ВариантОбъект.Размещение.Очистить();
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ВариантОбъект, ОписаниеВарианта, "Отчет, КлючВарианта, Наименование, Включен, ВидимостьПоУмолчанию, Описание");
	
	Для Каждого КлючИЗначение Из ОписаниеВарианта.Размещение Цикл
		СтрокаРазмещения = ВариантОбъект.Размещение.Добавить();
		СтрокаРазмещения.Подсистема = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(КлючИЗначение.Ключ);
		СтрокаРазмещения.Важный  = (НРег(КлючИЗначение.Значение) = НРег("Важный"));
		СтрокаРазмещения.СмТакже = (НРег(КлючИЗначение.Значение) = НРег("СмТакже"));
	КонецЦикла;
	
	ВариантОбъект.ОбменДанными.Загрузка = Истина;
	ВариантОбъект.ДополнительныеСвойства.Вставить("ЗаполнениеПредопределенных", Истина);
	ВариантОбъект.Записать();
	
	Возврат ВариантОбъект.Ссылка;
КонецФункции

// Приводит в соответствие данные разделенного и неразделенного справочников.
//   Для разделенного справочника (ВариантыОтчетов).
//
Процедура АктуализироватьСоставОбласти()
	
	ПредставлениеПроцедуры = НСтр("ru = 'Обновить разделенные вариантов отчетов'");
	ЗапускПроцедуры(ПредставлениеПроцедуры);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ПредопределенныеВариантыОтчетов.Ссылка КАК ПредопределенныйВариант,
	|	ПредопределенныеВариантыОтчетов.Наименование КАК Наименование,
	|	ПредопределенныеВариантыОтчетов.Отчет КАК Отчет,
	|	ПредопределенныеВариантыОтчетов.КлючВарианта КАК КлючВарианта,
	|	ПредопределенныеВариантыОтчетов.ВидимостьПоУмолчанию
	|ПОМЕСТИТЬ втОбщие
	|ИЗ
	|	Справочник.ПредопределенныеВариантыОтчетов КАК ПредопределенныеВариантыОтчетов
	|ГДЕ
	|	ПредопределенныеВариантыОтчетов.ПометкаУдаления = ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВариантыОтчетов.Ссылка,
	|	ВариантыОтчетов.ПометкаУдаления,
	|	ВариантыОтчетов.Отчет,
	|	ВариантыОтчетов.КлючВарианта,
	|	ВариантыОтчетов.Наименование,
	|	ВариантыОтчетов.ПредопределенныйВариант,
	|	ВариантыОтчетов.ВидимостьПоУмолчанию,
	|	ВариантыОтчетов.ВидимостьПоУмолчаниюПереопределена
	|ПОМЕСТИТЬ втРазделенные
	|ИЗ
	|	Справочник.ВариантыОтчетов КАК ВариантыОтчетов
	|ГДЕ
	|	ВариантыОтчетов.ТипОтчета = &ТипОтчета
	|	И ВариантыОтчетов.Пользовательский = ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕСТЬNULL(втРазделенные.Ссылка, НЕОПРЕДЕЛЕНО) КАК Ссылка,
	|	ЕСТЬNULL(втОбщие.ПредопределенныйВариант, НЕОПРЕДЕЛЕНО) КАК ПредопределенныйВариант,
	|	втОбщие.Наименование,
	|	втОбщие.Отчет,
	|	втОбщие.КлючВарианта,
	|	втОбщие.ВидимостьПоУмолчанию
	|ИЗ
	|	втОбщие КАК втОбщие
	|		ПОЛНОЕ СОЕДИНЕНИЕ втРазделенные КАК втРазделенные
	|		ПО втОбщие.ПредопределенныйВариант = втРазделенные.ПредопределенныйВариант
	|ГДЕ
	|	(втРазделенные.Ссылка ЕСТЬ NULL 
	|			ИЛИ втОбщие.ПредопределенныйВариант ЕСТЬ NULL 
	|			ИЛИ втОбщие.Наименование <> втРазделенные.Наименование
	|			ИЛИ втОбщие.КлючВарианта <> втРазделенные.КлючВарианта
	|			ИЛИ втРазделенные.ВидимостьПоУмолчаниюПереопределена
	|				И втОбщие.ВидимостьПоУмолчанию <> втРазделенные.ВидимостьПоУмолчанию)";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТипОтчета", Перечисления.ТипыОтчетов.Внутренний);
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.ПредопределенныйВариант = Неопределено Тогда
			// Удалить (нет в общих, но есть в разделенных).
			ВариантОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ВариантОбъект.ДополнительныеСвойства.Вставить("ЗаполнениеПредопределенных", Истина);
			ВариантОбъект.УстановитьПометкуУдаления(Истина);
		Иначе
			Если Выборка.Ссылка = Неопределено Тогда
				// Зарегистрировать (есть в общих, но нет в разделенных).
				ВариантОбъект = Справочники.ВариантыОтчетов.СоздатьЭлемент();
				ВариантОбъект.Заблокировать();
			Иначе
				// Актуализировать (изменилось наименование или ключ варианта).
				ВариантОбъект = Выборка.Ссылка.ПолучитьОбъект();
				ВариантОбъект.Заблокировать();
				// Перенести пользовательские настройки.
				ЗаменитьКлючиПользовательскихНастроек(ВариантОбъект, Выборка);
			КонецЕсли;
			ВариантОбъект.ОбменДанными.Загрузка = Истина;
			ВариантОбъект.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
			ВариантОбъект.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов");
			ВариантОбъект.ТипОтчета = Перечисления.ТипыОтчетов.Внутренний;
			ЗаполнитьЗначенияСвойств(ВариантОбъект, Выборка, "Наименование, Отчет, КлючВарианта, ПредопределенныйВариант");
			Если НЕ ВариантОбъект.ВидимостьПоУмолчаниюПереопределена Тогда
				ВариантОбъект.ВидимостьПоУмолчанию = Выборка.ВидимостьПоУмолчанию;
			КонецЕсли;
			ВариантОбъект.ДополнительныеСвойства.Вставить("ЗаполнениеПредопределенных", Истина);
			ВариантОбъект.Записать();
		КонецЕсли;
	КонецЦикла;
	
	ЗавершениеПроцедуры(ПредставлениеПроцедуры);
КонецПроцедуры

// Установка пометки удаления вариантов удаленных отчетов.
//
Процедура ПометитьНаУдалениеВариантыУдаленныхОтчетов(Кэш, ОбщиеДанные)
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеСправочника.Ссылка
	|ИЗ
	|	Справочник.ПредопределенныеВариантыОтчетов КАК ДанныеСправочника
	|ГДЕ
	|	ДанныеСправочника.ПометкаУдаления = ЛОЖЬ
	|	И (ДанныеСправочника.Отчет = НЕОПРЕДЕЛЕНО
	|			ИЛИ ДанныеСправочника.Отчет.ПометкаУдаления = ИСТИНА)";
	
	Если НЕ ОбщиеДанные Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "Справочник.ПредопределенныеВариантыОтчетов", "Справочник.ВариантыОтчетов");
	КонецЕсли;
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщиеДанные Тогда
		Кэш.ОбновитьОбласти = Истина;
		Суффикс = НСтр("ru = 'общие данные'");
	Иначе
		Суффикс = НСтр("ru = 'область данных'");
	КонецЕсли;
	
	ПредставлениеПроцедуры = НСтр("ru = 'Удаление вариантов удаленных отчетов'") + " (" + Суффикс + ")";
	ЗапускПроцедуры(ПредставлениеПроцедуры);
	
	МассивСсылокВариантов = Результат.Выгрузить().ВыгрузитьКолонку("Ссылка");
	Для Каждого ВариантСсылка Из МассивСсылокВариантов Цикл
		ВариантОбъект = ВариантСсылка.ПолучитьОбъект();
		ВариантОбъект.Заблокировать();
		ВариантОбъект.ОбменДанными.Загрузка = Истина;
		ВариантОбъект.ОбменДанными.Получатели.АвтоЗаполнение = Ложь;
		ВариантОбъект.ДополнительныеСвойства.Вставить("ОтключитьМеханизмРегистрацииОбъектов");
		ВариантОбъект.ДополнительныеСвойства.Вставить("ЗаполнениеПредопределенных", Истина);
		ВариантОбъект.УстановитьПометкуУдаления(Истина);
	КонецЦикла;
	
	ЗавершениеПроцедуры(ПредставлениеПроцедуры);
КонецПроцедуры

// Перенос пользовательских настроек варианта из соответствующего хранилища.
Процедура ЗаменитьКлючиПользовательскихНастроек(СтарыйВариант, АктуальныйВариант)
	Если СтарыйВариант.КлючВарианта = АктуальныйВариант.КлючВарианта
		ИЛИ НЕ ЗначениеЗаполнено(СтарыйВариант.КлючВарианта)
		ИЛИ НЕ ЗначениеЗаполнено(АктуальныйВариант.КлючВарианта)
		ИЛИ ТипЗнч(АктуальныйВариант.Отчет) <> Тип("СправочникСсылка.ИдентификаторыОбъектовМетаданных") Тогда
		Возврат;
	КонецЕсли;
	
	ОтчетПолноеИмя = АктуальныйВариант.Отчет.ПолноеИмя;
	СтарыйКлючОбъекта = ОтчетПолноеИмя +"/"+ СтарыйВариант.КлючВарианта;
	НовыйКлючОбъекта = ОтчетПолноеИмя +"/"+ АктуальныйВариант.КлючВарианта;
	
	Отбор = Новый Структура("КлючОбъекта", СтарыйКлючОбъекта);
	ВыборкаХранилища = ХранилищеПользовательскихНастроекОтчетов.Выбрать(Отбор);
	ОшибокЧтенияПодряд = 0;
	Пока Истина Цикл
		// Чтение настроек из хранилища по старому ключу.
		Попытка
			ЭлементВыборкиПолучен = ВыборкаХранилища.Следующий();
			ОшибокЧтенияПодряд = 0;
		Исключение
			ЭлементВыборкиПолучен = Неопределено;
			ОшибокЧтенияПодряд = ОшибокЧтенияПодряд + 1;
			ОшибкаПоВарианту(
				СтарыйВариант.Ссылка,
				НСтр("ru = 'В процессе выборки вариантов отчетов из стандартного хранилища возникла ошибка:'")
				+ Символы.ПС
				+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
		
		Если ЭлементВыборкиПолучен = Ложь Тогда
			Прервать;
		ИначеЕсли ЭлементВыборкиПолучен = Неопределено Тогда
			Если ОшибокЧтенияПодряд > 100 Тогда
				Прервать;
			Иначе
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		// Чтение описания настроек.
		ОписаниеНастроек = ХранилищеПользовательскихНастроекОтчетов.ПолучитьОписание(
			ВыборкаХранилища.КлючОбъекта,
			ВыборкаХранилища.КлючНастроек,
			ВыборкаХранилища.Пользователь);
		
		// Запись настроек в хранилище по новому ключу.
		ХранилищеПользовательскихНастроекОтчетов.Сохранить(
			НовыйКлючОбъекта,
			ВыборкаХранилища.КлючНастроек,
			ВыборкаХранилища.Настройки,
			ОписаниеНастроек,
			ВыборкаХранилища.Пользователь);
	КонецЦикла;
	
	// Очистка старых настроек хранилища.
	ХранилищеПользовательскихНастроекОтчетов.Удалить(СтарыйКлючОбъекта, Неопределено, Неопределено);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы / Переход к редакции 2.1

// Замена структуры хранения настроек по разделам, переход на ссылки справочника ИОМ.
//   Вызывается только для вариантов внутренних отчетов.
//
Процедура Редакция21ПривестиНастройкиПоРазделам(ВариантОбъект)
	
	Найденные = ВариантОбъект.Размещение.НайтиСтроки(Новый Структура("РазделИлиГруппа", Справочники.ИдентификаторыОбъектовМетаданных.ПустаяСсылка()));
	Для Каждого СтрокаТаблицы Из Найденные Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.УдалитьПодсистема) Тогда
			ВариантОбъект.Размещение.Удалить(СтрокаТаблицы);
			Продолжить;
		КонецЕсли;
		
		ПодсистемаПолноеИмя = "Подсистема." + СтрЗаменить(СтрокаТаблицы.УдалитьПодсистема, "\", ".Подсистема.");
		ПодсистемаМетаданные = Метаданные.НайтиПоПолномуИмени(ПодсистемаПолноеИмя);
		Если ПодсистемаМетаданные = Неопределено Тогда
			ВариантОбъект.Размещение.Удалить(СтрокаТаблицы);
			Продолжить;
		КонецЕсли;
		
		ПодсистемаСсылка = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ПодсистемаМетаданные);;
		Если НЕ ЗначениеЗаполнено(ПодсистемаСсылка) Тогда
			ВариантОбъект.Размещение.Удалить(СтрокаТаблицы);
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицы.Использование = Истина;
		СтрокаТаблицы.РазделИлиГруппа = ПодсистемаСсылка;
		СтрокаТаблицы.УдалитьПодсистема = "";
		СтрокаТаблицы.УдалитьНазвание = "";
		
	КонецЦикла;
	
КонецПроцедуры

// Заполнение регистра "НастройкиВариантовОтчетов".
//   Вызывается только для вариантов внутренних отчетов.
//
Процедура Редакция21ПеренестиПользовательскиеНастройкиВРегистр(ВариантОбъект)
	ТаблицаПодсистем = ВариантОбъект.Размещение.Выгрузить(Новый Структура("Использование", Истина));
	ТаблицаПодсистем.Свернуть("РазделИлиГруппа");
	
	ТаблицаПользователей = ВариантОбъект.УдалитьИсключенияБыстрогоДоступа.Выгрузить();
	ТаблицаПользователей.Колонки.УдалитьПользователь.Имя = "Пользователь";
	ТаблицаПользователей.Свернуть("Пользователь");
	
	НаборЗаписей = РегистрыСведений.НастройкиВариантовОтчетов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Вариант.Установить(ВариантОбъект.Ссылка, Истина);
	
	Для Каждого СтрокаПодсистема Из ТаблицаПодсистем Цикл
		
		Для Каждого СтрокаПользователь Из ТаблицаПользователей Цикл
			
			Запись = НаборЗаписей.Добавить();
			Запись.Активность      = Истина;
			Запись.Вариант         = ВариантОбъект.Ссылка;
			Запись.РазделИлиГруппа = СтрокаПодсистема.РазделИлиГруппа;
			Запись.Пользователь    = СтрокаПользователь.Пользователь;
			Запись.Видимость       = НЕ ВариантОбъект.ВидимостьПоУмолчанию;
			
		КонецЦикла;
		
	КонецЦикла;
	
	НаборЗаписей.Записать(Истина);
	
КонецПроцедуры
