Функция ЭтоСтрокаКартинки(знач СтрокаПроверки) Экспорт
	
	СтрокаПроверки = СокрЛП(СтрокаПроверки);
	Возврат НРег(Лев(СтрокаПроверки, 10)) = НРег("[picture='");
	
КонецФункции

Функция ПолучитьИмяКартинки(знач СтрокаКартинки) Экспорт
	
	ИмяКартинки = "";
	
	Если ЭтоСтрокаКартинки(СтрокаКартинки) Тогда
		
		СтрокаКартинки	= СокрЛП(СтрокаКартинки);
		ЧастьИмени		= Сред(СтрокаКартинки, 11);
		Окончание		= Найти(ЧастьИмени, "'");
		
		Если Окончание > 0 Тогда
			ИмяКартинки = Сред(ЧастьИмени, 1, Окончание - 1);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ИмяКартинки;
	
КонецФункции

Функция ЭтоСтрокаТаблицы(знач СтрокаПроверки) Экспорт 
	
	СтрокаПроверки = СокрЛП(СтрокаПроверки);
	Возврат НРег(Лев(СтрокаПроверки, 8)) = НРег("[table='");
	
КонецФункции

Функция ПолучитьИмяТаблицы(знач СтрокаТаблицы) Экспорт
	
	ИмяТаблицы = "";
	
	Если ЭтоСтрокаТаблицы(СтрокаТаблицы) Тогда
		
		СтрокаТаблицы	= СокрЛП(СтрокаТаблицы);
		ЧастьИмени		= Сред(СтрокаТаблицы, 9);
		Окончание		= Найти(ЧастьИмени, "'");
		
		Если Окончание > 0 Тогда
			ИмяТаблицы = Сред(ЧастьИмени, 1, Окончание - 1);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ИмяТаблицы;
	
КонецФункции

Функция ПроверитьПравильностьЗаполненияИмени(знач Имя) Экспорт
	
	ПерваяЦифра = СтроковыеФункцииКлиентСервер.ТолькоЦифрыВСтроке(Лев(Имя, 1), Истина, Ложь);
	
	ПроверкаПройдена = Истина;
	Если НЕ ПерваяЦифра Тогда
		ДопустимыеСимволы	= БазаЗнанийКлиентСерверПовтИсп.ПолучитьДопустимыеСимволыИмени();
		ДлинаСтроки			= СтрДлина(Имя);
		Для Индекс = 1 По ДлинаСтроки Цикл
			СимволПроверки = Сред(Имя, Индекс, 1);
			Если Найти(ДопустимыеСимволы, НРег(СимволПроверки)) = 0 Тогда
				ПроверкаПройдена = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Иначе 
		ПроверкаПройдена = Ложь;
	КонецЕсли;
	
	Возврат ПроверкаПройдена;			
	
КонецФункции

Функция ОбработатьТекстСтатьи(знач ТекстСтатьи) Экспорт
	
	// Необходимо удалить все [picture='...']
	ПозицияСимвола = Найти(ТекстСтатьи, "[picture='");
	Пока ПозицияСимвола > 0 Цикл
		НачСтроки = Лев(ТекстСтатьи, ПозицияСимвола - 1);
		КонСтроки = Сред(ТекстСтатьи, ПозицияСимвола + 7);
		
		КонПозиция	= Найти(КонСтроки, "']");
		ТекстСтатьи = НачСтроки + Сред(КонСтроки, КонПозиция + 2);
		
		ПозицияСимвола = Найти(ТекстСтатьи, "[picture='");
	КонецЦикла;
	
	// Необходимо удалить все [table='...']
	ПозицияСимвола = Найти(ТекстСтатьи, "[table='");
	Пока ПозицияСимвола > 0 Цикл
		НачСтроки = Лев(ТекстСтатьи, ПозицияСимвола - 1);
		КонСтроки = Сред(ТекстСтатьи, ПозицияСимвола + 7);
		
		КонПозиция	= Найти(КонСтроки, "']");
		ТекстСтатьи = НачСтроки + Сред(КонСтроки, КонПозиция + 2);
		
		ПозицияСимвола = Найти(ТекстСтатьи, "[table='");
	КонецЦикла;
	
	Возврат ТекстСтатьи;
	
КонецФункции

// Типы ссылок см. в форме "Справочник.СтатьиБазыЗнаний.Формы.РедактированиеГиперссылки"
//
Функция ПолучитьСтруктуруСсылкиПоАдресу(знач АдресСсылки) Экспорт
	
	// kb://api/ - это внутренние ссылки
	// mailto: - это отправка письма на эл. почту
	// http://www.google.ru/search? - это поиск в гугл
	// все остальное обычные гиперссылки
	
	СтруктураСсылки = Новый Структура("Тип, Адрес", 0, "");
	
	Если Лев(АдресСсылки, 7) = "mailto:" Тогда
		СтруктураСсылки.Тип		= 2;
		СтруктураСсылки.Адрес	= Сред(АдресСсылки, 8);
	ИначеЕсли Лев(АдресСсылки, 9) = "kb://api/" Тогда
		ДанныеСсылки = БазаЗнанийAPIКлиентСервер.РазобратьАдресСсылки(АдресСсылки);
		
		ИмяКоманды			= ?(ДанныеСсылки.Свойство("Команда"), ДанныеСсылки.Команда, "");
		ПараметрыКоманды	= ?(ДанныеСсылки.Свойство("Параметры"), ДанныеСсылки.Параметры, Новый Структура);
		Если ИмяКоманды = "page" Тогда
			ИмяСтраницы = ?(ПараметрыКоманды.Свойство("name"), ПараметрыКоманды.name, "");
			Если ИмяСтраницы = "article" Тогда
				ИДСтатьи	= ?(ПараметрыКоманды.Свойство("id"), ПараметрыКоманды.id, "");
				ИДРаздела	= ?(ПараметрыКоманды.Свойство("section"), ПараметрыКоманды.section, "");
				
				СтруктураСсылки.Тип		= 0;
				СтруктураСсылки.Адрес	= ИДСтатьи + ?(ПустаяСтрока(ИДРаздела), "", "#") + ИДРаздела;
			ИначеЕсли ИмяСтраницы = "category" Тогда
				ИДКатегории	= ?(ПараметрыКоманды.Свойство("id"), ПараметрыКоманды.id, "");
				
				СтруктураСсылки.Тип		= 3;
				СтруктураСсылки.Адрес	= ИДКатегории;
			КонецЕсли;
		ИначеЕсли ИмяКоманды = "search" Тогда
			ТипПоиска	= ?(ПараметрыКоманды.Свойство("type"), ПараметрыКоманды.type, "");
			ЗначПоиска	= ?(ПараметрыКоманды.Свойство("text"), ПараметрыКоманды.text, "");
			
			СтруктураСсылки.Тип		= 4;
			СтруктураСсылки.Адрес	= ЗначПоиска;
		КонецЕсли;
	ИначеЕсли Лев(АдресСсылки, 28) = "http://www.google.ru/search?" Тогда
		ДанныеСсылки = БазаЗнанийAPIКлиентСервер.РазобратьАдресСсылки(АдресСсылки);
		
		ИмяКоманды			= ?(ДанныеСсылки.Свойство("Команда"), ДанныеСсылки.Команда, "");
		ПараметрыКоманды	= ?(ДанныеСсылки.Свойство("Параметры"), ДанныеСсылки.Параметры, Новый Структура);
		ЗначениеПоиска		= ?(ПараметрыКоманды.Свойство("q"), ПараметрыКоманды.q, "");
		
		СтруктураСсылки.Тип		= 5;
		СтруктураСсылки.Адрес	= ЗначениеПоиска;
	Иначе
		СтруктураСсылки.Тип		= 1;
		СтруктураСсылки.Адрес	= АдресСсылки;
	КонецЕсли;
		
	Возврат СтруктураСсылки;
	
КонецФункции

Функция ПолучитьАдресСсылкиПоСтруктуре(знач СтруктураСсылки) Экспорт
	
	Если СтруктураСсылки.Тип = 0 Тогда
		Разделитель = Найти(СтруктураСсылки.Адрес, "#");
		Если Разделитель > 0 Тогда
			ИДСтатья = Лев(СтруктураСсылки.Адрес, Разделитель - 1);
			ИДРаздел = Сред(СтруктураСсылки.Адрес, Разделитель + 1);
		Иначе 
			ИДСтатья = СтруктураСсылки.Адрес;
			ИДРаздел = "";
		КонецЕсли;
		
		Параметры	= Новый Структура;
		Параметры.Вставить("id", ИДСтатья);
		Если НЕ ПустаяСтрока(ИДРаздел) Тогда
			Параметры.Вставить("section", ИДРаздел);
		КонецЕсли;
		
		АдресСсылки = БазаЗнанийAPIКлиентСервер.КонструкторСсылки_page("article", Параметры);
	ИначеЕсли СтруктураСсылки.Тип = 1 Тогда
		АдресСсылки = СтруктураСсылки.Адрес;
	ИначеЕсли СтруктураСсылки.Тип = 2 Тогда
		АдресСсылки = СтруктураСсылки.Адрес;
	ИначеЕсли СтруктураСсылки.Тип = 3 Тогда
		ИДСтатья = СтруктураСсылки.Адрес;
		
		Параметры	= Новый Структура;
		Параметры.Вставить("id", ИДСтатья);
		
		АдресСсылки = БазаЗнанийAPIКлиентСервер.КонструкторСсылки_page("category", Параметры);
	ИначеЕсли СтруктураСсылки.Тип = 4 Тогда
		Параметры	= Новый Структура;
		Параметры.Вставить("text", СтруктураСсылки.Адрес);
		
		АдресСсылки = БазаЗнанийAPIКлиентСервер.КонструкторСсылки_search("text", Параметры);
	ИначеЕсли СтруктураСсылки.Тип = 5 Тогда
		СтрокаПоиска	= БазаЗнанийВызовСервера.ЗакодироватьСтроку(СтруктураСсылки.Адрес);
		АдресСсылки		= "http://www.google.ru/search?sourceid=chrome&ie=UTF-8&q=" + СтрокаПоиска;
	Иначе 
		АдресСсылки = "";
	КонецЕсли;
	
	Возврат АдресСсылки;
	
КонецФункции

Функция РазобратьСтрокуСортировки(знач СтрокаСортировки) Экспорт
	
	МассивСортировки = Новый Массив;
	
	МассивПолей = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаСортировки, ",");
	Для Каждого СтрокаПоля Из МассивПолей Цикл
		СтрокаПоля	= СокрЛП(СтрокаПоля);
		Разделитель	= Найти(СтрокаПоля, " ");
		
		Если Разделитель = 0 Тогда
			Поле		= СтрокаПоля;
			Направление	= "ВОЗР";
		Иначе 
			Поле		= СокрЛП(Лев(СтрокаПоля, Разделитель - 1));
			Направление	= ВРег(СокрЛП(Сред(СтрокаПоля, Разделитель + 1)));
		КонецЕсли;
		
		НаправлениеСорт	= ?(Направление = "УБЫВ", НаправлениеСортировки.Убыв, НаправлениеСортировки.Возр);
		СтруктураПоля	= Новый Структура("Поле, Направление", Поле, НаправлениеСорт);
		МассивСортировки.Добавить(СтруктураПоля);
	КонецЦикла;
	
	Возврат МассивСортировки;
	
КонецФункции

Функция ДобавитьГруппуОтбора(Коллекция, знач ТипГруппы = Неопределено, знач Представление = "") Экспорт
	
	Если НЕ ЗначениеЗаполнено(ТипГруппы) Тогда
		ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	КонецЕсли;
	
	СтруктураГруппа = Новый Структура("ЭтоГруппа, ТипГруппы, Представление, Использование, Элементы",
		Истина,
		ТипГруппы,
		Представление,
		Истина,
		Новый Массив);
	
	Коллекция.Добавить(СтруктураГруппа);
	
	Возврат СтруктураГруппа;
	
КонецФункции

Функция ДобавитьЭлементОтбора(Коллекция, знач Поле, знач Значение, знач ПарамВидСравнения = Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ПарамВидСравнения) Тогда
		ПарамВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	КонецЕсли;
	
	ЭлементОтбора = Новый Структура;
	ЭлементОтбора.Вставить("Поле"			, Поле);
	ЭлементОтбора.Вставить("Значение"		, Значение);
	ЭлементОтбора.Вставить("ВидСравнения"	, ПарамВидСравнения);
	
	Коллекция.Добавить(ЭлементОтбора);
	
	Возврат ЭлементОтбора;
	
КонецФункции
