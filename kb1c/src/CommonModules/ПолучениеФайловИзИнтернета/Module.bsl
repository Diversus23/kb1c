////////////////////////////////////////////////////////////////////////////////
// Подсистема "Получение файлов из Интернета"
// 
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Получить файл из Интернета по протоколу http(s), либо ftp и сохранить его во временный файл.
//
// Параметры:
//   URL                  - Строка - url файла в формате
//                                   [Протокол://]<Сервер>/<Путь к файлу на сервере>
//   ПараметрыПолучения   - Структура со свойствами
//     ПутьДляСохранения    - Строка - путь на сервере (включая имя файла), для сохранения скачанного файла
//     Пользователь         - Строка - пользователь от имени которого установлено соединение
//     Пароль               - Строка - пароль пользователя от которого установлено соединение
//     Порт                 - Число  - порт сервера с которым установлено соединение
//     Таймаут              - Число  - таймаут на получение файла, в секундах
//     ЗащищенноеСоединение - Булево - для случая http загрузки флаг указывает,
//                                     что соединение должно производиться через https
//     ПассивноеСоединение  - Булево - для случая ftp загрузки флаг указывает,
//                                     что соединение должно пассивным (или активным)
//
// Возвращаемое значение:
//   Структура, со свойствами
//     Статус - Булево - ключ присутствует в структуре всегда, значения
//                       Истина - вызов функции успешно завершен
//                       Ложь   - вызов функции завершен неудачно
//     Путь   - Строка - путь к файлу на сервере, ключ используется только
//                       если статус Истина
//     СообщениеОбОшибке - Строка - сообщение об ошибке, если статус Ложь
//
Функция СкачатьФайлНаСервере(знач URL, ПараметрыПолучения = Неопределено) Экспорт
	
	// Объявление переменных перед первым использованием в качестве
	// параметра метода Свойство, при анализе параметров получения файлов
	// из ПараметрыПолучения. Содержат значения переданных параметров получения файла
	Перем ПутьДляСохранения, Пользователь, Пароль, Порт, Таймаут,
	      ЗащищенноеСоединение, ПассивноеСоединение;
	
	// Инициализируем параметры скачивания файла
	Если ПараметрыПолучения = Неопределено Тогда
		ПараметрыПолучения = Новый Структура;
	КонецЕсли;
	
	Если Не ПараметрыПолучения.Свойство("ПутьДляСохранения", ПутьДляСохранения) Тогда
		ПутьДляСохранения = Неопределено;
	КонецЕсли;
	
	Если Не ПараметрыПолучения.Свойство("Пользователь", Пользователь) Тогда
		Пользователь = Неопределено;
	КонецЕсли;
	
	Если Не ПараметрыПолучения.Свойство("Пароль", Пароль) Тогда
		Пароль = Неопределено;
	КонецЕсли;
	
	Если Не ПараметрыПолучения.Свойство("Порт", Порт) Тогда
		Порт = Неопределено;
	КонецЕсли;
	
	Если Не ПараметрыПолучения.Свойство("Таймаут", Таймаут) Тогда
		Таймаут = Неопределено;
	КонецЕсли;
	
	Если Не ПараметрыПолучения.Свойство("ЗащищенноеСоединение", ЗащищенноеСоединение) Тогда
		ЗащищенноеСоединение = Неопределено;
	КонецЕсли;
	
	Если Не ПараметрыПолучения.Свойство("ПассивноеСоединение", ПассивноеСоединение) Тогда
		ПассивноеСоединение = Неопределено;
	КонецЕсли;
	
	НастройкаСохранения = Новый Соответствие;
	НастройкаСохранения.Вставить("МестоХранения", "Сервер");
	НастройкаСохранения.Вставить("Путь", ПутьДляСохранения);
	
	Результат = ПолучениеФайловИзИнтернетаКлиентСервер.ПодготовитьПолучениеФайла(
		URL,
		Пользователь,
		Пароль,
		Порт,
		Таймаут,
		ЗащищенноеСоединение,
		ПассивноеСоединение,
		НастройкаСохранения);
	
	Возврат Результат;
	
КонецФункции

// Получить файл из Интернета по протоколу http(s), либо ftp и сохранить его во временное хранилище.
//
// Параметры:
//   URL                  - Строка - url файла в формате:
//                                   [Протокол://]<Сервер>/<Путь к файлу на сервере>
//   ПараметрыПолучения   - Структура со свойствами
//     Пользователь         - Строка - пользователь от имени которого установлено соединение
//     Пароль               - Строка - пароль пользователя от которого установлено соединение
//     Порт                 - Число  - порт сервера с которым установлено соединение
//     Таймаут              - Число  - таймаут на получение файла, в секундах
//     ЗащищенноеСоединение - Булево - для случая http загрузки флаг указывает,
//                                     что соединение должно производиться через https
//     ПассивноеСоединение  - Булево - для случая ftp загрузки флаг указывает,
//                                     что соединение должно пассивным (или активным)
//
// Возвращаемое значение:
//   Структура со свойствами
//     Статус  - Булево - ключ присутствует в структуре всегда, значения
//                        Истина - вызов функции успешно завершен
//                        Ложь   - вызов функции завершен неудачно
//     Путь    - Строка - адрес временного хранилища с двоичными данными файла,
//                        ключ используется только если статус Истина
//     СообщениеОбОшибке - Строка - сообщение об ошибке, если статус Ложь
//
Функция СкачатьФайлВоВременноеХранилище(знач URL, ПараметрыПолучения = Неопределено) Экспорт
	
	// Объявление переменных перед первым использованием в качестве
	// параметра метода Свойство, при анализе параметров получения файлов
	// из ПараметрыПолучения. Содержат значения переданных параметров получения файла
	Перем ПутьДляСохранения, Пользователь, Пароль, Порт, Таймаут,
	      ЗащищенноеСоединение, ПассивноеСоединение;
		  
	// Получаем параметры получения файла
	Если ПараметрыПолучения = Неопределено Тогда
		ПараметрыПолучения = Новый Структура;
	КонецЕсли;
	
	Если Не ПараметрыПолучения.Свойство("ПутьДляСохранения", ПутьДляСохранения) Тогда
		ПутьДляСохранения = Неопределено;
	КонецЕсли;
	
	Если Не ПараметрыПолучения.Свойство("Пользователь", Пользователь) Тогда
		Пользователь = Неопределено;
	КонецЕсли;
	
	Если Не ПараметрыПолучения.Свойство("Пароль", Пароль) Тогда
		Пароль = Неопределено;
	КонецЕсли;
	
	Если Не ПараметрыПолучения.Свойство("Порт", Порт) Тогда
		Порт = Неопределено;
	КонецЕсли;
	
	Если Не ПараметрыПолучения.Свойство("Таймаут", Таймаут) Тогда
		Таймаут = Неопределено;
	КонецЕсли;
	
	Если Не ПараметрыПолучения.Свойство("ЗащищенноеСоединение", ЗащищенноеСоединение) Тогда
		ЗащищенноеСоединение = Неопределено;
	КонецЕсли;
	
	Если Не ПараметрыПолучения.Свойство("ПассивноеСоединение", ПассивноеСоединение) Тогда
		ПассивноеСоединение = Неопределено;
	КонецЕсли;
	
	НастройкаСохранения = Новый Соответствие;
	НастройкаСохранения.Вставить("МестоХранения", "ВременноеХранилище");
	
	Результат = ПолучениеФайловИзИнтернетаКлиентСервер.ПодготовитьПолучениеФайла(
		URL,
		Пользователь,
		Пароль,
		Порт,
		Таймаут,
		ЗащищенноеСоединение,
		ПассивноеСоединение,
		НастройкаСохранения);
	
	Возврат Результат;
	
КонецФункции

// Возвращает настройку прокси сервера для доступа в Интернет со стороны
// клиента для текущего пользователя.
//
Функция НастройкиПроксиНаКлиенте() Экспорт
	
	Возврат ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкаПроксиСервера");
	
КонецФункции

// Возвращает параметры настройки прокси-сервера на стороне сервера 1С:Предприятие
//
Функция НастройкиПроксиНаСервере() Экспорт
	
	Если ОбщегоНазначенияПовтИсп.РежимРаботыПрограммы().Файловый Тогда
		Возврат НастройкиПроксиНаКлиенте();
	Иначе
		УстановитьПривилегированныйРежим(Истина);
		НастройкиПроксиНаСервере = Константы.НастройкаПроксиСервера.Получить().Получить();
		Возврат ?(ТипЗнч(НастройкиПроксиНаСервере) = Тип("Соответствие"),
				  НастройкиПроксиНаСервере,
				  Неопределено);
	КонецЕсли;
	
КонецФункции

// Устарела. Следует использовать НастройкиПроксиНаСервере.
//
Функция ПолучитьНастройкиПроксиНаСервере1СПредприятие() Экспорт
	
	Возврат НастройкиПроксиНаСервере();
	
КонецФункции	

// Устарела. Следует использовать НастройкиПроксиНаКлиенте.
//
Функция ПолучитьНастройкуПроксиСервера() Экспорт
	
	Возврат НастройкиПроксиНаКлиенте();
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС

////////////////////////////////////////////////////////////////////////////////
// Обработчики условных вызовов

// Получает настройки прокси на сервере.
//
Процедура ПриОпределенииНастроекПрокси(Прокси) Экспорт
	
	НастройкаПроксиСервера = НастройкиПроксиНаСервере();
	Если НастройкаПроксиСервера <> Неопределено Тогда
		Прокси = Новый ИнтернетПрокси();
		Прокси.Установить("ftp", НастройкаПроксиСервера["Сервер"], НастройкаПроксиСервера["Порт"]);
		ЗаполнитьЗначенияСвойств(Прокси, НастройкаПроксиСервера);
	КонецЕсли;
	
КонецПроцедуры

