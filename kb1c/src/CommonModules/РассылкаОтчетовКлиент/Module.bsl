////////////////////////////////////////////////////////////////////////////////
// Подсистема "Рассылка отчетов" (клиент)
// 
// Выполняется на клиенте.
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Формирует список получателей рассылки, предлагает пользователю выбрать
//   конкретного получателя или всех получателей рассылки и возвращает
//   результат выбора пользователя.
//
Функция ВыбратьПолучателя(Объект, МножественныйВыбор = Истина, ВозвращатьСоответствие = Истина, ЗаголовокДляОшибок = "") Экспорт
	
	Если Объект.Личная = Истина Тогда
		НаборПараметров = "Ссылка, ВидПочтовогоАдресаПолучателей, Личная, Автор";
	Иначе	
		НаборПараметров = "Ссылка, ВидПочтовогоАдресаПолучателей, Личная, ТипПолучателейРассылки, Получатели";
	КонецЕсли;
	
	ПараметрыПолучателей = Новый Структура(НаборПараметров);
	ЗаполнитьЗначенияСвойств(ПараметрыПолучателей, Объект);
	РезультатВыполнения = РассылкаОтчетовВызовСервера.СформироватьСписокПолучателейРассылки(ПараметрыПолучателей);
	
	Если РезультатВыполнения.БылиКритичныеОшибки Тогда
		СтандартныеПодсистемыКлиент.ПоказатьРезультатВыполнения(Неопределено, РезультатВыполнения);
		Возврат Неопределено;
	КонецЕсли;
	
	Получатели = РезультатВыполнения.Получатели;
	
	ВозможныеПолучатели = Новый СписокЗначений;
	Если МножественныйВыбор Тогда
		ВозможныеПолучатели.Добавить(Неопределено, НСтр("ru = 'Всем получателям'"));
	КонецЕсли;
	Для Каждого КлючИЗначение Из Получатели Цикл
		ВозможныеПолучатели.Добавить(КлючИЗначение.Ключ, Строка(КлючИЗначение.Ключ) +" <"+ КлючИЗначение.Значение +">");
	КонецЦикла;
	
	Если Объект.Личная И ВозможныеПолучатели.Количество() = 1 Тогда
		ВыбранноеЗначение = ВозможныеПолучатели[0];
	Иначе
		ВыбранноеЗначение = ВозможныеПолучатели.ВыбратьЭлемент(НСтр("ru = 'Выбор получателя'"));
		Если ВыбранноеЗначение = Неопределено Тогда
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если ВозвращатьСоответствие Тогда
		Если ВыбранноеЗначение.Значение = Неопределено Тогда
			Результат = Получатели;
		Иначе
			Результат = Новый Соответствие;
			Результат.Вставить(ВыбранноеЗначение.Значение, Получатели[ВыбранноеЗначение.Значение]);
		КонецЕсли;
	Иначе
		Результат = Новый Структура("Получатель, ПочтовыйАдрес", ВыбранноеЗначение.Значение, Получатели[ВыбранноеЗначение.Значение]);
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Выводит пользователю результат выполнения какой-либо операции, при необходимости
//   оповещает об изменении типа или ссылки.
//
Процедура ПоказатьРезультат(Результат) Экспорт
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Оповестить  = ?(Результат.Свойство("Оповестить"),  Результат.Оповестить,  Истина);
	Заголовок   = ?(Результат.Свойство("Заголовок"),   Результат.Заголовок,   "");
	Текст       = ?(Результат.Свойство("Текст"),       Результат.Текст,       "");
	Картинка    = ?(Результат.Свойство("Картинка"),    Результат.Картинка,    БиблиотекаКартинок.ВыполнитьЗадачу);
	ТекстОшибок = ?(Результат.Свойство("ТекстОшибок"), Результат.ТекстОшибок, "");
	
	Если Оповестить = Истина Тогда
		ПоказатьОповещениеПользователя(Заголовок, , Текст, Картинка);
	Иначе
		Если ЗначениеЗаполнено(ТекстОшибок) Тогда
			Кнопки = Новый СписокЗначений;
			Кнопки.Добавить(1, НСтр("ru = 'Показать ошибки'"));
			Кнопки.Добавить(КодВозвратаДиалога.Отмена);
			
			Ответ = Вопрос(Текст, Кнопки, , 1, Заголовок);
			
			Если Ответ = 1 Тогда
				ТекстовыйДокумент = Новый ТекстовыйДокумент;
				ТекстовыйДокумент.УстановитьТекст(ТекстОшибок);
				Если ЗначениеЗаполнено(Заголовок) Тогда
					ТекстовыйДокумент.Показать(Заголовок);
				Иначе
					ТекстовыйДокумент.Показать();
				КонецЕсли;
			КонецЕсли;
		Иначе
			Предупреждение(Текст);
		КонецЕсли;
	КонецЕсли;
	
	Если Результат.Свойство("ТипДляОбновления") Тогда
		ОповеститьОбИзменении(Результат.ТипДляОбновления);
	КонецЕсли;
	
КонецПроцедуры

// Контролирует состояние фонового задания и выводит пользователю его результат
//
Процедура ПроверитьВыполнениеФоновогоЗадания(ЭтаФорма) Экспорт
	
	ИдентификаторЗадания    = ЭтаФорма.ПараметрыФоновогоЗадания[0].Значение;
	АдресХранилища          = ЭтаФорма.ПараметрыФоновогоЗадания[1].Значение;
	ПараметрыОбработчика    = ЭтаФорма.ПараметрыФоновогоЗадания[2].Значение;
	ФормаДлительнойОперации = ЭтаФорма.ПараметрыФоновогоЗадания[3].Значение;
	
	Результат = РассылкаОтчетовВызовСервера.ПроверитьВыполнениеФоновогоЗадания(ИдентификаторЗадания, АдресХранилища);
	Если Результат.Статус = "ВыполненоУспешно" Тогда
		ДлительныеОперацииКлиент.ЗакрытьФормуДлительнойОперации(ФормаДлительнойОперации);
		ПоказатьРезультат(Результат.Детали);
		ЭтаФорма.ПараметрыФоновогоЗадания.Очистить();
	ИначеЕсли Результат.Статус = "Исключение" Тогда
		Предупреждение(
			НСтр("ru = 'Рассылки не выполнены из-за ошибки,
			|Подробности см. в журнале регистрации.'"));
	ИначеЕсли Результат.Статус = "Выполняется" Тогда
		ЭтаФорма.ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеФоновогоЗадания", ПараметрыОбработчика.ТекущийИнтервал, Истина);
		ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ЭтаФорма.ПараметрыФоновогоЗадания[2].Значение);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик команды формы отчета.
//
// Параметры:
//   ЭтаФорма  (УправляемаяФорма) Форма отчета.
//   Команда   (КомандаФормы)     Команда, которая была вызвана.
//   Результат (Булево)           Истина, если вызов команды обработан.
//
Процедура ФормаОтчетаОбработчикКоманды(ЭтаФорма, Команда, Результат) Экспорт
	
	Если Результат = Истина Тогда
		
		// Действие не требуется
		
	ИначеЕсли Команда.Имя = "РассылкаОтчетовСоздатьНовую" Тогда
		
		ФормаОтчетаОткрытьРассылку(ЭтаФорма);
		
		Результат = Истина;
		
	ИначеЕсли Команда.Имя = "РассылкаОтчетовПрисоединитьКСуществующей" Тогда
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("РежимВыбора", Истина);
		ПараметрыФормы.Вставить("ВыборГруппИЭлементов", ИспользованиеГруппИЭлементов.Элементы);
		ПараметрыФормы.Вставить("МножественныйВыбор", Ложь);
		
		ОткрытьФорму("Справочник.РассылкиОтчетов.ФормаВыбора", ПараметрыФормы, ЭтаФорма);
		
		Результат = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик выбора формы отчета.
//
// Параметры:
//   ЭтаФорма          (УправляемаяФорма) Форма отчета.
//   ВыбранноеЗначение (*)                Результат выбора в подчиненной форме.
//   ИсточникВыбора    (УправляемаяФорма) Форма, где осуществлен выбор. 
//   Результат         (Булево)           Истина, если результат выбора обработан.
//
Процедура ФормаОтчетаОбработкаВыбора(ЭтаФорма, ВыбранноеЗначение, ИсточникВыбора, Результат) Экспорт
	
	Если Результат = Истина Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.РассылкиОтчетов") Тогда
		
		ФормаОтчетаОткрытьРассылку(ЭтаФорма, ВыбранноеЗначение);
		
		Результат = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

// Открывает рассылку отчетов из формы отчета.
//
Процедура ФормаОтчетаОткрытьРассылку(ЭтаФорма, Ссылка = Неопределено)
	
	СтрокаОтчетыПараметры = Новый Структура;
	СтрокаОтчетыПараметры.Вставить("ОтчетПолноеИмя", ЭтаФорма.КлючОбъекта);
	СтрокаОтчетыПараметры.Вставить("КлючВарианта",   ЭтаФорма.КлючТекущегоВарианта);
	СтрокаОтчетыПараметры.Вставить("ВариантСсылка",  ЭтаФорма.ВариантСсылка);
	СтрокаОтчетыПараметры.Вставить("Настройки",      ЭтаФорма.Отчет.КомпоновщикНастроек.ПользовательскиеНастройки);
	
	ПрисоединяемыеОтчеты = Новый Массив;
	ПрисоединяемыеОтчеты.Добавить(СтрокаОтчетыПараметры);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПрисоединяемыеОтчеты", ПрисоединяемыеОтчеты);
	Если Ссылка <> Неопределено Тогда
		ПараметрыФормы.Вставить("Ключ", Ссылка);
	КонецЕсли;
	
	ОткрытьФорму("Справочник.РассылкиОтчетов.ФормаОбъекта", ПараметрыФормы, , Строка(ЭтаФорма.УникальныйИдентификатор) + ".ОткрытьРассылкуОтчетов");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Условные вызовы в друге подсистемы

// Открывает форму подбора дополнительных отчетов.
// 
Процедура РассылкаОтчетовПодборДопОтчета(ЭлементФормы) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки") Тогда
		МодульДополнительныеОтчетыИОбработкиКлиент = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ДополнительныеОтчетыИОбработкиКлиент");
		МодульДополнительныеОтчетыИОбработкиКлиент.РассылкаОтчетовПодборДопОтчета(ЭлементФормы);
	КонецЕсли;
	
КонецПроцедуры

// Открывает форму папки со списком файлов.
// 
Процедура РассылкаОтчетовПросмотрПапки(СтандартнаяОбработка, Папка) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСФайлами") Тогда
		МодульРаботаСФайламиСлужебныйКлиент = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("РаботаСФайламиСлужебныйКлиент");
		МодульРаботаСФайламиСлужебныйКлиент.РассылкаОтчетовПросмотрПапки(СтандартнаяОбработка, Папка);
	КонецЕсли;
	
КонецПроцедуры

