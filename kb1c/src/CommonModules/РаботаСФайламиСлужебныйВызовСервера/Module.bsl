////////////////////////////////////////////////////////////////////////////////
// Подсистема "Работа с файлами".
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Создает новый файл по аналогии с указанным и возвращает ссылку на него
// Параметры
//  ИсходныйФайл  - СправочникСсылка.Файлы - существующий файл
//  ВладелецНовогоФайла - ЛюбаяСсылка - владелец файла
//
// Возвращаемое значение:
//   СправочникСсылка.Файлы - новый файл
//
Функция СкопироватьФайл(ИсходныйФайл, ВладелецНовогоФайла) Экспорт
	
	Если ИсходныйФайл = Неопределено Или ИсходныйФайл.Пустая() Или ИсходныйФайл.ТекущаяВерсия.Пустая()Тогда
		Возврат Неопределено;
	КонецЕсли;	
	
	НовыйФайл = СоздатьФайл(
		ВладелецНовогоФайла,
		ИсходныйФайл.Описание,
		ИсходныйФайл.ПолноеНаименование,
		ИсходныйФайл.ХранитьВерсии,
		"");
		
	ХранилищеФайла = Неопределено;
	Если ИсходныйФайл.ТекущаяВерсия.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда 
		ХранилищеФайла = ПолучитьХранилищеФайлаИзИнформационнойБазы(ИсходныйФайл.ТекущаяВерсия);
	КонецЕсли;
		
	Версия = СоздатьВерсию(
		ТекущаяДатаСеанса(),
		ТекущаяУниверсальнаяДата(),
		НовыйФайл,
		НовыйФайл.ПолноеНаименование,
		ИсходныйФайл.ТекущаяВерсия.Размер,
		ИсходныйФайл.ТекущаяВерсия.Расширение,
		ХранилищеФайла,
		ИсходныйФайл.ТекущаяВерсия.ТекстХранилище,
		Истина,
		ИсходныйФайл.ТекущаяВерсия);
	
	ОбновитьВерсиюВФайле(НовыйФайл, Версия, ИсходныйФайл.ТекущаяВерсия.ТекстХранилище);
	
	ВерсияОбъект = НовыйФайл.ТекущаяВерсия.ПолучитьОбъект();
	
	ЧислоПодписей = 0;
	Для Каждого Строка Из ИсходныйФайл.ТекущаяВерсия.ЭлектронныеЦифровыеПодписи Цикл
		НоваяСтрока = ВерсияОбъект.ЭлектронныеЦифровыеПодписи.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		ЧислоПодписей = ЧислоПодписей + 1;
	КонецЦикла;
	
	Если ЧислоПодписей <>  0 Тогда
		ФайлОбъект = НовыйФайл.ПолучитьОбъект();
		ФайлОбъект.ПодписанЭЦП = Истина;
		ФайлОбъект.Записать();
		
		ВерсияОбъект.ПодписанЭЦП = Истина;
		ВерсияОбъект.Записать();
	КонецЕсли;
	
	Если ИсходныйФайл.Зашифрован Тогда
		
		ФайлОбъект = НовыйФайл.ПолучитьОбъект();
		ФайлОбъект.Зашифрован = Истина;
		
		Для Каждого Строка Из ИсходныйФайл.СертификатыШифрования Цикл
			НоваяСтрока = ФайлОбъект.СертификатыШифрования.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		КонецЦикла;
		
		ФайлОбъект.ДополнительныеСвойства.Вставить("ЗаписьПодписанногоОбъекта", Истина); // чтобы прошла запись ранее подписанного объекта
		ФайлОбъект.Записать();
		
		ВерсияОбъект = НовыйФайл.ТекущаяВерсия.ПолучитьОбъект();
		ВерсияОбъект.Зашифрован = Истина;
		ВерсияОбъект.ДополнительныеСвойства.Вставить("ЗаписьПодписанногоОбъекта", Истина); // чтобы прошла запись ранее подписанного объекта
		ВерсияОбъект.Записать();
		
	КонецЕсли;
	
	РаботаСФайламиВызовСервераПереопределяемый.ЗаполнитьРеквизитыФайлаИзИсходногоФайла(НовыйФайл, ИсходныйФайл);
	
	РаботаСФайламиПереопределяемый.ЗаполнитьРеквизитыФайлаИзИсходногоФайла(НовыйФайл, ИсходныйФайл);
	
	Возврат НовыйФайл;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Освобождает файл
// Параметры:
// ДанныеФайла - структура, содержащая сведения о Файле
//  см. функцию ПолучитьДанныеФайла()
//
// Параметры
//  ДанныеФайла  - структура с данными файла
//  УникальныйИдентификатор - уникальный идентификатор формы
//
Процедура ОсвободитьФайл(ДанныеФайла, УникальныйИдентификатор = Неопределено) Экспорт
	
	ФайлОбъект = ДанныеФайла.Ссылка.ПолучитьОбъект();
	
	ЗаблокироватьДанныеДляРедактирования(ФайлОбъект.Ссылка, , УникальныйИдентификатор);
	ФайлОбъект.Редактирует = Справочники.Пользователи.ПустаяСсылка();
	ФайлОбъект.ДатаЗаема = Дата("00010101000000");
	ФайлОбъект.Записать();
	РазблокироватьДанныеДляРедактирования(ФайлОбъект.Ссылка, УникальныйИдентификатор);
	
	РаботаСФайламиВызовСервераПереопределяемый.ПриОсвобожденииФайла(ДанныеФайла, УникальныйИдентификатор);
	
	РаботаСФайламиПереопределяемый.ПриОсвобожденииФайла(ДанныеФайла, УникальныйИдентификатор);
	
КонецПроцедуры

// Занимает файл на редактирование (checkout)
//
// Параметры
//  ДанныеФайла  - структура с данными файла
//  СтрокаОшибки - строка, в которой возвращается причина ошибки в случае неуспеха (скажем "Файл занят другим пользователем")
//  УникальныйИдентификатор - уникальный идентификатор формы
//
// Возвращаемое значение:
//   Булево  - успешно ли выполнена операция
//
Функция ЗанятьФайл(ДанныеФайла, СтрокаОшибки = "", УникальныйИдентификатор = Неопределено) Экспорт
	
	ВозможноЗанять = Истина;
	
	ВозможноЗанять = РаботаСФайламиПереопределяемый.ВозможноЗанятьФайл(ДанныеФайла, СтрокаОшибки);
	
	Если Не ВозможноЗанять Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ФайлОбъект = ДанныеФайла.Ссылка.ПолучитьОбъект();
	
	ЗаблокироватьДанныеДляРедактирования(ФайлОбъект.Ссылка, , УникальныйИдентификатор);
	ФайлОбъект.Редактирует = Пользователи.ТекущийПользователь();
	ФайлОбъект.ДатаЗаема = ТекущаяДатаСеанса();
	ФайлОбъект.Записать();
	РазблокироватьДанныеДляРедактирования(ФайлОбъект.Ссылка, УникальныйИдентификатор);

	НавигационнаяСсылкаТекущейВерсии = ДанныеФайла.НавигационнаяСсылкаТекущейВерсии;
	РабочийКаталогВладельца = ДанныеФайла.РабочийКаталогВладельца;
	
	ДанныеФайла = ПолучитьДанныеФайла(ДанныеФайла.Ссылка, ДанныеФайла.Версия);
	
	ДанныеФайла.НавигационнаяСсылкаТекущейВерсии = НавигационнаяСсылкаТекущейВерсии;
	ДанныеФайла.РабочийКаталогВладельца = РабочийКаталогВладельца;
	
	РаботаСФайламиВызовСервераПереопределяемый.ПриЗахватеФайла(ДанныеФайла, УникальныйИдентификатор);
	
	РаботаСФайламиПереопределяемый.ПриЗахватеФайла(ДанныеФайла, УникальныйИдентификатор);
	
	Возврат Истина;
	
КонецФункции

// Переносит Файл в другую папку
//
// Параметры
//  ДанныеФайла  - структура с данными файла
//  Папка - СправочникСсылка.ПапкиФайлов - ссылка на папку, куда нужно переместить файл
//
Процедура ПеренестиФайл(ДанныеФайла, Папка) Экспорт 
	
	ФайлОбъект = ДанныеФайла.Ссылка.ПолучитьОбъект();
	ФайлОбъект.Заблокировать();
	ФайлОбъект.ВладелецФайла = Папка;
	ФайлОбъект.Записать();
	
КонецПроцедуры

// Переносит Файлы в другую папку
//
// Параметры
//  ОбъектыСсылка - Массив - массив ссылок на файлы
//  Папка - СправочникСсылка.ПапкиФайлов - ссылка на папку, куда нужно переместить файлы
//
Функция ПеренестиФайлы(ОбъектыСсылка, Папка) Экспорт 
	
	ДанныеФайлов = Новый Массив;
	
	Для Каждого ФайлСсылка Из ОбъектыСсылка Цикл
		ПеренестиФайл(ФайлСсылка, Папка);
		ДанныеФайла = ПолучитьДанныеФайла(ФайлСсылка);
		ДанныеФайлов.Добавить(ДанныеФайла);
	КонецЦикла;
	
	Возврат ДанныеФайлов;
	
КонецФункции

// Создает карточку Файла в БД
//
// Параметры
// Владелец - владелец файла - будет установлен в реквизит ВладелецФайла у созданного файла
// Комментарий  - Строка - комментарий к файлу
// ИмяБезРасширения  - Строка - имя файла без расширения
// ХранитьВерсии  - Булево - хранить версии
// АдресВременногоХранилищаТекста - Строка - содержит адрес во временном хранилище, где находятся двоичные данные с файлом текста или ХранилищеЗначения - непосредственно содержит  двоичные данные с файлом текста
// Пользователь - СправочникССылка.Пользователи - ссылка на пользователя - автора файла
// 
// Возвращаемое значение:
//   СправочникСсылка.Файлы - ссылка на созданный файл
//
Функция СоздатьФайл(Знач Владелец,
                    Знач Комментарий,
                    Знач ИмяБезРасширения,
                    Знач ХранитьВерсии,
                    Знач АдресВременногоХранилищаТекста,
                    Пользователь = Неопределено) Экспорт
	
	Файл = Справочники.Файлы.СоздатьЭлемент();
	Файл.ВладелецФайла = Владелец;
	Файл.Наименование = ИмяБезРасширения;
	Файл.ПолноеНаименование = ИмяБезРасширения;
	
	Если Пользователь = Неопределено Тогда
		Файл.Автор = Пользователи.ТекущийПользователь();
	Иначе
		Файл.Автор = Пользователь;
	КонецЕсли;
	
	Файл.ДатаСоздания = ТекущаяДатаСеанса();
	Файл.Описание = Комментарий;
	Файл.ИндексКартинки = ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьИндексПиктограммыФайла(Неопределено);
	Файл.ХранитьВерсии = ХранитьВерсии;
	
	Если ТипЗнч(АдресВременногоХранилищаТекста) = Тип("ХранилищеЗначения") Тогда
		// При создании Файла из шаблона хранилище значения копируется напрямую
		Файл.ТекстХранилище = АдресВременногоХранилищаТекста;
	ИначеЕсли Не ПустаяСтрока(АдресВременногоХранилищаТекста) Тогда
		Текст = ФайловыеФункцииСлужебный.ПолучитьСтрокуИзВременногоХранилища(АдресВременногоХранилищаТекста);
		Файл.ТекстХранилище = Новый ХранилищеЗначения(Текст);
	КонецЕсли;
	
	Файл.Записать();
	Возврат Файл.Ссылка;
	
КонецФункции

// Создает версию сохраняемого файла для сохранения в карточке Файла
// и подставляет ссылку на версию в карточку Файла
//
// Параметры
// ВремяИзменения  - Дата - дата и время изменения файла
// ВремяИзмененияУниверсальное  - Дата - UTC дата и время изменения файла
// ДокСсылка - СправочникСсылка.Файлы - Файл, в котором создается версия
// ИмяБезРасширения  - Строка - имя файла без расширения
// Размер - размер файла в байтах
// Расширение - Строка - расширение файла
// АдресВременногоХранилищаФайла  - Строка - содержит адрес во временном хранилище, где находятся двоичные данные с файлом или ХранилищеЗначения - непосредственно содержит  двоичные данные с файлом
// АдресВременногоХранилищаТекста - Строка - содержит адрес во временном хранилище, где находятся двоичные данные с файлом текста или ХранилищеЗначения - непосредственно содержит  двоичные данные с файлом текста
// ЭтоВебКлиент - Булево - Истина, если вызов идет из веб клиента
// ХранитьВерсии  - Булево - хранить версии
// Пользователь - СправочникССылка.Пользователи - ссылка на пользователя - автора файла
//
Процедура СоздатьВерсиюИОбновитьВерсиюВФайле(ВремяИзменения,
                                             ВремяИзмененияУниверсальное,
                                             ДокСсылка,
                                             ИмяБезРасширения,
                                             Размер,
                                             Расширение,
                                             АдресВременногоХранилищаФайла,
                                             АдресВременногоХранилищаТекста,
                                             ЭтоВебКлиент = Ложь,
                                             Пользователь = Неопределено) Экспорт
	
	ВерсияСсылка = СоздатьВерсию(
		ВремяИзменения,
		ВремяИзмененияУниверсальное,
		ДокСсылка,
		ИмяБезРасширения,
		Размер,
		Расширение,
		АдресВременногоХранилищаФайла,
		АдресВременногоХранилищаТекста,
		ЭтоВебКлиент,
		Неопределено, // СсылкаНаВерсиюИсточник
		Неопределено, // НоваяВерсияДатаСоздания
		Пользователь,
		Неопределено, // НоваяВерсияКомментарий
		Неопределено); // НоваяВерсияНомерВерсии
	
	ОбновитьВерсиюВФайле(ДокСсылка, ВерсияСсылка, АдресВременногоХранилищаТекста);
	
КонецПроцедуры

// Находит максимальный номер версии для данного объекта Файл. Если нет версий - то 0
// Параметры
//  ФайлСсылка  - СправочникСсылка.Файлы - ссылка на файл
//
// Возвращаемое значение:
//   Число  - максимальный номер версии
//
Функция НайтиМаксимальныйНомерВерсии(ФайлСсылка)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(МАКСИМУМ(Версии.НомерВерсии), 0) КАК МаксимальныйНомер
	|ИЗ
	|	Справочник.ВерсииФайлов КАК Версии
	|ГДЕ
	|	Версии.Владелец = &Файл";
	
	Запрос.Параметры.Вставить("Файл", ФайлСсылка);
		
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		Если Выборка.МаксимальныйНомер = Null Тогда
			Возврат 0;
		КонецЕсли;
		
		Возврат Число(Выборка.МаксимальныйНомер);
	КонецЕсли;
	
	Возврат 0;
КонецФункции

// Создает версию сохраняемого файла для сохранения в карточке Файла
//
// Параметры
// ВремяИзменения  - Дата - дата и время изменения файла
// ВремяИзмененияУниверсальное  - Дата - UTC дата и время изменения файла
// ДокСсылка - СправочникСсылка.Файлы - Файл, в котором создается версия
// ИмяБезРасширения  - Строка - имя файла без расширения
// Размер - размер файла в байтах
// Расширение - Строка - расширение файла
// АдресВременногоХранилищаФайла  - Строка - содержит адрес во временном хранилище, где находятся двоичные данные с файлом или ХранилищеЗначения - непосредственно содержит  двоичные данные с файлом
// АдресВременногоХранилищаТекста - Строка - содержит адрес во временном хранилище, где находятся двоичные данные с файлом текста или ХранилищеЗначения - непосредственно содержит  двоичные данные с файлом текста
// ЭтоВебКлиент - Булево - Истина, если вызов идет из веб клиента
// СсылкаНаВерсиюИсточник  - СправочникСсылка.ВерсииФайлов - копируемая версия
// НоваяВерсияДатаСоздания - Дата - дата создания версии
// НоваяВерсияАвтор - СправочникССылка.Пользователи - ссылка на пользователя - автора версии
// НоваяВерсияКомментарий  - Строка - Комментарий к версии
// НоваяВерсияНомерВерсии - Число - номер версии
// 
// Возвращаемое значение:
//   СправочникСсылка.ВерсииФайлов - созданная версия
//
Функция СоздатьВерсию(ВремяИзменения,
                      ВремяИзмененияУниверсальное,
                      ДокСсылка,
                      ИмяБезРасширения,
                      Размер,
                      Расширение,
                      АдресВременногоХранилищаФайла,
                      АдресВременногоХранилищаТекста,
                      ЭтоВебКлиент = Ложь,
                      СсылкаНаВерсиюИсточник = Неопределено,
                      НоваяВерсияДатаСоздания = Неопределено,
                      НоваяВерсияАвтор = Неопределено,
                      НоваяВерсияКомментарий = Неопределено,
                      НоваяВерсияНомерВерсии = Неопределено) Экспорт
	
	Перем СсылкаНаТом;
	ХранилищеФайла = Неопределено;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ ЗначениеЗаполнено(ВремяИзмененияУниверсальное)
	 ИЛИ ВремяИзмененияУниверсальное > ТекущаяУниверсальнаяДата() Тогда
		
		ВремяИзмененияУниверсальное = ТекущаяУниверсальнаяДата();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВремяИзменения)
	 ИЛИ УниверсальноеВремя(ВремяИзменения) > ВремяИзмененияУниверсальное Тогда
		
		ВремяИзменения = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ФайловыеФункцииСлужебныйКлиентСервер.ПроверитьРасширениеФайлаДляЗагрузки(Расширение);
	
	Версия = Справочники.ВерсииФайлов.СоздатьЭлемент();
	
	Если НоваяВерсияНомерВерсии = Неопределено Тогда
		Версия.НомерВерсии = НайтиМаксимальныйНомерВерсии(ДокСсылка) + 1;
	Иначе
		Версия.НомерВерсии = НоваяВерсияНомерВерсии;
	КонецЕсли;
	
	Версия.Владелец = ДокСсылка;
	Версия.ДатаМодификацииУниверсальная = ВремяИзмененияУниверсальное;
	Версия.ДатаМодификацииФайла = ВремяИзменения;
	
	Версия.Комментарий = НоваяВерсияКомментарий;
	
	Если НоваяВерсияАвтор = Неопределено Тогда
		Версия.Автор = Пользователи.ТекущийПользователь();
	Иначе
		Версия.Автор = НоваяВерсияАвтор;
	КонецЕсли;
	
	Если НоваяВерсияДатаСоздания = Неопределено Тогда
		Версия.ДатаСоздания = ТекущаяДатаСеанса();
	Иначе
		Версия.ДатаСоздания = НоваяВерсияДатаСоздания;
	КонецЕсли;
	
	Версия.ПолноеНаименование = ИмяБезРасширения;
	Версия.Размер = Размер;
	Версия.Расширение = ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(Расширение);
	
	ТипХраненияФайлов = ФайловыеФункцииСлужебный.ТипХраненияФайлов();
	Версия.ТипХраненияФайла = ТипХраненияФайлов;

	Если СсылкаНаВерсиюИсточник <> Неопределено Тогда // создание Файла из шаблона
		
		ТипХраненияФайловШаблона = СсылкаНаВерсиюИсточник.ТипХраненияФайла;
		
		Если ТипХраненияФайловШаблона = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе И ТипХраненияФайлов = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
			//  и шаблон, и новый Файл - в базе
			
			// При создании Файла из шаблона хранилище значения копируется напрямую
			ХранилищеФайла = АдресВременногоХранилищаФайла;
			
		ИначеЕсли ТипХраненияФайловШаблона = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске И ТипХраненияФайлов = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске Тогда
			//  и шаблон, и новый Файл - на диске - просто копируем файл
			
			Если НЕ СсылкаНаВерсиюИсточник.Том.Пустая() Тогда
				ПолныйПутьФайлаШаблона = ФайловыеФункцииСлужебный.ПолныйПутьТома(СсылкаНаВерсиюИсточник.Том) + СсылкаНаВерсиюИсточник.ПутьКФайлу; 
				
				ПутьКФайлу = "";
				
				// Добавление файла в один из томов (где есть свободное место).
				ФайловыеФункцииСлужебный.ДобавитьНаДиск(
					ПолныйПутьФайлаШаблона,
					ПутьКФайлу,
					СсылкаНаТом,
					ВремяИзмененияУниверсальное,
					Версия.НомерВерсии,
					ИмяБезРасширения,
					Расширение,
					Версия.Размер,
					СсылкаНаВерсиюИсточник.Зашифрован);
				
				Версия.ПутьКФайлу = ПутьКФайлу;
				Версия.Том = СсылкаНаТом.Ссылка;
			КонецЕсли;
			
		ИначеЕсли ТипХраненияФайловШаблона = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе И ТипХраненияФайлов = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске Тогда
			// шаблон в базе, новый Файл - на диске
			
			ДвоичныеДанные = АдресВременногоХранилищаФайла.Получить(); // в этом случае в АдресВременногоХранилищаФайла находится ХранилищеЗначения с файлом
			
			ПутьКФайлу = "";
			
			// Добавление в один из томов (где есть свободное место).
			ФайловыеФункцииСлужебный.ДобавитьНаДиск(
				ДвоичныеДанные,
				ПутьКФайлу,
				СсылкаНаТом,
				ВремяИзмененияУниверсальное,
				Версия.НомерВерсии,
				ИмяБезРасширения,
				Расширение,
				Версия.Размер,
				СсылкаНаВерсиюИсточник.Зашифрован);
			
			Версия.ПутьКФайлу = ПутьКФайлу;
			Версия.Том = СсылкаНаТом.Ссылка;
			
		ИначеЕсли ТипХраненияФайловШаблона = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске И ТипХраненияФайлов = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
			// шаблон на диске, новый Файл - в базе
			
			Если НЕ СсылкаНаВерсиюИсточник.Том.Пустая() Тогда
				ПолныйПутьФайлаШаблона = ФайловыеФункцииСлужебный.ПолныйПутьТома(СсылкаНаВерсиюИсточник.Том) + СсылкаНаВерсиюИсточник.ПутьКФайлу; 
				ДвоичныеДанные = Новый ДвоичныеДанные(ПолныйПутьФайлаШаблона);
				ХранилищеФайла = Новый ХранилищеЗначения(ДвоичныеДанные);
			КонецЕсли;
			
		КонецЕсли;
	Иначе // создание объекта Файл на основе выбранного файла с диска
		
		Если ТипХраненияФайлов = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
			
			ХранилищеФайла = Новый ХранилищеЗначения(
				ПолучитьИзВременногоХранилища(АдресВременногоХранилищаФайла));
				
			Если (ЭтоВебКлиент = Истина) И (Версия.Размер = 0) Тогда
				ДвоичныеДанныеФайла = ХранилищеФайла.Получить();
				Версия.Размер = ДвоичныеДанныеФайла.Размер();
				
				ФайловыеФункцииСлужебныйКлиентСервер.ПроверитьРазмерФайлаДляЗагрузки(Версия);
			КонецЕсли;
				
		Иначе // хранение на диске
			
			ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресВременногоХранилищаФайла);
			
			Если (ЭтоВебКлиент = Истина) И (Версия.Размер = 0) Тогда
				Версия.Размер = ДвоичныеДанные.Размер();
				ФайловыеФункцииСлужебныйКлиентСервер.ПроверитьРазмерФайлаДляЗагрузки(Версия);
			КонецЕсли;
			
			ПутьКФайлу = "";
			
			// добавить в один из томов (где есть свободное место)
			ФайловыеФункцииСлужебный.ДобавитьНаДиск(
				ДвоичныеДанные,
				ПутьКФайлу,
				СсылкаНаТом,
				ВремяИзмененияУниверсальное,
				Версия.НомерВерсии,
				ИмяБезРасширения,
				Расширение,
				Версия.Размер);
			
			Версия.ПутьКФайлу = ПутьКФайлу;
			Версия.Том = СсылкаНаТом.Ссылка;
			
		КонецЕсли; // хранение на диске
		
	КонецЕсли;
	
	Версия.СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.НеИзвлечен;

	Если ТипЗнч(АдресВременногоХранилищаТекста) = Тип("ХранилищеЗначения") Тогда
		// При создании Файла из шаблона хранилище значения копируется напрямую
		Версия.ТекстХранилище = АдресВременногоХранилищаТекста;
		Версия.СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.Извлечен;
	ИначеЕсли Не ПустаяСтрока(АдресВременногоХранилищаТекста) Тогда
		Текст = ФайловыеФункцииСлужебный.ПолучитьСтрокуИзВременногоХранилища(АдресВременногоХранилищаТекста);
		Версия.ТекстХранилище = Новый ХранилищеЗначения(Текст);
		Версия.СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.Извлечен;
	КонецЕсли;
		
	Если (ЭтоВебКлиент = Истина) И (Версия.Размер = 0) Тогда
		Если ТипХраненияФайлов = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
			ДвоичныеДанныеФайла = ХранилищеФайла.Получить();
			Версия.Размер = ДвоичныеДанныеФайла.Размер();
		КонецЕсли;
	КонецЕсли;

	Версия.Записать();
	
	Если ТипХраненияФайлов = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
		ЗаписатьФайлВИнформационнуюБазу(Версия.Ссылка, ХранилищеФайла);
	КонецЕсли;
	
	Возврат Версия.Ссылка;
	
КонецФункции

// Подставляет ссылку на версию в карточку Файла
//
// Параметры
// ФайлСсылка - СправочникСсылка.Файлы - Файл, в котором создается версия
// Версия  - СправочникСсылка.ВерсииФайлов - версия файла
// АдресВременногоХранилищаТекста - Строка - содержит адрес во временном хранилище, где находятся двоичные данные с файлом текста или ХранилищеЗначения - непосредственно содержит  двоичные данные с файлом текста
//  УникальныйИдентификатор - уникальный идентификатор формы
//
Процедура ОбновитьВерсиюВФайле(ФайлСсылка,
                               Версия,
                               Знач АдресВременногоХранилищаТекста,
                               УникальныйИдентификатор = Неопределено) Экспорт
	
	ФайлОбъект = ФайлСсылка.ПолучитьОбъект();
	ЗаблокироватьДанныеДляРедактирования(ФайлОбъект.Ссылка, , УникальныйИдентификатор);
	
	ФайлОбъект.ТекущаяВерсия = Версия.Ссылка;
	
	Если ТипЗнч(АдресВременногоХранилищаТекста) = Тип("ХранилищеЗначения") Тогда
		// При создании Файла из шаблона хранилище значения копируется напрямую
		ФайлОбъект.ТекстХранилище = АдресВременногоХранилищаТекста;
	Иначе
		Текст = ФайловыеФункцииСлужебный.ПолучитьСтрокуИзВременногоХранилища(АдресВременногоХранилищаТекста);
		ФайлОбъект.ТекстХранилище = Новый ХранилищеЗначения(Текст);
	КонецЕсли;
	
	ФайлОбъект.Записать();
	РазблокироватьДанныеДляРедактирования(ФайлОбъект.Ссылка, УникальныйИдентификатор);
	
КонецПроцедуры

// Обновляет текстовую порцию из файла в карточке файла
//
// Параметры
// ФайлСсылка - СправочникСсылка.Файлы - Файл, в котором создается версия
// АдресВременногоХранилищаТекста - Строка - содержит адрес во временном хранилище, где находятся двоичные данные с файлом текста или ХранилищеЗначения - непосредственно содержит  двоичные данные с файлом текста
//  УникальныйИдентификатор - уникальный идентификатор формы
//
Процедура ОбновитьТекстВФайле(ФайлСсылка,
                              Знач АдресВременногоХранилищаТекста,
                              УникальныйИдентификатор = Неопределено)
	
	ФайлОбъект = ФайлСсылка.ПолучитьОбъект();
	ЗаблокироватьДанныеДляРедактирования(ФайлОбъект.Ссылка, , УникальныйИдентификатор);
	
	Текст = ФайловыеФункцииСлужебный.ПолучитьСтрокуИзВременногоХранилища(АдресВременногоХранилищаТекста);
	ФайлОбъект.ТекстХранилище = Новый ХранилищеЗначения(Текст);
	
	ФайлОбъект.Записать();
	РазблокироватьДанныеДляРедактирования(ФайлОбъект.Ссылка, УникальныйИдентификатор);
	
КонецПроцедуры

// Обновление или создание версии Файла и возврат ссылки на обновленную версию  (или Ложь, если файл бинарно не изменен)
// Параметры
// Файл - СправочникСсылка.Файлы - Файл, в котором обновляется версия
// СоздаватьВерсию  - Булево - создавать новую версию, если Истина (если Ложь - изменяет существующую)
// АдресВременногоХранилищаФайла  - Строка - содержит адрес во временном хранилище, где находятся двоичные данные с файлом или ХранилищеЗначения - непосредственно содержит  двоичные данные с файлом
// Комментарий  - Строка - комментарий к версии
// ВремяИзменения  - Дата - дата и время изменения файла
// ВремяИзмененияУниверсальное  - Дата - UTC дата и время изменения файла
// Размер - размер файла в байтах
// ИмяБезРасширения  - Строка - имя файла без расширения
// Расширение - Строка - расширение файла
// ПолныйПутьКФайлу - полный путь к файлу на клиенте в рабочем каталоге
// АдресВременногоХранилищаТекста - Строка - содержит адрес во временном хранилище, где находятся двоичные данные с файлом текста или ХранилищеЗначения - непосредственно содержит  двоичные данные с файлом текста
// ЭтоВебКлиент - Булево - Истина, если вызов идет из веб клиента
// ТекстНеИзвлеченНаКлиенте - Булево - текст не извлечен на клиенте - т.е. его надо извлекать на сервере
//  УникальныйИдентификатор - уникальный идентификатор формы
// Зашифрован  - Булево - файл зашифрован
// ВерсияСсылка - явно указанная версия, которую надо изменить
// СтатусИзвлеченияТекста - Перечисления.СтатусыИзвлеченияТекстаФайлов - статус извлечения текста
//
// Возвращаемое значение:
//   СправочникСсылка.ВерсииФайлов - созданная/измененная версия
//
Функция ОбновитьВерсию(Файл,
                       СоздаватьВерсию,
                       АдресВременногоХранилищаФайла,
                       Комментарий,
                       ВремяИзменения,
                       ВремяИзмененияУниверсальное,
                       Размер,
                       ИмяБезРасширения,
                       Расширение,
                       ПолныйПутьКФайлу,
                       АдресВременногоХранилищаТекста,
                       ЭтоВебКлиент,
                       ТекстНеИзвлеченНаКлиенте,
                       УникальныйИдентификатор = Неопределено,
                       Зашифрован = Неопределено,
                       ВерсияСсылка = Неопределено,
                       СтатусИзвлеченияТекста = Неопределено)
	
	Перем СсылкаНаТом;
	ХранилищеФайла = Неопределено;
	
	ЕстьПравоСохранения = ПравоДоступа("СохранениеДанныхПользователя", Метаданные);
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ ЗначениеЗаполнено(ВремяИзмененияУниверсальное)
	 ИЛИ ВремяИзмененияУниверсальное > ТекущаяУниверсальнаяДата() Тогда
		
		ВремяИзмененияУниверсальное = ТекущаяУниверсальнаяДата();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВремяИзменения)
	 ИЛИ УниверсальноеВремя(ВремяИзменения) > ВремяИзмененияУниверсальное Тогда
		
		ВремяИзменения = ТекущаяДатаСеанса();
	КонецЕсли;
	
	ФайловыеФункцииСлужебныйКлиентСервер.ПроверитьРасширениеФайлаДляЗагрузки(Расширение);
	
	ТекущаяВерсияРазмер = 0;
	ДвоичныеДанные = Неопределено;
	ТекущаяВерсияТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе;
	ТекущаяВерсияТом = Неопределено;
	ТекущаяВерсияПутьКФайлу = Неопределено;
	
	ВерсияСсылкаДляСравненияРазмера = ВерсияСсылка;
	
	Если ВерсияСсылка <> Неопределено Тогда
		ВерсияСсылкаДляСравненияРазмера = ВерсияСсылка;
	Иначе
		ВерсияСсылкаДляСравненияРазмера = Файл.ТекущаяВерсия;
	КонецЕсли;
	
	КодировкаПредВерсии = ПолучитьКодировкуВерсииФайла(ВерсияСсылкаДляСравненияРазмера);
	
	СтруктураРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВерсияСсылкаДляСравненияРазмера, 
		"Размер, ТипХраненияФайла, Том, ПутьКФайлу");
	ТекущаяВерсияРазмер = СтруктураРеквизитов.Размер;
	ТекущаяВерсияТипХраненияФайла = СтруктураРеквизитов.ТипХраненияФайла;
	ТекущаяВерсияТом = СтруктураРеквизитов.Том;
	ТекущаяВерсияПутьКФайлу = СтруктураРеквизитов.ПутьКФайлу;
	
	Если Размер = ТекущаяВерсияРазмер Тогда
		ДвоичныеДанныеПредыдущейВерсии = Неопределено;
		
		Если ТекущаяВерсияТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске Тогда
			Если НЕ ТекущаяВерсияТом.Пустая() Тогда
				ПолныйПуть = ФайловыеФункцииСлужебный.ПолныйПутьТома(ТекущаяВерсияТом) + ТекущаяВерсияПутьКФайлу; 
				ДвоичныеДанныеПредыдущейВерсии = Новый ДвоичныеДанные(ПолныйПуть);
			КонецЕсли;
		Иначе
			ХранилищеФайла = ПолучитьХранилищеФайлаИзИнформационнойБазы(ВерсияСсылкаДляСравненияРазмера);
			ДвоичныеДанныеПредыдущейВерсии = ХранилищеФайла.Получить();
		КонецЕсли;
		
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресВременногоХранилищаФайла);
		
		Если ДвоичныеДанныеПредыдущейВерсии = ДвоичныеДанные Тогда
			Возврат Ложь; // файл бинарно не изменен - вернем Ложь
		КонецЕсли;
	КонецЕсли;
	
	СтарыйТипХранения = Неопределено;
	ВерсияЗаблокирована = Ложь;
	Версия = Неопределено;
	
	Если СоздаватьВерсию Тогда
		Версия = Справочники.ВерсииФайлов.СоздатьЭлемент();
		Версия.РодительскаяВерсия = Файл.ТекущаяВерсия;
		Версия.НомерВерсии = НайтиМаксимальныйНомерВерсии(Файл) + 1;
	Иначе
		
		Если ВерсияСсылка = Неопределено Тогда
			Версия = Файл.ТекущаяВерсия.ПолучитьОбъект();
		Иначе
			Версия = ВерсияСсылка.ПолучитьОбъект();
		КонецЕсли;
	
		ЗаблокироватьДанныеДляРедактирования(Версия.Ссылка, , УникальныйИдентификатор);
		ВерсияЗаблокирована = Истина;
		
		// удалим файл с диска - мы заместим его новым
		Если Версия.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске Тогда
			Если НЕ Версия.Том.Пустая() Тогда
				ПолныйПуть = ФайловыеФункцииСлужебный.ПолныйПутьТома(Версия.Том) + Версия.ПутьКФайлу; 
				Попытка
					ФайлНаДиске = Новый Файл(ПолныйПуть);
					ФайлНаДиске.УстановитьТолькоЧтение(Ложь);
					УдалитьФайлы(ПолныйПуть);
					
					ПутьСПодкаталогом = ФайлНаДиске.Путь;
					МассивФайловВКаталоге = НайтиФайлы(ПутьСПодкаталогом, "*.*");
					Если МассивФайловВКаталоге.Количество() = 0 Тогда
						УдалитьФайлы(ПутьСПодкаталогом);
					КонецЕсли;
				Исключение
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Версия.Владелец = Файл.Ссылка;
	Версия.Автор = Пользователи.ТекущийПользователь();
	Версия.ДатаМодификацииУниверсальная = ВремяИзмененияУниверсальное;
	Версия.ДатаМодификацииФайла = ВремяИзменения;
	Версия.ДатаСоздания = ТекущаяДатаСеанса();
	Версия.Размер = Размер;
	Версия.ПолноеНаименование = ИмяБезРасширения;
	Версия.Комментарий = Комментарий;
	
	Версия.Расширение = ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(Расширение);
	
	ТипХраненияФайлов = ФайловыеФункцииСлужебный.ТипХраненияФайлов();
	Версия.ТипХраненияФайла = ТипХраненияФайлов;
	
	Если ДвоичныеДанные = Неопределено Тогда
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресВременногоХранилищаФайла);
	КонецЕсли;
	
	Если ТипХраненияФайлов = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
		
		ХранилищеФайла = Новый ХранилищеЗначения(ДвоичныеДанные);
			
		Если (ЭтоВебКлиент = Истина) И (Версия.Размер = 0) Тогда
			ДвоичныеДанныеФайла = ХранилищеФайла.Получить();
			Версия.Размер = ДвоичныеДанныеФайла.Размер();
			
			ФайловыеФункцииСлужебныйКлиентСервер.ПроверитьРазмерФайлаДляЗагрузки(Версия);
		КонецЕсли;
		
		// очистим поля
		Версия.ПутьКФайлу = "";
		Версия.Том = Справочники.ТомаХраненияФайлов.ПустаяСсылка();
	Иначе // хранение на диске
		
		Если (ЭтоВебКлиент = Истина) И (Версия.Размер = 0) Тогда
			Версия.Размер = ДвоичныеДанные.Размер();
			ФайловыеФункцииСлужебныйКлиентСервер.ПроверитьРазмерФайлаДляЗагрузки(Версия);
		КонецЕсли;
		
		ПутьКФайлу = "";
		
		ФайлЗашифрован = Ложь;
		Если Зашифрован <> Неопределено Тогда
			ФайлЗашифрован = Зашифрован;
		КонецЕсли;	
		
		// добавить в один из томов (где есть свободное место)
		ФайловыеФункцииСлужебный.ДобавитьНаДиск(
			ДвоичныеДанные,
			ПутьКФайлу,
			СсылкаНаТом,
			ВремяИзмененияУниверсальное,
			Версия.НомерВерсии,
			ИмяБезРасширения,
			Версия.Расширение,
			Версия.Размер,
			ФайлЗашифрован);
		
		Версия.ПутьКФайлу = ПутьКФайлу;
		Версия.Том = СсылкаНаТом.Ссылка;
		ХранилищеФайла = Новый ХранилищеЗначения(Неопределено); // очистим ХранилищеЗначения
	КонецЕсли; // Хранение на диске
	
	Если НЕ ТекстНеИзвлеченНаКлиенте Тогда
		Если ФайловыеФункцииСлужебный.ИзвлекатьТекстыФайловНаСервере() Тогда
			Версия.СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.НеИзвлечен;
		Иначе
			Текст = ФайловыеФункцииСлужебный.ПолучитьСтрокуИзВременногоХранилища(АдресВременногоХранилищаТекста);
			Версия.ТекстХранилище = Новый ХранилищеЗначения(Текст);
			Версия.СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.Извлечен;
		КонецЕсли;
	Иначе
		Версия.СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.НеИзвлечен;
	КонецЕсли;
	
	Если СтатусИзвлеченияТекста <> Неопределено Тогда
		Версия.СтатусИзвлеченияТекста = СтатусИзвлеченияТекста;
	КонецЕсли;

	Если (ЭтоВебКлиент = Истина) И (Версия.Размер = 0) Тогда
		Если ТипХраненияФайлов = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
			ДвоичныеДанныеФайла = ХранилищеФайла.Получить();
			Версия.Размер = ДвоичныеДанныеФайла.Размер();
		КонецЕсли;
	КонецЕсли;
	
	Если Зашифрован <> Неопределено Тогда
		Версия.Зашифрован = Зашифрован;
	КонецЕсли;
	
	Версия.Записать();
	
	Если ТипХраненияФайлов = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
		ЗаписатьФайлВИнформационнуюБазу(Версия.Ссылка, ХранилищеФайла);
	КонецЕсли;
	
	Если ВерсияЗаблокирована Тогда
		РазблокироватьДанныеДляРедактирования(Версия.Ссылка, УникальныйИдентификатор);
	КонецЕсли;
	
	ЗаписатьКодировкуВерсииФайла(Версия.Ссылка, КодировкаПредВерсии);
	
	Если ЕстьПравоСохранения Тогда
		НавигационнаяСсылкаФайла = ПолучитьНавигационнуюСсылку(Файл);
		ИсторияРаботыПользователя.Добавить(НавигационнаяСсылкаФайла);
	КонецЕсли;
	
	Возврат Версия.Ссылка;
	
КонецФункции

// Обновляет или создает версию Файла и снимает заем. Возвращает Истина, если создание версии выполнено (и файл бинарно изменен)
// Параметры
// ДанныеФайла  - структура с данными файла
// СоздаватьВерсию  - Булево - создавать новую версию, если Истина (если Ложь - изменяет существующую)
// АдресВременногоХранилищаФайла  - Строка - содержит адрес во временном хранилище, где находятся двоичные данные с файлом или ХранилищеЗначения - непосредственно содержит  двоичные данные с файлом
// Комментарий  - Строка - комментарий к версии
// ВремяИзменения  - Дата - дата и время изменения файла
// ВремяИзмененияУниверсальное  - Дата - UTC дата и время изменения файла
// Размер - размер файла в байтах
// ИмяБезРасширения  - Строка - имя файла без расширения
// Расширение - Строка - расширение файла
// ПолныйПутьКФайлу - полный путь к файлу на клиенте в рабочем каталоге
// АдресВременногоХранилищаТекста - Строка - содержит адрес во временном хранилище, где находятся двоичные данные с файлом текста или ХранилищеЗначения - непосредственно содержит  двоичные данные с файлом текста
// ЭтоВебКлиент - Булево - Истина, если вызов идет из веб клиента
// ТекстНеИзвлеченНаКлиенте - Булево - текст не извлечен на клиенте - т.е. его надо извлекать на сервере
// ВРабочемКаталогеВладельца - Булево - файл находится в рабочем каталоге владельца
// НеМенятьЗаписьВРабочемКаталоге - Булево - не менять запись в регистре сведений ФайлыВРабочемКаталоге 
//  УникальныйИдентификатор - уникальный идентификатор формы
//
// Возвращаемое значение:
//   Булево - успешно ли выполнена операция.
//
Функция ОпубликоватьИОсвободитьФайл(ДанныеФайла,
                                    СоздаватьВерсию,
                                    АдресВременногоХранилищаФайла,
                                    Комментарий,
                                    ВремяИзменения,
                                    ВремяИзмененияУниверсальное,
                                    Размер,
                                    ИмяБезРасширения,
                                    Расширение,
                                    ПолныйПутьКФайлу,
                                    АдресВременногоХранилищаТекста,
                                    ЭтоВебКлиент,
                                    ТекстНеИзвлеченНаКлиенте,
                                    ВРабочемКаталогеВладельца,
                                    НеМенятьЗаписьВРабочемКаталоге,
                                    УникальныйИдентификатор = Неопределено,
                                    Кодировка = Неопределено,
                                    РабочийКаталогПользователя) Экспорт
	
	ДанныеФайлаТекущие = ПолучитьДанныеФайла(ДанныеФайла.Ссылка);
	Если Не ДанныеФайлаТекущие.РедактируетТекущийПользователь Тогда
		ВызватьИсключение НСтр("ru = 'Файл не занят текущим пользователем'");
	КонецЕсли;
	
	ВерсияНеСоздана = Ложь;
	
	НачатьТранзакцию();
	Попытка
		ПредыдущаяВерсия = ДанныеФайла.ТекущаяВерсия;
		КодВозвратаОбновитьВерсию = ОбновитьВерсию(
			ДанныеФайла.Ссылка,
			СоздаватьВерсию,
			АдресВременногоХранилищаФайла,
			Комментарий,
			ВремяИзменения,
			ВремяИзмененияУниверсальное,
			Размер,
			ИмяБезРасширения,
			Расширение,
			ПолныйПутьКФайлу,
			АдресВременногоХранилищаТекста,
			ЭтоВебКлиент,
			ТекстНеИзвлеченНаКлиенте,
			УникальныйИдентификатор,
			ДанныеФайла.Зашифрован);
			
		НоваяВерсия = Неопределено;
		Если ТипЗнч(КодВозвратаОбновитьВерсию) = Тип("Булево") Тогда
			ВерсияНеСоздана = Истина;
		Иначе
			НоваяВерсия = КодВозвратаОбновитьВерсию;
		КонецЕсли;

		Если Не ВерсияНеСоздана Тогда
			Если СоздаватьВерсию Тогда
				ОбновитьВерсиюВФайле(ДанныеФайла.Ссылка, НоваяВерсия, АдресВременногоХранилищаТекста, УникальныйИдентификатор);
			Иначе
				ОбновитьТекстВФайле(ДанныеФайла.Ссылка, АдресВременногоХранилищаТекста, УникальныйИдентификатор);
			КонецЕсли;
			ДанныеФайла.ТекущаяВерсия = НоваяВерсия;
		КонецЕсли;
		
		ОсвободитьФайл(ДанныеФайла, УникальныйИдентификатор);
		
		Если Кодировка <> Неопределено Тогда
			Если Не ЗначениеЗаполнено(ПолучитьКодировкуВерсииФайла(ДанныеФайла.ТекущаяВерсия)) Тогда
				ЗаписатьКодировкуВерсииФайла(ДанныеФайла.ТекущаяВерсия, Кодировка);
			КонецЕсли;
		КонецЕсли;
		
		Если Не ВерсияНеСоздана Тогда
			Если НЕ ЭтоВебКлиент И Не НеМенятьЗаписьВРабочемКаталоге Тогда
				
				УдалитьВерсиюИЗанестиИнформациюФайлаВРегистр(
					ПредыдущаяВерсия,
					НоваяВерсия,
					ПолныйПутьКФайлу,
					РабочийКаталогПользователя,
					ДанныеФайла.РабочийКаталогВладельца <> "");
			КонецЕсли;
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат Не ВерсияНеСоздана;
	
КонецФункции

// Получает данные файла, затем обновляет или создает версию Файла и снимает заем
// Нужно для случаев, когда на клиенте нет ДанныеФайла (из соображений экономии вызовов клиент-сервер)
// Возвращает Истина, если создание версии выполнено (и файл бинарно изменен)
// Параметры
// ОбъектСсылка - СправочникСсылка.Файлы - Файл, в котором обновляется версия
// ДанныеФайла  - структура с данными файла
// СоздаватьВерсию  - Булево - создавать новую версию, если Истина (если Ложь - изменяет существующую)
// АдресВременногоХранилищаФайла  - Строка - содержит адрес во временном хранилище, где находятся двоичные данные с файлом или ХранилищеЗначения - непосредственно содержит  двоичные данные с файлом
// Комментарий  - Строка - комментарий к версии
// ВремяИзменения  - Дата - дата и время изменения файла
// ВремяИзмененияУниверсальное  - Дата - UTC дата и время изменения файла
// Размер - размер файла в байтах
// ИмяБезРасширения  - Строка - имя файла без расширения
// Расширение - Строка - расширение файла
// ПолныйПутьКФайлу - полный путь к файлу на клиенте в рабочем каталоге
// АдресВременногоХранилищаТекста - Строка - содержит адрес во временном хранилище, где находятся двоичные данные с файлом текста или ХранилищеЗначения - непосредственно содержит  двоичные данные с файлом текста
// ЭтоВебКлиент - Булево - Истина, если вызов идет из веб клиента
// ТекстНеИзвлеченНаКлиенте - Булево - текст не извлечен на клиенте - т.е. его надо извлекать на сервере
// УникальныйИдентификатор - уникальный идентификатор формы
//
// Возвращаемое значение:
//   Булево  - успешно ли выполнена операция
//
Функция ПолучитьДанныеФайлаИОпубликоватьИОсвободитьФайл(ОбъектСсылка,
                                                        ДанныеФайла,
                                                        СоздаватьВерсию,
                                                        АдресВременногоХранилищаФайла,
                                                        Комментарий,
                                                        ВремяИзменения,
                                                        ВремяИзмененияУниверсальное,
                                                        Размер,
                                                        ИмяБезРасширения,
                                                        Расширение,
                                                        ПолныйПутьКФайлу,
                                                        АдресВременногоХранилищаТекста,
                                                        ЭтоВебКлиент,
                                                        ТекстНеИзвлеченНаКлиенте,
                                                        УникальныйИдентификатор = Неопределено,
                                                        РабочийКаталогПользователя) Экспорт
	
	ДанныеФайла = ПолучитьДанныеФайла(ОбъектСсылка);
	
	Если Не ДанныеФайла.РедактируетТекущийПользователь Тогда
		ВызватьИсключение НСтр("ru = 'Файл не занят текущим пользователем'");
	КонецЕсли;
	
	ВерсияНеСоздана = Ложь;
	
	НачатьТранзакцию();
	Попытка
	
		ПредыдущаяВерсия = ДанныеФайла.ТекущаяВерсия;
		КодВозвратаОбновитьВерсию = ОбновитьВерсию(
			ДанныеФайла.Ссылка,
			СоздаватьВерсию,
			АдресВременногоХранилищаФайла,
			Комментарий,
			ВремяИзменения,
			ВремяИзмененияУниверсальное,
			Размер,
			ИмяБезРасширения,
			Расширение,
			ПолныйПутьКФайлу,
			АдресВременногоХранилищаТекста,
			ЭтоВебКлиент,
			ТекстНеИзвлеченНаКлиенте,
			УникальныйИдентификатор);

		НоваяВерсия = Неопределено;
		Если ТипЗнч(КодВозвратаОбновитьВерсию) = Тип("Булево") Тогда
			ВерсияНеСоздана = Истина;
		Иначе
			НоваяВерсия = КодВозвратаОбновитьВерсию;
		КонецЕсли;
		
		Если Не ВерсияНеСоздана Тогда
			Если СоздаватьВерсию Тогда
				ОбновитьВерсиюВФайле(
					ДанныеФайла.Ссылка,
					НоваяВерсия,
					АдресВременногоХранилищаТекста,
					УникальныйИдентификатор);
			Иначе
				ОбновитьТекстВФайле(
					ДанныеФайла.Ссылка,
					АдресВременногоХранилищаТекста,
					УникальныйИдентификатор);
			КонецЕсли;
			ДанныеФайла.ТекущаяВерсия = НоваяВерсия;
		КонецЕсли;
		
		ОсвободитьФайл(ДанныеФайла, УникальныйИдентификатор);
		
		Если Не ВерсияНеСоздана Тогда
			Если НЕ ЭтоВебКлиент Тогда
				
				УдалитьВерсиюИЗанестиИнформациюФайлаВРегистр(
					ПредыдущаяВерсия,
					НоваяВерсия,
					ПолныйПутьКФайлу,
					РабочийКаталогПользователя,
					ДанныеФайла.РабочийКаталогВладельца <> "");
			КонецЕсли;
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	 
	Возврат Не ВерсияНеСоздана;
	
КонецФункции

// Предназначена для опубликования файла без его освобождения. Возвращает Истина, если создание версии выполнено (и файл бинарно изменен)
// Параметры
// Файл - СправочникСсылка.Файлы - Файл, в котором обновляется версия
// СоздаватьВерсию  - Булево - создавать новую версию, если Истина (если Ложь - изменяет существующую)
// АдресВременногоХранилищаФайла  - Строка - содержит адрес во временном хранилище, где находятся двоичные данные с файлом или ХранилищеЗначения - непосредственно содержит  двоичные данные с файлом
// Комментарий  - Строка - комментарий к версии
// ВремяИзменения  - Дата - дата и время изменения файла
// ВремяИзмененияУниверсальное  - Дата - UTC дата и время изменения файла
// Размер - размер файла в байтах
// ИмяБезРасширения  - Строка - имя файла без расширения
// Расширение - Строка - расширение файла
// ОтносительныйПутьКФайлу - Строка - относительный путь к файлу - не содержащий пути рабочего каталога, например "А1/Приказ.doc"
// ПолныйПутьКФайлу - полный путь к файлу на клиенте в рабочем каталоге
// АдресВременногоХранилищаТекста - Строка - содержит адрес во временном хранилище, где находятся двоичные данные с файлом текста или ХранилищеЗначения - непосредственно содержит  двоичные данные с файлом текста
// ЭтоВебКлиент - Булево - Истина, если вызов идет из веб клиента
// ТекстНеИзвлеченНаКлиенте - Булево - текст не извлечен на клиенте - т.е. его надо извлекать на сервере
// ВРабочемКаталогеВладельца - Булево - файл находится в рабочем каталоге владельца
// НеМенятьЗаписьВРабочемКаталоге - Булево - не менять запись в регистре сведений ФайлыВРабочемКаталоге 
// УникальныйИдентификатор - уникальный идентификатор формы
//
// Возвращаемое значение:
//   Булево  - успешно ли выполнена операция
//
Функция ОпубликоватьФайл(Файл,
                         СоздаватьВерсию,
                         АдресВременногоХранилищаФайла,
                         Комментарий,
                         ВремяИзменения,
                         ВремяИзмененияУниверсальное,
                         Размер,
                         ИмяБезРасширения,
                         Расширение,
                         ОтносительныйПутьКФайлу,
                         ПолныйПутьКФайлу,
                         АдресВременногоХранилищаТекста,
                         ЭтоВебКлиент,
                         ТекстНеИзвлеченНаКлиенте,
                         ВРабочемКаталогеВладельца,
                         НеМенятьЗаписьВРабочемКаталоге,
                         УникальныйИдентификатор = Неопределено,
                         Кодировка = Неопределено) Экспорт
	
	ДанныеФайлаТекущие = ПолучитьДанныеФайла(Файл);
	Если Не ДанныеФайлаТекущие.РедактируетТекущийПользователь Тогда
		ВызватьИсключение НСтр("ru = 'Файл не занят текущим пользователем'");
	КонецЕсли;
	
	ВерсияНеСоздана = Ложь;
	ТекущаяВерсия = ДанныеФайлаТекущие.ТекущаяВерсия;
	
	НачатьТранзакцию();
	Попытка
		
		СтараяВерсия = Файл.ТекущаяВерсия;
		
		КодВозвратаОбновитьВерсию = ОбновитьВерсию(
			Файл,
			СоздаватьВерсию,
			АдресВременногоХранилищаФайла,
			Комментарий,
			ВремяИзменения,
			ВремяИзмененияУниверсальное,
			Размер,
			ИмяБезРасширения,
			Расширение,
			ПолныйПутьКФайлу,
			АдресВременногоХранилищаТекста,
			ЭтоВебКлиент,
			ТекстНеИзвлеченНаКлиенте,
			УникальныйИдентификатор,
			ДанныеФайлаТекущие.Зашифрован);
		
		НоваяВерсия = Неопределено;
		Если ТипЗнч(КодВозвратаОбновитьВерсию) = Тип("Булево") Тогда
			ВерсияНеСоздана = Истина;
		Иначе
			НоваяВерсия = КодВозвратаОбновитьВерсию;
			ТекущаяВерсия = НоваяВерсия;
		КонецЕсли;

		Если Не ВерсияНеСоздана Тогда
			Если СоздаватьВерсию Тогда
				ОбновитьВерсиюВФайле(Файл, НоваяВерсия, АдресВременногоХранилищаТекста, УникальныйИдентификатор);
			Иначе
				ОбновитьТекстВФайле(Файл, АдресВременногоХранилищаТекста, УникальныйИдентификатор);
			КонецЕсли;
		
			Если НЕ ЭтоВебКлиент И Не НеМенятьЗаписьВРабочемКаталоге Тогда
				УдалитьИзРегистра(СтараяВерсия);
				НаЧтение = Ложь; 
				ЗаписатьИмяФайлаСПутемВРегистр(НоваяВерсия, ОтносительныйПутьКФайлу, НаЧтение, ВРабочемКаталогеВладельца);
			КонецЕсли;
		КонецЕсли;
		
		Если Кодировка <> Неопределено Тогда
			Если Не ЗначениеЗаполнено(ПолучитьКодировкуВерсииФайла(ТекущаяВерсия)) Тогда
				ЗаписатьКодировкуВерсииФайла(ТекущаяВерсия, Кодировка);
			КонецЕсли;
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат Не ВерсияНеСоздана;
	
КонецФункции

// Получает РедактируетТекущийПользователь - в привилегированном режиме
// Параметры
//  ВерсияСсылка  - СправочникСсылка.ВерсииФайлов - версия файла
//
// Возвращаемое значение:
//   Булево - Истина, если файл редактирует текущий пользователь
//
Функция ПолучитьРедактируетТекущийПользователь(ВерсияСсылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Файлы.Редактирует КАК Редактирует
	|ИЗ
	|	Справочник.Файлы КАК Файлы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВерсииФайлов КАК ВерсииФайлов
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ВерсииФайлов.Ссылка = &Версия
	|	И Файлы.Ссылка = ВерсииФайлов.Владелец";
	
	Запрос.Параметры.Вставить("Версия", ВерсияСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		РедактируетТекущийПользователь = (Выборка.Редактирует = Пользователи.ТекущийПользователь());
		Возврат РедактируетТекущийПользователь;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Функция возвращает структуру, содержащую различные сведения о Файле и версии
// Параметры
//  ФайлСсылка  - СправочникСсылка.Файлы - файл
//  ВерсияСсылка  - СправочникСсылка.ВерсииФайлов - версия файла
//
// Возвращаемое значение:
//   Структура - структура с данными файла
//
Функция ПолучитьДанныеФайла(ФайлСсылка, ВерсияСсылка = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	
	Если ВерсияСсылка = Справочники.ВерсииФайлов.ПустаяСсылка() Тогда
		ВерсияСсылка = Неопределено;
	КонецЕсли;
	
	Если ВерсияСсылка = Неопределено Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Файлы.Ссылка КАК Ссылка,
		|	Файлы.Код КАК Код,
		|	Файлы.Редактирует КАК Редактирует,
		|	Файлы.ТекущаяВерсия КАК ТекущаяВерсия,
		|	Файлы.ВладелецФайла КАК ВладелецФайла,
		|	Файлы.ХранитьВерсии КАК ХранитьВерсии,
		|	Файлы.ПометкаУдаления КАК ПометкаУдаления,
		|	ВерсииФайлов.ПолноеНаименование КАК ПолноеНаименование,
		|	ВерсииФайлов.Расширение КАК Расширение,
		|	ВерсииФайлов.Размер КАК Размер,
		|	ВерсииФайлов.НомерВерсии КАК НомерВерсии,
		|	ВерсииФайлов.ПутьКФайлу КАК ПутьКФайлу,
		|	ВерсииФайлов.Том КАК Том,
		|	ВерсииФайлов.ДатаМодификацииУниверсальная КАК ДатаМодификацииУниверсальная,
		|	ВерсииФайлов.Автор КАК Автор,
		|	ВерсииФайлов.СтатусИзвлеченияТекста КАК СтатусИзвлеченияТекста,
		|	Файлы.Зашифрован КАК Зашифрован,
		|	Файлы.ДатаЗаема КАК ДатаЗаема
		|ИЗ
		|	Справочник.Файлы КАК Файлы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВерсииФайлов КАК ВерсииФайлов
		|		ПО Файлы.ТекущаяВерсия = ВерсииФайлов.Ссылка";
		
		Если ТипЗнч(ФайлСсылка) = Тип("Массив") Тогда 
			Запрос.Текст = Запрос.Текст + " ГДЕ Файлы.Ссылка В (&Файл) ";
		Иначе
			Запрос.Текст = Запрос.Текст + " ГДЕ Файлы.Ссылка = &Файл ";
		КонецЕсли;
		
		Запрос.Параметры.Вставить("Файл", ФайлСсылка);
		
	Иначе
		
		Если ФайлСсылка <> Неопределено Тогда 
			Запрос.Текст =
			"ВЫБРАТЬ
			|	Файлы.Ссылка КАК Ссылка,
			|	Файлы.Код КАК Код,
			|	Файлы.Редактирует КАК Редактирует,
			|	Файлы.ТекущаяВерсия КАК ТекущаяВерсия,
			|	Файлы.ВладелецФайла КАК ВладелецФайла,
			|	Файлы.ХранитьВерсии КАК ХранитьВерсии,
			|	Файлы.ПометкаУдаления КАК ПометкаУдаления,
			|	ВерсииФайлов.ПолноеНаименование КАК ПолноеНаименование,
			|	ВерсииФайлов.Расширение КАК Расширение,
			|	ВерсииФайлов.Размер КАК Размер,
			|	ВерсииФайлов.НомерВерсии КАК НомерВерсии,
			|	ВерсииФайлов.ПутьКФайлу КАК ПутьКФайлу,
			|	ВерсииФайлов.Том КАК Том,
			|	ВерсииФайлов.ДатаМодификацииУниверсальная КАК ДатаМодификацииУниверсальная,
			|	ВерсииФайлов.Автор КАК Автор,
			|	ВерсииФайлов.СтатусИзвлеченияТекста КАК СтатусИзвлеченияТекста,
			|	Файлы.Зашифрован КАК Зашифрован,
			|	Файлы.ДатаЗаема КАК ДатаЗаема
			|ИЗ
			|	Справочник.Файлы КАК Файлы
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВерсииФайлов КАК ВерсииФайлов
			|		ПО (ИСТИНА)
			|ГДЕ
			|	Файлы.Ссылка = &Файл
			|	И ВерсииФайлов.Ссылка = &Версия";
			
			Запрос.Параметры.Вставить("Файл", ФайлСсылка);
			Запрос.Параметры.Вставить("Версия", ВерсияСсылка);
		Иначе
			Запрос.Текст =
			"ВЫБРАТЬ
			|	Файлы.Ссылка КАК Ссылка,
			|	Файлы.Код КАК Код,
			|	Файлы.Редактирует КАК Редактирует,
			|	Файлы.ТекущаяВерсия КАК ТекущаяВерсия,
			|	Файлы.ВладелецФайла КАК ВладелецФайла,
			|	Файлы.ХранитьВерсии КАК ХранитьВерсии,
			|	Файлы.ПометкаУдаления КАК ПометкаУдаления,
			|	ВерсииФайлов.ПолноеНаименование КАК ПолноеНаименование,
			|	ВерсииФайлов.Расширение КАК Расширение,
			|	ВерсииФайлов.Размер КАК Размер,
			|	ВерсииФайлов.НомерВерсии КАК НомерВерсии,
			|	ВерсииФайлов.ПутьКФайлу КАК ПутьКФайлу,
			|	ВерсииФайлов.Том КАК Том,
			|	ВерсииФайлов.ДатаМодификацииУниверсальная КАК ДатаМодификацииУниверсальная,
			|	ВерсииФайлов.Автор КАК Автор,
			|	ВерсииФайлов.СтатусИзвлеченияТекста КАК СтатусИзвлеченияТекста,
			|	Файлы.Зашифрован КАК Зашифрован,
			|	Файлы.ДатаЗаема КАК ДатаЗаема
			|ИЗ
			|	Справочник.Файлы КАК Файлы
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ВерсииФайлов КАК ВерсииФайлов
			|		ПО (ИСТИНА)
			|ГДЕ
			|	ВерсииФайлов.Ссылка = &Версия
			|	И Файлы.Ссылка = ВерсииФайлов.Владелец";
			
			Запрос.Параметры.Вставить("Версия", ВерсияСсылка);
		КонецЕсли;
		
	КонецЕсли;
	
	МассивДанныеФайла = Новый Массив;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
	
		ДанныеФайла = Новый Структура;
		ДанныеФайла.Вставить("Ссылка", Выборка.Ссылка);
		ДанныеФайла.Вставить("КодФайла", Выборка.Код);
		ДанныеФайла.Вставить("Редактирует", Выборка.Редактирует);
		ДанныеФайла.Вставить("Владелец", Выборка.ВладелецФайла);
		ДанныеФайла.Вставить("НавигационнаяСсылка", ПолучитьНавигационнуюСсылку(Выборка.Ссылка));
		
		Если ВерсияСсылка <> Неопределено Тогда
			ДанныеФайла.Вставить("Версия", ВерсияСсылка);
		Иначе
			ДанныеФайла.Вставить("Версия", Выборка.ТекущаяВерсия);
		КонецЕсли;	

		ДанныеФайла.Вставить("ТекущаяВерсия", Выборка.ТекущаяВерсия);
		
		СтруктураКлюча = Новый Структура("ВерсияФайла", ДанныеФайла.ТекущаяВерсия);
		КлючЗаписи = РегистрыСведений.ХранимыеФайлыВерсий.СоздатьКлючЗаписи(СтруктураКлюча);
		НавигационнаяСсылкаТекущейВерсии = ПолучитьНавигационнуюСсылку(КлючЗаписи, "ХранимыйФайл");
		ДанныеФайла.Вставить("НавигационнаяСсылкаТекущейВерсии", НавигационнаяСсылкаТекущейВерсии);
		
		КодировкаТекущейВерсии = ПолучитьКодировкуВерсииФайла(ДанныеФайла.ТекущаяВерсия);
		ДанныеФайла.Вставить("КодировкаТекущейВерсии", КодировкаТекущейВерсии);
		
		ДанныеФайла.Вставить("Размер", Выборка.Размер);
		ДанныеФайла.Вставить("НомерВерсии", Выборка.НомерВерсии);
		ДанныеФайла.Вставить("ДатаМодификацииУниверсальная", Выборка.ДатаМодификацииУниверсальная);
		ДанныеФайла.Вставить("Расширение", Выборка.Расширение);
		ДанныеФайла.Вставить("ПолноеНаименованиеВерсии", СокрЛП(Выборка.ПолноеНаименование));
		ДанныеФайла.Вставить("ХранитьВерсии", Выборка.ХранитьВерсии);
		ДанныеФайла.Вставить("ПометкаУдаления", Выборка.ПометкаУдаления);
		ДанныеФайла.Вставить("АвторТекущейВерсии", Выборка.Автор);
		ДанныеФайла.Вставить("Зашифрован", Выборка.Зашифрован);
		ДанныеФайла.Вставить("ДатаЗаема", Выборка.ДатаЗаема);
		
		Если ДанныеФайла.Зашифрован Тогда
			МассивСертификатовШифрования = ПолучитьМассивСертификатовШифрования(ДанныеФайла.Ссылка);
			ДанныеФайла.Вставить("МассивСертификатовШифрования", МассивСертификатовШифрования);
		КонецЕсли;
		
		НаЧтение = ДанныеФайла.Редактирует <> Пользователи.ТекущийПользователь();
		ДанныеФайла.Вставить("НаЧтение", НаЧтение);
		
		ВРабочемКаталогеНаЧтение = Истина;
		ВРабочемКаталогеВладельца = Ложь;
		ИмяКаталога = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ЛокальныйКэшФайлов", "ПутьКЛокальномуКэшуФайлов");
		Если ИмяКаталога = Неопределено Тогда
			ИмяКаталога = "";
		КонецЕсли;

		Если ВерсияСсылка <> Неопределено Тогда
			ИмяФайлаСПутемВРабочемКаталоге = ПолучитьИмяФайлаСПутемИзРегистра(ВерсияСсылка, ИмяКаталога, ВРабочемКаталогеНаЧтение, ВРабочемКаталогеВладельца);
		Иначе
			ИмяФайлаСПутемВРабочемКаталоге = ПолучитьИмяФайлаСПутемИзРегистра(Выборка.ТекущаяВерсия, ИмяКаталога, ВРабочемКаталогеНаЧтение, ВРабочемКаталогеВладельца);
		КонецЕсли;

		ДанныеФайла.Вставить("ИмяФайлаСПутемВРабочемКаталоге", ИмяФайлаСПутемВРабочемКаталоге);
		ДанныеФайла.Вставить("ВРабочемКаталогеНаЧтение", ВРабочемКаталогеНаЧтение);
		ДанныеФайла.Вставить("РабочийКаталогВладельца", "");
		
		РедактируетТекущийПользователь = (ДанныеФайла.Редактирует = Пользователи.ТекущийПользователь());
		ДанныеФайла.Вставить("РедактируетТекущийПользователь", РедактируетТекущийПользователь);
		
		СтатусИзвлеченияТекстаСтрока = "НеИзвлечен";
		Если Выборка.СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.НеИзвлечен Тогда
			СтатусИзвлеченияТекстаСтрока = "НеИзвлечен";
		ИначеЕсли Выборка.СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.Извлечен Тогда
			СтатусИзвлеченияТекстаСтрока = "Извлечен";
		ИначеЕсли Выборка.СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.ИзвлечьНеУдалось Тогда
			СтатусИзвлеченияТекстаСтрока = "ИзвлечьНеУдалось";
		КонецЕсли;
		ДанныеФайла.Вставить("СтатусИзвлеченияТекста", СтатусИзвлеченияТекстаСтрока);
		
		МассивДанныеФайла.Добавить(ДанныеФайла);
		
	КонецЦикла;
	
	// если был передан массив - возвращаем массив
	Если ТипЗнч(ФайлСсылка) = Тип("Массив") Тогда 
		Возврат МассивДанныеФайла;
	КонецЕсли;

	Если МассивДанныеФайла.Количество() > 0 Тогда 
		Возврат МассивДанныеФайла[0];
	Иначе
		Возврат Новый Структура;
	КонецЕсли;
	
КонецФункции

// Создает карточку Файла в БД вместе с версией
// Параметры
// Владелец - владелец файла - будет установлен в реквизит ВладелецФайла у созданного файла
// ИмяБезРасширения  - Строка - имя файла без расширения
// РасширениеБезТочки - Строка - расширение файла
// ВремяИзменения  - Дата - дата и время изменения файла
// ВремяИзмененияУниверсальное  - Дата - UTC дата и время изменения файла
// Размер - размер файла в байтах
// АдресВременногоХранилищаФайла  - Строка - содержит адрес во временном хранилище, где находятся двоичные данные с файлом или ХранилищеЗначения - непосредственно содержит  двоичные данные с файлом
// АдресВременногоХранилищаТекста - Строка - содержит адрес во временном хранилище, где находятся двоичные данные с файлом текста или ХранилищеЗначения - непосредственно содержит  двоичные данные с файлом текста
// ЭтоВебКлиент - Булево - Истина, если вызов идет из веб клиента
// Пользователь - СправочникССылка.Пользователи - ссылка на пользователя - автора файла
// Комментарий  - Строка - комментарий к файлу
//
// Возвращаемое значение:
//    СправочникСсылка.Файлы - созданный файл
//
Функция СоздатьФайлСВерсией(
	ВладелецФайла,
	ИмяБезРасширения,
	РасширениеБезТочки,
	ВремяИзменения,
	ВремяИзмененияУниверсальное,
	Размер,
	АдресВременногоХранилищаФайла,
	АдресВременногоХранилищаТекста,
	ЭтоВебКлиент,
	Пользователь = Неопределено,
	Комментарий = "",
	ЗаписатьВИсторию = Ложь,
	Кодировка = Неопределено) Экспорт
	
	ЕстьПравоСохранения = ПравоДоступа("СохранениеДанныхПользователя", Метаданные);
	
	НачатьТранзакцию();
	Попытка
	
		// Создадим карточку Файла в БД
		Док = СоздатьФайл(
			ВладелецФайла,
			Комментарий,
			ИмяБезРасширения,
			Истина,
			АдресВременногоХранилищаТекста,
			Пользователь);
		
		// Создадим версию сохраняемого файла для сохранения в карточке Файла
		Версия = СоздатьВерсию(
			ВремяИзменения,
			ВремяИзмененияУниверсальное,
			Док,
			ИмяБезРасширения,
			Размер,
			РасширениеБезТочки,
			АдресВременногоХранилищаФайла,
			АдресВременногоХранилищаТекста,
			ЭтоВебКлиент,
			Неопределено, // СсылкаНаВерсиюИсточник
			Неопределено, // НоваяВерсияДатаСоздания
			Пользователь);
		
		// Подставим ссылку на версию в карточку Файла
		ОбновитьВерсиюВФайле(Док, Версия, АдресВременногоХранилищаТекста);
		
		Если Кодировка <> Неопределено Тогда
			ЗаписатьКодировкуВерсииФайла(Версия, Кодировка);
		КонецЕсли;
		
		Если ЗаписатьВИсторию И ЕстьПравоСохранения Тогда
			НавигационнаяСсылкаФайла = ПолучитьНавигационнуюСсылку(Док);
			ИсторияРаботыПользователя.Добавить(НавигационнаяСсылкаФайла);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	РаботаСФайламиВызовСервераПереопределяемый.ПриСозданииФайла(Док);
	
	РаботаСФайламиПереопределяемый.ПриСозданииФайла(Док);
	
	Возврат Док;
	
КонецФункции

// Получает данные файла и делает заем (checkout) - для экономии вызовов 
//клиент сервер поместили ПолучитьДанныеФайла и ЗанятьФайл в одну функцию
// Параметры
//  ФайлСсылка  - СправочникСсылка.Файлы - файл
//  ДанныеФайла  - Структура - структура с данными файла
//  СтрокаОшибки - строка, в которой возвращается причина ошибки в случае неуспеха (скажем "Файл занят другим пользователем")
//  УникальныйИдентификатор - уникальный идентификатор формы
//
// Возвращаемое значение:
//   Булево  - успешно ли выполнена операция
//
Функция ПолучитьДанныеФайлаИЗанятьФайл(ФайлСсылка, ДанныеФайла, СтрокаОшибки, УникальныйИдентификатор = Неопределено) Экспорт

	ДанныеФайла = ПолучитьДанныеФайла(ФайлСсылка);

	СтрокаОшибки = "";
	Если НЕ РаботаСФайламиКлиентСервер.МожноЛиЗанятьФайл(ДанныеФайла, СтрокаОшибки) Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	Если ДанныеФайла.Редактирует.Пустая() Тогда
		
		СтрокаОшибки = "";
		Если Не ЗанятьФайл(ДанныеФайла, СтрокаОшибки, УникальныйИдентификатор) Тогда 
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции


// Получает ДанныеФайла для файлов и помещает в МассивДанныхФайла
//  МассивФайлов - массив ссылок на файлы
//  МассивДанныхФайла - массив структур с данными файлов
//
Процедура ПолучитьДанныеДляМассиваФайлов(Знач МассивФайлов, МассивДанныхФайла) Экспорт
	
	Для Каждого Файл Из МассивФайлов Цикл
		ДанныеФайла = ПолучитьДанныеФайла(Файл, Неопределено);
		МассивДанныхФайла.Добавить(ДанныеФайла);
	КонецЦикла;
	
КонецПроцедуры


// Получает данные файла для открытия и делает заем (checkout) - для экономии вызовов 
//клиент сервер поместили ПолучитьДанныеФайлаДляОткрытия и ЗанятьФайл в одну функцию
// Параметры
//  ФайлСсылка  - СправочникСсылка.Файлы - файл
//  ДанныеФайла  - Структура - структура с данными файла
//  СтрокаОшибки - строка, в которой возвращается причина ошибки в случае неуспеха (скажем "Файл занят другим пользователем")
//  УникальныйИдентификатор - уникальный идентификатор формы
//  РабочийКаталогВладельца - Строка - рабочий каталог владельца файла
//
// Возвращаемое значение:
//   Булево  - успешно ли выполнена операция
//
Функция ПолучитьДанныеФайлаДляОткрытияИЗанятьФайл(ФайлСсылка,
                                                  ДанныеФайла,
                                                  СтрокаОшибки,
                                                  УникальныйИдентификатор = Неопределено,
                                                  РабочийКаталогВладельца = Неопределено) Экспорт

	ДанныеФайла = ПолучитьДанныеФайлаДляОткрытия(ФайлСсылка, Неопределено, УникальныйИдентификатор, РабочийКаталогВладельца);

	СтрокаОшибки = "";
	Если НЕ РаботаСФайламиКлиентСервер.МожноЛиЗанятьФайл(ДанныеФайла, СтрокаОшибки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ДанныеФайла.Редактирует.Пустая() Тогда
		
		СтрокаОшибки = "";
		Если Не ЗанятьФайл(ДанныеФайла, СтрокаОшибки, УникальныйИдентификатор) Тогда 
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

// делает ПоместитьВоВременноеХранилище (если файл хранится на диске) и возвращает нужную ссылку
// Параметры
// ВерсияСсылка - версия файла
//  ИдентификаторФормы - уникальный идентификатор формы
//
// Возвращаемое значение:
//   Строка  - навигационная ссылка во временном хранилище
//
Функция ПолучитьНавигационнуюСсылкуДляОткрытия(ВерсияСсылка, ИдентификаторФормы = Неопределено) Экспорт
	
	Адрес = "";
	
	ТипХраненияФайла = ВерсияСсылка.ТипХраненияФайла;
	
	Если ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске Тогда
		Если НЕ ВерсияСсылка.Том.Пустая() Тогда
			ПолныйПуть = ФайловыеФункцииСлужебный.ПолныйПутьТома(ВерсияСсылка.Том) + ВерсияСсылка.ПутьКФайлу; 
			Попытка
				ДвоичныеДанные = Новый ДвоичныеДанные(ПолныйПуть);
				Адрес = ПоместитьВоВременноеХранилище(ДвоичныеДанные, ИдентификаторФормы);
			Исключение
				// запись в журнал регистрации
				СообщениеОбОшибке = СформироватьТекстОшибкиПолученияФайлСТомаДляАдминистратора(
					ИнформацияОбОшибке(), ВерсияСсылка.Владелец);
				
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Файлы.Открытие файла'",
					     ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Ошибка,
					Метаданные.Справочники.Файлы,
					ВерсияСсылка.Владелец,
					СообщениеОбОшибке);
				
				ВызватьИсключение ФайловыеФункцииСлужебныйКлиентСервер.ОшибкаФайлНеНайденВХранилищеФайлов(
					ВерсияСсылка.ПолноеНаименование + "." + ВерсияСсылка.Расширение);
			КонецПопытки;
		КонецЕсли;
	Иначе
		СтруктураКлюча = Новый Структура("ВерсияФайла", ВерсияСсылка);
		КлючЗаписи = РегистрыСведений.ХранимыеФайлыВерсий.СоздатьКлючЗаписи(СтруктураКлюча);
		Адрес = ПолучитьНавигационнуюСсылку(КлючЗаписи, "ХранимыйФайл");
	КонецЕсли;
	
	Возврат Адрес;
	
КонецФункции

// Делает ПолучитьДанныеФайла и вычисляет РабочийКаталогВладельца
// Параметры
//  ФайлСсылка  - СправочникСсылка.Файлы - файл
//  ВерсияСсылка  - СправочникСсылка.ВерсииФайлов - версия файла
//  РабочийКаталогВладельца - Строка - в ней возвращается рабочий каталог владельца файла
//
// Возвращаемое значение:
//   Структура - структура с данными файла
//
Функция ПолучитьДанныеФайлаИРабочийКаталог(ФайлСсылка,
                                           ВерсияСсылка = Неопределено,
                                           РабочийКаталогВладельца = Неопределено) Экспорт
	
	ДанныеФайла = ПолучитьДанныеФайла(ФайлСсылка, ВерсияСсылка);
	
	Если РабочийКаталогВладельца = Неопределено Тогда
		РабочийКаталогВладельца = РабочийКаталогПапки(ДанныеФайла.Владелец);
	КонецЕсли;
	ДанныеФайла.Вставить("РабочийКаталогВладельца", РабочийКаталогВладельца);
	
	Если ДанныеФайла.РабочийКаталогВладельца <> "" Тогда
		
		ИмяФайлаСПутемВРабочемКаталоге = "";
		ИмяКаталога = ""; // путь к локальному кеш здесь не используется
		ВРабочемКаталогеНаЧтение = Истина; // не используется 
		ВРабочемКаталогеВладельца = Истина;
		
		Если ВерсияСсылка <> Неопределено Тогда
			ИмяФайлаСПутемВРабочемКаталоге = ПолучитьИмяФайлаСПутемИзРегистра(ВерсияСсылка, ИмяКаталога, ВРабочемКаталогеНаЧтение, ВРабочемКаталогеВладельца);
		Иначе
			ИмяФайлаСПутемВРабочемКаталоге = ПолучитьИмяФайлаСПутемИзРегистра(ФайлСсылка.ТекущаяВерсия, ИмяКаталога, ВРабочемКаталогеНаЧтение, ВРабочемКаталогеВладельца);
		КонецЕсли;	
		
		ДанныеФайла.Вставить("ИмяФайлаСПутемВРабочемКаталоге", ИмяФайлаСПутемВРабочемКаталоге);
	КонецЕсли;
	
	Возврат ДанныеФайла;
КонецФункции

// Делает ПолучитьДанныеФайла и вычисляет количество версий файла
// Параметры
//  ФайлСсылка  - СправочникСсылка.Файлы - файл
//
// Возвращаемое значение:
//   Структура - структура с данными файла
//
Функция ПолучитьДанныеФайлаИКоличествоВерсий(ФайлСсылка) Экспорт
	
	ДанныеФайла = ПолучитьДанныеФайла(ФайлСсылка);
	КоличествоВерсий = ПолучитьКоличествоВерсий(ФайлСсылка);
	ДанныеФайла.Вставить("КоличествоВерсий", КоличествоВерсий);
	
	Возврат ДанныеФайла;
	
КонецФункции

// Формирует текст ошибки для помещения в журнал регистрации
// Параметры
//  ИнформацияОбОшибкеФункции  - ИнформацияОбОшибке
//  ФайлСсылка  - СправочникСсылка.Файлы - файл
//
// Возвращаемое значение:
//   Строка - описание ошибки
//
Функция СформироватьТекстОшибкиПолученияФайлСТомаДляАдминистратора(ИнформацияОбОшибкеФункции, ФайлСсылка) Экспорт
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Ссылка на файл: ""%1"".
		           |""%2"".'"),
		ПолучитьНавигационнуюСсылку(ФайлСсылка),
		ПодробноеПредставлениеОшибки(ИнформацияОбОшибкеФункции));
	
КонецФункции

// Делает ПолучитьДанныеФайла + ПоместитьВоВременноеХранилище (если файл хранится на диске)
// Функция возвращает структуру, содержащую различные сведения о Файле и версии
// Параметры
//  ФайлСсылка  - СправочникСсылка.Файлы - файл
//  ВерсияСсылка  - СправочникСсылка.ВерсииФайлов - версия файла
//  ИдентификаторФормы - уникальный идентификатор формы
//  РабочийКаталогВладельца - Строка - в ней возвращается рабочий каталог владельца файла
//
// Возвращаемое значение:
//   Структура - структура с данными файла
//
Функция ПолучитьДанныеФайлаДляОткрытия(ФайлСсылка,
                                       ВерсияСсылка = Неопределено,
                                       ИдентификаторФормы = Неопределено,
                                       РабочийКаталогВладельца = Неопределено,
                                       ПредыдущийАдресФайла = Неопределено) Экспорт
	
	Если ПредыдущийАдресФайла <> Неопределено Тогда
		Если НЕ ПустаяСтрока(ПредыдущийАдресФайла) И ЭтоАдресВременногоХранилища(ПредыдущийАдресФайла) Тогда
			УдалитьИзВременногоХранилища(ПредыдущийАдресФайла);
		КонецЕсли;
	КонецЕсли;
	
	ДанныеФайла = ПолучитьДанныеФайла(ФайлСсылка, ВерсияСсылка);
	
	Если РабочийКаталогВладельца = Неопределено Тогда
		РабочийКаталогВладельца = РабочийКаталогПапки(ДанныеФайла.Владелец);
	КонецЕсли;
	ДанныеФайла.Вставить("РабочийКаталогВладельца", РабочийКаталогВладельца);
	
	Если ДанныеФайла.РабочийКаталогВладельца <> "" Тогда
		ИмяФайла = ОбщегоНазначенияКлиентСервер.ПолучитьИмяСРасширением(
			ДанныеФайла.ПолноеНаименованиеВерсии, ДанныеФайла.Расширение);
		ИмяФайлаСПутемВРабочемКаталоге = РабочийКаталогВладельца + ИмяФайла;
		ДанныеФайла.Вставить("ИмяФайлаСПутемВРабочемКаталоге", ИмяФайлаСПутемВРабочемКаталоге);
	КонецЕсли;
	
	ТипХраненияФайла = ДанныеФайла.Версия.ТипХраненияФайла;
	
	Если ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске И ДанныеФайла.Версия <> Неопределено Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		Запрос = Новый Запрос;
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВерсииФайлов.ПутьКФайлу КАК ПутьКФайлу,
		|	ВерсииФайлов.Том КАК Том
		|ИЗ
		|	Справочник.ВерсииФайлов КАК ВерсииФайлов
		|ГДЕ
		|	ВерсииФайлов.Ссылка = &Версия";
		
		Запрос.Параметры.Вставить("Версия", ДанныеФайла.Версия);
		
		ДанныеФайлаТом = Справочники.ТомаХраненияФайлов.ПустаяСсылка();
		ДанныеФайлаПутьКФайлу = "";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ДанныеФайлаТом = Выборка.Том;
			ДанныеФайлаПутьКФайлу = Выборка.ПутьКФайлу;
		КонецЕсли;
		
		Если НЕ ДанныеФайлаТом.Пустая() Тогда
			ПолныйПуть = ФайловыеФункцииСлужебный.ПолныйПутьТома(ДанныеФайлаТом) + ДанныеФайлаПутьКФайлу; 
			Попытка
				ДвоичныеДанные = Новый ДвоичныеДанные(ПолныйПуть);
				// работаем только с текущей версией - для не-текущей ссылку получаем в ПолучитьНавигационнуюСсылкуДляОткрытия
				ДанныеФайла.НавигационнаяСсылкаТекущейВерсии = ПоместитьВоВременноеХранилище(ДвоичныеДанные, ИдентификаторФормы);
			Исключение
				// запись в журнал регистрации
				СообщениеОбОшибке = СформироватьТекстОшибкиПолученияФайлСТомаДляАдминистратора(
					ИнформацияОбОшибке(), ФайлСсылка);
				
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Файлы.Открытие файла'",
					     ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Ошибка,
					Метаданные.Справочники.Файлы,
					ФайлСсылка,
					СообщениеОбОшибке);
				
				ВызватьИсключение ФайловыеФункцииСлужебныйКлиентСервер.ОшибкаФайлНеНайденВХранилищеФайлов(
					ДанныеФайла.ПолноеНаименованиеВерсии + "." + ДанныеФайла.Расширение);
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	ПредыдущийАдресФайла = ДанныеФайла.НавигационнаяСсылкаТекущейВерсии;
	
	Возврат ДанныеФайла;
	
КонецФункции

// Освобождение Файла с получением данных
// Параметры
//  ФайлСсылка  - СправочникСсылка.Файлы - файл
//  ДанныеФайла  - структура с данными файла
//  УникальныйИдентификатор - уникальный идентификатор формы
//
Процедура ПолучитьДанныеФайлаИОсвободитьФайл(ФайлСсылка, ДанныеФайла, УникальныйИдентификатор = Неопределено) Экспорт
	
	ДанныеФайла = ПолучитьДанныеФайла(ФайлСсылка);
	
	ОсвободитьФайл(ДанныеФайла, УникальныйИдентификатор);
	
КонецПроцедуры

// Процедура предназначена для опубликования файла без его освобождения
// Параметры
// Файл - СправочникСсылка.Файлы - Файл, в котором обновляется версия
// ДанныеФайла  - структура с данными файла
// СоздаватьВерсию  - Булево - создавать новую версию, если Истина (если Ложь - изменяет существующую)
// АдресВременногоХранилищаФайла  - Строка - содержит адрес во временном хранилище, где находятся двоичные данные с файлом или ХранилищеЗначения - непосредственно содержит  двоичные данные с файлом
// Комментарий  - Строка - комментарий к версии
// ВремяИзменения  - Дата - дата и время изменения файла
// ВремяИзмененияУниверсальное  - Дата - UTC дата и время изменения файла
// Размер - размер файла в байтах
// ИмяБезРасширения  - Строка - имя файла без расширения
// Расширение - Строка - расширение файла
// ОтносительныйПутьКФайлу - Строка - относительный путь к файлу - не содержащий пути рабочего каталога, например "А1/Приказ.doc"
// ПолныйПутьКФайлу - полный путь к файлу на клиенте в рабочем каталоге
// АдресВременногоХранилищаТекста - Строка - содержит адрес во временном хранилище, где находятся двоичные данные с файлом текста или ХранилищеЗначения - непосредственно содержит  двоичные данные с файлом текста
// ЭтоВебКлиент - Булево - Истина, если вызов идет из веб клиента
// ТекстНеИзвлеченНаКлиенте - Булево - текст не извлечен на клиенте - т.е. его надо извлекать на сервере
// ВРабочемКаталогеВладельца - Булево - файл находится в рабочем каталоге владельца
// УникальныйИдентификатор - уникальный идентификатор формы
//
Процедура ПолучитьДанныеФайлаИОпубликоватьФайл(Файл,
                                               ДанныеФайла,
                                               СоздаватьВерсию,
                                               АдресВременногоХранилищаФайла,
                                               Комментарий,
                                               ВремяИзменения,
                                               ВремяИзмененияУниверсальное,
                                               Размер,
                                               ИмяБезРасширения,
                                               Расширение,
                                               ОтносительныйПутьКФайлу,
                                               ПолныйПутьКФайлу,
                                               АдресВременногоХранилищаТекста,
                                               ЭтоВебКлиент,
                                               ТекстНеИзвлеченНаКлиенте,
                                               ВРабочемКаталогеВладельца,
                                               УникальныйИдентификатор = Неопределено) Экспорт
	
	ДанныеФайла = ПолучитьДанныеФайла(Файл);
	
	Если Не ДанныеФайла.РедактируетТекущийПользователь Тогда
		ВызватьИсключение НСтр("ru = 'Файл не занят текущим пользователем'");
	КонецЕсли;
	
	НеМенятьЗаписьВРабочемКаталоге = Ложь;

	ОпубликоватьФайл(
		Файл,
		СоздаватьВерсию,
		АдресВременногоХранилищаФайла,
		Комментарий,
		ВремяИзменения,
		ВремяИзмененияУниверсальное,
		Размер,
		ИмяБезРасширения,
		Расширение,
		ОтносительныйПутьКФайлу,
		ПолныйПутьКФайлу,
		АдресВременногоХранилищаТекста,
		ЭтоВебКлиент,
		ТекстНеИзвлеченНаКлиенте,
		ВРабочемКаталогеВладельца,
		НеМенятьЗаписьВРабочемКаталоге,
		УникальныйИдентификатор);
	
КонецПроцедуры

// Получает синтетический рабочий каталог папки на диске (он может прийти от родительской папки)
// Параметры
//  СсылкаПапки  - СправочникСсылка.ПапкиФайлов - владелец файла
//
// Возвращаемое значение:
//   Строка  - рабочий каталог
//
Функция РабочийКаталогПапки(СсылкаПапки) Экспорт
	
	Если ТипЗнч(СсылкаПапки) <> Тип("СправочникСсылка.ПапкиФайлов") Тогда
		Возврат ""
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	РабочийКаталог = "";
	
	// Подготовить структуру отбора по измерениям
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Папка", СсылкаПапки);
	СтруктураОтбора.Вставить("Пользователь", Пользователи.ТекущийПользователь());
	
	// Получить структуру с данными ресурсов записи
	СтруктураРесурсов = РегистрыСведений.РабочиеКаталогиФайлов.Получить(СтруктураОтбора);
	
	// Получить путь из регистра
	РабочийКаталог = СтруктураРесурсов.Путь;
	
	Если НЕ ПустаяСтрока(РабочийКаталог) Тогда
		// Добавляем слэш в конце, если его нет
		РабочийКаталог = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(РабочийКаталог, ОбщегоНазначенияПовтИсп.ТипПлатформыСервера());
	КонецЕсли;
	
	Возврат РабочийКаталог;
	
КонецФункции

// Сохраняет в регистре сведений рабочий каталог папки
// Параметры
//  СсылкаПапки  - СправочникСсылка.ПапкиФайлов - владелец файла
//  РабочийКаталогВладельца - Строка - рабочий каталог папки
//
Процедура СохранитьРабочийКаталогПапки(СсылкаПапки, РабочийКаталогПапки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.РабочиеКаталогиФайлов.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.Папка.Установить(СсылкаПапки);
	НаборЗаписей.Отбор.Пользователь.Установить(Пользователи.ТекущийПользователь());
	
	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.Папка = СсылкаПапки;
	НоваяЗапись.Пользователь = Пользователи.ТекущийПользователь();
	НоваяЗапись.Путь = РабочийКаталогПапки;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Сохраняет в регистре сведений рабочий каталог папки и
// заменяет пути в регистре сведений ФайлыВРабочемКаталоге.
//
// Параметры:
//  СсылкаПапки  - СправочникСсылка.ПапкиФайлов - владелец файла
//  РабочийКаталогПапки - Строка - рабочий каталог папки
//  ИмяКаталогаПрежнееЗначение - Строка - прежнее значение рабочего каталога
//
Процедура СохранитьРабочийКаталогПапкиИЗаменитьПутиВРегистре(СсылкаПапки,
                                                        РабочийКаталогПапки,
                                                        ИмяКаталогаПрежнееЗначение) Экспорт
	
	СохранитьРабочийКаталогПапки(СсылкаПапки, РабочийКаталогПапки);
	
	// ниже заменяем пути в регистре сведений ФайлыВРабочемКаталоге
	УстановитьПривилегированныйРежим(Истина);
	
	СписокДляЗамены = Новый Массив;
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	// для каждой нашей записи находим запись в регистре сведений - оттуда берем поле Версия и Редактирует
	ЗапросВРегистр = Новый Запрос;
	ЗапросВРегистр.УстановитьПараметр("Пользователь", ТекущийПользователь);
	ЗапросВРегистр.УстановитьПараметр("Путь", ИмяКаталогаПрежнееЗначение + "%");
	ЗапросВРегистр.Текст =
	"ВЫБРАТЬ
	|	ФайлыВРабочемКаталоге.Версия КАК Версия,
	|	ФайлыВРабочемКаталоге.Путь КАК Путь,
	|	ФайлыВРабочемКаталоге.Размер КАК Размер,
	|	ФайлыВРабочемКаталоге.ДатаПомещенияВРабочийКаталог КАК ДатаПомещенияВРабочийКаталог,
	|	ФайлыВРабочемКаталоге.НаЧтение КАК НаЧтение
	|ИЗ
	|	РегистрСведений.ФайлыВРабочемКаталоге КАК ФайлыВРабочемКаталоге
	|ГДЕ
	|	ФайлыВРабочемКаталоге.Пользователь = &Пользователь
	|	И ФайлыВРабочемКаталоге.ВРабочемКаталогеВладельца = ИСТИНА
	|	И ФайлыВРабочемКаталоге.Путь ПОДОБНО &Путь";
	
	РезультатЗапроса = ЗапросВРегистр.Выполнить(); 
	
	Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НовыйПуть = Выборка.Путь;
		НовыйПуть = СтрЗаменить(НовыйПуть, ИмяКаталогаПрежнееЗначение, РабочийКаталогПапки);
		
		СтруктураЗаписи = Новый Структура;
		СтруктураЗаписи.Вставить("Версия",                       Выборка.Версия);
		СтруктураЗаписи.Вставить("Путь",                         НовыйПуть);
		СтруктураЗаписи.Вставить("Размер",                       Выборка.Размер);
		СтруктураЗаписи.Вставить("ДатаПомещенияВРабочийКаталог", Выборка.ДатаПомещенияВРабочийКаталог);
		СтруктураЗаписи.Вставить("НаЧтение",                     Выборка.НаЧтение);
		
		СписокДляЗамены.Добавить(СтруктураЗаписи);
		
	КонецЦикла;
	
	Для Каждого СтруктураЗаписи из СписокДляЗамены Цикл
		
		ВРабочемКаталогеВладельца = Истина;
		ЗаписатьСтруктуруЗаписиВРегистр(
			СтруктураЗаписи.Версия,
			СтруктураЗаписи.Путь,
			СтруктураЗаписи.Размер,
			СтруктураЗаписи.ДатаПомещенияВРабочийКаталог,
			СтруктураЗаписи.НаЧтение,
			ВРабочемКаталогеВладельца);
		
	КонецЦикла;
	
КонецПроцедуры

// После смены пути запишем заново - с теми же значениями остальных полей
// Параметры
//  Версия - СправочникСсылка.ВерсииФайлов - версия
//  Путь - Строка - относительный путь внутри рабочего каталога
//  Размер  - размер файла в байтах
//  ДатаПомещенияВРабочийКаталог - Дата - дата помещения файла в рабочий каталог
//  НаЧтение - Булево - файл помещен на чтение
//  ВРабочемКаталогеВладельца - Булево - файл в рабочем каталоге владельца (а не в основном рабочем каталоге)
//
Процедура ЗаписатьСтруктуруЗаписиВРегистр(Версия,
                                          Путь,
                                          Размер,
                                          ДатаПомещенияВРабочийКаталог,
                                          НаЧтение,
                                          ВРабочемКаталогеВладельца) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Создать набор записей
	НаборЗаписей = РегистрыСведений.ФайлыВРабочемКаталоге.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.Версия.Установить(Версия);
	НаборЗаписей.Отбор.Пользователь.Установить(Пользователи.ТекущийПользователь());

	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.Версия = Версия;
	НоваяЗапись.Путь = Путь;
	НоваяЗапись.Размер = Размер;
	НоваяЗапись.ДатаПомещенияВРабочийКаталог = ДатаПомещенияВРабочийКаталог;
	НоваяЗапись.Пользователь = Пользователи.ТекущийПользователь();

	НоваяЗапись.НаЧтение = НаЧтение;
	НоваяЗапись.ВРабочемКаталогеВладельца = ВРабочемКаталогеВладельца;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Очищает в регистре сведений рабочий каталог папки
// Параметры
//  СсылкаПапки  - СправочникСсылка.ПапкиФайлов - владелец файла
//
Процедура ОчиститьРабочийКаталог(СсылкаПапки) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.РабочиеКаталогиФайлов.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.Папка.Установить(СсылкаПапки);
	НаборЗаписей.Отбор.Пользователь.Установить(Пользователи.ТекущийПользователь());
	
	// не добавляем записи в набор - чтобы все стереть
	НаборЗаписей.Записать();
	
	
	// для дочерних папок очищаем рабочие каталоги
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ПапкиФайлов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ПапкиФайлов КАК ПапкиФайлов
	|ГДЕ
	|	ПапкиФайлов.Родитель = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", СсылкаПапки);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		ОчиститьРабочийКаталог(Выборка.Ссылка);
	КонецЦикла;
	
КонецПроцедуры

// Находит запись в регистре сведений ФайлыВРабочемКаталоге по пути файла на диске (относительному).
//
// Параметры:
//  Имяфайла - Строка - имя файла с относительным путем (без пути к рабочему каталогу).
//
// Возвращаемое значение:
//  Структура со свойствами:
//    Версия            - СправочникСсылка.ВерсииФайлов - найденная версия.
//    ДатаПомещения     - Дата помещения файла в рабочий каталог.
//    Владелец          - Ссылка - владелец файла.
//    НомерВерсии       - Число - номер версии.
//    ВРегистреНаЧтение - Булево - значение ресурса НаЧтение.
//    ВРегистреКодФайла - Число сюда помещается код файла.
//    ВРегистреПапка    - СправочникСсылка.ПапкиФайлов - папка файла.
//
Функция НайтиВРегистреПоПути(Имяфайла) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НайденныеСвойства = Новый Структура;
	НайденныеСвойства.Вставить("ФайлЕстьВРегистре", Ложь);
	НайденныеСвойства.Вставить("Версия", Справочники.ВерсииФайлов.ПолучитьСсылку());
	НайденныеСвойства.Вставить("ДатаПомещения");
	НайденныеСвойства.Вставить("Владелец");
	НайденныеСвойства.Вставить("НомерВерсии");
	НайденныеСвойства.Вставить("ВРегистреНаЧтение");
	НайденныеСвойства.Вставить("ВРегистреКодФайла");
	НайденныеСвойства.Вставить("ВРегистреПапка");
	
	// Для каждого по пути находим запись в регистре сведений - оттуда берем поле 
	// Версия и Размер и ДатаПомещенияВРабочийКаталог
	ЗапросВРегистр = Новый Запрос;
	ЗапросВРегистр.УстановитьПараметр("Имяфайла", Имяфайла);
	ЗапросВРегистр.УстановитьПараметр("Пользователь", Пользователи.ТекущийПользователь());
	ЗапросВРегистр.Текст =
	"ВЫБРАТЬ
	|	ФайлыВРабочемКаталоге.Версия КАК Версия,
	|	ФайлыВРабочемКаталоге.ДатаПомещенияВРабочийКаталог КАК ДатаПомещения,
	|	ФайлыВРабочемКаталоге.НаЧтение КАК ВРегистреНаЧтение,
	|	ФайлыВРабочемКаталоге.Версия.Владелец КАК Владелец,
	|	ФайлыВРабочемКаталоге.Версия.НомерВерсии КАК НомерВерсии,
	|	ФайлыВРабочемКаталоге.Версия.Владелец.Код КАК ВРегистреКодФайла,
	|	ФайлыВРабочемКаталоге.Версия.Владелец.ВладелецФайла КАК ВРегистреПапка
	|ИЗ
	|	РегистрСведений.ФайлыВРабочемКаталоге КАК ФайлыВРабочемКаталоге
	|ГДЕ
	|	ФайлыВРабочемКаталоге.Путь = &Имяфайла
	|	И ФайлыВРабочемКаталоге.Пользователь = &Пользователь";
	
	РезультатЗапроса = ЗапросВРегистр.Выполнить(); 
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		НайденныеСвойства.ФайлЕстьВРегистре = Истина;
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		ЗаполнитьЗначенияСвойств(НайденныеСвойства, Выборка);
	КонецЕсли;
	
	Возврат НайденныеСвойства;
	
КонецФункции

// Возвращает с сервера на клиент идентификатор текущего пользователя
// Возвращаемое значение:
//   УникальныйИдентификатор  - Уникальный идентификатор текущего пользователя
//
Функция ПараметрыСеансаИдентификаторТекущегоПользователя() Экспорт
	
	Возврат Пользователи.ТекущийПользователь().УникальныйИдентификатор();
	
КонецФункции

// Находит в регистре сведений ФайлыВРабочемКаталоге информацию о ВерсииФайла (путь к файлу версии в рабочем каталоге, и статус - на чтение или на редактирование)
// Параметры
//  Версия - СправочникСсылка.ВерсииФайлов - версия
//  ИмяКаталога - путь рабочего каталога
//  ВРабочемКаталогеНаЧтение - Булево - файл помещен на чтение
//  ВРабочемКаталогеВладельца - Булево - файл в рабочем каталоге владельца (а не в основном рабочем каталоге)
//
Функция ПолучитьИмяФайлаСПутемИзРегистра(Версия,
                                         ИмяКаталога,
                                         ВРабочемКаталогеНаЧтение,
                                         ВРабочемКаталогеВладельца) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИмяФайлаСПутем = "";
	
	// Подготовить структуру отбора по измерениям      
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Версия", Версия.Ссылка);
	СтруктураОтбора.Вставить("Пользователь", Пользователи.ТекущийПользователь());
	   
	// Получить структуру с данными ресурсов записи
	СтруктураРесурсов = РегистрыСведений.ФайлыВРабочемКаталоге.Получить(СтруктураОтбора);
	   
	// Получить путь из регистра
	ИмяФайлаСПутем = СтруктураРесурсов.Путь;
	ВРабочемКаталогеНаЧтение = СтруктураРесурсов.НаЧтение;
	ВРабочемКаталогеВладельца = СтруктураРесурсов.ВРабочемКаталогеВладельца;
	Если ИмяФайлаСПутем <> "" И ВРабочемКаталогеВладельца = Ложь Тогда
		ИмяФайлаСПутем = ИмяКаталога + ИмяФайлаСПутем;
	КонецЕсли;
	
	Возврат ИмяФайлаСПутем;
	
КонецФункции

// Находит в регистре сведений ФайлыВРабочемКаталоге информацию о ВерсииФайла (путь к файлу версии в рабочем каталоге)
// Параметры
//  Ссылка  - СправочникСсылка.ВерсииФайлов - версия файла
//
// Возвращаемое значение:
//   Строка - имя с путем в рабочем каталоге
//
Функция ПолучитьИмяФайлаИзРегистра(Ссылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИмяФайлаСПутем = "";
	
	// Подготовить структуру отбора по измерениям      
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Версия", Ссылка);
	СтруктураОтбора.Вставить("Пользователь", Пользователи.ТекущийПользователь());
	   
	// Получить структуру с данными ресурсов записи
	СтруктураРесурсов = РегистрыСведений.ФайлыВРабочемКаталоге.Получить(СтруктураОтбора);
	   
	// Получить путь из регистра
	ИмяФайлаСПутем = СтруктураРесурсов.Путь;
	
	Возврат ИмяФайлаСПутем;
	
КонецФункции

// Записать в регистр сведений ФайлыВРабочемКаталоге информацию о пути файла
// Параметры
//  ТекущаяВерсия - СправочникСсылка.ВерсииФайлов - версия
//  ИмяФайлаСПутем - имя с путем в рабочем каталоге
//  НаЧтение - Булево - файл помещен на чтение
//  ВРабочемКаталогеВладельца - Булево - файл в рабочем каталоге владельца (а не в основном рабочем каталоге)
//
Процедура ЗаписатьИмяФайлаСПутемВРегистр(ТекущаяВерсия,
                                         ИмяФайлаСПутем,
                                         НаЧтение,
                                         ВРабочемКаталогеВладельца) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Создать набор записей
	НаборЗаписей = РегистрыСведений.ФайлыВРабочемКаталоге.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.Версия.Установить(ТекущаяВерсия.Ссылка);
	НаборЗаписей.Отбор.Пользователь.Установить(Пользователи.ТекущийПользователь());

	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.Версия = ТекущаяВерсия.Ссылка;
	НоваяЗапись.Путь = ИмяФайлаСПутем;
	НоваяЗапись.Размер = ТекущаяВерсия.Размер;
	НоваяЗапись.ДатаПомещенияВРабочийКаталог = ТекущаяДатаСеанса();
	НоваяЗапись.Пользователь = Пользователи.ТекущийПользователь();

	НоваяЗапись.НаЧтение = НаЧтение;
	НоваяЗапись.ВРабочемКаталогеВладельца = ВРабочемКаталогеВладельца;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Удалить из регистра сведений ФайлыВРабочемКаталоге запись о данной версии файла
// Параметры
//  Версия - СправочникСсылка.ВерсииФайлов - версия
//
Процедура УдалитьИзРегистра(Версия) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.ФайлыВРабочемКаталоге.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.Версия.Установить(Версия);
	НаборЗаписей.Отбор.Пользователь.Установить(Пользователи.ТекущийПользователь());
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Удалить из регистра сведений ФайлыВРабочемКаталоге все записи,
// кроме записей о файлах занятых текущим пользователем.
//
Процедура ОчиститьВсеСвоиКромеЗанятых() Экспорт
	
	// Отбираем все в регистре сведений. Перебираем - находим те, что не заняты текущим пользователем -
	//  и все удаляем - считаем, что на диске они уже удалены
	
	УстановитьПривилегированныйРежим(Истина);
	
	СписокУдалить = Новый Массив;
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	// для каждой нашей записи находим запись в регистре сведений - оттуда берем поле Версия и Редактирует
	ЗапросВРегистр = Новый Запрос;
	ЗапросВРегистр.УстановитьПараметр("Пользователь", ТекущийПользователь);
	ЗапросВРегистр.Текст =
	"ВЫБРАТЬ
	|	ФайлыВРабочемКаталоге.Версия КАК Версия,
	|	ФайлыВРабочемКаталоге.Версия.Владелец.Редактирует КАК Редактирует
	|ИЗ
	|	РегистрСведений.ФайлыВРабочемКаталоге КАК ФайлыВРабочемКаталоге
	|ГДЕ
	|	ФайлыВРабочемКаталоге.Пользователь = &Пользователь
	|	И ФайлыВРабочемКаталоге.ВРабочемКаталогеВладельца = ЛОЖЬ";
	
	РезультатЗапроса = ЗапросВРегистр.Выполнить(); 
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
				
			Если Выборка.Редактирует <> ТекущийПользователь Тогда
				СписокУдалить.Добавить(Выборка.Версия);
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Для Каждого Версия из СписокУдалить Цикл
		// Создать набор записей
		НаборЗаписей = РегистрыСведений.ФайлыВРабочемКаталоге.СоздатьНаборЗаписей();
		
		НаборЗаписей.Отбор.Версия.Установить(Версия);
		НаборЗаписей.Отбор.Пользователь.Установить(ТекущийПользователь);
		
		НаборЗаписей.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Удалить из регистра сведений ФайлыВРабочемКаталоге запись о старой версии и внести запись о новой
// Параметры
//  СтараяВерсия - СправочникСсылка.ВерсииФайлов - старая версия
//  НоваяВерсия - СправочникСсылка.ВерсииФайлов - новая версия
//  ПолноеИмяФайла - имя с путем в рабочем каталоге
//  ИмяКаталога - путь рабочего каталога
//  ВРабочемКаталогеВладельца - Булево - файл в рабочем каталоге владельца (а не в основном рабочем каталоге)
//
Процедура УдалитьВерсиюИЗанестиИнформациюФайлаВРегистр(СтараяВерсия,
                                                       НоваяВерсия,
                                                       ПолноеИмяФайла,
                                                       ИмяКаталога,
                                                       ВРабочемКаталогеВладельца)
	
	УдалитьИзРегистра(СтараяВерсия);
	НаЧтение = Истина;
	ЗанестиИнформациюФайлаВРегистр(НоваяВерсия, ПолноеИмяФайла, ИмяКаталога, НаЧтение, 0, ВРабочемКаталогеВладельца);
	
КонецПроцедуры

// Записать в регистр сведений ФайлыВРабочемКаталоге информацию о пути файла
//  Версия - СправочникСсылка.ВерсииФайлов - версия
//  ПолныйПуть - Строка - полный путь файла
//  ИмяКаталога - путь рабочего каталога
//  НаЧтение - Булево - файл помещен на чтение
//  РазмерФайла  - размер файла в байтах
//  ВРабочемКаталогеВладельца - Булево - файл в рабочем каталоге владельца (а не в основном рабочем каталоге)
//
Процедура ЗанестиИнформациюФайлаВРегистр(Версия,
                                         ПолныйПуть,
                                         ИмяКаталога,
                                         НаЧтение,
                                         РазмерФайла,
                                         ВРабочемКаталогеВладельца) Экспорт
	ИмяФайлаСПутем = ПолныйПуть;
	
	Если ВРабочемКаталогеВладельца = Ложь Тогда
		Если Найти(ПолныйПуть, ИмяКаталога) = 1 Тогда
			ИмяФайлаСПутем = Сред(ПолныйПуть, СтрДлина(ИмяКаталога) + 1);
		КонецЕсли;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Создать набор записей
	НаборЗаписей = РегистрыСведений.ФайлыВРабочемКаталоге.СоздатьНаборЗаписей();
	
	НаборЗаписей.Отбор.Версия.Установить(Версия.Ссылка);
	НаборЗаписей.Отбор.Пользователь.Установить(Пользователи.ТекущийПользователь());

	НоваяЗапись = НаборЗаписей.Добавить();
	НоваяЗапись.Версия = Версия.Ссылка;
	НоваяЗапись.Путь = ИмяФайлаСПутем;

	Если РазмерФайла <> 0 Тогда
		НоваяЗапись.Размер = РазмерФайла;
	Иначе
		НоваяЗапись.Размер = Версия.Размер;
	КонецЕсли;

	НоваяЗапись.ДатаПомещенияВРабочийКаталог = ТекущаяДатаСеанса();
	НоваяЗапись.Пользователь = Пользователи.ТекущийПользователь();
	НоваяЗапись.НаЧтение = НаЧтение;
	НоваяЗапись.ВРабочемКаталогеВладельца = ВРабочемКаталогеВладельца;

	НаборЗаписей.Записать();
	
КонецПроцедуры

// Возвращает массив файлов в регистре сведений ФайлыВРабочемКаталоге
//
// Возвращаемое значение:
//   Массив - массив структур описывающих файлы
//
Функция СписокФайловВРегистре() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СписокФайлов = Новый Массив;
	ТекущийПользователь = Пользователи.ТекущийПользователь();
	
	// Для каждой нашей записи находим запись в регистре сведений - оттуда берем поле Версия и Редактирует
	ЗапросВРегистр = Новый Запрос;
	ЗапросВРегистр.УстановитьПараметр("Пользователь", ТекущийПользователь);
	ЗапросВРегистр.Текст =
	"ВЫБРАТЬ
	|	ФайлыВРабочемКаталоге.Версия КАК Ссылка,
	|	ФайлыВРабочемКаталоге.НаЧтение КАК НаЧтение,
	|	ФайлыВРабочемКаталоге.Размер КАК Размер,
	|	ФайлыВРабочемКаталоге.Путь КАК Путь,
	|	ФайлыВРабочемКаталоге.Версия.ДатаМодификацииУниверсальная КАК ДатаМодификацииУниверсальная,
	|	ФайлыВРабочемКаталоге.Версия.ПолноеНаименование КАК ПолноеНаименование,
	|	ФайлыВРабочемКаталоге.Версия.ИндексКартинки КАК ИндексКартинки,
	|	ФайлыВРабочемКаталоге.Версия.Владелец.Редактирует КАК Редактирует
	|ИЗ
	|	РегистрСведений.ФайлыВРабочемКаталоге КАК ФайлыВРабочемКаталоге
	|ГДЕ
	|	ФайлыВРабочемКаталоге.Пользователь = &Пользователь
	|	И ФайлыВРабочемКаталоге.ВРабочемКаталогеВладельца = ЛОЖЬ";
	
	РезультатЗапроса = ЗапросВРегистр.Выполнить(); 
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Запись = Новый Структура;
			Запись.Вставить("ДатаМодификацииУниверсальная", Выборка.ДатаМодификацииУниверсальная);
			Запись.Вставить("ПолноеНаименование",           Выборка.ПолноеНаименование);
			Запись.Вставить("ИндексКартинки",               Выборка.ИндексКартинки);
			Запись.Вставить("Размер",                       Выборка.Размер);
			Запись.Вставить("Ссылка",                       Выборка.Ссылка);
			Запись.Вставить("Редактирует",                  Выборка.Редактирует);
			Запись.Вставить("НаЧтение",                     Выборка.НаЧтение);
			Запись.Вставить("ЧастичныйПуть",                Выборка.Путь);
			
			СписокФайлов.Добавить(Запись);
		КонецЦикла;
	КонецЕсли;
	
	Возврат СписокФайлов;
	
КонецФункции

// Создать папку файлов
// Параметры
// Имя - Строка - имя папки
// Родитель - СправочникСсылка.ПапкиФайлов - родительская папка
// Пользователь - СправочникСсылка.Пользователи - ответственный за папку
//
// Возвращаемое значение:
//   СправочникСсылка.ПапкиФайлов
//
Функция СправочникиПапкиСоздатьЭлемент(Имя, Родитель, Пользователь = Неопределено) Экспорт
	
	Папка = Справочники.ПапкиФайлов.СоздатьЭлемент();
	Папка.Наименование = Имя;
	Папка.Родитель = Родитель;
	Папка.ДатаСоздания = ТекущаяДатаСеанса();
	
	Если Пользователь = Неопределено Тогда
		Папка.Ответственный = Пользователи.ТекущийПользователь();
	Иначе	
		Папка.Ответственный = Пользователь;
	КонецЕсли;
	
	Папка.Записать();
	Возврат Папка.Ссылка;
	
КонецФункции

// Формирует отчет для файлов с ошибками
// Параметры
// МассивИменФайловСОшибками - массив строк путей к файлам
//
// Возвращаемое значение:
//   ТабличныйДокумент с отчетом
//
Функция ИмпортФайловСформироватьОтчет(МассивИменФайловСОшибками) Экспорт
	
	ТабДок = Новый ТабличныйДокумент;
	ТабМакет = Справочники.Файлы.ПолучитьМакет("МакетОтчета");
	
	ОбластьЗаголовок = ТабМакет.ПолучитьОбласть("Заголовок");
	ОбластьЗаголовок.Параметры.Описание = "Файлы с ошибками:";
	ТабДок.Вывести(ОбластьЗаголовок);
	
	ОбластьСтрока = ТабМакет.ПолучитьОбласть("Строка");

	Для Каждого Выборка Из МассивИменФайловСОшибками Цикл
		ОбластьСтрока.Параметры.Название = Выборка.ИмяФайла;
		ОбластьСтрока.Параметры.Ошибка = Выборка.Ошибка;
		ТабДок.Вывести(ОбластьСтрока);
	КонецЦикла;
	
	Отчет = Новый ТабличныйДокумент;
	Отчет.Вывести(ТабДок);

	Возврат Отчет;
	
КонецФункции

// Сортирует массив структур по полю Дата - на сервере, т.к. на тонком клиенте нет ТаблицаЗначений
//
// Параметры
// МассивСтруктур - массив структур описаний файлов
//
Процедура СортироватьМассивСтруктур(МассивСтруктур) Экспорт
	
	ТаблицаФайлов = Новый ТаблицаЗначений;
	ТаблицаФайлов.Колонки.Добавить("Путь");
	ТаблицаФайлов.Колонки.Добавить("Версия");
	ТаблицаФайлов.Колонки.Добавить("Размер");
	
	ТаблицаФайлов.Колонки.Добавить("ДатаПомещенияВРабочийКаталог", Новый ОписаниеТипов("Дата"));
	
	Для Каждого Строка из МассивСтруктур Цикл
		НоваяСтрока = ТаблицаФайлов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка, "Путь, Размер, Версия, ДатаПомещенияВРабочийКаталог");
	КонецЦикла;
	
	// Сортировка по дате - в начале будут самые давно помещенные в рабочий каталог
	ТаблицаФайлов.Сортировать("ДатаПомещенияВРабочийКаталог Возр");  
	
	МассивСтруктурВозврат = Новый Массив;
	
	Для Каждого Строка из ТаблицаФайлов Цикл
		Запись = Новый Структура;
		Запись.Вставить("Путь", Строка.Путь);
		Запись.Вставить("Размер", Строка.Размер);
		Запись.Вставить("Версия", Строка.Версия);
		Запись.Вставить("ДатаПомещенияВРабочийКаталог", Строка.ДатаПомещенияВРабочийКаталог);
		МассивСтруктурВозврат.Добавить(Запись);
	КонецЦикла;
	
	МассивСтруктур = МассивСтруктурВозврат;
	
КонецПроцедуры

// Возвращает настройку - Спрашивать режим редактирования при открытии файла
// Возвращаемое значение:
//   Булево - Спрашивать режим редактирования при открытии файла
//
Функция СпрашиватьРежимРедактированияПриОткрытииФайла()
	СпрашиватьРежимРедактированияПриОткрытииФайла = 
		ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиОткрытияФайлов", "СпрашиватьРежимРедактированияПриОткрытииФайла");
	Если СпрашиватьРежимРедактированияПриОткрытииФайла = Неопределено Тогда
		СпрашиватьРежимРедактированияПриОткрытииФайла = Истина;
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("НастройкиОткрытияФайлов", "СпрашиватьРежимРедактированияПриОткрытииФайла", СпрашиватьРежимРедактированияПриОткрытииФайла);
	КонецЕсли;
	
	Возврат СпрашиватьРежимРедактированияПриОткрытииФайла;
КонецФункции

// Считаем ДействиеПоДвойномуЩелчкуМыши - если первый раз - поставим правильное значение
//
// Возвращаемое значение:
//   Строка - Действие по двойному щелчку мыши
//
Функция ДействиеПоДвойномуЩелчкуМыши()
	
	КакОткрывать = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"НастройкиОткрытияФайлов", "ДействиеПоДвойномуЩелчкуМыши");
	
	Если КакОткрывать = Неопределено
	 ИЛИ КакОткрывать = Перечисления.ДействияСФайламиПоДвойномуЩелчку.ПустаяСсылка() Тогда
		
		КакОткрывать = Перечисления.ДействияСФайламиПоДвойномуЩелчку.ОткрыватьФайл;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"НастройкиОткрытияФайлов", "ДействиеПоДвойномуЩелчкуМыши", КакОткрывать);
	КонецЕсли;
	
	Если КакОткрывать = Перечисления.ДействияСФайламиПоДвойномуЩелчку.ОткрыватьФайл Тогда
		Возврат "ОткрыватьФайл";
	Иначе
		Возврат "ОткрыватьКарточку";
	КонецЕсли;
	
КонецФункции

// Считаем из настроек СпособСравненияВерсийФайлов
//
// Возвращаемое значение:
//   Строка - Способ сравнения версий файлов
//
Функция СпособСравненияВерсийФайлов()
	
	СпособСравнения = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"НастройкиСравненияФайлов", "СпособСравненияВерсийФайлов");
	
	Если СпособСравнения = Перечисления.СпособыСравненияВерсийФайлов.MicrosoftOfficeWord Тогда
		Возврат "MicrosoftOfficeWord";
		
	ИначеЕсли СпособСравнения = Перечисления.СпособыСравненияВерсийФайлов.OpenOfficeOrgWriter Тогда
		Возврат "OpenOfficeOrgWriter";
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Функция возвращает количество Файлов, занятых текущим пользователем
// в разрезе владельца
// Параметры
//  ВладелецФайла  - ЛюбаяСсылка - владелец файла
//
// Возвращаемое значение:
//   Число  - количество занятых файлов
//
Функция КоличествоФайловЗанятыхТекущимПользователем(ВладелецФайла) Экспорт
	
	КоличествоЗанятыхФайлов = ПолучитьКоличествоЗанятыхФайлов(ВладелецФайла, Пользователи.ТекущийПользователь());
	Возврат КоличествоЗанятыхФайлов;
	
КонецФункции

// Получает значение настройки  ПоказыватьКолонкуРазмер
// Возвращаемое значение:
//   Булево - Показывать колонку размер
//
Функция ПолучитьПоказыватьКолонкуРазмер() Экспорт
	ПоказыватьКолонкуРазмер = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиПрограммы", "ПоказыватьКолонкуРазмер");
	Если ПоказыватьКолонкуРазмер = Неопределено Тогда
		ПоказыватьКолонкуРазмер = Ложь;
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("НастройкиПрограммы", "ПоказыватьКолонкуРазмер", ПоказыватьКолонкуРазмер);
	КонецЕсли;
	
	Возврат ПоказыватьКолонкуРазмер;
	
КонецФункции

// Функция меняет ВладелецФайла объектам типа Справочник.Файл, вернет Истина при успехе
// Параметры
//  МассивСсылокНаФайлы - Массив - массив файлов
//  НовыйВладелецФайла  - ЛюбаяСсылка - новый владелец файла
//
// Возвращаемое значение:
//   Булево  - успешно ли выполнена операция
//
Функция УстановитьВладельцаФайла(МассивСсылокНаФайлы, НовыйВладелецФайла) Экспорт
	Если МассивСсылокНаФайлы.Количество() = 0 Или Не ЗначениеЗаполнено(НовыйВладелецФайла) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// тот же родитель - ничего делать не надо
	Если МассивСсылокНаФайлы.Количество() > 0 И (МассивСсылокНаФайлы[0].ВладелецФайла = НовыйВладелецФайла) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
	
		Для Каждого ФайлПринятый Из МассивСсылокНаФайлы Цикл
			ФайлОбъект = ФайлПринятый.ПолучитьОбъект();
			ФайлОбъект.Заблокировать();
			ФайлОбъект.ВладелецФайла = НовыйВладелецФайла;
			ФайлОбъект.Записать();
		КонецЦикла;
	
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// Вернет Истина если есть зацикливание (если одну из папок переносим в ее же дочернюю папку)
// Параметры
//  МассивСсылокНаФайлы - Массив - массив файлов
//  НовыйРодитель  - ЛюбаяСсылка - новый владелец файла
//
// Возвращаемое значение:
//   Булево  - есть зацикливание
//
Функция ЕстьЗацикливание(Знач МассивСсылокНаФайлы, НовыйРодитель)
	
	Если МассивСсылокНаФайлы.Найти(НовыйРодитель) <> Неопределено Тогда
		Возврат Истина; // нашли зацикливание
	КонецЕсли;
	
	Родитель = НовыйРодитель.Родитель;
	Если Родитель.Пустая() Тогда // дошли до корня
		Возврат Ложь;
	КонецЕсли;
	
	Если ЕстьЗацикливание(МассивСсылокНаФайлы, Родитель) = Истина Тогда
		Возврат Истина; // нашли зацикливание
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Функция меняет свойство Родитель объектам типа Справочник.ПапкиФайла, вернет Истина при успехе, 
// в переменной НайденоЗацикливание вернет Истина, если одну из папок переносим в ее же дочернюю папку
//
// Параметры
//  МассивСсылокНаФайлы - Массив - массив файлов
//  НовыйРодитель  - ЛюбаяСсылка - новый владелец файла
//  НайденоЗацикливание - Булево - возвращает Истина, если найдено зацикливание
//
// Возвращаемое значение:
//   Булево  - успешно ли выполнена операция
//
Функция СменитьРодителяПапок(МассивСсылокНаФайлы, НовыйРодитель, НайденоЗацикливание) Экспорт
	НайденоЗацикливание = Ложь;
	
	Если МассивСсылокНаФайлы.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// тот же родитель - ничего делать не надо
	Если МассивСсылокНаФайлы.Количество() = 1 И (МассивСсылокНаФайлы[0].Родитель = НовыйРодитель) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ЕстьЗацикливание(МассивСсылокНаФайлы, НовыйРодитель) Тогда
		НайденоЗацикливание = Истина;
		Возврат Ложь;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
	
		Для Каждого ФайлПринятый Из МассивСсылокНаФайлы Цикл
			ФайлОбъект = ФайлПринятый.ПолучитьОбъект();
			ФайлОбъект.Заблокировать();
			ФайлОбъект.Родитель = НовыйРодитель;
			ФайлОбъект.Записать();
		КонецЦикла;
	
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат Истина;
	
КонецФункции

// Вернет Истина, если в указанном элементе справочника ПапкиФайлов есть дочерний элемент с таким именем
// Параметры
//  ИмяФайла  - имя папки
//  Родитель - СправочникССылка.ПапкиФайлов - Родитель папки
//  ПерваяПапкаСТакимЖеИменем - СправочникССылка.ПапкиФайлов - первая же найденная папка с указанным именем
//
// Возвращаемое значение:
//   Булево  - есть дочерний элемент с таким именем
//
Функция ЕстьПапкаСТакимИменем(ИмяФайла, Родитель, ПерваяПапкаСТакимЖеИменем) Экспорт
	
	ПерваяПапкаСТакимЖеИменем = Справочники.ПапкиФайлов.ПустаяСсылка();
	
	ЗапросВПапки = Новый Запрос;
	ЗапросВПапки.УстановитьПараметр("Наименование", Имяфайла);
	ЗапросВПапки.УстановитьПараметр("Родитель", Родитель);
	ЗапросВПапки.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ПапкиФайлов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ПапкиФайлов КАК ПапкиФайлов
	|ГДЕ
	|	ПапкиФайлов.Наименование = &Наименование
	|	И ПапкиФайлов.Родитель = &Родитель";
	
	РезультатЗапроса = ЗапросВПапки.Выполнить(); 
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ВыборкаЗапроса = РезультатЗапроса.Выгрузить();
		ПерваяПапкаСТакимЖеИменем = ВыборкаЗапроса[0].Ссылка;
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Вернет Истина, если в указанном элементе справочника Файлы есть файл с таким именем
// Параметры
//  ИмяФайла  - имя файла
//  Родитель - ЛюбаяСсылка - владелец файла
//  ПерваяПапкаСТакимЖеИменем - СправочникССылка.ПапкиФайлов - первая же найденная папка с указанным именем
//
// Возвращаемое значение:
//   Булево  - есть дочерний элемент с таким именем
//
Функция ЕстьФайлСТакимИменем(ИмяФайла, Родитель) Экспорт
	
	ЗапросВПапки = Новый Запрос;
	ЗапросВПапки.УстановитьПараметр("Наименование", Имяфайла);
	ЗапросВПапки.УстановитьПараметр("Родитель", Родитель);
	ЗапросВПапки.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	Файлы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Файлы КАК Файлы
	|ГДЕ
	|	Файлы.ПолноеНаименование = &Наименование
	|	И Файлы.ВладелецФайла = &Родитель";
	
	РезультатЗапроса = ЗапросВПапки.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Для справочника ВерсииФайлов переименует файл на диске, если ТипХраненияФайла = ВТомахНаДиске
// Параметры
//  Версия  - СправочникСсылка.ВерсииФайлов - версия файла
//  СтароеНаименование - Строка - старое наименование
//  НовоеНаименование - Строка - новое наименование
//
Процедура ПереименоватьФайлВерсииНаДиске(Версия,
                                         СтароеНаименование,
                                         НовоеНаименование,
                                         УникальныйИдентификатор = Неопределено) Экспорт
	
	Если НЕ Версия.Том.Пустая() Тогда
		ВерсияОбъект = Версия.ПолучитьОбъект();
		ЗаблокироватьДанныеДляРедактирования(Версия, , УникальныйИдентификатор);
		
		СтарыйПолныйПуть = ФайловыеФункцииСлужебный.ПолныйПутьТома(Версия.Том) + Версия.ПутьКФайлу; 
		
		ФайлНаДиске = Новый Файл(СтарыйПолныйПуть);
		ПолныйПуть = ФайлНаДиске.Путь;
		ИмяБезРасширения = ФайлНаДиске.ИмяБезРасширения;
		Расширение = ФайлНаДиске.Расширение;
		НовоеИмяБезРасширения = СтрЗаменить(ИмяБезРасширения, СтароеНаименование, НовоеНаименование);
		
		НовыйПолныйПуть = ПолныйПуть + НовоеИмяБезРасширения + Расширение;
		ПолныйПутьКТому = ФайловыеФункцииСлужебный.ПолныйПутьТома(Версия.Том);
		НовыйЧастичныйПуть = Прав(НовыйПолныйПуть, СтрДлина(НовыйПолныйПуть) - СтрДлина(ПолныйПутьКТому));
	
		ПереместитьФайл(СтарыйПолныйПуть, НовыйПолныйПуть);
		ВерсияОбъект.ПутьКФайлу = НовыйЧастичныйПуть;
		ВерсияОбъект.Записать();
		РазблокироватьДанныеДляРедактирования(Версия, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает количество занятых файлов
// Параметры
// ВладелецФайла - ЛюбаяСсылка - владелец файла
// Редактирует - СправочникССылка.Пользователи - ссылка на пользователя, занявшего файл
// 
// Возвращаемое значение:
//   Число  - число занятых файлов
//
Функция ПолучитьКоличествоЗанятыхФайлов(ВладелецФайла = Неопределено, Редактирует = Неопределено) Экспорт
	
	Количество = 0;
	
	Если НЕ ПравоДоступа("Чтение", Метаданные.Справочники.Файлы) Тогда
		Возврат 0;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Файлы.Ссылка КАК Ссылка,
	|	Файлы.Представление КАК Представление
	|ИЗ
	|	Справочник.Файлы КАК Файлы
	|ГДЕ
	|	Файлы.Редактирует <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)";
	
	Если Редактирует <> Неопределено Тогда 
		Запрос.Текст = Запрос.Текст + " И Файлы.Редактирует = &Редактирует ";
		Запрос.УстановитьПараметр("Редактирует", Редактирует);
	КонецЕсли;
	
	Если ВладелецФайла <> Неопределено Тогда 
		Запрос.Текст = Запрос.Текст + " И Файлы.ВладелецФайла = &ВладелецФайла ";
		Запрос.УстановитьПараметр("ВладелецФайла", ВладелецФайла);
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Количество = Количество + 1;
	КонецЦикла;
	
	Возврат Количество;
	
КонецФункции

// Получает данные для переноса файла из одного списка приложенных файлов в другой
//
// Параметры:
// ФайлМассив - массив ссылок на файлы или СправочникСсылка.Файлы
// ВладелецФайла - ЛюбаяСсылка - владелец файла
//
// Возвращаемое значение:
//   ТаблицаЗначений - описания файлов
//
Функция ПолучитьДанныеДляПереносаВПриложенныеФайлы(ФайлМассив, ВладелецФайла) Экспорт

	Если ТипЗнч(ФайлМассив) = Тип("Массив") Тогда 
		МассивФайлов = ФайлМассив;
	Иначе
		МассивФайлов = Новый Массив;
		МассивФайлов.Добавить(ФайлМассив);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Файлы.Ссылка КАК Ссылка,
	|	Файлы.ПолноеНаименование КАК ПолноеНаименование
	|ИЗ
	|	Справочник.Файлы КАК Файлы
	|ГДЕ
	|	Файлы.ВладелецФайла = &ВладелецФайла";
	Запрос.УстановитьПараметр("ВладелецФайла", ВладелецФайла);
	ТаблРезультат = Запрос.Выполнить().Выгрузить();
	
	Результат = Новый Соответствие;
	Для Каждого ФайлСсылка Из МассивФайлов Цикл
		
		Если ТаблРезультат.Найти(ФайлСсылка, "Ссылка") <> Неопределено Тогда 
			Результат.Вставить(ФайлСсылка, "Пропустить");
		ИначеЕсли ТаблРезультат.Найти(ФайлСсылка.ПолноеНаименование, "ПолноеНаименование") <> Неопределено Тогда 
			Результат.Вставить(ФайлСсылка, "Обновить");
		Иначе
			Результат.Вставить(ФайлСсылка, "Скопировать");
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// копирует файлы при переносе из одного списка приложенных файлов в другой
// Параметры
// ФайлМассив - массив ссылок на файлы или СправочникСсылка.Файлы
// ВладелецФайла - ЛюбаяСсылка - владелец файла
//
// Возвращаемое значение:
//   СправочникСсылка.Файлы - скопированный файл
//
Функция СкопироватьФайлВПриложенных(ФайлМассив, ВладелецФайла) Экспорт
	
	Если ТипЗнч(ФайлМассив) = Тип("Массив") Тогда 
		МассивФайлов = ФайлМассив;
	Иначе
		МассивФайлов = Новый Массив;
		МассивФайлов.Добавить(ФайлМассив);
	КонецЕсли;
	
	Для Каждого ФайлСсылка Из МассивФайлов Цикл
		
		Источник = ФайлСсылка;
		ИсточникОбъект = Источник.ПолучитьОбъект();
		
		ПриемникОбъект = ИсточникОбъект.Скопировать();
		ПриемникОбъект.ВладелецФайла = ВладелецФайла;
		ПриемникОбъект.Записать();
		
		Приемник = ПриемникОбъект.Ссылка;
		
		Если Не Источник.ТекущаяВерсия.Пустая() Тогда
			
			ХранилищеФайла = Неопределено;
			Если Источник.ТекущаяВерсия.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда 
				ХранилищеФайла = ПолучитьХранилищеФайлаИзИнформационнойБазы(Источник.ТекущаяВерсия);
			КонецЕсли;
			
			Версия = СоздатьВерсию(
			ТекущаяДатаСеанса(),
			ТекущаяУниверсальнаяДата(),
			Приемник,
			Приемник.Наименование,
			Источник.ТекущаяВерсия.Размер,
			Источник.ТекущаяВерсия.Расширение,
			ХранилищеФайла,
			Источник.ТекущаяВерсия.ТекстХранилище,
			Ложь,
			Источник.ТекущаяВерсия);
			
			ОбновитьВерсиюВФайле(Приемник, Версия, Источник.ТекущаяВерсия.ТекстХранилище);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Приемник;
	
КонецФункции

// Обновляет версии одноименных файлов при переносе из одного списка приложенных файлов в другой
// Параметры
// ФайлМассив - массив ссылок на файлы или СправочникСсылка.Файлы
// ВладелецФайла - ЛюбаяСсылка - владелец файла
//
// Возвращаемое значение:
//   СправочникСсылка.Файлы - скопированный файл
//
Функция ОбновитьФайлВПриложенных(ФайлМассив, ВладелецФайла) Экспорт
	
	Если ТипЗнч(ФайлМассив) = Тип("Массив") Тогда 
		МассивФайлов = ФайлМассив;
	Иначе
		МассивФайлов = Новый Массив;
		МассивФайлов.Добавить(ФайлМассив);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Файлы.Ссылка КАК Ссылка,
	|	Файлы.ПолноеНаименование КАК ПолноеНаименование
	|ИЗ
	|	Справочник.Файлы КАК Файлы
	|ГДЕ
	|	Файлы.ВладелецФайла = &ВладелецФайла";
	Запрос.УстановитьПараметр("ВладелецФайла", ВладелецФайла);
	
	ТаблРезультат = Запрос.Выполнить().Выгрузить();
	Для Каждого ФайлСсылка Из МассивФайлов Цикл
		
		НайденнаяСтрока = ТаблРезультат.Найти(ФайлСсылка.ПолноеНаименование, "ПолноеНаименование");
		
		Источник = ФайлСсылка;
		Приемник = НайденнаяСтрока.Ссылка;
		
		Если Не Источник.ТекущаяВерсия.Пустая() Тогда
			
			ХранилищеФайла = Неопределено;
			Если Источник.ТекущаяВерсия.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда 
				ХранилищеФайла = ПолучитьХранилищеФайлаИзИнформационнойБазы(Источник.ТекущаяВерсия);
			КонецЕсли;
			
			Версия = СоздатьВерсию(
			ТекущаяДатаСеанса(),
			ТекущаяУниверсальнаяДата(),
			Приемник,
			Приемник.Наименование,
			Источник.ТекущаяВерсия.Размер,
			Источник.ТекущаяВерсия.Расширение,
			ХранилищеФайла,
			Источник.ТекущаяВерсия.ТекстХранилище,
			Ложь,
			Источник.ТекущаяВерсия);
			
			ОбновитьВерсиюВФайле(Приемник, Версия, Источник.ТекущаяВерсия.ТекстХранилище);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Приемник;
	
КонецФункции

// Есть ли дублирующийся элемент в условном оформлении списка
// Параметры
// Элементы - массив элементов условного оформления списка
// ЭлементПоиска - элемент условного оформления списка
//
// Возвращаемое значение:
//   Булево - есть дублирующийся элемент
//
Функция ЕстьДублирующийсяЭлемент(Элементы, ЭлементПоиска)
	
	Для Каждого Элемент Из Элементы Цикл
		Если Элемент <> ЭлементПоиска Тогда
			
			Если Элемент.Оформление.Элементы.Количество() <> ЭлементПоиска.Оформление.Элементы.Количество() Тогда
				Продолжить;
			КонецЕсли;
			
			НайденОтличающийсяЭлемент = Ложь;
			
			// обходим все элементы оформления - если есть хоть один отличающийся - делаем Продолжить;
			ЧислоЭлементов = Элемент.Оформление.Элементы.Количество();
			Для Индекс = 0 По ЧислоЭлементов - 1 Цикл
				Элемент1 = Элемент.Оформление.Элементы[Индекс];
				Элемент2 = ЭлементПоиска.Оформление.Элементы[Индекс];
				
				Если Элемент1.Использование И Элемент2.Использование Тогда
					Если Элемент1.Параметр <> Элемент2.Параметр ИЛИ Элемент1.Значение <> Элемент2.Значение Тогда
						НайденОтличающийсяЭлемент = Истина;
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Если НайденОтличающийсяЭлемент Тогда
				Продолжить;
			КонецЕсли;
			
			Если Элемент.Отбор.Элементы.Количество() <> ЭлементПоиска.Отбор.Элементы.Количество() Тогда
				Продолжить;
			КонецЕсли;
			
			// обходим все элементы отбора - если есть хоть один отличающийся - делаем Продолжить;
			ЧислоЭлементов = Элемент.Отбор.Элементы.Количество();
			Для Индекс = 0 По ЧислоЭлементов - 1 Цикл
				Элемент1 = Элемент.Отбор.Элементы[Индекс];
				Элемент2 = ЭлементПоиска.Отбор.Элементы[Индекс];
				
				Если Элемент1.Использование И Элемент2.Использование Тогда
					Если Элемент1.ВидСравнения <> Элемент2.ВидСравнения
						ИЛИ Элемент1.ЛевоеЗначение <> Элемент2.ЛевоеЗначение
						ИЛИ Элемент1.ПравоеЗначение <> Элемент2.ПравоеЗначение Тогда
						
						НайденОтличающийсяЭлемент = Истина;
						Прервать;
						
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Если НайденОтличающийсяЭлемент Тогда
				Продолжить;
			КонецЕсли;
			
			// обошли все элементы оформления и отбора - они все одинаковы - это дубль
			Возврат Истина;
			
		КонецЕсли;
	КонецЦикла;
	
	
	Возврат Ложь;
	
КонецФункции

// Заполняет условное оформление списка файлов
//
// Параметры:
// Список - динамический список
//
Процедура ЗаполнитьУсловноеОформлениеСпискаФайлов(Список) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЭтоПлатформа83БезРежимаСовместимости() Тогда
		УсловноеОформлениеКД = Список.КомпоновщикНастроек.Настройки.УсловноеОформление;
		УсловноеОформлениеКД.ИдентификаторПользовательскойНастройки = "ОсновноеОформление";
	Иначе
		УсловноеОформлениеКД = Список.УсловноеОформление;
	КонецЕсли;
	
	Элемент = УсловноеОформлениеКД.Элементы.Добавить();
	Элемент.Использование = Истина;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ФайлЗанятыйДругимПользователем);
	
	Отбор = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.Использование = Истина;
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Редактирует");
	Отбор.ПравоеЗначение = Справочники.Пользователи.ПустаяСсылка();
	
	Если ЕстьДублирующийсяЭлемент(УсловноеОформлениеКД.Элементы, Элемент) Тогда
		УсловноеОформлениеКД.Элементы.Удалить(Элемент);
	КонецЕсли;
	
	Элемент = УсловноеОформлениеКД.Элементы.Добавить();
	Элемент.Использование = Истина;
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ФайлЗанятыйТекущимПользователем);
	
	Отбор = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.Использование = Истина;
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Редактирует");
	Отбор.ПравоеЗначение = Пользователи.ТекущийПользователь();
	
	Если ЕстьДублирующийсяЭлемент(УсловноеОформлениеКД.Элементы, Элемент) Тогда
		УсловноеОформлениеКД.Элементы.Удалить(Элемент);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает объект, для которого проверяется право доступа - для Файл это ПапкиФайлов (реквизит ВладелецФайла)
// Параметры
//  Объект  - ЛюбаяСсылка - ссылка на объект
//
// Возвращаемое значение:
//   ЛюбаяСсылка  - объект для которого вычисляются права доступа
//
Функция ПолучитьОбъектДоступа(Объект) Экспорт
	Если ТипЗнч(Объект) <> Тип("СправочникСсылка.Файлы") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(Объект.ВладелецФайла) = Тип("СправочникСсылка.ПапкиФайлов") Тогда
		Возврат Объект.ВладелецФайла;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Возвращает номер по нарастанию. Предыдущее значение берется из регистра сведений НомераОтсканированныхФайлов
// Параметры
// Владелец - ЛюбаяСсылка - владелец файла
//
// Возвращаемое значение:
//   Число  - новый номер для сканирования
//
Функция ПолучитьНовыйНомерДляСканирования(Владелец) Экспорт
	
	// Подготовить структуру отбора по измерениям      
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Владелец", Владелец);
	
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.НомераОтсканированныхФайлов");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Владелец", Владелец);
		Блокировка.Заблокировать();   		
	
		// Получить структуру с данными ресурсов записи
		СтруктураРесурсов = РегистрыСведений.НомераОтсканированныхФайлов.Получить(СтруктураОтбора);
		   
		// Получить максимальный номер из регистра
		Номер = СтруктураРесурсов.Номер;
		Номер = Номер + 1; // увеличим на 1
		
		// запишем новый номер в регистр
		НаборЗаписей = РегистрыСведений.НомераОтсканированныхФайлов.СоздатьНаборЗаписей();
		
		НаборЗаписей.Отбор.Владелец.Установить(Владелец);
		
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Владелец = Владелец;
		НоваяЗапись.Номер = Номер;
		
		НаборЗаписей.Записать();
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат Номер;
	
КонецФункции

// Заносит номер в регистр сведений НомераОтсканированныхФайлов
//
// Параметры:
// Владелец - ЛюбаяСсылка - владелец файла
// НовыйНомер -  Число  - максимальный номер для сканирования
//
Процедура ЗанестиМаксимальныйНомерДляСканирования(Владелец, НовыйНомер) Экспорт
	
	// Подготовить структуру отбора по измерениям      
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("Владелец", Владелец);
	
	НачатьТранзакцию();
	Попытка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.НомераОтсканированныхФайлов");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("Владелец", Владелец);
		Блокировка.Заблокировать();   		
		
		// Получить структуру с данными ресурсов записи
		СтруктураРесурсов = РегистрыСведений.НомераОтсканированныхФайлов.Получить(СтруктураОтбора);
		   
		// Получить максимальный номер из регистра
		Номер = СтруктураРесурсов.Номер;
		Если НовыйНомер <= Номер Тогда // кто-то другой уже записал бОльший номер
			ОтменитьТранзакцию();
			Возврат;
		КонецЕсли;
		
		Номер = НовыйНомер;
		
		// запишем новый номер в регистр
		НаборЗаписей = РегистрыСведений.НомераОтсканированныхФайлов.СоздатьНаборЗаписей();
		
		НаборЗаписей.Отбор.Владелец.Установить(Владелец);
		
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Владелец = Владелец;
		НоваяЗапись.Номер = Номер;
		
		НаборЗаписей.Записать();
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Очищает настройки форм ФормаНового
Процедура ОчиститьНастройкиФормНовогоФайла() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	// Очистка настроек окна ФормаНового
	ХранилищеСистемныхНастроек.Удалить("Справочник.Файлы.Форма.ФормаНового/НастройкиОкна", "", Неопределено);
	
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

// Преобразует параметры сканера в виде чисел  - в перечисления
//
// Параметры:
//  РазрешениеЧисло - Число - разрешение dpi 
//  ЦветностьЧисло  - Число - Цветность (0,1,2)
//  ПоворотЧисло    - Число - Поворот
//  РазмерБумагиЧисло - Число - Размер бумаги
//  Разрешение - Перечисление.РазрешенияСканированногоИзображения - Разрешение
//  Цветность  - Перечисление.ЦветностиИзображения - Цветность
//  Поворот  - Перечисление.СпособыПоворотаИзображения - Поворот
//  РазмерБумаги - Перечисление.РазмерыБумаги - Размер бумаги
//
Процедура ПреобразоватьПараметрыСканераВПеречисления(РазрешениеЧисло, ЦветностьЧисло, ПоворотЧисло, РазмерБумагиЧисло, 
	Разрешение, Цветность, Поворот, РазмерБумаги) Экспорт
	
	Если РазрешениеЧисло = 200 Тогда
		Разрешение = Перечисления.РазрешенияСканированногоИзображения.dpi200;
	ИначеЕсли РазрешениеЧисло = 300 Тогда
		Разрешение = Перечисления.РазрешенияСканированногоИзображения.dpi300;
	ИначеЕсли РазрешениеЧисло = 600 Тогда
		Разрешение = Перечисления.РазрешенияСканированногоИзображения.dpi600;
	ИначеЕсли РазрешениеЧисло = 1200 Тогда
		Разрешение = Перечисления.РазрешенияСканированногоИзображения.dpi1200;
	КонецЕсли;
	
	Если ЦветностьЧисло = 0 Тогда
		Цветность = Перечисления.ЦветностиИзображения.Монохромное;
	ИначеЕсли ЦветностьЧисло = 1 Тогда
		Цветность = Перечисления.ЦветностиИзображения.ГрадацииСерого;
	ИначеЕсли ЦветностьЧисло = 2 Тогда
		Цветность = Перечисления.ЦветностиИзображения.Цветное;
	КонецЕсли;
	
	Если ПоворотЧисло = 0 Тогда
		Поворот = Перечисления.СпособыПоворотаИзображения.НетПоворота;
	ИначеЕсли ПоворотЧисло = 90 Тогда
		Поворот = Перечисления.СпособыПоворотаИзображения.ВправоНа90;
	ИначеЕсли ПоворотЧисло = 180 Тогда
		Поворот = Перечисления.СпособыПоворотаИзображения.ВправоНа180;
	ИначеЕсли ПоворотЧисло = 270 Тогда
		Поворот = Перечисления.СпособыПоворотаИзображения.ВлевоНа90;
	КонецЕсли;
	
	Если РазмерБумагиЧисло = 0 Тогда
		РазмерБумаги = Перечисления.РазмерыБумаги.НеЗадано;
	ИначеЕсли РазмерБумагиЧисло = 11 Тогда
		РазмерБумаги = Перечисления.РазмерыБумаги.A3;
	ИначеЕсли РазмерБумагиЧисло = 1 Тогда
		РазмерБумаги = Перечисления.РазмерыБумаги.A4;
	ИначеЕсли РазмерБумагиЧисло = 5 Тогда
		РазмерБумаги = Перечисления.РазмерыБумаги.A5;
	ИначеЕсли РазмерБумагиЧисло = 6 Тогда
		РазмерБумаги = Перечисления.РазмерыБумаги.B4;
	ИначеЕсли РазмерБумагиЧисло = 2 Тогда
		РазмерБумаги = Перечисления.РазмерыБумаги.B5;
	ИначеЕсли РазмерБумагиЧисло = 7 Тогда
		РазмерБумаги = Перечисления.РазмерыБумаги.B6;
	ИначеЕсли РазмерБумагиЧисло = 14 Тогда
		РазмерБумаги = Перечисления.РазмерыБумаги.C4;
	ИначеЕсли РазмерБумагиЧисло = 15 Тогда
		РазмерБумаги = Перечисления.РазмерыБумаги.C5;
	ИначеЕсли РазмерБумагиЧисло = 16 Тогда
		РазмерБумаги = Перечисления.РазмерыБумаги.C6;
	ИначеЕсли РазмерБумагиЧисло = 3 Тогда
		РазмерБумаги = Перечисления.РазмерыБумаги.USLetter;
	ИначеЕсли РазмерБумагиЧисло = 4 Тогда
		РазмерБумаги = Перечисления.РазмерыБумаги.USLegal;
	ИначеЕсли РазмерБумагиЧисло = 10 Тогда
		РазмерБумаги = Перечисления.РазмерыБумаги.USExecutive;
	КонецЕсли;
	
КонецПроцедуры

// Преобразует число в перечисление и сохраняет в настройках
//
// Параметры:
//  РазрешениеЧисло - Число - разрешение dpi 
//  ЦветностьЧисло  - Число - Цветность (0,1,2)
//  ПоворотЧисло    - Число - Поворот
//  РазмерБумагиЧисло - Число - Размер бумаги
//  ИдентификаторКлиента - Строка - Идентификатор клиента
//
Процедура ПреобразоватьИСохранитьПараметрыСканера(РазрешениеЧисло,
                                                  ЦветностьЧисло,
                                                  ПоворотЧисло,
                                                  РазмерБумагиЧисло,
                                                  ИдентификаторКлиента) Экспорт
	
	Перем Разрешение;
	Перем Цветность;
	Перем Поворот;
	Перем РазмерБумаги;
	
	ПреобразоватьПараметрыСканераВПеречисления(РазрешениеЧисло, ЦветностьЧисло, ПоворотЧисло, РазмерБумагиЧисло, 
		Разрешение, Цветность, Поворот, РазмерБумаги);
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("НастройкиСканирования/Разрешение", ИдентификаторКлиента, Разрешение);
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("НастройкиСканирования/Цветность", ИдентификаторКлиента, Цветность);
	
КонецПроцедуры

// Получает первые 100 версий файлов, у которых еще не извлечен текст 
//
// Возвращаемое значение:
//   Массив - массив версий файлов
//
Функция ПолучитьМассивВерсийДляИзвлеченияТекста() Экспорт
	
	МассивВерсий = Новый Массив;
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 100
	|	ВерсииФайлов.Ссылка КАК Ссылка,
	|	ВерсииФайлов.СтатусИзвлеченияТекста КАК СтатусИзвлеченияТекста
	|ИЗ
	|	Справочник.ВерсииФайлов КАК ВерсииФайлов
	|ГДЕ
	|	(ВерсииФайлов.СтатусИзвлеченияТекста = &Статус
	|			ИЛИ ВерсииФайлов.СтатусИзвлеченияТекста = ЗНАЧЕНИЕ(Перечисление.СтатусыИзвлеченияТекстаФайлов.ПустаяСсылка))";
	
	Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыИзвлеченияТекстаФайлов.НеИзвлечен);
	
	Результат = Запрос.Выполнить();
	ТаблицаВыгрузки = Результат.Выгрузить();
	
	Для Каждого Строка Из ТаблицаВыгрузки Цикл
		ВерсияСсылка = Строка.Ссылка;
		МассивВерсий.Добавить(ВерсияСсылка);
	КонецЦикла;
	
	Возврат МассивВерсий;
	
КонецФункции

// Получает массив ссылок всех файлов в папке (если Рекурсивно, то и в подпапках тоже)
// Параметры
//  Папка  - СправочникСсылка.ПапкиФайлов - папка файлов
//  Рекурсивно - Булево - обходить ли подпапки
//
// Возвращаемое значение:
//   Массив - массив файлов
//
Функция ПолучитьВсеФайлыВПапке(Папка, Рекурсивно) Экспорт
	
	МассивФайлов = Новый Массив;
	
	ПолучитьВсеФайлыВОднойПапке(Папка, МассивФайлов);
	
	Если Рекурсивно Тогда
		
		МассивПапок = Новый Массив;
		
		ЗапросВПапки = Новый Запрос;
		ЗапросВПапки.УстановитьПараметр("Родитель", Папка);
		ЗапросВПапки.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПапкиФайлов.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ПапкиФайлов КАК ПапкиФайлов
		|ГДЕ
		|	ПапкиФайлов.Родитель В ИЕРАРХИИ(&Родитель)";
		
		Результат = ЗапросВПапки.Выполнить();
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			МассивПапок.Добавить(Выборка.Ссылка);
		КонецЦикла;
		
		Для Каждого Подпапка Из МассивПапок Цикл
			ПолучитьВсеФайлыВОднойПапке(Подпапка, МассивФайлов);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат МассивФайлов;
	
КонецФункции

// Получает массив ссылок всех файлов в папке
// Параметры
//  Папка  - СправочникСсылка.ПапкиФайлов - папка файлов
//  МассивФайлов - Массив - массив файлов
//
Процедура ПолучитьВсеФайлыВОднойПапке(Папка, МассивФайлов) Экспорт
	
	ЗапросВПапки = Новый Запрос;
	ЗапросВПапки.УстановитьПараметр("Родитель", Папка);
	ЗапросВПапки.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Файлы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Файлы КАК Файлы
	|ГДЕ
	|	Файлы.ВладелецФайла = &Родитель";
	
	Результат = ЗапросВПапки.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивФайлов.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
КонецПроцедуры

// Получает ДанныеФайла и НавигационнуюСсылкуВерсии
// Параметры
//  ФайлСсылка  - СправочникСсылка.Файлы - файл
//  ВерсияСсылка  - СправочникСсылка.ВерсииФайлов - версия файла
//  ИдентификаторФормы - уникальный идентификатор формы
//
// Возвращаемое значение:
//   Структура - структура с данными файла
//
Функция ПолучитьДанныеФайлаИНавигационнуюСсылкуВерсии(ФайлСсылка, ВерсияСсылка, ИдентификаторФормы) Экспорт
	
	ДанныеФайла = ПолучитьДанныеФайла(ФайлСсылка, ВерсияСсылка);
	Если ВерсияСсылка = Неопределено Тогда
		ВерсияСсылка = ФайлСсылка.ТекущаяВерсия;
	КонецЕсли;
	НавигационнаяСсылкаВерсии = ПолучитьНавигационнуюСсылкуДляОткрытия(ВерсияСсылка, ИдентификаторФормы);
	
	СтруктураВозврата = Новый Структура("ДанныеФайла, НавигационнаяСсылкаВерсии", ДанныеФайла, НавигационнаяСсылкаВерсии);
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Получает данные файла для открытия и читает их Общих настроек ПапкаДляСохранитьКак
// Параметры
//  ФайлСсылка  - СправочникСсылка.Файлы - файл
//  ВерсияСсылка  - СправочникСсылка.ВерсииФайлов - версия файла
//  ИдентификаторФормы - уникальный идентификатор формы
//  РабочийКаталогВладельца - Строка - рабочий каталог владельца файла
//
// Возвращаемое значение:
//   Структура - структура с данными файла
//
Функция ПолучитьДанныеФайлаДляСохранения(ФайлСсылка, ВерсияСсылка = Неопределено, 
	ИдентификаторФормы = Неопределено, РабочийКаталогВладельца = Неопределено) Экспорт

	ДанныеФайла = ПолучитьДанныеФайлаДляОткрытия(ФайлСсылка, ВерсияСсылка, ИдентификаторФормы, РабочийКаталогВладельца);
	
	ПапкаДляСохранитьКак = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиПрограммы", "ПапкаДляСохранитьКак");
	ДанныеФайла.Вставить("ПапкаДляСохранитьКак", ПапкаДляСохранитьКак);

	Возврат ДанныеФайла;
КонецФункции

// Возвращает ИспользоватьЭлектронныеЦифровыеПодписиИШифрование
// Возвращаемое значение:
//   Булево - константа ИспользоватьЭлектронныеЦифровыеПодписи
Функция ПолучитьИспользоватьЭлектронныеЦифровыеПодписиИШифрование() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ИспользоватьЭлектронныеЦифровыеПодписиИШифрование = Константы.ИспользоватьЭлектронныеЦифровыеПодписи.Получить();
	Возврат ИспользоватьЭлектронныеЦифровыеПодписиИШифрование;
	
КонецФункции

// Получает ДанныеФайла и НавигационнуюСсылкуВерсии всех подчиненных файлов для Вх Исх Внутр
// Параметры
//  ВладелецФайла - ЛюбаяСсылка - владелец файла
//  ИдентификаторФормы - уникальный идентификатор формы
//
// Возвращаемое значение:
//   Структура - структура с данными файла
Функция ПолучитьДанныеФайлаИНавигационнуюСсылкуВерсииВсехПодчиненныхФайлов(ВладелецФайла, ИдентификаторФормы) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Файлы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Файлы КАК Файлы
	|ГДЕ
	|	Файлы.ВладелецФайла = &ВладелецФайла";
	
	Запрос.УстановитьПараметр("ВладелецФайла", ВладелецФайла);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	МассивВозврата = Новый Массив;
	Пока Выборка.Следующий() Цикл
		
		ФайлСсылка = Выборка.Ссылка;
		ВерсияСсылка = ФайлСсылка.ТекущаяВерсия;
		ДанныеФайла = ПолучитьДанныеФайла(ФайлСсылка, ВерсияСсылка);
		НавигационнаяСсылкаВерсии = ПолучитьНавигационнуюСсылкуДляОткрытия(ВерсияСсылка, ИдентификаторФормы);
		
		СтруктураВозврата = Новый Структура("ДанныеФайла, НавигационнаяСсылкаВерсии", ДанныеФайла, НавигационнаяСсылкаВерсии);
		МассивВозврата.Добавить(СтруктураВозврата);
	КонецЦикла;
	
	Возврат МассивВозврата;
КонецФункции

// Получает все подчиненные файлы
// Параметры
//  ВладелецФайла - ЛюбаяСсылка - владелец файла
//
// Возвращаемое значение:
//   Массив - массив файлов
Функция ПолучитьВсеПодчиненныеФайлы(ВладелецФайла) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Файлы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Файлы КАК Файлы
	|ГДЕ
	|	Файлы.ВладелецФайла = &ВладелецФайла";
	
	Запрос.УстановитьПараметр("ВладелецФайла", ВладелецФайла);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

// Получает количество версий файла
// Параметры
//  ФайлСсылка - СправочникСсылка.Файлы - файл
//
// Возвращаемое значение:
//   Число - число версий
Функция ПолучитьКоличествоВерсий(ФайлСсылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(*) КАК Количество
	|ИЗ
	|	Справочник.ВерсииФайлов КАК ВерсииФайлов
	|ГДЕ
	|	ВерсииФайлов.Владелец = &ФайлСсылка";
	
	Запрос.УстановитьПараметр("ФайлСсылка", ФайлСсылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Число(Выборка.Количество);
	
КонецФункции

// Получает ДанныеФайла и НавигационнуюСсылкуВерсии всех подчиненных файлов
// Параметры
//  ФайлСсылка - СправочникСсылка.Файлы - файл
//  ИдентификаторФормы - уникальный идентификатор формы
//
// Возвращаемое значение:
//   Массив - массив структур с данными файлов
Функция ПолучитьДанныеФайлаИНавигационнуюСсылкуВсехВерсийФайла(ФайлСсылка, ИдентификаторФормы) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВерсииФайлов.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ВерсииФайлов КАК ВерсииФайлов
		|ГДЕ
		|	ВерсииФайлов.Владелец = &ФайлСсылка";
	
	Запрос.УстановитьПараметр("ФайлСсылка", ФайлСсылка);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	МассивВозврата = Новый Массив;
	Пока Выборка.Следующий() Цикл
		
		ВерсияСсылка = Выборка.Ссылка;
		ДанныеФайла = ПолучитьДанныеФайла(ФайлСсылка, ВерсияСсылка);
		НавигационнаяСсылкаВерсии = ПолучитьНавигационнуюСсылкуВоВременномХранилище(ВерсияСсылка, ИдентификаторФормы);
		
		СтруктураВозврата = Новый Структура("ДанныеФайла, НавигационнаяСсылкаВерсии, ВерсияСсылка", 
			ДанныеФайла, НавигационнаяСсылкаВерсии, ВерсияСсылка);
		МассивВозврата.Добавить(СтруктураВозврата);
	КонецЦикла;
	
	Возврат МассивВозврата;
КонецФункции

// Помещает шифрованные файлы в базу и ставит признак Зашифрован файлу и всем версиям
// Параметры
//  ФайлСсылка - СправочникСсылка.Файлы - файл
//  Зашифровать - Булево - зашифровать файл, если Истина - иначе расшифровать
//  МассивДанныхДляЗанесенияВБазу - массив структур
//  УникальныйИдентификатор - УникальныйИдентификатор - уникальный идентификатор формы
//  ИмяРабочегоКаталога - Строка - рабочий каталог
//  МассивФайловВРабочемКаталогеДляУдаления - Массив - файлы, которые надо удалить из регистра
//  МассивОтпечатков  - Массив - массив отпечатков сертификатов, использованных для шифрования
Процедура ЗанестиИнформациюОШифровании(ФайлСсылка, Зашифровать, МассивДанныхДляЗанесенияВБазу, УникальныйИдентификатор, 
	ИмяРабочегоКаталога, МассивФайловВРабочемКаталогеДляУдаления, МассивОтпечатков) Экспорт
	
	НачатьТранзакцию();
	Попытка
		
		АдресВременногоХранилищаТекстаТекущейВерсии = "";
		
		Для Каждого ДанныеДляЗаписиНаСервере Из МассивДанныхДляЗанесенияВБазу Цикл
			
			АдресВременногоХранилища = ДанныеДляЗаписиНаСервере.АдресВременногоХранилища;
			ВерсияСсылка = ДанныеДляЗаписиНаСервере.ВерсияСсылка;
			АдресВременногоХранилищаТекста = ДанныеДляЗаписиНаСервере.АдресВременногоХранилищаТекста;
			
			Если ВерсияСсылка = ФайлСсылка.ТекущаяВерсия Тогда
				АдресВременногоХранилищаТекстаТекущейВерсии = АдресВременногоХранилищаТекста;
			КонецЕсли;
			
			ИмяФайлаСПутемВРабочемКаталоге = "";
			ВРабочемКаталогеНаЧтение = Истина; // не используется 
			ВРабочемКаталогеВладельца = Истина;
			ИмяФайлаСПутемВРабочемКаталоге = ПолучитьИмяФайлаСПутемИзРегистра(ВерсияСсылка, ИмяРабочегоКаталога, ВРабочемКаталогеНаЧтение, ВРабочемКаталогеВладельца);
			Если НЕ ПустаяСтрока(ИмяФайлаСПутемВРабочемКаталоге) Тогда
				МассивФайловВРабочемКаталогеДляУдаления.Добавить(ИмяФайлаСПутемВРабочемКаталоге);
			КонецЕсли;
			
			УдалитьИзРегистра(ВерсияСсылка);
			
			СтатусИзвлеченияТекста = Неопределено;
			Если Зашифровать = Ложь Тогда
				СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.НеИзвлечен;
			КонецЕсли;
			
			КодВозвратаОбновитьВерсию = ОбновитьВерсию(
				ФайлСсылка, 
				Ложь, //СоздаватьВерсию, 
				АдресВременногоХранилища, 
				ВерсияСсылка.Комментарий, 
				ВерсияСсылка.ДатаСоздания, 
				ВерсияСсылка.ДатаМодификацииУниверсальная,
				ВерсияСсылка.Размер, 
				ВерсияСсылка.ПолноеНаименование, 
				ВерсияСсылка.Расширение, 
				"", //ПолныйПутьКФайлу,
				АдресВременногоХранилищаТекста,
				Ложь, //ЭтоВебКлиент,
				Ложь, //ТекстНеИзвлеченНаКлиенте,
				УникальныйИдентификатор,
				Зашифровать, // Зашифрован
				ВерсияСсылка,
				СтатусИзвлеченияТекста);
				
				// для варианта с хранением файлов на диске (на сервере) удаляем Файл из временного хранилища после получения
				Если НЕ ПустаяСтрока(ДанныеДляЗаписиНаСервере.АдресФайла) И ЭтоАдресВременногоХранилища(ДанныеДляЗаписиНаСервере.АдресФайла) Тогда
					УдалитьИзВременногоХранилища(ДанныеДляЗаписиНаСервере.АдресФайла);
				КонецЕсли;
				
		КонецЦикла;
		
		ФайлОбъект = ФайлСсылка.ПолучитьОбъект();
		ЗаблокироватьДанныеДляРедактирования(ФайлСсылка, , УникальныйИдентификатор);
		
		ФайлОбъект.Зашифрован = Зашифровать;
		ФайлОбъект.ТекстХранилище = Новый ХранилищеЗначения(""); // очистим извлеченный текст
		ФайлОбъект.ДополнительныеСвойства.Вставить("ЗаписьПодписанногоОбъекта", Истина); // чтобы прошла запись ранее подписанного объекта
		
		Если Зашифровать Тогда
			Для Каждого ОтпечатокСтруктура Из МассивОтпечатков Цикл
				НоваяСтрока = ФайлОбъект.СертификатыШифрования.Добавить();
				НоваяСтрока.Отпечаток = ОтпечатокСтруктура.Отпечаток;
				НоваяСтрока.Представление = ОтпечатокСтруктура.Представление;
				НоваяСтрока.Сертификат = Новый ХранилищеЗначения(ОтпечатокСтруктура.Сертификат);
			КонецЦикла;
		Иначе
			ФайлОбъект.СертификатыШифрования.Очистить();
		КонецЕсли;
		
		Если АдресВременногоХранилищаТекстаТекущейВерсии <> "" Тогда
			Текст = ФайловыеФункцииСлужебный.ПолучитьСтрокуИзВременногоХранилища(АдресВременногоХранилищаТекстаТекущейВерсии);
			ФайлОбъект.ТекстХранилище = Новый ХранилищеЗначения(Текст);
		КонецЕсли;
		
		ФайлОбъект.Записать();
		РазблокироватьДанныеДляРедактирования(ФайлСсылка, УникальныйИдентификатор);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Делает ПоместитьВоВременноеХранилище (если файл хранится на диске) и возвращает нужную ссылку
// Параметры
//  ВерсияСсылка  - СправочникСсылка.ВерсииФайлов - версия файла
//  ИдентификаторФормы - уникальный идентификатор формы
//
// Возвращаемое значение:
//   Строка - навигационная ссылка
Функция ПолучитьНавигационнуюСсылкуВоВременномХранилище(ВерсияСсылка, ИдентификаторФормы = Неопределено) Экспорт
	Адрес = "";
	
	ТипХраненияФайла = ВерсияСсылка.ТипХраненияФайла;
	
	Если ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске Тогда
		Если НЕ ВерсияСсылка.Том.Пустая() Тогда
			ПолныйПуть = ФайловыеФункцииСлужебный.ПолныйПутьТома(ВерсияСсылка.Том) + ВерсияСсылка.ПутьКФайлу; 
			Попытка
				ДвоичныеДанные = Новый ДвоичныеДанные(ПолныйПуть);
				Адрес = ПоместитьВоВременноеХранилище(ДвоичныеДанные, ИдентификаторФормы);
			Исключение
				// запись в журнал регистрации
				СообщениеОбОшибке = СформироватьТекстОшибкиПолученияФайлСТомаДляАдминистратора(
					ИнформацияОбОшибке(), ВерсияСсылка.Владелец);
				
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Файлы.Открытие файла'",
					     ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Ошибка,
					Метаданные.Справочники.Файлы,
					ВерсияСсылка.Владелец,
					СообщениеОбОшибке);
				
				ВызватьИсключение ФайловыеФункцииСлужебныйКлиентСервер.ОшибкаФайлНеНайденВХранилищеФайлов(
					ВерсияСсылка.ПолноеНаименованиеВерсии + "." + ВерсияСсылка.Расширение);
			КонецПопытки;
		КонецЕсли;
	Иначе
		ХранилищеФайла = ПолучитьХранилищеФайлаИзИнформационнойБазы(ВерсияСсылка);
		ДвоичныеДанные = ХранилищеФайла.Получить();
		
		Адрес = ПоместитьВоВременноеХранилище(ДвоичныеДанные, ИдентификаторФормы);
	КонецЕсли;
	
	Возврат Адрес;
	
КонецФункции

// Получает ДанныеФайла и НавигационнуюСсылкуВерсии, предварительно поместив файл версии во временное хранилище
// Параметры
//  ФайлСсылка  - СправочникСсылка.Файлы - файл
//  ВерсияСсылка  - СправочникСсылка.ВерсииФайлов - версия файла
//  ИдентификаторФормы - уникальный идентификатор формы
//
// Возвращаемое значение:
//   Структура - данные файла и навигационная ссылка
Функция ПолучитьДанныеФайлаИНавигационнуюСсылкуВерсииВоВременномХранилище(ФайлСсылка, ВерсияСсылка, ИдентификаторФормы) Экспорт
	
	ДанныеФайла = ПолучитьДанныеФайла(ФайлСсылка, ВерсияСсылка);
	Если ВерсияСсылка = Неопределено Тогда
		ВерсияСсылка = ФайлСсылка.ТекущаяВерсия;
	КонецЕсли;
	НавигационнаяСсылкаВерсии = ПолучитьНавигационнуюСсылкуВоВременномХранилище(ВерсияСсылка, ИдентификаторФормы);
	
	СтруктураВозврата = Новый Структура("ДанныеФайла, НавигационнаяСсылкаВерсии", ДанныеФайла, НавигационнаяСсылкаВерсии);
	
	Возврат СтруктураВозврата;
КонецФункции

// Получает массив сертификатов шифрования
// Параметры
//  Ссылка  - СправочникСсылка.Файлы - файл
//
// Возвращаемое значение:
//   Массив - массив структур
Функция ПолучитьМассивСертификатовШифрования(Ссылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СертификатыШифрования.Представление КАК Представление,
	|	СертификатыШифрования.Отпечаток КАК Отпечаток,
	|	СертификатыШифрования.Сертификат КАК Сертификат
	|ИЗ
	|	Справочник.Файлы.СертификатыШифрования КАК СертификатыШифрования
	|ГДЕ
	|	СертификатыШифрования.Ссылка = &ОбъектСсылка";
	
	Запрос.Параметры.Вставить("ОбъектСсылка", Ссылка);
	ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
	
	МассивСертификатовШифрования = Новый Массив;
	Пока ВыборкаЗапроса.Следующий() Цикл
		ОтпечатокСтруктура = Новый Структура("Отпечаток, Представление, Сертификат",
			ВыборкаЗапроса.Отпечаток, ВыборкаЗапроса.Представление, ВыборкаЗапроса.Сертификат.Получить());
		МассивСертификатовШифрования.Добавить(ОтпечатокСтруктура);
	КонецЦикла;
	
	Возврат МассивСертификатовШифрования;
	
КонецФункции

// Получает ДанныеФайла и сам файл как ДвоичныеДанные
// Параметры
//  ФайлСсылка  - СправочникСсылка.Файлы - файл
//  ВерсияСсылка  - СправочникСсылка.ВерсииФайлов - версия файла
//  АдресПодписи - Строка - навигационная ссылка, содержащая адрес файла подписи во временном хранилище
//
// Возвращаемое значение:
//   Структура - ДанныеФайла и сам файл как ДвоичныеДанные и подпись файла как ДвоичныеДанные
Функция ПолучитьДанныеФайлаИДвоичныеДанные(ФайлСсылка, ВерсияСсылка = Неопределено, 
	АдресПодписи = Неопределено) Экспорт
	
	ДанныеФайла = ПолучитьДанныеФайла(ФайлСсылка, ВерсияСсылка);
	Если ВерсияСсылка = Неопределено Тогда
		ВерсияСсылка = ФайлСсылка.ТекущаяВерсия;
	КонецЕсли;
	
	ДвоичныеДанные = Неопределено;
	
	ТипХраненияФайла = ВерсияСсылка.ТипХраненияФайла;
	Если ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске Тогда
		Если НЕ ВерсияСсылка.Том.Пустая() Тогда
			ПолныйПуть = ФайловыеФункцииСлужебный.ПолныйПутьТома(ВерсияСсылка.Том) + ВерсияСсылка.ПутьКФайлу; 
			Попытка
				ДвоичныеДанные = Новый ДвоичныеДанные(ПолныйПуть);
			Исключение
				// Запись в журнал регистрации.
				СообщениеОбОшибке = СформироватьТекстОшибкиПолученияФайлСТомаДляАдминистратора(
					ИнформацияОбОшибке(), ВерсияСсылка.Владелец);
				
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Файлы.Открытие файла'",
					     ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Ошибка,
					Метаданные.Справочники.Файлы,
					ВерсияСсылка.Владелец,
					СообщениеОбОшибке);
				
				ВызватьИсключение ФайловыеФункцииСлужебныйКлиентСервер.ОшибкаФайлНеНайденВХранилищеФайлов(
					ВерсияСсылка.ПолноеНаименование + "." + ВерсияСсылка.Расширение);
			КонецПопытки;
		КонецЕсли;
	Иначе
		ХранилищеФайла = ПолучитьХранилищеФайлаИзИнформационнойБазы(ВерсияСсылка);
		ДвоичныеДанные = ХранилищеФайла.Получить();
	КонецЕсли;

	ДвоичныеДанныеПодписи = Неопределено;
	Если АдресПодписи <> Неопределено Тогда
		ДвоичныеДанныеПодписи = ПолучитьИзВременногоХранилища(АдресПодписи);
	КонецЕсли;
	
	СтруктураВозврата = Новый Структура("ДанныеФайла, ДвоичныеДанные, ДвоичныеДанныеПодписи",
		ДанныеФайла, ДвоичныеДанные, ДвоичныеДанныеПодписи);
	
	Возврат СтруктураВозврата;
КонецФункции

// Получает все подписи файла
//
// Параметры
//  ОбъектСсылка  - СправочникСсылка - объект, в табличной части которого содержатся подписи
//  УникальныйИдентификатор - УникальныйИдентификатор - уникальный идентификатор формы
//
// Возвращаемое значение:
//  МассивВозврата - Массив  - массив структур с возвращаемыми значениями
Функция ПолучитьВсеПодписи(ФайлСсылка, УникальныйИдентификатор) Экспорт
	
	ВерсияСсылка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ФайлСсылка, "ТекущаяВерсия");
	
	Возврат ЭлектроннаяЦифроваяПодпись.ПолучитьВсеПодписи(ВерсияСсылка, УникальныйИдентификатор);
	
КонецФункции

// Заносит информацию о массиве ЭЦП
//
// Параметры
//  МассивДанныхДляЗанесенияВБазу  - Массив Структур - информация для занесения в табличную часть
//                ЭлектронныеЦифровыеПодписи
//  УникальныйИдентификатор - УникальныйИдентификатор - уникальный идентификатор формы
Процедура ЗанестиИнформациюОПодписях(МассивДанныхДляЗанесенияВБазу, УникальныйИдентификатор = Неопределено) Экспорт
	
	Для Каждого Данные Из МассивДанныхДляЗанесенияВБазу Цикл
		ОбъектСсылка = Данные.ОбъектСсылка;
		
		СтруктураРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОбъектСсылка, "Редактирует, Зашифрован");
		Редактирует = СтруктураРеквизитов.Редактирует;
		Зашифрован = СтруктураРеквизитов.Зашифрован;
		
		Если НЕ Редактирует.Пустая() Тогда
			СтрокаИсключения = ФайловыеФункцииСлужебныйКлиентСервер.СтрокаСообщенияОНедопустимостиПодписанияЗанятогоФайла(ОбъектСсылка);
			ВызватьИсключение СтрокаИсключения;
		КонецЕсли;
		
		Если Зашифрован Тогда
			СтрокаИсключения = ФайловыеФункцииСлужебныйКлиентСервер.СтрокаСообщенияОНедопустимостиПодписанияЗашифрованногоФайла(ОбъектСсылка);
			ВызватьИсключение СтрокаИсключения;
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Данные Из МассивДанныхДляЗанесенияВБазу Цикл
		
		ЗанестиИнформациюОПодписиФайла(Данные.ОбъектСсылка, Данные.НоваяПодписьДвоичныеДанные, 
			Данные.Отпечаток, Данные.ДатаПодписи, Данные.Комментарий, 
			Данные.ИмяФайлаПодписи, Данные.КомуВыданСертификат,
			Данные.ДвоичныеДанныеСертификата,
			УникальныйИдентификатор);
			
		// для варианта с хранением файлов на диске (на сервере) удаляем Файл из временного хранилища после получения
		Если НЕ ПустаяСтрока(Данные.АдресФайла) И ЭтоАдресВременногоХранилища(Данные.АдресФайла) Тогда
			УдалитьИзВременногоХранилища(Данные.АдресФайла);
		КонецЕсли;
			
	КонецЦикла;
	
КонецПроцедуры

// Заносит информацию о одной ЭЦП
//
// Параметры
//  Данные  - Структура - информация для занесения в табличную часть
//                ЭлектронныеЦифровыеПодписи
//  УникальныйИдентификатор - УникальныйИдентификатор - уникальный идентификатор формы
Процедура ЗанестиИнформациюОднойПодписи(Данные, УникальныйИдентификатор = Неопределено) Экспорт
	
	ОбъектСсылка = Данные.ОбъектСсылка;
	
	СтруктураРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОбъектСсылка, "Редактирует, Зашифрован");
	
	Редактирует = СтруктураРеквизитов.Редактирует;
	Если НЕ Редактирует.Пустая() Тогда
		ВызватьИсключение ФайловыеФункцииСлужебныйКлиентСервер.СтрокаСообщенияОНедопустимостиПодписанияЗанятогоФайла(ОбъектСсылка);
	КонецЕсли;
	
	Зашифрован = СтруктураРеквизитов.Зашифрован;
	Если Зашифрован Тогда
		СтрокаИсключения = ФайловыеФункцииСлужебныйКлиентСервер.СтрокаСообщенияОНедопустимостиПодписанияЗашифрованногоФайла(ОбъектСсылка);
		ВызватьИсключение СтрокаИсключения;
	КонецЕсли;
	
	ЗанестиИнформациюОПодписиФайла(Данные.ОбъектСсылка, Данные.НоваяПодписьДвоичныеДанные, 
		Данные.Отпечаток, Данные.ДатаПодписи, Данные.Комментарий, 
		Данные.ИмяФайлаПодписи, Данные.КомуВыданСертификат, 
		Данные.ДвоичныеДанныеСертификата,
		УникальныйИдентификатор);
		
КонецПроцедуры	

// Заносит информацию о подписи файла (добавляет запись в табл часть ЭЦП у версииФайла, и ставит реквизит ПодписанЭЦП версии и Файлу)
//
// Параметры
//  ОбъектСсылка  - любая ссылка - объект, в табличную часть которого будет занесена информация о ЭЦП
//  НоваяПодписьДвоичныеДанные  - ДвоичныеДанные - двоичные данные подписи
//  Отпечаток  - Строка - Base64 закодированная строка с отпечатком сертификата подписавшего
//  ДатаПодписи  - Дата - дата подписи
//  Комментарий  - Строка - комментарий подписи
//  ИмяФайлаПодписи  - Строка - имя файла подписи (не пусто только в случае если подпись добавлена из файла)
//  КомуВыданСертификат  - Строка - представление поля КомуВыдан сертификата
//  УникальныйИдентификатор - УникальныйИдентификатор - уникальный идентификатор формы
Процедура ЗанестиИнформациюОПодписиФайла(ФайлСсылка, НоваяПодписьДвоичныеДанные, 
	Отпечаток, ДатаПодписи, Комментарий, ИмяФайлаПодписи, 
	КомуВыданСертификат, ДвоичныеДанныеСертификата,
	УникальныйИдентификатор = Неопределено) Экспорт
	
	ВерсияСсылка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ФайлСсылка, "ТекущаяВерсия");
	
	НачатьТранзакцию();
	Попытка
		
		ЭлектроннаяЦифроваяПодпись.ЗанестиИнформациюОПодписи(ВерсияСсылка, 
			НоваяПодписьДвоичныеДанные, 
			Отпечаток, ДатаПодписи, Комментарий, ИмяФайлаПодписи, 
			КомуВыданСертификат, ДвоичныеДанныеСертификата,
			УникальныйИдентификатор);
			
		ФайлСсылкаПодписан = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ФайлСсылка, "ПодписанЭЦП");
		Если ФайлСсылкаПодписан = Ложь Тогда
			ФайлОбъект = ФайлСсылка.ПолучитьОбъект(); 
			ЗаблокироватьДанныеДляРедактирования(ФайлСсылка, , УникальныйИдентификатор);
			ФайлОбъект.ПодписанЭЦП = Истина;
			
			ФайлОбъект.Записать();
			РазблокироватьДанныеДляРедактирования(ФайлСсылка, УникальныйИдентификатор);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Удаляет записи из табличной части ЭЦП
//
// Параметры
//  ВерсияСсылка - СправочникСсылка.ВерсииФайлов - ссылка на версию файла
//  ТаблицаВыделенныеСтроки  - ТаблицаЗначений - таблица, содержащая данные - ссылка на объект и номер строки в его табличной части
//  РеквизитПодписанИзменен - Булево - возвращаемое значение - если удалена последняя подпись, 
//     РеквизитПодписанИзменен примет значение Истина
//  УникальныйИдентификатор - УникальныйИдентификатор - уникальный идентификатор формы
Процедура УдалитьПодписиВерсииФайла(ВерсияСсылка, ТаблицаВыделенныеСтроки, РеквизитПодписанИзменен,
	УникальныйИдентификатор = Неопределено) Экспорт
	
	НачатьТранзакцию();
	Попытка
		
		КоличествоПодписей = 0;
		ЭлектроннаяЦифроваяПодпись.УдалитьПодписи(ВерсияСсылка, ТаблицаВыделенныеСтроки, 
			РеквизитПодписанИзменен, КоличествоПодписей, УникальныйИдентификатор);
		
		ФайлСсылка = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВерсияСсылка, "Владелец");
		ФайлСсылкаПодписан = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ФайлСсылка, "ПодписанЭЦП");
		
		Если ФайлСсылкаПодписан = Истина И КоличествоПодписей = 0 Тогда
			ФайлОбъект = ФайлСсылка.ПолучитьОбъект(); 
			ЗаблокироватьДанныеДляРедактирования(ФайлСсылка, , УникальныйИдентификатор);
			ФайлОбъект.ПодписанЭЦП = Ложь;
			ФайлОбъект.Записать();
			РазблокироватьДанныеДляРедактирования(ФайлСсылка, УникальныйИдентификатор);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Процедура добавляет настройки специфичные для подсистемы Работа с файлами.
//
// Параметры
//  ОбщиеНастройки        - Структура - настройки общие для всех пользователей.
//  ПерсональныеНастройки - Структура - настройки различные для разных пользователей.
//  
Процедура ДобавитьНастройкиРаботыСФайлами(ОбщиеНастройки, ПерсональныеНастройки) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПерсональныеНастройки.Вставить("ДействиеПоДвойномуЩелчкуМыши", ДействиеПоДвойномуЩелчкуМыши());
	ПерсональныеНастройки.Вставить("СпособСравненияВерсийФайлов",  СпособСравненияВерсийФайлов());
	
	ПерсональныеНастройки.Вставить("СпрашиватьРежимРедактированияПриОткрытииФайла",
		СпрашиватьРежимРедактированияПриОткрытииФайла());
	
	ПерсональныеНастройки.Вставить("ЭтоПолноправныйПользователь",
		Пользователи.ЭтоПолноправныйПользователь(,, Ложь));
	
	ПоказыватьЗанятыеФайлыПриЗавершенииРаботы = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		"НастройкиПрограммы", "ПоказыватьЗанятыеФайлыПриЗавершенииРаботы");
	
	Если ПоказыватьЗанятыеФайлыПриЗавершенииРаботы = Неопределено Тогда
		ПоказыватьЗанятыеФайлыПриЗавершенииРаботы = Истина;
		
		ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
			"НастройкиПрограммы",
			"ПоказыватьЗанятыеФайлыПриЗавершенииРаботы",
			ПоказыватьЗанятыеФайлыПриЗавершенииРаботы);
	КонецЕсли;
	
	ПерсональныеНастройки.Вставить("ПоказыватьЗанятыеФайлыПриЗавершенииРаботы",
		ПоказыватьЗанятыеФайлыПриЗавершенииРаботы);
	
КонецПроцедуры

// Добавляет файл в тома при выполнении команды "разместить файлы начального образа"
// Параметры
//  СоответствиеПутейФайлов - Соответствие - соответствие УникальногоИдентификатора файла и пути на диске к файлу
//  ТипХраненияФайла - Перечисления.ТипыХраненияФайлов - тип хранения файлов
Процедура ДобавитьФайлыВТомаПриРазмещении(СоответствиеПутейФайлов, ТипХраненияФайла) Экспорт
	
	Выборка = Справочники.ВерсииФайлов.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Объект = Выборка.ПолучитьОбъект();
		
		Если Объект.ТипХраненияФайла <> Перечисления.ТипыХраненияФайлов.ВТомахНаДиске Тогда
			Продолжить;
		КонецЕсли;
		
		УникальныйИдентификатор = Строка(Объект.Ссылка.УникальныйИдентификатор());
		
		ПолныйПутьФайлаНаДиске = СоответствиеПутейФайлов.Получить(УникальныйИдентификатор);
		ПолныйПутьНовый = "";
		
		Если ПолныйПутьФайлаНаДиске = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ХранилищеФайла = Неопределено;
		
		// в базе-приемнике файлы должны храниться в информационной базе - значит там их и разместим (даже если в исходной базе они были в томах)
		Если ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
			
			Объект.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе;
			Объект.ПутьКФайлу = "";
			Объект.Том = Справочники.ТомаХраненияФайлов.ПустаяСсылка();
			
			ДвоичныеДанные = Новый ДвоичныеДанные(ПолныйПутьФайлаНаДиске);
			ХранилищеФайла = Новый ХранилищеЗначения(ДвоичныеДанные);
			
		Иначе // в базе-приемнике файлы должны храниться в томах на диске - переместим разархивированный файл на том
			
			ФайлИсх = Новый Файл(ПолныйПутьФайлаНаДиске);
			РазмерФайла = ФайлИсх.Размер();
			
			ВремяИзмененияУниверсальное = Объект.ДатаМодификацииУниверсальная;
			ИмяБезРасширения = Объект.Наименование;
			Расширение = Объект.Расширение;
			
			ПолныйПутьНовый = ФайлИсх.Путь + ИмяБезРасширения + "." + Объект.Расширение;
			ПереместитьФайл(ПолныйПутьФайлаНаДиске, ПолныйПутьНовый);
			
			ПутьКФайлуНаТоме = "";
			СсылкаНаТом = Неопределено;
			// добавить в один из томов (где есть свободное место)
			
			ФайловыеФункцииСлужебный.ДобавитьНаДиск(
				ПолныйПутьНовый,
				ПутьКФайлуНаТоме,
				СсылкаНаТом,
				ВремяИзмененияУниверсальное,
				Объект.НомерВерсии,
				ИмяБезРасширения,
				Расширение,
				РазмерФайла,
				Объект.Зашифрован);
			
			Объект.ПутьКФайлу = ПутьКФайлуНаТоме;
			Объект.Том = СсылкаНаТом.Ссылка;
			
		КонецЕсли;
		
		Объект.ДополнительныеСвойства.Вставить("РазмещениеФайловВТомах", Истина); // чтобы прошла запись подписанных файлов
		Объект.Записать();
		
		Если ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
			ЗаписатьФайлВИнформационнуюБазу(Объект.Ссылка, ХранилищеФайла);	
		КонецЕсли;
		
		Если НЕ ПустаяСтрока(ПолныйПутьНовый) Тогда
			УдалитьФайлы(ПолныйПутьНовый);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Удаляет регистрацию изменений - после размещения в томах
// Параметры
//  ПланОбменаСсылка - ПланОбмена.Ссылка - план обмена
Процедура УдалитьРегистрациюИзменений(ПланОбменаСсылка) Экспорт
	
	ПланыОбмена.УдалитьРегистрациюИзменений(ПланОбменаСсылка, Метаданные.Справочники.ВерсииФайлов);
	ПланыОбмена.УдалитьРегистрациюИзменений(ПланОбменаСсылка, Метаданные.Справочники.Файлы);
	ПланыОбмена.УдалитьРегистрациюИзменений(ПланОбменаСсылка, Метаданные.РегистрыСведений.ХранимыеФайлыВерсий);
	
КонецПроцедуры

// Получает текст запроса для извлечения текста
// Параметры
//  ТекстЗапроса - Строка - текст запроса для извлечения текста
//
Процедура ПолучитьТекстЗапросаДляИзвлеченияТекста(ТекстЗапроса, ПолучитьВсеФайлы = Ложь) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 100
	|	ВерсииФайлов.Ссылка КАК Ссылка,
	|	ВерсииФайлов.СтатусИзвлеченияТекста КАК СтатусИзвлеченияТекста,
	|	ВерсииФайлов.ТипХраненияФайла КАК ТипХраненияФайла,
	|	ВерсииФайлов.Расширение КАК Расширение,
	|	ВерсииФайлов.Владелец.Наименование КАК Наименование
	|ИЗ
	|	Справочник.ВерсииФайлов КАК ВерсииФайлов
	|ГДЕ
	|	(ВерсииФайлов.СтатусИзвлеченияТекста = ЗНАЧЕНИЕ(Перечисление.СтатусыИзвлеченияТекстаФайлов.НеИзвлечен)
	|			ИЛИ ВерсииФайлов.СтатусИзвлеченияТекста = ЗНАЧЕНИЕ(Перечисление.СтатусыИзвлеченияТекстаФайлов.ПустаяСсылка))
	|	И НЕ ВерсииФайлов.Зашифрован";
	
	Если ПолучитьВсеФайлы Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ПЕРВЫЕ 100", "");
	КонецЕсли;
	
КонецПроцедуры

// Получает полный путь к файлу на диске
// Параметры
//  ВерсияСсылка  - СправочникСсылка.ВерсииФайлов - версия файла
//
// Возвращаемое значение:
//   Строка - полный путь к файлу на диске
Функция ПолучитьИмяФайлаСПутемКДвоичнымДанным(ВерсияСсылка) Экспорт
	
	ИмяФайлаСПутем = "";
	
	Если ВерсияСсылка.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
		
		ХранилищеФайла = ПолучитьХранилищеФайлаИзИнформационнойБазы(ВерсияСсылка);
		ДвоичныеДанныеФайла = ХранилищеФайла.Получить();
		
		ИмяФайлаСПутем = ПолучитьИмяВременногоФайла(ВерсияСсылка.Расширение);
		ДвоичныеДанныеФайла.Записать(ИмяФайлаСПутем);
	Иначе
		Если НЕ ВерсияСсылка.Том.Пустая() Тогда
			ИмяФайлаСПутем = ФайловыеФункцииСлужебный.ПолныйПутьТома(ВерсияСсылка.Том) + ВерсияСсылка.ПутьКФайлу;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ИмяФайлаСПутем;
	
КонецФункции

// Записывает извлеченный текст.
//
// Параметры:
//  ТекущаяВерсия  - СправочникСсылка.ВерсииФайлов - версия файла.
//
Процедура ЗаписатьИзвлеченныйТекст(ТекущаяВерсия) Экспорт
	
	ФайлЗаблокирован = Ложь;
	
	Файл = ТекущаяВерсия.Владелец;
	Если Файл.ТекущаяВерсия = ТекущаяВерсия.Ссылка Тогда
		Попытка
			ЗаблокироватьДанныеДляРедактирования(Файл);
			ФайлЗаблокирован = Истина;
		Исключение
			Возврат;
		КонецПопытки;
	КонецЕсли;
	
	НачатьТранзакцию();
	Попытка
		ТекущаяВерсия.Записать();
		
		Если Файл.ТекущаяВерсия = ТекущаяВерсия.Ссылка Тогда
			ФайлОбъект = Файл.ПолучитьОбъект();
			ФайлОбъект.ТекстХранилище = ТекущаяВерсия.ТекстХранилище;
			ФайлОбъект.Записать();
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		Если ФайлЗаблокирован Тогда
			РазблокироватьДанныеДляРедактирования(Файл);
		КонецЕсли;
		
		ВызватьИсключение;
	КонецПопытки;
	
	Если ФайлЗаблокирован Тогда
		РазблокироватьДанныеДляРедактирования(Файл);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает количество файлов в томах
// Возвращаемое значение:
//   Число - число файлов в томах
//
Функция ПодсчитатьКоличествоФайловВТомах() Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(КОЛИЧЕСТВО(Версии.Ссылка), 0) КАК КоличествоФайлов
	|ИЗ
	|	Справочник.ВерсииФайлов КАК Версии
	|ГДЕ
	|	Версии.ТипХраненияФайла = ЗНАЧЕНИЕ(Перечисление.ТипыХраненияФайлов.ВТомахНаДиске)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Число(Выборка.КоличествоФайлов);
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

// Возвращает в параметре КоличествоФайловВТомах количество файлов в томах
Процедура ОпределитьКоличествоФайловВТомах(КоличествоФайловВТомах) Экспорт
	
	КоличествоФайловВТомах = КоличествоФайловВТомах + ПодсчитатьКоличествоФайловВТомах();
	
КонецПроцедуры

// Возвращает Истина в параметре ЕстьХранимыеФайлы, если есть хранимые файлы к объекту ВнешнийОбъект.
//
Процедура ОпределитьНаличиеХранимыхФайлов(ВнешнийОбъект, ЕстьХранимыеФайлы) Экспорт
	
	Если ЕстьХранимыеФайлы = Истина Тогда
		Возврат;
	КонецЕсли;
	ТипыВладельцев = Метаданные.ОбщиеКоманды.ПрисоединенныеФайлы.ТипПараметраКоманды.Типы();
	Если ТипыВладельцев.Найти(ТипЗнч(ВнешнийОбъект)) <> Неопределено Тогда
		МассивФайлов = ПолучитьВсеПодчиненныеФайлы(ВнешнийОбъект);
		ЕстьХранимыеФайлы = МассивФайлов.Количество() <> 0;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает в параметре ХранимыеФайлы массив хранимых файлов к объекту ВнешнийОбъект.
//
Процедура ПолучитьХранимыеФайлы(ВнешнийОбъект, ХранимыеФайлы) Экспорт
	
	ТипыВладельцев = Метаданные.ОбщиеКоманды.ПрисоединенныеФайлы.ТипПараметраКоманды.Типы();
	Если ТипыВладельцев.Найти(ТипЗнч(ВнешнийОбъект)) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивФайлов = ПолучитьВсеПодчиненныеФайлы(ВнешнийОбъект);
	Для Каждого Файл Из МассивФайлов Цикл
		ДанныеФайла = Новый Структура("ДатаМодификацииУниверсальная, Размер, Наименование, Расширение, ДвоичныеДанныеФайла, Текст");
		
		ДанныеФайла.ДатаМодификацииУниверсальная = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Файл.ТекущаяВерсия, "ДатаМодификацииУниверсальная");
		ДанныеФайла.Размер = Файл.ТекущаяВерсияРазмер;
		ДанныеФайла.Наименование = Файл.Наименование;
		ДанныеФайла.Расширение = Файл.ТекущаяВерсияРасширение;
		
		ДанныеДляОткрытия = ПолучитьНавигационнуюСсылкуВоВременномХранилище(Файл.ТекущаяВерсия);
		ДанныеФайла.ДвоичныеДанныеФайла = ДанныеДляОткрытия;
		
		ДанныеФайла.Текст = Файл.ТекстХранилище.Получить();
		
		ХранимыеФайлы.Добавить(ДанныеФайла);
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ОБНОВЛЕНИЯ ИНФОРМАЦИОННОЙ БАЗЫ

// Добавляет процедуры-обработчики обновления, необходимые данной подсистеме.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                  общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.5.2"; // при обновлении на 1.0.5.2 сработает обработчик
	Обработчик.Процедура = "РаботаСФайламиСлужебныйВызовСервера.ЗаполнитьНомерВерсииИзКодаСправочника";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.5.2"; // при обновлении на 1.0.5.2 сработает обработчик
	Обработчик.Процедура = "РаботаСФайламиСлужебныйВызовСервера.ЗаполнитьТипХраненияФайлаВБазе";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.5.7"; // при обновлении на 1.0.5.7 сработает обработчик
	Обработчик.Процедура = "РаботаСФайламиСлужебныйВызовСервера.СменитьИндексПиктограммы";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.6.3"; // при обновлении на 1.0.6.3 сработает обработчик
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.Процедура = "РаботаСФайламиСлужебныйВызовСервера.ЗаполнитьПутиТома";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.7.1";
	Обработчик.Процедура = "РаботаСФайламиСлужебныйВызовСервера.ПерезаписатьВсеФайлы";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.2.2";
	Обработчик.Процедура = "РаботаСФайламиСлужебныйВызовСервера.ЗаполнитьДатуМодификацииФайла";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.2.1.2";
	Обработчик.Процедура = "РаботаСФайламиСлужебныйВызовСервера.ПереместитьФайлыИзИнформационнойБазыВРегистрСведений";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.2.1.2";
	Обработчик.Процедура = "РаботаСФайламиСлужебныйВызовСервера.ЗаполнитьДатуЗаема";
	
КонецПроцедуры

// В справочнике ВерсииФайлов из данных в Код(Строка) заполняет НомерВерсии(Число)
Процедура ЗаполнитьНомерВерсииИзКодаСправочника() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВерсииФайлов.Ссылка
	|ИЗ
	|	Справочник.ВерсииФайлов КАК ВерсииФайлов";

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		
		Если Объект.НомерВерсии = 0 Тогда 
			
			// коррекция ситуации, допустимой ранее, но недопустимой сейчас - активная версия помечена на удаление, а владелец - нет
			Если Объект.ПометкаУдаления = Истина И Объект.Владелец.ПометкаУдаления = Ложь И Объект.Владелец.ТекущаяВерсия = Объект.Ссылка Тогда
				Объект.ПометкаУдаления = Ложь;
			КонецЕсли;
			
			Попытка
				Объект.НомерВерсии = Число(Объект.Код);
				ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
			Исключение // код например с префиксом базы - не используем. Это не ошибка  - т.к. только в старых версиях конфигурации
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// В справочнике ВерсииФайлов заполняет ТипХраненияФайла значением ВБазе
Процедура ЗаполнитьТипХраненияФайлаВБазе() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВерсииФайлов.Ссылка
	|ИЗ
	|	Справочник.ВерсииФайлов КАК ВерсииФайлов";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		
		Если Объект.ТипХраненияФайла.Пустая() Тогда
			Объект.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// В справочнике ВерсииФайлов и Файлы ИндексКартинки увеличивает в 2 раза
Процедура СменитьИндексПиктограммы() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВерсииФайлов.Ссылка
	|ИЗ
	|	Справочник.ВерсииФайлов КАК ВерсииФайлов";

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Объект.ОбменДанными.Загрузка = Истина;
		Объект.ИндексКартинки = ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьИндексПиктограммыФайла(Объект.Расширение);
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Файлы.Ссылка
	|ИЗ
	|	Справочник.Файлы КАК Файлы";

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Объект.ОбменДанными.Загрузка = Истина;
		Объект.ИндексКартинки = Объект.ТекущаяВерсия.ИндексКартинки;
		Объект.Записать();
	КонецЦикла;
	
КонецПроцедуры

// Вызывается при обновлении на 1.0.6.3 - заполняет пути ТомаХраненияФайлов
Процедура ЗаполнитьПутиТома() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТомаХраненияФайлов.Ссылка
	|ИЗ
	|	Справочник.ТомаХраненияФайлов КАК ТомаХраненияФайлов";

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Объект.ПолныйПутьLinux = Объект.ПолныйПутьWindows;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
	КонецЦикла;
	
КонецПроцедуры

// В справочнике Файлы перезаписывает все элементы
Процедура ПерезаписатьВсеФайлы() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Файлы.Ссылка
	|ИЗ
	|	Справочник.Файлы КАК Файлы";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		Объект.Записать();
	КонецЦикла;
	
КонецПроцедуры

// В справочнике ВерсииФайлов заполняет ДатаМодификацииФайла - из даты создания
Процедура ЗаполнитьДатуМодификацииФайла() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВерсииФайлов.Ссылка
		|ИЗ
		|	Справочник.ВерсииФайлов КАК ВерсииФайлов";

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		
		Если Объект.ДатаМодификацииФайла = Дата("00010101000000") Тогда
			Объект.ДатаМодификацииФайла = Объект.ДатаСоздания;
			Объект.Записать();
		КонецЕсли;
		
	КонецЦикла;
	
	ПерезаписатьВсеФайлы(); // чтобы перенеслись значения реквизита ДатаМодификацииФайла из версии в файл
	
КонецПроцедуры

// Создает новые файлы по аналогии с указанными
// Параметры
//  МассивФайлов  - Массив - массив объектов СправочникСсылка.Файлы - существующие файлы
//  ВладелецНовогоФайла - ЛюбаяСсылка - владелец файла
//
Процедура СкопироватьФайлы(МассивФайлов, ВладелецНовогоФайла) Экспорт
	
	Для каждого Файл Из МассивФайлов Цикл
		НовыйФайл = СкопироватьФайл(Файл, ВладелецНовогоФайла);
	КонецЦикла;
	
КонецПроцедуры
	
// Возвращает массив ссылок на файлы
// Параметры
//  Объект - ЛюбаяСсылка - владелец файла
//
// Возвращаемое значение:
//   Массив - массив файлов
Процедура ПолучитьПрикрепленныеФайлыКОбъекту(Объект, МассивФайлов) Экспорт
	
	Если ТипЗнч(Объект) = Тип("СправочникСсылка.Файлы") Тогда
		МассивФайлов.Добавить(Объект);
		Возврат;
	КонецЕсли;
	
	ТипыПараметраКоманды = Метаданные.ОбщиеКоманды.ПрисоединенныеФайлы.ТипПараметраКоманды.Типы();
	ТипыВладельцев = Метаданные.Справочники.Файлы.Реквизиты.ВладелецФайла.Тип.Типы();
	
	Если ТипыВладельцев.Найти(ТипЗнч(Объект)) <> Неопределено
		И ТипыПараметраКоманды.Найти(ТипЗнч(Объект)) <> Неопределено Тогда
		
		МассивФайловЛокальный = ПолучитьВсеПодчиненныеФайлы(Объект);
		Для Каждого Строка Из МассивФайловЛокальный Цикл
			МассивФайлов.Добавить(Строка);
		КонецЦикла;
		
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

// Записывает ХранилищеФайла в информационную базу
//
// Параметры
// ВерсияСсылка - ссылка на версию файла
// ХранилищеФайла - ХранилищеЗначения, с двоичными данными файла, которые требуется записать
//
Процедура ЗаписатьФайлВИнформационнуюБазу(ВерсияСсылка, ХранилищеФайла) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерЗаписи = РегистрыСведений.ХранимыеФайлыВерсий.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ВерсияФайла = ВерсияСсылка;
	МенеджерЗаписи.ХранимыйФайл = ХранилищеФайла;
	МенеджерЗаписи.Записать(Истина);
	
КонецПроцедуры

// Удаляет запись в регистре ХранимыеФайлыВерсий
//
// Параметры
// ВерсияСсылка - ссылка на версию файла
//
Процедура УдалитьЗаписьИзРегистраХранимыеФайлыВерсий(ВерсияСсылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.ХранимыеФайлыВерсий.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ВерсияФайла.Установить(ВерсияСсылка);
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Читает ХранилищеФайла из информационной базы
//
// Параметры
// ВерсияСсылка - ссылка на версию файла
//
// Возвращаемое значение:
//   ХранилищеЗначения, с двоичными данными файла
Функция ПолучитьХранилищеФайлаИзИнформационнойБазы(ВерсияСсылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерЗаписи = РегистрыСведений.ХранимыеФайлыВерсий.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ВерсияФайла = ВерсияСсылка;
	МенеджерЗаписи.Прочитать();
	
	Возврат МенеджерЗаписи.ХранимыйФайл;
	
КонецФункции

// переносит бинарный файл из ФайлХранилище справочника ВерсииФайлов в регистр сведений ХранимыеФайлыВерсий
Процедура ПереместитьФайлыИзИнформационнойБазыВРегистрСведений() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВерсииФайлов.Ссылка
	|ИЗ
	|	Справочник.ВерсииФайлов КАК ВерсииФайлов
	|ГДЕ
	|	ВерсииФайлов.ТипХраненияФайла = &ТипХраненияФайла";
		
	Запрос.УстановитьПараметр("ТипХраненияФайла", Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе);	

	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		
		ДанныеВХранилище = Объект.ФайлХранилище.Получить();
		Если ТипЗнч(ДанныеВХранилище) = Тип("ДвоичныеДанные") Тогда
			ЗаписатьФайлВИнформационнуюБазу(Выборка.Ссылка, Объект.ФайлХранилище);
			Объект.ФайлХранилище = Новый ХранилищеЗначения(""); // очищаем значение
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// заполняет поле ДатаЗаема текущей датой
Процедура ЗаполнитьДатуЗаема() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДатаЗаема = ТекущаяДатаСеанса();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Файлы.Ссылка
		|ИЗ
		|	Справочник.Файлы КАК Файлы";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если НЕ Выборка.Ссылка.Редактирует.Пустая() Тогда
			Объект = Выборка.Ссылка.ПолучитьОбъект();
			Объект.ДополнительныеСвойства.Вставить("ЗаписьПодписанногоОбъекта", Истина); // чтобы прошла запись ранее подписанного объекта
			Объект.ДатаЗаема = ДатаЗаема;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Ставит файлу признак Зашифрован
Процедура УстановитьПризнакЗашифрован(ФайлСсылка, Зашифрован, УникальныйИдентификатор = Неопределено) Экспорт
	
	ФайлОбъект = ФайлСсылка.ПолучитьОбъект();
	ЗаблокироватьДанныеДляРедактирования(ФайлСсылка, , УникальныйИдентификатор);
	
	ФайлОбъект.Зашифрован = Зашифрован;
	ФайлОбъект.ДополнительныеСвойства.Вставить("ЗаписьПодписанногоОбъекта", Истина); // чтобы прошла запись ранее подписанного объекта
	ФайлОбъект.Записать();
	РазблокироватьДанныеДляРедактирования(ФайлСсылка, УникальныйИдентификатор);
	
КонецПроцедуры

// Помещает информацию о сертификатах шифрования в табличную часть файла
Процедура ЗанестиИнформациюОСертификатахШифрования(ФайлСсылка, МассивОтпечатков, УникальныйИдентификатор) Экспорт
	
	НачатьТранзакцию();
	Попытка
		
		ФайлОбъект = ФайлСсылка.ПолучитьОбъект();
		ЗаблокироватьДанныеДляРедактирования(ФайлСсылка, , УникальныйИдентификатор);
		
		Для Каждого ОтпечатокСтруктура Из МассивОтпечатков Цикл
			НоваяСтрока = ФайлОбъект.СертификатыШифрования.Добавить();
			НоваяСтрока.Отпечаток = ОтпечатокСтруктура.Отпечаток;
			НоваяСтрока.Представление = ОтпечатокСтруктура.Представление;
			НоваяСтрока.Сертификат = Новый ХранилищеЗначения(ОтпечатокСтруктура.Сертификат);
		КонецЦикла;
		
		ФайлОбъект.ДополнительныеСвойства.Вставить("ЗаписьПодписанногоОбъекта", Истина); // чтобы прошла запись ранее подписанного объекта
		ФайлОбъект.Записать();
		РазблокироватьДанныеДляРедактирования(ФайлСсылка, УникальныйИдентификатор);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Обновляет размер файла и текущей версии. Нужно при загрузке шифрованного файла в почте
Процедура ОбновитьРазмерФайлаИВерсии(ДанныеФайла, РазмерФайла, УникальныйИдентификатор) Экспорт
	
	НачатьТранзакцию();
	Попытка
		
		ВерсияОбъект = ДанныеФайла.Версия.ПолучитьОбъект();
		ВерсияОбъект.Заблокировать();
		ВерсияОбъект.Размер = РазмерФайла;
		ВерсияОбъект.ДополнительныеСвойства.Вставить("ЗаписьПодписанногоОбъекта", Истина); // чтобы прошла запись ранее подписанного объекта
		ВерсияОбъект.Записать();
		ВерсияОбъект.Разблокировать();
		
		ФайлОбъект = ДанныеФайла.Ссылка.ПолучитьОбъект();
		ЗаблокироватьДанныеДляРедактирования(ФайлОбъект.Ссылка, , УникальныйИдентификатор);
		ФайлОбъект.ДополнительныеСвойства.Вставить("ЗаписьПодписанногоОбъекта", Истина); // чтобы прошла запись ранее подписанного объекта
		ФайлОбъект.Записать();
		РазблокироватьДанныеДляРедактирования(ФайлОбъект.Ссылка, УникальныйИдентификатор);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Получает количество версий с неизвлеченным текстом
Функция ПолучитьКоличествоВерсийСНеизвлеченнымТекстом() Экспорт
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(*) КАК ЧислоВерсий
	|ИЗ
	|	Справочник.ВерсииФайлов КАК ВерсииФайлов
	|ГДЕ
	|	(ВерсииФайлов.СтатусИзвлеченияТекста = ЗНАЧЕНИЕ(Перечисление.СтатусыИзвлеченияТекстаФайлов.НеИзвлечен)
	|			ИЛИ ВерсииФайлов.СтатусИзвлеченияТекста = ЗНАЧЕНИЕ(Перечисление.СтатусыИзвлеченияТекстаФайлов.ПустаяСсылка))
	|	И НЕ ВерсииФайлов.Зашифрован";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Результат = Выборка.ЧислоВерсий;
	
	Возврат Результат;
	
КонецФункции

// Вернет размер файлов на томе - в байтах
Функция ПодсчитатьРазмерФайловНаТоме(СсылкаТома) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СУММА(Версии.Размер), 0) КАК РазмерФайлов
	|ИЗ
	|	Справочник.ВерсииФайлов КАК Версии
	|ГДЕ
	|	Версии.Том = &Том";
	
	Запрос.Параметры.Вставить("Том", СсылкаТома);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Число(Выборка.РазмерФайлов);
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции

// Читает кодировку версии файла
//
// Параметры
// ВерсияСсылка - ссылка на версию файла
//
// Возвращаемое значение:
//   Строка кодировки
Функция ПолучитьКодировкуВерсииФайла(ВерсияСсылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерЗаписи = РегистрыСведений.КодировкиВерсийФайлов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ВерсияФайла = ВерсияСсылка;
	МенеджерЗаписи.Прочитать();
	
	Возврат МенеджерЗаписи.Кодировка;
	
КонецФункции

// Записывает кодировку версии файла
//
// Параметры
// ВерсияСсылка - ссылка на версию файла
// Кодировка - Строка кодировки
//
Процедура ЗаписатьКодировкуВерсииФайла(ВерсияСсылка, Кодировка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерЗаписи = РегистрыСведений.КодировкиВерсийФайлов.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.ВерсияФайла = ВерсияСсылка;
	МенеджерЗаписи.Кодировка = Кодировка;
	МенеджерЗаписи.Записать(Истина);
	
КонецПроцедуры

// Записывает кодировку версии файла
//
// Параметры
// ВерсияСсылка - ссылка на версию файла
// Кодировка - Строка кодировки
// ИзвлеченныйТекст - текст, извлеченный из файла
//
Процедура ЗаписатьКодировкуВерсииФайлаИИзвлеченныйТекст(ВерсияСсылка, Кодировка, ИзвлеченныйТекст) Экспорт
	
	ЗаписатьКодировкуВерсииФайла(ВерсияСсылка, Кодировка);
	ЗаписатьРезультатИзвлеченияТекста(ВерсияСсылка, Перечисления.СтатусыИзвлеченияТекстаФайлов.Извлечен, 
		ИзвлеченныйТекст);
	
КонецПроцедуры

// Записывает на сервер результат извлечения текста - извлеченный текст и СтатусИзвлеченияТекста
Процедура ЗаписатьРезультатИзвлеченияТекста(ВерсияСсылка, РезультатИзвлечения, АдресВременногоХранилищаТекста) Экспорт
	
	ФайлЗаблокирован = Ложь;
	Файл = ВерсияСсылка.Владелец;
	
	Если Файл.ТекущаяВерсия = ВерсияСсылка Тогда
		
		Попытка
			ЗаблокироватьДанныеДляРедактирования(Файл);
			ФайлЗаблокирован = Истина;
		Исключение
			Возврат; // ничего не сообщаем
		КонецПопытки;
		
	КонецЕсли;
	
	Текст = "";
	
	ВерсияОбъект = ВерсияСсылка.ПолучитьОбъект();
	
	Если Не ПустаяСтрока(АдресВременногоХранилищаТекста) Тогда
		
		Если ЭтоАдресВременногоХранилища(АдресВременногоХранилищаТекста) Тогда
			Текст = ФайловыеФункцииСлужебный.ПолучитьСтрокуИзВременногоХранилища(АдресВременногоХранилищаТекста);
		Иначе	
			Текст = АдресВременногоХранилищаТекста;
		КонецЕсли;
		
		ВерсияОбъект.ТекстХранилище = Новый ХранилищеЗначения(Текст);
		ВерсияОбъект.СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.Извлечен;
		
	КонецЕсли;
	
	Если РезультатИзвлечения = "НеИзвлечен" Тогда
		ВерсияОбъект.СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.НеИзвлечен;
	ИначеЕсли РезультатИзвлечения = "Извлечен" Тогда
		ВерсияОбъект.СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.Извлечен;
	ИначеЕсли РезультатИзвлечения = "ИзвлечьНеУдалось" Тогда
		ВерсияОбъект.СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.ИзвлечьНеУдалось;
	КонецЕсли;    
	
	Попытка
		НачатьТранзакцию();
		
		ВерсияОбъект.ДополнительныеСвойства.Вставить("ЗаписьПодписанногоОбъекта", Истина); // чтобы прошла запись ранее подписанного объекта
		ВерсияОбъект.Записать();
		
		Если Файл.ТекущаяВерсия = ВерсияСсылка Тогда
			ФайлОбъект = Файл.ПолучитьОбъект();
			ФайлОбъект.ТекстХранилище = ВерсияОбъект.ТекстХранилище;
			ФайлОбъект.ДополнительныеСвойства.Вставить("ЗаписьПодписанногоОбъекта", Истина); // чтобы прошла запись ранее подписанного объекта
			ФайлОбъект.Записать();
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		
		Если ФайлЗаблокирован Тогда
			РазблокироватьДанныеДляРедактирования(Файл);
		КонецЕсли;
		
		ВызватьИсключение;
	КонецПопытки;
	
	Если ФайлЗаблокирован Тогда
		РазблокироватьДанныеДляРедактирования(Файл);
	КонецЕсли;
	
КонецПроцедуры
