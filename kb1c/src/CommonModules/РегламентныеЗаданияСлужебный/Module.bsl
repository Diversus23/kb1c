////////////////////////////////////////////////////////////////////////////////
// Подсистема "Регламентные задания".
// 
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС

// См. описание этой же процедуры в модуле СтандартныеПодсистемыСервер.
Процедура ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики) Экспорт
	
	// СЕРВЕРНЫЕ ОБРАБОТЧИКИ.
	
	СерверныеОбработчики["СтандартныеПодсистемы.ОбновлениеВерсииИБ\ПриДобавленииОбработчиковОбновления"].Добавить(
		"РегламентныеЗаданияСлужебный");
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		СерверныеОбработчики["СтандартныеПодсистемы.РаботаВМоделиСервиса\ПриЗаполненииТаблицыПараметровИБ"].Добавить(
			"РегламентныеЗаданияСлужебный");
	КонецЕсли;
	
	СерверныеОбработчики[
		"СтандартныеПодсистемы.БазоваяФункциональность\ПриДобавленииПараметровРаботыКлиентскойЛогикиСтандартныхПодсистемПриЗапуске"].Добавить(
		"РегламентныеЗаданияСлужебный");
	
	СерверныеОбработчики[
		"СтандартныеПодсистемы.БазоваяФункциональность\ПриДобавленииПараметровРаботыКлиентскойЛогикиСтандартныхПодсистем"].Добавить(
		"РегламентныеЗаданияСлужебный");
	
КонецПроцедуры

// Добавляет процедуры-обработчики обновления, необходимые данной подсистеме.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                  общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.2.2.2";
	Обработчик.Процедура = "РегламентныеЗаданияСлужебный.КонвертироватьНастройкиВыполненияРегламентныхЗаданий_1_2_2_2";
	
КонецПроцедуры

// Заполняет структуру параметров, необходимых для работы клиентского кода
// при запуске конфигурации. 
//
// Параметры:
//   Параметры   - Структура - структура параметров.
//
Процедура ДобавитьПараметрыРаботыКлиентаПриЗапуске(Параметры) Экспорт
	
	Если ИнформационнаяБазаФайловаяБезМенеджераФоновыхЗаданий() Тогда
		Параметры.Вставить("ПараметрыЗапускаОтдельногоСеансаВыполненияРегламентныхЗаданий", 
			Новый ФиксированнаяСтруктура(ПараметрыЗапускаОтдельногоСеансаВыполненияРегламентныхЗаданий(Истина)));
	КонецЕсли;
		
КонецПроцедуры

// Заполняет структуру параметров, необходимых для работы клиентского кода
// конфигурации. 
//
// Параметры:
//   Параметры   - Структура - структура параметров.
//
Процедура ДобавитьПараметрыРаботыКлиента(Параметры) Экспорт
	
	Если ИнформационнаяБазаФайловаяБезМенеджераФоновыхЗаданий() Тогда
		Параметры.Вставить("ПараметрыЗапускаОтдельногоСеансаВыполненияРегламентныхЗаданий", 
			Новый ФиксированнаяСтруктура(ПараметрыЗапускаОтдельногоСеансаВыполненияРегламентныхЗаданий(Истина)));
	КонецЕсли;
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Вызывает исключение, если у пользователя нет права администрирования.
Процедура ВызватьИсключениеЕслиНетПраваАдминистрирования() Экспорт
	
	Если НЕ ПривилегированныйРежим() Тогда
		ВыполнитьПроверкуПравДоступа("Администрирование", Метаданные);
	КонецЕсли;
	
КонецПроцедуры

Функция ИнформационнаяБазаФайловаяБезМенеджераФоновыхЗаданий() Экспорт
	
	Возврат ОбщегоНазначения.ИнформационнаяБазаФайловая()
	      И НЕ ОбщегоНазначенияКлиентСервер.ЭтоПлатформа83БезРежимаСовместимости();
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий подсистем БСП

// Формирует список параметров ИБ.
//
// Параметры:
// ТаблицаПараметров - ТаблицаЗначений - таблица описания параметров.
// Описание состав колонок - см. РаботаВМоделиСервиса.ПолучитьТаблицуПараметровИБ()
//
Процедура ПриЗаполненииТаблицыПараметровИБ(Знач ТаблицаПараметров) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		МодульРаботаВМоделиСервиса = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("РаботаВМоделиСервиса");
		МодульРаботаВМоделиСервиса.ДобавитьКонстантуВТаблицуПараметровИБ(ТаблицаПараметров, "МаксимальнаяДлительностьВыполненияИсполняющегоФоновогоЗадания");
		МодульРаботаВМоделиСервиса.ДобавитьКонстантуВТаблицуПараметровИБ(ТаблицаПараметров, "МаксимальноеКоличествоИсполняющихФоновыхЗаданий");
	КонецЕсли;
	
КонецПроцедуры

// Заполняет структуру параметров, необходимых для работы клиентского кода
// конфигурации. 
//
// Параметры:
//   Параметры   - Структура - структура параметров.
//
Процедура ПриДобавленииПараметровРаботыКлиентскойЛогикиСтандартныхПодсистемПриЗапуске(Параметры) Экспорт
	
	ДобавитьПараметрыРаботыКлиентаПриЗапуске(Параметры);
	
КонецПроцедуры

// Заполняет структуру параметров, необходимых для работы клиентского кода
// конфигурации.
//
// Параметры:
//   Параметры   - Структура - структура параметров.
//
Процедура ПриДобавленииПараметровРаботыКлиентскойЛогикиСтандартныхПодсистем(Параметры) Экспорт
	
	ДобавитьПараметрыРаботыКлиента(Параметры);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для контроля выполнения

// Определяет, что текущий сеанс выполняет регламентные задания,
// если это не так и указано установить текущий сеанс в этом качестве,
// то производится попытка установки.
//
// Параметры:
//  ЗаданияВыполняютсяНормально - Булево - Истина, если нет отклонений в выполнении заданий.
//  УстановитьТекущийСеансКакСеансВыполняющийРегламентныеЗадания - Булево - Истина,
//                 если требуется установить текущий сеанс,
//                 как сеанс в котором будет происходить выполнение регламентных заданий,
//                 если не удалось установить,  тогда функция вернет Ложь.
//  ОписаниеОшибки - Строка - Если НЕ ЗаданияВыполняютсяНормально, тогда описание отклонения:
//                 либо выполнение долго не начинается, либо выполнение слишком затянулось.
//
// Возвращаемое значение:
//  Булево.
//
Функция ТекущийСеансВыполняетРегламентныеЗадания(ЗаданияВыполняютсяНормально = Неопределено,
                                                 Знач УстановитьТекущийСеансКакСеансВыполняющийРегламентныеЗадания = Ложь,
                                                 ОписаниеОшибки = "") Экспорт
	
	Если НЕ ИнформационнаяБазаФайловаяБезМенеджераФоновыхЗаданий() Тогда
		ЗаданияВыполняютсяНормально = Истина;
		ОписаниеОшибки = НСтр("ru = 'Задания выполняются на сервере.'");
		Возврат Ложь;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Состояние = ПолучитьСостояниеВыполненияРегламентныхЗаданий();
	
	Сеансы = ПолучитьСеансыИнформационнойБазы();
	НайденСеансВыполняющийЗадания             = Ложь;
	ТекущийСеансВыполняетРегламентныеЗадания  = Ложь;
	ЗаданияВыполняютсяНормально               = Истина;
	
	// Поиск сеанса выполняющего регламентные задания,
	// установленного в структуре СостояниеВыполненияРегламентныхЗаданий,
	// среди активных сеансов
	// Поиск текущего сеанса (начало текущего сеанса может понадобится
	// для инициализации Структуры).
	Для каждого Сеанс Из Сеансы Цикл
		Если Сеанс.НомерСеанса = НомерСеансаИнформационнойБазы() Тогда
			ТекущийСеанс = Сеанс;
		КонецЕсли;
		Если Сеанс.НомерСеанса  = Состояние.НомерСеанса
		   И Сеанс.НачалоСеанса = Состояние.НачалоСеанса Тогда
			//
			НайденныйСеанс = Сеанс;
			НайденСеансВыполняющийЗадания = Истина;
			ТекущийСеансВыполняетРегламентныеЗадания  = (Сеанс.НомерСеанса = НомерСеансаИнформационнойБазы());
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ НайденСеансВыполняющийЗадания И УстановитьТекущийСеансКакСеансВыполняющийРегламентныеЗадания Тогда
		МоментТекущегоВремени                           = ТекущаяДатаСеанса();
		Состояние.НомерСеанса                           = ТекущийСеанс.НомерСеанса;
		Состояние.НачалоСеанса                          = ТекущийСеанс.НачалоСеанса;
		Состояние.ИмяКомпьютера                         = ИмяКомпьютера();
		Состояние.ИмяПриложения                         = ТекущийСеанс.ИмяПриложения;
		Состояние.ИмяПользователя                       = ИмяПользователя();
		Состояние.ИдентификаторОчередногоЗадания        = Неопределено;
		Состояние.НачалоВыполненияОчередногоЗадания     = МоментТекущегоВремени;
		Состояние.ОкончаниеВыполненияОчередногоЗадания  = МоментТекущегоВремени;
		СохранитьСостояниеВыполненияРегламентныхЗаданий(Состояние);
		НайденСеансВыполняющийЗадания = Истина;
		ТекущийСеансВыполняетРегламентныеЗадания  = Истина;
	КонецЕсли;
	
	Если НЕ НайденСеансВыполняющийЗадания Тогда
		ОписаниеОшибки = НСтр("ru = 'Нет сеанса, выполняющего регламентные задания.'");
		ЗаданияВыполняютсяНормально = Ложь;
		//
	ИначеЕсли НЕ ЗначениеЗаполнено(Состояние.ОкончаниеВыполненияОчередногоЗадания) Тогда
		// Если после завершения очередного задания прошло более часа, значит задержка запуска.
		Если ТекущаяДатаСеанса() - 3600 > Состояние.ОкончаниеВыполненияОчередногоЗадания Тогда
			ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Выполнение регламентных заданий не начинается уже более 1 часа.
					           |Возможно, требуется проверка и перезапуск сеанса. Выполнение ожидается
					           |    на компьютере:         %1,
					           |    в приложении:          %2,
					           |    от имени пользователя: %3,
					           |    в сеансе номер:        %4.'"),
					Строка(Состояние.ИмяКомпьютера),
					Строка(Состояние.ИмяПриложения),
					Строка(Состояние.ИмяПользователя),
					Строка(Состояние.НомерСеанса) );
			ЗаданияВыполняютсяНормально = Ложь;
		КонецЕсли;
	Иначе
		// Если выполнение продолжается более 1 часа, значить она слишком затянулось.
		Если ТекущаяДатаСеанса() - 3600 > Состояние.НачалоВыполненияОчередногоЗадания Тогда
			ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Выполнение регламентного задания происходит непрерывно более 1 часа.
					           |Возможно, требуется проверка и перезапуск сеанса. Выполнение происходит
					           |    на компьютере:         %1,
					           |    в приложении:          %2,
					           |    от имени пользователя: %3,
					           |    в сеансе номер:        %4.'"),
					Строка(Состояние.ИмяКомпьютера),
					Строка(Состояние.ИмяПриложения),
					Строка(Состояние.ИмяПользователя),
					Строка(Состояние.НомерСеанса));
			ЗаданияВыполняютсяНормально = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ТекущийСеансВыполняетРегламентныеЗадания;
	
КонецФункции

// Проверяет, что сеанс открывший этот дополнительный сеанс для выполнения
// регламентных заданий завершен, если задан.
//
// Параметры:
//  ПараметрЗапуска - Строка - значение глобального свойства ПараметрЗапуска,
//                 требуется указывать, т.к. свойство недоступно на сервере.
//  РодительскийСеансЗадан - Булево - возвращает Истина, если родительский сеанс задан,
//                 иначе возвращает Ложь.
//
// Возвращаемое значение:
//  Булево.
//
Функция РодительскийСеансЗаданИЗавершен(Знач ПараметрЗапуска) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	РодительскийСеансЗадан = Ложь;
	Если Найти(ПараметрЗапуска, "DoScheduledJobs") <> 0 Тогда
		ИндексНомераСеанса = Найти(ПараметрЗапуска, "SessionNumber=");
		ИндексНачалаСеанса = Найти(ПараметрЗапуска, "SessionStarted=");
		
		Если ИндексНомераСеанса <> 0 И
		     ИндексНачалаСеанса <> 0 И
		     ИндексНомераСеанса < ИндексНачалаСеанса Тогда
			
			РодительскийСеансЗадан = Истина;
			
			Сеансы = ПолучитьСеансыИнформационнойБазы();
			Для каждого Сеанс Из Сеансы Цикл
				Если Найти(ПараметрЗапуска, "SessionNumber="  + Сеанс.НомерСеанса)  <> 0 И
				     Найти(ПараметрЗапуска, "SessionStarted=" + Сеанс.НачалоСеанса) <> 0 Тогда
					Возврат Ложь;
				КонецЕсли;
			КонецЦикла;
			
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для работы с регламентными заданиями

// Возвращает настройки выполнения регламентных заданий для файлового режима.
// 
// Возвращаемое значение:
//  Настройки - Структура.
//
Функция ПолучитьНастройкиВыполненияРегламентныхЗаданий() Экспорт
	
	Если Не ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
		Настройки = Неопределено;
	Иначе
		Настройки = Константы.НастройкиВыполненияРегламентныхЗаданий.Получить();
		Настройки = ?(ТипЗнч(Настройки) = Тип("ХранилищеЗначения"), Настройки.Получить(), Неопределено);
	КонецЕсли;
	
	Возврат ПроверитьНастройки(Настройки);
	
КонецФункции

// Устанавливает настройки выполнения регламентных заданий для файлового режима.
// 
// Параметры:
//  Настройки - Структура.
//
Процедура УстановитьНастройкиВыполненияРегламентныхЗаданий(Настройки) Экспорт
	
	Настройки = ПроверитьНастройки(Настройки);
	
	Константы.НастройкиВыполненияРегламентныхЗаданий.Установить(Новый ХранилищеЗначения(Настройки));
	
КонецПроцедуры

// Эмулирует в тонком клиенте системную процедуру ВыполнитьОбработкуЗаданий(),
// но может применяться и в толстом клиенте.
//
//  Место хранения экземпляров фоновых заданий - ВременноеХранилище.
// Время хранения экземпляров - до закрытия сеанса клиента, выполняющего регламентные задания.
// Максимальное количество одновременно хранимых фоновых заданий: 1000.
//
//  Идентификатор сеанса, выполняющего регламентные задания находится в структуре
// СостояниеВыполненияРегламентныхЗаданий (ХранилищеЗначения), содержащее структуру
// со свойствами: 
// НомерСеанса, НачалоСеанса, ИдентификаторОчередногоЗадания,
// НачалоВыполненияОчередногоЗадания, ОкончаниеВыполненияОчередногоЗадания и др.
//  Логика проверки выполнения регламентных заданий в текущем сеансе:
// Если <НомерСеанса> и  <НачалоСеанса> совпадают с текущим,
// тогда выполнение в текущем сеансе, если нет,
// тогда проверяется существует ли сеанс в списке сеансов,
// если не существует, тогда выполнение в текущем сеансе,
// если существует тогда нет выполнения в текущем сеансе, а вместо этого
// проверятся период выполнения/простоя. Если "выполняется"/"простаивает" дольше
// 1 час происходит уведомление пользователя (ошибка с соответствующим описанием).
//  Логика порядка выполнения заданий. Задания выполняются последовательно,
// регистрируется последнее начатое задание. При новой проверке, проверятся
// задание, следующее за заданием, начатым в прошлый раз,
// чтобы получился эффект параллельности выполнения.
//  Логика проверки расписания. Если произошла ошибка тогда используется аварийное
// расписание, иначе - основное.
// 
// Параметры:
//  ВремяВыполнения - Число(10.0) - время (в секундах) выполнения очередной
//                 порции регламентных заданий. Если время не задано, будет выполнен
//                 только один цикл выполнения (до завершения одного фонового
//                 задания или выполнения всех регламентных заданий без фоновых,
//                 т.е. только проверка расписания).
//
Процедура ВыполнитьРегламентныеЗадания(ВремяВыполнения = 0) Экспорт
	
	Если НЕ ИнформационнаяБазаФайловаяБезМенеджераФоновыхЗаданий() Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если НЕ ТекущийСеансВыполняетРегламентныеЗадания() Тогда
		Возврат;
	КонецЕсли;
	
	Состояние = ПолучитьСостояниеВыполненияРегламентныхЗаданий();
	
	ВремяВыполнения = ?(ТипЗнч(ВремяВыполнения) = Тип("Число"), ВремяВыполнения, 0);

	Задания                        = РегламентныеЗадания.ПолучитьРегламентныеЗадания();
	ВыполнениеЗавершено            = Ложь; // Определяет, что ВремяВыполнения закончилось, или
	                                       // все возможные регламентные задания выполнены.
	НачалоВыполнения               = ТекущаяДатаСеанса();
	КоличествоВыполненныхЗаданий   = 0;
	ФоновоеЗаданиеВыполнялось      = Ложь;
	ИдентификаторПоследнегоЗадания = Состояние.ИдентификаторОчередногоЗадания;

	// Количество заданий проверяется каждый раз при начале выполнения,
	// т.к. задания могут быть удалены в другом сеансе, а тогда будет зацикливание.
	Пока НЕ ВыполнениеЗавершено И Задания.Количество() > 0 Цикл
		ПервоеЗаданиеНайдено           = (ИдентификаторПоследнегоЗадания = Неопределено);
		ОчередноеЗаданиеНайдено        = Ложь;
		Для каждого Задание ИЗ Задания Цикл
			// Завершение выполнения, если:
			// а) время задано и вышло;
			// б) время не задано и хоть одно фоновое задание выполнено;
			// в) время не задано и все регламентные задания выполнены по количеству.
			Если ( ВремяВыполнения = 0 И
			       ( ФоновоеЗаданиеВыполнялось ИЛИ
			         КоличествоВыполненныхЗаданий >= Задания.Количество() ) ) ИЛИ
			     ( ВремяВыполнения <> 0 И
			       НачалоВыполнения + ВремяВыполнения <= ТекущаяДатаСеанса() ) Тогда
				ВыполнениеЗавершено = Истина;
				Прервать;
			КонецЕсли;
			Если НЕ ПервоеЗаданиеНайдено Тогда
				Если Строка(Задание.УникальныйИдентификатор) = ИдентификаторПоследнегоЗадания Тогда
				   // Найдено последнее выполненное регламентное задание, значит следующее
				   // регламентное задание нужно проверять на необходимость выполнения фонового задания.
				   ПервоеЗаданиеНайдено = Истина;
				КонецЕсли;
				// Если первое регламентное задание, которое нужно проверить на необходимость
				// выполнения фонового задания ещё не найдено, тогда текущее задание пропускается.
				Продолжить;
			КонецЕсли;
			ОчередноеЗаданиеНайдено = Истина;
			КоличествоВыполненныхЗаданий = КоличествоВыполненныхЗаданий + 1;
			Состояние.ИдентификаторОчередногоЗадания       = Строка(Задание.УникальныйИдентификатор);
			Состояние.НачалоВыполненияОчередногоЗадания    = ТекущаяДатаСеанса();
			Состояние.ОкончаниеВыполненияОчередногоЗадания = '00010101';
			СохранитьСостояниеВыполненияРегламентныхЗаданий(Состояние,
			                                               "ИдентификаторОчередногоЗадания,
			                                               |НачалоВыполненияОчередногоЗадания,
			                                               |ОкончаниеВыполненияОчередногоЗадания");
			Если Задание.Использование Тогда
				ВыполнитьРегламентноеЗадание = Ложь;
				СвойстваПоследнегоФоновогоЗадания = ПолучитьСвойстваПоследнегоФоновогоЗаданияВыполненияРегламентногоЗадания(Задание);
				
				Если СвойстваПоследнегоФоновогоЗадания <> Неопределено И
				     СвойстваПоследнегоФоновогоЗадания.Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно Тогда
					// Проверка аварийного расписания.
					Если СвойстваПоследнегоФоновогоЗадания.ПопыткаЗапуска <= Задание.КоличествоПовторовПриАварийномЗавершении Тогда
						Если СвойстваПоследнегоФоновогоЗадания.Конец + Задание.ИнтервалПовтораПриАварийномЗавершении <= ТекущаяДатаСеанса() Тогда
						    // Повторный запуск фонового задания по регламентному заданию.
						    ВыполнитьРегламентноеЗадание = Истина;
						КонецЕсли;
					КонецЕсли;
				Иначе
					// Проверяем стандартное расписание.
					ВыполнитьРегламентноеЗадание = Задание.Расписание.ТребуетсяВыполнение(
						ТекущаяДатаСеанса(),
						?(СвойстваПоследнегоФоновогоЗадания = Неопределено, '00010101', СвойстваПоследнегоФоновогоЗадания.Начало),
						?(СвойстваПоследнегоФоновогоЗадания = Неопределено, '00010101', СвойстваПоследнегоФоновогоЗадания.Конец ));
				КонецЕсли;
				Если ВыполнитьРегламентноеЗадание Тогда
					ФоновоеЗаданиеВыполнялось = ВыполнитьРегламентноеЗадание(Задание);
				КонецЕсли;
			КонецЕсли;
			Состояние.ОкончаниеВыполненияОчередногоЗадания = ТекущаяДатаСеанса();
			СохранитьСостояниеВыполненияРегламентныхЗаданий(Состояние, "ОкончаниеВыполненияОчередногоЗадания");
		КонецЦикла;
		// Если последнее выполненное задание найти не удалось, тогда
		// его Идентификатор сбрасывается,
		// чтобы начать проверку регламентных заданий, начиная с первого.
		ИдентификаторПоследнегоЗадания = Неопределено;
	КонецЦикла;
	
КонецПроцедуры

// Предназначена для "ручного" немедленного выполнения процедуры регламентного задания
// либо в сеансе клиента (в файловой ИБ), либо в фоновом задании на сервере (в серверной ИБ)
// Применяется в любом режиме соединения
// "Ручной" режим запуска не влияет на выполнение регламентного задания по аварийному
// и основному расписаниям, т.к. не указывается ссылка на регламентное задание у фонового задания
// Тип ФоновоеЗадание не допускает установки такой ссылки, поэтому для файлового режима применяется
// тоже правило
// 
// Параметры:
//  Задание       -   РегламентноеЗадание, Строка - уникального идентификатора РегламентногоЗадания
//  МоментЗапуска -   Неопределено, Дата
//                    Для файловой ИБ устанавливает переданный момент, как момент запуска
//                    метода регламентного задания
//                    Для серверной ИБ - возвращает момент запуска фонового задания по факту
//  ИдентификаторФоновогоЗадания - Строка
//                    Для серверной ИБ возвращает идентификатор запущенного фонового задания
//  МоментОкончания - Неопределено, Дата
//                    Для файловой ИБ возвращает момент завершения метода регламентного задания
//
Функция ВыполнитьРегламентноеЗаданиеВручную(Знач Задание,
                                            МоментЗапуска = Неопределено,
                                            ИдентификаторФоновогоЗадания = "",
                                            МоментОкончания = Неопределено,
                                            НомерСеанса = Неопределено,
                                            НачалоСеанса = Неопределено,
                                            ПредставлениеФоновогоЗадания = "",
                                            ПроцедураУжеВыполняется = Неопределено) Экспорт
	
	ВызватьИсключениеЕслиНетПраваАдминистрирования();
	УстановитьПривилегированныйРежим(Истина);
	
	ПроцедураУжеВыполняется = Ложь;
	Задание = РегламентныеЗаданияСервер.ПолучитьРегламентноеЗадание(Задание);
	
	Запуск = Ложь;
	Если ИнформационнаяБазаФайловаяБезМенеджераФоновыхЗаданий() Тогда
		Запуск = ВыполнитьРегламентноеЗадание(Задание, Истина, МоментЗапуска, МоментОкончания, НомерСеанса, НачалоСеанса);
	Иначе
		СвойстваПоследнегоФоновогоЗадания = ПолучитьСвойстваПоследнегоФоновогоЗаданияВыполненияРегламентногоЗадания(Задание);
		Если СвойстваПоследнегоФоновогоЗадания <> Неопределено
		   И СвойстваПоследнегоФоновогоЗадания.Состояние = СостояниеФоновогоЗадания.Активно Тогда
			//
			МоментЗапуска  = СвойстваПоследнегоФоновогоЗадания.Начало;
			Если ЗначениеЗаполнено(СвойстваПоследнегоФоновогоЗадания.Наименование) Тогда
				ПредставлениеФоновогоЗадания = СвойстваПоследнегоФоновогоЗадания.Наименование;
			Иначе
				ПредставлениеФоновогоЗадания = ПредставлениеРегламентногоЗадания(Задание);
			КонецЕсли;
		Иначе
			НаименованиеФоновогоЗадания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Запуск вручную: %1'"), ПредставлениеРегламентногоЗадания(Задание));
			ФоновоеЗадание = ФоновыеЗадания.Выполнить(Задание.Метаданные.ИмяМетода, Задание.Параметры, Строка(Задание.УникальныйИдентификатор), НаименованиеФоновогоЗадания);
			ИдентификаторФоновогоЗадания = Строка(ФоновоеЗадание.УникальныйИдентификатор);
			МоментЗапуска = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ФоновоеЗадание.УникальныйИдентификатор).Начало;
			Запуск = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ПроцедураУжеВыполняется = НЕ Запуск;
	
	Возврат Запуск;
	
КонецФункции

// Возвращает представление регламентного задания,
// это по порядку исключения незаполненных реквизитов:
// Наименование, Метаданные.Синоним, Метаданные.Имя.
//
// Параметры:
//  Задание      - РегламентноеЗадание, Строка - если строка, тогда УникальныйИдентификатор строкой.
//
// Возвращаемое значение:
//  Строка.
//
Функция ПредставлениеРегламентногоЗадания(Знач Задание) Экспорт
	
	ВызватьИсключениеЕслиНетПраваАдминистрирования();
	УстановитьПривилегированныйРежим(Истина);
	
	Если ТипЗнч(Задание) = Тип("РегламентноеЗадание") Тогда
		РегламентноеЗадание = Задание;
	Иначе
		РегламентноеЗадание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(Новый УникальныйИдентификатор(Задание));
	КонецЕсли;
	
	Если РегламентноеЗадание <> Неопределено Тогда
		Представление = РегламентноеЗадание.Наименование;
		
		Если ПустаяСтрока(РегламентноеЗадание.Наименование) Тогда
			Представление = РегламентноеЗадание.Метаданные.Синоним;
			
			Если ПустаяСтрока(Представление) Тогда
				Представление = РегламентноеЗадание.Метаданные.Имя;
			КонецЕсли
		КонецЕсли;
	Иначе
		Представление = ТекстНеОпределено();
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

// Возвращает текст "<не определено>".
Функция ТекстНеОпределено() Экспорт
	
	Возврат НСтр("ru = '<не определено>'");
	
КонецФункции

// Возвращает значение флажка настройки выполнения регламентных заданий.
//
// Возвращаемое значение:
//  Булево.
//
Функция НужноУведомлятьОНекорректномВыполненииРегламентныхЗаданий(ПериодУведомления) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	УведомлятьОНекорректномСостоянии = Ложь;
	
	Если ИнформационнаяБазаФайловаяБезМенеджераФоновыхЗаданий()
	   И НЕ СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации() Тогда
		
		Настройки = ПолучитьНастройкиВыполненияРегламентныхЗаданий();
		ПериодУведомления = Настройки.ПериодУведомленияОНекорректномВыполненииРегламентныхЗаданий;
		ПериодУведомления = ?(ПериодУведомления <= 0, 1, ПериодУведомления);
		УведомлятьОНекорректномСостоянии = Настройки.УведомлятьОНекорректномВыполненииРегламентныхЗаданий;
	Иначе
		ПериодУведомления = 1;
	КонецЕсли;
	
	Возврат УведомлятьОНекорректномСостоянии;
	
КонецФункции

// Возвращает многострочную Строку содержащую Сообщения и ОписаниеИнформацииОбОшибке,
// последнее фоновое задание найдено по идентификатору регламентного задания
// и сообщения/ошибки есть.
//
// Параметры:
//  Задание      - РегламентноеЗадание, Строка - УникальныйИдентификатор
//                 РегламентногоЗадания строкой.
//
// Возвращаемое значение:
//  Строка.
//
Функция СообщенияИОписанияОшибокРегламентногоЗадания(Знач Задание) Экспорт
	
	ВызватьИсключениеЕслиНетПраваАдминистрирования();
	УстановитьПривилегированныйРежим(Истина);

	ИдентификаторРегламентногоЗадания = ?(ТипЗнч(Задание) = Тип("РегламентноеЗадание"), Строка(Задание.УникальныйИдентификатор), Задание);
	СвойстваПоследнегоФоновогоЗадания = ПолучитьСвойстваПоследнегоФоновогоЗаданияВыполненияРегламентногоЗадания(ИдентификаторРегламентногоЗадания);
	Возврат ?(СвойстваПоследнегоФоновогоЗадания = Неопределено,
	          "",
	          СообщенияИОписанияОшибокФоновогоЗадания(СвойстваПоследнегоФоновогоЗадания.Идентификатор) );
	
КонецФункции

// Возвращает параметры запуска отдельного сеанса выполнения регламентных заданий.
//
// Параметры:
//  ПоНастройкеАвтоОткрытия - Булево - открывать сеанс, если настроен
//                 автоматический запуск отдельного сеанса и не серверная ИБ и не Веб-клиент и
//                 сеанс уже не открыт. В других случаях устанавливается Отказ.
//
// Возвращаемое значение:
//  Структура -    ТребуетсяОткрытьОтдельныйСеанс         - Булево - Истина.
//                 ДополнительныеПараметрыКоманднойСтроки - Строка - дополнительные параметры командной строки для
//                                                          запуска сеанса выполнения регламентных заданий.
//                 ВыполненаПопыткаОткрытия               - Булево - Ложь, для использования в вызывающей процедуре.
//                 УведомлятьОНекорректномВыполнении      - Булево.
//                 ПериодУведомления                      - Число.
//                 Отказ                                  - Булево.
//                 ОписаниеОшибки                         - Строка.
//
Функция ПараметрыЗапускаОтдельногоСеансаВыполненияРегламентныхЗаданий(Знач ПоНастройкеАвтоОткрытия = Ложь) Экспорт
	
	Результат = Новый Структура;
	Результат.Вставить("ТребуетсяОткрытьОтдельныйСеанс", Ложь);
	Результат.Вставить("ВыполненаПопыткаОткрытия", Ложь);
	Результат.Вставить("ДополнительныеПараметрыКоманднойСтроки", "");
	Результат.Вставить("УведомлятьОНекорректномВыполнении", Ложь);
	Результат.Вставить("ПериодУведомления", Неопределено);
	Результат.Вставить("Отказ", Ложь);
	Результат.Вставить("ОписаниеОшибки", "");
	
	Если ПоНастройкеАвтоОткрытия Тогда
		Результат.Вставить("ТекущийПользовательАдминистратор", Пользователи.ЭтоПолноправныйПользователь(, Истина, Ложь));
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Результат.УведомлятьОНекорректномВыполнении = НужноУведомлятьОНекорректномВыполненииРегламентныхЗаданий(Результат.ПериодУведомления);
	
	Настройки = ПолучитьНастройкиВыполненияРегламентныхЗаданий();
	Если ПоНастройкеАвтоОткрытия И НЕ Настройки.АвтоматическиЗапускатьОтдельныйСеансДляВыполненияРегламентныхЗаданий Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если НЕ ИнформационнаяБазаФайловаяБезМенеджераФоновыхЗаданий() Тогда
		
		Если ПоНастройкеАвтоОткрытия Тогда
			Возврат Результат;
		Иначе
			Результат.Отказ = Истина;
			Результат.ОписаниеОшибки = НСтр("ru = 'Регламентные задания выполняются на сервере.'");
			Возврат Результат;
		КонецЕсли;
		
	ИначеЕсли СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации() Тогда
	
		Если ПоНастройкеАвтоОткрытия Тогда
			Возврат Результат;
		Иначе
			Результат.Отказ = Истина;
			Результат.ОписаниеОшибки =
				НСтр("ru = 'В базовой версии конфигурации отдельный сеанс
				           |для выполнения регламентных заданий недоступен.'");
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;

	ЗаданияВыполняютсяНормально = Неопределено;
	ТекущийСеансВыполняетРегламентныеЗадания(ЗаданияВыполняютсяНормально);
	Если ЗаданияВыполняютсяНормально Тогда
		Если ПоНастройкеАвтоОткрытия Тогда
			Возврат Результат;
		Иначе
			Результат.Отказ = Истина;
			Результат.ОписаниеОшибки = НСтр("ru = 'Сеанс, выполняющий регламентные задания, уже открыт.'");
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	НомерТекущегоСеанса = НомерСеансаИнформационнойБазы();
	// Определение начала текущего сеанса.
	НачалоТекущегоСеанса = '00010101';
	Сеансы = ПолучитьСеансыИнформационнойБазы();
	Для каждого Сеанс Из Сеансы Цикл
		Если Сеанс.НомерСеанса = НомерТекущегоСеанса Тогда
			НачалоТекущегоСеанса = Сеанс.НачалоСеанса;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Результат.ДополнительныеПараметрыКоманднойСтроки = """"
		+ " /C""DoScheduledJobs SkipMessageBox AloneIBSession From1C"
		+ "SessionNumber=" + НомерТекущегоСеанса + " SessionStarted=" + НачалоТекущегоСеанса + """";
	
	Результат.ТребуетсяОткрытьОтдельныйСеанс = Истина;
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для работы с фоновыми заданиями

// Отменяет фоновое задание, если это возможно, а именно, если оно выполняется на сервере, и активно.
//
// Параметры:
//  Идентификатор  - Строка уникального идентификатора ФоновогоЗадания.
// 
Процедура ОтменитьФоновоеЗадание(Идентификатор) Экспорт
	
	Если ИнформационнаяБазаФайловаяБезМенеджераФоновыхЗаданий() Тогда
		ВызватьИсключение( НСтр("ru ='Фоновые задания не используются
		                             |в файловой информационной базе.'"));
	КонецЕсли;
	
	ВызватьИсключениеЕслиНетПраваАдминистрирования();
	УстановитьПривилегированныйРежим(Истина);
	
	Отбор = Новый Структура("УникальныйИдентификатор", Новый УникальныйИдентификатор(Идентификатор));
	МассивФоновыхЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
	Если МассивФоновыхЗаданий.Количество() = 1 Тогда
		ФоновоеЗадание = МассивФоновыхЗаданий[0];
	Иначе
		ВызватьИсключение( НСтр("ru = 'Фоновое задание не найдено на сервере.'") );
	КонецЕсли;
	
	Если ФоновоеЗадание.Состояние <> СостояниеФоновогоЗадания.Активно Тогда
		ВызватьИсключение( НСтр("ru = 'Задание не выполняется, его нельзя отменить.'") );
	КонецЕсли;
	
	ФоновоеЗадание.Отменить();
	
КонецПроцедуры

// "Эмулирует" функцию ФоновыеЗадания.ПолучитьФоновыеЗадания() для файловой ИБ.
//  Структуру таблицы  смотри в функции ПустаяТаблицаСвойствФоновыхЗаданий().
// 
// Параметры:
//  Отбор        - Структура - допустимые поля:
//                 Идентификатор, Ключ, Состояние, Начало, Конец,
//                 Наименование, ИмяМетода, РегламентноеЗадание. 
//  ВсегоЗаданий - Число - возвращает общее количество заданий без учета отбора.
//  ПрочитанноеСостояние - Неопределено, только для внутреннего использования.
//
// Возвращаемое значение:
//  ТаблицаЗначений  - возвращается таблица после отбора.
//
Функция ПолучитьТаблицуСвойствФоновыхЗаданий(Отбор = Неопределено, ВсегоЗаданий = 0) Экспорт
	
	ВызватьИсключениеЕслиНетПраваАдминистрирования();
	УстановитьПривилегированныйРежим(Истина);
	
	Таблица = ПустаяТаблицаСвойствФоновыхЗаданий();
	
	Если Отбор <> Неопределено И Отбор.Свойство("ПолучитьПоследнееФоновоеЗаданиеРегламентногоЗадания") Тогда
		Отбор.Удалить("ПолучитьПоследнееФоновоеЗаданиеРегламентногоЗадания");
		ПолучитьПоследнее = Истина;
	Иначе
		ПолучитьПоследнее = Ложь;
	КонецЕсли;
	
	РегламентноеЗадание = Неопределено;
	
	// Добавление истории фоновых заданий, полученных с сервера.
	Если НЕ ИнформационнаяБазаФайловаяБезМенеджераФоновыхЗаданий() Тогда
		Если Отбор <> Неопределено И Отбор.Свойство("ИдентификаторРегламентногоЗадания") Тогда
			МассивФоновыхЗаданий = Новый Массив;
			Если Отбор.ИдентификаторРегламентногоЗадания <> "" Тогда
				РегламентноеЗадание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(Новый УникальныйИдентификатор(Отбор.ИдентификаторРегламентногоЗадания));
				Если РегламентноеЗадание <> Неопределено Тогда
					ПоследнееФоновоеЗадание = РегламентноеЗадание.ПоследнееЗадание;
					Если ПолучитьПоследнее И ПоследнееФоновоеЗадание <> Неопределено Тогда
						МассивФоновыхЗаданий.Добавить(ПоследнееФоновоеЗадание);
						ДобавитьСвойстваФоновыхЗаданий(МассивФоновыхЗаданий, Таблица);
					Иначе
						ПервыйОтбор = Новый Структура("РегламентноеЗадание", РегламентноеЗадание);
						МассивФоновыхЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания(ПервыйОтбор);
						ДобавитьСвойстваФоновыхЗаданий(МассивФоновыхЗаданий, Таблица);
					КонецЕсли;
				КонецЕсли;
				Если НЕ ПолучитьПоследнее ИЛИ МассивФоновыхЗаданий.Количество() = 0 Тогда
					ВторойОтбор = Новый Структура("Ключ", Отбор.ИдентификаторРегламентногоЗадания);
					ДобавитьСвойстваФоновыхЗаданий(ФоновыеЗадания.ПолучитьФоновыеЗадания(ВторойОтбор), Таблица);
				КонецЕсли;
				Если ПолучитьПоследнее Тогда
					Возврат Таблица;
				КонецЕсли;
			Иначе
				ВсеИдентификаторыРегламентныхЗаданий = Новый Соответствие;
				Для каждого ТекущееЗадание Из РегламентныеЗадания.ПолучитьРегламентныеЗадания() Цикл
					ВсеИдентификаторыРегламентныхЗаданий.Вставить(
						Строка(ТекущееЗадание.УникальныйИдентификатор), Истина);
				КонецЦикла;
				Для каждого ТекущееЗадание Из ФоновыеЗадания.ПолучитьФоновыеЗадания() Цикл
					Если ТекущееЗадание.РегламентноеЗадание = Неопределено
					   И ВсеИдентификаторыРегламентныхЗаданий[ТекущееЗадание.Ключ] = Неопределено Тогда
					
						МассивФоновыхЗаданий.Добавить(ТекущееЗадание);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		Иначе
			Если Отбор = Неопределено Тогда
				МассивФоновыхЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания();
			Иначе
				Если Отбор.Свойство("Идентификатор") Тогда
					Отбор.Вставить("УникальныйИдентификатор", Новый УникальныйИдентификатор(Отбор.Идентификатор));
					Отбор.Удалить("Идентификатор");
				КонецЕсли;
				МассивФоновыхЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
				Если Отбор.Свойство("УникальныйИдентификатор") Тогда
					Отбор.Вставить("Идентификатор", Строка(Отбор.УникальныйИдентификатор));
					Отбор.Удалить("УникальныйИдентификатор");
				КонецЕсли;
			КонецЕсли;
			ДобавитьСвойстваФоновыхЗаданий(МассивФоновыхЗаданий, Таблица);
		КонецЕсли;
	КонецЕсли;
	
	Если Отбор <> Неопределено И Отбор.Свойство("ИдентификаторРегламентногоЗадания") Тогда
		РегламентныеЗаданияДляОбработки = Новый Массив;
		Если Отбор.ИдентификаторРегламентногоЗадания <> "" Тогда
			Если РегламентноеЗадание = Неопределено Тогда
				РегламентноеЗадание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(Новый УникальныйИдентификатор(Отбор.ИдентификаторРегламентногоЗадания));
			КонецЕсли;
			Если РегламентноеЗадание <> Неопределено Тогда
				РегламентныеЗаданияДляОбработки.Добавить(РегламентноеЗадание);
			КонецЕсли;
		КонецЕсли;
	Иначе
		РегламентныеЗаданияДляОбработки = РегламентныеЗадания.ПолучитьРегламентныеЗадания();
	КонецЕсли;
	
	// Добавление и сохранение состояний регламентных заданий
	Для каждого РегламентноеЗадание Из РегламентныеЗаданияДляОбработки Цикл
		ИдентификаторРегламентногоЗадания = Строка(РегламентноеЗадание.УникальныйИдентификатор);
		Свойства = ХранилищеОбщихНастроек.Загрузить("СостояниеРегламентногоЗадания_" + ИдентификаторРегламентногоЗадания, , , "");
		Свойства = ?(ТипЗнч(Свойства) = Тип("ХранилищеЗначения"), Свойства.Получить(), Неопределено);
		
		Если ТипЗнч(Свойства) = Тип("Структура")
		   И Свойства.ИдентификаторРегламентногоЗадания = ИдентификаторРегламентногоЗадания
		   И Таблица.НайтиСтроки(Новый Структура("Идентификатор, НаСервере", Свойства.Идентификатор, Свойства.НаСервере)).Количество() = 0 Тогда
			
			Если Свойства.НаСервере Тогда
				ХранилищеОбщихНастроек.Сохранить("СостояниеРегламентногоЗадания_" + ИдентификаторРегламентногоЗадания, , Неопределено, , "");
			Иначе
				Если Свойства.Состояние = СостояниеФоновогоЗадания.Активно Тогда
					НайденСеансВыполняющийЗадания = Ложь;
					Для каждого Сеанс Из ПолучитьСеансыИнформационнойБазы() Цикл
						Если Сеанс.НомерСеанса  = Свойства.НомерСеанса
						   И Сеанс.НачалоСеанса = Свойства.НачалоСеанса Тогда
							НайденСеансВыполняющийЗадания = НомерСеансаИнформационнойБазы() <> Сеанс.НомерСеанса;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					Если НЕ НайденСеансВыполняющийЗадания Тогда
						Свойства.Конец = ТекущаяДатаСеанса();
						Свойства.Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно;
						Свойства.ОписаниеИнформацииОбОшибке = НСтр("ru = 'Не найден сеанс, выполняющий процедуру регламентного задания.'");
					КонецЕсли;
				КонецЕсли;
				ЗаполнитьЗначенияСвойств(Таблица.Добавить(), Свойства);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Таблица.Сортировать("Начало Убыв, Конец Убыв");
	
	ВсегоЗаданий = Таблица.Количество();
	
	// Отбор фоновых заданий.
	Если Отбор <> Неопределено Тогда
		Начало    = Неопределено;
		Конец     = Неопределено;
		Состояние = Неопределено;
		Если Отбор.Свойство("Начало") Тогда
			Начало = ?(ЗначениеЗаполнено(Отбор.Начало), Отбор.Начало, Неопределено);
			Отбор.Удалить("Начало");
		КонецЕсли;
		Если Отбор.Свойство("Конец") Тогда
			Конец = ?(ЗначениеЗаполнено(Отбор.Конец), Отбор.Конец, Неопределено);
			Отбор.Удалить("Конец");
		КонецЕсли;
		Если Отбор.Свойство("Состояние") Тогда
			Если ТипЗнч(Отбор.Состояние) = Тип("Массив") Тогда
				Состояние = Отбор.Состояние;
				Отбор.Удалить("Состояние");
			КонецЕсли;
		КонецЕсли;
		
		Если Отбор.Количество() <> 0 Тогда
			Строки = Таблица.НайтиСтроки(Отбор);
		Иначе
			Строки = Таблица;
		КонецЕсли;
		// Выполнение дополнительной фильтрации по периоду и состоянию (если отбор определен).
		НомерЭлемента = Строки.Количество() - 1;
		Пока НомерЭлемента >= 0 Цикл
			Если Начало    <> Неопределено И Начало > Строки[НомерЭлемента].Начало ИЛИ
				 Конец     <> Неопределено И Конец  < ?(ЗначениеЗаполнено(Строки[НомерЭлемента].Конец), Строки[НомерЭлемента].Конец, ТекущаяДатаСеанса()) ИЛИ
				 Состояние <> Неопределено И Состояние.Найти(Строки[НомерЭлемента].Состояние) = Неопределено Тогда
				Строки.Удалить(НомерЭлемента);
			КонецЕсли;
			НомерЭлемента = НомерЭлемента - 1;
		КонецЦикла;
		// Удаление лишних строк из таблицы.
		Если ТипЗнч(Строки) = Тип("Массив") Тогда
			НомерСтроки = ВсегоЗаданий - 1;
			Пока НомерСтроки >= 0 Цикл
				Если Строки.Найти(Таблица[НомерСтроки]) = Неопределено Тогда
					Таблица.Удалить(Таблица[НомерСтроки]);
				КонецЕсли;
				НомерСтроки = НомерСтроки - 1;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Таблица;
	
КонецФункции

// Возвращает свойства ФоновогоЗадания по строке уникального идентификатора.
//
// Параметры:
//  Идентификатор - Строка - уникального идентификатора ФоновогоЗадания.
//  ИменаСвойств  - Строка, если заполнено, возвращается структура с указанными свойствами.
// 
// Возвращаемое значение:
//  СтрокаТаблицыЗначений, Структура - свойства ФоновогоЗадания.
//
Функция ПолучитьСвойстваФоновогоЗадания(Идентификатор, ИменаСвойств = "") Экспорт
	
	ВызватьИсключениеЕслиНетПраваАдминистрирования();
	УстановитьПривилегированныйРежим(Истина);
	
	Отбор = Новый Структура("Идентификатор", Идентификатор);
	ТаблицаСвойствФоновыхЗаданий = ПолучитьТаблицуСвойствФоновыхЗаданий(Отбор);
	
	Если ТаблицаСвойствФоновыхЗаданий.Количество() > 0 Тогда
		Если ЗначениеЗаполнено(ИменаСвойств) Тогда
			Результат = Новый Структура(ИменаСвойств);
			ЗаполнитьЗначенияСвойств(Результат, ТаблицаСвойствФоновыхЗаданий[0]);
		Иначе
			Результат = ТаблицаСвойствФоновыхЗаданий[0];
		КонецЕсли;
	Иначе
		Результат = Неопределено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает свойства последнего фонового задания выполненного при выполнении регламентного задания, если оно есть.
// Процедура работает, как в файл-серверном, так и в клиент-серверном режимах.
//
// Параметры:
//  РегламентноеЗадание - РегламентноеЗадание, Строка - строка уникального идентификатора РегламентногоЗадания.
//
// Возвращаемое значение:
//  СтрокаТаблицыЗначений, Неопределено.
//
Функция ПолучитьСвойстваПоследнегоФоновогоЗаданияВыполненияРегламентногоЗадания(РегламентноеЗадание) Экспорт
	
	ВызватьИсключениеЕслиНетПраваАдминистрирования();
	УстановитьПривилегированныйРежим(Истина);
	
	ИдентификаторРегламентногоЗадания = ?(ТипЗнч(РегламентноеЗадание) = Тип("РегламентноеЗадание"), Строка(РегламентноеЗадание.УникальныйИдентификатор), РегламентноеЗадание);
	Отбор = Новый Структура;
	Отбор.Вставить("ИдентификаторРегламентногоЗадания", ИдентификаторРегламентногоЗадания);
	Отбор.Вставить("ПолучитьПоследнееФоновоеЗаданиеРегламентногоЗадания");
	ТаблицаСвойствФоновыхЗаданий = ПолучитьТаблицуСвойствФоновыхЗаданий(Отбор);
	ТаблицаСвойствФоновыхЗаданий.Сортировать("Конец Возр");
	
	Если ТаблицаСвойствФоновыхЗаданий.Количество() = 0 Тогда
		СвойстваФоновогоЗадания = Неопределено;
	ИначеЕсли НЕ ЗначениеЗаполнено(ТаблицаСвойствФоновыхЗаданий[0].Конец) Тогда
		СвойстваФоновогоЗадания = ТаблицаСвойствФоновыхЗаданий[0];
	Иначе
		СвойстваФоновогоЗадания = ТаблицаСвойствФоновыхЗаданий[ТаблицаСвойствФоновыхЗаданий.Количество()-1];
	КонецЕсли;
	
	СохраняемоеЗначение = Новый ХранилищеЗначения(?(СвойстваФоновогоЗадания = Неопределено, Неопределено, ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СвойстваФоновогоЗадания)));
	ХранилищеОбщихНастроек.Сохранить("СостояниеРегламентногоЗадания_" + ИдентификаторРегламентногоЗадания, , СохраняемоеЗначение, , "");
	
	Возврат СвойстваФоновогоЗадания;
	
КонецФункции

// Возвращает многострочную Строку содержащую Сообщения и ОписаниеИнформацииОбОшибке,
// если фоновое задание найдено по идентификатору и сообщения/ошибки есть.
//
// Параметры:
//  Задание      - Строка - УникальныйИдентификатор ФоновогоЗадания строкой.
//
// Возвращаемое значение:
//  Строка.
//
Функция СообщенияИОписанияОшибокФоновогоЗадания(Идентификатор, СвойстваФоновогоЗадания = Неопределено) Экспорт
	
	ВызватьИсключениеЕслиНетПраваАдминистрирования();
	УстановитьПривилегированныйРежим(Истина);
	
	Если СвойстваФоновогоЗадания = Неопределено Тогда
		СвойстваФоновогоЗадания = ПолучитьСвойстваФоновогоЗадания(Идентификатор);
	КонецЕсли;
	
	Строка = "";
	Если СвойстваФоновогоЗадания <> Неопределено Тогда
		Для каждого Сообщение Из СвойстваФоновогоЗадания.СообщенияПользователю Цикл
			Строка = Строка + ?(Строка = "",
			                    "",
			                    "
			                    |
			                    |") + Сообщение.Текст;
		КонецЦикла;
		Если ЗначениеЗаполнено(СвойстваФоновогоЗадания.ОписаниеИнформацииОбОшибке) Тогда
			Строка = Строка + ?(Строка = "",
			                    СвойстваФоновогоЗадания.ОписаниеИнформацииОбОшибке,
			                    "
			                    |
			                    |" + СвойстваФоновогоЗадания.ОписаниеИнформацииОбОшибке);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Строка;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры и функции

// Возвращает новую таблицу свойств фоновых заданий.
//
// Возвращаемое значение:
//  ТаблицаЗначений.
//
Функция ПустаяТаблицаСвойствФоновыхЗаданий()
	
	НоваяТаблица = Новый ТаблицаЗначений;
	НоваяТаблица.Колонки.Добавить("НаСервере",                         Новый ОписаниеТипов("Булево"));
	НоваяТаблица.Колонки.Добавить("Идентификатор",                     Новый ОписаниеТипов("Строка"));
	НоваяТаблица.Колонки.Добавить("Наименование",                      Новый ОписаниеТипов("Строка"));
	НоваяТаблица.Колонки.Добавить("Ключ",                              Новый ОписаниеТипов("Строка"));
	НоваяТаблица.Колонки.Добавить("Начало",                            Новый ОписаниеТипов("Дата"));
	НоваяТаблица.Колонки.Добавить("Конец",                             Новый ОписаниеТипов("Дата"));
	НоваяТаблица.Колонки.Добавить("ИдентификаторРегламентногоЗадания", Новый ОписаниеТипов("Строка"));
	НоваяТаблица.Колонки.Добавить("Состояние",                         Новый ОписаниеТипов("СостояниеФоновогоЗадания"));
	НоваяТаблица.Колонки.Добавить("ИмяМетода",                         Новый ОписаниеТипов("Строка"));
	НоваяТаблица.Колонки.Добавить("Расположение",                      Новый ОписаниеТипов("Строка"));
	НоваяТаблица.Колонки.Добавить("ОписаниеИнформацииОбОшибке",        Новый ОписаниеТипов("Строка"));
	НоваяТаблица.Колонки.Добавить("ПопыткаЗапуска",                    Новый ОписаниеТипов("Число"));
	НоваяТаблица.Колонки.Добавить("СообщенияПользователю",             Новый ОписаниеТипов("Массив"));
	НоваяТаблица.Колонки.Добавить("НомерСеанса",                       Новый ОписаниеТипов("Число"));
	НоваяТаблица.Колонки.Добавить("НачалоСеанса",                      Новый ОписаниеТипов("Дата"));
	НоваяТаблица.Индексы.Добавить("Идентификатор, Начало");
	
	Возврат НоваяТаблица;
	
КонецФункции

// Предназначена для заполнения/восстановления структуры свойств
// настроек, хранимых в структуре "Состояние" свойства Настройки.
//
// Параметры:
//  Настройки - Неопределено, Структура.
//
// Возвращаемое значение:
//  Структура - обновленные настройки.
//
Функция ПроверитьНастройки(Знач Настройки = Неопределено)
	
	НоваяСтруктураНастроек = Новый Структура();
	// Если нужно и можно, то при запуске клиентского приложения автоматически открывать сеанс выполнения регламентных заданий.
	НоваяСтруктураНастроек.Вставить("АвтоматическиЗапускатьОтдельныйСеансДляВыполненияРегламентныхЗаданий", Ложь);
	// Если задания не выполняются или выполнение "висит", уведомлять пользователя.
	НоваяСтруктураНастроек.Вставить("УведомлятьОНекорректномВыполненииРегламентныхЗаданий",                 Ложь);
	//  Период, минут.
	НоваяСтруктураНастроек.Вставить("ПериодУведомленияОНекорректномВыполненииРегламентныхЗаданий",          15);
	
	// Копирование существующих свойств.
	Если ТипЗнч(Настройки) = Тип("Структура") Тогда
		Для каждого КлючИзначение Из НоваяСтруктураНастроек Цикл
			Если Настройки.Свойство(КлючИзначение.Ключ) Тогда
				Если ТипЗнч(НоваяСтруктураНастроек[КлючИзначение.Ключ]) = ТипЗнч(Настройки[КлючИзначение.Ключ]) Тогда
					НоваяСтруктураНастроек[КлючИзначение.Ключ] = Настройки[КлючИзначение.Ключ];
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если НЕ (НоваяСтруктураНастроек.ПериодУведомленияОНекорректномВыполненииРегламентныхЗаданий >= 1 И
	         НоваяСтруктураНастроек.ПериодУведомленияОНекорректномВыполненииРегламентныхЗаданий <= 99 ) Тогда
	
		НоваяСтруктураНастроек.ПериодУведомленияОНекорректномВыполненииРегламентныхЗаданий = 15;
	КонецЕсли;
	
	Возврат НоваяСтруктураНастроек;
	
КонецФункции

// Возвращает структуру, описывающую состояние выполнения регламентных заданий.
Функция ПолучитьСостояниеВыполненияРегламентныхЗаданий(Заблокировать = Ложь)
	
	// Подготовка данных для проверки или начальной установки свойств прочитанного состояния.
	НоваяСтруктура = Новый Структура();
	// Хранение истории выполнения фоновых заданий.
	НоваяСтруктура.Вставить("НомерСеанса",                          0);
	НоваяСтруктура.Вставить("НачалоСеанса",                         '00010101');
	НоваяСтруктура.Вставить("ИмяКомпьютера",                        "");
	НоваяСтруктура.Вставить("ИмяПриложения",                        "");
	НоваяСтруктура.Вставить("ИмяПользователя",                      "");
	НоваяСтруктура.Вставить("ИдентификаторОчередногоЗадания",       "");
	НоваяСтруктура.Вставить("НачалоВыполненияОчередногоЗадания",    '00010101');
	НоваяСтруктура.Вставить("ОкончаниеВыполненияОчередногоЗадания", '00010101');
	
	Состояние = ХранилищеОбщихНастроек.Загрузить("СостояниеВыполненияРегламентныхЗаданий", , , "");
	Состояние = ?(ТипЗнч(Состояние) = Тип("ХранилищеЗначения"), Состояние.Получить(), Неопределено);
	
	// Копирование существующих свойств.
	Если ТипЗнч(Состояние) = Тип(НоваяСтруктура) Тогда
		Для каждого КлючИзначение Из НоваяСтруктура Цикл
			Если Состояние.Свойство(КлючИзначение.Ключ) Тогда
				Если ТипЗнч(НоваяСтруктура[КлючИзначение.Ключ]) = ТипЗнч(Состояние[КлючИзначение.Ключ]) Тогда
					НоваяСтруктура[КлючИзначение.Ключ] = Состояние[КлючИзначение.Ключ];
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат НоваяСтруктура;
	
КонецФункции

// Сохраняет в структуре СостояниеВыполненияРегламентныхЗаданий переданное состояние.
//
// Параметры:
//  Состояние          - Структура - изменённое значение функции ПолучитьСостояниеВыполненияРегламентныхЗаданий().
//
//  ИзмененныеСвойства - Неопределено - требуется записать состояние, иначе сохранить только указанные свойства.
//                       Строка       - список имен свойств, разделенный запятыми,
//                                      которые необходимо сохранить.
//
Процедура СохранитьСостояниеВыполненияРегламентныхЗаданий(Состояние, Знач ИзмененныеСвойства = Неопределено)
	
	Если ИзмененныеСвойства <> Неопределено Тогда
		ТекущееСостояние = ПолучитьСостояниеВыполненияРегламентныхЗаданий();
		ЗаполнитьЗначенияСвойств(ТекущееСостояние, Состояние, ИзмененныеСвойства);
		Состояние = ТекущееСостояние;
	КонецЕсли;
	
	ХранилищеОбщихНастроек.Сохранить("СостояниеВыполненияРегламентныхЗаданий", , Новый ХранилищеЗначения(Состояние), , "");
	
КонецПроцедуры

// Выполняет регламентное задание в режиме файловой информационной базе.
// Используется в процедуре ВыполнитьРегламентныеЗадания().
// 
// Параметры:
//  Состояние       - Структура.
//  Задание         - РегламентноеЗадание.
//  ЗапускВручную   - Булево.
//  МоментЗапуска   - Неопределено, Дата - устанавливает момент запуска или возвращает момент запуска.
//  МоментОкончания - Неопределено, Дата - возвращает момент окончание.
//
// Возвращаемое значение
//  Булево. Если Ложь, значит процедура регламентного задания уже выполняется.
//
Функция ВыполнитьРегламентноеЗадание(Знач Задание,
                                     Знач ЗапускВручную = Ложь,
                                     МоментЗапуска = Неопределено,
                                     МоментОкончания = Неопределено,
                                     НомерСеанса = Неопределено,
                                     НачалоСеанса = Неопределено)
	
	СвойстваПоследнегоФоновогоЗадания = ПолучитьСвойстваПоследнегоФоновогоЗаданияВыполненияРегламентногоЗадания(Задание);
	
	Если СвойстваПоследнегоФоновогоЗадания <> Неопределено
	   И СвойстваПоследнегоФоновогоЗадания.Состояние = СостояниеФоновогоЗадания.Активно Тогда
		
		НомерСеанса  = СвойстваПоследнегоФоновогоЗадания.НомерСеанса;
		НачалоСеанса = СвойстваПоследнегоФоновогоЗадания.НачалоСеанса;
		Возврат Ложь;
	КонецЕсли;
	
	ИмяМетода = Задание.Метаданные.ИмяМетода;
	НаименованиеФоновогоЗадания = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		?(ЗапускВручную,
		  НСтр("ru = 'Запуск вручную: %1'"),
		  НСтр("ru = 'Автозапуск: %1'")),
		ПредставлениеРегламентногоЗадания(Задание));
	
	МоментЗапуска = ?(ТипЗнч(МоментЗапуска) <> Тип("Дата") ИЛИ НЕ ЗначениеЗаполнено(МоментЗапуска), ТекущаяДатаСеанса(), МоментЗапуска);
	
	// Создание свойств нового фонового псевдо-задания.
	СвойстваФоновогоЗадания = ПустаяТаблицаСвойствФоновыхЗаданий().Добавить();
	СвойстваФоновогоЗадания.Идентификатор  = Строка(Новый УникальныйИдентификатор());
	СвойстваФоновогоЗадания.ПопыткаЗапуска = ?(
		СвойстваПоследнегоФоновогоЗадания <> Неопределено
		И СвойстваПоследнегоФоновогоЗадания.Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно,
		СвойстваПоследнегоФоновогоЗадания.ПопыткаЗапуска + 1,
		1);
	СвойстваФоновогоЗадания.Наименование                      = НаименованиеФоновогоЗадания;
	СвойстваФоновогоЗадания.ИдентификаторРегламентногоЗадания = Строка(Задание.УникальныйИдентификатор);
	СвойстваФоновогоЗадания.Расположение                      = "\\" + ИмяКомпьютера();
	СвойстваФоновогоЗадания.ИмяМетода                         = ИмяМетода;
	СвойстваФоновогоЗадания.Состояние                         = СостояниеФоновогоЗадания.Активно;
	СвойстваФоновогоЗадания.Начало                            = МоментЗапуска;
	СвойстваФоновогоЗадания.НомерСеанса                       = НомерСеансаИнформационнойБазы();
	
	Для каждого Сеанс Из ПолучитьСеансыИнформационнойБазы() Цикл
		Если Сеанс.НомерСеанса = СвойстваФоновогоЗадания.НомерСеанса Тогда
			СвойстваФоновогоЗадания.НачалоСеанса = Сеанс.НачалоСеанса;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	// Подготовка команды для выполнения метода вместо фонового задания.
	СтрокаПараметров = "";
	Индекс = 0;
	Пока Индекс < Задание.Параметры.Количество() Цикл
		СтрокаПараметров = СтрокаПараметров + "Задание.Параметры[" + Индекс + "]";
		Если Индекс < (Задание.Параметры.Количество()-1) Тогда
			СтрокаПараметров = СтрокаПараметров + ",";
		КонецЕсли;
		Индекс = Индекс + 1;
	КонецЦикла;
	
	// Сохранение информации о запуске.
	СохраняемоеЗначение = Новый ХранилищеЗначения(ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СвойстваФоновогоЗадания));
	ХранилищеОбщихНастроек.Сохранить("СостояниеРегламентногоЗадания_" + Строка(Задание.УникальныйИдентификатор), , СохраняемоеЗначение, , "");
	
	ПолучитьСообщенияПользователю(Истина);
	Попытка
		// Здесь нет возможности выполнения произвольного кода, т.к. метод берется из метаданных регламентного задания.
		Выполнить("" + ИмяМетода + "(" + СтрокаПараметров + ");");
		СвойстваФоновогоЗадания.Состояние = СостояниеФоновогоЗадания.Завершено;
	Исключение
		СвойстваФоновогоЗадания.Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно;
		СвойстваФоновогоЗадания.ОписаниеИнформацииОбОшибке = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;
	
	// Обслуживание ошибок выполнения процедуры регламентного задания.
	Пока ТранзакцияАктивна() Цикл
		ОтменитьТранзакцию();
	КонецЦикла;
	
	// Фиксация окончания выполнения метода.
	МоментОкончания = ТекущаяДатаСеанса();
	СвойстваФоновогоЗадания.Конец = МоментОкончания;
	СвойстваФоновогоЗадания.СообщенияПользователю = Новый Массив;
	Для каждого Сообщение Из ПолучитьСообщенияПользователю() Цикл
		СвойстваФоновогоЗадания.СообщенияПользователю.Добавить(Сообщение);
	КонецЦикла;
	ПолучитьСообщенияПользователю(Истина);
	
	Свойства = ХранилищеОбщихНастроек.Загрузить("СостояниеРегламентногоЗадания_" + Строка(Задание.УникальныйИдентификатор), , , "");
	Свойства = ?(ТипЗнч(Свойства) = Тип("ХранилищеЗначения"), Свойства.Получить(), Неопределено);
	
	Если ТипЗнч(Свойства) <> Тип("Структура")
	 ИЛИ НЕ Свойства.Свойство("НомерСеанса")
	 ИЛИ НЕ Свойства.Свойство("НачалоСеанса")
	 ИЛИ(  Свойства.НомерСеанса  = СвойстваФоновогоЗадания.НомерСеанса
	     И Свойства.НачалоСеанса = СвойстваФоновогоЗадания.НачалоСеанса) Тогда
		// Маловероятной перезаписи из-за отсутствия блокировки не произошло, поэтому можно записать свойства.
		СохраняемоеЗначение = Новый ХранилищеЗначения(ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СвойстваФоновогоЗадания));
		ХранилищеОбщихНастроек.Сохранить("СостояниеРегламентногоЗадания_" + Строка(Задание.УникальныйИдентификатор), , СохраняемоеЗначение, , "");
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура ДобавитьСвойстваФоновыхЗаданий(Знач МассивФоновыхЗаданий, Знач ТаблицаСвойствФоновыхЗаданий)
	
	Индекс = МассивФоновыхЗаданий.Количество() - 1;
	Пока Индекс >= 0 Цикл
		ФоновоеЗадание = МассивФоновыхЗаданий[Индекс];
		Строка = ТаблицаСвойствФоновыхЗаданий.Добавить();
		ЗаполнитьЗначенияСвойств(Строка, ФоновоеЗадание);
		Строка.НаСервере = Истина;
		Строка.Идентификатор = ФоновоеЗадание.УникальныйИдентификатор;
		РегламентноеЗадание = ФоновоеЗадание.РегламентноеЗадание;
		
		Если РегламентноеЗадание = Неопределено
		   И СтроковыеФункцииКлиентСервер.ЭтоУникальныйИдентификатор(ФоновоеЗадание.Ключ) Тогда
			
			РегламентноеЗадание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(Новый УникальныйИдентификатор(ФоновоеЗадание.Ключ));
		КонецЕсли;
		Строка.ИдентификаторРегламентногоЗадания = ?(
			РегламентноеЗадание = Неопределено,
			"",
			РегламентноеЗадание.УникальныйИдентификатор);
		
		Строка.ОписаниеИнформацииОбОшибке = ?(
			ФоновоеЗадание.ИнформацияОбОшибке = Неопределено,
			"",
			ПодробноеПредставлениеОшибки(ФоновоеЗадание.ИнформацияОбОшибке));
		
		Индекс = Индекс - 1;
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы

// Обработчик обновления настроек выполнения регламентных заданий в новом размещении.
Процедура КонвертироватьНастройкиВыполненияРегламентныхЗаданий_1_2_2_2() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ВызватьИсключениеЕслиНетПраваАдминистрирования();
	
	Настройки = ХранилищеОбщихНастроек.Загрузить("НастройкиВыполненияРегламентныхЗаданий", , , "");
	Настройки = ?(ТипЗнч(Настройки) = Тип("ХранилищеЗначения"), Настройки.Получить(), Неопределено);
	
	Если Настройки <> Неопределено Тогда
		Настройки = ПроверитьНастройки(Настройки);
		Константы.НастройкиВыполненияРегламентныхЗаданий.Установить(Настройки);
	КонецЕсли;
	
	ХранилищеОбщихНастроек.Удалить("НастройкиВыполненияРегламентныхЗаданий", Неопределено, "");
	
КонецПроцедуры
