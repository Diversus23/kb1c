////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы библиотеки "База знаний" (БазаЗнаний).
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

////////////////////////////////////////////////////////////////////////////////
// Сведения о библиотеке (или конфигурации).

// Заполняет основные сведения о библиотеке или основной конфигурации.
// Библиотека, имя которой имя совпадает с именем конфигурации в метаданных, определяется как основная конфигурация.
// 
// Параметры:
//  Описание - Структура - сведения о библиотеке:
//
//   Имя                 - Строка - имя библиотеки, например, "СтандартныеПодсистемы".
//   Версия              - Строка - версия в формате из 4-х цифр, например, "2.1.3.1".
//
//   ТребуемыеПодсистемы - Массив - имена других библиотек (Строка), от которых зависит данная библиотека.
//                                  Обработчики обновления таких библиотек должны быть вызваны ранее
//                                  обработчиков обновления данной библиотеки.
//                                  При циклических зависимостях или, напротив, отсутствии каких-либо зависимостей,
//                                  порядок вызова обработчиков обновления определяется порядком добавления модулей
//                                  в процедуре ПриДобавленииПодсистем общего модуля ПодсистемыКонфигурацииПереопределяемый.
//
Процедура ПриДобавленииПодсистемы(Описание) Экспорт
	
	Описание.Имя    = "БазаЗнаний";
	Описание.Версия = "1.3.1.0";
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики обновления информационной базы.

// Добавляет в список процедуры-обработчики обновления данных ИБ
// для всех поддерживаемых версий библиотеки или конфигурации.
// Вызывается перед началом обновления данных ИБ для построения плана обновления.
//
//  Обработчики - ТаблицаЗначений - описание полей, см. в процедуре
//                ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления.
//
// Пример добавления процедуры-обработчика в список:
//  Обработчик = Обработчики.Добавить();
//  Обработчик.Версия              = "1.1.0.0";
//  Обработчик.Процедура           = "ОбновлениеИБ.ПерейтиНаВерсию_1_1_0_0";
//  Обработчик.МонопольныйРежим    = Ложь;
//
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "1.1.1.0";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБазаЗнаний.ПерейтиНаВерсию_1_1_1_0";
	Обработчик.МонопольныйРежим    = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия              = "1.3.1.0";
	Обработчик.Процедура           = "ОбновлениеИнформационнойБазыБазаЗнаний.ПерейтиНаВерсию_1_3_1_0";
	Обработчик.МонопольныйРежим    = Ложь;
	
КонецПроцедуры

// Вызывается перед процедурами-обработчиками обновления данных ИБ.
//
Процедура ПередОбновлениемИнформационнойБазы() Экспорт
	
	
КонецПроцедуры

// Вызывается после завершения обновления данных ИБ.
// 
// Параметры:
//   ПредыдущаяВерсия       - Строка - версия до обновления. "0.0.0.0" для "пустой" ИБ.
//   ТекущаяВерсия          - Строка - версия после обновления.
//   ВыполненныеОбработчики - ДеревоЗначений - список выполненных процедур-обработчиков обновления,
//                                             сгруппированных по номеру версии.
//   ВыводитьОписаниеОбновлений - Булево - (возвращаемое значение) если установить Истина,
//                                то будет выведена форма с описанием обновлений. По умолчанию, Истина.
//   МонопольныйРежим           - Булево - Истина, если обновление выполнялось в монопольном режиме.
//
// Пример обхода выполненных обработчиков обновления:
//
//	Для Каждого Версия Из ВыполненныеОбработчики.Строки Цикл
//		
//		Если Версия.Версия = "*" Тогда
//			// Обработчик, который может выполнятся при каждой смене версии.
//		Иначе
//			// Обработчик, который выполняется для определенной версии.
//		КонецЕсли;
//		
//		Для Каждого Обработчик Из Версия.Строки Цикл
//			...
//		КонецЦикла;
//		
//	КонецЦикла;
//
Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсия, Знач ТекущаяВерсия,
	Знач ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, МонопольныйРежим) Экспорт

КонецПроцедуры

// Вызывается при подготовке табличного документа с описанием изменений в программе.
//
// Параметры:
//   Макет - ТабличныйДокумент - описание обновления всех библиотек и конфигурации.
//           Макет можно дополнить или заменить.
//           См. также общий макет ОписаниеИзмененийСистемы.
//
Процедура ПриПодготовкеМакетаОписанияОбновлений(Знач Макет) Экспорт
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики смены релизов

Процедура ПерейтиНаВерсию_1_1_1_0() Экспорт
	
	ОбновитьСтатистикуКатегорийБазыЗнаний();
	
КонецПроцедуры

Процедура ПерейтиНаВерсию_1_3_1_0() Экспорт
	
	Константы.ИспользоватьВнешнихПользователей.Установить(Истина);
	
	ОбработатьГиперссылкиСтатейБазыЗнаний();
	ОбновитьСтатистикуКатегорийБазыЗнаний();
	ПеренестиПользователейБазыЗнаний();
	
КонецПроцедуры

// 1.3.1.0

Функция ПолучитьСтрокуПоискаИзТекста(ТекстПоиска)
	
	СтрокаПоиска = "";
	
	МассивСлов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ТекстПоиска, " ");
	Для Каждого СловоПоиска Из МассивСлов Цикл
		СтрокаПоиска = СтрокаПоиска + ?(ПустаяСтрока(СтрокаПоиска), "", "+") + КодироватьСтроку(СловоПоиска, СпособКодированияСтроки.КодировкаURL);
	КонецЦикла;
	
	Возврат СтрокаПоиска;
	
КонецФункции

Функция СформироватьАдресСсылкиПоСтроке(СтрокаТаблицы)
	
	АдресСсылки = "";
	
	Если СтрокаТаблицы.Тип = 0 Тогда
		ПараметрыСсылки = Новый Структура;
		
		Разделитель	= Найти(СтрокаТаблицы.Адрес, "#");
		Если Разделитель > 0 Тогда
			ПараметрыСсылки.Вставить("id", Лев(СтрокаТаблицы.Адрес, Разделитель - 1));
			ПараметрыСсылки.Вставить("section", Сред(СтрокаТаблицы.Адрес, Разделитель + 1));
		Иначе 
			ПараметрыСсылки.Вставить("id", СтрокаТаблицы.Адрес);
		КонецЕсли;
		
		АдресСсылки = БазаЗнанийAPIКлиентСервер.КонструкторСсылки_page("article", ПараметрыСсылки);
	ИначеЕсли СтрокаТаблицы.Тип = 1 Тогда
		АдресСсылки = СтрокаТаблицы.Адрес;
	ИначеЕсли СтрокаТаблицы.Тип = 2 Тогда
		АдресСсылки = "mailto:" + СтрокаТаблицы.Адрес;
	ИначеЕсли СтрокаТаблицы.Тип = 3 Тогда
		АдресСсылки = БазаЗнанийAPIКлиентСервер.КонструкторСсылки_page("category", Новый Структура("id", СтрокаТаблицы.Адрес));
	ИначеЕсли СтрокаТаблицы.Тип = 4 Тогда
		АдресСсылки = БазаЗнанийAPIКлиентСервер.КонструкторСсылки_search("text", Новый Структура("text", СтрокаТаблицы.Адрес));
	ИначеЕсли СтрокаТаблицы.Тип = 5 Тогда
		АдресСсылки = "http://www.google.ru/search?sourceid=chrome&ie=UTF-8&q=" + ПолучитьСтрокуПоискаИзТекста(СтрокаТаблицы.Адрес);
	КонецЕсли;
	
	Возврат АдресСсылки;
	
КонецФункции

Процедура ОбработатьТекстHTML(ТекстHTML, ТаблицаСсылок)
	
	Для Каждого СтрокаТаблицы Из ТаблицаСсылок Цикл
		СтрокаПоиска	= "href='link:" + СтрокаТаблицы.Идентификатор + "'";
		АдресСсылки		= "href='" + СформироватьАдресСсылкиПоСтроке(СтрокаТаблицы) + "'";
		ТекстHTML		= СтрЗаменить(ТекстHTML, СтрокаПоиска, АдресСсылки);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьГиперссылкиСтатейБазыЗнаний()
	
	Выборка = Справочники.СтатьиБазыЗнаний.Выбрать();
	Пока Выборка.Следующий() Цикл
		
		ЭлементОбъект = Выборка.ПолучитьОбъект();
		ЭлементОбъект.ОбменДанными.Загрузка = Истина;
		
		ОбработатьТекстHTML(ЭлементОбъект.ТекстHTML, ЭлементОбъект.УдалитьГиперссылки);
		Для Каждого СтрокаСодержания Из ЭлементОбъект.Содержание Цикл
			ОбработатьТекстHTML(СтрокаСодержания.ТекстHTML, ЭлементОбъект.УдалитьГиперссылки);
		КонецЦикла;
		
		ЭлементОбъект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьПользователя(Кэш, ПользовательСсылка)
	
	Если НЕ ЗначениеЗаполнено(ПользовательСсылка) Тогда
		Возврат Справочники.Пользователи.ПустаяСсылка();
	КонецЕсли;
	
	Пользователь1С = Кэш.Получить(ПользовательСсылка);
	
	Если Пользователь1С = Неопределено Тогда
		Пользователь1С = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПользовательСсылка, "Пользователь");
		Если НЕ ЗначениеЗаполнено(Пользователь1С) Тогда
			ЭлементОбъект = Справочники.Пользователи.СоздатьЭлемент();
			ЭлементОбъект.ОбменДанными.Загрузка = Истина;
			ЭлементОбъект.Наименование	= Строка(ПользовательСсылка);
			ЭлементОбъект.Служебный		= Истина;
			ЭлементОбъект.Записать();
			
			Пользователь1С = ЭлементОбъект.Ссылка;
		КонецЕсли;
		
		Кэш.Вставить(ПользовательСсылка, Пользователь1С);
	КонецЕсли;
	
	Возврат Пользователь1С;
	
КонецФункции

Процедура ПеренестиПользователейБазыЗнаний()
	
	КэшПользователи = Новый Соответствие;
	
	// Справочник "Комментарии базы знаний"
	Выборка = Справочники.КомментарииБазыЗнаний.Выбрать();
	Пока Выборка.Следующий() Цикл
		ЭлементОбъект = Выборка.ПолучитьОбъект();
		ЭлементОбъект.ОбменДанными.Загрузка = Истина;
		ЭлементОбъект.Автор	= ПолучитьПользователя(КэшПользователи, ЭлементОбъект.УдалитьАвтор);
		ЭлементОбъект.Записать();
	КонецЦикла;
	
	// Справочник "Новости базы знаний"
	Выборка = Справочники.НовостиБазыЗнаний.Выбрать();
	Пока Выборка.Следующий() Цикл
		ЭлементОбъект = Выборка.ПолучитьОбъект();
		ЭлементОбъект.ОбменДанными.Загрузка = Истина;
		ЭлементОбъект.Автор	= ПолучитьПользователя(КэшПользователи, ЭлементОбъект.УдалитьАвтор);
		ЭлементОбъект.Записать();
	КонецЦикла;
	
	// Справочник "Статьи базы знаний"
	Выборка = Справочники.СтатьиБазыЗнаний.Выбрать();
	Пока Выборка.Следующий() Цикл
		ЭлементОбъект = Выборка.ПолучитьОбъект();
		ЭлементОбъект.ОбменДанными.Загрузка = Истина;
		ЭлементОбъект.Ответственный	= ПолучитьПользователя(КэшПользователи, ЭлементОбъект.УдалитьОтветственный);
		ЭлементОбъект.Записать();
	КонецЦикла;
	
	// Справочник "Статьи базы знаний"
	Выборка = Справочники.СтатьиБазыЗнаний.Выбрать();
	Пока Выборка.Следующий() Цикл
		ЭлементОбъект = Выборка.ПолучитьОбъект();
		ЭлементОбъект.ОбменДанными.Загрузка = Истина;
		ЭлементОбъект.Ответственный	= ПолучитьПользователя(КэшПользователи, ЭлементОбъект.УдалитьОтветственный);
		ЭлементОбъект.Записать();
	КонецЦикла;
	
	// Регистр сведений "Блокировка статей базы знаний"
	НаборЗаписей = РегистрыСведений.БлокировкаСтатьейБазыЗнаний.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	Для Каждого ЗаписьРегистра Из НаборЗаписей Цикл
		ЗаписьРегистра.Пользователь	= ПолучитьПользователя(КэшПользователи, ЗаписьРегистра.УдалитьПользователь);
	КонецЦикла;
	НаборЗаписей.Записать(Истина);
	
	// Регистр сведений "Избранное базы знаний"
	НаборЗаписей = РегистрыСведений.ИзбранноеБазыЗнаний.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	Для Каждого ЗаписьРегистра Из НаборЗаписей Цикл
		ЗаписьРегистра.Пользователь	= ПолучитьПользователя(КэшПользователи, ЗаписьРегистра.УдалитьПользователь);
	КонецЦикла;
	НаборЗаписей.Записать(Истина);
	
	// Регистр сведений "История статей базы знаний"
	НаборЗаписей = РегистрыСведений.ИсторияСтатейБазыЗнаний.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	Для Каждого ЗаписьРегистра Из НаборЗаписей Цикл
		ЗаписьРегистра.Ответственный	= ПолучитьПользователя(КэшПользователи, ЗаписьРегистра.УдалитьОтветственный);
	КонецЦикла;
	НаборЗаписей.Записать(Истина);
	
	// Регистр сведений "Получатели новостей базы знаний"
	НаборЗаписей = РегистрыСведений.ПолучателиНовостейБазыЗнаний.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	Для Каждого ЗаписьРегистра Из НаборЗаписей Цикл
		ЗаписьРегистра.Пользователь	= ПолучитьПользователя(КэшПользователи, ЗаписьРегистра.УдалитьПользователь);
	КонецЦикла;
	НаборЗаписей.Записать(Истина);
	
	// Регистр сведений "Рейтинг статей базы знаний"
	НаборЗаписей = РегистрыСведений.РейтингСтатейБазыЗнаний.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	Для Каждого ЗаписьРегистра Из НаборЗаписей Цикл
		ЗаписьРегистра.Пользователь	= ПолучитьПользователя(КэшПользователи, ЗаписьРегистра.УдалитьПользователь);
	КонецЦикла;
	НаборЗаписей.Записать(Истина);
	
КонецПроцедуры

// 1.1.1.0

Процедура ОбновитьСтатистикуКатегорийБазыЗнаний()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КатегорииБазыЗнаний.Ссылка
	|ИЗ
	|	Справочник.КатегорииБазыЗнаний КАК КатегорииБазыЗнаний
	|ГДЕ
	|	НЕ КатегорииБазыЗнаний.ПометкаУдаления";
	МассивКатегорий = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	БазаЗнаний.ОбновитьСтатистикуКатегорий(Новый Структура("Категории", МассивКатегорий));
	
КонецПроцедуры
