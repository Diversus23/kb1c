///////////////////////////////////////////////////////////////////////////////////
// Подсистема "Управление итогами и агрегатами".
//
///////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС

////////////////////////////////////////////////////////////////////////////////
// Добавление обработчиков служебных событий (подписок)

// См. описание этой же процедуры в модуле СтандартныеПодсистемыСервер.
Процедура ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики) Экспорт
	
	// КЛИЕНТСКИЕ ОБРАБОТЧИКИ.
	
	КлиентскиеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриПолученииСпискаПредупрежденийЗавершенияРаботы"].Добавить(
		"УправлениеИтогамиИАгрегатамиКлиент");
	
	// СЕРВЕРНЫЕ ОБРАБОТЧИКИ.
	
	СерверныеОбработчики["СтандартныеПодсистемы.ОбновлениеВерсииИБ\ПриДобавленииОбработчиковОбновления"].Добавить(
		"УправлениеИтогамиИАгрегатамиСлужебный");
	
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриДобавленииПараметровРаботыКлиентскойЛогикиСтандартныхПодсистемПриЗавершении"].Добавить(
		"УправлениеИтогамиИАгрегатамиСлужебный");
	
	СерверныеОбработчики["СтандартныеПодсистемы.ОбновлениеВерсииИБ\ПослеОбновленияИнформационнойБазы"].Добавить(
		"УправлениеИтогамиИАгрегатамиСлужебный");
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса.ОчередьЗаданий") Тогда
		СерверныеОбработчики["СтандартныеПодсистемы.РаботаВМоделиСервиса.ОчередьЗаданий\ПриПолученииСпискаШаблонов"].Добавить(
			"УправлениеИтогамиИАгрегатамиСлужебный");
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики служебных событий

// Добавляет процедуры-обработчики обновления, необходимые данной подсистеме.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                  общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.НачальноеЗаполнение = Истина;
	Обработчик.Процедура = "УправлениеИтогамиИАгрегатамиСлужебный.ИнициироватьПараметрыИтоговИАгрегатов";
	Обработчик.ОбщиеДанные = Истина;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.3.7";
	Обработчик.Процедура = "УправлениеИтогамиИАгрегатамиСлужебный.УстановитьИспользованиеРегламентныхЗаданий";
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.ВыполнятьВГруппеОбязательных = Истина;
	Обработчик.Приоритет = 75;
	
КонецПроцедуры

// Заполняет структуру параметров, необходимых для работы клиентского кода
// при завершении работы конфигурации, т.е. в обработчиках:
// - ПередЗавершениемРаботыСистемы,
// - ПриЗавершенииРаботыСистемы
//
// Параметры:
//   Параметры   - Структура - структура параметров.
//
Процедура ПриДобавленииПараметровРаботыКлиентскойЛогикиСтандартныхПодсистемПриЗавершении(Параметры) Экспорт
	
	Если НЕ РежимРаботыЛокальныйФайловый() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПравоДоступа("Использование", Метаданные.Обработки.СдвигГраницыИтоговПриЗавершенииРаботы) Тогда
		Возврат;
	КонецЕсли;
	
	Параметры.Вставить("УправлениеИтогамиИАгрегатами", Новый ФиксированнаяСтруктура("СдвинутьГраницуИтогов", НадоСдвинутьГраницуИтогов()));
	
КонецПроцедуры

// Вызывается после завершения монопольного обновления данных ИБ.
// 
// Параметры:
//   ПредыдущаяВерсия       - Строка - версия подсистемы до обновления. "0.0.0.0" для "пустой" ИБ.
//   ТекущаяВерсия          - Строка - версия подсистемы после обновления.
//   ВыполненныеОбработчики - ДеревоЗначений - список выполненных процедур-обработчиков обновления
//                                             подсистемы, сгруппированных по номеру версии.
//                            Процедура обхода выполненных обработчиков:
//
//	Для Каждого Версия Из ВыполненныеОбработчики.Строки Цикл
//		
//		Если Версия.Версия = "*" Тогда
//			// Обработчик, который может выполнятся при каждой смене версии.
//		Иначе
//			// Обработчик, который выполняется для определенной версии.
//		КонецЕсли;
//		
//		Для Каждого Обработчик Из Версия.Строки Цикл
//			...
//		КонецЦикла;
//		
//	КонецЦикла;
//
//   ВыводитьОписаниеОбновлений - Булево (возвращаемое значение)- если установить Истина,
//                                тогда выводить форму с описанием обновлений.
//   МонопольныйРежим           - Булево - признак выполнения обновления в монопольном режиме.
//                                Истина - обновление выполнялось в монопольном режиме.
//
Процедура ПослеОбновленияИнформационнойБазы(Знач ПредыдущаяВерсия, Знач ТекущаяВерсия,
		Знач ВыполненныеОбработчики, ВыводитьОписаниеОбновлений, МонопольныйРежим) Экспорт
	
	Если ПредыдущаяВерсия = "0.0.0.0" Или ПустаяСтрока(ПредыдущаяВерсия) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ РежимРаботыЛокальныйФайловый() Тогда
		Возврат;
	КонецЕсли;
	
	Параметры = СформироватьПараметрыИтоговИАгрегатов();
	ЗаписатьПараметрыИтоговИАгрегатов(Параметры);
	
КонецПроцедуры

// Обработчик события ПриПолученииСпискаШаблонов.
//
// Формирует список шаблонов заданий очереди.
//
// Параметры:
//  Шаблоны - Массив строк. В параметр следует добавить имена предопределенных
//   неразделенных регламентных заданий, которые должны использоваться в качестве
//   шаблонов для заданий очереди.
//
Процедура ПриПолученииСпискаШаблонов(Шаблоны) Экспорт
	
	Шаблоны.Добавить("ОбновлениеАгрегатов");
	Шаблоны.Добавить("ПерестроениеАгрегатов");
	Шаблоны.Добавить("УстановкаПериодаРассчитанныхИтогов");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Выполнение регламентных заданий

// Обработчик регламентного задания "УстановкаПериодаРассчитанныхИтогов".
Процедура УстановкаПериодаРассчитанныхИтогов() Экспорт
	Если ПустаяСтрока(ИмяПользователя()) Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	ДатаСеанса = ТекущаяДатаСеанса();
	РегистрНакопленияПериод  = КонецМесяца(ДобавитьМесяц(ДатаСеанса, -1));
	РегистрБухгалтерииПериод = КонецМесяца(ДатаСеанса);
	
	// Расчет итогов для регистров накопления.
	ВидОстатки = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки;
	Для Каждого РегистрМетаданные Из Метаданные.РегистрыНакопления Цикл
		Если РегистрМетаданные.ВидРегистра = ВидОстатки Тогда
			РегистрНакопленияМенеджер = РегистрыНакопления[РегистрМетаданные.Имя];
			Если ПолучитьПериодРассчитанныхИтогов(РегистрНакопленияМенеджер) < РегистрНакопленияПериод Тогда
				УстановитьПериодРассчитанныхИтогов(РегистрНакопленияМенеджер, РегистрНакопленияПериод);
				Если РегистрНакопленияМенеджер.ПолучитьИспользованиеТекущихИтогов() Тогда
					РегистрНакопленияМенеджер.ПересчитатьТекущиеИтоги();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Расчет итогов для регистров бухгалтерии.
	Для Каждого РегистрМетаданные Из Метаданные.РегистрыБухгалтерии Цикл
		РегистрБухгалтерииМенеджер = РегистрыБухгалтерии[РегистрМетаданные.Имя];
		Если ПолучитьПериодРассчитанныхИтогов(РегистрБухгалтерииМенеджер) < РегистрБухгалтерииПериод Тогда
			УстановитьПериодРассчитанныхИтогов(РегистрБухгалтерииМенеджер, РегистрБухгалтерииПериод);
			Если РегистрБухгалтерииМенеджер.ПолучитьИспользованиеТекущихИтогов() Тогда
				РегистрБухгалтерииМенеджер.ПересчитатьТекущиеИтоги();
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Регистрация даты.
	Если РежимРаботыЛокальныйФайловый() Тогда
		ПараметрыИтогов = ПараметрыИтоговИАгрегатов();
		ПараметрыИтогов.ДатаРасчетаИтогов = НачалоМесяца(ДатаСеанса);
		ЗаписатьПараметрыИтоговИАгрегатов(ПараметрыИтогов);
	КонецЕсли;
КонецПроцедуры

// Обработчик регламентного задания "ОбновлениеАгрегатов".
Процедура ОбновлениеАгрегатов() Экспорт
	Если ПустаяСтрока(ИмяПользователя()) Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	// Обновление агрегатов для оборотных регистров накопления.
	ВидОбороты = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Обороты;
	Для Каждого РегистрМетаданные Из Метаданные.РегистрыНакопления Цикл
		Если РегистрМетаданные.ВидРегистра = ВидОбороты Тогда
			РегистрНакопленияМенеджер = РегистрыНакопления[РегистрМетаданные.Имя];
			Если РегистрНакопленияМенеджер.ПолучитьРежимАгрегатов()
				И РегистрНакопленияМенеджер.ПолучитьИспользованиеАгрегатов() Тогда
				РегистрНакопленияМенеджер.ОбновитьАгрегаты();
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Обработчик регламентного задания "ПерестроениеАгрегатов".
Процедура ПерестроениеАгрегатов() Экспорт
	Если ПустаяСтрока(ИмяПользователя()) Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	// Перестроение агрегатов для оборотных регистров накопления.
	ВидОбороты = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Обороты;
	Для Каждого РегистрМетаданные Из Метаданные.РегистрыНакопления Цикл
		Если РегистрМетаданные.ВидРегистра = ВидОбороты Тогда
			РегистрНакопленияМенеджер = РегистрыНакопления[РегистрМетаданные.Имя];
			Если РегистрНакопленияМенеджер.ПолучитьРежимАгрегатов()
				И РегистрНакопленияМенеджер.ПолучитьИспользованиеАгрегатов() Тогда
				РегистрНакопленияМенеджер.ПерестроитьИспользованиеАгрегатов();
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Для работы в файловом режиме

// Возвращает Истина если ИБ работает в файловом режиме и разделение отключено.
Функция РежимРаботыЛокальныйФайловый()
	Возврат ОбщегоНазначения.ИнформационнаяБазаФайловая() И НЕ ОбщегоНазначенияПовтИсп.РазделениеВключено();
КонецФункции

// Определяет актуальность итогов и агрегатов. Если нет регистров, то возвращает Истина.
Функция НадоСдвинутьГраницуИтогов() Экспорт
	Параметры = ПараметрыИтоговИАгрегатов();
	Возврат Пользователи.ЭтоПолноправныйПользователь() 
		И Параметры.ЕстьРегистрыИтогов И ДобавитьМесяц(Параметры.ДатаРасчетаИтогов, 1) < ТекущаяДатаСеанса();
КонецФункции

// Получает значение константы "ПараметрыИтоговИАгрегатов".
Функция ПараметрыИтоговИАгрегатов()
	УстановитьПривилегированныйРежим(Истина);
	Параметры = Константы.ПараметрыИтоговИАгрегатов.Получить().Получить();
	Если ТипЗнч(Параметры) <> Тип("Структура") ИЛИ НЕ Параметры.Свойство("ЕстьРегистрыИтогов") Тогда
		Параметры = СформироватьПараметрыИтоговИАгрегатов();
	КонецЕсли;
	Возврат Параметры;
КонецФункции

// Перезаполняет константу "ПараметрыИтоговИАгрегатов".
Функция СформироватьПараметрыИтоговИАгрегатов()
	Параметры = Новый Структура;
	Параметры.Вставить("ЕстьРегистрыИтогов", Ложь);
	Параметры.Вставить("ДатаРасчетаИтогов",  '39991231235959'); // 31.12.3999 23:59:59, максимальная дата.
	
	ВидОстатки = Метаданные.СвойстваОбъектов.ВидРегистраНакопления.Остатки;
	Для Каждого РегистрМетаданные Из Метаданные.РегистрыНакопления Цикл
		Если РегистрМетаданные.ВидРегистра = ВидОстатки Тогда
			Параметры.ЕстьРегистрыИтогов = Истина;
			Параметры.ДатаРасчетаИтогов  = Мин(Параметры.ДатаРасчетаИтогов, ПолучитьПериодРассчитанныхИтогов(РегистрыНакопления[РегистрМетаданные.Имя]));
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ Параметры.ЕстьРегистрыИтогов Тогда
		Параметры.ДатаРасчетаИтогов = '00010101';
	КонецЕсли;
	
	Возврат Параметры;
КонецФункции

// Записывает значение константы "ПараметрыИтоговИАгрегатов".
Процедура ЗаписатьПараметрыИтоговИАгрегатов(Параметры) Экспорт
	Константы.ПараметрыИтоговИАгрегатов.Установить(Новый ХранилищеЗначения(Параметры));
КонецПроцедуры

// Возвращает период рассчитанных итогов для регистров.
Функция ПолучитьПериодРассчитанныхИтогов(МенеджерРегистра) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЭтоПлатформа83БезРежимаСовместимости() Тогда
		Возврат МенеджерРегистра.ПолучитьМаксимальныйПериодРассчитанныхИтогов();
	Иначе
		Возврат МенеджерРегистра.ПолучитьПериодРассчитанныхИтогов();
	КонецЕсли;
	
КонецФункции

// Устанавливает период, на который рассчитаны итоги в регистре.
Процедура УстановитьПериодРассчитанныхИтогов(МенеджерРегистра, Период) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЭтоПлатформа83БезРежимаСовместимости() Тогда
		МенеджерРегистра.УстановитьМаксимальныйПериодРассчитанныхИтогов(Период);
	Иначе
		МенеджерРегистра.УстановитьПериодРассчитанныхИтогов(Период);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы

// Устанавливает параметры подсистемы при первом запуске программы.
//
Процедура ИнициироватьПараметрыИтоговИАгрегатов() Экспорт
	
	Параметры = Константы.ПараметрыИтоговИАгрегатов.Получить().Получить();
	Если ТипЗнч(Параметры) <> Тип("Структура") Тогда
		Параметры = СформироватьПараметрыИтоговИАгрегатов();
		Параметры.ДатаРасчетаИтогов = ТекущаяДатаСеанса();
		ЗаписатьПараметрыИтоговИАгрегатов(Параметры);
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает расписания и использование регламентных заданий подсистемы
// в значения по умолчанию. Используется только при перехода на версию 
// 2.1.3 библиотеки.
//
Процедура УстановитьИспользованиеРегламентныхЗаданий() Экспорт
	
	ПустоеРасписание = ОбщегоНазначения.ЗначениеИзСтрокиXML(
	"<JobSchedule xmlns=""http://v8.1c.ru/8.1/data/enterprise"" xmlns:xs=""http://www.w3.org/2001/XMLSchema"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:type=""JobSchedule"" BeginDate=""0001-01-01"" EndDate=""0001-01-01"" BeginTime=""00:00:00"" EndTime=""00:00:00"" CompletionTime=""00:00:00"" CompletionInterval=""0"" RepeatPeriodInDay=""0"" RepeatPause=""0"" WeekDayInMonth=""0"" DayInMonth=""0"" WeeksPeriod=""1"" DaysRepeatPeriod=""0"">
	|    <WeekDays/>
	|    <Months/>
	|</JobSchedule>");
	
	ПроверятьИспользование = НЕ ОбщегоНазначенияПовтИсп.РазделениеВключено();
	
	ИменаЗаданий = Новый Массив;
	ИменаЗаданий.Добавить("ОбновлениеАгрегатов");
	ИменаЗаданий.Добавить("ПерестроениеАгрегатов");
	ИменаЗаданий.Добавить("УстановкаПериодаРассчитанныхИтогов");
	
	Для каждого ИмяЗадания Из ИменаЗаданий Цикл
		Задание = РегламентныеЗадания.НайтиПредопределенное(ИмяЗадания);
		
		Если ПроверятьИспользование И Задание.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ОбщегоНазначенияКлиентСервер.РасписанияОдинаковые(ПустоеРасписание, Задание.Расписание) Тогда
			Продолжить;
		КонецЕсли;
		
		Задание.Расписание = РасписаниеЗаданияПоУмолчанию(ИмяЗадания);
		Если ПроверятьИспользование Тогда
			Задание.Использование = Истина;
		КонецЕсли;
		
		Задание.Записать();
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Другие

Функция РасписаниеЗаданияПоУмолчанию(Знач Имя)
	
	Если Имя = "ОбновлениеАгрегатов" Тогда
		РасписаниеXML =
		"<JobSchedule xmlns=""http://v8.1c.ru/8.1/data/enterprise"" xmlns:xs=""http://www.w3.org/2001/XMLSchema"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:type=""JobSchedule"" BeginDate=""0001-01-01"" EndDate=""0001-01-01"" BeginTime=""01:00:00"" EndTime=""00:00:00"" CompletionTime=""00:00:00"" CompletionInterval=""0"" RepeatPeriodInDay=""0"" RepeatPause=""0"" WeekDayInMonth=""0"" DayInMonth=""0"" WeeksPeriod=""1"" DaysRepeatPeriod=""1"">
		|	<WeekDays>1 2 3 4 5 6 7</WeekDays>
		|	<Months>1 2 3 4 5 6 7 8 9 10 11 12</Months>
		|	<DetailedDailySchedules BeginDate=""0001-01-01"" EndDate=""0001-01-01"" BeginTime=""01:00:00"" EndTime=""00:00:00"" CompletionTime=""00:00:00"" CompletionInterval=""0"" RepeatPeriodInDay=""0"" RepeatPause=""0"" WeekDayInMonth=""0"" DayInMonth=""0"" WeeksPeriod=""1"" DaysRepeatPeriod=""0"">
		|		<WeekDays/>
		|		<Months/>
		|	</DetailedDailySchedules>
		|	<DetailedDailySchedules BeginDate=""0001-01-01"" EndDate=""0001-01-01"" BeginTime=""14:00:00"" EndTime=""00:00:00"" CompletionTime=""00:00:00"" CompletionInterval=""0"" RepeatPeriodInDay=""0"" RepeatPause=""0"" WeekDayInMonth=""0"" DayInMonth=""0"" WeeksPeriod=""1"" DaysRepeatPeriod=""0"">
		|		<WeekDays/>
		|		<Months/>
		|	</DetailedDailySchedules>
		|</JobSchedule>";
	ИначеЕсли Имя = "ПерестроениеАгрегатов" Тогда
		РасписаниеXML =
		"<JobSchedule xmlns=""http://v8.1c.ru/8.1/data/enterprise"" xmlns:xs=""http://www.w3.org/2001/XMLSchema"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:type=""JobSchedule"" BeginDate=""0001-01-01"" EndDate=""0001-01-01"" BeginTime=""03:00:00"" EndTime=""00:00:00"" CompletionTime=""00:00:00"" CompletionInterval=""0"" RepeatPeriodInDay=""0"" RepeatPause=""0"" WeekDayInMonth=""0"" DayInMonth=""0"" WeeksPeriod=""1"" DaysRepeatPeriod=""1"">
		|	<WeekDays>6</WeekDays>
		|	<Months>1 2 3 4 5 6 7 8 9 10 11 12</Months>
		|</JobSchedule>";
	ИначеЕсли Имя = "УстановкаПериодаРассчитанныхИтогов" Тогда
		РасписаниеXML =
		"<JobSchedule xmlns=""http://v8.1c.ru/8.1/data/enterprise"" xmlns:xs=""http://www.w3.org/2001/XMLSchema"" xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xsi:type=""JobSchedule"" BeginDate=""0001-01-01"" EndDate=""0001-01-01"" BeginTime=""01:00:00"" EndTime=""00:00:00"" CompletionTime=""00:00:00"" CompletionInterval=""0"" RepeatPeriodInDay=""0"" RepeatPause=""0"" WeekDayInMonth=""0"" DayInMonth=""5"" WeeksPeriod=""1"" DaysRepeatPeriod=""1"">
		|	<WeekDays>1 2 3 4 5 6 7</WeekDays>
		|	<Months>1 2 3 4 5 6 7 8 9 10 11 12</Months>
		|</JobSchedule>";
	Иначе
		ШаблонСообщения = НСтр("ru = 'Неизвестное имя задания %1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, Имя);
		ВызватьИсключение(ТекстСообщения);
	КонецЕсли;
	
	Возврат ОбщегоНазначения.ЗначениеИзСтрокиXML(РасписаниеXML);
	
КонецФункции

