////////////////////////////////////////////////////////////////////////////////
// Подсистема "Обмен данными"
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Процедура-обработчик события "ПередЗаписью" документов для механизма регистрации объектов на узлах
//
// Параметры:
//  ИмяПланаОбмена – Строка – имя плана обмена, для которого выполняется механизм регистрации
//  Источник       - ДокументОбъект - источник события
//  Отказ          - Булево - флаг отказа от выполнения обработчика
// 
Процедура МеханизмРегистрацииОбъектовПередЗаписьюДокумента(ИмяПланаОбмена, Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	МеханизмРегистрацииОбъектов(ИмяПланаОбмена, Источник, Отказ, РежимЗаписи);
	
КонецПроцедуры

// Процедура-обработчик события "ПередЗаписью" ссылочных типов данных (кроме документов) для механизма регистрации объектов на узлах
//
// Параметры:
//  ИмяПланаОбмена – Строка – имя плана обмена, для которого выполняется механизм регистрации
//  Источник       - источник события, кроме типа ДокументОбъект
//  Отказ          - Булево - флаг отказа от выполнения обработчика
// 
Процедура МеханизмРегистрацииОбъектовПередЗаписью(ИмяПланаОбмена, Источник, Отказ) Экспорт
	
	МеханизмРегистрацииОбъектов(ИмяПланаОбмена, Источник, Отказ);
	
КонецПроцедуры

// Процедура-обработчик события "ПередЗаписью" регистров для механизма регистрации объектов на узлах
//
// Параметры:
//  ИмяПланаОбмена – Строка – имя плана обмена, для которого выполняется механизм регистрации
//  Источник       - НаборЗаписейРегистра - источник события
//  Отказ          - Булево - флаг отказа от выполнения обработчика
//  Замещение      - Булево - признак замещения существующего набора записей
// 
Процедура МеханизмРегистрацииОбъектовПередЗаписьюРегистра(ИмяПланаОбмена, Источник, Отказ, Замещение) Экспорт
	
	МеханизмРегистрацииОбъектов(ИмяПланаОбмена, Источник, Отказ,, Замещение, Истина);
	
КонецПроцедуры

// Процедура-обработчик события "ПередЗаписью" константы для механизма регистрации объектов на узлах
//
// Параметры:
//  ИмяПланаОбмена – Строка – имя плана обмена, для которого выполняется механизм регистрации
//  Источник       - КонстантаМенеджерЗначения - источник события
//  Отказ          - Булево - флаг отказа от выполнения обработчика
// 
Процедура МеханизмРегистрацииОбъектовПередЗаписьюКонстанты(ИмяПланаОбмена, Источник, Отказ) Экспорт
	
	МеханизмРегистрацииОбъектов(ИмяПланаОбмена, Источник, Отказ,,,,, Истина);
	
КонецПроцедуры

// Процедура-обработчик события "ПередУдалением" ссылочных типов данных для механизма регистрации объектов на узлах
//
// Параметры:
//  ИмяПланаОбмена – Строка – имя плана обмена, для которого выполняется механизм регистрации
//  Источник       - источник события
//  Отказ          - Булево - флаг отказа от выполнения обработчика
// 
Процедура МеханизмРегистрацииОбъектовПередУдалением(ИмяПланаОбмена, Источник, Отказ) Экспорт
	
	МеханизмРегистрацииОбъектов(ИмяПланаОбмена, Источник, Отказ,,,, Истина);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции дли использования в обработчиках событий правил регистрации

// Процедура дополняет список узлов-получателей объекта переданными значениями
//
// Параметры:
//  Объект – объект, для которого выполняется правило регистрации
//  Узлы   – Массив – узлы плана обмена, которые необходимо добавить в список узлов-получателей объекта
//
Процедура ДополнитьПолучателей(Объект, Узлы) Экспорт
	
	Для Каждого Элемент Из Узлы Цикл
		
		Попытка
			Объект.ОбменДанными.Получатели.Добавить(Элемент);
		Исключение
			ИмяПланаОбмена = Элемент.Метаданные().Имя;
			ОбъектМетаданных = Объект.Метаданные();
			СтрокаСообщения = НСтр("ru = 'Для состава плана обмена [ИмяПланаОбмена] не указана регистрация объекта [ПолноеИмя]'");
			СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "[ИмяПланаОбмена]", ИмяПланаОбмена);
			СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "[ПолноеИмя]",      ОбъектМетаданных.ПолноеИмя());
			ВызватьИсключение СтрокаСообщения;
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура вычитает из списка узлов-получателей объекта переданные значения
//
// Параметры:
//  Объект – объект, для которого выполняется правило регистрации
//  Узлы – Массив – узлы плана обмена, которые необходимо вычесть из списка узлов-получателей объекта
// 
Процедура СократитьПолучателей(Объект, Узлы) Экспорт
	
	Получатели = СократитьМассив(Объект.ОбменДанными.Получатели, Узлы);
	
	// очищаем список получателей и заполняем его заново
	Объект.ОбменДанными.Получатели.Очистить();
	
	// добавляем узлы для регистрации объекта
	ДополнитьПолучателей(Объект, Получатели);
	
КонецПроцедуры

// Определяет массив узлов-получателей для объекта при заданном плане обмена и выполняет регистрацию объекта на полученных узлах.
//
// Параметры:
//  Объект         - объект, для которого необходимо выполнить правила регистрации и выполнить регистрацию на узлах
//  ИмяПланаОбмена - Строка - имя плана обмена как оно задано в конфигураторе
//  Отправитель (необязательный) – ПланОбменаСсылка – узел плана обмена от которого принимается сообщение обмена
//                    при загрузке данных: если задан, то регистрация объекта не этом узле выполнятся не будет.
// 
Процедура ВыполнитьПравилаРегистрацииДляОбъекта(Объект, ИмяПланаОбмена, Отправитель = Неопределено) Экспорт
	
	Получатели = ОпределитьПолучателей(Объект, ИмяПланаОбмена);
	
	ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Получатели, Отправитель);
	
	Если Получатели.Количество() > 0 Тогда
		
		ПланыОбмена.ЗарегистрироватьИзменения(Получатели, Объект);
		
	КонецЕсли;
	
КонецПроцедуры

// Вычитает один массив элементов из другого массива. Возвращает результат вычитания.
//
Функция СократитьМассив(Массив, МассивВычитания) Экспорт
	
	Возврат ОбщегоНазначенияКлиентСервер.СократитьМассив(Массив, МассивВычитания);
	
КонецФункции

// Функция возвращает список всех узлов заданного плана обмена кроме предопределенного узла
//
// Параметры:
//  ИмяПланаОбмена – Строка – имя плана обмена, как оно задано в конфигураторе, список узлов для которого необходимо получить
//
//  Возвращаемое значение:
//   Массив – список всех узлов заданного плана обмена.
//
Функция ВсеУзлыПланаОбмена(ИмяПланаОбмена) Экспорт
	
	#Если ВнешнееСоединение ИЛИ ТолстыйКлиентОбычноеПриложение Тогда
		
		Возврат ОбменДаннымиВызовСервера.ВсеУзлыПланаОбмена(ИмяПланаОбмена);
		
	#Иначе
		
		УстановитьПривилегированныйРежим(Истина);
		Возврат ОбменДаннымиПовтИсп.ПолучитьМассивУзловПланаОбмена(ИмяПланаОбмена);
		
	#КонецЕсли
	
КонецФункции

// Функция определяет массив узлов-получателей для объекта при заданном плане обмена
//
// Параметры:
//  Объект         - объект, для которого необходимо выполнить правила регистрации и определить список узлов-получателей.
//  ИмяПланаОбмена - Строка - имя плана обмена как оно задано в конфигураторе
// 
// Возвращаемое значение:
//  МассивУзловРезультат - Массив - массив узлов-получателей для объекта
//
Функция ОпределитьПолучателей(Объект, ИмяПланаОбмена) Экспорт
	
	МассивУзловРезультат = Новый Массив;
	
	ОбъектМетаданных = Объект.Метаданные();
	
	ЭтоРегистр = ОбщегоНазначения.ЭтоРегистр(ОбъектМетаданных);
	
	ВыполнитьПравилаРегистрацииОбъектовДляПланаОбмена(МассивУзловРезультат, Объект, ИмяПланаОбмена, ОбъектМетаданных, Ложь, ЭтоРегистр);
	
	Возврат МассивУзловРезультат;
	
КонецФункции

// Определяет признак авторегистрации объекта метаданных в составе плана обмена.
//
// Параметры:
// ОбъектМетаданных (обязательный) – объект метаданных, для которого требуется получить признак авторегистрации
// ИмяПланаОбмена (обязательный) – Строка – имя плана обмена, как оно задано в конфигураторе, в состав которого входит объект метаданных.
//
// Возвращаемое значение:
// Тип: Булево. Истина – объект метаданных имеет признак авторегистрации "Разрешена" в составе плана обмена;
//              Ложь – объект метаданных имеет признак авторегистрации "Запрещена" в составе плана обмена
//              или объект метаданных не входит в состав плана обмена.
//
Функция АвтоРегистрацияРазрешена(ОбъектМетаданных, ИмяПланаОбмена) Экспорт
	
	Возврат ОбменДаннымиПовтИсп.АвтоРегистрацияРазрешена(ИмяПланаОбмена, ОбъектМетаданных.ПолноеИмя());
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Процедура предназначена для определения вида отправки выгружаемого элемента данных
// Вызывается из обработчиков планов обмена: ПриОтправкеДанныхГлавному(), ПриОтправкеДанныхПодчиненному()
//
// Параметры:
//  ЭлементДанных, ОтправкаЭлемента - см. описание параметров в синтаксис помощнике
//                                    для методов ПриОтправкеДанныхГлавному() и ПриОтправкеДанныхПодчиненному()
//
Процедура ПриОтправкеДанныхКорреспонденту(ЭлементДанных,
										ОтправкаЭлемента,
										Знач СозданиеНачальногоОбраза = Ложь,
										Знач Получатель = Неопределено,
										Знач Анализ = Истина
	) Экспорт
	
	Если Получатель = Неопределено Тогда
		
		//
		
	ИначеЕсли ОтправкаЭлемента = ОтправкаЭлементаДанных.Удалить
		ИЛИ ОтправкаЭлемента = ОтправкаЭлементаДанных.Игнорировать Тогда
		
		// Стандартную обработку не переопределяем
		
	ИначеЕсли ОбменДаннымиПовтИсп.ЭтоУзелОбменаДаннымиБСП(Получатель.Ссылка) Тогда
		
		ПриОтправкеДанных(ЭлементДанных, ОтправкаЭлемента, Получатель.Ссылка, СозданиеНачальногоОбраза, Анализ);
		
	КонецЕсли;
	
	Если Анализ Тогда
		Возврат;
	КонецЕсли;
	
	// Фиксируем выгруженные предопределенные данные (только для РИБ)
	Если Не СозданиеНачальногоОбраза
		И ОбщегоНазначенияКлиентСервер.ЭтоПлатформа83БезРежимаСовместимости()
		И ОтправкаЭлемента <> ОтправкаЭлементаДанных.Игнорировать
		И ОбменДаннымиПовтИсп.ЭтоУзелРаспределеннойИнформационнойБазы(Получатель.Ссылка)
		И ТипЗнч(ЭлементДанных) <> Тип("УдалениеОбъекта")
		Тогда
		
		ИмяБазовогоТипа = ОбщегоНазначения.ИмяБазовогоТипаПоОбъектуМетаданных(ЭлементДанных.Метаданные());
		
		Если ИмяБазовогоТипа = ОбщегоНазначения.ИмяТипаСправочники()
			ИЛИ ИмяБазовогоТипа = ОбщегоНазначения.ИмяТипаПланыВидовХарактеристик()
			ИЛИ ИмяБазовогоТипа = ОбщегоНазначения.ИмяТипаПланыСчетов()
			ИЛИ ИмяБазовогоТипа = ОбщегоНазначения.ИмяТипаПланыВидовРасчета() Тогда
			
			Если ЭлементДанных.Предопределенный Тогда
				
				ОбменДаннымиВызовСервера.ДополнитьПриоритетныеДанныеОбмена(ЭлементДанных.Ссылка);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура является обработчиком одноименного события, возникающего при обмене данными в распределенной информационной базе.
//
// Параметры:
// см. описание обработчика события ПриПолученииДанныхОтГлавного() в синтаксис-помощнике.
// 
Процедура ПриПолученииДанныхОтГлавногоВНачале(ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад, Отправитель) Экспорт
	
	Если ОбменДаннымиВызовСервера.РежимЗагрузкиСообщенияОбменаДаннымиПередЗапуском(
			"ЗагрузкаПараметровРаботыПрограммы") Тогда
		
		// В режиме загрузки параметров работы программы игнорируем получение всех данных.
		ПолучениеЭлемента = ПолучениеЭлементаДанных.Игнорировать;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура предназначена для выполнения проверок на наличие коллизий запрета загрузки и изменения данных
// Вызывается из обработчика плана обмена: ПриПолученииДанныхОтГлавного
//
// Параметры:
// см. описание обработчика события ПриПолученииДанныхОтГлавного() в синтаксис-помощнике.
// 
Процедура ПриПолученииДанныхОтГлавногоВКонце(ЭлементДанных, ПолучениеЭлемента, Знач Отправитель) Экспорт
	
	// Проверка на запрет загрузки по дате запрета
	ПроверитьНаличиеЗапретаЗагрузкиПоДате(ЭлементДанных, ПолучениеЭлемента, Отправитель);
	
	Если ПолучениеЭлемента = ПолучениеЭлементаДанных.Игнорировать Тогда
		Возврат;
	КонецЕсли;
	
	// Проверка на коллизию изменения данных
	ПроверитьКоллизиюИзмененийДанных(ЭлементДанных, ПолучениеЭлемента, Отправитель, Истина);
	
КонецПроцедуры

// Процедура предназначена для выполнения проверок на наличие коллизий запрета загрузки и изменения данных
// Вызывается из обработчика плана обмена: ПриПолученииДанныхОтПодчиненного
//
// Параметры:
// см. описание обработчика события ПриПолученииДанныхОтПодчиненного() в синтаксис-помощнике.
// 
Процедура ПриПолученииДанныхОтПодчиненногоВКонце(ЭлементДанных, ПолучениеЭлемента, Знач Отправитель) Экспорт
	
	// Проверка на запрет загрузки по дате запрета
	ПроверитьНаличиеЗапретаЗагрузкиПоДате(ЭлементДанных, ПолучениеЭлемента, Отправитель);
	
	Если ПолучениеЭлемента = ПолучениеЭлементаДанных.Игнорировать Тогда
		Возврат;
	КонецЕсли;
	
	// Проверка на коллизию изменения данных
	ПроверитьКоллизиюИзмененийДанных(ЭлементДанных, ПолучениеЭлемента, Отправитель, Ложь);
	
КонецПроцедуры

// Регистрирует изменение одного элемента данных для последующей отправки в адрес узла-получателя.
// Элемент данных будет зарегистрирован только в том случае, если он соответствует фильтрам правил регистрации 
// объектов,установленным в свойствах узла-получателя.
// Элементы данных, которые выгружаются при необходимости, регистрируются безусловно.
// Объект УдалениеОбъекта регистрируется безусловно.
//
// Параметры:
//     Получатель – ПланОбменаСсылка          – узел плана обмена, для которого выполняется регистрация изменений данных;
//     Данные     - <Данные>, УдалениеОбъекта - объект, представляющий данные, хранимые в базе данных, такой как документ,
//                                              элемент справочника, счет бухгалтерского учета, менеджер записи константы, 
//                                              набор записей регистра и т. п.
//     ПроверятьРазрешениеВыгрузки - Булево   - Необязательный флаг. Если установить в Ложь, то дополнительная проверка 
//                                              на соответствие общим настройкам узла при регистрации производится не будет.
//
Процедура ЗарегистрироватьИзмененияДанных(Знач Получатель, Знач Данные, Знач ПроверятьРазрешениеВыгрузки=Истина) Экспорт
	
	Если ТипЗнч(Данные) = Тип("УдалениеОбъекта") Тогда
		// Удаление объекта регистрируем безусловно
		ПланыОбмена.ЗарегистрироватьИзменения(Получатель, Данные);
		
	Иначе
		РежимВыгрузкиОбъекта = ОбменДаннымиПовтИсп.РежимВыгрузкиОбъекта(Данные.Метаданные().ПолноеИмя(), Получатель);
		
		Если РежимВыгрузкиОбъекта = Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьПриНеобходимости Тогда
			
			Если Данные.ЭтоНовый() Тогда
				ВызватьИсключение НСтр("ru = 'Регистрация незаписанных объектов выгружаемых по ссылке не поддерживается.'");
			КонецЕсли;
			
			НачатьТранзакцию();
			Попытка
				// Выполняем регистрацию данных на узле-получателе
				ПланыОбмена.ЗарегистрироватьИзменения(Получатель, Данные);
				
				// Для данных, выгружаемых по ссылке, дополнительно заносим сведения в фильтр разрешенных к выгрузке объектов.
				// Это нужно для того, чтобы данные прошли фильтр при выгрузке и были выгружены в сообщение обмена.
				РегистрыСведений.СоответствияОбъектовИнформационныхБаз.ДобавитьОбъектВФильтрРазрешенныхОбъектов(Данные.Ссылка, Получатель);
				
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				ВызватьИсключение;
			КонецПопытки;
			
		ИначеЕсли Не ПроверятьРазрешениеВыгрузки Тогда
			// Регистрируем безусловно
			ПланыОбмена.ЗарегистрироватьИзменения(Получатель, Данные);
			
		ИначеЕсли ВыгрузкаОбъектаРазрешена(Получатель, Данные) Тогда
			// Регистрируем, только если объект удовлетворяет общим ограничениям
			ПланыОбмена.ЗарегистрироватьИзменения(Получатель, Данные);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Обработчики подписок на события

// Только для внутреннего использования
//
Процедура ЗарегистрироватьИзмененияФильтровОграниченияМиграцииДанных(Источник, Отказ) Экспорт
	
	Если Источник.ДополнительныеСвойства.Свойство("Загрузка") Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ЭтоНовый() Тогда
		Возврат;
	ИначеЕсли Источник.ДополнительныеСвойства.Свойство("ПолучениеСообщенияОбмена") Тогда
		Возврат; // запись узла при получении сообщения обмена (универсальный обмен данными)
	ИначеЕсли Не ОбменДаннымиПовтИсп.ЭтоУзелОбменаДаннымиБСП(Источник.Ссылка) Тогда
		Возврат;
	ИначеЕсли ОбменДаннымиПовтИсп.ЭтоПредопределенныйУзелПланаОбмена(Источник.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	ИсточникСсылка = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник.Ссылка, "НомерОтправленного, НомерПринятого");
	
	Если ИсточникСсылка.НомерОтправленного <> Источник.НомерОтправленного Тогда
		Возврат; // запись узла при отправке сообщения обмена
	ИначеЕсли ИсточникСсылка.НомерПринятого <> Источник.НомерПринятого Тогда
		Возврат; // запись узла при получении сообщения обмена
	КонецЕсли;
	
	ИмяПланаОбмена = ОбменДаннымиПовтИсп.ПолучитьИмяПланаОбмена(Источник.Ссылка);
	
	// Получает реквизиты ссылочного типа, которые предположительно используются как фильтры фильтров правил регистрации
	ТаблицаРеквизитовСсылочногоТипа = ПолучитьРеквизитыОбъектаСсылочногоТипа(Источник, ИмяПланаОбмена);
	
	// Определяем признак модифицированности узла относительно выбранных реквизитов
	ОбъектМодифицирован = ОбъектМодифицированПоРеквизитам(Источник, ТаблицаРеквизитовСсылочногоТипа);
	
	Если ОбъектМодифицирован Тогда
		
		Источник.ДополнительныеСвойства.Вставить("ТаблицаРеквизитовУзла", ТаблицаРеквизитовСсылочногоТипа);
		
	КонецЕсли;
	
КонецПроцедуры

// Только для внутреннего использования
//
Процедура ПроверитьИзменениеФильтровОграниченияМиграцииДанныхПриЗаписи(Источник, Отказ) Экспорт
	
	Если Источник.ДополнительныеСвойства.Свойство("Загрузка") Тогда
		Возврат;
	КонецЕсли;
	
	ЗарегистрированныеКВыгрузкеОбъекты = Неопределено;
	Если Источник.ДополнительныеСвойства.Свойство("ЗарегистрированныеКВыгрузкеОбъекты", ЗарегистрированныеКВыгрузкеОбъекты) Тогда
		
		ОбменДаннымиВызовСервера.ОбновитьКэшМеханизмаРегистрацииОбъектов();
		
		Для Каждого Объект Из ЗарегистрированныеКВыгрузкеОбъекты Цикл
			
			Если Не ВыгрузкаОбъектаРазрешена(Источник.Ссылка, Объект) Тогда
				
				ПланыОбмена.УдалитьРегистрациюИзменений(Источник.Ссылка, Объект);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	ТаблицаРеквизитовСсылочногоТипа = Неопределено;
	Если Источник.ДополнительныеСвойства.Свойство("ТаблицаРеквизитовУзла", ТаблицаРеквизитовСсылочногоТипа) Тогда
		
		// Выполняем регистрацию выбранных объектов ссылочного типа на текущем узле без использования ПРО
		ВыполнитьРегистрациюОбъектовСсылочногоТипаПоСвойствамУзла(Источник, ТаблицаРеквизитовСсылочногоТипа);
		
		// Обновляем повторноиспользуемые значения механизма
		ОбменДаннымиВызовСервера.СброситьКэшМеханизмаРегистрацииОбъектов();
		
	КонецЕсли;
	
КонецПроцедуры

// Только для внутреннего использования
//
Процедура ВключитьИспользованиеПланаОбмена(Источник, Отказ) Экспорт
	
	Если Источник.ЭтоНовый() И ОбменДаннымиПовтИсп.ЭтоУзелРазделенногоОбменаДаннымиБСП(Источник.Ссылка) Тогда
		
		// кеш открытых сеансов для МРО стал неактуальным
		ОбменДаннымиВызовСервера.СброситьКэшМеханизмаРегистрацииОбъектов();
		
	КонецЕсли;
	
КонецПроцедуры

// Только для внутреннего использования
//
Процедура ОтключитьИспользованиеПланаОбмена(Источник, Отказ) Экспорт
	
	Если ОбменДаннымиПовтИсп.ЭтоУзелРазделенногоОбменаДаннымиБСП(Источник.Ссылка) Тогда
		
		// кеш открытых сеансов для МРО стал неактуальным
		ОбменДаннымиВызовСервера.СброситьКэшМеханизмаРегистрацииОбъектов();
		
	КонецЕсли;
	
КонецПроцедуры

// Только для внутреннего использования
//
Процедура ПроверитьВозможностьИзмененияНастроекОбменаДанными(Источник, Отказ) Экспорт
	
	Если Источник.ДополнительныеСвойства.Свойство("Загрузка") Тогда
		Возврат;
	КонецЕсли;
	
	Если  Не Источник.ДополнительныеСвойства.Свойство("ПолучениеСообщенияОбмена")
		И Не Источник.ЭтоНовый()
		И Не ОбменДаннымиПовтИсп.ЭтоПредопределенныйУзелПланаОбмена(Источник.Ссылка)
		И ОбменДаннымиПовтИсп.ЭтоУзелОбменаДаннымиБСП(Источник.Ссылка)
		И ДанныеРазличаются(Источник, Источник.Ссылка.ПолучитьОбъект(),, "НомерОтправленного, НомерПринятого, ПометкаУдаления, Код, Наименование")
		И ОбменДаннымиВызовСервера.ИзмененияЗарегистрированы(Источник.Ссылка)
		Тогда
		
		СохранитьРазрешенныеКВыгрузкеОбъекты(Источник);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СохранитьРазрешенныеКВыгрузкеОбъекты(УзелОбъект)
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗарегистрированныеДанные = Новый Массив;
	СоставПланаОбмена = УзелОбъект.Метаданные().Состав;
	
	Запрос = Новый Запрос;
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	*
	|ИЗ
	|	[Таблица].Изменения КАК ТаблицаИзменений
	|ГДЕ
	|	ТаблицаИзменений.Узел = &Узел";
	Запрос.УстановитьПараметр("Узел", УзелОбъект.Ссылка);
	
	Для Каждого ЭлементСостава Из СоставПланаОбмена Цикл
		
		Если ЭлементСостава.Авторегистрация = АвтоРегистрацияИзменений.Разрешить Тогда
			Продолжить;
		КонецЕсли;
		
		МетаданныеЭлемента = ЭлементСостава.Метаданные;
		ПолноеИмяОбъектаМетаданных = МетаданныеЭлемента.ПолноеИмя();
		
		Запрос.Текст = СтрЗаменить(ТекстЗапроса, "[Таблица]", ПолноеИмяОбъектаМетаданных);
		
		Результат = Запрос.Выполнить();
		
		Если Не Результат.Пустой() Тогда
			
			ЗарегистрированныеДанныеОдногоТипа = Результат.Выгрузить();
			
			Если ОбщегоНазначения.ЭтоОбъектСсылочногоТипа(МетаданныеЭлемента) Тогда
				
				Для Каждого Строка Из ЗарегистрированныеДанныеОдногоТипа Цикл
					
					Если ОбщегоНазначения.СсылкаСуществует(Строка.Ссылка) Тогда
						
						ОбъектСсылки = Строка.Ссылка.ПолучитьОбъект();
						
						Если ВыгрузкаОбъектаРазрешена(УзелОбъект.Ссылка, ОбъектСсылки) Тогда
							ЗарегистрированныеДанные.Добавить(ОбъектСсылки);
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
			ИначеЕсли ОбщегоНазначения.ЭтоКонстанта(МетаданныеЭлемента) Тогда
				
				МенеджерЗначенияКонстанты = Константы[МетаданныеЭлемента.Имя].СоздатьМенеджерЗначения();
				Если ВыгрузкаОбъектаРазрешена(УзелОбъект.Ссылка, МенеджерЗначенияКонстанты) Тогда
					ЗарегистрированныеДанные.Добавить(МенеджерЗначенияКонстанты);
				КонецЕсли;
				
			Иначе //Регистр или последовательность
				
				Для Каждого Строка Из ЗарегистрированныеДанныеОдногоТипа Цикл
					
					НаборЗаписей = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ПолноеИмяОбъектаМетаданных).СоздатьНаборЗаписей();
					
					Для Каждого ЭлементОтбора Из НаборЗаписей.Отбор Цикл
						
						Если ЗарегистрированныеДанныеОдногоТипа.Колонки.Найти(ЭлементОтбора.Имя) <> Неопределено Тогда
							
							НаборЗаписей.Отбор[ЭлементОтбора.Имя].Установить(Строка[ЭлементОтбора.Имя]);
							
						КонецЕсли;
						
					КонецЦикла;
					
					НаборЗаписей.Прочитать();
					
					Если ВыгрузкаОбъектаРазрешена(УзелОбъект.Ссылка, НаборЗаписей) Тогда
						ЗарегистрированныеДанные.Добавить(НаборЗаписей);
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	УзелОбъект.ДополнительныеСвойства.Вставить("ЗарегистрированныеКВыгрузкеОбъекты", ЗарегистрированныеДанные);
	
КонецПроцедуры

Функция ВыгрузкаОбъектаРазрешена(УзелОбмена, Объект)
	
	Отправка = ОтправкаЭлементаДанных.Авто;
	ПриОтправкеДанныхКорреспонденту(Объект, Отправка, , УзелОбмена);
	Возврат Отправка = ОтправкаЭлементаДанных.Авто;
КонецФункции

// Только для внутреннего использования
//
Процедура ОтменитьОтправкуДанныхУзлаВРаспределеннойИнформационнойБазе(Источник, ЭлементДанных, Игнорировать) Экспорт
	
	Игнорировать = Истина;
	
КонецПроцедуры

// Только для внутреннего использования
//
Процедура ЗарегистрироватьИзмененияОбщихДанныхУзлов(Источник, Отказ) Экспорт
	
	Если Источник.ДополнительныеСвойства.Свойство("Загрузка") Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ЭтоНовый() Тогда
		Возврат;
	ИначеЕсли Источник.ДополнительныеСвойства.Свойство("ПолучениеСообщенияОбмена") Тогда
		Возврат; // запись узла при получении сообщения обмена (универсальный обмен данными)
	ИначеЕсли Не ОбменДаннымиПовтИсп.ЭтоУзелРазделенногоОбменаДаннымиБСП(Источник.Ссылка) Тогда
		Возврат;
	ИначеЕсли Не ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
		Возврат;
	КонецЕсли;
	
	ОбщиеДанныеУзлов = ОбменДаннымиПовтИсп.ОбщиеДанныеУзлов(Источник.Ссылка);
	
	Если ПустаяСтрока(ОбщиеДанныеУзлов) Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбменДаннымиПовтИсп.ЭтоУзелРаспределеннойИнформационнойБазы(Источник.Ссылка) Тогда
		Возврат;
	ИначеЕсли ОбменДаннымиПовтИсп.ЭтоПредопределенныйУзелПланаОбмена(Источник.Ссылка) Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеРазличаются(Источник, Источник.Ссылка.ПолучитьОбъект(), ОбщиеДанныеУзлов) Тогда
		
		РегистрыСведений.ИзмененияОбщихДанныхУзлов.ЗарегистрироватьИзменения(Источник.Ссылка);
		
	КонецЕсли;
	
КонецПроцедуры

// Только для внутреннего использования
//
Процедура ОчиститьСсылкиНаУзелИнформационнойБазы(Источник, Отказ) Экспорт
	
	РегистрыСведений.РезультатыОбменаДанными.ОчиститьСсылкиНаУзелИнформационнойБазы(Источник.Ссылка);
	
	Справочники.СценарииОбменовДанными.ОчиститьСсылкиНаУзелИнформационнойБазы(Источник.Ссылка);
	
КонецПроцедуры

// Получает текущее значение набора записей в информационной базе
// 
// Параметры:
//	Данные - Набор записей регистров
// 
// Возвращаемое значение:
//	НаборЗаписей, содержащий текущее значение в информационной базе
// 
Функция ПолучитьНаборЗаписей(Знач Данные) Экспорт
	
	ОбъектМетаданных = Данные.Метаданные();
	
	НаборЗаписей = НаборЗаписейПоТипу(ОбъектМетаданных);
	
	Для Каждого ЗначениеОтбора Из Данные.Отбор Цикл
		
		Если ЗначениеОтбора.Использование = Ложь Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаОтбора = НаборЗаписей.Отбор.Найти(ЗначениеОтбора.Имя);
		СтрокаОтбора.Значение = ЗначениеОтбора.Значение;
		СтрокаОтбора.Использование = Истина;
		
	КонецЦикла;
	
	НаборЗаписей.Прочитать();
	
	Возврат НаборЗаписей;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Механизм регистрации объектов (МРО)

// Процедура механизма регистрации объектов. Предназначена для определения списка узлов получателей планов обмена
// на которых необходимо выполнить регистрацию объекта для последующей его выгрузки
// Включает в себя два последовательно работающие механизма - ВРО и ПРО.
// ВРО - механизм выборочной регистрации объектов;
// ПРО - механизм регистрации объектов по правилам регистрации;
// Вначале отрабатывает механизм ВРО, далее включается механизм ПРО.
// ВРО определяет на каких планах обмена должен быть зарегистрирован объект к выгрузке;
// ПРО определяет на каких узлах каждого плана обмена должен быть зарегистрирован объект.
//
// Параметры:
//  Объект - СправочникОбъект или ДокументОбъект - Объект для получения значений реквизитов и др. свойств
//  Отказ - Булево - флаг отказа. Если флаг отказа взведен, то процедура не выполняется
// 
Процедура МеханизмРегистрацииОбъектов(ИмяПланаОбмена,
										Объект,
										Отказ,
										РежимЗаписи = Неопределено,
										Замещение = Ложь,
										ЭтоРегистр = Ложь,
										ЭтоУдалениеОбъекта = Ложь,
										ЭтоКонстанта = Ложь)
	
	Попытка
		
		Если Объект.ДополнительныеСвойства.Свойство("ОтключитьМеханизмРегистрацииОбъектов") Тогда
			Возврат;
		КонецЕсли;
		
		УстановитьПривилегированныйРежим(Истина);
		
		ОбъектМетаданных = Объект.Метаданные();
		
		Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
			
			Если Не РазделенныйПланОбмена(ИмяПланаОбмена) Тогда
				
				ВызватьИсключение НСтр("ru = 'Регистрация изменений для неразделенных планов обмена не поддерживается.'");
				
			КонецЕсли;
			
			Если ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
				
				Если Не РазделенныеДанные(ОбъектМетаданных) Тогда
					
					ВызватьИсключение НСтр("ru = 'Регистрация изменений неразделенных данных в разделенном режиме.'");
					
				КонецЕсли;
				
			Иначе
				
				Если РазделенныеДанные(ОбъектМетаданных) Тогда
					
					ВызватьИсключение НСтр("ru = 'Регистрация изменений разделенных данных в неразделенном режиме.'");
					
				Иначе
					
					// Для неразделенных данных в неразделенном режиме выполняем регистрацию изменений данных
					// на всех узлах разделенных планов обмена.
					// Использование механизма правил регистрации в этом режиме не поддерживается.
					
					ТекстЗапроса =
					"ВЫБРАТЬ
					|	ПланОбмена.Ссылка КАК Получатель
					|ИЗ
					|	ПланОбмена.[ИмяПланаОбмена] КАК ПланОбмена
					|ГДЕ
					|	ПланОбмена.РегистрироватьИзменения
					|	И НЕ ПланОбмена.ПометкаУдаления";
					
					ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ИмяПланаОбмена]", ИмяПланаОбмена);
					
					Запрос = Новый Запрос;
					Запрос.Текст = ТекстЗапроса;
					
					Получатели = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Получатель");
					
					Для Каждого Получатель Из Получатели Цикл
						
						Объект.ОбменДанными.Получатели.Добавить(Получатель);
						
					КонецЦикла;
					
				КонецЕсли;
				
				Возврат; // Не ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных()
			КонецЕсли;
			
		КонецЕсли;
		
		ОбменДаннымиВызовСервера.ПроверитьКэшМеханизмаРегистрацииОбъектов();
		
		Если НЕ ОбменДаннымиВызовСервера.ОбменДаннымиВключен(ИмяПланаОбмена) Тогда
			Возврат;
		КонецЕсли;
		
		// Игнорируем регистрацию объектов начального образа узла РИБ
		Если СтандартныеПодсистемыСервер.ЭтоОбъектНачальногоОбразаУзлаРИБ(ОбъектМетаданных) Тогда
			Возврат;
		КонецЕсли;
		
		// определяем необходимость регистрации объекта на узле отправителе
		Если Объект.ДополнительныеСвойства.Свойство("РегистрироватьОбъектНаУзлеОтправителе") Тогда
			Объект.ОбменДанными.Отправитель = Неопределено;
		КонецЕсли;
		
		// при физическом удалении объекта ВРО не выполняем
		ЗарегистрироватьОбъектКВыгрузке = ЭтоРегистр ИЛИ ЭтоУдалениеОбъекта ИЛИ ЭтоКонстанта;
		
		ОбъектМодифицирован = ОбъектМодифицированДляПланаОбмена(Объект, ОбъектМетаданных, ИмяПланаОбмена, РежимЗаписи, ЗарегистрироватьОбъектКВыгрузке);
		
		Если Не ОбъектМодифицирован Тогда
			
			Если ОбменДаннымиПовтИсп.АвтоРегистрацияРазрешена(ИмяПланаОбмена, ОбъектМетаданных.ПолноеИмя()) Тогда
				
				// если объект не модифицирован и он регистрируется автоматически,
				// то удаляем все узлы по авторегистрации для текущего плана обмена
				СократитьПолучателей(Объект, ВсеУзлыПланаОбмена(ИмяПланаОбмена));
				
			КонецЕсли;
			
			// объект не модифицирован относительно текущего плана обмена
			// регистрацию на узлах этого плана обмена не выполняем
			Возврат;
			
		КонецЕсли;
		
		Если Не ОбменДаннымиПовтИсп.АвтоРегистрацияРазрешена(ИмяПланаОбмена, ОбъектМетаданных.ПолноеИмя()) Тогда
			
			ПроверятьСсылку = ?(ЭтоРегистр ИЛИ ЭтоКонстанта, Ложь, Не Объект.ЭтоНовый() И Не ЭтоУдалениеОбъекта);
			
			МассивУзловРезультат = Новый Массив;
			
			ВыполнитьПравилаРегистрацииОбъектовДляПланаОбмена(МассивУзловРезультат, Объект, ИмяПланаОбмена,
				ОбъектМетаданных, ПроверятьСсылку, ЭтоРегистр, ЭтоУдалениеОбъекта, Замещение, РежимЗаписи);
			
			// обработчик "После определения получателей"
			ОбменДаннымиСервер.ПослеОпределенияПолучателей(Объект, МассивУзловРезультат, ИмяПланаОбмена);
			
			ДополнитьПолучателей(Объект, МассивУзловРезультат);
			
		КонецЕсли;
		
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Обмен данными.Правила регистрации объектов'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		Отказ = Истина;
	КонецПопытки;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Выборочная регистрация объектов (ВРО)

Функция ОбъектМодифицированДляПланаОбмена(Источник, ОбъектМетаданных, ИмяПланаОбмена, РежимЗаписи, ЗарегистрироватьОбъектКВыгрузке)
	
	Попытка
		ОбъектМодифицирован = ОбъектМодифицированДляПланаОбменаПопыткаИсключение(Источник, ОбъектМетаданных, ИмяПланаОбмена, РежимЗаписи, ЗарегистрироватьОбъектКВыгрузке);
	Исключение
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка определения модифицированности объекта: %1'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	Возврат ОбъектМодифицирован;
КонецФункции

Функция ОбъектМодифицированДляПланаОбменаПопыткаИсключение(Источник, ОбъектМетаданных, ИмяПланаОбмена, РежимЗаписи, ЗарегистрироватьОбъектКВыгрузке)
	
	Если    ЗарегистрироватьОбъектКВыгрузке
		ИЛИ Источник.ЭтоНовый()
		ИЛИ Источник.ОбменДанными.Загрузка Тогда
		
		// для наборов записей регистров,
		// при физическом удалении объектов,
		// для новых объектов,
		// для объектов записанных по обмену данными
		// регистрируем изменения всегда
		Возврат Истина;
		
	ИначеЕсли  РежимЗаписи <> Неопределено
		И ИзмененоПроведениеДокумента(Источник, РежимЗаписи) Тогда
		
		// если изменен признак документа "Проведен", то считаем документ измененным
		Возврат Истина;
	КонецЕсли;
	
	ИмяОбъекта = ОбъектМетаданных.ПолноеИмя();
	
	ТаблицаРеквизитовРегистрации = ОбменДаннымиПовтИсп.ПолучитьТаблицуРеквизитовРегистрации(ИмяОбъекта, ИмяПланаОбмена);
	
	Если ТаблицаРеквизитовРегистрации.Количество() = 0 Тогда
		
		// если правила ВРО не заданы, то считаем, что фильтра ВРО нет.
		// объект модифицирован всегда
		Возврат Истина;
		
	КонецЕсли;
	
	Для Каждого СтрокаТаблицыРеквизитовРегистрации ИЗ ТаблицаРеквизитовРегистрации Цикл
		
		ЕстьИзмененияВерсийОбъектов = ОпределитьИзмененияВерсийОбъекта(Источник, СтрокаТаблицыРеквизитовРегистрации);
		
		Если ЕстьИзмененияВерсийОбъектов Тогда
			
			Возврат Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// если дошли до конца, то объект не изменился по реквизитам регистрации;
	// регистрация на узлах не нужна
	Возврат Ложь;
КонецФункции

Функция ОбъектМодифицированПоРеквизитам(Источник, ТаблицаРеквизитовСсылочногоТипа)
	
	Для Каждого СтрокаТаблицы ИЗ ТаблицаРеквизитовСсылочногоТипа Цикл
		
		ЕстьИзмененияВерсийОбъектов = ОпределитьИзмененияВерсийОбъекта(Источник, СтрокаТаблицы);
		
		Если ЕстьИзмененияВерсийОбъектов Тогда
			
			Возврат Истина;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
КонецФункции

Функция ОпределитьИзмененияВерсийОбъекта(Объект, СтрокаТаблицыРеквизитовРегистрации)
	
	Если ПустаяСтрока(СтрокаТаблицыРеквизитовРегистрации.ИмяТабличнойЧасти) Тогда // реквизиты Шапки объекта
		
		ТаблицаРеквизитовРегистрацииВерсияОбъектаДоИзменения = ПолучитьТаблицуРеквизитовРегистрацииШапкиДоИзменения(Объект, СтрокаТаблицыРеквизитовРегистрации);
		
		ТаблицаРеквизитовРегистрацииВерсияОбъектаПослеИзменения = ПолучитьТаблицуРеквизитовРегистрацииШапкиПослеИзменения(Объект, СтрокаТаблицыРеквизитовРегистрации);
		
	Иначе // реквизиты ТЧ объекта
		
		ТаблицаРеквизитовРегистрацииВерсияОбъектаДоИзменения = ПолучитьТаблицуРеквизитовРегистрацииТабличнойЧастиДоИзменения(Объект, СтрокаТаблицыРеквизитовРегистрации);
		
		ТаблицаРеквизитовРегистрацииВерсияОбъектаПослеИзменения = ПолучитьТаблицуРеквизитовРегистрацииТабличнойЧастиПослеИзменения(Объект, СтрокаТаблицыРеквизитовРегистрации);
		
	КонецЕсли;
	
	Возврат Не ТаблицыРеквизитовРегистрацииОдинаковые(ТаблицаРеквизитовРегистрацииВерсияОбъектаДоИзменения, ТаблицаРеквизитовРегистрацииВерсияОбъектаПослеИзменения, СтрокаТаблицыРеквизитовРегистрации);
	
КонецФункции

Функция ПолучитьТаблицуРеквизитовРегистрацииШапкиДоИзменения(Объект, СтрокаТаблицыРеквизитовРегистрации)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ " + СтрокаТаблицыРеквизитовРегистрации.РеквизитыРегистрации 
	  + " ИЗ " + СтрокаТаблицыРеквизитовРегистрации.ИмяОбъекта + " КАК ТекущийОбъект
	|ГДЕ
	|   ТекущийОбъект.Ссылка = &Ссылка
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ПолучитьТаблицуРеквизитовРегистрацииТабличнойЧастиДоИзменения(Объект, СтрокаТаблицыРеквизитовРегистрации)
	
	ТекстЗапроса = "
	|ВЫБРАТЬ "+ СтрокаТаблицыРеквизитовРегистрации.РеквизитыРегистрации
	+ " ИЗ " + СтрокаТаблицыРеквизитовРегистрации.ИмяОбъекта 
	+ "." + СтрокаТаблицыРеквизитовРегистрации.ИмяТабличнойЧасти + " КАК ТекущийОбъектИмяТабличнойЧасти
	|ГДЕ
	|   ТекущийОбъектИмяТабличнойЧасти.Ссылка = &Ссылка
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ПолучитьТаблицуРеквизитовРегистрацииШапкиПослеИзменения(Объект, СтрокаТаблицыРеквизитовРегистрации)
	
	СтруктураРеквизитовРегистрации = СтрокаТаблицыРеквизитовРегистрации.СтруктураРеквизитовРегистрации;
	
	ТаблицаРеквизитовРегистрации = Новый ТаблицаЗначений;
	
	Для Каждого РеквизитРегистрации ИЗ СтруктураРеквизитовРегистрации Цикл
		
		ТаблицаРеквизитовРегистрации.Колонки.Добавить(РеквизитРегистрации.Ключ);
		
	КонецЦикла;
	
	СтрокаТаблицы = ТаблицаРеквизитовРегистрации.Добавить();
	
	Для Каждого РеквизитРегистрации ИЗ СтруктураРеквизитовРегистрации Цикл
		
		СтрокаТаблицы[РеквизитРегистрации.Ключ] = Объект[РеквизитРегистрации.Ключ];
		
	КонецЦикла;
	
	Возврат ТаблицаРеквизитовРегистрации;
КонецФункции

Функция ПолучитьТаблицуРеквизитовРегистрацииТабличнойЧастиПослеИзменения(Объект, СтрокаТаблицыРеквизитовРегистрации)
	
	ТаблицаРеквизитовРегистрации = Объект[СтрокаТаблицыРеквизитовРегистрации.ИмяТабличнойЧасти].Выгрузить(, СтрокаТаблицыРеквизитовРегистрации.РеквизитыРегистрации);
	
	Возврат ТаблицаРеквизитовРегистрации;
	
КонецФункции

Функция ТаблицыРеквизитовРегистрацииОдинаковые(Таблица1, Таблица2, СтрокаТаблицыРеквизитовРегистрации)
	
	ДобавитьКолонкуСоЗначениемВТаблицу(Таблица1, +1);
	ДобавитьКолонкуСоЗначениемВТаблицу(Таблица2, -1);
	
	ТаблицаРезультат = Таблица1.Скопировать();
	
	ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Таблица2, ТаблицаРезультат);
	
	ТаблицаРезультат.Свернуть(СтрокаТаблицыРеквизитовРегистрации.РеквизитыРегистрации, "ИтераторТаблицыРеквизитовРегистрации");
	
	КоличествоОдинаковыхСтрок = ТаблицаРезультат.НайтиСтроки(Новый Структура ("ИтераторТаблицыРеквизитовРегистрации", 0)).Количество();
	
	КоличествоСтрокТаблицы = ТаблицаРезультат.Количество();
	
	Возврат КоличествоОдинаковыхСтрок = КоличествоСтрокТаблицы;
	
КонецФункции

Функция ИзмененоПроведениеДокумента(Источник, РежимЗаписи)
	
	Возврат (Источник.Проведен И РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения)
	 ИЛИ (НЕ Источник.Проведен И РежимЗаписи = РежимЗаписиДокумента.Проведение);
	
КонецФункции

Процедура ДобавитьКолонкуСоЗначениемВТаблицу(Таблица, ЗначениеИтератора)
	
	Таблица.Колонки.Добавить("ИтераторТаблицыРеквизитовРегистрации");
	
	Таблица.ЗаполнитьЗначения(ЗначениеИтератора, "ИтераторТаблицыРеквизитовРегистрации");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Правила регистрации объектов (ПРО)

Процедура ВыполнитьПравилаРегистрацииОбъектовДляПланаОбмена(МассивУзловРезультат,
															Объект,
															ИмяПланаОбмена,
															ОбъектМетаданных,
															ПроверятьСсылку = Ложь,
															ЭтоРегистр = Ложь,
															ЭтоУдалениеОбъекта = Ложь,
															Замещение = Ложь,
															РежимЗаписи = Неопределено,
															Выгрузка = Ложь)
	Попытка
		ВыполнитьПравилаРегистрацииОбъектовДляПланаОбменаПопыткаИсключение(МассивУзловРезультат,
															Объект,
															ИмяПланаОбмена,
															ОбъектМетаданных,
															ПроверятьСсылку,
															ЭтоРегистр,
															ЭтоУдалениеОбъекта,
															Замещение,
															РежимЗаписи,
															Выгрузка);
	Исключение
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка выполнения правил регистрации объектов для плана обмена %1.
			|Описание ошибки:
			|%2'"),
			ИмяПланаОбмена,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

Процедура ВыполнитьПравилаРегистрацииОбъектовДляПланаОбменаПопыткаИсключение(МассивУзловРезультат,
															Объект,
															ИмяПланаОбмена,
															ОбъектМетаданных,
															ПроверятьСсылку,
															ЭтоРегистр,
															ЭтоУдалениеОбъекта,
															Замещение,
															РежимЗаписи,
															Выгрузка)
	
	ПравилаРегистрацииОбъекта = Новый Массив;
	
	Правила = ПравилаРегистрацииОбъекта(ИмяПланаОбмена, ОбъектМетаданных.ПолноеИмя());
	
	Для Каждого Правило Из Правила Цикл
		
		ПравилаРегистрацииОбъекта.Добавить(ПравилоРегистрацииСтруктурой(Правило, Правила.Колонки));
		
	КонецЦикла;
	
	Если ПравилаРегистрацииОбъекта.Количество() = 0 Тогда // правила регистрации не заданы
		
		// если для объекта не созданы ПРО и отключена авторегистрация,
		// то регистрируем объект на всех узлах плана обмена кроме предопределенного
		Получатели = ВсеУзлыПланаОбмена(ИмяПланаОбмена);
		
		ОбщегоНазначения.ЗаполнитьМассивУникальнымиЗначениями(МассивУзловРезультат, Получатели);
		
	Иначе // последовательно выполняем правила регистрации
		
		Если ЭтоРегистр Тогда // для регистра
			
			Для Каждого ПРО Из ПравилаРегистрацииОбъекта Цикл
				
				// ОПРЕДЕЛЯЕМ ПОЛУЧАТЕЛЕЙ С РЕЖИМОМ ВЫГРУЗКИ "ПО УСЛОВИЮ"
				
				ОпределитьПолучателейПоУсловиюДляНабораЗаписей(МассивУзловРезультат, ПРО, Объект, ОбъектМетаданных, ИмяПланаОбмена, Замещение, Выгрузка);
				
				Если ЗначениеЗаполнено(ПРО.ИмяРеквизитаФлага) Тогда
					
					// ОПРЕДЕЛЯЕМ ПОЛУЧАТЕЛЕЙ С РЕЖИМОМ ВЫГРУЗКИ "ВСЕГДА"
					
					#Если ВнешнееСоединение ИЛИ ТолстыйКлиентОбычноеПриложение Тогда
						
						Получатели = ОбменДаннымиВызовСервера.ПолучитьМассивУзловДляРегистрацииВыгружатьВсегда(ИмяПланаОбмена, ПРО.ИмяРеквизитаФлага);
						
					#Иначе
						
						УстановитьПривилегированныйРежим(Истина);
						Получатели = ПолучитьМассивУзловДляРегистрацииВыгружатьВсегда(ИмяПланаОбмена, ПРО.ИмяРеквизитаФлага);
						УстановитьПривилегированныйРежим(Ложь);
						
					#КонецЕсли
					
					ОбщегоНазначения.ЗаполнитьМассивУникальнымиЗначениями(МассивУзловРезультат, Получатели);
					
					// ОПРЕДЕЛЯЕМ ПОЛУЧАТЕЛЕЙ С РЕЖИМОМ ВЫГРУЗКИ "ПРИ НЕОБХОДИМОСТИ"
					// для наборов записей выполнение регистрации "при необходимости" не имеет физического смысла
					
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе // для ссылочного типа
			
			Для Каждого ПРО Из ПравилаРегистрацииОбъекта Цикл
				
				// ОПРЕДЕЛЯЕМ ПОЛУЧАТЕЛЕЙ С РЕЖИМОМ ВЫГРУЗКИ "ПО УСЛОВИЮ"
				
				ОпределитьПолучателейПоУсловию(МассивУзловРезультат, ПРО, Объект, ОбъектМетаданных, ИмяПланаОбмена, ПроверятьСсылку, ЭтоУдалениеОбъекта, РежимЗаписи, Выгрузка);
				
				Если ЗначениеЗаполнено(ПРО.ИмяРеквизитаФлага) Тогда
					
					// ОПРЕДЕЛЯЕМ ПОЛУЧАТЕЛЕЙ С РЕЖИМОМ ВЫГРУЗКИ "ВСЕГДА"
					
					#Если ВнешнееСоединение ИЛИ ТолстыйКлиентОбычноеПриложение Тогда
						
						Получатели = ОбменДаннымиВызовСервера.ПолучитьМассивУзловДляРегистрацииВыгружатьВсегда(ИмяПланаОбмена, ПРО.ИмяРеквизитаФлага);
						
					#Иначе
						
						УстановитьПривилегированныйРежим(Истина);
						Получатели = ПолучитьМассивУзловДляРегистрацииВыгружатьВсегда(ИмяПланаОбмена, ПРО.ИмяРеквизитаФлага);
						УстановитьПривилегированныйРежим(Ложь);
						
					#КонецЕсли
					
					ОбщегоНазначения.ЗаполнитьМассивУникальнымиЗначениями(МассивУзловРезультат, Получатели);
					
					// ОПРЕДЕЛЯЕМ ПОЛУЧАТЕЛЕЙ С РЕЖИМОМ ВЫГРУЗКИ "ПРИ НЕОБХОДИМОСТИ"
					
					Если Не Объект.ЭтоНовый() Тогда
						
						#Если ВнешнееСоединение ИЛИ ТолстыйКлиентОбычноеПриложение Тогда
							
							Получатели = ОбменДаннымиВызовСервера.ПолучитьМассивУзловДляРегистрацииВыгружатьПриНеобходимости(Объект.Ссылка, ИмяПланаОбмена, ПРО.ИмяРеквизитаФлага);
							
						#Иначе
							
							УстановитьПривилегированныйРежим(Истина);
							Получатели = ПолучитьМассивУзловДляРегистрацииВыгружатьПриНеобходимости(Объект.Ссылка, ИмяПланаОбмена, ПРО.ИмяРеквизитаФлага);
							УстановитьПривилегированныйРежим(Ложь);
							
						#КонецЕсли
						
						ОбщегоНазначения.ЗаполнитьМассивУникальнымиЗначениями(МассивУзловРезультат, Получатели);
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Получает массив узлов плана обмена, для которых установлен признак «Выгружать всегда»
//
// Параметры:
//  ИмяПланаОбмена    – Строка – имя плана обмена, как объекта метаданных, по которому определяются узлы
//  ИмяРеквизитаФлага – Строка – имя реквизита плана обмена, по которому устанавливается фильтр на выборку узлов 
// 
//  Возвращаемое значение:
//  Тип: Массив. Массив узлов плана обмена, для которых установлен признак «Выгружать всегда»
//
Функция ПолучитьМассивУзловДляРегистрацииВыгружатьВсегда(Знач ИмяПланаОбмена, Знач ИмяРеквизитаФлага) Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	ШапкаПланаОбмена.Ссылка КАК Узел
	|ИЗ
	|	ПланОбмена.[ИмяПланаОбмена] КАК ШапкаПланаОбмена
	|ГДЕ
	|	  ШапкаПланаОбмена.Ссылка <> &ЭтотУзел
	|	И ШапкаПланаОбмена.[ИмяРеквизитаФлага] = ЗНАЧЕНИЕ(Перечисление.РежимыВыгрузкиОбъектовОбмена.ВыгружатьВсегда)
	|	И Не ШапкаПланаОбмена.ПометкаУдаления
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ИмяПланаОбмена]",    ИмяПланаОбмена);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ИмяРеквизитаФлага]", ИмяРеквизитаФлага);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЭтотУзел", ОбменДаннымиПовтИсп.ПолучитьЭтотУзелПланаОбмена(ИмяПланаОбмена));
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Узел");
КонецФункции

// Получает массив узлов плана обмена, для которых установлен признак «Выгружать при необходимости»
//
// Параметры:
//  Ссылка – ссылка на объект ИБ, для которого необходимо получить массив узлов, в которые объект ранее выгружался
//  ИмяПланаОбмена    – Строка – имя плана обмена, как объекта метаданных, по которому определяются узлы
//  ИмяРеквизитаФлага – Строка – имя реквизита плана обмена, по которому устанавливается фильтр на выборку узлов 
// 
//  Возвращаемое значение:
//  Тип: Массив. Массив узлов плана обмена, для которых установлен признак «Выгружать при необходимости»
//
Функция ПолучитьМассивУзловДляРегистрацииВыгружатьПриНеобходимости(Ссылка, Знач ИмяПланаОбмена, Знач ИмяРеквизитаФлага) Экспорт
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ШапкаПланаОбмена.Ссылка КАК Узел
	|ИЗ
	|	ПланОбмена.[ИмяПланаОбмена] КАК ШапкаПланаОбмена
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	РегистрСведений.СоответствияОбъектовИнформационныхБаз КАК СоответствияОбъектовИнформационныхБаз
	|ПО
	|	ШапкаПланаОбмена.Ссылка = СоответствияОбъектовИнформационныхБаз.УзелИнформационнойБазы
	|	И СоответствияОбъектовИнформационныхБаз.УникальныйИдентификаторИсточника = &Объект
	|ГДЕ
	|	     ШапкаПланаОбмена.Ссылка <> &ЭтотУзел
	|	И    ШапкаПланаОбмена.[ИмяРеквизитаФлага] = ЗНАЧЕНИЕ(Перечисление.РежимыВыгрузкиОбъектовОбмена.ВыгружатьПриНеобходимости)
	|	И НЕ ШапкаПланаОбмена.ПометкаУдаления
	|	И    СоответствияОбъектовИнформационныхБаз.УникальныйИдентификаторИсточника = &Объект
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ИмяПланаОбмена]",    ИмяПланаОбмена);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ИмяРеквизитаФлага]", ИмяРеквизитаФлага);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ЭтотУзел", ОбменДаннымиПовтИсп.ПолучитьЭтотУзелПланаОбмена(ИмяПланаОбмена));
	Запрос.УстановитьПараметр("Объект",   Ссылка);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Узел");
КонецФункции

Процедура ВыполнитьПравилоРегистрацииОбъектаДляНабораЗаписей(МассивУзловРезультат,
															ПРО,
															Объект,
															ОбъектМетаданных,
															ИмяПланаОбмена,
															Замещение,
															Выгрузка)
	
	// определяем массив узлов-получателей по текущему набору записей
	ОпределитьМассивПолучателейПоНаборуЗаписей(МассивУзловРезультат, Объект, ПРО, ОбъектМетаданных, ИмяПланаОбмена, Ложь, Выгрузка);
	
	Если Замещение И Не Выгрузка Тогда
		
		СтарыйНаборЗаписей = ПолучитьНаборЗаписей(Объект);
		
		// определяем массив узлов-получателей по старому набору записей
		ОпределитьМассивПолучателейПоНаборуЗаписей(МассивУзловРезультат, СтарыйНаборЗаписей, ПРО, ОбъектМетаданных, ИмяПланаОбмена, Истина, Ложь);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьПравилоРегистрацииОбъектаДляСсылочногоТипа(МассивУзловРезультат,
															ПРО,
															Объект,
															ИмяПланаОбмена,
															ПроверятьСсылку,
															ЭтоУдалениеОбъекта,
															РежимЗаписи,
															Выгрузка)
	
	// ПРОБ - Правила регистрации по свойствам Объекта
	// ПРОП - Правила регистрации по свойствам Плана обмена
	// ПРО = ПРОБ <И> ПРОП
	
	// ПРОБ
	Если  Не ПРО.ПравилоПоСвойствамОбъектаПустое
		И Не ОбъектПрошелФильтрПравилРегистрацииПоСвойствам(ПРО, Объект, ПроверятьСсылку, РежимЗаписи) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	// ПРОП
	// определяем узлы для регистрации объекта
	ОпределитьМассивУзловДляОбъекта(МассивУзловРезультат, Объект, ИмяПланаОбмена, ПРО, ЭтоУдалениеОбъекта, ПроверятьСсылку, Выгрузка);
	
КонецПроцедуры

Процедура ОпределитьПолучателейПоУсловию(МассивУзловРезультат,
										ПРО,
										Объект,
										ОбъектМетаданных,
										ИмяПланаОбмена,
										ПроверятьСсылку,
										ЭтоУдалениеОбъекта,
										РежимЗаписи,
										Выгрузка)
	
	// {Обработчик: Перед обработкой} Начало
	Отказ = Ложь;
	
	ВыполнитьОбработчикПРОПередОбработкой(ПРО, Отказ, Объект, ОбъектМетаданных, Выгрузка);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	// {Обработчик: Перед обработкой} Окончание
	
	Получатели = Новый Массив;
	
	ВыполнитьПравилоРегистрацииОбъектаДляСсылочногоТипа(Получатели, ПРО, Объект, ИмяПланаОбмена, ПроверятьСсылку, ЭтоУдалениеОбъекта, РежимЗаписи, Выгрузка);
	
	// {Обработчик: После обработки} Начало
	Отказ = Ложь;
	
	ВыполнитьОбработчикПРОПослеОбработки(ПРО, Отказ, Объект, ОбъектМетаданных, Получатели, Выгрузка);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	// {Обработчик: После обработки} Окончание
	
	ОбщегоНазначения.ЗаполнитьМассивУникальнымиЗначениями(МассивУзловРезультат, Получатели);
	
КонецПроцедуры

Процедура ОпределитьПолучателейПоУсловиюДляНабораЗаписей(МассивУзловРезультат,
														ПРО,
														Объект,
														ОбъектМетаданных,
														ИмяПланаОбмена,
														Замещение,
														Выгрузка)
	
	// {Обработчик: Перед обработкой} Начало
	Отказ = Ложь;
	
	ВыполнитьОбработчикПРОПередОбработкой(ПРО, Отказ, Объект, ОбъектМетаданных, Выгрузка);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	// {Обработчик: Перед обработкой} Окончание
	
	Получатели = Новый Массив;
	
	ВыполнитьПравилоРегистрацииОбъектаДляНабораЗаписей(Получатели, ПРО, Объект, ОбъектМетаданных, ИмяПланаОбмена, Замещение, Выгрузка);
	
	// {Обработчик: После обработки} Начало
	Отказ = Ложь;
	
	ВыполнитьОбработчикПРОПослеОбработки(ПРО, Отказ, Объект, ОбъектМетаданных, Получатели, Выгрузка);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	// {Обработчик: После обработки} Окончание
	
	ОбщегоНазначения.ЗаполнитьМассивУникальнымиЗначениями(МассивУзловРезультат, Получатели);
	
КонецПроцедуры

Процедура ОпределитьМассивУзловДляОбъекта(МассивУзловРезультат,
										Источник,
										ИмяПланаОбмена,
										ПРО,
										ЭтоУдалениеОбъекта,
										ПроверятьСсылку,
										Выгрузка)
	
	// получаем структуру значений свойств для объекта
	ЗначенияСвойствОбъекта = ПолучитьЗначенияСвойствДляОбъекта(Источник, ПРО);
	
	// определяем массив узлов для регистрации объекта
	МассивУзлов = ОпределитьМассивУзловПоЗначениямСвойств(ЗначенияСвойствОбъекта, ПРО, ИмяПланаОбмена, Источник, Выгрузка);
	
	// добавляем узлы для регистрации
	ОбщегоНазначения.ЗаполнитьМассивУникальнымиЗначениями(МассивУзловРезультат, МассивУзлов);
	
	Если ПроверятьСсылку Тогда
		
		// получаем структуру значений свойств для ссылки
		#Если ВнешнееСоединение ИЛИ ТолстыйКлиентОбычноеПриложение Тогда
			
			ЗначенияСвойствСсылки = ОбменДаннымиВызовСервера.ПолучитьЗначенияСвойствДляСсылки(Источник.Ссылка, ПРО.СвойстваОбъекта, ПРО.СвойстваОбъектаСтрокой, ПРО.ОбъектМетаданныхИмя);
			
		#Иначе
			
			УстановитьПривилегированныйРежим(Истина);
			ЗначенияСвойствСсылки = ПолучитьЗначенияСвойствДляСсылки(Источник.Ссылка, ПРО.СвойстваОбъекта, ПРО.СвойстваОбъектаСтрокой, ПРО.ОбъектМетаданныхИмя);
			УстановитьПривилегированныйРежим(Ложь);
			
		#КонецЕсли
		
		// определяем массив узлов для регистрации ссылки
		МассивУзлов = ОпределитьМассивУзловПоЗначениямСвойствДополнительный(ЗначенияСвойствСсылки, ПРО, ИмяПланаОбмена, Источник);
		
		// добавляем узлы для регистрации
		ОбщегоНазначения.ЗаполнитьМассивУникальнымиЗначениями(МассивУзловРезультат, МассивУзлов);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОпределитьМассивПолучателейПоНаборуЗаписей(МассивУзловРезультат,
													НаборЗаписей,
													ПРО,
													ОбъектМетаданных,
													ИмяПланаОбмена,
													ЭтоВерсияОбъектаДоИзменения,
													Выгрузка)
	
	// получаем значение регистратора из отбора для набора записей
	Регистратор = Неопределено;
	
	ЭлементОтбора = НаборЗаписей.Отбор.Найти("Регистратор");
	
	ЕстьРегистратор = ЭлементОтбора <> Неопределено;
	
	Если ЕстьРегистратор Тогда
		
		Регистратор = ЭлементОтбора.Значение;
		
	КонецЕсли;
	
	Для Каждого СтрокаНабора ИЗ НаборЗаписей Цикл
		
		ПРО_СтрокиНабора = СкопироватьСтруктуру(ПРО);
		
		Если ЕстьРегистратор И СтрокаНабора["Регистратор"] = Неопределено Тогда
			
			Если Регистратор <> Неопределено Тогда
				
				СтрокаНабора["Регистратор"] = Регистратор;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// ПРОБ
		Если Не ОбъектПрошелФильтрПравилРегистрацииПоСвойствам(ПРО_СтрокиНабора, СтрокаНабора, Ложь) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		// ПРОП
		
		// получаем структуру значений свойств для объекта
		ЗначенияСвойствОбъекта = ПолучитьЗначенияСвойствДляОбъекта(СтрокаНабора, ПРО_СтрокиНабора);
		
		Если ЭтоВерсияОбъектаДоИзменения Тогда
			
			// определяем массив узлов для регистрации объекта
			МассивУзлов = ОпределитьМассивУзловПоЗначениямСвойствДополнительный(ЗначенияСвойствОбъекта, ПРО_СтрокиНабора, ИмяПланаОбмена, СтрокаНабора);
			
		Иначе
			
			// определяем массив узлов для регистрации объекта
			МассивУзлов = ОпределитьМассивУзловПоЗначениямСвойств(ЗначенияСвойствОбъекта, ПРО_СтрокиНабора, ИмяПланаОбмена, СтрокаНабора, Выгрузка);
			
		КонецЕсли;
		
		// добавляем узлы для регистрации
		ОбщегоНазначения.ЗаполнитьМассивУникальнымиЗначениями(МассивУзловРезультат, МассивУзлов);
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает структуру со значениями свойств объекта, полученных запросом из ИБ.
// Ключ структуры – имя свойства; Значение – значение свойства объекта.
//
// Параметры:
//  Ссылка – ссылка на объект ИБ, значения свойств которого требуется получить
// 
//  Возвращаемое значение:
//  Тип: Структура. Структура со значениями свойств объекта.
//
Функция ПолучитьЗначенияСвойствДляСсылки(Ссылка, СвойстваОбъекта, Знач СвойстваОбъектаСтрокой, Знач ОбъектМетаданныхИмя) Экспорт
	
	ЗначенияСвойств = СкопироватьСтруктуру(СвойстваОбъекта);
	
	Если ЗначенияСвойств.Количество() = 0 Тогда
		
		Возврат ЗначенияСвойств; // возвращаем пустую структуру
		
	КонецЕсли;
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	|	[СвойстваОбъектаСтрокой]
	|ИЗ
	|	[ОбъектМетаданныхИмя] КАК Таблица
	|ГДЕ
	|	Таблица.Ссылка = &Ссылка
	|";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[СвойстваОбъектаСтрокой]", СвойстваОбъектаСтрокой);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ОбъектМетаданныхИмя]",    ОбъектМетаданныхИмя);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Попытка
		
		Выборка = Запрос.Выполнить().Выбрать();
		
	Исключение
		СтрокаСообщения = НСтр("ru = 'Ошибка при получении свойств ссылки. Ошибка выполнения запроса: [ОписаниеОшибки]'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "[ОписаниеОшибки]", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение СтрокаСообщения;
	КонецПопытки;
	
	Если Выборка.Следующий() Тогда
		
		Для Каждого Элемент Из ЗначенияСвойств Цикл
			
			ЗначенияСвойств[Элемент.Ключ] = Выборка[Элемент.Ключ];
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ЗначенияСвойств;
КонецФункции

Функция ОпределитьМассивУзловПоЗначениямСвойств(ЗначенияСвойств, ПРО, Знач ИмяПланаОбмена, Объект, Знач Выгрузка)
	
	ИспользоватьКэш = Истина;
	ТекстЗапроса = ПРО.ТекстЗапроса;
	
	// {Обработчик: При обработке} Начало
	Отказ = Ложь;
	
	ВыполнитьОбработчикПРОПриОбработке(Отказ, ПРО, Объект, ТекстЗапроса, ЗначенияСвойств, ИспользоватьКэш, Выгрузка);
	
	Если Отказ Тогда
		Возврат Новый Массив;
	КонецЕсли;
	// {Обработчик: При обработке} Окончание
	
	Если ИспользоватьКэш Тогда
		
		Возврат ОбменДаннымиПовтИсп.МассивУзловПоЗначениямСвойств(ЗначенияСвойств, ТекстЗапроса, ИмяПланаОбмена, ПРО.ИмяРеквизитаФлага, Выгрузка);
		
	Иначе
		
		#Если ВнешнееСоединение ИЛИ ТолстыйКлиентОбычноеПриложение Тогда
			
			Возврат ОбменДаннымиВызовСервера.МассивУзловПоЗначениямСвойств(ЗначенияСвойств, ТекстЗапроса, ИмяПланаОбмена, ПРО.ИмяРеквизитаФлага, Выгрузка);
			
		#Иначе
			
			УстановитьПривилегированныйРежим(Истина);
			Возврат МассивУзловПоЗначениямСвойств(ЗначенияСвойств, ТекстЗапроса, ИмяПланаОбмена, ПРО.ИмяРеквизитаФлага, Выгрузка);
			
		#КонецЕсли
		
	КонецЕсли;
	
КонецФункции

Функция ОпределитьМассивУзловПоЗначениямСвойствДополнительный(ЗначенияСвойств, ПРО, Знач ИмяПланаОбмена, Объект)
	
	ИспользоватьКэш = Истина;
	ТекстЗапроса = ПРО.ТекстЗапроса;
	
	// {Обработчик: При обработке (дополнительный)} Начало
	Отказ = Ложь;
	
	ВыполнитьОбработчикПРОПриОбработкеДополнительный(Отказ, ПРО, Объект, ТекстЗапроса, ЗначенияСвойств, ИспользоватьКэш);
	
	Если Отказ Тогда
		Возврат Новый Массив;
	КонецЕсли;
	// {Обработчик: При обработке (дополнительный)} Окончание
	
	Если ИспользоватьКэш Тогда
		
		Возврат ОбменДаннымиПовтИсп.МассивУзловПоЗначениямСвойств(ЗначенияСвойств, ТекстЗапроса, ИмяПланаОбмена, ПРО.ИмяРеквизитаФлага);
		
	Иначе
		
		#Если ВнешнееСоединение ИЛИ ТолстыйКлиентОбычноеПриложение Тогда
			
			Возврат ОбменДаннымиВызовСервера.МассивУзловПоЗначениямСвойств(ЗначенияСвойств, ТекстЗапроса, ИмяПланаОбмена, ПРО.ИмяРеквизитаФлага);
			
		#Иначе
			
			УстановитьПривилегированныйРежим(Истина);
			Возврат МассивУзловПоЗначениямСвойств(ЗначенияСвойств, ТекстЗапроса, ИмяПланаОбмена, ПРО.ИмяРеквизитаФлага);
			
		#КонецЕсли
		
	КонецЕсли;
	
КонецФункции

// Возвращает массив узлов плана обмена по заданным параметрам запроса и тексту запроса к таблице плана обмена
//
//
Функция МассивУзловПоЗначениямСвойств(ЗначенияСвойств, Знач ТекстЗапроса, Знач ИмяПланаОбмена, Знач ИмяРеквизитаФлага, Знач Выгрузка = Ложь) Экспорт
	
	// возвращаемое значение функции
	МассивУзловРезультат = Новый Массив;
	
	// подготавливаем запрос для получения узлов планов обмена
	Запрос = Новый Запрос;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ОбязательныеУсловия]",
				"И    ПланОбменаОсновнаяТаблица.Ссылка <> &" + ИмяПланаОбмена + "ЭтотУзел
				|И НЕ ПланОбменаОсновнаяТаблица.ПометкаУдаления
				|[УсловиеОтбораПоРеквизитуФлагу]
				|");
	//
	Если ПустаяСтрока(ИмяРеквизитаФлага) Тогда
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[УсловиеОтбораПоРеквизитуФлагу]", "");
		
	Иначе
		
		Если Выгрузка Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[УсловиеОтбораПоРеквизитуФлагу]",
				"И  (ПланОбменаОсновнаяТаблица.[ИмяРеквизитаФлага] = ЗНАЧЕНИЕ(Перечисление.РежимыВыгрузкиОбъектовОбмена.ВыгружатьПоУсловию)
				|ИЛИ ПланОбменаОсновнаяТаблица.[ИмяРеквизитаФлага] = ЗНАЧЕНИЕ(Перечисление.РежимыВыгрузкиОбъектовОбмена.ВыгружатьВручную)
				|ИЛИ ПланОбменаОсновнаяТаблица.[ИмяРеквизитаФлага] = ЗНАЧЕНИЕ(Перечисление.РежимыВыгрузкиОбъектовОбмена.ПустаяСсылка))"
			);
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[УсловиеОтбораПоРеквизитуФлагу]",
				"И  (ПланОбменаОсновнаяТаблица.[ИмяРеквизитаФлага] = ЗНАЧЕНИЕ(Перечисление.РежимыВыгрузкиОбъектовОбмена.ВыгружатьПоУсловию)
				|ИЛИ ПланОбменаОсновнаяТаблица.[ИмяРеквизитаФлага] = ЗНАЧЕНИЕ(Перечисление.РежимыВыгрузкиОбъектовОбмена.ПустаяСсылка))"
			);
		КонецЕсли;
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ИмяРеквизитаФлага]", ИмяРеквизитаФлага);
		
	КонецЕсли;
	
	// текст запроса
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр(ИмяПланаОбмена + "ЭтотУзел", ОбменДаннымиПовтИсп.ПолучитьЭтотУзелПланаОбмена(ИмяПланаОбмена));
	
	// задаем значения параметров запроса из свойств объекта
	Для Каждого Элемент Из ЗначенияСвойств Цикл
		
		Запрос.УстановитьПараметр("СвойствоОбъекта_" + Элемент.Ключ, Элемент.Значение);
		
	КонецЦикла;
	
	Попытка
		
		МассивУзловРезультат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		
	Исключение
		СтрокаСообщения = НСтр("ru = 'Ошибка при получении списка узлов получателей. Ошибка выполнения запроса: [ОписаниеОшибки]'");
		СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "[ОписаниеОшибки]", ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ВызватьИсключение СтрокаСообщения;
	КонецПопытки;
	
	Возврат МассивУзловРезультат;
КонецФункции

Функция ПолучитьЗначенияСвойствДляОбъекта(Объект, ПРО)
	
	ЗначенияСвойств = Новый Структура;
	
	Для Каждого Элемент ИЗ ПРО.СвойстваОбъекта Цикл
		
		ЗначенияСвойств.Вставить(Элемент.Ключ, ПолучитьЗначениеСвойстваОбъекта(Объект, Элемент.Значение));
		
	КонецЦикла;
	
	Возврат ЗначенияСвойств;
	
КонецФункции

Функция ПолучитьЗначениеСвойстваОбъекта(Объект, СтрокаСвойствОбъекта)
	
	Значение = Объект;
	
	МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаСвойствОбъекта, ".");
	
	// значение получаем с учетом возможного разыменования свойства
	Для Каждого ИмяСвойства ИЗ МассивПодстрок Цикл
		
		Значение = Значение[ИмяСвойства];
		
	КонецЦикла;
	
	Возврат Значение;
	
КонецФункции

// Только для внутреннего использования
//
Функция ПравилаРегистрацииОбъектовПланаОбмена(Знач ИмяПланаОбмена) Экспорт
	
	Возврат ОбменДаннымиПовтИсп.ПравилаРегистрацииОбъектовПланаОбмена(ИмяПланаОбмена);
	
КонецФункции

// Только для внутреннего использования
//
Функция ПравилаРегистрацииОбъекта(Знач ИмяПланаОбмена, Знач ПолноеИмяОбъекта) Экспорт
	
	Возврат ОбменДаннымиПовтИсп.ПравилаРегистрацииОбъекта(ИмяПланаОбмена, ПолноеИмяОбъекта);
	
КонецФункции

Функция ПравилоРегистрацииСтруктурой(Правило, Колонки)
	
	Результат = Новый Структура;
	
	Для Каждого Колонка Из Колонки Цикл
		
		Ключ = Колонка.Имя;
		Значение = Правило[Ключ];
		
		Если ТипЗнч(Значение) = Тип("ТаблицаЗначений") Тогда
			
			Результат.Вставить(Ключ, Значение.Скопировать());
			
		ИначеЕсли ТипЗнч(Значение) = Тип("ДеревоЗначений") Тогда
			
			Результат.Вставить(Ключ, Значение.Скопировать());
			
		ИначеЕсли ТипЗнч(Значение) = Тип("Структура") Тогда
			
			Результат.Вставить(Ключ, СкопироватьСтруктуру(Значение));
			
		Иначе
			
			Результат.Вставить(Ключ, Значение);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Функция РазделенныйПланОбмена(Знач ИмяПланаОбмена)
	
	Возврат ОбщегоНазначенияПовтИсп.ЭтоРазделенныйОбъектМетаданных(
		"ПланОбмена." + ИмяПланаОбмена,
		ОбщегоНазначенияПовтИсп.РазделительОсновныхДанных());
	
КонецФункции

Функция РазделенныеДанные(ОбъектМетаданных)
	
	Возврат ОбщегоНазначенияПовтИсп.ЭтоРазделенныйОбъектМетаданных(
		ОбъектМетаданных.ПолноеИмя(),
		ОбщегоНазначенияПовтИсп.РазделительОсновныхДанных());
	
КонецФункции

// Создает набор записей для регистра
//
// Параметры:
//	ОбъектМетаданных регистра - для получения набора записей
//
// Возвращаемое значение:
//	НаборЗаписей. В случае если для объекта метаданных не предусмотрено набора записей
//	вызывается исключение.
//
Функция НаборЗаписейПоТипу(ОбъектМетаданных)
	
	ИмяБазовогоТипа = ОбщегоНазначения.ИмяБазовогоТипаПоОбъектуМетаданных(ОбъектМетаданных);
	
	Если ИмяБазовогоТипа = ОбщегоНазначения.ИмяТипаРегистрыСведений() Тогда
		
		Результат = РегистрыСведений[ОбъектМетаданных.Имя].СоздатьНаборЗаписей();
		
	ИначеЕсли ИмяБазовогоТипа = ОбщегоНазначения.ИмяТипаРегистрыНакопления() Тогда
		
		Результат = РегистрыНакопления[ОбъектМетаданных.Имя].СоздатьНаборЗаписей();
		
	ИначеЕсли ИмяБазовогоТипа = ОбщегоНазначения.ИмяТипаРегистрыБухгалтерии() Тогда
		
		Результат = РегистрыБухгалтерии[ОбъектМетаданных.Имя].СоздатьНаборЗаписей();
		
	ИначеЕсли ИмяБазовогоТипа = ОбщегоНазначения.ИмяТипаРегистрыРасчета() Тогда
		
		Результат = РегистрыРасчета[ОбъектМетаданных.Имя].СоздатьНаборЗаписей();
		
	Иначе
		
		СтрокаСообщения = НСтр("ru = 'Для объекта метаданных %1 не предусмотрено набора записей.'");
		СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, ОбъектМетаданных.ПолноеИмя());
		ВызватьИсключение СтрокаСообщения;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Правила регистрации по свойствам объектов

Процедура ЗаполнитьЗначенияСвойствИзОбъекта(ДеревоЗначений, Объект)
	
	Для Каждого СтрокаДерева ИЗ ДеревоЗначений.Строки Цикл
		
		Если СтрокаДерева.ЭтоГруппа Тогда
			
			ЗаполнитьЗначенияСвойствИзОбъекта(СтрокаДерева, Объект);
			
		Иначе
			
			СтрокаДерева.ЗначениеСвойства = ПолучитьЗначениеСвойстваОбъекта(Объект, СтрокаДерева.СвойствоОбъекта);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура СоздатьДопустимыйОтборПоСвойствам(Объект, ДеревоЗначенийПриемник, ДеревоЗначенийИсточник)
	
	Для Каждого СтрокаДереваИсточника Из ДеревоЗначенийИсточник.Строки Цикл
		
		Если СтрокаДереваИсточника.ЭтоГруппа Тогда
			
			СтрокаДереваПриемника = ДеревоЗначенийПриемник.Строки.Добавить();
			
			ЗаполнитьЗначенияСвойств(СтрокаДереваПриемника, СтрокаДереваИсточника);
			
			СоздатьДопустимыйОтборПоСвойствам(Объект, СтрокаДереваПриемника, СтрокаДереваИсточника);
			
		Иначе
			
			Если ЦепочкаСвойствДействительна(Объект, СтрокаДереваИсточника.СвойствоОбъекта) Тогда
				
				СтрокаДереваПриемника = ДеревоЗначенийПриемник.Строки.Добавить();
				
				ЗаполнитьЗначенияСвойств(СтрокаДереваПриемника, СтрокаДереваИсточника);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Предназначения для получения значений констант, которые вычисляются по произвольным выражениям.
// Значения вычисляются в привилегированном режиме.
//
Процедура ПолучитьЗначенияАлгоритмовКонстант(ПРО, ДеревоЗначений)
	
	Для Каждого СтрокаДерева Из ДеревоЗначений.Строки Цикл
		
		Если СтрокаДерева.ЭтоГруппа Тогда
			
			ПолучитьЗначенияАлгоритмовКонстант(ПРО, СтрокаДерева);
			
		Иначе
			
			Если СтрокаДерева.ВидЭлементаОтбора = ОбменДаннымиСервер.ЭлементОтбораСвойствоАлгоритмЗначения() Тогда
				
				Значение = Неопределено;
				
				Попытка
					
					#Если ВнешнееСоединение ИЛИ ТолстыйКлиентОбычноеПриложение Тогда
						
						ОбменДаннымиВызовСервера.ВыполнитьОбработчикВПривилегированномРежиме(Значение, СтрокаДерева.ЗначениеКонстанты);
						
					#Иначе
						
						УстановитьПривилегированныйРежим(Истина);
						Выполнить(СтрокаДерева.ЗначениеКонстанты);
						УстановитьПривилегированныйРежим(Ложь);
						
					#КонецЕсли
					
				Исключение
					
					СтрокаСообщения = НСтр("ru = 'Ошибка алгоритма вычисления значения константы:
												|План обмена: [ИмяПланаОбмена]
												|Объект метаданных: [ОбъектМетаданныхИмя]
												|Описание ошибки: [Описание]
												|Алгоритм:
												|// {Начало алгоритма}
												|[ЗначениеКонстанты]
												|// {Окончание алгоритма}
												|'");
					СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "[ИмяПланаОбмена]",      ПРО.ИмяПланаОбмена);
					СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "[ОбъектМетаданныхИмя]", ПРО.ОбъектМетаданныхИмя);
					СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "[Описание]",            ИнформацияОбОшибке().Описание);
					СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "[ЗначениеКонстанты]",   Строка(СтрокаДерева.ЗначениеКонстанты));
					
					ВызватьИсключение СтрокаСообщения;
					
				КонецПопытки;
				
				СтрокаДерева.ЗначениеКонстанты = Значение;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ЦепочкаСвойствДействительна(Объект, Знач СтрокаСвойствОбъекта)
	
	Значение = Объект;
	
	МассивПодстрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаСвойствОбъекта, ".");
	
	// значение получаем с учетом возможного разыменования свойства
	Для Каждого ИмяСвойства ИЗ МассивПодстрок Цикл
		
		Попытка
			Значение = Значение[ИмяСвойства];
		Исключение
			Возврат Ложь;
		КонецПопытки;
		
	КонецЦикла;
	
	Возврат Истина;
КонецФункции

// Выполняем ПРОБ для ссылки и для объекта
// Результат учитываем по условию "ИЛИ"
// Если объект прошел фильтр ПРОБ по значения из ссылки,
// то ПРОБ для значений объекта уже не выполняем
//
Функция ОбъектПрошелФильтрПравилРегистрацииПоСвойствам(ПРО, Объект, ПроверятьСсылку, РежимЗаписи = Неопределено)
	
	НачальноеЗначениеСвойстваПроведен = Неопределено;
	
	ПолучитьЗначенияАлгоритмовКонстант(ПРО, ПРО.ОтборПоСвойствамОбъекта);
	
	Если РежимЗаписи <> Неопределено Тогда
		
		НачальноеЗначениеСвойстваПроведен = Объект.Проведен;
		
		Если РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
			
			Объект.Проведен = Ложь;
			
		ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			
			Объект.Проведен = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// ПРОБ по значению свойств Объекта
	Если ОбъектПроходитФильтрПРОБ(ПРО, Объект) Тогда
		
		Если НачальноеЗначениеСвойстваПроведен <> Неопределено Тогда
			
			Объект.Проведен = НачальноеЗначениеСвойстваПроведен;
			
		КонецЕсли;
		
		Возврат Истина;
		
	КонецЕсли;
	
	Если НачальноеЗначениеСвойстваПроведен <> Неопределено Тогда
		
		Объект.Проведен = НачальноеЗначениеСвойстваПроведен;
		
	КонецЕсли;
	
	Если ПроверятьСсылку Тогда
		
		// ПРОБ по значению свойств Ссылки
		Если ОбъектПроходитФильтрПРОБ(ПРО, Объект.Ссылка) Тогда
			
			Возврат Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ОбъектПроходитФильтрПРОБ(ПРО, Объект)
	
	ПРО.ОтборПоСвойствам = Обработки.ЗагрузкаПравилРегистрацииОбъектов.ИнициализацияТаблицыОтборПоСвойствамОбъекта();
	
	СоздатьДопустимыйОтборПоСвойствам(Объект, ПРО.ОтборПоСвойствам, ПРО.ОтборПоСвойствамОбъекта);
	
	ЗаполнитьЗначенияСвойствИзОбъекта(ПРО.ОтборПоСвойствам, Объект);
	
	Возврат УсловиеИстинноДляВеткиДереваЗначений(ПРО.ОтборПоСвойствам);
	
КонецФункции

// По умолчанию считаем, что элементы отбора корневой группы сравниваются по условию "И".
// Поэтому параметр ЭтоОператорИ по умолчанию принимает значение Истина
//
Функция УсловиеИстинноДляВеткиДереваЗначений(ДеревоЗначений, Знач ЭтоОператорИ = Истина)
	
	// инициализиция
	Если ЭтоОператорИ Тогда // И
		Результат = Истина;
	Иначе // ИЛИ
		Результат = Ложь;
	КонецЕсли;
	
	Для Каждого СтрокаДерева ИЗ ДеревоЗначений.Строки Цикл
		
		Если СтрокаДерева.ЭтоГруппа Тогда
			
			РезультатЭлемента = УсловиеИстинноДляВеткиДереваЗначений(СтрокаДерева, СтрокаДерева.ЭтоОператорИ);
		Иначе
			
			РезультатЭлемента = УсловиеИстинноДляЭлемента(СтрокаДерева, ЭтоОператорИ);
		КонецЕсли;
		
		Если ЭтоОператорИ Тогда // И
			
			Результат = Результат И РезультатЭлемента;
			
			Если Не Результат Тогда
				Возврат Ложь;
			КонецЕсли;
			
		Иначе // ИЛИ
			
			Результат = Результат ИЛИ РезультатЭлемента;
			
			Если Результат Тогда
				Возврат Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Функция УсловиеИстинноДляЭлемента(СтрокаДерева, ЭтоОператорИ)
	
	Перем ВидСравнения;
	
	ВидСравнения = СтрокаДерева.ВидСравнения;
	
	Попытка
		
		Если      ВидСравнения = "Равно"          Тогда Возврат СтрокаДерева.ЗначениеСвойства =  СтрокаДерева.ЗначениеКонстанты;
		ИначеЕсли ВидСравнения = "НеРавно"        Тогда Возврат СтрокаДерева.ЗначениеСвойства <> СтрокаДерева.ЗначениеКонстанты;
		ИначеЕсли ВидСравнения = "Больше"         Тогда Возврат СтрокаДерева.ЗначениеСвойства >  СтрокаДерева.ЗначениеКонстанты;
		ИначеЕсли ВидСравнения = "БольшеИлиРавно" Тогда Возврат СтрокаДерева.ЗначениеСвойства >= СтрокаДерева.ЗначениеКонстанты;
		ИначеЕсли ВидСравнения = "Меньше"         Тогда Возврат СтрокаДерева.ЗначениеСвойства <  СтрокаДерева.ЗначениеКонстанты;
		ИначеЕсли ВидСравнения = "МеньшеИлиРавно" Тогда Возврат СтрокаДерева.ЗначениеСвойства <= СтрокаДерева.ЗначениеКонстанты;
		КонецЕсли;
		
	Исключение
		
		Возврат Ложь;
		
	КонецПопытки;
	
	Возврат Ложь;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// События правил регистрации объектов (события ПРО)

Процедура ВыполнитьОбработчикПРОПередОбработкой(ПРО, Отказ, Объект, ОбъектМетаданных, Знач Выгрузка)
	
	Если ПРО.ЕстьОбработчикПередОбработкой Тогда
		
		Попытка
			Выполнить(ПРО.ПередОбработкой);
		Исключение
			СтрокаСообщения = НСтр("ru = 'Ошибка при выполнении обработчика: ""[ИмяОбработчика]"";
				|План обмена: [ИмяПланаОбмена];
				|Объект метаданных: [ОбъектМетаданныхИмя]
				|Описание ошибки: [Описание]'");
			СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "[ИмяОбработчика]",      НСтр("ru = 'Перед обработкой'"));
			СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "[ИмяПланаОбмена]",      ПРО.ИмяПланаОбмена);
			СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "[ОбъектМетаданныхИмя]", ПРО.ОбъектМетаданныхИмя);
			СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "[Описание]",            ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ВызватьИсключение СтрокаСообщения;
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьОбработчикПРОПриОбработке(Отказ, ПРО, Объект, ТекстЗапроса, ПараметрыЗапроса, ИспользоватьКэш, Знач Выгрузка)
	
	Если ПРО.ЕстьОбработчикПриОбработке Тогда
		
		Попытка
			Выполнить(ПРО.ПриОбработке);
		Исключение
			СтрокаСообщения = НСтр("ru = 'Ошибка при выполнении обработчика: ""[ИмяОбработчика]""; План обмена: [ИмяПланаОбмена]; Объект метаданных: [ОбъектМетаданныхИмя]
				|Описание ошибки: [Описание]'");
			СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "[ИмяОбработчика]",      НСтр("ru = 'При обработке'"));
			СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "[ИмяПланаОбмена]",      ПРО.ИмяПланаОбмена);
			СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "[ОбъектМетаданныхИмя]", ПРО.ОбъектМетаданныхИмя);
			СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "[Описание]",            ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ВызватьИсключение СтрокаСообщения;
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьОбработчикПРОПриОбработкеДополнительный(Отказ, ПРО, Объект, ТекстЗапроса, ПараметрыЗапроса, ИспользоватьКэш)
	
	Если ПРО.ЕстьОбработчикПриОбработкеДополнительный Тогда
		
		Попытка
			Выполнить(ПРО.ПриОбработкеДополнительный);
		Исключение
			СтрокаСообщения = НСтр("ru = 'Ошибка при выполнении обработчика: ""[ИмяОбработчика]""; План обмена: [ИмяПланаОбмена]; Объект метаданных: [ОбъектМетаданныхИмя]
				|Описание ошибки: [Описание]'");
			СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "[ИмяОбработчика]",      НСтр("ru = 'При обработке (дополнительный)'"));
			СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "[ИмяПланаОбмена]",      ПРО.ИмяПланаОбмена);
			СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "[ОбъектМетаданныхИмя]", ПРО.ОбъектМетаданныхИмя);
			СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "[Описание]",            ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ВызватьИсключение СтрокаСообщения;
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьОбработчикПРОПослеОбработки(ПРО, Отказ, Объект, ОбъектМетаданных, Получатели, Знач Выгрузка)
	
	Если ПРО.ЕстьОбработчикПослеОбработки Тогда
		
		Попытка
			Выполнить(ПРО.ПослеОбработки);
		Исключение
			СтрокаСообщения = НСтр("ru = 'Ошибка при выполнении обработчика: ""[ИмяОбработчика]""; План обмена: [ИмяПланаОбмена]; Объект метаданных: [ОбъектМетаданныхИмя]
				|Описание ошибки: [Описание]'");
			СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "[ИмяОбработчика]",      НСтр("ru = 'После обработки'"));
			СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "[ИмяПланаОбмена]",      ПРО.ИмяПланаОбмена);
			СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "[ОбъектМетаданныхИмя]", ПРО.ОбъектМетаданныхИмя);
			СтрокаСообщения = СтрЗаменить(СтрокаСообщения, "[Описание]",            ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			ВызватьИсключение СтрокаСообщения;
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры и функции

Процедура ПриОтправкеДанных(ЭлементДанных, ОтправкаЭлемента, Знач Получатель, Знач СозданиеНачальногоОбраза, Знач Анализ)
	
	Если ТипЗнч(ЭлементДанных) = Тип("УдалениеОбъекта") Тогда
		Возврат;
	КонецЕсли;
	
	// Проверяем актуальность кэша механизма регистрации объектов
	ОбменДаннымиВызовСервера.ПроверитьКэшМеханизмаРегистрацииОбъектов();
	
	РежимВыгрузкиОбъекта = ОбменДаннымиПовтИсп.РежимВыгрузкиОбъекта(ЭлементДанных.Метаданные().ПолноеИмя(), Получатель);
	
	Если РежимВыгрузкиОбъекта = Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьВсегда Тогда
		
		// Выгружаем элемент данных
		
	ИначеЕсли РежимВыгрузкиОбъекта = Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьПоУсловию
		ИЛИ РежимВыгрузкиОбъекта = Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьПриНеобходимости Тогда
		
		Если Не ДанныеСоответствуютФильтруПравилРегистрации(ЭлементДанных, Получатель) Тогда
			
			Если СозданиеНачальногоОбраза Тогда
				
				ОтправкаЭлемента = ОтправкаЭлементаДанных.Игнорировать;
				
			Иначе
				
				ОтправкаЭлемента = ОтправкаЭлементаДанных.Удалить;
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли РежимВыгрузкиОбъекта = Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьВручную Тогда
		
		Если СозданиеНачальногоОбраза Тогда
			
			ОтправкаЭлемента = ОтправкаЭлементаДанных.Игнорировать;
			
		Иначе
			
			Если ДанныеСоответствуютФильтруПравилРегистрации(ЭлементДанных, Получатель) Тогда
				
				Если Не Анализ Тогда
					
					// Удаляем регистрацию изменений данных, выгруженных вручную
					ПланыОбмена.УдалитьРегистрациюИзменений(Получатель, ЭлементДанных);
					
				КонецЕсли;
				
			Иначе
				
				ОтправкаЭлемента = ОтправкаЭлементаДанных.Игнорировать;
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли РежимВыгрузкиОбъекта = Перечисления.РежимыВыгрузкиОбъектовОбмена.НеВыгружать Тогда
		
		ОтправкаЭлемента = ОтправкаЭлементаДанных.Игнорировать;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ДанныеСоответствуютФильтруПравилРегистрации(ЭлементДанных, Знач Получатель)
	
	Результат = Истина;
	
	ИмяПланаОбмена = Получатель.Метаданные().Имя;
	
	ОбъектМетаданных = ЭлементДанных.Метаданные();
	
	ИмяБазовогоТипа = ОбщегоНазначения.ИмяБазовогоТипаПоОбъектуМетаданных(ОбъектМетаданных);
	
	Если    ИмяБазовогоТипа = ОбщегоНазначения.ИмяТипаСправочники()
		ИЛИ ИмяБазовогоТипа = ОбщегоНазначения.ИмяТипаДокументы()
		ИЛИ ИмяБазовогоТипа = ОбщегоНазначения.ИмяТипаПланыВидовХарактеристик()
		ИЛИ ИмяБазовогоТипа = ОбщегоНазначения.ИмяТипаПланыСчетов()
		ИЛИ ИмяБазовогоТипа = ОбщегоНазначения.ИмяТипаПланыВидовРасчета()
		ИЛИ ИмяБазовогоТипа = ОбщегоНазначения.ИмяТипаБизнесПроцессы()
		ИЛИ ИмяБазовогоТипа = ОбщегоНазначения.ИмяТипаЗадачи() Тогда
		
		// определяем массив узлов для регистрации объекта
		МассивУзловДляРегистрацииОбъекта = Новый Массив;
		
		ВыполнитьПравилаРегистрацииОбъектовДляПланаОбмена(МассивУзловДляРегистрацииОбъекта,
														ЭлементДанных,
														ИмяПланаОбмена,
														ОбъектМетаданных,
														Ложь,
														,
														,
														,
														,
														Истина);
		//
		
		// если в массиве нет текущего узла, то посылаем удаление объекта
		Если МассивУзловДляРегистрацииОбъекта.Найти(Получатель) = Неопределено Тогда
			
			Результат = Ложь;
			
		КонецЕсли;
		
	ИначеЕсли ИмяБазовогоТипа = ОбщегоНазначения.ИмяТипаРегистрыСведений()
		ИЛИ ИмяБазовогоТипа = ОбщегоНазначения.ИмяТипаРегистрыНакопления()
		ИЛИ ИмяБазовогоТипа = ОбщегоНазначения.ИмяТипаРегистрыБухгалтерии()
		ИЛИ ИмяБазовогоТипа = ОбщегоНазначения.ИмяТипаРегистрыРасчета() Тогда
		
		ИсключаяСвойства = ?(ИмяБазовогоТипа = ОбщегоНазначения.ИмяТипаРегистрыНакопления(), "ВидДвижения", "");
		
		ДанныеДляПроверки = НаборЗаписейПоТипу(ОбъектМетаданных);
		
		Для Каждого ЭлементОтбораИсточник Из ЭлементДанных.Отбор Цикл
			
			ЭлементОтбораПриемник = ДанныеДляПроверки.Отбор.Найти(ЭлементОтбораИсточник.Имя);
			
			ЗаполнитьЗначенияСвойств(ЭлементОтбораПриемник, ЭлементОтбораИсточник);
			
		КонецЦикла;
		
		ДанныеДляПроверки.Добавить();
		
		ОбратныйИндекс = ЭлементДанных.Количество() - 1;
		
		Пока ОбратныйИндекс >= 0 Цикл
			
			ЗаполнитьЗначенияСвойств(ДанныеДляПроверки[0], ЭлементДанных[ОбратныйИндекс],, ИсключаяСвойства);
			
			// определяем массив узлов для регистрации объекта
			МассивУзловДляРегистрацииОбъекта = Новый Массив;
			
			ВыполнитьПравилаРегистрацииОбъектовДляПланаОбмена(МассивУзловДляРегистрацииОбъекта,
															ДанныеДляПроверки,
															ИмяПланаОбмена,
															ОбъектМетаданных,
															,
															Истина,
															,
															,
															,
															Истина);
			
			// если в массиве нет текущего узла, то удаляем строку из набора
			Если МассивУзловДляРегистрацииОбъекта.Найти(Получатель) = Неопределено Тогда
				
				ЭлементДанных.Удалить(ОбратныйИндекс);
				
			КонецЕсли;
			
			ОбратныйИндекс = ОбратныйИндекс - 1;
			
		КонецЦикла;
		
		Если ЭлементДанных.Количество() = 0 Тогда
			
			Результат = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Заполняет значения реквизитов и табличных частей однотипных объектов информационной базы.
//
//  Параметры:
// Источник (обязательный) – объект информационной базы (СправочникОбъект, ДокументОбъект, ПланВидовХарактеристикОбъект и пр.)
// который является источником данных для заполнения.
//
// Приемник (обязательный) – объект информационной базы (СправочникОбъект, ДокументОбъект, ПланВидовХарактеристикОбъект и пр.)
// который будет заполнен данными источника.
//
// СписокСвойств (необязательный). Тип: Строка.
// Список свойств объекта и табличных частей, разделенных запятыми. 
// Если параметр задан, то заполнение свойств объекта будет выполняться согласно
// заданным свойствам, при этом параметр ИсключаяСвойства будет проигнорирован.
//
// ИсключаяСвойства (необязательный). Тип: Строка.
// Список свойств объекта и табличных частей, разделенных запятыми.
// Если параметр задан, то заполнение свойств объекта будет выполняться 
// для всех свойств и табличных частей, исключая заданные свойства.
//
Процедура ЗаполнитьЗначенияСвойствОбъекта(Приемник, Источник, Знач СписокСвойств = Неопределено, Знач ИсключаяСвойства = Неопределено) Экспорт
	
	Если СписокСвойств <> Неопределено Тогда
		
		СписокСвойств = СтрЗаменить(СписокСвойств, " ", "");
		
		СписокСвойств = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СписокСвойств);
		
		ОбъектМетаданных = Приемник.Метаданные();
		
		ТабличныеЧасти = ТабличныеЧастиОбъекта(ОбъектМетаданных);
		
		СписокСвойствШапки = Новый Массив;
		ИспользуемыеТабличныеЧасти = Новый Массив;
		
		Для Каждого Свойство Из СписокСвойств Цикл
			
			Если ТабличныеЧасти.Найти(Свойство) <> Неопределено Тогда
				
				ИспользуемыеТабличныеЧасти.Добавить(Свойство);
				
			Иначе
				
				СписокСвойствШапки.Добавить(Свойство);
				
			КонецЕсли;
			
		КонецЦикла;
		
		СписокСвойствШапки = СтроковыеФункцииКлиентСервер.ПолучитьСтрокуИзМассиваПодстрок(СписокСвойствШапки);
		
		ЗаполнитьЗначенияСвойств(Приемник, Источник, СписокСвойствШапки);
		
		Для Каждого ТабличнаяЧасть Из ИспользуемыеТабличныеЧасти Цикл
			
			Приемник[ТабличнаяЧасть].Загрузить(Источник[ТабличнаяЧасть].Выгрузить());
			
		КонецЦикла;
		
	ИначеЕсли ИсключаяСвойства <> Неопределено Тогда
		
		ЗаполнитьЗначенияСвойств(Приемник, Источник,, ИсключаяСвойства);
		
		ОбъектМетаданных = Приемник.Метаданные();
		
		ТабличныеЧасти = ТабличныеЧастиОбъекта(ОбъектМетаданных);
		
		Для Каждого ТабличнаяЧасть Из ТабличныеЧасти Цикл
			
			Если Найти(ИсключаяСвойства, ТабличнаяЧасть) <> 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Приемник[ТабличнаяЧасть].Загрузить(Источник[ТабличнаяЧасть].Выгрузить());
			
		КонецЦикла;
		
	Иначе
		
		ЗаполнитьЗначенияСвойств(Приемник, Источник);
		
		ОбъектМетаданных = Приемник.Метаданные();
		
		ТабличныеЧасти = ТабличныеЧастиОбъекта(ОбъектМетаданных);
		
		Для Каждого ТабличнаяЧасть Из ТабличныеЧасти Цикл
			
			Приемник[ТабличнаяЧасть].Загрузить(Источник[ТабличнаяЧасть].Выгрузить());
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыполнитьРегистрациюОбъектовСсылочногоТипаПоСвойствамУзла(Объект, ТаблицаРеквизитовСсылочногоТипа)
	
	УзелИнформационнойБазы = Объект.Ссылка;
	
	ИмяПланаОбмена = ОбменДаннымиПовтИсп.ПолучитьИмяПланаОбмена(УзелИнформационнойБазы);
	
	Для Каждого СтрокаТаблицы Из ТаблицаРеквизитовСсылочногоТипа Цикл
		
		Если ПустаяСтрока(СтрокаТаблицы.ИмяТабличнойЧасти) Тогда // реквизиты шапки
			
			Для Каждого Элемент Из СтрокаТаблицы.СтруктураРеквизитовРегистрации Цикл
				
				Ссылка = Объект[Элемент.Ключ];
				
				Если Не Ссылка.Пустая()
					И СоставПланаОбменаСодержитТип(ИмяПланаОбмена, ТипЗнч(Ссылка)) Тогда
					
					ПланыОбмена.ЗарегистрироватьИзменения(УзелИнформационнойБазы, Ссылка);
					
				КонецЕсли;
				
			КонецЦикла;
			
		Иначе // реквизиты табличной части
			
			ТабличнаяЧасть = Объект[СтрокаТаблицы.ИмяТабличнойЧасти];
			
			Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
				
				Для Каждого Элемент Из СтрокаТаблицы.СтруктураРеквизитовРегистрации Цикл
					
					Ссылка = СтрокаТабличнойЧасти[Элемент.Ключ];
					
					Если Не Ссылка.Пустая()
						И СоставПланаОбменаСодержитТип(ИмяПланаОбмена, ТипЗнч(Ссылка)) Тогда
						
						ПланыОбмена.ЗарегистрироватьИзменения(УзелИнформационнойБазы, Ссылка);
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьРеквизитыОбъектаСсылочногоТипа(Объект, ИмяПланаОбмена)
	
	// Выполняем инициализацию таблицы
	Результат = ОбменДаннымиСервер.ИнициализацияТаблицыПравилВыборочнойРегистрацииОбъектов();
	
	ОбъектМетаданных = Объект.Метаданные();
	ОбъектМетаданныхПолноеИмя = ОбъектМетаданных.ПолноеИмя();
	
	// Получаем реквизиты шапки
	Реквизиты = ПолучитьРеквизитыСсылочногоТипа(ОбъектМетаданных.Реквизиты, ИмяПланаОбмена);
	
	Если Реквизиты.Количество() > 0 Тогда
		
		СтрокаТаблицы = Результат.Добавить();
		СтрокаТаблицы.ИмяОбъекта                     = ОбъектМетаданныхПолноеИмя;
		СтрокаТаблицы.ИмяТабличнойЧасти              = "";
		СтрокаТаблицы.РеквизитыРегистрации           = КлючиСтруктурыВСтроку(Реквизиты);
		СтрокаТаблицы.СтруктураРеквизитовРегистрации = СкопироватьСтруктуру(Реквизиты);
		
	КонецЕсли;
	
	// Получаем реквизиты табличных частей
	Для Каждого ТабличнаяЧасть Из ОбъектМетаданных.ТабличныеЧасти Цикл
		
		Реквизиты = ПолучитьРеквизитыСсылочногоТипа(ТабличнаяЧасть.Реквизиты, ИмяПланаОбмена);
		
		Если Реквизиты.Количество() > 0 Тогда
			
			СтрокаТаблицы = Результат.Добавить();
			СтрокаТаблицы.ИмяОбъекта                     = ОбъектМетаданныхПолноеИмя;
			СтрокаТаблицы.ИмяТабличнойЧасти              = ТабличнаяЧасть.Имя;
			СтрокаТаблицы.РеквизитыРегистрации           = КлючиСтруктурыВСтроку(Реквизиты);
			СтрокаТаблицы.СтруктураРеквизитовРегистрации = СкопироватьСтруктуру(Реквизиты);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Функция ПолучитьРеквизитыСсылочногоТипа(Реквизиты, ИмяПланаОбмена)
	
	// возвращаемое значение функции
	Результат = Новый Структура;
	
	Для Каждого Реквизит Из Реквизиты Цикл
		
		МассивТипов = Реквизит.Тип.Типы();
		
		ЭтоСсылка = Ложь;
		
		Для Каждого Тип Из МассивТипов Цикл
			
			Если  ОбщегоНазначения.ЭтоСсылка(Тип)
				И СоставПланаОбменаСодержитТип(ИмяПланаОбмена, Тип) Тогда
				
				ЭтоСсылка = Истина;
				
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЭтоСсылка Тогда
			
			Результат.Вставить(Реквизит.Имя);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Функция СоставПланаОбменаСодержитТип(ИмяПланаОбмена, Тип)
	
	Возврат Метаданные.ПланыОбмена[ИмяПланаОбмена].Состав.Содержит(Метаданные.НайтиПоТипу(Тип));
	
КонецФункции

// Создает новый экземпляр объекта Структура, заполняет объект данными указанной структуры.
//
// Параметры:
//  СтруктураИсточник – Структура – структура, копию которой необходимо получить
// 
//  Возвращаемое значение:
//  Тип: Структура.
//
Функция СкопироватьСтруктуру(СтруктураИсточник) Экспорт
	
	СтруктураРезультат = Новый Структура;
	
	Для Каждого Элемент ИЗ СтруктураИсточник Цикл
		
		Если ТипЗнч(Элемент.Значение) = Тип("ТаблицаЗначений") Тогда
			
			СтруктураРезультат.Вставить(Элемент.Ключ, Элемент.Значение.Скопировать());
			
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("ДеревоЗначений") Тогда
			
			СтруктураРезультат.Вставить(Элемент.Ключ, Элемент.Значение.Скопировать());
			
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("Структура") Тогда
			
			СтруктураРезультат.Вставить(Элемент.Ключ, СкопироватьСтруктуру(Элемент.Значение));
			
		ИначеЕсли ТипЗнч(Элемент.Значение) = Тип("СписокЗначений") Тогда
			
			СтруктураРезультат.Вставить(Элемент.Ключ, Элемент.Значение.Скопировать());
			
		Иначе
			
			СтруктураРезультат.Вставить(Элемент.Ключ, Элемент.Значение);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтруктураРезультат;
КонецФункции

// Получает строку, содержащую ключи структуры, разделенные символом разделителя.
//
// Параметры:
//	Структура - Структура - Структура, ключи которой преобразуются в строку
//	Разделитель - Строка - Разделитель, который вставляется в строку между ключами структуры
//
// Возвращаемое значение:
//	Строка - Строка, содержащая ключи структуры разделенные резделителем
//
Функция КлючиСтруктурыВСтроку(Структура, Разделитель = ",") Экспорт
	
	Результат = "";
	
	Для Каждого Элемент Из Структура Цикл
		
		СимволРазделителя = ?(ПустаяСтрока(Результат), "", Разделитель);
		
		Результат = Результат + СимволРазделителя + Элемент.Ключ;
		
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

// Выполняет сравнение версий двух однотипных объектов.
//
//  Параметры:
// Данные1 (обязательный). Тип: 
//  СправочникОбъект,
//  ДокументОбъект,
//  ПланВидовХарактеристикОбъект,
//  ПланВидовРасчетаОбъект,
//  ПланСчетовОбъект,
//  ПланОбменаОбъект,
//  БизнесПроцессОбъект,
//  ЗадачаОбъект.
// Первая версия данных для сравнения.
//
// Данные2 (обязательный). Тип: см. тип параметра Данные1
// Вторая версия данных для сравнения.
//
// СписокСвойств (необязательный). Тип: Строка.
// Список свойств объекта и табличных частей, разделенных запятыми. 
// Если параметр задан, то сравнение версий данных будет выполняться согласно 
// заданным свойствам, при этом параметр ИсключаяСвойства будет проигнорирован.
//
// ИсключаяСвойства (необязательный). Тип: Строка.
// Список свойств объекта и табличных частей, разделенных запятыми.
// Если параметр задан, то сравнение версий данных будет выполняться 
// для всех свойств и табличных частей, исключая заданные свойства.
//
// Возвращаемое значение:
// Тип: Булево.
// Возвращает Истина, если версии данных различаются; Ложь, если версии совпадают.
//
Функция ДанныеРазличаются(Данные1, Данные2, СписокСвойств = Неопределено, ИсключаяСвойства = Неопределено) Экспорт
	
	Если ТипЗнч(Данные1) <> ТипЗнч(Данные2) Тогда
		Возврат Истина;
	КонецЕсли;
	
	ОбъектМетаданных = Данные1.Метаданные();
	
	Если ОбщегоНазначения.ЭтоСправочник(ОбъектМетаданных) Тогда
		
		Если Данные1.ЭтоГруппа Тогда
			Объект1 = Справочники[ОбъектМетаданных.Имя].СоздатьГруппу();
		Иначе
			Объект1 = Справочники[ОбъектМетаданных.Имя].СоздатьЭлемент();
		КонецЕсли;
		
		Если Данные2.ЭтоГруппа Тогда
			Объект2 = Справочники[ОбъектМетаданных.Имя].СоздатьГруппу();
		Иначе
			Объект2 = Справочники[ОбъектМетаданных.Имя].СоздатьЭлемент();
		КонецЕсли;
		
	ИначеЕсли ОбщегоНазначения.ЭтоДокумент(ОбъектМетаданных) Тогда
		
		Объект1 = Документы[ОбъектМетаданных.Имя].СоздатьДокумент();
		Объект2 = Документы[ОбъектМетаданных.Имя].СоздатьДокумент();
		
	ИначеЕсли ОбщегоНазначения.ЭтоПланВидовХарактеристик(ОбъектМетаданных) Тогда
		
		Если Данные1.ЭтоГруппа Тогда
			Объект1 = ПланыВидовХарактеристик[ОбъектМетаданных.Имя].СоздатьГруппу();
		Иначе
			Объект1 = ПланыВидовХарактеристик[ОбъектМетаданных.Имя].СоздатьЭлемент();
		КонецЕсли;
		
		Если Данные2.ЭтоГруппа Тогда
			Объект2 = ПланыВидовХарактеристик[ОбъектМетаданных.Имя].СоздатьГруппу();
		Иначе
			Объект2 = ПланыВидовХарактеристик[ОбъектМетаданных.Имя].СоздатьЭлемент();
		КонецЕсли;
		
	ИначеЕсли ОбщегоНазначения.ЭтоПланВидовРасчета(ОбъектМетаданных) Тогда
		
		Объект1 = ПланыВидовРасчета[ОбъектМетаданных.Имя].СоздатьВидРасчета();
		Объект2 = ПланыВидовРасчета[ОбъектМетаданных.Имя].СоздатьВидРасчета();
		
	ИначеЕсли ОбщегоНазначения.ЭтоПланСчетов(ОбъектМетаданных) Тогда
		
		Объект1 = ПланыСчетов[ОбъектМетаданных.Имя].СоздатьСчет();
		Объект2 = ПланыСчетов[ОбъектМетаданных.Имя].СоздатьСчет();
		
	ИначеЕсли ОбщегоНазначения.ЭтоПланОбмена(ОбъектМетаданных) Тогда
		
		Объект1 = ПланыОбмена[ОбъектМетаданных.Имя].СоздатьУзел();
		Объект2 = ПланыОбмена[ОбъектМетаданных.Имя].СоздатьУзел();
		
	ИначеЕсли ОбщегоНазначения.ЭтоБизнесПроцесс(ОбъектМетаданных) Тогда
		
		Объект1 = БизнесПроцессы[ОбъектМетаданных.Имя].СоздатьБизнесПроцесс();
		Объект2 = БизнесПроцессы[ОбъектМетаданных.Имя].СоздатьБизнесПроцесс();
		
	ИначеЕсли ОбщегоНазначения.ЭтоЗадача(ОбъектМетаданных) Тогда
		
		Объект1 = Задачи[ОбъектМетаданных.Имя].СоздатьЗадачу();
		Объект2 = Задачи[ОбъектМетаданных.Имя].СоздатьЗадачу();
		
	Иначе
		
		ВызватьИсключение НСтр("ru = 'Задано недопустимое значение параметра [1] метода ОбщегоНазначения.ЗначенияСвойствИзменены.'");
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойствОбъекта(Объект1, Данные1, СписокСвойств, ИсключаяСвойства);
	ЗаполнитьЗначенияСвойствОбъекта(Объект2, Данные2, СписокСвойств, ИсключаяСвойства);
	
	Возврат ДанныеИнформационнойБазыСтрокой(Объект1) <> ДанныеИнформационнойБазыСтрокой(Объект2);
	
КонецФункции

Функция ДанныеИнформационнойБазыСтрокой(Данные)
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	
	ЗаписатьXML(ЗаписьXML, Данные, НазначениеТипаXML.Явное);
	
	Возврат ЗаписьXML.Закрыть();
	
КонецФункции

// Возвращает массив табличных частей объекта
//
Функция ТабличныеЧастиОбъекта(ОбъектМетаданных) Экспорт
	
	Результат = Новый Массив;
	
	Для Каждого ТабличнаяЧасть Из ОбъектМетаданных.ТабличныеЧасти Цикл
		
		Результат.Добавить(ТабличнаяЧасть.Имя);
		
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

//

// Только для внутреннего использования
//
Процедура УстановитьЗначенияОтборовНаУзле(УзелПланаОбмена, Настройки) Экспорт
	
	ИмяПланаОбмена = УзелПланаОбмена.Метаданные().Имя;
	
	УстановитьЗначенияНаУзле(УзелПланаОбмена, Настройки);
	
КонецПроцедуры

// Только для внутреннего использования
//
Процедура УстановитьЗначенияПоУмолчаниюНаУзле(УзелПланаОбмена, Настройки) Экспорт
	
	ИмяПланаОбмена = УзелПланаОбмена.Метаданные().Имя;
	
	УстановитьЗначенияНаУзле(УзелПланаОбмена, Настройки);
	
КонецПроцедуры

Процедура УстановитьЗначенияНаУзле(УзелПланаОбмена, Настройки)
	
	ИмяПланаОбмена = УзелПланаОбмена.Метаданные().Имя;
	
	Для Каждого Элемент Из Настройки Цикл
		
		Ключ = Элемент.Ключ;
		Значение = Элемент.Значение;
		
		Если УзелПланаОбмена.Метаданные().Реквизиты.Найти(Ключ) = Неопределено
			И УзелПланаОбмена.Метаданные().ТабличныеЧасти.Найти(Ключ) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(Значение) = Тип("Массив") Тогда
			
			ДанныеРеквизита = ПолучитьСсылочныйТипИзПервогоРеквизитаТабличнойЧастиПланаОбмена(ИмяПланаОбмена, Ключ);
			
			Если ДанныеРеквизита = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ТаблицаУзла = УзелПланаОбмена[Ключ];
			
			ТаблицаУзла.Очистить();
			
			Для Каждого СтрокаТаблицы Из Значение Цикл
				
				Если СтрокаТаблицы.Использовать Тогда
					
					МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ДанныеРеквизита.Тип.ПривестиЗначение());
					
					ЗначениеРеквизита = МенеджерОбъекта.ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаТаблицы.УникальныйИдентификаторСсылки));
					
					ТаблицаУзла.Добавить()[ДанныеРеквизита.Имя] = ЗначениеРеквизита;
					
				КонецЕсли;
				
			КонецЦикла;
			
		ИначеЕсли ТипЗнч(Значение) = Тип("Структура") Тогда
			
			ЗаполнитьТаблицуУзлаПланаОбмена(УзелПланаОбмена, Значение, Ключ);
			
		Иначе // примитивные типы
			
			УзелПланаОбмена[Ключ] = Значение;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьТаблицуУзлаПланаОбмена(Узел, СтруктураТабличнойЧасти, ИмяТаблицы)
	
	ТаблицаУзла = Узел[ИмяТаблицы];
	
	ТаблицаУзла.Очистить();
	
	Для Каждого Элемент ИЗ СтруктураТабличнойЧасти Цикл
		
		УстановитьКоличествоСтрокТаблицы(ТаблицаУзла, Элемент.Значение.Количество());
		
		ТаблицаУзла.ЗагрузитьКолонку(Элемент.Значение, Элемент.Ключ);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьКоличествоСтрокТаблицы(Таблица, КоличествоСтрок)
	
	Пока Таблица.Количество() < КоличествоСтрок Цикл
		
		Таблица.Добавить();
		
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьСсылочныйТипИзПервогоРеквизитаТабличнойЧастиПланаОбмена(Знач ИмяПланаОбмена, Знач ИмяТабличнойЧасти)
	
	ТабличнаяЧасть = Метаданные.ПланыОбмена[ИмяПланаОбмена].ТабличныеЧасти[ИмяТабличнойЧасти];
	
	Для Каждого Реквизит Из ТабличнаяЧасть.Реквизиты Цикл
		
		Тип = Реквизит.Тип.Типы()[0];
		
		Если ОбщегоНазначения.ЭтоСсылка(Тип) Тогда
			
			Возврат Новый Структура("Имя, Тип", Реквизит.Имя, Реквизит.Тип);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Неопределено;
КонецФункции

Процедура ПроверитьУстранениеПроблемыДокументаОбработкаПроведения(Источник, Отказ, РежимПроведения) Экспорт
	
	РегистрыСведений.РезультатыОбменаДанными.ЗарегистрироватьУстранениеПроблемы(Источник, Перечисления.ТипыПроблемОбменаДанными.НепроведенныйДокумент);
	
КонецПроцедуры

Процедура ПроверитьУстранениеПроблемыОбъектаПриЗаписи(Источник, Отказ) Экспорт
	
	РегистрыСведений.РезультатыОбменаДанными.ЗарегистрироватьУстранениеПроблемы(Источник, Перечисления.ТипыПроблемОбменаДанными.НезаполненныеРеквизиты);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Работа с коллизиями изменений данных при обмене

// Проверяет наличие коллизий при загрузке
// и выдает информацию есть ли коллизия при обмене
Процедура ПроверитьКоллизиюИзмененийДанных(ЭлементДанных, ПолучениеЭлемента, Знач Отправитель, Знач ЭтоПолучениеОтГлавного)
	
	Если ТипЗнч(ЭлементДанных) = Тип("УдалениеОбъекта") Тогда
		
		Возврат;
		
	ИначеЕсли ЭлементДанных.ДополнительныеСвойства.Свойство("ОбменДанными") И ЭлементДанных.ДополнительныеСвойства.ОбменДанными.АнализДанных Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Отправитель = Отправитель.Ссылка;
	МетаданныеОбъекта = ЭлементДанных.Метаданные();
	ЭтоСсылочныйТип = ОбщегоНазначения.ЭтоОбъектСсылочногоТипа(МетаданныеОбъекта);
	
	ЕстьКоллизия = ПланыОбмена.ИзменениеЗарегистрировано(Отправитель, ЭлементДанных);
	
	// Выполняем дополнительную проверку на изменение объекта
	// если объект до коллизии и после коллизии не изменен,
	// то считаем, что коллизии нет
	Если ЕстьКоллизия Тогда
		
		Если ЭтоСсылочныйТип Тогда
			
			ОбъектВБазе = ЭлементДанных.Ссылка.ПолучитьОбъект();
			СсылкаСуществует = (ОбъектВБазе <> Неопределено);
			
		Иначе
			СсылкаСуществует = Ложь;
			ОбъектВБазе = Неопределено;
		КонецЕсли;
		
		СтрокаОбъектаДоИзменения    = ПолучитьДанныеОбъектаСтрокойДоИзменения(ЭлементДанных, МетаданныеОбъекта, ЭтоСсылочныйТип, СсылкаСуществует, ОбъектВБазе);
		СтрокаОбъектаПослеИзменения = ПолучитьДанныеОбъектаСтрокойПослеИзменения(ЭлементДанных, МетаданныеОбъекта);
		
		// Если значения совпадают, то коллизии нет
		Если СтрокаОбъектаДоИзменения = СтрокаОбъектаПослеИзменения Тогда
			
			ЕстьКоллизия = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЕстьКоллизия Тогда
		
		ОбменДаннымиПереопределяемый.ПриКоллизииИзмененийДанных(ЭлементДанных, ПолучениеЭлемента, Отправитель, ЭтоПолучениеОтГлавного);
		
		Если ПолучениеЭлемента = ПолучениеЭлементаДанных.Авто Тогда
			ПолучениеЭлемента = ?(ЭтоПолучениеОтГлавного, ПолучениеЭлементаДанных.Принять, ПолучениеЭлементаДанных.Игнорировать);
		КонецЕсли;
		
		ЗаписатьОбъект = (ПолучениеЭлемента = ПолучениеЭлементаДанных.Принять);
		
		ЗарегистрироватьПредупреждениеОКоллизииВЖурналеРегистрации(ЭлементДанных, МетаданныеОбъекта, ЗаписатьОбъект, ЭтоСсылочныйТип);
		
		Если Не ЭтоСсылочныйТип Тогда
			Возврат;
		КонецЕсли;
			
		Если ОбменДаннымиПовтИсп.ИспользуетсяВерсионирование(Отправитель) Тогда
			
			Если СсылкаСуществует Тогда
				
				Если ЗаписатьОбъект Тогда
					Комментарий = НСтр("ru = 'Предыдущая версия (автоматическое разрешение конфликта).'");
				Иначе
					Комментарий = НСтр("ru = 'Текущая версия (автоматическое разрешение конфликта).'");
				КонецЕсли;
				
				ПриСозданииВерсииОбъекта(ОбъектВБазе,,, Комментарий, СсылкаСуществует);
				
			КонецЕсли;
			
			Если ЗаписатьОбъект Тогда
				
				СведенияОВерсииОбъекта = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(
					ЭлементДанных.ДополнительныеСвойства.СведенияОВерсииОбъекта);
				
				СведенияОВерсииОбъекта.ТипВерсииОбъекта = "ПринятыеДанныеПоКоллизии";
				СведенияОВерсииОбъекта.АвторВерсии = Отправитель;
				СведенияОВерсииОбъекта.Комментарий = НСтр("ru = 'Принятая версия (автоматическое разрешение конфликта).'");
				
				ЭлементДанных.ДополнительныеСвойства.СведенияОВерсииОбъекта = Новый ФиксированнаяСтруктура(СведенияОВерсииОбъекта);
				
			Иначе
				
				Комментарий = НСтр("ru = 'Отклоненная версия (автоматическое разрешение конфликта).'");
				ПриСозданииВерсииОбъекта(ЭлементДанных, Отправитель, "НепринятыеДанныеПоКоллизии", Комментарий, СсылкаСуществует);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет проверку на наличие запрета загрузки по дате
//
// Параметры:
//	ЭлементДанных	  – СправочникОбъект, ДокументОбъект, РегистСведенийНаборЗаписей и др. данные.
//						Данные, которые были зачитаны из сообщения обмена, но еще не были записаны в ИБ.
//	ПолучениеЭлемента - ПолучениеЭлементаДанных.
//	Отправитель		  - ПланыОбменаСсылка.
//
Процедура ПроверитьНаличиеЗапретаЗагрузкиПоДате(ЭлементДанных, ПолучениеЭлемента, Знач Отправитель)
	
	Если Отправитель.Метаданные().РаспределеннаяИнформационнаяБаза Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначения.ЭтоКонстанта(ЭлементДанных.Метаданные()) Тогда
		Возврат;
	КонецЕсли;
	
	СообщениеОбОшибке = "";
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.ДатыЗапретаИзменения") Тогда
		МодульДатыЗапретаИзменения = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ДатыЗапретаИзменения");
		
		Если МодульДатыЗапретаИзменения.ЗагрузкаЗапрещена(ЭлементДанных, Отправитель, СообщениеОбОшибке) = Истина Тогда
			
			ЗарегистрироватьЗапретЗагрузкиДанныхПоДате(ЭлементДанных, Отправитель, СообщениеОбОшибке);
			ПолучениеЭлемента = ПолучениеЭлементаДанных.Игнорировать;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЭлементДанных.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения");
	
КонецПроцедуры

// Регистрирует запрет на загрузку данных по причине установленной даты запрета загрузки данных
// в журнале регистрации. Для ссылочных типов при наличии подсистемы ВерсионированиеОбъектов
// регистрирует его так же в мониторе проблем обмена.
// 
// Параметры:
//	Объект - Объект ссылочного типа для которого выполняется регистрация запрета
//	УзелОбмена - ПланОбменаСсылка - Узел информационной базы из которой получен объект
//	СообщениеОбОшибке - Строка - Подробное описание причины отказа от загрузки
//
// Примечание: Для проверки наличия запрета загрузки по дате см. процедуру
// общего модуля ДатыЗапретаИзменения.ЗагрузкаЗапрещена
//
Процедура ЗарегистрироватьЗапретЗагрузкиДанныхПоДате(ЭлементДанных, Отправитель, СообщениеОбОшибке)
	
	ЗаписьЖурналаРегистрации(ОбменДаннымиСервер.СобытиеЖурналаРегистрацииОбменДанными(),
		УровеньЖурналаРегистрации.Предупреждение, , ЭлементДанных, СообщениеОбОшибке);
	
	Если ОбменДаннымиПовтИсп.ИспользуетсяВерсионирование(Отправитель) И ОбщегоНазначения.ЭтоОбъектСсылочногоТипа(ЭлементДанных.Метаданные()) Тогда
		
		СсылкаНаОбъект = ЭлементДанных.Ссылка;
		
		Если ОбщегоНазначения.СсылкаСуществует(СсылкаНаОбъект) Тогда
			
			ОбъектВБазе = СсылкаНаОбъект.ПолучитьОбъект();
			ПриСозданииВерсииОбъекта(ОбъектВБазе,,, НСтр("ru = 'Версия создана при синхронизации данных.'"));
			СтрокаСообщенияОбОшибке = СообщениеОбОшибке;
			ТипВерсииОбъекта = "НепринятыеДанныеПоДатеЗапретаОбъектСуществует";
			
		Иначе
			
			СтрокаСообщенияОбОшибке = Нстр("ru = '%1 запрещено загружать в запрещенный период.%2%2%3'");
			СтрокаСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщенияОбОшибке,
				Строка(ЭлементДанных), Символы.ПС, СообщениеОбОшибке);
			ТипВерсииОбъекта = "НепринятыеДанныеПоДатеЗапретаОбъектНеСуществует";
			
		КонецЕсли;
		
		ПриСозданииВерсииОбъекта(ЭлементДанных, Отправитель, ТипВерсииОбъекта, СтрокаСообщенияОбОшибке);
		
	КонецЕсли;
	
КонецПроцедуры

// Создает и записывает версию объекта в информационную базу.
//
// Параметры
//	Объект - записываемый объект ИБ;
//	АвторВерсии - Пользователь или Узел плана обмена - Источник версии;
//	ТипВерсииОбъекта - Перечисление - Тип создаваемой версии;
//	Комментарий - Строка - Комментарий к создаваемой версии;
//	УникальныйИдентификаторСтрокой - Строка - Создает пустую ссылку из УИДа, если у переданного объекта ссылка отсутствует.
//
Процедура ПриСозданииВерсииОбъекта(Объект, АвторВерсии = Неопределено, ТипВерсииОбъекта = "ИзмененоПользователем",
	Комментарий = "", СсылкаСуществует = Неопределено)
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.ВерсионированиеОбъектов") Тогда
		
		СведенияОВерсииОбъекта = Новый Структура;
		
		СведенияОВерсииОбъекта.Вставить("АвторВерсии", АвторВерсии);
		СведенияОВерсииОбъекта.Вставить("ТипВерсииОбъекта", ТипВерсииОбъекта);
		СведенияОВерсииОбъекта.Вставить("Комментарий", Комментарий);
		
		МодульВерсионированиеОбъектов = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ВерсионированиеОбъектов");
		МодульВерсионированиеОбъектов.СоздатьВерсиюОбъектаПоОбменуДанными(Объект, СведенияОВерсииОбъекта, СсылкаСуществует);
		
	КонецЕсли;
	
КонецПроцедуры

// Только для внутреннего использования
//
Процедура ЗарегистрироватьПредупреждениеОКоллизииВЖурналеРегистрации(Объект, МетаданныеОбъекта, ЗаписатьОбъект, ЭтоСсылочныйТип)
	
	Если ЗаписатьОбъект Тогда
		
		ТекстПредупрежденияЖР = НСтр("ru = 'Возник конфликт изменений объектов.
		|Объект этой информационной базы был заменен версией объекта из второй информационной базы.'");
		
	Иначе
		
		ТекстПредупрежденияЖР = НСтр("ru = 'Возник конфликт изменений объектов.
		|Объект из второй информационной базы не принят. Объект этой информационной базы не изменен.'");
		
	КонецЕсли;
	
	Данные = ?(ЭтоСсылочныйТип, Объект.Ссылка, Неопределено);
		
	ЗаписьЖурналаРегистрации(ОбменДаннымиСервер.СобытиеЖурналаРегистрацииОбменДанными(),
		УровеньЖурналаРегистрации.Предупреждение, МетаданныеОбъекта, Данные, ТекстПредупрежденияЖР);
	
КонецПроцедуры

// Только для внутреннего использования
//
Функция ПолучитьДанныеОбъектаСтрокойДоИзменения(Объект, МетаданныеОбъекта, ЭтоСсылочныйТип, СсылкаСуществует, ОбъектВБазе)
	
	// возвращаемое значение функции
	СтрокаОбъекта = "";
	
	Если ЭтоСсылочныйТип Тогда
		
		Если СсылкаСуществует Тогда
			
			// получаем представление объекта из ИБ по ссылке
			СтрокаОбъекта = ОбщегоНазначения.ЗначениеВСтрокуXML(ОбъектВБазе);
			
		Иначе
			
			СтрокаОбъекта = "Объект удален";
			
		КонецЕсли;
		
	ИначеЕсли ОбщегоНазначения.ЭтоКонстанта(МетаданныеОбъекта) Тогда
		
		// получаем значение константы из ИБ
		СтрокаОбъекта = XMLСтрока(Константы[МетаданныеОбъекта.Имя].Получить());
		
	Иначе // Набор записей
		
		СтарыйНаборЗаписей = ПолучитьНаборЗаписей(Объект);
		СтрокаОбъекта = ОбщегоНазначения.ЗначениеВСтрокуXML(СтарыйНаборЗаписей);
		
	КонецЕсли;
	
	Возврат СтрокаОбъекта;
	
КонецФункции

// Только для внутреннего использования
//
Функция ПолучитьДанныеОбъектаСтрокойПослеИзменения(Объект, МетаданныеОбъекта)
	
	// возвращаемое значение функции
	СтрокаОбъекта = "";
	
	Если ОбщегоНазначения.ЭтоКонстанта(МетаданныеОбъекта) Тогда
		
		СтрокаОбъекта = XMLСтрока(Объект.Значение);
		
	Иначе
		
		СтрокаОбъекта = ОбщегоНазначения.ЗначениеВСтрокуXML(Объект);
		
	КонецЕсли;
	
	Возврат СтрокаОбъекта;
	
КонецФункции