////////////////////////////////////////////////////////////////////////////////
// Подсистема "Контактная информация".
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий формы и модуля объекта

// Обработчик для события формы ПриСозданииНаСервере
//
// Параметры:
//    Форма                - УправляемаяФорма - Форма объекта-владельца, предназначенная для вывода контактной 
//                           информации
//    Объект               - Объект-владелец контактной информации
//    ПоложениеЗаголовкаКИ - Может принимать значения ПоложениеЗаголовкаЭлементаФормы.Лево 
//                           или ПоложениеЗаголовкаЭлементаФормы.Верх (по умолчанию)
//
Процедура ПриСозданииНаСервере(Форма, Объект, ИмяЭлементаДляРазмещения = "", ПоложениеЗаголовкаКИ = "") Экспорт
	
	Строка500 = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(500));
	
	ОписаниеТипаБулево = Новый ОписаниеТипов("Булево");
	МассивДобавляемыхРеквизитов = Новый Массив;
	
	// Создадим таблицу значений
	ИмяОписания = "КонтактнаяИнформацияОписаниеДополнительныхРеквизитов";
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ИмяОписания, Новый ОписаниеТипов("ТаблицаЗначений")));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ИмяРеквизита", Строка500, ИмяОписания));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Вид", Новый ОписаниеТипов("СправочникСсылка.ВидыКонтактнойИнформации"), ИмяОписания));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Тип", Новый ОписаниеТипов("ПеречислениеСсылка.ТипыКонтактнойИнформации"), ИмяОписания));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ЗначенияПолей", Новый ОписаниеТипов("СписокЗначений, Строка"), ИмяОписания));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Представление", Строка500, ИмяОписания));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Комментарий", Новый ОписаниеТипов("Строка"), ИмяОписания));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ЭтоРеквизитТабличнойЧасти", ОписаниеТипаБулево, ИмяОписания));
	
	ИмяТаблицыДобавленных = "ДобавленныеЭлементыКонтактнойИнформации";
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ИмяТаблицыДобавленных, Новый ОписаниеТипов("ТаблицаЗначений")));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ИмяЭлемента", Строка500, ИмяТаблицыДобавленных));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("Приоритет", Новый ОписаниеТипов("Число"), ИмяТаблицыДобавленных));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ЭтоКоманда", ОписаниеТипаБулево, ИмяТаблицыДобавленных));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("ЭтоРеквизитТабличнойЧасти", ОписаниеТипаБулево, ИмяТаблицыДобавленных));
	
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("СписокДобавляемыхЭлементовКонтактнойИнформации", Новый ОписаниеТипов("СписокЗначений")));
	
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("КонтактнаяИнформацияПоложениеЗаголовка", Строка500));
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы("КонтактнаяИнформацияГруппаДляРазмещения", Строка500));
	
	// Получим список видов КИ
	
	СсылкаНаОбъект = Объект.Ссылка;
	МетаданныеОбъекта = СсылкаНаОбъект.Метаданные();
	ПолноеИмяОбъектаМетаданных = МетаданныеОбъекта.ПолноеИмя();
	ИмяГруппыВидовКИ = СтрЗаменить(ПолноеИмяОбъектаМетаданных, ".", "");
	ГруппаВидовКИ = Справочники.ВидыКонтактнойИнформации[ИмяГруппыВидовКИ];
	ИмяОбъекта = МетаданныеОбъекта.Имя;
	
	Если МетаданныеОбъекта.ТабличныеЧасти.КонтактнаяИнформация.Реквизиты.Найти("ИдентификаторСтрокиТабличнойЧасти")=Неопределено Тогда
		ДанныеИдентификатораСтрокиТабличнойЧасти = "0";
	Иначе
		ДанныеИдентификатораСтрокиТабличнойЧасти = "ЕСТЬNULL(КонтактнаяИнформация.ИдентификаторСтрокиТабличнойЧасти, 0)";
	КонецЕсли;
	
	Если СтандартныеПодсистемыПовтИсп.ЭтоПлатформа83БезРежимаСовместимости() Тогда
		РеквизитИмениПредопределенного = "ВидыКонтактнойИнформации.ИмяПредопределенныхДанных";
	Иначе
		РеквизитИмениПредопределенного = "НЕОПРЕДЕЛЕНО";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Если ЗначениеЗаполнено(СсылкаНаОбъект) Тогда
		Запрос.Текст ="
			|ВЫБРАТЬ
			|	ВидыКонтактнойИнформации.Ссылка                    КАК Вид,
			|	" + РеквизитИмениПредопределенного + "             КАК ИмяПредопределенныхДанных,
			|	ВидыКонтактнойИнформации.Тип                       КАК Тип,
			|	ВидыКонтактнойИнформации.ОбязательноеЗаполнение    КАК ОбязательноеЗаполнение,
			|	ВидыКонтактнойИнформации.Подсказка                 КАК Подсказка,
			|	ВидыКонтактнойИнформации.Наименование              КАК Наименование,
			|	ВидыКонтактнойИнформации.ЭтоГруппа                 КАК ЭтоРеквизитТабличнойЧасти,
			|	ВидыКонтактнойИнформации.РеквизитДопУпорядочивания КАК РеквизитДопУпорядочивания,
			|	ЕСТЬNULL(КонтактнаяИнформация.Представление, """") КАК Представление,
			|	ЕСТЬNULL(КонтактнаяИнформация.ЗначенияПолей, """") КАК ЗначенияПолей,
			|	ЕСТЬNULL(КонтактнаяИнформация.НомерСтроки, 0)      КАК НомерСтроки,
			|	" + ДанныеИдентификатораСтрокиТабличнойЧасти + "   КАК ИдентификаторСтроки,
			|	ВЫРАЗИТЬ("""""""" КАК СТРОКА(200))                 КАК ИмяРеквизита,
			|	ВЫРАЗИТЬ("""" КАК СТРОКА)                          КАК Комментарий
			|ИЗ
			|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
			|ЛЕВОЕ СОЕДИНЕНИЕ 
			|	" +  ПолноеИмяОбъектаМетаданных + ".КонтактнаяИнформация КАК КонтактнаяИнформация
			|ПО 
			|	КонтактнаяИнформация.Ссылка = &Владелец
			|	И ВидыКонтактнойИнформации.Ссылка = КонтактнаяИнформация.Вид
			|ГДЕ
			|	НЕ ВидыКонтактнойИнформации.ПометкаУдаления
			|	И (
			|		ВидыКонтактнойИнформации.Родитель=&ГруппаВидовКИ 
			|		ИЛИ ВидыКонтактнойИнформации.Родитель.Родитель=&ГруппаВидовКИ
			|	)
			|УПОРЯДОЧИТЬ ПО
			|	ВидыКонтактнойИнформации.Ссылка ИЕРАРХИЯ
			|";
	Иначе 
		Запрос.Текст ="
			|ВЫБРАТЬ
			|	КонтактнаяИнформация.Представление               КАК Представление,
			|	КонтактнаяИнформация.ЗначенияПолей               КАК ЗначенияПолей,
			|	КонтактнаяИнформация.НомерСтроки                 КАК НомерСтроки,
			|	КонтактнаяИнформация.Вид                         КАК Вид,
			|	" + ДанныеИдентификатораСтрокиТабличнойЧасти + " КАК ИдентификаторСтрокиТабличнойЧасти
			|ПОМЕСТИТЬ 
			|	КонтактнаяИнформация
			|ИЗ
			|	&ТаблицаКонтактнойИнформации КАК КонтактнаяИнформация
			|ИНДЕКСИРОВАТЬ ПО
			|	Вид
			|;////////////////////////////////////////////////////////////////////////////////
			|
			|ВЫБРАТЬ
			|	ВидыКонтактнойИнформации.Ссылка                    КАК Вид,
			|	" + РеквизитИмениПредопределенного + "             КАК ИмяПредопределенныхДанных,
			|	ВидыКонтактнойИнформации.Тип                       КАК Тип,
			|	ВидыКонтактнойИнформации.ОбязательноеЗаполнение    КАК ОбязательноеЗаполнение,
			|	ВидыКонтактнойИнформации.Подсказка                 КАК Подсказка,
			|	ВидыКонтактнойИнформации.Наименование              КАК Наименование,
			|	ВидыКонтактнойИнформации.ЭтоГруппа                 КАК ЭтоРеквизитТабличнойЧасти,
			|	ВидыКонтактнойИнформации.РеквизитДопУпорядочивания КАК РеквизитДопУпорядочивания,
			|	ЕСТЬNULL(КонтактнаяИнформация.Представление, """") КАК Представление,
			|	ЕСТЬNULL(КонтактнаяИнформация.ЗначенияПолей, """") КАК ЗначенияПолей,
			|	ЕСТЬNULL(КонтактнаяИнформация.НомерСтроки, 0)      КАК НомерСтроки,
			|	" + ДанныеИдентификатораСтрокиТабличнойЧасти + "   КАК ИдентификаторСтроки,
			|	ВЫРАЗИТЬ("""""""" КАК СТРОКА(200))                 КАК ИмяРеквизита,
			|	ВЫРАЗИТЬ("""" КАК СТРОКА)                          КАК Комментарий
			|ИЗ
			|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
			|ЛЕВОЕ СОЕДИНЕНИЕ 
			|	КонтактнаяИнформация КАК КонтактнаяИнформация
			|ПО 
			|	ВидыКонтактнойИнформации.Ссылка = КонтактнаяИнформация.Вид
			|ГДЕ
			|	НЕ ВидыКонтактнойИнформации.ПометкаУдаления
			|	И (
			|		ВидыКонтактнойИнформации.Родитель=&ГруппаВидовКИ 
			|		ИЛИ ВидыКонтактнойИнформации.Родитель.Родитель=&ГруппаВидовКИ
			|	)
			|УПОРЯДОЧИТЬ ПО
			|	ВидыКонтактнойИнформации.Ссылка ИЕРАРХИЯ
			|";
			
		Запрос.УстановитьПараметр("ТаблицаКонтактнойИнформации", Объект.КонтактнаяИнформация.Выгрузить());
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ГруппаВидовКИ", ГруппаВидовКИ);
	Запрос.УстановитьПараметр("Владелец", СсылкаНаОбъект);
	
	УстановитьПривилегированныйРежим(Истина);
	КонтактнаяИнформация = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией).Строки;
	УстановитьПривилегированныйРежим(Ложь);
	
	КонтактнаяИнформация.Сортировать("РеквизитДопУпорядочивания, НомерСтроки");
	
	Для Каждого ОбъектКонтактнойИнформации Из КонтактнаяИнформация Цикл
		
		Если ОбъектКонтактнойИнформации.ЭтоРеквизитТабличнойЧасти Тогда
			
			ИмяВидаКИ = ОбъектКонтактнойИнформации.ИмяПредопределенныхДанных;
			Если ИмяВидаКИ=Неопределено Тогда
				// 8.2 или совместимость
				ИмяВидаКИ = Справочники.ВидыКонтактнойИнформации.ПолучитьИмяПредопределенного(ОбъектКонтактнойИнформации.Вид);
			КонецЕсли;
			
			Поз = Найти(ИмяВидаКИ, ИмяОбъекта);
			
			ИмяТабличнойЧасти = Сред(ИмяВидаКИ, Поз + СтрДлина(ИмяОбъекта));
			
			ПредыдущийВид = Неопределено;
			ИмяРеквизита = "";
			
			ОбъектКонтактнойИнформации.Строки.Сортировать("РеквизитДопУпорядочивания");
			
			Для Каждого СтрокаКИ Из ОбъектКонтактнойИнформации.Строки Цикл
				
				ОбъектКонтактнойИнформации.Строки.Сортировать("РеквизитДопУпорядочивания");
				
				ТекущийВид = СтрокаКИ.Вид;
				
				Если ТекущийВид <> ПредыдущийВид Тогда
					
					ИмяРеквизита = "КонтактнаяИнформацияПоле" + ИмяТабличнойЧасти + ОбъектКонтактнойИнформации.Строки.Индекс(СтрокаКИ);
					
					ПутьРеквизитов = "Объект." + ИмяТабличнойЧасти;
					МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ИмяРеквизита, Строка500, ПутьРеквизитов, СтрокаКИ.Наименование, Истина));
					МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ИмяРеквизита + "ЗначенияПолей", Новый ОписаниеТипов("СписокЗначений, Строка"), ПутьРеквизитов,, Истина));
					ПредыдущийВид = ТекущийВид;
					
				КонецЕсли;
				
				СтрокаКИ.ИмяРеквизита = ИмяРеквизита;
				
			КонецЦикла;
			
		Иначе
			ОбъектКонтактнойИнформации.ИмяРеквизита = "КонтактнаяИнформацияПоле" + КонтактнаяИнформация.Индекс(ОбъектКонтактнойИнформации);
			
			МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ОбъектКонтактнойИнформации.ИмяРеквизита, Строка500, , ОбъектКонтактнойИнформации.Наименование, Истина));
			
			// При обнаружении ошибок распознавания не прерываем генерацию
			Попытка
				ОбъектКонтактнойИнформации.Комментарий = КонтактнаяИнформацияСлужебный.КомментарийКонтактнойИнформации(ОбъектКонтактнойИнформации.ЗначенияПолей);
			Исключение
				ЗаписьЖурналаРегистрации(КонтактнаяИнформацияСлужебныйПовтИсп.СобытиеЖурналаРегистрации(),
					УровеньЖурналаРегистрации.Ошибка, , ОбъектКонтактнойИнформации.ЗначенияПолей, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке())
				);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					НСтр("ru='Ошибка анализа контактной информации, возможно неверный формат значений полей.'"), ,
					ОбъектКонтактнойИнформации.ИмяРеквизита);
			КонецПопытки;
		КонецЕсли;
		
	КонецЦикла;
	
	// Добавим новые реквизиты
	Форма.ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
	
	Форма.КонтактнаяИнформацияПоложениеЗаголовка = ПоложениеЗаголовкаКИ;
	Форма.КонтактнаяИнформацияГруппаДляРазмещения = ИмяЭлементаДляРазмещения;
	
	ПредыдущийВид = Неопределено;
	
	Отбор = Новый Структура("Тип", Перечисления.ТипыКонтактнойИнформации.Адрес);
	КоличествоАдресов = КонтактнаяИнформация.НайтиСтроки(Отбор).Количество();
	
	// Создадим элементы на форме и заполним значения реквизитов
	Родитель = ?(ПустаяСтрока(ИмяЭлементаДляРазмещения), Форма, Форма.Элементы[ИмяЭлементаДляРазмещения]);
	
	// Создаем группы для контактной информации
	ГруппаКомпоновки = Группа("ГруппаКомпоновкиКонтактнойИнформации",
	Форма, Родитель, ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная, 5);
	ГруппаЗаголовков = Группа("ГруппаЗаголовковКонтактнойИнформации",
	Форма, ГруппаКомпоновки, ГруппировкаПодчиненныхЭлементовФормы.Вертикальная, 4);
	ГруппаПолейВвода = Группа("ГруппаПолейВводаКонтактнойИнформации",
	Форма, ГруппаКомпоновки, ГруппировкаПодчиненныхЭлементовФормы.Вертикальная, 4);
	ГруппаДействий = Группа("ГруппаДействийКонтактнойИнформации",
	Форма, ГруппаКомпоновки, ГруппировкаПодчиненныхЭлементовФормы.Вертикальная, 4);
	
	ЗаголовокСлева = ЗаголовокСлева(Форма, ПоложениеЗаголовкаКИ);
	
	Для Каждого СтрокаКИ Из КонтактнаяИнформация Цикл
		
		Если СтрокаКИ.ЭтоРеквизитТабличнойЧасти Тогда
			
			ИмяВидаКИ = ОбщегоНазначения.ИмяПредопределенного(СтрокаКИ.Вид);
			Поз = Найти(ИмяВидаКИ, ИмяОбъекта);
			
			ИмяТабличнойЧасти = Сред(ИмяВидаКИ, Поз + СтрДлина(ИмяОбъекта));
			
			ПредыдущийВидТЧ = Неопределено;
			
			Для Каждого СтрокаТабличнойЧастиКИ Из СтрокаКИ.Строки Цикл
				
				ВидТЧ = СтрокаТабличнойЧастиКИ.Вид;
				
				Если ВидТЧ <> ПредыдущийВидТЧ Тогда
					
					ГруппаТабличнойЧасти = Форма.Элементы[ИмяТабличнойЧасти + "ГруппаКонтактнаяИнформация"];
					
					Элемент = Форма.Элементы.Добавить(СтрокаТабличнойЧастиКИ.ИмяРеквизита, Тип("ПолеФормы"), ГруппаТабличнойЧасти);
					Элемент.Вид = ВидПоляФормы.ПолеВвода;
					Элемент.ПутьКДанным = "Объект." + ИмяТабличнойЧасти + "." + СтрокаТабличнойЧастиКИ.ИмяРеквизита;
					
					Если ДляТипаКонтактнойИнформацииДоступноРедактированиеВДиалоге(СтрокаТабличнойЧастиКИ.Тип) Тогда
						Элемент.КнопкаВыбора = Истина;
						Если ВидТЧ.РедактированиеТолькоВДиалоге Тогда
							Элемент.РедактированиеТекста = Ложь;
						КонецЕсли;
						
						Элемент.УстановитьДействие("НачалоВыбора", "Подключаемый_КонтактнаяИнформацияНачалоВыбора");
					КонецЕсли;
					Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_КонтактнаяИнформацияПриИзменении");
					
					Если ВидТЧ.ОбязательноеЗаполнение Тогда
						Элемент.АвтоОтметкаНезаполненного = Истина;
					КонецЕсли;
					
					ДобавитьОписаниеЭлемента(Форма, СтрокаТабличнойЧастиКИ.ИмяРеквизита, 2, , Истина);
					ДобавитьРеквизитВОписание(Форма, СтрокаТабличнойЧастиКИ, Ложь, Истина);
					ПредыдущийВидТЧ = ВидТЧ;
					
				КонецЕсли;
				
				Отбор = Новый Структура;
				Отбор.Вставить("ИдентификаторСтрокиТабличнойЧасти", СтрокаТабличнойЧастиКИ.ИдентификаторСтроки);
				
				СтрокиТаблицы = Форма.Объект[ИмяТабличнойЧасти].НайтиСтроки(Отбор);
				
				Если СтрокиТаблицы.Количество() = 1 Тогда
					
					СтрокаТаблицы = СтрокиТаблицы[0];
					СтрокаТаблицы[СтрокаТабличнойЧастиКИ.ИмяРеквизита] = СтрокаТабличнойЧастиКИ.Представление;
					СтрокаТаблицы[СтрокаТабличнойЧастиКИ.ИмяРеквизита + "ЗначенияПолей"] = СтрокаТабличнойЧастиКИ.ЗначенияПолей;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Продолжить;
			
		КонецЕсли;
		
		Вид = СтрокаКИ.Вид;
		Тип = СтрокаКИ.Тип;
		ЕстьКомментарий = ЗначениеЗаполнено(СтрокаКИ.Комментарий);
		ИмяРеквизита = СтрокаКИ.ИмяРеквизита;
		
		ЭтоНовыйВидКИ = (Вид <> ПредыдущийВид);
		
		// Добавляем заголовок
		Если ЗаголовокСлева Тогда
			
			Заголовок(Форма, Тип, ИмяРеквизита, ГруппаЗаголовков, СтрокаКИ.Наименование, ЭтоНовыйВидКИ, ЕстьКомментарий);
			
		КонецЕсли;
		
		ПолеВвода(Форма, Вид, Тип, ИмяРеквизита, СтрокаКИ.Подсказка, ЭтоНовыйВидКИ, СтрокаКИ.ОбязательноеЗаполнение);
		
		// Выводим комментарий
		Если ЕстьКомментарий Тогда
			
			ИмяКомментария = "Комментарий" + ИмяРеквизита;
			Комментарий(Форма, СтрокаКИ.Комментарий, ИмяКомментария, ГруппаПолейВвода);
			
		КонецЕсли;
		
		// Заглушка , если заголовок у поля сверху
		Если Не ЗаголовокСлева И ЭтоНовыйВидКИ Тогда
			
			ИмяДекорации = "ДекорацияВерх" + ИмяРеквизита;
			Декорация = Форма.Элементы.Добавить(ИмяДекорации, Тип("ДекорацияФормы"), ГруппаДействий);
			ДобавитьОписаниеЭлемента(Форма, ИмяДекорации, 2);
			
		КонецЕсли;
		
		Действие(Форма, Тип, ИмяРеквизита, ГруппаДействий, КоличествоАдресов, ЕстьКомментарий);
		ДобавитьРеквизитВОписание(Форма, СтрокаКИ, ЭтоНовыйВидКИ);
		
		ПредыдущийВид = Вид;
		
	КонецЦикла;
	
	Если Форма.СписокДобавляемыхЭлементовКонтактнойИнформации.Количество() > 0 Тогда
		
		ГруппаКоманды = Группа("ГруппаКонтактнаяИнформацияДобавитьПолеВвода",
		Форма, Родитель, ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная, 5);
		ГруппаКоманды.Отображение = ОбщегоНазначенияКлиентСервер.ОтображениеОбычнойГруппыОтступ();
		
		ИмяКоманды = "КонтактнаяИнформацияДобавитьПолеВвода";
		Команда = Форма.Команды.Добавить(ИмяКоманды);
		Команда.Подсказка = НСтр("ru='Добавить дополнительное поле контактной информации'");
		Команда.Отображение = ОтображениеКнопки.КартинкаИТекст;
		Команда.Картинка = БиблиотекаКартинок.ДобавитьЭлементСписка;
		Команда.Действие = "Подключаемый_КонтактнаяИнформацияВыполнитьКоманду";
		Команда.ИзменяетСохраняемыеДанные = Истина;
		
		ДобавитьОписаниеЭлемента(Форма, ИмяКоманды, 9, Истина);
		
		Кнопка = Форма.Элементы.Добавить(ИмяКоманды,Тип("КнопкаФормы"), ГруппаКоманды);
		Кнопка.Заголовок = НСтр("ru='Добавить'");
		Кнопка.ИмяКоманды = ИмяКоманды;
		ДобавитьОписаниеЭлемента(Форма, ИмяКоманды, 2);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик для события формы ПриЧтенииНаСервере
Процедура ПриЧтенииНаСервере(Форма, Объект) Экспорт
	
	СписокРеквизитовФормы = Форма.ПолучитьРеквизиты();
	
	ПовторныйЗапуск = Ложь;
	Для Каждого Реквизит Из СписокРеквизитовФормы Цикл
		Если Реквизит.Имя = "КонтактнаяИнформацияОписаниеДополнительныхРеквизитов" Тогда
			ПовторныйЗапуск = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ПовторныйЗапуск Тогда
		
		ПоложениеЗаголовкаКИ = Форма.КонтактнаяИнформацияПоложениеЗаголовка;
		ПоложениеЗаголовкаКИ = ?(ЗначениеЗаполнено(ПоложениеЗаголовкаКИ), ПоложениеЗаголовкаЭлементаФормы[ПоложениеЗаголовкаКИ], ПоложениеЗаголовкаЭлементаФормы.Верх);
		
		ИмяЭлементаДляРазмещения = Форма.КонтактнаяИнформацияГруппаДляРазмещения;
		
		УдалитьКомандыИЭлементыФормы(Форма);
		
		МассивУдаляемыхРеквизитов = Новый Массив;
		
		ИмяОбъекта = Объект.Ссылка.Метаданные().Имя;
		
		Для Каждого РеквизитФормы Из Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов Цикл
			Если Не РеквизитФормы.ЭтоРеквизитТабличнойЧасти Тогда
				МассивУдаляемыхРеквизитов.Добавить(РеквизитФормы.ИмяРеквизита);
			Иначе
				МассивУдаляемыхРеквизитов.Добавить("Объект." + ИмяТабличнойЧастиПоВидуКИ(РеквизитФормы.Вид, ИмяОбъекта) + "." + РеквизитФормы.ИмяРеквизита);
				МассивУдаляемыхРеквизитов.Добавить("Объект." + ИмяТабличнойЧастиПоВидуКИ(РеквизитФормы.Вид, ИмяОбъекта) + "." + РеквизитФормы.ИмяРеквизита + "ЗначенияПолей");
			КонецЕсли;
		КонецЦикла;
		
		МассивУдаляемыхРеквизитов.Добавить("ДобавленныеЭлементыКонтактнойИнформации");
		МассивУдаляемыхРеквизитов.Добавить("СписокДобавляемыхЭлементовКонтактнойИнформации");
		МассивУдаляемыхРеквизитов.Добавить("КонтактнаяИнформацияПоложениеЗаголовка");
		МассивУдаляемыхРеквизитов.Добавить("КонтактнаяИнформацияГруппаДляРазмещения");
		МассивУдаляемыхРеквизитов.Добавить("КонтактнаяИнформацияОписаниеДополнительныхРеквизитов");
		
		Форма.ИзменитьРеквизиты(, МассивУдаляемыхРеквизитов);
		
		ПриСозданииНаСервере(Форма, Объект, ИмяЭлементаДляРазмещения, ПоложениеЗаголовкаКИ);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик для события формы ПослеЗаписиНаСервере
Процедура ПослеЗаписиНаСервере(Форма, Объект) Экспорт
	
	ИмяОбъекта = Объект.Ссылка.Метаданные().Имя;
	
	Для Каждого СтрокаТаблицы Из Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов Цикл
		
		Если СтрокаТаблицы.ЭтоРеквизитТабличнойЧасти Тогда
			
			ВидИнформации = СтрокаТаблицы.Вид;
			ИмяРеквизита = СтрокаТаблицы.ИмяРеквизита;
			ИмяТабличнойЧасти = ИмяТабличнойЧастиПоВидуКИ(ВидИнформации, ИмяОбъекта);
			ТабличнаяЧастьФормы = Форма.Объект[ИмяТабличнойЧасти];
			
			Для Каждого СтрокаТабличнойЧастиФормы Из ТабличнаяЧастьФормы Цикл
				
				Отбор = Новый Структура;
				Отбор.Вставить("Вид", ВидИнформации);
				Отбор.Вставить("ИдентификаторСтрокиТабличнойЧасти", СтрокаТабличнойЧастиФормы.ИдентификаторСтрокиТабличнойЧасти);
				НайденныеСтроки = Объект.КонтактнаяИнформация.НайтиСтроки(Отбор);
				
				Если НайденныеСтроки.Количество() = 1 Тогда
					
					СтрокаКИ = НайденныеСтроки[0];
					СтрокаТабличнойЧастиФормы[ИмяРеквизита] = СтрокаКИ.Представление;
					СтрокаТабличнойЧастиФормы[ИмяРеквизита + "ЗначенияПолей"] = СтрокаКИ.ЗначенияПолей;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Обработчик для события формы ОбработкаПроверкиЗаполненияНаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Форма, Объект, Отказ) Экспорт
	
	ИмяОбъекта = Объект.Ссылка.Метаданные().Имя;
	УровеньОшибок = 0;
	ПредыдущийВид = Неопределено;
	
	Для Каждого СтрокаТаблицы Из Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов Цикл
		
		ВидИнформации = СтрокаТаблицы.Вид;
		ТипИнформации = СтрокаТаблицы.Тип;
		Комментарий   = СтрокаТаблицы.Комментарий;
		ИмяРеквизита  = СтрокаТаблицы.ИмяРеквизита;
		ОбязательноеЗаполнение = ВидИнформации.ОбязательноеЗаполнение;
		
		Если СтрокаТаблицы.ЭтоРеквизитТабличнойЧасти Тогда
			
			ИмяТабличнойЧасти = ИмяТабличнойЧастиПоВидуКИ(ВидИнформации, ИмяОбъекта);
			ТабличнаяЧастьФормы = Форма.Объект[ИмяТабличнойЧасти];
			
			Для Каждого СтрокаТабличнойЧастиФормы Из ТабличнаяЧастьФормы Цикл
				
				Представление = СтрокаТабличнойЧастиФормы[ИмяРеквизита];
				Поле = "Объект." + ИмяТабличнойЧасти + "[" + (СтрокаТабличнойЧастиФормы.НомерСтроки - 1) + "]." + ИмяРеквизита;
				
				Если ОбязательноеЗаполнение И ПустаяСтрока(Представление) Тогда
					
					ТекстСообщения = Нстр("ru = 'Поле ""%1"" не заполнено.'");
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ВидИнформации.Наименование);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,Поле);
					ТекущийУровеньОшибок = 2;
					
				Иначе
					
					ЗначенияПолей = СтрокаТабличнойЧастиФормы[ИмяРеквизита + "ЗначенияПолей"];
					
					ТекущийУровеньОшибок = ПроверитьКонтактнуюИнформацию(Представление, ЗначенияПолей, ВидИнформации,
					ТипИнформации, ИмяРеквизита, , Поле);
					
					СтрокаТабличнойЧастиФормы[ИмяРеквизита] = Представление;
					СтрокаТабличнойЧастиФормы[ИмяРеквизита + "ЗначенияПолей"] = ЗначенияПолей;
					
				КонецЕсли;
				
				УровеньОшибок = ?(ТекущийУровеньОшибок > УровеньОшибок, ТекущийУровеньОшибок, УровеньОшибок);
				
			КонецЦикла;
			
		Иначе
			
			Представление = Форма[ИмяРеквизита];
			
			Если ВидИнформации <> ПредыдущийВид И ОбязательноеЗаполнение И ПустаяСтрока(Представление) Тогда
				
				ТекстСообщения = Нстр("ru = 'Поле ""%1"" не заполнено.'");
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, ВидИнформации.Наименование);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,ИмяРеквизита);
				ТекущийУровеньОшибок = 2;
				
			Иначе
				
				ТекущийУровеньОшибок = ПроверитьКонтактнуюИнформацию(Представление, СтрокаТаблицы.ЗначенияПолей,
				ВидИнформации, ТипИнформации, ИмяРеквизита, Комментарий);
				
			КонецЕсли;
			
			УровеньОшибок = ?(ТекущийУровеньОшибок > УровеньОшибок, ТекущийУровеньОшибок, УровеньОшибок);
			
		КонецЕсли;
		
		ПредыдущийВид = ВидИнформации;
		
	КонецЦикла;
	
	Если УровеньОшибок <> 0 Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик для события формы ПередЗаписьюНаСервере
Процедура ПередЗаписьюНаСервере(Форма, Объект, Отказ = Ложь) Экспорт
	
	Объект.КонтактнаяИнформация.Очистить();
	ИмяОбъекта = Объект.Ссылка.Метаданные().Имя;
	ПредыдущийВид = Неопределено;
	
	Для Каждого СтрокаТаблицы Из Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов Цикл
		
		ВидИнформации = СтрокаТаблицы.Вид;
		ТипИнформации = СтрокаТаблицы.Тип;
		ИмяРеквизита  = СтрокаТаблицы.ИмяРеквизита;
		ОбязательноеЗаполнение = ВидИнформации.ОбязательноеЗаполнение;
		
		Если СтрокаТаблицы.ЭтоРеквизитТабличнойЧасти Тогда
			
			ИмяТабличнойЧасти = ИмяТабличнойЧастиПоВидуКИ(ВидИнформации, ИмяОбъекта);
			ТабличнаяЧастьФормы = Форма.Объект[ИмяТабличнойЧасти];
			Для Каждого СтрокаТабличнойЧастиФормы Из ТабличнаяЧастьФормы Цикл
				
				ИдентификаторСтроки = СтрокаТабличнойЧастиФормы.ПолучитьИдентификатор();
				СтрокаТабличнойЧастиФормы.ИдентификаторСтрокиТабличнойЧасти = ИдентификаторСтроки;
				
				СтрокаТабличнойЧасти = Объект[ИмяТабличнойЧасти][СтрокаТабличнойЧастиФормы.НомерСтроки - 1];
				СтрокаТабличнойЧасти.ИдентификаторСтрокиТабличнойЧасти = ИдентификаторСтроки;
				
				ЗначенияПолей = СтрокаТабличнойЧастиФормы[ИмяРеквизита + "ЗначенияПолей"];
				
				ЗаписатьКонтактнуюИнформацию(Объект, ЗначенияПолей, ВидИнформации, ТипИнформации, ИдентификаторСтроки);
				
			КонецЦикла;
			
		Иначе
			
			ЗаписатьКонтактнуюИнформацию(Объект, СтрокаТаблицы.ЗначенияПолей, ВидИнформации, ТипИнформации);
			
		КонецЕсли;
		
		ПредыдущийВид = ВидИнформации;
		
	КонецЦикла;
	
КонецПроцедуры

// Добавляет (удаляет) поле ввода или комментарий на форму
//
Функция ОбновитьКонтактнуюИнформацию(Форма, Объект, Результат = Неопределено) Экспорт
	
	Если Результат.Свойство("ЭтоДобавлениеКомментария") Тогда
		
		ИзменитьКомментарий(Форма, Результат.ИмяРеквизита, Результат.ЭтоДобавлениеКомментария);
		
	ИначеЕсли Результат.Свойство("ДобавляемыйВид") Тогда
		
		ДобавитьСтрокуКонтактнойИнформации(Форма, Результат);
		
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Чтение контактной информации другими подсистемами

// Проверяет адрес на соответствие российского адреса требованиям к адресной информации
//
// Параметры:
//    СтруктураПолейАдреса - Структура, СписокЗначений, Строка, содержащая поля адресной информации
//                           Структура и СписокЗначений, содержит имена полей адреса и их значения,
//                           Строка - строка XML контактной информации или содержит строки с именами
//                           полей и их значениями.
//
//    ВидКонтактнойИнформации - необязательная ссылка на справочник "Виды контактной информации" 
//                              соответствующая проверяемому адресу
//
// Возвращаемое значение:
//    Массив структур с полями:
//        - ТипОшибки - строка с наименованием ошибки. Принимаемые значения:
//                - ПредставлениеНеСоответствуетНаборуПолей
//                - НеЗаполненыОбязательныеПоля
//                - НеУказаныСокращенияПолей
//                - НедопустимыеСимволыПолей
//                - НеСоответствуетДлинаПолей
//                - ОшибкиПоКлассификатору
//        - Сообщение - Подробный текст ошибки
//        - Поля - массив структур с полями:
//                - ИмяПоля - Строка, название элемента в структуре адреса
//                - Сообщение - строка, подробный текст ошибки для поля
//
Функция ПроверитьАдрес(Знач СтруктураПолейАдреса, ВидКонтактнойИнформации=Неопределено) Экспорт
	Возврат КонтактнаяИнформацияСлужебный.ОшибкиЗаполненияАдреса(СтруктураПолейАдреса, ВидКонтактнойИнформации, Истина);
КонецФункции

// Преобразует все входящие форматы контактной информации в XML
//
// Параметры:
//    ЗначенияПолей - строка (XML или старый формат ключ-значение), структура, соответствие или список значений,
//                    описывающие поля контактной информации.
//    Представление - строка представления. Используется, если невозможно определить представление из параметра 
//                    ЗначенияПолей (отсутствие поля "Представление")
//    ОжидаемыйВид  - ссылка на справочник ВидыКонтактнойИнформации или перечисление ТипыКонтактнойИнформации.
//                    Используется для определения типа, если его невозможно вычислить по полю ЗначенияПолей
//
// Возвращаемое значение - строка XML данных контактной информации
//
Функция КонтактнаяИнформацияВXML(Знач ЗначенияПолей, Знач Представление="", Знач ОжидаемыйВид=Неопределено) Экспорт
	
	Результат = КонтактнаяИнформацияXML.ПривестиКонтактнуюИнформациюXML(Новый Структура(
		"ЗначенияПолей, Представление, ВидКонтактнойИнформации",
		ЗначенияПолей, Представление, ОжидаемыйВид));
	
	Возврат Результат.ДанныеXML;
КонецФункции

// Возвращает соответствующее значение перечисления "ТипыКонтактнойИнформации" по строке XML
//
// Параметры:
//    XMLСтрока - строка, описывающая контактную информацию
//
Функция ТипКонтактнойИнформации(Знач XMLСтрока) Экспорт
	Возврат КонтактнаяИнформацияXML.ТипКонтактнойИнформации(XMLСтрока);
КонецФункции

// Читает или устанавливает представление контактной информации.
//
// Параметры:
//    XMLСтрока     - строка, описывающая контактную информацию. Может быть изменена если указан второй параметр.
//    НовоеЗначение - если этот параметр указан, то представление в XMLСтрока устанавливается на новое значение
//
Функция ПредставлениеКонтактнойИнформации(XMLСтрока, Знач НовоеЗначение=Неопределено) Экспорт
	Возврат КонтактнаяИнформацияСлужебный.ПредставлениеКонтактнойИнформации(XMLСтрока, НовоеЗначение);
КонецФункции

// Вычисляет представление контактной информации по внутренним значениям полей
//
// Параметры:
//    XMLСтрока               - Строка -  XML контактной информации
//    ВидКонтактнойИнформации - СправочникСсылка.ВидыКонтактнойИнформации, Структура - набор флагов, описывающих 
//                              параметры генерации представления
//
Функция ПредставлениеКонтактнойИнформацииПоЗначениюПолей(Знач XMLСтрока, Знач ВидКонтактнойИнформации=Неопределено) Экспорт
	
	Если ВидКонтактнойИнформации=Неопределено Тогда
		Вид = СтруктураВидаКонтактнойИнформации();
		Вид.Тип = КонтактнаяИнформацияXML.ТипКонтактнойИнформации(XMLСтрока);
	Иначе
		Вид = ВидКонтактнойИнформации;
	КонецЕсли;
	
	Возврат КонтактнаяИнформацияСлужебный.СформироватьПредставлениеКонтактнойИнформации(XMLСтрока, Вид);
КонецФункции

// Читает или устанавливает комментарий к контактной информации
//
// Параметры:
//    XMLСтрока     - строка, описывающая контактную информацию. Может быть изменена если указан второй параметр.
//    НовоеЗначение - если этот параметр указан, то комментарий в XMLСтрока устанавливается на новое значение
//
Функция КомментарийКонтактнойИнформации(XMLСтрока, Знач НовоеЗначение=Неопределено) Экспорт
	Возврат КонтактнаяИнформацияСлужебный.КомментарийКонтактнойИнформации(XMLСтрока, НовоеЗначение);
КонецФункции

// Читает или устанавливает адрес по документу у адреса РФ
//
// Параметры:
//    XMLСтрока     - строка, описывающая контактную информацию. Может быть изменена если указан второй параметр.
//    НовоеЗначение - если этот параметр указан, то комментарий в XMLСтрока устанавливается на новое значение
//
//    Если переданная строка не содержит информации об адресе РФ, то будет вызвано исключение
//
Функция АдресПоДокументуКонтактнойИнформации(XMLСтрока, Знач НовоеЗначение=Неопределено) Экспорт
	Если ПустаяСтрока(XMLСтрока) Тогда
		Возврат "";
	КонецЕсли;
	
	ПространствоИмен = КонтактнаяИнформацияКлиентСерверПовтИсп.ПространствоИмен();
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(XMLСтрока);
	XDTOАдрес = ФабрикаXDTO.ПрочитатьXML(Чтение, ФабрикаXDTO.Тип(ПространствоИмен, "КонтактнаяИнформация"));
	АдресРФ = КонтактнаяИнформацияСлужебный.РоссийскийАдрес(XDTOАдрес.Состав);
	Если АдресРФ=Неопределено Тогда
		ВызватьИсключение НСтр("ru='Невозможно определить адрес по документу, ожидается адрес РФ'");
	КонецЕсли;
	
	Если НовоеЗначение<>Неопределено Тогда
		АдресРФ.Адрес_по_документу = НовоеЗначение;
		XMLСтрока = КонтактнаяИнформацияСлужебный.СериализацияКонтактнойИнформации(XDTOАдрес);
	КонецЕсли;
	
	Возврат Строка(АдресРФ.Адрес_по_документу);
КонецФункции

// Возвращает информацию о стране адреса
//
// Параметры:
//    XMLСтрока - строка, описывающая контактную информацию.
//
// Возвращаемое значение:
//    Структура с полями "Ссылка", "Наименование", "Ссылка", "Код", "НаименованиеПолное", "КодАльфа2", "КодАльфа3",
//    которая описывает страну адреса. 
//
//    Если передана пустая строка, то возвращается пустая структура.
//    Если страна не найдена в справочнике, то но найдена в классфикаторе, то поле "Ссылка" не заполнено
//    Если страна не найдена ни в адресе, ни в классификаторе, то будет заполнено только поле "Наименование"
//
//    Если переданная строка не содержит информации об адресе, то будет вызвано исключение
//
Функция СтранаАдресаКонтактнойИнформации(Знач XMLСтрока) Экспорт
	
	Результат = Новый Структура("Ссылка, Код, Наименование, НаименованиеПолное, КодАльфа2, КодАльфа3");
	Если ПустаяСтрока(XMLСтрока) Тогда
		Возврат Результат;
	КонецЕсли;
	
	// Читаем наименование страны
	ПространствоИмен = КонтактнаяИнформацияКлиентСерверПовтИсп.ПространствоИмен();
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(XMLСтрока);
	XDTOАдрес = ФабрикаXDTO.ПрочитатьXML(Чтение, ФабрикаXDTO.Тип(ПространствоИмен, "КонтактнаяИнформация"));
	Адрес = XDTOАдрес.Состав;
	Если Адрес=Неопределено Или Адрес.Тип()<>ФабрикаXDTO.Тип(ПространствоИмен, "Адрес") Тогда
		ВызватьИсключение НСтр("ru='Невозможно определить страну, ожидается адрес.'");
	КонецЕсли;
	
	Результат.Наименование = СокрЛП(Адрес.Страна);
	ДанныеСтраны = Справочники.СтраныМира.ДанныеСтраныМира(, Результат.Наименование);
	Возврат ?(ДанныеСтраны=Неопределено, Результат, ДанныеСтраны);
КонецФункции

// Возвращает наименование субъекта РФ для адреса или пустую строку, если субъект не определен
//
// Параметры:
//    XMLСтрока - строка, описывающая контактную информацию.
//
//    Если переданная строка не содержит информации об адресе, то будет вызвано исключение
//
Функция РегионАдресаКонтактнойИнформации(Знач XMLСтрока) Экспорт
	Если ПустаяСтрока(XMLСтрока) Тогда
		Возврат "";
	КонецЕсли;
	
	ПространствоИмен = КонтактнаяИнформацияКлиентСерверПовтИсп.ПространствоИмен();
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(XMLСтрока);
	XDTOАдрес = ФабрикаXDTO.ПрочитатьXML(Чтение, ФабрикаXDTO.Тип(ПространствоИмен, "КонтактнаяИнформация"));
	Адрес = XDTOАдрес.Состав;
	Если Адрес=Неопределено Или Адрес.Тип()<>ФабрикаXDTO.Тип(ПространствоИмен, "Адрес") Тогда
		ВызватьИсключение НСтр("ru='Невозможно определить субъекта РФ, ожидается адрес.'");
	КонецЕсли;
	
	АдресРФ = КонтактнаяИнформацияСлужебный.РоссийскийАдрес(Адрес);
	Возврат ?(АдресРФ=Неопределено, "", СокрЛП(АдресРФ.СубъектРФ));
КонецФункции

// Возвращает наименование города для адреса РФ или пустую строку для иностранного адреса
//
// Параметры:
//    XMLСтрока - строка, описывающая контактную информацию.
//
//    Если переданная строка не содержит информации об адресе, то будет вызвано исключение
//
Функция ГородАдресаКонтактнойИнформации(Знач XMLСтрока) Экспорт
	Если ПустаяСтрока(XMLСтрока) Тогда
		Возврат "";
	КонецЕсли;
	
	ПространствоИмен = КонтактнаяИнформацияКлиентСерверПовтИсп.ПространствоИмен();
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(XMLСтрока);
	XDTOАдрес = ФабрикаXDTO.ПрочитатьXML(Чтение, ФабрикаXDTO.Тип(ПространствоИмен, "КонтактнаяИнформация"));
	Адрес = XDTOАдрес.Состав;
	Если Адрес=Неопределено Или Адрес.Тип()<>ФабрикаXDTO.Тип(ПространствоИмен, "Адрес") Тогда
		ВызватьИсключение НСтр("ru='Невозможно определить город, ожидается адрес.'");
	КонецЕсли;
	
	АдресРФ = КонтактнаяИнформацияСлужебный.РоссийскийАдрес(Адрес);
	Возврат ?(АдресРФ=Неопределено, "", СокрЛП(АдресРФ.Город));
КонецФункции

// Возвращает домен сетевого адреса для веб-ссылки или адреса электронной почты
//
// Параметры:
//    XMLСтрока - строка, описывающая контактную информацию.
//
Функция ДоменАдресаКонтактнойИнформации(Знач XMLСтрока) Экспорт
	Если ПустаяСтрока(XMLСтрока) Тогда
		Возврат "";
	КонецЕсли;
	
	ПространствоИмен = КонтактнаяИнформацияКлиентСерверПовтИсп.ПространствоИмен();
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(XMLСтрока);
	XDTOАдрес = ФабрикаXDTO.ПрочитатьXML(Чтение, ФабрикаXDTO.Тип(ПространствоИмен, "КонтактнаяИнформация"));
	Состав = XDTOАдрес.Состав;
	Если Состав<>Неопределено Тогда
		Тип = Состав.Тип();
		Если Тип=ФабрикаXDTO.Тип(ПространствоИмен, "ВебСайт") Тогда
			ДоменАдреса = СокрЛП(Состав.Значение);
			Позиция = Найти(ДоменАдреса, "://");
			Если Позиция>0 Тогда
				ДоменАдреса = Сред(ДоменАдреса, Позиция + 3);
			КонецЕсли;
			Позиция = Найти(ДоменАдреса, "/");
			Возврат ?(Позиция=0, ДоменАдреса, Лев(ДоменАдреса, Позиция - 1));
			
		ИначеЕсли Тип=ФабрикаXDTO.Тип(ПространствоИмен, "ЭлектроннаяПочта") Тогда
			ДоменАдреса = СокрЛП(Состав.Значение);
			Позиция = Найти(ДоменАдреса, "@");
			Возврат ?(Позиция=0, ДоменАдреса, Сред(ДоменАдреса, Позиция + 1));
			
		КонецЕсли;
	КонецЕсли;
	
	ВызватьИсключение НСтр("ru='Невозможно определить домен, ожидается электронная почта или веб-ссылка.'");	
КонецФункции

// Возвращает строку с номером телефона без кода и дополнительного номера
//
// Параметры:
//    XMLСтрока - строка, описывающая контактную информацию.
//
Функция НомерТелефонаКонтактнойИнформации(Знач XMLСтрока) Экспорт
	Если ПустаяСтрока(XMLСтрока) Тогда
		Возврат "";
	КонецЕсли;
	
	ПространствоИмен = КонтактнаяИнформацияКлиентСерверПовтИсп.ПространствоИмен();
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(XMLСтрока);
	XDTOАдрес = ФабрикаXDTO.ПрочитатьXML(Чтение, ФабрикаXDTO.Тип(ПространствоИмен, "КонтактнаяИнформация"));
	Состав = XDTOАдрес.Состав;
	Если Состав<>Неопределено Тогда
		Тип = Состав.Тип();
		Если Тип=ФабрикаXDTO.Тип(ПространствоИмен, "НомерТелефона") Тогда
			Возврат СокрЛП(Состав.Номер);
			
		ИначеЕсли Тип=ФабрикаXDTO.Тип(ПространствоИмен, "НомерФакса") Тогда
			Возврат СокрЛП(Состав.Номер);
			
		КонецЕсли;
	КонецЕсли;
	
	ВызватьИсключение НСтр("ru='Невозможно определить номер, ожидается телефона или факс.'");
КонецФункции

// Сравнивает два экземпляра контактной инфромации.
//
// Параметры:
//    Данные1, Данные2 - данные экземпляров контактной информации. Каждый параметр независимо может принимать 
//    значения следующих типов:
//        - ОбъектXTDO. Рассматривается как объект с контактной информацией
//        - Строка. Рассматривается как контактная информация в формате XML
//        - Структура, описывающие контактную информацию. Ожидаются поля:
//            ЗначенияПолей           - строка (XML или старый формат ключ-значение), структура, список значений, 
//                                      соответствие. Если в этом поле передана строка XML, то остальные поля 
//                                      структуры игнорируются.
//            Представление           - строка представления. Используется в случае, если не удалось вычислить 
//                                      представление из ЗначенияПолей (отсутствие в них поля Представление)
//            ВидКонтактнойИнформации - ссылка на справочник ВидыКонтактнойИнформации или значение перечисления 
//                                      ТипыКонтактнойИнформации. Используется в случае, если не удалось вычислить 
//                                      тип из ЗначенияПолей
//            Комментарий             - строка комментария. Используется в случае, если не удалось вычислить 
//                                      комментарий из ЗначенияПолей
//
// Возвращает таблицу отличающихся полей со следующими колонками:
//    Путь      - строка XPath, идентифицирующая различающееся значение. Значение "ТипКонтактнойИнформации" означает,
//                что переданные экземпляры контактной информации различаются типом.
//    Описание  - строка описания отличающегося реквизита в терминах предметной области
//    Значение1 - строка значения, соответствующая объекту, переданному в параметре Данные1
//    Значение2 - строка значения, соответствующая объекту, переданному в параметре Данные2
//
Функция РазличияКонтактнойИнформации(Знач Данные1, Знач Данные2) Экспорт
	Возврат КонтактнаяИнформацияXML.РазличияКонтактнойИнформации(Данные1, Данные2);
КонецФункции

//  Преобразует данные нового формата XML контактной информации в старый формат
//
//  Параметры:
//      Данные            - строка значений полей в новом формате (xml)
//      СтарыйСоставПолей - булево - необязательный флаг того, что из состава полей будут исключены
//                          поля, отсутствующие в версиях БСП младше 2.1.3
//
//  Возвращаемое значение:
//      Строка с набором пар ключ-значение, разделенных переносом строки
//
Функция ПредыдущийФорматКонтактнойИнформацииXML(Знач Данные, Знач СтарыйСоставПолей=Ложь) Экспорт
	
	Если КонтактнаяИнформацияКлиентСервер.ЭтоКонтактнаяИнформацияВXML(Данные) Тогда
		СтарыйФормат = КонтактнаяИнформацияСлужебный.КонтактнаяИнформацияВСтаруюСтруктуру(Данные, СтарыйСоставПолей);
		Возврат УправлениеКонтактнойИнформациейКлиентСервер.ПреобразоватьСписокПолейВСтроку(
			СтарыйФормат.ЗначенияПолей, Ложь);
	КонецЕсли;
	
	Возврат Данные;
КонецФункции

//  Преобразует данные нового формата XML контактной информации в структуру старого формата
//
//  Параметры:
//      Данные                  - строка значений полей, в новом формате (xml) или в старом (ключ=значение)
//      ВидКонтактнойИнформации - необязательная ссылка на справочник вида, или совместимая по полям структура
//                                используется, если "Данные" - пустая строка
//
//  Возвращаемое значение:
//      Структура с набором пар ключ-значение
//
Функция ПредыдущаяСтруктураКонтактнойИнформацииXML(Знач Данные, Знач ВидКонтактнойИнформации=Неопределено) Экспорт
	
	Если КонтактнаяИнформацияКлиентСервер.ЭтоКонтактнаяИнформацияВXML(Данные) Тогда
		// Новый формат КИ
		Возврат УправлениеКонтактнойИнформациейКлиентСервер.СтруктураЗначенийПолей(
			ПредыдущийФорматКонтактнойИнформацииXML(Данные));
		
	ИначеЕсли ПустаяСтрока(Данные) И ВидКонтактнойИнформации<>Неопределено Тогда
		// Генерируем по виду
		Возврат УправлениеКонтактнойИнформациейКлиентСервер.СтруктураКонтактнойИнформацииПоТипу(
			ВидКонтактнойИнформации.Тип);
		
	КонецЕсли;
	
	// Возвращаем полную структуру для данного вида с заполненными полями
	Возврат УправлениеКонтактнойИнформациейКлиентСервер.СтруктураЗначенийПолей(Данные, ВидКонтактнойИнформации);
КонецФункции

////////////////////////////////////////////////////////////////////////////////////////////////////

// Определяет данные страны по справочнику стран или классификатору ОКСМ
//
// Параметры:
//    КодСтраны    - строка или число с кодом ОКСМ страны. Если не указано, то поиск по коду не производится
//    Наименование - наименование страны. Если не указано, то поиск по наименованию не производится
//
// Возвращаемое значение:
//    Структура с полями "Ссылка", "Код", "Наименование", "НаименованиеПолное", "КодАльфа2", "КодАльфа3",
//    Если страна не найдена в справочнике, но найдена в классфикаторе, то поле "Ссылка" не заполнено
//
//    Если страна не найдена ни в адресе, ни в классификаторе, то возвращается значение Неопределено
//
Функция ДанныеСтраныМира(Знач КодСтраны=Неопределено, Знач Наименование=Неопределено) Экспорт
	Возврат Справочники.СтраныМира.ДанныеСтраныМира(КодСтраны, Наименование);
КонецФункции

// Определяет данные страны по классификатору ОКСМ
//
// Параметры:
//    КодСтраны - строка кода страны или числовой код
//
// Возвращаемое значение:
//    - в случае успеха - структура с полями "Код", "Наименование", "НаименованиеПолное", "КодАльфа2", "КодАльфа3"
//    - в случае отсутствия страны в классификаторе - Неопределено
//
Функция ДанныеКлассификатораСтранМираПоКоду(Знач КодСтраны) Экспорт
	Возврат Справочники.СтраныМира.ДанныеКлассификатораСтранМираПоКоду(КодСтраны);
КонецФункции

// Определяет данные страны по классификатору ОКСМ
//
// Параметры:
//    Наименование - строка наименования страны
//
// Возвращаемое значение:
//    - в случае успеха - структура с полями "Код", "Наименование", "НаименованиеПолное", "КодАльфа2", "КодАльфа3"
//    - в случае отсутствия страны в классификаторе - Неопределено
//
Функция ДанныеКлассификатораСтранМираПоНаименованию(Знач Наименование) Экспорт
	Возврат Справочники.СтраныМира.ДанныеКлассификатораСтранМираПоНаименованию(Наименование);
КонецФункции

////////////////////////////////////////////////////////////////////////////////////////////////////

// Устарело. В будущем необходимо использовать "КонтактнаяИнформацияОбъекта"
//
Функция ПолучитьКонтактнуюИнформацияОбъекта(Ссылка, ВидКонтактнойИнформации) Экспорт
	Возврат КонтактнаяИнформацияОбъекта(Ссылка, ВидКонтактнойИнформации);
КонецФункции

// Получить значение определенного вида контактной информации у объекта.
//
// Параметры
//  Ссылка                  - ЛюбаяСсылка - ссылка на объект-владелец контактной информации (организация, контрагент, партнер и т.д.)
//  ВидКонтактнойИнформации - СправочникСсылка.ВидыКонтактнойИнформации
//
// Возвращаемое значение:
//  Строка - строковое представление значения.
//
Функция КонтактнаяИнформацияОбъекта(Ссылка, ВидКонтактнойИнформации) Экспорт
	
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(Ссылка);
	
	КонтактнаяИнформацияОбъекта = КонтактнаяИнформацияОбъектов(МассивОбъектов,, ВидКонтактнойИнформации);
	
	Если КонтактнаяИнформацияОбъекта.Количество() > 0 Тогда
		Возврат КонтактнаяИнформацияОбъекта[0].Представление;
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

//  Возвращает значения всей контактной информации определенного вида для объекта-владельца
//
//  Параметры:
//      Ссылка                  - ссылка на объект-владелец контактной информации (организация, контрагент, партнер и т.д.)
//      ВидКонтактнойИнформации - СправочникСсылка.ВидыКонтактнойИнформации
//
//  Возвращаемое значение:
//      Таблица значений с колонками: 
//          НомерСтроки     - номер строки дополнительной табличной части объекта-владельца
//          Представление   - представление КИ, введенное пользователем
//          СтруктураПолей  - структура с парами ключ-значение данных информации
//
Функция ТаблицаКонтактнойИнформацииОбъекта(Ссылка, ВидКонтактнойИнформации) Экспорт
	
	Запрос = Новый Запрос(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("
		|ВЫБРАТЬ 
		|	Данные.ИдентификаторСтрокиТабличнойЧасти КАК НомерСтроки,
		|	Данные.Представление                     КАК Представление,
		|	Данные.ЗначенияПолей                     КАК ЗначенияПолей
		|ИЗ
		|	%1.КонтактнаяИнформация КАК Данные
		|ГДЕ
		|	Данные.Ссылка = &Ссылка
		|	И Данные.Вид = &Вид
		|УПОРЯДОЧИТЬ ПО
		|	Данные.ИдентификаторСтрокиТабличнойЧасти
		|", Ссылка.Метаданные().ПолноеИмя()));
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Вид", ВидКонтактнойИнформации);
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("НомерСтроки");
	Результат.Колонки.Добавить("Представление");
	Результат.Колонки.Добавить("СтруктураПолей");
	Результат.Индексы.Добавить("НомерСтроки");
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаДанных = Результат.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаДанных, Выборка, "НомерСтроки, Представление");
		СтрокаДанных.СтруктураПолей = КонтактнаяИнформацияСлужебный.ПредыдущаяСтруктураКонтактнойИнформацииXML(
			Выборка.ЗначенияПолей, ВидКонтактнойИнформации);
	КонецЦикла;
	
	Возврат  Результат;
КонецФункции

// Предназначена для создания временной таблицы с контактной информацией нескольких объектов
//
// Параметры:
//    МенеджерВременныхТаблиц
//    МассивОбъектов, массив владельцев контактной информации
//        Тип – массив
//        Все элементы одного типа
//    ТипыКИ – массив, необязательный, если не задан все типы
//    ВидыКИ – массив, необязательный, если не задан все виды
//
// В менеджер создается временная таблица ВТКонтактнаяИнформация с полями:
//    Объект
//    Вид
//    Тип
//    ЗначенияПолей
//    Представление
//
Процедура СоздатьВТКонтактнаяИнформация(МенеджерВременныхТаблиц, МассивОбъектов, ТипыКИ=Неопределено, ВидыКИ=Неопределено) Экспорт
	
	Если ТипЗнч(МассивОбъектов) = Тип("Массив") И МассивОбъектов.Количество() > 0 Тогда
		Ссылка = МассивОбъектов.Получить(0);
	Иначе
		ВызватьИсключение НСтр("ru='Неверное значение для массива владельцев контактной информации.'");
	КонецЕсли;
	
	Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КонтактнаяИнформация.Ссылка КАК Объект,
		|	КонтактнаяИнформация.Вид КАК Вид,
		|	КонтактнаяИнформация.Тип КАК Тип,
		|	КонтактнаяИнформация.ЗначенияПолей КАК ЗначенияПолей,
		|	КонтактнаяИнформация.Представление КАК Представление
		|ПОМЕСТИТЬ ВТКонтактнаяИнформация
		|ИЗ
		|	" + Ссылка.Метаданные().ПолноеИмя() + ".КонтактнаяИнформация КАК КонтактнаяИнформация
		|ГДЕ
		|	КонтактнаяИнформация.Ссылка В (&МассивОбъектов)
		|	" + ?(ТипыКИ=Неопределено, "", "И КонтактнаяИнформация.Тип В (&ТипыКИ)") + "
		|	" + ?(ВидыКИ=Неопределено, "", "И КонтактнаяИнформация.Вид В (&ВидыКИ)") + "
		|");
	
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("ТипыКИ", ТипыКИ);
	Запрос.УстановитьПараметр("ВидыКИ", ВидыКИ);
	
	Запрос.Выполнить();
КонецПроцедуры

// Предназначена для получения контактной информации для нескольких объектов
//
// Параметры:
//    МассивОбъектов, массив владельцев контактной информации
//        Тип – массив
//        Все элементы одного типа
//    ТипыКИ – массив, необязательный, если не задан все типы
//    ВидыКИ – массив, необязательный, если не задан все виды
//
// Возвращаемое значение
//    Таблица значений с полями:
//        Объект
//        Вид
//        Тип
//        ЗначенияПолей
//        Представление
//
Функция КонтактнаяИнформацияОбъектов(МассивОбъектов, ТипыКИ = Неопределено, ВидыКИ = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	СоздатьВТКонтактнаяИнформация(Запрос.МенеджерВременныхТаблиц, МассивОбъектов, ТипыКИ, ВидыКИ);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КонтактнаяИнформация.Объект КАК Объект,
	|	КонтактнаяИнформация.Вид КАК Вид,
	|	КонтактнаяИнформация.Тип КАК Тип,
	|	КонтактнаяИнформация.ЗначенияПолей КАК ЗначенияПолей,
	|	КонтактнаяИнформация.Представление КАК Представление
	|ИЗ
	|	ВТКонтактнаяИнформация КАК КонтактнаяИнформация";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Заполняет контактную информацию в объектах
// Параметры:
//    ДанныеЗаполнения - Таблица значений с колонками:
//        Приемник - ссылка или объект, в котором нужно заполнить КИ
//        ВидКИ - вид контактной информации, заполняемый в приемнике
//        СтруктураКИ - заполненная структура контактной информации
//        КлючСтроки - Структура отбора для поиска строки в табличной части,
//        где Ключ - Имя колонки в табличной части, значение - значение отбора
//
Процедура ЗаполнитьКонтактнуюИнформациюОбъектов(ДанныеЗаполнения) Экспорт
	
	ПредыдущийПриемник = Неопределено;
	ДанныеЗаполнения.Сортировать("Приемник, ВидКИ");
	
	Для каждого СтрокаЗаполнения Из ДанныеЗаполнения Цикл
		
		Приемник = СтрокаЗаполнения.Приемник;
		Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(Приемник)) Тогда
			Приемник = Приемник.ПолучитьОбъект();
		КонецЕсли;
		
		Если ПредыдущийПриемник <> Неопределено И ПредыдущийПриемник <> Приемник Тогда
			Если ПредыдущийПриемник.Ссылка = Приемник.Ссылка Тогда
				Приемник = ПредыдущийПриемник;
			Иначе
				ПредыдущийПриемник.Записать();
			КонецЕсли;
		КонецЕсли;
		
		ВидКИ = СтрокаЗаполнения.ВидКИ;
		ИмяОбъектаПриемника = Приемник.Метаданные().Имя;
		ИмяТабличнойЧасти = ИмяТабличнойЧастиПоВидуКИ(ВидКИ, ИмяОбъектаПриемника);
		
		Если ПустаяСтрока(ИмяТабличнойЧасти) Тогда
			ЗаполнитьКонтактнуюИнформациюТабличнойЧасти(Приемник, ВидКИ, СтрокаЗаполнения.СтруктураКИ);
		Иначе
			Если ТипЗнч(СтрокаЗаполнения.КлючСтроки) <> Тип("Структура") Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрокаЗаполнения.КлючСтроки.Свойство("НомерСтроки") Тогда
				КоличествоСтрокТабличнойЧасти = Приемник[ИмяТабличнойЧасти].Количество();
				НомерСтроки = СтрокаЗаполнения.КлючСтроки.НомерСтроки;
				Если НомерСтроки > 0 И НомерСтроки <= КоличествоСтрокТабличнойЧасти Тогда
					СтрокаТабличнойЧасти = Приемник[ИмяТабличнойЧасти][НомерСтроки - 1];
					ЗаполнитьКонтактнуюИнформациюТабличнойЧасти(Приемник, ВидКИ, СтрокаЗаполнения.СтруктураКИ, СтрокаТабличнойЧасти);
				КонецЕсли;
			Иначе
				СтрокиТабличнойЧасти = Приемник[ИмяТабличнойЧасти].НайтиСтроки(СтрокаЗаполнения.КлючСтроки);
				Для каждого СтрокаТабличнойЧасти Из СтрокиТабличнойЧасти Цикл
					ЗаполнитьКонтактнуюИнформациюТабличнойЧасти(Приемник, ВидКИ, СтрокаЗаполнения.СтруктураКИ, СтрокаТабличнойЧасти);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		ПредыдущийПриемник = Приемник;
		
	КонецЦикла;
	
	Если ПредыдущийПриемник <> Неопределено Тогда
		ПредыдущийПриемник.Записать();
	КонецЕсли;
	
КонецПроцедуры

// Заполняет контактную информацию объекта
// Параметры:
//    Приемник - ссылка или объект, в котором нужно заполнить КИ
//    ВидКИ - вид контактной информации, заполняемый в приемнике
//    СтруктураКИ - заполненная структура контактной информации
//    КлючСтроки - Структура отбора для поиска строки в табличной части,
//                 где Ключ - Имя колонки в табличной части, значение - значение отбора
//
Процедура ЗаполнитьКонтактнуюИнформациюОбъекта(Приемник, ВидКИ, СтруктураКИ, КлючСтроки = Неопределено) Экспорт
	
	ДанныеЗаполнения = Новый ТаблицаЗначений;
	ДанныеЗаполнения.Колонки.Добавить("Приемник");
	ДанныеЗаполнения.Колонки.Добавить("ВидКИ");
	ДанныеЗаполнения.Колонки.Добавить("СтруктураКИ");
	ДанныеЗаполнения.Колонки.Добавить("КлючСтроки");
	
	СтрокаЗаполнения = ДанныеЗаполнения.Добавить();
	СтрокаЗаполнения.Приемник = Приемник;
	СтрокаЗаполнения.ВидКИ = ВидКИ;
	СтрокаЗаполнения.СтруктураКИ = СтруктураКИ;
	СтрокаЗаполнения.КлючСтроки = КлючСтроки;
	
	ЗаполнитьКонтактнуюИнформациюОбъектов(ДанныеЗаполнения);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС

// См. описание этой же процедуры в модуле СтандартныеПодсистемыСервер.
Процедура ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики) Экспорт
	
	// СЕРВЕРНЫЕ ОБРАБОТЧИКИ.
	
	СерверныеОбработчики[
		"СтандартныеПодсистемы.ОбновлениеВерсииИБ\ПриДобавленииОбработчиковОбновления"
	].Добавить("УправлениеКонтактнойИнформацией");
	
КонецПроцедуры

//  Возвращает значение перечисления тип вида контактной информации
//
//  Параметры:
//    ВидИнформации - перечисление типа, ссылка на справочник ВидыКонтактнойИнформации или объект
//                    с полем "Тип"
//
Функция ТипВидаКонтактнойИнформации(Знач ВидИнформации) Экспорт
	Результат = Неопределено;
	
	Тип = ТипЗнч(ВидИнформации);
	Если Тип=Тип("ПеречислениеСсылка.ТипыКонтактнойИнформации") Тогда
		Результат = ВидИнформации;
	ИначеЕсли Тип=Тип("СправочникСсылка.ВидыКонтактнойИнформации") Тогда
		Результат = ВидИнформации.Тип;
	ИначеЕсли ВидИнформации<>Неопределено Тогда
		Данные = Новый Структура("Тип");
		ЗаполнитьЗначенияСвойств(Данные, ВидИнформации);
		Результат = Данные.Тип;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ОбработкаЗаполненияКонтактнойИнформации(Источник, ДанныеЗаполнения, СтандартнаяОбработка) Экспорт
	
	Если ТипЗнч(ДанныеЗаполнения) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	// Заполним наименование
	Наименование = "";
	Если ДанныеЗаполнения.Свойство("Наименование", Наименование) Тогда
		Источник.Наименование = Наименование;
	КонецЕсли;
	
	// Заполним контактную информацию
	КонтактнаяИнформация = Неопределено;
	Если ДанныеЗаполнения.Свойство("КонтактнаяИнформация", КонтактнаяИнформация) Тогда
		Для Каждого СтрокаКИ Из КонтактнаяИнформация Цикл
			
			НоваяСтрокаКИ = Источник.КонтактнаяИнформация.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаКИ, СтрокаКИ);
			
			Если ТипЗнч(СтрокаКИ.ЗначенияПолей) = Тип("СписокЗначений") Тогда
				НоваяСтрокаКИ.ЗначенияПолей = Новый ХранилищеЗначения(СтрокаКИ.ЗначенияПолей);
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Обновляет поля контактной информации из ТаблицыЗначений (например объекта другого вида справочника)
//
// Параметры:
//    Источник - ТаблицаЗначений - таблица значений с контактной информацией.
//    Приемник - УправляемаяФорма - форма объекта. куда надо передать контактную информацию.
//
Процедура ЗаполнитьКонтактнуюИнформацию(Источник, Приемник) Экспорт
	КоллекцияПолейКонтактнойИнформации = Приемник.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов;
	
	Для Каждого ЭлементКоллекцияПолейКонтактнойИнформации Из КоллекцияПолейКонтактнойИнформации Цикл
		
		СтрокаВКИ = Источник.Найти(ЭлементКоллекцияПолейКонтактнойИнформации.Вид, "Вид");
		Если СтрокаВКИ <> Неопределено Тогда
			Приемник[ЭлементКоллекцияПолейКонтактнойИнформации.ИмяРеквизита] = СтрокаВКИ.Представление;
			ЭлементКоллекцияПолейКонтактнойИнформации.ЗначенияПолей          = УправлениеКонтактнойИнформациейКлиентСервер.ПреобразоватьСтрокуВСписокПолей(СтрокаВКИ.ЗначенияПолей);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Устарело. Будет удалено в следующем релизе БСП. Необходимо использовать "ЗаполнитьКонтактнуюИнформацию"
Процедура ЗаполнитьКонтактнуюИнофрмацию(Источник, Приемник) Экспорт
	ЗаполнитьКонтактнуюИнформацию(Источник, Приемник);
КонецПроцедуры

Процедура ДобавитьОписаниеЭлемента(Форма, ИмяЭлемента, Приоритет, ЭтоКоманда = Ложь, ЭтоРеквизитТабличнойЧасти = Ложь)
	
	НоваяСтрока = Форма.ДобавленныеЭлементыКонтактнойИнформации.Добавить();
	НоваяСтрока.ИмяЭлемента = ИмяЭлемента;
	НоваяСтрока.Приоритет = Приоритет;
	НоваяСтрока.ЭтоКоманда = ЭтоКоманда;
	НоваяСтрока.ЭтоРеквизитТабличнойЧасти = ЭтоРеквизитТабличнойЧасти;
	
КонецПроцедуры

Процедура УдалитьОписаниеЭлемента(Форма, ИмяЭлемента)
	
	ДобавленныеЭлементы = Форма.ДобавленныеЭлементыКонтактнойИнформации;
	Отбор = Новый Структура("ИмяЭлемента", ИмяЭлемента);
	НайденнаяСтрока = ДобавленныеЭлементы.НайтиСтроки(Отбор)[0];
	ДобавленныеЭлементы.Удалить(НайденнаяСтрока);
	
КонецПроцедуры

Функция ЗаголовокСлева(Форма, Знач ПоложениеЗаголовкаКИ = Неопределено)
	
	Если Не ЗначениеЗаполнено(ПоложениеЗаголовкаКИ) Тогда
		
		СохраненноеПоложениеЗаголовка = Форма.КонтактнаяИнформацияПоложениеЗаголовка;
		Если ЗначениеЗаполнено(СохраненноеПоложениеЗаголовка) Тогда
			ПоложениеЗаголовкаКИ = ПоложениеЗаголовкаЭлементаФормы[СохраненноеПоложениеЗаголовка];
		Иначе
			ПоложениеЗаголовкаКИ = ПоложениеЗаголовкаЭлементаФормы.Верх;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат (ПоложениеЗаголовкаКИ = ПоложениеЗаголовкаЭлементаФормы.Лево);
	
КонецФункции

Процедура ИзменитьКомментарий(Форма, ИмяРеквизита, ЭтоДобавлениеКомментария)
	
	ОписаниеКонтактнойИнформации = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов;
	
	Отбор = Новый Структура("ИмяРеквизита", ИмяРеквизита);
	НайденнаяСтрока = ОписаниеКонтактнойИнформации.НайтиСтроки(Отбор)[0];
	
	// Заголовок и поле ввода
	ЗаголовокЭлемента = Форма.Элементы.Найти("Заголовок" + ИмяРеквизита);
	ИмяКомментария = "Комментарий" + ИмяРеквизита;
	
	ЗаголовокСлева = ЗаголовокСлева(Форма);
	
	Если ЭтоДобавлениеКомментария Тогда
		
		ПолеВвода = Форма.Элементы.Найти(ИмяРеквизита);
		ГруппаПолейВвода = Форма.Элементы.ГруппаПолейВводаКонтактнойИнформации;
		
		ТекущийЭлемент = ?(ГруппаПолейВвода.ПодчиненныеЭлементы.Найти(ПолеВвода.Имя) = Неопределено, ПолеВвода.Родитель, ПолеВвода);
		ИндексТекущегоЭлемента = ГруппаПолейВвода.ПодчиненныеЭлементы.Индекс(ТекущийЭлемент);
		СледующийЭлемент = ГруппаПолейВвода.ПодчиненныеЭлементы.Получить(ИндексТекущегоЭлемента + 1);
		
		Комментарий = Комментарий(Форма, НайденнаяСтрока.Комментарий, ИмяКомментария, ГруппаПолейВвода);
		Форма.Элементы.Переместить(Комментарий, ГруппаПолейВвода, СледующийЭлемент);
		
		Если ЗаголовокСлева Тогда
			
			ГруппаЗаголовков = Форма.Элементы.ГруппаЗаголовковКонтактнойИнформации;
			ИндексЗаголовка = ГруппаЗаголовков.ПодчиненныеЭлементы.Индекс(ЗаголовокЭлемента);
			СледующийЗаголовок = ГруппаЗаголовков.ПодчиненныеЭлементы.Получить(ИндексЗаголовка + 1);
			
			ИмяЗаглушки = "ЗаглушкаЗаголовка" + ИмяРеквизита;
			Заглушка = Форма.Элементы.Добавить(ИмяЗаглушки, Тип("ДекорацияФормы"), ГруппаЗаголовков);
			Форма.Элементы.Переместить(Заглушка, ГруппаЗаголовков, СледующийЗаголовок);
			ДобавитьОписаниеЭлемента(Форма, ИмяЗаглушки, 2);
			
		КонецЕсли;
		
	Иначе
		
		Комментарий = Форма.Элементы[ИмяКомментария];
		Форма.Элементы.Удалить(Комментарий);
		УдалитьОписаниеЭлемента(Форма, ИмяКомментария);
		
		Если ЗаголовокСлева Тогда
			
			ЗаголовокЭлемента.Высота = 1;
			
			ИмяЗаглушки = "ЗаглушкаЗаголовка" + ИмяРеквизита;
			ЗаглушкаЗаголовка = Форма.Элементы[ИмяЗаглушки];
			Форма.Элементы.Удалить(ЗаглушкаЗаголовка);
			УдалитьОписаниеЭлемента(Форма, ИмяЗаглушки);
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Действие
	ГруппаДействий = Форма.Элементы.ГруппаДействийКонтактнойИнформации;
	ИмяЗаглушкиДействия = "ЗаглушкаДействия" + ИмяРеквизита;
	ЗаглушкаДействия = Форма.Элементы.Найти(ИмяЗаглушкиДействия);
	
	Если ЭтоДобавлениеКомментария Тогда
		
		Если ЗаглушкаДействия = Неопределено Тогда
			
			ЗаглушкаДействия = Форма.Элементы.Добавить(ИмяЗаглушкиДействия, Тип("ДекорацияФормы"), ГруппаДействий);
			ЗаглушкаДействия.Высота = 1;
			Действие = Форма.Элементы["Команда" + ИмяРеквизита];
			ИндексКоманды = ГруппаДействий.ПодчиненныеЭлементы.Индекс(Действие);
			СледующийЭлемент = ГруппаДействий.ПодчиненныеЭлементы.Получить(ИндексКоманды + 1);
			Если ЗаглушкаДействия <> СледующийЭлемент Тогда
				Форма.Элементы.Переместить(ЗаглушкаДействия, ГруппаДействий, СледующийЭлемент);
			КонецЕсли;
			ДобавитьОписаниеЭлемента(Форма, ИмяЗаглушкиДействия, 2);
			
		Иначе
			
			ЗаглушкаДействия.Высота = 2;
			
		КонецЕсли;
		
	Иначе
		
		Если ЗаглушкаДействия.Высота = 1 Тогда
			
			Форма.Элементы.Удалить(ЗаглушкаДействия);
			УдалитьОписаниеЭлемента(Форма, ИмяЗаглушкиДействия);
			
		Иначе
			
			ЗаглушкаДействия.Высота = 1;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьСтрокуКонтактнойИнформации(Форма, Результат)
	
	ДобавляемыйВид = Результат.ДобавляемыйВид;
	ТаблицаКонтактнойИнформации = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов;
	
	Отбор = Новый Структура("Вид", ДобавляемыйВид);
	НайденныеСтроки = ТаблицаКонтактнойИнформации.НайтиСтроки(Отбор);
	КоличествоЭлементов = НайденныеСтроки.Количество();
	
	ПоследняяСтрока = НайденныеСтроки.Получить(КоличествоЭлементов-1);
	ИндексДобавляемойСтроки = ТаблицаКонтактнойИнформации.Индекс(ПоследняяСтрока) + 1;
	ЭтоПоследняяСтрока = Ложь;
	Если ИндексДобавляемойСтроки = ТаблицаКонтактнойИнформации.Количество() Тогда
		ЭтоПоследняяСтрока = Истина;
	Иначе
		ИмяСледующегоРеквизита = ТаблицаКонтактнойИнформации[ИндексДобавляемойСтроки].ИмяРеквизита;
	КонецЕсли;
	
	НоваяСтрока = ТаблицаКонтактнойИнформации.Вставить(ИндексДобавляемойСтроки);
	ИмяРеквизита = "КонтактнаяИнформацияПоле" + НоваяСтрока.ПолучитьИдентификатор();
	Тип = ДобавляемыйВид.Тип;
	НоваяСтрока.ИмяРеквизита = ИмяРеквизита;
	НоваяСтрока.Вид = ДобавляемыйВид;
	НоваяСтрока.Тип = Тип;
	НоваяСтрока.ЭтоРеквизитТабличнойЧасти = Ложь;
	
	МассивДобавляемыхРеквизитов = Новый Массив;
	МассивДобавляемыхРеквизитов.Добавить(Новый РеквизитФормы(ИмяРеквизита, Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(500)), , ДобавляемыйВид.Наименование, Истина));
	
	Форма.ИзменитьРеквизиты(МассивДобавляемыхРеквизитов);
	
	ЗаголовокСлева = ЗаголовокСлева(Форма);
	
	//Отрисовка на форме
	Если ЗаголовокСлева Тогда
		ГруппаЗаголовков = Форма.Элементы.ГруппаЗаголовковКонтактнойИнформации;
		Заголовок = Заголовок(Форма, Тип, ИмяРеквизита, ГруппаЗаголовков, ДобавляемыйВид.Наименование);
		
		Если Не ЭтоПоследняяСтрока Тогда
			СледующийЗаголовок = Форма.Элементы["Заголовок" + ИмяСледующегоРеквизита];
			Форма.Элементы.Переместить(Заголовок, ГруппаЗаголовков, СледующийЗаголовок);
		КонецЕсли;
	КонецЕсли;
	
	ГруппаПолейВвода = Форма.Элементы.ГруппаПолейВводаКонтактнойИнформации;
	ПолеВвода = ПолеВвода(Форма, ДобавляемыйВид, Тип, ИмяРеквизита, ДобавляемыйВид.Подсказка);
	
	Если Не ЭтоПоследняяСтрока Тогда
		
		ИмяСледующегоЭлемента = ПоследняяСтрока.ИмяРеквизита;
		
		Если ЗначениеЗаполнено(ПоследняяСтрока.Комментарий) Тогда
			ИмяСледующегоЭлемента = "Комментарий" + ИмяСледующегоЭлемента;
		КонецЕсли;
		
		ИндексСледующегоЭлемента = ГруппаПолейВвода.ПодчиненныеЭлементы.Индекс(Форма.Элементы[ИмяСледующегоЭлемента]) + 1;
		СледующийЭлемент = ГруппаПолейВвода.ПодчиненныеЭлементы.Получить(ИндексСледующегоЭлемента);
		
		Форма.Элементы.Переместить(ПолеВвода, ГруппаПолейВвода, СледующийЭлемент);
		
	КонецЕсли;
	
	ГруппаДействий = Форма.Элементы.ГруппаДействийКонтактнойИнформации;
	Отбор = Новый Структура("Тип", Перечисления.ТипыКонтактнойИнформации.Адрес);
	КоличествоАдресов = ТаблицаКонтактнойИнформации.НайтиСтроки(Отбор).Количество();
	
	ИмяДействия = "Команда" + ИмяСледующегоРеквизита;
	ИмяЗаглушки = "ДекорацияВерх" + ИмяСледующегоРеквизита;
	
	Если Форма.Элементы.Найти(ИмяЗаглушки) <> Неопределено Тогда
		ИмяСледующегоДействия = ИмяЗаглушки;
	ИначеЕсли Форма.Элементы.Найти(ИмяДействия) <> Неопределено Тогда
		ИмяСледующегоДействия = ИмяДействия;
	Иначе
		ИмяСледующегоДействия = "ЗаглушкаДействия" + ИмяСледующегоРеквизита;
	КонецЕсли;
	
	Действие = Действие(Форма, Тип, ИмяРеквизита, ГруппаДействий, КоличествоАдресов);
	Если Не ЭтоПоследняяСтрока Тогда
		СледующееДействие = Форма.Элементы[ИмяСледующегоДействия];
		Форма.Элементы.Переместить(Действие, ГруппаДействий, СледующееДействие);
	КонецЕсли;
	
	Форма.ТекущийЭлемент = Форма.Элементы[ИмяРеквизита];
	
	Если Тип = Перечисления.ТипыКонтактнойИнформации.Адрес
		И ДобавляемыйВид.РедактированиеТолькоВДиалоге Тогда
		
		Результат.Вставить("ЭлементФормыАдреса", ИмяРеквизита);
		
	КонецЕсли;
	
КонецПроцедуры

Функция Заголовок(Форма, Тип, ИмяРеквизита, ГруппаЗаголовков, Наименование, ЭтоНовыйВидКИ = Ложь, ЕстьКомментарий = Ложь)
	
	ИмяЗаголовка = "Заголовок" + ИмяРеквизита;
	Элемент = Форма.Элементы.Добавить(ИмяЗаголовка, Тип("ДекорацияФормы"), ГруппаЗаголовков);
	Элемент.Заголовок = ?(ЭтоНовыйВидКИ, Наименование + ":", "");
	
	Если Тип = Перечисления.ТипыКонтактнойИнформации.Другое Тогда
		Элемент.Высота = 5;
		Элемент.ВертикальноеПоложение = ВертикальноеПоложениеЭлемента.Верх;
	Иначе
		Элемент.ВертикальноеПоложение = ВертикальноеПоложениеЭлемента.Центр;
	КонецЕсли;
	
	ДобавитьОписаниеЭлемента(Форма, ИмяЗаголовка, 2);
	
	Если ЕстьКомментарий Тогда
		
		ИмяЗаглушки = "ЗаглушкаЗаголовка" + ИмяРеквизита;
		Заглушка = Форма.Элементы.Добавить(ИмяЗаглушки, Тип("ДекорацияФормы"), ГруппаЗаголовков);
		ДобавитьОписаниеЭлемента(Форма, ИмяЗаглушки, 2);
		
	КонецЕсли;
	
	Возврат Элемент;
	
КонецФункции

Функция ПолеВвода(Форма, Вид, Тип, ИмяРеквизита, Подсказка, ЭтоНовыйВидКИ = Ложь, ОбязательноеЗаполнение = Ложь)
	
	ЗаголовокСлева = ЗаголовокСлева(Форма);
	
	Элемент = Форма.Элементы.Добавить(ИмяРеквизита, Тип("ПолеФормы"), Форма.Элементы.ГруппаПолейВводаКонтактнойИнформации);
	Элемент.Вид = ВидПоляФормы.ПолеВвода;
	Элемент.Подсказка = Подсказка;
	Элемент.ПутьКДанным = ИмяРеквизита;
	Элемент.РастягиватьПоГоризонтали = Истина;
	Элемент.ПоложениеЗаголовка = ?(ЗаголовокСлева Или Не ЭтоНовыйВидКИ, ПоложениеЗаголовкаЭлементаФормы.Нет, ПоложениеЗаголовкаЭлементаФормы.Верх);
	Элемент.УстановитьДействие("Очистка", "Подключаемый_КонтактнаяИнформацияОчистка");
	
	ДобавитьОписаниеЭлемента(Форма, ИмяРеквизита, 2);
	
	// Устанавливаем свойства поля ввода
	Если Тип = Перечисления.ТипыКонтактнойИнформации.Другое Тогда
		Элемент.Высота = 5;
		Элемент.МногострочныйРежим = Истина;
		Элемент.РастягиватьПоВертикали = Ложь;
	Иначе
		
		// Ввод комментария через контекстное меню
		ИмяКоманды = "КонтекстноеМеню" + ИмяРеквизита;
		Команда = Форма.Команды.Добавить(ИмяКоманды);
		Кнопка = Форма.Элементы.Добавить(ИмяКоманды,Тип("КнопкаФормы"), Элемент.КонтекстноеМеню);
		Команда.Подсказка = НСтр("ru='Ввести комментарий'");
		Команда.Действие = "Подключаемый_КонтактнаяИнформацияВыполнитьКоманду";
		Кнопка.Заголовок = НСтр("ru='Ввести комментарий'");
		Кнопка.ИмяКоманды = ИмяКоманды;
		Команда.ИзменяетСохраняемыеДанные = Истина;
		
		ДобавитьОписаниеЭлемента(Форма, ИмяКоманды, 1);
		ДобавитьОписаниеЭлемента(Форма, ИмяКоманды, 9, Истина);
	КонецЕсли;
	
	Если ОбязательноеЗаполнение И ЭтоНовыйВидКИ Тогда
		Элемент.АвтоОтметкаНезаполненного = Истина;
	КонецЕсли;
	
	// Редактирование в диалоге
	Если ДляТипаКонтактнойИнформацииДоступноРедактированиеВДиалоге(Тип) Тогда
		
		Элемент.КнопкаВыбора = Истина;
		
		Если Вид.РедактированиеТолькоВДиалоге Тогда
			Элемент.РедактированиеТекста = Ложь;
			Элемент.ЦветФона = ЦветаСтиля.КонтактнаяИнформацияСРедактированиемВДиалогеЦвет;
		КонецЕсли;
		Элемент.УстановитьДействие("НачалоВыбора", "Подключаемый_КонтактнаяИнформацияНачалоВыбора");
		
	КонецЕсли;
	Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_КонтактнаяИнформацияПриИзменении");
	
	Возврат Элемент;
	
КонецФункции

Функция Действие(Форма, Тип, ИмяРеквизита, ГруппаДействий, КоличествоАдресов, ЕстьКомментарий = Ложь)
	
	Если (Тип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница
		Или Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
		Или (Тип = Перечисления.ТипыКонтактнойИнформации.Адрес И КоличествоАдресов > 1) Тогда
		
		// Есть действие
		ИмяКоманды = "Команда" + ИмяРеквизита;
		Команда = Форма.Команды.Добавить(ИмяКоманды);
		ДобавитьОписаниеЭлемента(Форма, ИмяКоманды, 9, Истина);
		Команда.Отображение = ОтображениеКнопки.Картинка;
		Команда.Действие = "Подключаемый_КонтактнаяИнформацияВыполнитьКоманду";
		
		Элемент = Форма.Элементы.Добавить(ИмяКоманды,Тип("КнопкаФормы"), ГруппаДействий);
		ДобавитьОписаниеЭлемента(Форма, ИмяКоманды, 2);
		Элемент.ИмяКоманды = ИмяКоманды;
		
		Если Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
			
			Элемент.Заголовок = НСтр("ru='Заполнить'");
			Команда.Подсказка = НСтр("ru='Заполнить адрес'");
			Команда.Картинка = БиблиотекаКартинок.ПереместитьВлево;
			Команда.ИзменяетСохраняемыеДанные = Истина;
			
		ИначеЕсли Тип = Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда
			
			Элемент.Заголовок = НСтр("ru='Перейти'");
			Команда.Подсказка = НСтр("ru='Перейти по ссылке'");
			Команда.Картинка = БиблиотекаКартинок.КонтактнаяИнформацияПерейтиПоСсылке;
			
		ИначеЕсли Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
			
			Элемент.Заголовок = НСтр("ru='Написать письмо'");
			Команда.Подсказка = НСтр("ru='Написать письмо'");
			Команда.Картинка = БиблиотекаКартинок.ОтправитьЭлектронноеПисьмо;
			
		КонецЕсли;
		
		Если ЕстьКомментарий Тогда
			
			ИмяЗаглушкиДействия = "ЗаглушкаДействия" + ИмяРеквизита;
			ЗаглушкаДействия = Форма.Элементы.Добавить(ИмяЗаглушкиДействия, Тип("ДекорацияФормы"), ГруппаДействий);
			ЗаглушкаДействия.Высота = 1;
			ДобавитьОписаниеЭлемента(Форма, ИмяЗаглушкиДействия, 2);
			
		КонецЕсли;
		
	Иначе
		
		//Действия нет, ставим заглушку
		ИмяЗаглушкиДействия = "ЗаглушкаДействия" + ИмяРеквизита;
		Элемент = Форма.Элементы.Добавить(ИмяЗаглушкиДействия, Тип("ДекорацияФормы"), ГруппаДействий);
		ДобавитьОписаниеЭлемента(Форма, ИмяЗаглушкиДействия, 2);
		Если ЕстьКомментарий Тогда
			Элемент.Высота = 2;
		ИначеЕсли Тип = Перечисления.ТипыКонтактнойИнформации.Другое Тогда
			Элемент.Высота = 5;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Элемент;
	
КонецФункции

Функция Комментарий(Форма, Комментарий, ИмяКомментария, ГруппаДляРазмещения)
	
	Элемент = Форма.Элементы.Добавить(ИмяКомментария, Тип("ДекорацияФормы"), ГруппаДляРазмещения);
	Элемент.Заголовок = Комментарий;
	Элемент.ЦветТекста = ЦветаСтиля.ПоясняющийТекст;
	Элемент.РастягиватьПоГоризонтали = Истина;
	Элемент.РастягиватьПоВертикали = Ложь;
	Элемент.Высота = 1;
	Элемент.ВертикальноеПоложение = ВертикальноеПоложениеЭлемента.Верх;
	
	ДобавитьОписаниеЭлемента(Форма, ИмяКомментария, 2);
	
	Возврат Элемент;
	
КонецФункции

Функция Группа(ИмяГруппы, Форма, Родитель, Группировка, ПорядокУдаления)
	
	НоваяГруппа = Форма.Элементы.Добавить(ИмяГруппы, Тип("ГруппаФормы"), Родитель);
	НоваяГруппа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	НоваяГруппа.ОтображатьЗаголовок = Ложь;
	НоваяГруппа.Отображение = ОтображениеОбычнойГруппы.Нет;
	НоваяГруппа.Группировка = Группировка;
	ДобавитьОписаниеЭлемента(Форма, ИмяГруппы, ПорядокУдаления);
	
	Возврат НоваяГруппа;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий подсистем БСП

////////////////////////////////////////////////////////////////////////////////
// Заполнение дополнительных реквизитов табличной части "Контактная информация"

// Заполняет дополнительные реквизиты табличной части "Контактная информация" для адреса
//
// Параметры:
//    СтрокаТабличнойЧасти - заполняемая строка табличной части "Контактная информация".
//    Источник             - объект XDTO с контактной информацией
//
Процедура ЗаполнитьРеквизитыТабличнойЧастиДляАдреса(СтрокаТабличнойЧасти, Источник)
	
	// Умолчания
	СтрокаТабличнойЧасти.Страна = "";
	СтрокаТабличнойЧасти.Регион = "";
	СтрокаТабличнойЧасти.Город  = "";
	
	Адрес = Источник.Состав;
	
	ПространствоИмен = КонтактнаяИнформацияКлиентСерверПовтИсп.ПространствоИмен();
	ЭтоАдрес = ТипЗнч(Адрес)=Тип("ОбъектXDTO") И Адрес.Тип()=ФабрикаXDTO.Тип(ПространствоИмен, "Адрес");
	Если ЭтоАдрес И Адрес.Состав<>Неопределено Тогда 
		СтрокаТабличнойЧасти.Страна = Адрес.Страна;
		АдресРФ = КонтактнаяИнформацияСлужебный.РоссийскийАдрес(Адрес);
		Если АдресРФ<>Неопределено Тогда
			// Российский адрес
			СтрокаТабличнойЧасти.Регион = АдресРФ.СубъектРФ;
			СтрокаТабличнойЧасти.Город  = АдресРФ.Город;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Заполняет дополнительные реквизиты табличной части "Контактная информация" для адреса электронной почты.
//
// Параметры:
//    СтрокаТабличнойЧасти - заполняемая строка табличной части "Контактная информация".
//    Источник             - объект XDTO с контактной информацией
//
Процедура ЗаполнитьРеквизитыТабличнойЧастиДляАдресаЭлектроннойПочты(СтрокаТабличнойЧасти, Источник)
	
	Результат = ОбщегоНазначенияКлиентСервер.РазобратьСтрокуСПочтовымиАдресами(СтрокаТабличнойЧасти.Представление, Ложь);
	
	Если Результат.Количество() > 0 Тогда
		СтрокаТабличнойЧасти.АдресЭП = Результат[0].Адрес;
		
		Поз = Найти(СтрокаТабличнойЧасти.АдресЭП, "@");
		Если Поз <> 0 Тогда
			СтрокаТабличнойЧасти.ДоменноеИмяСервера = Сред(СтрокаТабличнойЧасти.АдресЭП, Поз+1);
		КонецЕсли;
	КонецЕсли;
	
	
КонецПроцедуры

// Заполняет дополнительные реквизиты табличной части "Контактная информация" для телефона и факса.
//
// Параметры:
//    СтрокаТабличнойЧасти - заполняемая строка табличной части "Контактная информация".
//    Источник             - объект XDTO с контактной информацией
//
Процедура ЗаполнитьРеквизитыТабличнойЧастиДляТелефона(СтрокаТабличнойЧасти, Источник)
	
	// Умолчания
	СтрокаТабличнойЧасти.НомерТелефонаБезКодов = "";
	СтрокаТабличнойЧасти.НомерТелефона         = "";
	
	Телефон = Источник.Состав;
	ПространствоИмен = КонтактнаяИнформацияКлиентСерверПовтИсп.ПространствоИмен();
	Если Телефон<>Неопределено И Телефон.Тип()=ФабрикаXDTO.Тип(ПространствоИмен, "НомерТелефона") Тогда
		КодСтраны     = Телефон.КодСтраны;
		КодГорода     = Телефон.КодГорода;
		НомерТелефона = Телефон.Номер;
		
		Если Лев(КодСтраны, 1) = "+" Тогда
			КодСтраны = Сред(КодСтраны, 2);
		КонецЕсли;
		
		Поз = Найти(НомерТелефона, ",");
		Если Поз <> 0 Тогда
			НомерТелефона = Лев(НомерТелефона, Поз-1);
		КонецЕсли;
		
		Поз = Найти(НомерТелефона, Символы.ПС);
		Если Поз <> 0 Тогда
			НомерТелефона = Лев(НомерТелефона, Поз-1);
		КонецЕсли;
		
		СтрокаТабличнойЧасти.НомерТелефонаБезКодов = УбратьРазделителиВНомерТелефона(НомерТелефона);
		СтрокаТабличнойЧасти.НомерТелефона         = УбратьРазделителиВНомерТелефона(Строка(КодСтраны) + КодГорода + НомерТелефона);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет дополнительные реквизиты табличной части "Контактная информация" для телефона и факса.
//
// Параметры:
//    СтрокаТабличнойЧасти - заполняемая строка табличной части "Контактная информация".
//    Источник             - объект XDTO с контактной информацией
//
Процедура ЗаполнитьРеквизитыТабличнойЧастиДляВебСтраницы(СтрокаТабличнойЧасти, Источник)
	
	// Умолчания
	СтрокаТабличнойЧасти.ДоменноеИмяСервера = "";
	
	АдресСтраницы = Источник.Состав;
	ПространствоИмен = КонтактнаяИнформацияКлиентСерверПовтИсп.ПространствоИмен();
	Если АдресСтраницы<>Неопределено И АдресСтраницы.Тип()=ФабрикаXDTO.Тип(ПространствоИмен, "ВебСайт") Тогда
		АдресСтрокой = АдресСтраницы.Значение;
		
		//Удалим протокол
		АдресСервера = Прав(АдресСтрокой, СтрДлина(АдресСтрокой) - Найти(АдресСтрокой, "://") );
		Поз = Найти(АдресСервера, "/");
		//Удалим путь
		АдресСервера = ?(Поз=0, АдресСервера, Лев(АдресСервера,  Поз-1));
		
		СтрокаТабличнойЧасти.ДоменноеИмяСервера = АдресСервера;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет контактную информацию в табличной части "Контактная информация" приемника
//
// Параметры:
//    Приемник - объект, в котором нужно заполнить КИ
//    ВидКИ - вид контактной информации, заполняемый в приемнике
//    СтруктураКИ - заполненная структура контактной информации
//    СтрокаТабличнойЧасти - строка табличной части приемника, если контактная информация заполняется для строки
//    Неопределено, если контактная информация заполняется для приемника
//
Процедура ЗаполнитьКонтактнуюИнформациюТабличнойЧасти(Приемник, ВидКИ, СтруктураКИ, СтрокаТабличнойЧасти = Неопределено)
	
	ПараметрыОтбора = Новый Структура;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		ДанныеЗаполнения = Приемник;
	Иначе
		ДанныеЗаполнения = СтрокаТабличнойЧасти;
		ПараметрыОтбора.Вставить("ИдентификаторСтрокиТабличнойЧасти", СтрокаТабличнойЧасти.ИдентификаторСтрокиТабличнойЧасти);
	КонецЕсли;
	
	ПараметрыОтбора.Вставить("Вид", ВидКИ);
	НайденныеСтрокиКИ = Приемник.КонтактнаяИнформация.НайтиСтроки(ПараметрыОтбора);
	Если НайденныеСтрокиКИ.Количество() = 0 Тогда
		СтрокаКИ = Приемник.КонтактнаяИнформация.Добавить();
		Если СтрокаТабличнойЧасти <> Неопределено Тогда
			СтрокаКИ.ИдентификаторСтрокиТабличнойЧасти = СтрокаТабличнойЧасти.ИдентификаторСтрокиТабличнойЧасти;
		КонецЕсли;
	Иначе
		СтрокаКИ = НайденныеСтрокиКИ[0];
	КонецЕсли;
	
	СтрокаКИ.Тип = ВидКИ.Тип;
	СтрокаКИ.Вид = ВидКИ;
	СтрокаКИ.Представление = СтруктураКИ.Представление;
	
	СтрокаКИ.ЗначенияПолей = УправлениеКонтактнойИнформациейКлиентСервер.СтрокаПолей(СтруктураКИ);
	
	ЗначенияПолей = УправлениеКонтактнойИнформациейКлиентСервер.ПреобразоватьСтрокуВСписокПолей(СтрокаКИ.ЗначенияПолей);
	ЗаполнитьДополнительныеРеквизитыКонтактнойИнформации(СтрокаКИ, СтруктураКИ.Представление, ЗначенияПолей);
	
КонецПроцедуры

// Проверяет контактную информацию электронной почты и сообщает об ошибках. 
//  Возвращает уровень ошибок: 0 - нет, 1 - неблокирующие, 2 - блокирующие
//
//  Параметры:
//     Источник      - объект XDTO с контактной информацией
//     ВидИнформации - ссылка на справочник видов КИ с настройками проверки
//     ИмяРеквизита  - необязательно имя реквизита для привязки сообщения об ошибке
//
Функция ОшибкиЗаполненияЭлектроннойПочты(Источник, ВидИнформации, Знач ИмяРеквизита="", ПолеРеквизита = "")
	
	Если Не ВидИнформации.ПроверятьКорректность Тогда
		Возврат 0;
	КонецЕсли;
	
	СтрокаОшибки = "";
	
	АдресЭП = Источник.Состав;
	ПространствоИмен = КонтактнаяИнформацияКлиентСерверПовтИсп.ПространствоИмен();
	Если АдресЭП <> Неопределено И АдресЭП.Тип() = ФабрикаXDTO.Тип(ПространствоИмен, "ЭлектроннаяПочта") Тогда
		Попытка
			Результат = ОбщегоНазначенияКлиентСервер.РазобратьСтрокуСПочтовымиАдресами(АдресЭП.Значение);
			Если Результат.Количество() > 1 Тогда
				
				СтрокаОшибки = Нстр("ru = 'Допускается ввод только одного адреса электронной почты'");
				
			КонецЕсли;
		Исключение
			СтрокаОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		КонецПопытки;
	КонецЕсли;
	
	Если Не ПустаяСтрока(СтрокаОшибки) Тогда
		ВывестиСообщениеПользователю(СтрокаОшибки, ИмяРеквизита, ПолеРеквизита);
		УровеньОшибки = ?(ВидИнформации.ЗапрещатьВводНекорректного, 2, 1);
	Иначе
		УровеньОшибки = 0;
	КонецЕсли;
	
	Возврат УровеньОшибки;
	
КонецФункции

// Проверяет контактную информацию адреса и сообщает об ошибках. Возвращает флаг наличия ошибок
// Возвращает уровень ошибок: 0 - нет, 1 - неблокирующие, 2 - блокирующие
//
// Параметры:
//    Источник      - объект XDTO с контактной информацией
//    ВидИнформации - ссылка на справочник видов КИ с настройками проверки
//    ИмяРеквизита  - необязательно имя реквизита для привязки сообщения об ошибке
//
Функция ОшибкиЗаполненияАдреса(Источник, ВидИнформации, ИмяРеквизита="", ПолеРеквизита = "")
	Если Не ВидИнформации.ПроверятьКорректность Тогда
		Возврат 0;
	КонецЕсли;
	ЕстьОшибки = Ложь;
	
	Адрес = Источник.Состав;
	ПространствоИмен = КонтактнаяИнформацияКлиентСерверПовтИсп.ПространствоИмен();
	Если Адрес<>Неопределено И Адрес.Тип()=ФабрикаXDTO.Тип(ПространствоИмен, "Адрес") Тогда
		СписокОшибок = КонтактнаяИнформацияСлужебный.ОшибкиЗаполненияАдреса(Адрес, ВидИнформации);
		Для Каждого Элемент Из СписокОшибок Цикл
			ВывестиСообщениеПользователю(Элемент.Представление, ИмяРеквизита, ПолеРеквизита);
			ЕстьОшибки = Истина;
		КонецЦикла;
	КонецЕсли;
	
	Если ЕстьОшибки И ВидИнформации.ЗапрещатьВводНекорректного Тогда
		Возврат 2;
	ИначеЕсли ЕстьОшибки Тогда
		Возврат 1;
	КонецЕсли;
	
	Возврат 0;
КонецФункции    

//  Проверяет контактную информацию телефона и сообщает об ошибках. Возвращает флаг наличия ошибок
//  Возвращает уровень ошибок: 0 - нет, 1 - неблокирующие, 2 - блокирующие
//
//  Параметры:
//    Источник      - объект XDTO с контактной информацией
//    ВидИнформации - ссылка на справочник видов КИ с настройками проверки
//    ИмяРеквизита  - необязательно имя реквизита для привязки сообщения об ошибке
//
Функция ОшибкиЗаполненияТелефона(Источник, ВидИнформации, ИмяРеквизита="")
	Возврат 0;
КонецФункции

// Проверяет контактную информацию веб страницы и сообщает об ошибках. Возвращает флаг наличия ошибок
// Возвращает уровень ошибок: 0 - нет, 1 - неблокирующие, 2 - блокирующие
//
// Параметры:
//    Источник      - объект XDTO с контактной информацией
//    ВидИнформации - ссылка на справочник видов КИ с настройками проверки
//    ИмяРеквизита  - необязательно имя реквизита для привязки сообщения об ошибке
//
Функция ОшибкиЗаполненияВебСтраницы(Источник, ВидИнформации, ИмяРеквизита="")
	Возврат 0;
КонецФункции

// Убирает разделители в номере телефона.
//
// Параметры:
//    НомерТелефона - Строка - номер телефона или факса.
//
// Возвращаемое значение - Строка - номер телефона или факса без разделителей.
//
Функция УбратьРазделителиВНомерТелефона(Знач НомерТелефона)
	
	Поз = Найти(НомерТелефона, ",");
	Если Поз <> 0 Тогда
		НомерТелефона = Лев(НомерТелефона, Поз-1);
	КонецЕсли;
	
	НомерТелефона = СтрЗаменить(НомерТелефона, "-", "");
	НомерТелефона = СтрЗаменить(НомерТелефона, " ", "");
	НомерТелефона = СтрЗаменить(НомерТелефона, "+", "");
	
	Возврат НомерТелефона;
	
КонецФункции

// Проверяет контактную информацию и записывает ее в таблицу значений
//
Функция ПроверитьКонтактнуюИнформацию(Представление, ЗначенияПолей, ВидИнформации, ТипИнформации,
	ИмяРеквизита, Комментарий = Неопределено, ПутьКРеквизиту = "")
	
	ТекстСериализации = ?(ПустаяСтрока(ЗначенияПолей), Представление, ЗначенияПолей);
	
	ОбъектКИ = КонтактнаяИнформацияСлужебный.ДесериализацияКонтактнойИнформации(ТекстСериализации, ВидИнформации);
	Если Комментарий <> Неопределено Тогда
		КонтактнаяИнформацияСлужебный.КомментарийКонтактнойИнформации(ОбъектКИ, Комментарий);
	КонецЕсли;
	
	КонтактнаяИнформацияСлужебный.ПредставлениеКонтактнойИнформации(ОбъектКИ, Представление);
	ЗначенияПолей = КонтактнаяИнформацияСлужебный.СериализацияКонтактнойИнформации(ОбъектКИ);
	
	Если ПустаяСтрока(Представление) И ПустаяСтрока(ОбъектКИ.Комментарий) Тогда
		Возврат 0;
	КонецЕсли;
	
	// Проверка
	Если ТипИнформации=Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
		УровеньОшибок = ОшибкиЗаполненияЭлектроннойПочты(ОбъектКИ, ВидИнформации, ИмяРеквизита, ПутьКРеквизиту);
	ИначеЕсли ТипИнформации=Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		УровеньОшибок = ОшибкиЗаполненияАдреса(ОбъектКИ, ВидИнформации, ИмяРеквизита);
	ИначеЕсли ТипИнформации=Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		УровеньОшибок = ОшибкиЗаполненияТелефона(ОбъектКИ, ВидИнформации, ИмяРеквизита);
	ИначеЕсли ТипИнформации=Перечисления.ТипыКонтактнойИнформации.Факс Тогда
		УровеньОшибок = ОшибкиЗаполненияТелефона(ОбъектКИ, ВидИнформации, ИмяРеквизита);
	ИначеЕсли ТипИнформации=Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда
		УровеньОшибок = ОшибкиЗаполненияВебСтраницы(ОбъектКИ, ВидИнформации, ИмяРеквизита);
	Иначе
		// Другое(прочее) не проверяем
		УровеньОшибок = 0;
	КонецЕсли;
	
	Возврат УровеньОшибок;
	
КонецФункции

Процедура ЗаписатьКонтактнуюИнформацию(Объект, ЗначенияПолей, ВидИнформации, ТипИнформации, ИдентификаторСтроки = 0)
	
	ОбъектКИ = КонтактнаяИнформацияСлужебный.ДесериализацияКонтактнойИнформации(ЗначенияПолей, ВидИнформации);
	
	Если ПустаяСтрока(ОбъектКИ.Представление) И ПустаяСтрока(ОбъектКИ.Комментарий) Тогда
		Возврат;
	КонецЕсли;
	
	НоваяСтрока = Объект.КонтактнаяИнформация.Добавить();
	НоваяСтрока.Представление = ОбъектКИ.Представление;
	НоваяСтрока.ЗначенияПолей = ЗначенияПолей;
	НоваяСтрока.Вид           = ВидИнформации;
	НоваяСтрока.Тип           = ТипИнформации;
	
	Если ЗначениеЗаполнено(ИдентификаторСтроки) Тогда
		НоваяСтрока.ИдентификаторСтрокиТабличнойЧасти = ИдентификаторСтроки;
	КонецЕсли;
	
	// Заполнение дополнительных реквизитов ТЧ
	Если ТипИнформации=Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
		ЗаполнитьРеквизитыТабличнойЧастиДляАдресаЭлектроннойПочты(НоваяСтрока, ОбъектКИ);
		
	ИначеЕсли ТипИнформации=Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		ЗаполнитьРеквизитыТабличнойЧастиДляАдреса(НоваяСтрока, ОбъектКИ);
		
	ИначеЕсли ТипИнформации=Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		ЗаполнитьРеквизитыТабличнойЧастиДляТелефона(НоваяСтрока, ОбъектКИ);
		
	ИначеЕсли ТипИнформации=Перечисления.ТипыКонтактнойИнформации.Факс Тогда
		ЗаполнитьРеквизитыТабличнойЧастиДляТелефона(НоваяСтрока, ОбъектКИ);
		
	ИначеЕсли ТипИнформации=Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда
		ЗаполнитьРеквизитыТабличнойЧастиДляВебСтраницы(НоваяСтрока, ОбъектКИ);
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Служебные

// Заполняет дополнительные реквизиты строки табличной части "Контактная информация"
//
// Параметры:
//    СтрокаКИ      - строка табличной части "Контактная информация"
//    Представление - Строка                     - представление значения
//    ЗначенияПолей - СписокЗначений, ОбъектXTDO - значения полей
//
Процедура ЗаполнитьДополнительныеРеквизитыКонтактнойИнформации(СтрокаКИ, Представление, ЗначенияПолей)
	
	Если ТипЗнч(ЗначенияПолей)=Тип("ОбъектXDTO") Тогда
		ОбъектКИ = ЗначенияПолей;
	Иначе
		ОбъектКИ = КонтактнаяИнформацияСлужебный.ДесериализацияКонтактнойИнформации(ЗначенияПолей, СтрокаКИ.Вид);
	КонецЕсли;
	
	ТипИнформации = СтрокаКИ.Тип;

	Если ТипИнформации=Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
		ЗаполнитьРеквизитыТабличнойЧастиДляАдресаЭлектроннойПочты(СтрокаКИ, ОбъектКИ);
		
	ИначеЕсли ТипИнформации=Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		ЗаполнитьРеквизитыТабличнойЧастиДляАдреса(СтрокаКИ, ОбъектКИ);
		
	ИначеЕсли ТипИнформации=Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		ЗаполнитьРеквизитыТабличнойЧастиДляТелефона(СтрокаКИ, ОбъектКИ);
		
	ИначеЕсли ТипИнформации=Перечисления.ТипыКонтактнойИнформации.Факс Тогда
		ЗаполнитьРеквизитыТабличнойЧастиДляТелефона(СтрокаКИ, ОбъектКИ);
		
	ИначеЕсли ТипИнформации=Перечисления.ТипыКонтактнойИнформации.ВебСтраница Тогда
		ЗаполнитьРеквизитыТабличнойЧастиДляВебСтраницы(СтрокаКИ, ОбъектКИ);
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает пустую структура адреса
//
// Возвращаемое значение:
//    СтруктураАдреса - ключи - имена полей, значения поля
//
Функция ПолучитьПустуюСтруктуруАдреса() Экспорт
	
	Возврат УправлениеКонтактнойИнформациейКлиентСервер.СтруктураПолейАдреса();
	
КонецФункции

// Возвращает доступно ли редактирование в диалоге по типу контактной информации.
//
// Параметры:
//    Тип - ПеречислениеСсылка.ТипыКонтактнойИнформации - тип контактной информации.
//
// Возвращаемое значение - Булево - доступно или нет редактирование в диалоге.
//
Функция ДляТипаКонтактнойИнформацииДоступноРедактированиеВДиалоге(Тип)
	
	Если Тип = Перечисления.ТипыКонтактнойИнформации.Адрес Тогда
		Возврат Истина;
	ИначеЕсли Тип = Перечисления.ТипыКонтактнойИнформации.Телефон Тогда
		Возврат Истина;
	ИначеЕсли Тип = Перечисления.ТипыКонтактнойИнформации.Факс Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Возвращает имя табличной части документа по виду контактной информации
//
// Параметры:
//    ВидКИ      - вид контактной информации
//    ИмяОбъекта - полное имя объекта метаданного
//
// Возвращаемое значение:
//    Строка - имя табличной части или пустая строка, если табличной части нет.
//
Функция ИмяТабличнойЧастиПоВидуКИ(ВидКИ, ИмяОбъекта) Экспорт
	
	ГруппаВидаКИ = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидКИ, "Родитель");
	ИмяВидаКИ = ОбщегоНазначения.ИмяПредопределенного(ГруппаВидаКИ);
	Поз = Найти(ИмяВидаКИ, ИмяОбъекта);
	
	Возврат Сред(ИмяВидаКИ, Поз + СтрДлина(ИмяОбъекта));
	
КонецФункции

Процедура УстановитьЗначенияРеквизитовПроверки(Объект, НастройкиПроверки = Неопределено)
	
	Объект.ПроверятьКорректность = ?(НастройкиПроверки = Неопределено, Ложь, НастройкиПроверки.ПроверятьКорректность);
	Объект.АдресТолькоРоссийский = Ложь;
	Объект.ВключатьСтрануВПредставление = Ложь;
	Объект.ЗапрещатьВводНекорректного =?(НастройкиПроверки = Неопределено, Ложь, НастройкиПроверки.ЗапрещатьВводНекорректного);
	Объект.СкрыватьНеактуальныеАдреса = Ложь;
	
КонецПроцедуры

Процедура ДобавитьРеквизитВОписание(Форма, СтрокаКИ, ЭтоНовыйВидКИ, ЭтоРеквизитТабличнойЧасти = Ложь)
	
	НоваяСтрока = Форма.КонтактнаяИнформацияОписаниеДополнительныхРеквизитов.Добавить();
	НоваяСтрока.ИмяРеквизита  = СтрокаКИ.ИмяРеквизита;
	НоваяСтрока.Вид           = СтрокаКИ.Вид;
	НоваяСтрока.Тип           = СтрокаКИ.Тип;
	НоваяСтрока.ЭтоРеквизитТабличнойЧасти = ЭтоРеквизитТабличнойЧасти;
	
	Если ПустаяСтрока(СтрокаКИ.ЗначенияПолей) ТОгда
		НоваяСтрока.ЗначенияПолей = "";
	Иначе
		НоваяСтрока.ЗначенияПолей = УправлениеКонтактнойИнформациейКлиентСервер.ПреобразоватьСтрокуВСписокПолей(СтрокаКИ.ЗначенияПолей);
	КонецЕсли;
	
	НоваяСтрока.Представление = СтрокаКИ.Представление;
	НоваяСтрока.Комментарий   = СтрокаКИ.Комментарий;
	
	Если Не ЭтоРеквизитТабличнойЧасти Тогда
		
		Форма[СтрокаКИ.ИмяРеквизита] = СтрокаКИ.Представление;
		
	КонецЕсли;
	
	Если ЭтоНовыйВидКИ И СтрокаКИ.Вид.РазрешитьВводНесколькихЗначений И Не ЭтоРеквизитТабличнойЧасти Тогда
		
		Форма.СписокДобавляемыхЭлементовКонтактнойИнформации.Добавить(СтрокаКИ.Вид, СтрокаКИ.Вид.Наименование);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьКомандыИЭлементыФормы(Форма)
	
	ДобавленныеЭлементы = Форма.ДобавленныеЭлементыКонтактнойИнформации;
	ДобавленныеЭлементы.Сортировать("Приоритет");
	
	Для Каждого УдаляемыйЭлемент Из ДобавленныеЭлементы Цикл
		
		Если УдаляемыйЭлемент.ЭтоКоманда Тогда
			Форма.Команды.Удалить(Форма.Команды[УдаляемыйЭлемент.ИмяЭлемента]);
		Иначе
			Форма.Элементы.Удалить(Форма.Элементы[УдаляемыйЭлемент.ИмяЭлемента]);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВывестиСообщениеПользователю(ТекстСообщения, ИмяРеквизита, ПолеРеквизита)
	
	ИмяРеквизита = ?(ПустаяСтрока(ПолеРеквизита), ИмяРеквизита, "");
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,ПолеРеквизита, ИмяРеквизита);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы

// Добавляет процедуры-обработчики обновления, необходимые данной подсистеме.

//
// Параметры:
//  Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                  общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	// Разделение стран мира
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия    = "2.1.4.8";
		Обработчик.Процедура = "УправлениеКонтактнойИнформацией.ПодготовкаЭталонаРазделенныхСтранМира";
		Обработчик.МонопольныйРежим = Истина;
		Обработчик.ОбщиеДанные      = Истина;
		
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия    = "2.1.4.8";
		Обработчик.Процедура = "УправлениеКонтактнойИнформацией.ОбновлениеПоЭталонуРазделенныхСтранМира";
		Обработчик.МонопольныйРежим = Истина;
		Обработчик.ОбщиеДанные      = Ложь;
	КонецЕсли;
	
	// Штатное обновление классификатора без добавления новых стран
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия    = "2.1.5.12";
	Обработчик.Процедура = "УправлениеКонтактнойИнформацией.ОбработчикОбновленияСуществующихСтранМира";
	Обработчик.РежимВыполнения = "Монопольно";
	Обработчик.ОбщиеДанные      = Ложь;
	
КонецПроцедуры

// Неразделенный монопольный обработчик для копирования стран мира из нулевой области
// Сохраняет эталон и список областей данных - адресатов
Процедура ПодготовкаЭталонаРазделенныхСтранМира() Экспорт
	УстановитьПривилегированныйРежим(Истина);
	
	// Контроль версии базы
	ИмяРегистраЭталона = "УдалитьСтраныМира";
	Если Метаданные.РегистрыСведений.Найти(ИмяРегистраЭталона)=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Запрашиваем данные из нулевой области, создаем эталон с точностью до ссылки
	ОбщегоНазначения.УстановитьРазделениеСеанса(Истина, 0);
	Запрос = Новый Запрос("
		|ВЫБРАТЬ 
		|	Справочник.Ссылка             КАК Ссылка,
		|	Справочник.Код                КАК Код,
		|	Справочник.Наименование       КАК Наименование,
		|	Справочник.КодАльфа2          КАК КодАльфа2,
		|	Справочник.КодАльфа3          КАК КодАльфа3, 
		|	Справочник.НаименованиеПолное КАК НаименованиеПолное
		|ИЗ
		|	Справочник.СтраныМира КАК Справочник
		|");
	Эталон = Запрос.Выполнить().Выгрузить();
	
	ОбщегоНазначения.УстановитьРазделениеСеанса(Ложь);
	
	// Пишем сам эталон
	Набор = РегистрыСведений[ИмяРегистраЭталона].СоздатьНаборЗаписей();
	Набор.Добавить().Значение = Новый ХранилищеЗначения(Эталон, Новый СжатиеДанных(9));
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(Набор);
	
	// Адресаты обновления
	Менеджер = РегистрыСведений[ИмяРегистраЭталона].СоздатьМенеджерЗаписи();
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	ОбластьДанныхВспомогательныеДанные КАК ОбластьДанных
		|ИЗ
		|	РегистрСведений.ОбластиДанных
		|ГДЕ
		|	Статус=ЗНАЧЕНИЕ(Перечисление.СтатусыОбластейДанных.Используется)
		|	И ОбластьДанныхВспомогательныеДанные<>0
		|";
	Отбор = Набор.Отбор.ОбластьДанных;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Отбор.Установить(Выборка.ОбластьДанных);
		Набор.Очистить();
		Набор.Добавить().ОбластьДанных = Выборка.ОбластьДанных;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(Набор);
	КонецЦикла;
	
КонецПроцедуры

// Разделенный  обработчик для копирования стран мира из нулевой области
// Используется эталон, подготовленный на предыдущем шаге
Процедура ОбновлениеПоЭталонуРазделенныхСтранМира() Экспорт
	
	// Контроль версии базы
	ИмяРегистраЭталона = "УдалитьСтраныМира";
	Если Метаданные.РегистрыСведений.Найти(ИмяРегистраЭталона)=Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Ищем эталон для текущей области
	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	Эталон.Значение
		|ИЗ
		|	РегистрСведений.УдалитьСтраныМира КАК Адресаты
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.УдалитьСтраныМира КАК Эталон
		|ПО
		|	Эталон.ОбластьДанных = 0
		|ГДЕ
		|	Адресаты.ОбластьДанных = &ОбластьДанных
		|");
	Запрос.УстановитьПараметр("ОбластьДанных", ПараметрыСеанса["ОбластьДанныхЗначение"]);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		// Текущую область не надо обновлять
		Возврат;
	КонецЕсли;
	
	Эталон = Результат.Выгрузить()[0].Значение.Получить();
	Запрос = Новый Запрос("
		|ВЫБРАТЬ
		|	Данные.Ссылка             КАК Ссылка,
		|	Данные.Код                КАК Код,
		|	Данные.Наименование       КАК Наименование,
		|	Данные.КодАльфа2          КАК КодАльфа2,
		|	Данные.КодАльфа3          КАК КодАльфа3, 
		|	Данные.НаименованиеПолное КАК НаименованиеПолное
		|ПОМЕСТИТЬ
		|	Эталон
		|ИЗ
		|	&Данные КАК Данные
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка
		|;///////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ 
		|	Эталон.Ссылка             КАК Ссылка,
		|	Эталон.Код                КАК Код,
		|	Эталон.Наименование       КАК Наименование,
		|	Эталон.КодАльфа2          КАК КодАльфа2,
		|	Эталон.КодАльфа3          КАК КодАльфа3, 
		|	Эталон.НаименованиеПолное КАК НаименованиеПолное
		|ИЗ
		|	Эталон КАК Эталон
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	Справочник.СтраныМира КАК СтраныМира
		|ПО
		|	СтраныМира.Ссылка = Эталон.Ссылка
		|ГДЕ
		|	СтраныМира.Ссылка ЕСТЬ NULL
		|");
	Запрос.УстановитьПараметр("Данные", Эталон);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Страна = Справочники.СтраныМира.СоздатьЭлемент();
		Страна.УстановитьСсылкуНового(Выборка.Ссылка);
		ЗаполнитьЗначенияСвойств(Страна, Выборка, , "Ссылка");
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(Страна);
	КонецЦикла;
	
КонецПроцедуры

// Обновляет один вид контактной информации.
//
// Параметры:
//    ВидКИ - Справочник.ВидыКонтактнойИнформации - вид контактной информации.
//    Тип - Перечисление.ТипыКонтактнойИнформации - тип контактной информации.
//    МожноИзменятьСпособРедактирования - Булево - Истина, если есть возможность изменять способ редактирования, Ложь - иначе.
//    РедактированиеТолькоВДиалоге - Булево - Истина, если редактировать только в диалоге, Ложь - иначе.
//    АдресТолькоРоссийский - Булево - Истина, если адрес только российский, Ложь - Иначе.
//    Порядок - Неопределено или Число - порядок вида контактной информации.
//
Процедура ОбновитьВидКИ(ВидКИ, Тип, МожноИзменятьСпособРедактирования, РедактированиеТолькоВДиалоге, АдресТолькоРоссийский,
	Порядок = Неопределено) Экспорт
	
	Объект = ВидКИ.ПолучитьОбъект();
	Объект.Тип									= Тип;
	Объект.МожноИзменятьСпособРедактирования	= МожноИзменятьСпособРедактирования;
	Объект.РедактированиеТолькоВДиалоге			= РедактированиеТолькоВДиалоге;
	Объект.АдресТолькоРоссийский				= АдресТолькоРоссийский;
	Если Порядок <> Неопределено Тогда
		Объект.РеквизитДопУпорядочивания = Порядок;
	КонецЕсли;
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
	
КонецПроцедуры

// Обновляет один вид контактной информации.
//
// Параметры:
//    Вид - Справочник.ВидыКонтактнойИнформации - вид контактной информации.
//    Тип - Перечисление.ТипыКонтактнойИнформации - тип контактной информации.
//    Подсказка - Строка - Подсказка к виду контактной информации.
//    МожноИзменятьСпособРедактирования - Булево - Истина, если есть возможность изменять настройки вида, Ложь - иначе.
//    РедактированиеТолькоВДиалоге - Булево - Истина, если редактировать только в диалоге, Ложь - иначе.
//    ОбязательноеЗаполнение - Булево - Истина, если требуется обязательное заполнение поля, Ложь - иначе.
//    Порядок - Неопределено или Число - порядок вида контактной информации, положение в списке относительно других элементов: 
//                                         Неопределено - не переназначать;
//                                         0            - назначить автоматически;
//                                         Число > 0    - назначить указанный порядок.
//    РазрешитьВводНесколькихЗначений - Булево - Признак возможности использования дополнительных полей ввода для данного вида.
//    НастройкиПроверки
//        Для типа Адрес - Структура
//            АдресТолькоРоссийский - Булево - Истина, если используются только российские адреса, Ложь - иначе.
//            ПроверятьКорректность - Булево - Истина, если используется проверка адреса по классификатору (Только если АдресТолькоРоссийский = Истина), Ложь - иначе.
//            ЗапрещатьВводНекорректного - - Булево - Истина, если требуется запрещать пользователю записывать некорректный адрес (Только если ПроверятьКорректность = Истина), Ложь - иначе.
//            СкрыватьНеактуальныеАдреса - Булево - Истина, если не требуется показывать неактуальные адреса при вводе(Только если АдресТолькоРоссийский = Истина), Ложь - иначе.
//            ВключатьСтрануВПредставление - Булево - Истина, если требуется включать наименование страны в представление адреса, Ложь - иначе.
//            Для типа АдресЭлектроннойПочты - Структура
//            ПроверятьКорректность - Булево - Истина, если требуется проверка адреса электронной почты на корректность, Ложь - иначе.
//            ЗапрещатьВводНекорректного - Булево - Истина, если требуется запрещать пользователю записывать некорректный адрес (Только если ПроверятьКорректность = Истина), Ложь - иначе.
//            Для остальных типов или для задания настроек по умолчанию используется Неопределено
//
// Примечание:
//    Установка параметра ПроверятьКорректность в значение Истина требует так же установить параметр
//    ЗапрещатьВводНекорректного в значение Истина.
//
//    При использовании параметра Порядок следует внимательно следить за уникальностью назначаемого значения. Если после выполнения обновления значения
//    порядка окажутся неуникальными в пределах группы, то настройка порядка пользователем будет невозможна.
//    В общем случае рекомендуется не использовать этот параметр (порядок не изменится), либо заполнять его значением 0 (порядок будет назначен автоматически в подсистеме
//    "Настройка порядка элементов" при выполнении процедуры).
//    Для размещения видов КИ в определённой последовательности относительно друг друга без явного размещения в начале списка достаточно вызывать данную процедуру
//    в нужной последовательности для каждого вида КИ с указанием порядка 0.
//    Если добавляется предопределённый вид КИ к уже существующим в ИБ, не рекомендуется назначать порядок в явном виде.
//
Процедура ОбновитьВидКонтактнойИнформации(Вид, Тип, Подсказка, МожноИзменятьСпособРедактирования, РедактированиеТолькоВДиалоге,
	ОбязательноеЗаполнение, Порядок = Неопределено, РазрешитьВводНесколькихЗначений = Ложь, НастройкиПроверки = Неопределено) Экспорт
	
	Объект = Вид.ПолучитьОбъект();
	Объект.Тип                               = Тип;
	Объект.Подсказка                         = Подсказка;
	Объект.МожноИзменятьСпособРедактирования = МожноИзменятьСпособРедактирования;
	Объект.РедактированиеТолькоВДиалоге      = РедактированиеТолькоВДиалоге;
	Объект.ОбязательноеЗаполнение            = ОбязательноеЗаполнение;
	Объект.РазрешитьВводНесколькихЗначений   = РазрешитьВводНесколькихЗначений;
	
	Если Тип = Перечисления.ТипыКонтактнойИнформации.Адрес И ТипЗнч(НастройкиПроверки) = Тип("Структура") Тогда
		
		ТекстИсключения = НСтр("ru='Некорректно заполнены настройки проверки адреса'");
		
		Если НастройкиПроверки.АдресТолькоРоссийский Тогда
			
			Если Не НастройкиПроверки.ПроверятьКорректность Тогда
				
				Если НастройкиПроверки.ЗапрещатьВводНекорректного Тогда
					ВызватьИсключение ТекстИсключения;
				КонецЕсли;
				
			Иначе
				
				// см. примечание
				Если Не НастройкиПроверки.ЗапрещатьВводНекорректного Тогда
					ВызватьИсключение ТекстИсключения;
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			Если НастройкиПроверки.ПроверятьКорректность
				Или НастройкиПроверки.ЗапрещатьВводНекорректного
				Или НастройкиПроверки.СкрыватьНеактуальныеАдреса Тогда
				
				ВызватьИсключение ТекстИсключения;
				
			КонецЕсли;
			
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(Объект, НастройкиПроверки);
		
	ИначеЕсли Тип = Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты И ТипЗнч(НастройкиПроверки) = Тип("Структура") Тогда
		
		Если Не НастройкиПроверки.ПроверятьКорректность Тогда
			
			Если НастройкиПроверки.ЗапрещатьВводНекорректного Тогда
				
				ВызватьИсключение ТекстИсключения;
				
			КонецЕсли;
			
		Иначе
			
			// см. примечание
			Если Не НастройкиПроверки.ЗапрещатьВводНекорректного Тогда
				ВызватьИсключение ТекстИсключения;
			КонецЕсли;
			
		КонецЕсли;
		
		УстановитьЗначенияРеквизитовПроверки(Объект, НастройкиПроверки);
		
	Иначе
		УстановитьЗначенияРеквизитовПроверки(Объект);
	КонецЕсли;
	
	Если Порядок <> Неопределено Тогда
		Объект.РеквизитДопУпорядочивания = Порядок;
	КонецЕсли;
	
	ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
	
КонецПроцедуры

// Загружаем все страны мира из классификатора принудительно
//
Процедура ЗагрузитьСтраныМира() Экспорт
	Справочники.СтраныМира.ОбновитьСтраныМираПоКлассификатору(Истина);
КонецПроцедуры

// Обновляем только существующие элементы стран мира по классификатору
Процедура ОбновитьСуществующиеСтраныМира() Экспорт
	Справочники.СтраныМира.ОбновитьСтраныМираПоКлассификатору();
КонецПроцедуры

// Обновляем только существующие элементы стран мира по классификатору, исключения не выбрасываем
Процедура ОбработчикОбновленияСуществующихСтранМира() Экспорт
	Попытка
		Справочники.СтраныМира.ОбновитьСтраныМираПоКлассификатору();
	Исключение
		// Действие не требуется, информация записана в журнал
	КонецПопытки;
КонецПроцедуры

// Получить значения определенного типа контактной информации у объекта.
//
// Параметры
//    Ссылка                  - ЛюбаяСсылка - ссылка на объект-владелец контактной информации (организация, контрагент, партнер и т.д.)
//    ТипКонтактнойИнформации - ПеречислениеСсылка.ТипыКонтактнойИнформации
//
// Возвращаемое значение:
//    ТаблицаЗначений - с полями 
//        Значение (строка) - строковое представление значения
//        Вид (строка)      - представление вида контактной информации
//
Функция ЗначенияКонтактнойИнформацииОбъекта(Ссылка, ТипКонтактнойИнформации) Экспорт
	
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(Ссылка);
	
	КонтактнаяИнформацияОбъекта = КонтактнаяИнформацияОбъектов(МассивОбъектов, ТипКонтактнойИнформации);
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("КонтактнаяИнформацияОбъекта", КонтактнаяИнформацияОбъекта);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	КонтактнаяИнформацияОбъекта.Представление,
	|	КонтактнаяИнформацияОбъекта.Вид
	|ПОМЕСТИТЬ ВТКонтактнаяИнформацияОбъекта
	|ИЗ
	|	&КонтактнаяИнформацияОбъекта КАК КонтактнаяИнформацияОбъекта
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КонтактнаяИнформацияОбъекта.Представление КАК Значение,
	|	ПРЕДСТАВЛЕНИЕ(КонтактнаяИнформацияОбъекта.Вид) КАК Вид
	|ИЗ
	|	ВТКонтактнаяИнформацияОбъекта КАК КонтактнаяИнформацияОбъекта";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Получить значения поля адреса.
//
// Параметры:
//    СтрокаЗначенийПолей - строка со значениями полей адреса.
//    ИмяПоля             - имя поля. Например, "Район".
// 
// Возвращаемое значение:
//  Строка - значение поля.
//
Функция ПолучитьЗначениеПоляАдреса(СтрокаЗначенийПолей, ИмяПоля) Экспорт
	
	ПозицияПоля = Найти(СтрокаЗначенийПолей, ИмяПоля);
	Значение = "";
	Если ПозицияПоля <> 0 Тогда
		ЗначенияПолей = Прав(СтрокаЗначенийПолей, СтрДлина(СтрокаЗначенийПолей) - ПозицияПоля - СтрДлина(ИмяПоля));
		ПозицияПС = Найти(ЗначенияПолей, Символы.ПС);
		Значение = Сред(ЗначенияПолей, 0 ,ПозицияПС - 1);
	КонецЕсли;
	Возврат Значение;
	
КонецФункции

// Получает значения поля адреса
//
// Параметры:
//    СтрокаЗначенийПолей - Строка - строка значений полей 
//    ИмяПоля - Строка - имя поля 
//
// Возвращаемое значение - Строка - значение контактной информации.
//
Функция ПолучитьЗначениеКонтактнойИнформации(СтрокаЗначенийПолей, ИмяПоля) Экспорт
	
	ПозицияПоля = Найти(СтрокаЗначенийПолей, ИмяПоля);
	Значение = "";
	Если ПозицияПоля <> 0 Тогда
		ЗначенияПолей = Прав(СтрокаЗначенийПолей, СтрДлина(СтрокаЗначенийПолей) - ПозицияПоля - СтрДлина(ИмяПоля));
		ПозицияПС   = Найти(ЗначенияПолей, Символы.ПС);
		Значение    = Сред(ЗначенияПолей, 0 , ПозицияПС - 1);
	КонецЕсли;
	
	Возврат Значение;
	
КонецФункции


// Конструктор структуры, совместимой по полям сл справочникам видов КИ
//
Функция СтруктураВидаКонтактнойИнформации() Экспорт
	
	Результат = Новый Структура;
	Для Каждого Мета Из Метаданные.Справочники.ВидыКонтактнойИнформации.Реквизиты Цикл
		Результат.Вставить(Мета.Имя, Мета.Тип.ПривестиЗначение());
	КонецЦикла;
	
	Возврат Результат;
КонецФункции



////////////////////////////////////////////////////////////////////////////////
// Обработчики условных вызовов в другие подсистемы

// Определяет Используются ли в конфигурации классификаторы
//
// Параметры:
//  Используются - Булево - Истина, если используются, Ложь - иначе.
//
Процедура ПриОпределенииИспользованияКлассификатора(Используются) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.АдресныйКлассификатор") Тогда
		Используются = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Определяет по индексу записи в адресном классификаторе.
//
// Параметры:
//    Индекс - Строка - индекс, по которому будет производиться поиск.
//    АдресныеОбъекты - Неопределено или Структура с полями:
//        Количество      - Число - количество найденных вариантов
//        НайденныйРегион - Строка - если найден один регион
//        НайденныйРайон  - Строка - если найден один район
//        ПризнакАктуальности - Число - признак актуальности если найден один вариант
//        АдресВХранилище - Строка - идентификатор сохраненной в хранилище таблицы с найденными вариантами
//
Процедура ПриОпределенииЗаписейПоИндексу(Индекс, АдресныеОбъекты) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.АдресныйКлассификатор") Тогда
		МодульАдресныйКлассификатор = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("АдресныйКлассификатор");
		АдресныеОбъекты = МодульАдресныйКлассификатор.НайтиЗаписиПоИндексу(Индекс);
	КонецЕсли;
	
КонецПроцедуры

// Получить компоненты адресного элемента по его коду
//
// Параметры:
//    КодАдресногоЭлемента - Число - код адресного элемента, по которому ищутся компоненты адреса 
//    Результат - структура с полями(в которую выгружается результат поиска):
//        Регион - Строка - наименование найденного региона
//        Район - Строка - наименование найденного района
//        Город - Строка - наименование найденного города
//        НаселенныйПункт - Строка - наименование найденного населенного пункта
//        Улица - Строка - наименование найденной улицы
//        ПризнакАктуальности - Число - признак актуальности найденного адреса
//
Процедура ПоКодуАдресногоЭлементаВСтруктуруПолучитьЕгоКомпоненты(КодАдресногоЭлемента, Результат) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.АдресныйКлассификатор") Тогда
		МодульАдресныйКлассификатор = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("АдресныйКлассификатор");
		МодульАдресныйКлассификатор.ПоКодуАдресногоЭлементаВСтруктуруПолучитьЕгоКомпоненты(КодАдресногоЭлемента, Результат);
	КонецЕсли;
	
КонецПроцедуры

// Определяет структуру адреса.
//
// Параметры:
//    СтруктураАдреса -Структура с полями:
//    Индекс - Строка - индекс адреса по переданным параметрам
//    Регион - Строка - регион по переданному коду
//    Район - Строка - район по переданному коду
//    Город - Строка - город по переданному коду
//    НаселенныйПункт - Строка - населенный пункт по переданному коду
//    Улица - Строка - улица по переданному коду
//    Дом - Строка - переданный номер дома
//    Корпус - Строка - переданный номер корпуса
//    Квартира - Строка - переданный номер квартиры
//    КодАдресногоЭлемента - Число - код адресного элемента, по которому ищутся компоненты адреса 
//    Дом - Строка - номер дома, если требуется
//    Корпус - Строка - номер корпуса, если требуется
//    Квартира - Строка - номер квартиры, если требуется
//
Процедура ПриОпределенииСтруктурыАдреса(СтруктураАдреса, КодАдресногоЭлемента, Дом = "", Корпус = "", Квартира = "") Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.АдресныйКлассификатор") Тогда
		МодульАдресныйКлассификатор = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("АдресныйКлассификатор");
		МодульАдресныйКлассификатор.ПолучитьСтруктуруАдреса(КодАдресногоЭлемента, Дом, Корпус, Квартира);
	КонецЕсли;
	
КонецПроцедуры

// Определяет индекс по переданным региону, району, городу, населенному пункту,
// улице, дому и корпусу
//
// Параметры: 
//    Индекс - Строка - почтовый индекс.
//    НазваниеРегиона - название региона( с сокращением)
//    НазваниеРайона - название района( с сокращением)
//    НазваниеГорода - название города( с сокращением)
//    НазваниеНаселенногоПункта - название населенного пункта( с сокращением)
//    Улица - название улицы ( с сокращением)
//    НомерДома - номер дома, для которого необходимо получить индекс
//    НомерКорпуса - номер корпуса
//    РодительИндекса - переменная, в которую сохраняется структура найденного адресного элемента
//
Процедура ПриОпределенииИндекса(Индекс, НазваниеРегиона, НазваниеРайона, НазваниеГорода, НазваниеНаселенногоПункта,
	НазваниеУлицы, НомерДома, НомерКорпуса, РодительИндекса = Неопределено) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.АдресныйКлассификатор") Тогда
		МодульАдресныйКлассификатор = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("АдресныйКлассификатор");
		Индекс = МодульАдресныйКлассификатор.ПолучитьИндекс(НазваниеРегиона, НазваниеРайона, НазваниеГорода,
		НазваниеНаселенногоПункта, НазваниеУлицы, НомерДома, НомерКорпуса, РодительИндекса);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик автоподбора в адресном элементе ввода.
//
// Параметры:
//    СписокАвтоПодбора - СписокЗначений - список для автоподбора.
//    Текст  - Строка - введенный пользователем текст в адресном элементе ввода
//    Регион - Строка - ранее введенное название региона
//    Район  - Строка - ранее введенное название района
//    Город  - Строка - ранее введенное название города
//    НаселенныйПункт - Строка - ранее введенное название населенного пункта
//    УровеньЭлемента - Число - идентификатор адресного элемента ввода.
//                      1 - регион, 2 - район, 3 - город, 4 - населенный пункт, 5 - улица, 0 - прочее.
//    ПризнакАктуальности - Число - признак актуальности элемента.
//
// Возвращаемое значение:
//    СписокЗначений; Неопределено
//
Процедура ПриОпределенииСпискаАвтоПодбораТекстаВАдресномЭлементе(СписокАвтоПодбора, Текст, Регион, Район, Город,
	НаселенныйПункт, УровеньЭлемента, ПризнакАктуальности = 0) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.АдресныйКлассификатор") Тогда
		МодульАдресныйКлассификатор = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("АдресныйКлассификатор");
		СписокАвтоПодбора = МодульАдресныйКлассификатор.АвтоПодборТекстВАдресномЭлементе(Текст, Регион, Район, Город,
		НаселенныйПункт, УровеньЭлемента, ПризнакАктуальности);
	КонецЕсли;
	
КонецПроцедуры

// Определяет соответствие адреса КЛАДРу по переданным индексу, региону, району, городу, населенному пункту,
// улице, дому и корпусу.
//
// Параметры:
//    СтруктураПроверки - Структура с полями:
//        Регион - Структура - структура полей найденного региона
//        Район - Структура - структура полей найденного района
//        Город - Структура - структура полей найденного города
//        НаселенныйПункт - Структура - структура полей найденного населенного пункта
//        Улица - Структура - структура полей найденной улицы
//        Дом - Структура - структура полей найденного дома
//        ЕстьОшибки - Булево - найдены ли ошибки при проверке
//        СтруктураОшибок - Структура - структура в которой в качестве ключа выступает название элемента
//                          а в качестве значения - подробный текст ошибки.
//    УказанныйИндекс - Строка - индекс
//    НазваниеРегиона - Строка - название региона(с сокращением)
//    НазваниеРайона - Строка - название района(с сокращением)
//    НазваниеГорода - Строка - название города(с сокращением)
//    НазваниеНаселенногоПункта - Строка - название населенного пункта(с сокращением)
//    НазваниеУлицы - Строка - название улицы(с сокращением)
//    НомерДома - Строка - номер дома, для которого необходимо получить индекс
//    НомерКорпуса - Строка - номер корпуса
//
Процедура ПриОпределенииСоответствияАдресаКЛАДРу(СтруктураПроверки, УказанныйИндекс = "", НазваниеРегиона = "", НазваниеРайона = "",
	НазваниеГорода = "", НазваниеНаселенногоПункта = "", НазваниеУлицы = "", НомерДома = "", НомерКорпуса = "") Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.АдресныйКлассификатор") Тогда
		МодульАдресныйКлассификатор = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("АдресныйКлассификатор");
		СтруктураПроверки = МодульАдресныйКлассификатор.ПроверитьСоответствиеАдресаКЛАДРу(УказанныйИндекс, НазваниеРегиона,НазваниеРайона,
		НазваниеГорода, НазваниеНаселенногоПункта, НазваниеУлицы, НомерДома , НомерКорпуса);
	КонецЕсли;
	
КонецПроцедуры

// Проверяет загружен ли адресный элемент в базу.
//
// Параметры: 
//    АдресныйЭлементЗагружен - Булево - признак загруженности адресного элемента.
//    НазваниеРегиона - Строка - название региона(с сокращением)
//    НазваниеРайона - Строка - название района(с сокращением)
//    НазваниеГорода - Строка - название города(с сокращением)
//    НазваниеНаселенногоПункта - Строка - название населенного пункта(с сокращением)
//    НазваниеУлицы - Строка - название улицы(с сокращением)
//    Уровень - Число - уровень, который нужно проверить на загруженность
//
// Возвращаемое значение:
//    Булево - Истина, если адресный элемент загружен, Ложь - в противном случае.
//
Процедура ПриОпределенииЗагруженностиАдресногоЭлемента(АдресныйЭлементЗагружен, НазваниеРегиона, НазваниеРайона = "", НазваниеГорода = "",
	НазваниеНаселенногоПункта = "", НазваниеУлицы = "", Уровень = 1) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.АдресныйКлассификатор") Тогда
		МодульАдресныйКлассификатор = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("АдресныйКлассификатор");
		АдресныйЭлементЗагружен = МодульАдресныйКлассификатор.АдресныйЭлементЗагружен(НазваниеРегиона, НазваниеРайона, НазваниеГорода,
		НазваниеНаселенногоПункта, НазваниеУлицы, Уровень);
	КонецЕсли;
	
КонецПроцедуры

// По полному наименованию адресного элемента определяет отдельно его имя, и отдельно его адресное сокращение
//
// Параметры:
//    ИмяИАдресноеСокращение - Строка - имя адресное сокращение.
//    СтрокаЭлемента - Строка - строка элемента.
//    АдресноеСокращение - Строка - адресное сокращение.
//
Процедура ПриОпределенииИмениИАдресногоСокращение(ИмяИАдресноеСокращение, СтрокаЭлемента, АдресноеСокращение) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.АдресныйКлассификатор") Тогда
		МодульАдресныйКлассификатор = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("АдресныйКлассификатор");
		ИмяИАдресноеСокращение = МодульАдресныйКлассификатор.ПолучитьИмяИАдресноеСокращение(СтрокаЭлемента, АдресноеСокращение);
	КонецЕсли;
	
КонецПроцедуры

// По переданным элементам адреса определяет, загружен ли КЛАДР по соответствующим элементам. 
//
// Параметры:
//    СтруктураЗагруженныхЭлементовАдреса - Структура с полями:
//        Регион - Булево - регион загружен
//        Район - Булево - район загружен
//        Город - Булево - город загружен
//        НаселенныйПункт - населенный пункт загружен
//        Улица - Булево - улица загружена
//        Дом - Булево - дом загружен.
//   НазваниеРегиона - Строка - название региона(с сокращением)
//   НазваниеРайона - Строка - название района(с сокращением)
//   НазваниеГорода - Строка - название города(с сокращением)
//   НазваниеНаселенногоПункта - Строка - название населенного пункта(с сокращением)
//   НазваниеУлицы - Строка - название улицы(с сокращением)
//
Процедура ПриОпределенииСтруктурыЗагруженныхЭлементовАдреса(СтруктураЗагруженныхЭлементовАдреса, НазваниеРегиона,
	НазваниеРайона, НазваниеГорода, НазваниеНаселенногоПункта, НазваниеУлицы) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.АдресныйКлассификатор") Тогда
		МодульАдресныйКлассификатор = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("АдресныйКлассификатор");
		СтруктураЗагруженныхЭлементовАдреса = МодульАдресныйКлассификатор.СтруктураЗагруженныхЭлементовАдреса(НазваниеРегиона,
		НазваниеРайона, НазваниеГорода, НазваниеНаселенногоПункта, НазваниеУлицы);
	КонецЕсли;
	
КонецПроцедуры

// Определяет наименование региона по коду.
//
// Параметры:
//    НаименованиеРегиона - наименование региона.
//    КодРегиона - Число - код региона.
//
Процедура ПриОпределенииНаименованияРегионаПоКоду(НаименованиеРегиона, КодРегиона) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.АдресныйКлассификатор") Тогда
		МодульАдресныйКлассификатор = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("АдресныйКлассификатор");
		НаименованиеРегиона = МодульАдресныйКлассификатор.ПолучитьНаименованиеРегионаПоКоду(КодРегиона);
	КонецЕсли;
	
КонецПроцедуры

// Определяет код региона по наименованию.
//
// Параметры:
//    КодРегиона - Число - код региона.
//    Регион - Строка - наименование региона.
//
Процедура ПриОпределенииКодаРегионаПоНаименованию(КодРегиона, Регион) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.АдресныйКлассификатор") Тогда
		МодульАдресныйКлассификатор = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("АдресныйКлассификатор");
		КодРегиона = МодульАдресныйКлассификатор.ПолучитьКодРегионаПоНаименованию(Регион);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает строку(структуру) адресного классификатора по значениям адресных элементов
//
// Параметры:
//    СтруктураАдресногоКлассификатора - Неопределено или Структура - Структура полей по найденому адресному элементу (см. функцию "АдресныйКлассификаторКлиентСервер.ПустаяСтруктураАдреса()")
//    НазваниеРегиона - название региона( с сокращением)
//    НазваниеРайона - название района( с сокращением)
//    НазваниеГорода - название города( с сокращением)
//    НазваниеНаселенногоПункта - название населенного пункта( с сокращением)
//    НазваниеУлицы - название улицы( с сокращением)
//
Процедура ПриОпределенииСтрокиАдресногоКлассификатораПоАдреснымЭлементам(СтруктураАдресногоКлассификатора, НазваниеРегиона, НазваниеРайона, НазваниеГорода, НазваниеНаселенногоПункта, НазваниеУлицы) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.АдресныйКлассификатор") Тогда
		МодульАдресныйКлассификатор = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("АдресныйКлассификатор");
		СтруктураАдресногоКлассификатора = МодульАдресныйКлассификатор.ВернутьСтруктуруАдресногоКлассификатораПоАдреснымЭлементам(
		НазваниеРегиона, НазваниеРайона, НазваниеГорода, НазваниеНаселенногоПункта, НазваниеУлицы);
	КонецЕсли;
	
КонецПроцедуры

// Процедура очищает потомков определенного адресного элемента
//
// Параметры:
//    Регион - строка - строка, куда будет помещено строковое представление "родительского" региона.
//    Район - строка - строка, куда будет помещено строковое представление "родительского" района.
//    Город - строка - строка, куда будет помещено строковое представление "родительского" города.
//    НаселенныйПункт - строка - строка, куда будет помещено строковое представление "родительского" населенного пункта.
//    Улица - строка - строка, куда будет помещено строковое представление "родительской" улицы.
//    Дом - строка - строка, куда будет помещено строковое представление "родительского" номера дома.
//    Корпус - строка - строка, куда будет помещено строковое представление "родительского" номера корпуса дома.
//    Квартира - строка - строка, куда будет помещено строковое представление "родительского" номера квартиры.
//    Уровень - Число - уровень адресного элемента.
//
Процедура ПриОчисткеПотомковПоУровнюАдресногоЭлемента(Регион, Район, Город, НаселенныйПункт, Улица, Дом, Корпус, Квартира, Уровень) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.АдресныйКлассификатор") Тогда
		МодульАдресныйКлассификатор = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("АдресныйКлассификатор");
		МодульАдресныйКлассификатор.ОчиститьПотомковПоУровнюАдресногоЭлемента(Регион, Район, Город,
			НаселенныйПункт, Улица, Дом, Корпус, Квартира, Уровень);
	КонецЕсли;
	
КонецПроцедуры

// Определяет используется ли в конфигурации запрет редактирования реквизитов
//
// Параметры:
//    Используется - Булево - Истина, если используется, Ложь - иначе.
//
Процедура ПриОпределенииИспользованияЗапретаРедактированияРеквизитов(Используется) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов") Тогда
		Используется = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Блокирует запрещенные для редактирования реквизиты
//
Процедура ПриБлокировкеРеквизитовОбъекта(Форма) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов") Тогда
		МодульЗапретРедактированияРеквизитовОбъектов = Вычислить("ЗапретРедактированияРеквизитовОбъектов");
		МодульЗапретРедактированияРеквизитовОбъектов.ЗаблокироватьРеквизиты(Форма);
	КонецЕсли;
	
КонецПроцедуры
