////////////////////////////////////////////////////////////////////////////////
// Подсистема "Защита персональных данных"
//  
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Процедура выполняет подготовку формы настройки системы
// для управления областями персональных данных,
// а также считывает текущее состояние использования события "Доступ. Доступ"
//
// В форме должны быть созданы:
//	- реквизит типа дерево значений, имя которого - "ОбластиПерсональныхДанных",
//	- таблица формы, связанная с этим реквизитом, 
//		имя которой так же - "ОбластиПерсональныхДанных",
//
// Параметры:
//	Форма - форма настройки системы
//
Процедура ПриСозданииФормыНастройкиРегистрацииСобытий(Форма) Экспорт
	
	Если Не ФормаНастройкиПодготовленаКорректно(Форма) Тогда
		Возврат;
	КонецЕсли;
	
	ИмяДереваОбластей = ИмяРеквизитаДеревоОбластей();
	
	// Добавление колонок реквизита "ОбластиПерсональныхДанных"
	ДобавляемыеРеквизиты = Новый Массив;
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Использование", Новый ОписаниеТипов("Булево"), ИмяДереваОбластей));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Имя", Новый ОписаниеТипов("Строка"), ИмяДереваОбластей));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Представление", Новый ОписаниеТипов("Строка"), ИмяДереваОбластей));
	
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	// Добавляем поля формы
	ГруппаПолей = Форма.Элементы.Добавить(ИмяДереваОбластей + "ГруппаИспользование", Тип("ГруппаФормы"), Форма.Элементы[ИмяДереваОбластей]);
	ГруппаПолей.Группировка = ГруппировкаКолонок.ВЯчейке;
	
	ФлажокИспользование = Форма.Элементы.Добавить(ИмяДереваОбластей + "Использование", Тип("ПолеФормы"), ГруппаПолей);
	ФлажокИспользование.ПутьКДанным = ИмяДереваОбластей + ".Использование";
	ФлажокИспользование.Вид = ВидПоляФормы.ПолеФлажка;
	
	ПолеПредставление = Форма.Элементы.Добавить(ИмяДереваОбластей + "Представление", Тип("ПолеФормы"), ГруппаПолей);
	ПолеПредставление.ПутьКДанным = ИмяДереваОбластей + ".Представление";
	ПолеПредставление.Вид = ВидПоляФормы.ПолеНадписи;
	
	// Настройка элементов управления
	Форма.Элементы[ИмяДереваОбластей].ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Нет;
	Форма.Элементы[ИмяДереваОбластей].ИзменятьСоставСтрок = Ложь;
	Форма.Элементы[ИмяДереваОбластей].ИзменятьПорядокСтрок = Ложь;
	Форма.Элементы[ИмяДереваОбластей].Шапка = Ложь;
	Форма.Элементы[ИмяДереваОбластей].НачальноеОтображениеДерева = НачальноеОтображениеДерева.РаскрыватьВсеУровни;
	Форма.Элементы[ИмяДереваОбластей].ГоризонтальныеЛинии = Ложь;
	Форма.Элементы[ИмяДереваОбластей].ВертикальныеЛинии = Ложь;
	Форма.Элементы[ИмяДереваОбластей].РежимВыделенияСтроки = РежимВыделенияСтрокиТаблицы.Строка;
	
	ЗначениеВДанныеФормы(ПолучитьИспользованиеСобытияДоступ(), Форма[ИмяДереваОбластей]);
	
КонецПроцедуры

// Процедура выполняет преобразование данных формы настройки системы
// и установку использования события доступ для отмеченных областей.
//
// В форме должны быть созданы:
//	- реквизит типа дерево значений, имя которого - "ОбластиПерсональныхДанных",
//	- таблица формы, связанная с этим реквизитом, 
//		имя которой так же - "ОбластиПерсональныхДанных",
//
// Параметры:
//	Форма - форма настройки системы
//
Процедура ПриЗаписиФормыНастройкиРегистрацииСобытий(Форма) Экспорт
	
	Если Не ФормаНастройкиПодготовленаКорректно(Форма) Тогда
		Возврат;
	КонецЕсли;
	
	ДеревоОбластей = ДанныеФормыВЗначение(Форма[ИмяРеквизитаДеревоОбластей()], Тип("ДеревоЗначений"));
	
	ОбластиИспользования = Новый Массив;
	
	ОтмеченныеСтроки = ДеревоОбластей.Строки.НайтиСтроки(Новый Структура("Использование", Истина), Истина);
	Для Каждого ОтмеченнаяСтрока Из ОтмеченныеСтроки Цикл
		ОбластиИспользования.Добавить(ОтмеченнаяСтрока.Имя);
	КонецЦикла;
	
	УстановитьИспользованиеСобытияДоступ(ОбластиИспользования.Количество() > 0, ОбластиИспользования);
	
КонецПроцедуры

// Процедура устанавливает режим использования события "Доступ. Доступ"
// журнала регистрации, контроль которого предусмотрен требованиями 
// Федерального закона от 27.07.2006 N152-ФЗ "О персональных данных" 
// и подзаконных актов.
// Использование события устанавливается для областей персональных данных, 
// сведения о которых заполняются в потребителе.
//
// Параметры:
//		Использование - булево, если Истина - события будут регистрироваться
//		ОбластиИспользования - массив областей персональных данных, 
//			для которых производится установка использования (необязательный)
//
Процедура УстановитьИспользованиеСобытияДоступ(Использование, ОбластиИспользования = Неопределено) Экспорт
	
	// Таблица сведений о персональных данных
	ТаблицаСведений = СведенияОПерсональныхДанных();
	
	ИспользованиеОбластейДанных = Новый Соответствие;
	
	// Составление описания использования события
	ОписанияИспользования = Новый Массив;
	Для Каждого СтрокаСведений Из ТаблицаСведений Цикл
		// Добавление области данных в набор
		ИспользованиеОбластейДанных.Вставить(СтрокаСведений.ОбластьДанных);
		Если ОбластиИспользования <> Неопределено 
			И ОбластиИспользования.Найти(СтрокаСведений.ОбластьДанных) = Неопределено Тогда
			// Если указаны области данных, то устанавливаем использование только для них
			Продолжить;
		КонецЕсли;
		ИспользованиеОбластейДанных[СтрокаСведений.ОбластьДанных] = Использование;
		// Составление описания использования события
		ПоляРегистрации = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаСведений.ПоляРегистрации);
		Для Индекс = 0 По ПоляРегистрации.ВГраница() Цикл
			// Если требуется составить массив полей 
			Если Найти(ПоляРегистрации[Индекс], "|") > 0 Тогда
				ПоляРегистрации[Индекс] = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПоляРегистрации[Индекс], "|");
			КонецЕсли;
		КонецЦикла;
		ОписаниеИспользованияСобытияДоступа = Новый ОписаниеИспользованияСобытияДоступЖурналаРегистрации(СтрокаСведений.Объект);
		ОписаниеИспользованияСобытияДоступа.ПоляДоступа		= СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаСведений.ПоляДоступа);
		ОписаниеИспользованияСобытияДоступа.ПоляРегистрации	= ПоляРегистрации;
		ОписанияИспользования.Добавить(ОписаниеИспользованияСобытияДоступа);
	КонецЦикла;
	
	// "Включение" ("Выключение") использования события "Доступ. Доступ" 
	// журнала регистрации по созданному описанию
	ИспользованиеСобытияДоступ = Новый ИспользованиеСобытияЖурналаРегистрации;
	ИспользованиеСобытияДоступ.Использование = Использование;
	ИспользованиеСобытияДоступ.ОписаниеИспользования = ОписанияИспользования;
	
	// Сохранение использования областей данных
	ОбластиДанныхНаборЗаписей = РегистрыСведений.ОбластиПерсональныхДанных.СоздатьНаборЗаписей();
	Для Каждого КлючИЗначение Из ИспользованиеОбластейДанных Цикл
		СтрокаНабора = ОбластиДанныхНаборЗаписей.Добавить();
		СтрокаНабора.ИмяОбласти = КлючИЗначение.Ключ;
		СтрокаНабора.ИспользованиеСобытийЖурналаРегистрации = КлючИЗначение.Значение;
	КонецЦикла;
	
	НачатьТранзакцию();
	Попытка
		УстановитьИспользованиеСобытияЖурналаРегистрации("_$Access$_.Access", ИспользованиеСобытияДоступ);
		// Запись областей персональных данных
		ОбластиДанныхНаборЗаписей.Записать();
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Функция составляет дерево используемых областей персональных данных
//
// Параметры:
//		нет
//
// Возвращаемое значение
//		Дерево значений - дерево областей данных с колонками:
//			Имя - строка, идентификатор области персональных данных
//			Представление - строка, пользовательское представление области данных
//			Использование - булево, признак того, что для области данных
//					установлена регистрация события "Доступ. Доступ"
//
Функция ПолучитьИспользованиеСобытияДоступ() Экспорт
	
	// Создание дерева областей
	ДеревоОбластейДанных = ДеревоОбластейПерсональныхДанных();
	
	// Расстановка пометок использования по данным регистра
	ОбластиДанныхНаборЗаписей = РегистрыСведений.ОбластиПерсональныхДанных.СоздатьНаборЗаписей();
	ОбластиДанныхНаборЗаписей.Прочитать();
	
	Для Каждого СтрокаНабора Из ОбластиДанныхНаборЗаписей Цикл
		СтрокаДерева = ДеревоОбластейДанных.Строки.Найти(СтрокаНабора.ИмяОбласти, "Имя", Истина);
		Если СтрокаДерева <> Неопределено Тогда
			СтрокаДерева.Использование = СтрокаНабора.ИспользованиеСобытийЖурналаРегистрации;
		КонецЕсли;
	КонецЦикла;

	Возврат ДеревоОбластейДанных;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Функция СведенияОПерсональныхДанных()
	
	// Таблица сведений о персональных данных
	ТаблицаСведений = Новый ТаблицаЗначений;
	ТаблицаСведений.Колонки.Добавить("Объект", 			Новый ОписаниеТипов("Строка"));
	ТаблицаСведений.Колонки.Добавить("ПоляРегистрации", Новый ОписаниеТипов("Строка"));
	ТаблицаСведений.Колонки.Добавить("ПоляДоступа", 	Новый ОписаниеТипов("Строка"));
	ТаблицаСведений.Колонки.Добавить("ОбластьДанных", 	Новый ОписаниеТипов("Строка"));
	
	// Заполнение таблицы сведений потребителями
	ЗащитаПерсональныхДанныхПереопределяемый.ЗаполнитьСведенияОПерсональныхДанных(ТаблицаСведений);

	Возврат ТаблицаСведений;
	
КонецФункции

Функция ОбластиПерсональныхДанных()
	
	// Соответствие идентификаторов областей и их пользовательских представлений
	ОбластиДанных = Новый ТаблицаЗначений;
	ОбластиДанных.Колонки.Добавить("Имя", 			Новый ОписаниеТипов("Строка"));
	ОбластиДанных.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	ОбластиДанных.Колонки.Добавить("Родитель", 		Новый ОписаниеТипов("Строка"));
	
	// Заполнение областей потребителями
	ЗащитаПерсональныхДанныхПереопределяемый.ЗаполнитьОбластиПерсональныхДанных(ОбластиДанных);
	
	Возврат ОбластиДанных;
	
КонецФункции

Функция ФормаНастройкиПодготовленаКорректно(Форма)
	
	ИмяДереваОбластей = ИмяРеквизитаДеревоОбластей();
	
	// Поиск реквизита формы
	РеквизитФормыДеревоОбластей = Неопределено;
	РеквизитыФормы = Форма.ПолучитьРеквизиты();
	Для Каждого РеквизитФормы Из РеквизитыФормы Цикл
		Если РеквизитФормы.Имя = ИмяДереваОбластей Тогда
			РеквизитФормыДеревоОбластей = РеквизитФормы;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если РеквизитФормыДеревоОбластей = Неопределено 
		Или Форма.Элементы.Найти(ИмяДереваОбластей) = Неопределено Тогда
		// В форме не обнаружен реквизит для дерева областей
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с деревом областей персональных данных
//

Функция ИмяРеквизитаДеревоОбластей()
	Возврат "ОбластиПерсональныхДанных";
КонецФункции

Функция ДеревоОбластейПерсональныхДанных()
	
	ДеревоОбластейДанных = Новый ДеревоЗначений;
	ДеревоОбластейДанных.Колонки.Добавить("Использование", Новый ОписаниеТипов("Булево"));
	ДеревоОбластейДанных.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка"));
	ДеревоОбластейДанных.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	
	ОбластиДанных = ОбластиПерсональныхДанных();
	
	// Заполнение дерева областей
	Для Каждого ОбластьДанных Из ОбластиДанных Цикл
		ДобавитьОбластьДанныхВДерево(ДеревоОбластейДанных, ОбластиДанных, ОбластьДанных);
	КонецЦикла;
	
	// Если области данных не определены для всех сведений 
	// или для отдельных - добавляем область данных по умолчанию
	ТаблицаСведений = СведенияОПерсональныхДанных();
	Если ОбластиДанных.Количество() = 0 
		Или ТаблицаСведений.НайтиСтроки(Новый Структура("ОбластьДанных", "")).Количество() > 0 Тогда
		ДобавитьОбластьДанныхВДерево(ДеревоОбластейДанных, ОбластиДанных, Новый Структура("Имя, Представление, Родитель", "", НСтр("ru = 'Персональные данные'")));
	КонецЕсли;
	
	Возврат ДеревоОбластейДанных;
	
КонецФункции

Функция ДобавитьОбластьДанныхВДерево(ДеревоОбластей, ОбластиДанных, ОбластьДанных)
	
	// Поиск области в дереве значений
	НайденнаяОбласть = ДеревоОбластей.Строки.Найти(ОбластьДанных.Имя, "Имя", Истина);
	Если НайденнаяОбласть <> Неопределено Тогда
		Возврат НайденнаяОбласть;
	КонецЕсли;
	
	// Добавление в "корень" дерева
	Родитель = ДеревоОбластей;
	Если ЗначениеЗаполнено(ОбластьДанных.Родитель) Тогда
		ОбластьРодитель = ОбластиДанных.Найти(ОбластьДанных.Родитель, "Имя");
		Если ОбластьРодитель <> Неопределено Тогда
			Родитель = ДобавитьОбластьДанныхВДерево(ДеревоОбластей, ОбластиДанных, ОбластьРодитель);
		КонецЕсли;
	КонецЕсли;
	
	// Добавление области
	НоваяОбласть = Родитель.Строки.Добавить();
	НоваяОбласть.Имя = ОбластьДанных.Имя;
	НоваяОбласть.Представление = ОбластьДанных.Представление;
	
	Возврат НоваяОбласть;
	
КонецФункции
