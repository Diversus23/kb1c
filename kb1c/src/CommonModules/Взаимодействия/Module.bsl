////////////////////////////////////////////////////////////////////////////////
// Подсистема "Взаимодействия"
// 
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАМНЫЙ ИНТЕРФЕЙС

//Вызывается из обработчиков заполнения документов - взаимодействий и предметов заполнения.
//Выполняет необходимые действия по заполнению реквизитов по умолчанию
//
//Параметры
//  Объект - ДокументОбъект - документ, для которого выполняется заполнение.
//  ДанныеЗаполнения  - Произвольный - значение,которое используется как основание для заполнения.
//
Процедура ЗаполнитьРеквизитыПоУмолчанию(Объект, ДанныеЗаполнения) Экспорт
	
	ЭтоВзаимодействие = ВзаимодействияКлиентСервер.ЯвляетсяВзаимодействием(Объект.Ссылка);
	
	//текущий пользователь является автором и ответственным по создаваемому взаимодействию
	Если ЭтоВзаимодействие Тогда
		Объект.Автор = Пользователи.ТекущийПользователь();
		Объект.Ответственный = Объект.Автор;
	КонецЕсли;
	
	Если ДанныеЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Контакты = Неопределено;
	
	Если ВзаимодействияКлиентСервер.ЯвляетсяКонтактом(ДанныеЗаполнения)
		И Не ДанныеЗаполнения.ЭтоГруппа Тогда
		// На основании контакта
		Контакты = Новый Массив;
		Контакты.Добавить(ДанныеЗаполнения);
		
	ИначеЕсли ВзаимодействияКлиентСервер.ЯвляетсяПредметом(ДанныеЗаполнения) Тогда
		// На основании предмета
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ДанныеЗаполнения);
		Контакты = МенеджерОбъекта.ПолучитьКонтакты(ДанныеЗаполнения);
		
	ИначеЕсли ВзаимодействияКлиентСервер.ЯвляетсяВзаимодействием(ДанныеЗаполнения) Тогда
		// На основании взаимодействия
		МенеджерОбъекта = ОбщегоНазначения.МенеджерОбъектаПоСсылке(ДанныеЗаполнения);
		Контакты = МенеджерОбъекта.ПолучитьКонтакты(ДанныеЗаполнения);
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		// Заполним контакт
		Если ДанныеЗаполнения.Свойство("Контакт") И ЗначениеЗаполнено(ДанныеЗаполнения.Контакт) Тогда
			Контакты = Новый Массив;
			Контакты.Добавить(ДанныеЗаполнения.Контакт);
		КонецЕсли;
		
	КонецЕсли;
	
	// Заполним участников
	Если ЗначениеЗаполнено(Контакты) И (Контакты.Количество() > 0) Тогда
		Объект.ЗаполнитьКонтакты(Контакты);
	КонецЕсли;
	
КонецПроцедуры

//Устанавливает во всей цепочке взаимодействий в качестве предмета созданный объект
//Параметры:
//  Предмет        - созданный предмет взаимодействий,
//  Взаимодействие - взаимодействие, по которому создан предмет,
//  Отказ          - флаг отказа от операции
//
Процедура ПриЗаписиПредметаИзФормы(Предмет, Взаимодействие, Отказ) Экспорт
	
	Если Не ЗначениеЗаполнено(Взаимодействие)
		Или Не ВзаимодействияКлиентСервер.ЯвляетсяВзаимодействием(Взаимодействие) Тогда
		Возврат;
	КонецЕсли;
	
	СтарыйПредмет = ПолучитьЗначениеПредмета(Взаимодействие);
	Если Предмет = СтарыйПредмет Тогда
		// Предмет уже был установлен
		Возврат;
	КонецЕсли;
	
	// Получим список взаимодействий у которых нужно изменить предмет
	Если ЗначениеЗаполнено(СтарыйПредмет)
		И ВзаимодействияКлиентСервер.ЯвляетсяВзаимодействием(СтарыйПредмет) Тогда
		МассивЗаменить = ПолучитьВзаимодействияИзЦепочки(СтарыйПредмет, Взаимодействие);
	Иначе
		МассивЗаменить = Новый Массив;
	КонецЕсли;
	МассивЗаменить.Вставить(0, Взаимодействие);
	
	// Заменим предмет во всех взаимодействиях
	
	Для Каждого Элемент Из МассивЗаменить Цикл
		Попытка
			УстановитьПредмет(Элемент, Предмет);
		Исключение
			ПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Ошибка при замене предмета у %1: %2'"),
			                                                            Элемент,
			                                                            ПредставлениеОшибки),
			,
			,
			,
			Отказ);
			Отказ = Истина;
			Возврат;
			
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС

// См. описание этой же процедуры в модуле СтандартныеПодсистемыСервер.
Процедура ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики) Экспорт
	
	// СЕРВЕРНЫЕ ОБРАБОТЧИКИ.
	
	СерверныеОбработчики["СтандартныеПодсистемы.ОбновлениеВерсииИБ\ПриДобавленииОбработчиковОбновления"].Добавить(
		"Взаимодействия");
	
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриОпределенииПредставленияПредмета"].Добавить(
		"Взаимодействия");
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		СерверныеОбработчики["СтандартныеПодсистемы.УправлениеДоступом\ПриЗаполненииВидовОграниченийПравОбъектовМетаданных"].Добавить(
			"Взаимодействия");
	КонецЕсли;
	
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриДобавленииПараметровРаботыКлиентскойЛогикиСтандартныхПодсистем"].Добавить(
		"Взаимодействия");
	
КонецПроцедуры

// Заполняет структуру параметров, необходимых для работы клиентского кода
// конфигурации. 
//
// Параметры:
//   Параметры   - Структура - структура параметров.
//
Процедура ДобавитьПараметрыРаботыКлиента(Параметры) Экспорт
	
	Параметры.Вставить("ИспользоватьПочтовыйКлиент", ПолучитьФункциональнуюОпцию("ИспользоватьПочтовыйКлиент"));
	Параметры.Вставить("ИспользоватьПрочиеВзаимодействия", ПолучитьФункциональнуюОпцию("ИспользоватьПрочиеВзаимодействия"));
	
КонецПроцедуры 

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Обработчики служебных событий подсистем БСП

// Устанавливает текстовое описание предмета
//
// Параметры
//  СсылкаНаПредмет  – ЛюбаяСсылка – объект ссылочного типа.
//  Представление	 - Строка - сюда необходимо поместить текстовое описание.
Процедура ПриОпределенииПредставленияПредмета(СсылкаНаПредмет, Представление) Экспорт
	
	Если ТипЗнч(СсылкаНаПредмет) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") ИЛИ
		ТипЗнч(СсылкаНаПредмет) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее") ИЛИ
		ТипЗнч(СсылкаНаПредмет) = Тип("ДокументСсылка.ТелефонныйЗвонок") ИЛИ 
		ТипЗнч(СсылкаНаПредмет) = Тип("ДокументСсылка.Встреча") ИЛИ 
		ТипЗнч(СсылкаНаПредмет) = Тип("ДокументСсылка.ЗапланированноеВзаимодействие") Тогда
		
		ПредставлениеОбъекта = СсылкаНаПредмет.Метаданные().ПредставлениеОбъекта;
		Если ПустаяСтрока(ПредставлениеОбъекта) Тогда
			ПредставлениеОбъекта = СсылкаНаПредмет.Метаданные().Представление();
		КонецЕсли;
		Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			"%1 (%2)", СсылкаНаПредмет.Тема, ПредставлениеОбъекта);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет состав видов доступа, используемых при ограничении прав объектов метаданных.
// Если состав видов доступа не заполнен, отчет "Права доступа" покажет некорректные сведения.
//
// Обязательно требуется заполнить только виды доступа, используемые
// в шаблонах ограничения доступа явно, а виды доступа, используемые
// в наборах значений доступа могут быть получены из текущего состояния
// регистра сведений НаборыЗначенийДоступа.
//
//  Для автоматической подготовки содержимого процедуры следует
// воспользоваться инструментами разработчика для подсистемы
// Управление доступом.
//
// Параметры:
//  Описание     - Строка, многострочная строка формата <Таблица>.<Право>.<ВидДоступа>[.Таблица объекта]
//                 Например, Документ.ПриходнаяНакладная.Чтение.Организации
//                           Документ.ПриходнаяНакладная.Чтение.Контрагенты
//                           Документ.ПриходнаяНакладная.Добавление.Организации
//                           Документ.ПриходнаяНакладная.Добавление.Контрагенты
//                           Документ.ПриходнаяНакладная.Изменение.Организации
//                           Документ.ПриходнаяНакладная.Изменение.Контрагенты
//                           Документ.ЭлектронныеПисьма.Чтение.Объект.Документ.ЭлектронныеПисьма
//                           Документ.ЭлектронныеПисьма.Добавление.Объект.Документ.ЭлектронныеПисьма
//                           Документ.ЭлектронныеПисьма.Изменение.Объект.Документ.ЭлектронныеПисьма
//                           Документ.Файлы.Чтение.Объект.Справочник.ПапкиФайлов
//                           Документ.Файлы.Чтение.Объект.Документ.ЭлектронноеПисьмо
//                           Документ.Файлы.Добавление.Объект.Справочник.ПапкиФайлов
//                           Документ.Файлы.Добавление.Объект.Документ.ЭлектронноеПисьмо
//                           Документ.Файлы.Изменение.Объект.Справочник.ПапкиФайлов
//                           Документ.Файлы.Изменение.Объект.Документ.ЭлектронноеПисьмо
//                 Вид доступа Объект предопределен, как литерал, его нет в предопределенных элементах
//                 ПланыВидовХарактеристик.ВидыДоступа. Этот вид доступа используется в шаблонах ограничений доступа,
//                 как "ссылка" на другой объект, по которому ограничивается таблица.
//                 Когда вид доступа "Объект" задан, также требуется задать типы таблиц, которые используются
//                 для этого вида доступа. Т.е. перечислить типы, которые соответствующие полю,
//                 использованному в шаблоне ограничения доступа в паре с видом доступа "Объект".
//                 При перечислении типов по виду доступа "Объект" нужно перечислить только те типы поля,
//                 которые есть у поля РегистрыСведений.НаборыЗначенийДоступа.Объект, остальные типы лишние.
// 
Процедура ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание) Экспорт
	
	Описание = Описание + 
	"
	|Справочник.ПапкиЭлектронныхПисем.Чтение.УчетныеЗаписиЭлектроннойПочты
	|Справочник.ПапкиЭлектронныхПисем.Добавление.УчетныеЗаписиЭлектроннойПочты
	|Справочник.ПапкиЭлектронныхПисем.Изменение.УчетныеЗаписиЭлектроннойПочты
	|Справочник.ПравилаОбработкиЭлектроннойПочты.Чтение.УчетныеЗаписиЭлектроннойПочты
	|Справочник.ПравилаОбработкиЭлектроннойПочты.Добавление.УчетныеЗаписиЭлектроннойПочты
	|Справочник.ПравилаОбработкиЭлектроннойПочты.Изменение.УчетныеЗаписиЭлектроннойПочты
	|Документ.Встреча.Чтение.Объект.Документ.Встреча
	|Документ.Встреча.Добавление.Объект.Документ.Встреча
	|Документ.Встреча.Изменение.Объект.Документ.Встреча
	|Документ.ЗапланированноеВзаимодействие.Чтение.Объект.Документ.ЗапланированноеВзаимодействие
	|Документ.ЗапланированноеВзаимодействие.Добавление.Объект.Документ.ЗапланированноеВзаимодействие
	|Документ.ЗапланированноеВзаимодействие.Изменение.Объект.Документ.ЗапланированноеВзаимодействие
	|Документ.ТелефонныйЗвонок.Чтение.Объект.Документ.ТелефонныйЗвонок
	|Документ.ТелефонныйЗвонок.Добавление.Объект.Документ.ТелефонныйЗвонок
	|Документ.ТелефонныйЗвонок.Изменение.Объект.Документ.ТелефонныйЗвонок
	|Документ.ЭлектронноеПисьмоВходящее.Чтение.Объект.Документ.ЭлектронноеПисьмоВходящее
	|Документ.ЭлектронноеПисьмоВходящее.Добавление.Объект.Документ.ЭлектронноеПисьмоВходящее
	|Документ.ЭлектронноеПисьмоВходящее.Изменение.Объект.Документ.ЭлектронноеПисьмоВходящее
	|Документ.ЭлектронноеПисьмоИсходящее.Чтение.Объект.Документ.ЭлектронноеПисьмоИсходящее
	|Документ.ЭлектронноеПисьмоИсходящее.Добавление.Объект.Документ.ЭлектронноеПисьмоИсходящее
	|Документ.ЭлектронноеПисьмоИсходящее.Изменение.Объект.Документ.ЭлектронноеПисьмоИсходящее
	|ЖурналДокументов.Взаимодействия.Чтение.Объект.Документ.Встреча
	|ЖурналДокументов.Взаимодействия.Чтение.Объект.Документ.ЗапланированноеВзаимодействие
	|ЖурналДокументов.Взаимодействия.Чтение.Объект.Документ.ТелефонныйЗвонок
	|ЖурналДокументов.Взаимодействия.Чтение.Объект.Документ.ЭлектронноеПисьмоВходящее
	|ЖурналДокументов.Взаимодействия.Чтение.Объект.Документ.ЭлектронноеПисьмоИсходящее
	|РегистрСведений.НастройкиУчетныхЗаписейЭлектроннойПочты.Чтение.УчетныеЗаписиЭлектроннойПочты
	|";
	
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.ПрисоединенныеФайлы") Тогда
		Описание = Описание + 
		"
		|Справочник.ВстречаПрисоединенныеФайлы.Чтение.Объект.Документ.Встреча
		|Справочник.ВстречаПрисоединенныеФайлы.Добавление.Объект.Документ.Встреча
		|Справочник.ВстречаПрисоединенныеФайлы.Изменение.Объект.Документ.Встреча
		|Справочник.ЗапланированноеВзаимодействиеПрисоединенныеФайлы.Чтение.Объект.Документ.ЗапланированноеВзаимодействие
		|Справочник.ЗапланированноеВзаимодействиеПрисоединенныеФайлы.Добавление.Объект.Документ.ЗапланированноеВзаимодействие
		|Справочник.ЗапланированноеВзаимодействиеПрисоединенныеФайлы.Изменение.Объект.Документ.ЗапланированноеВзаимодействие
		|Справочник.ТелефонныйЗвонокПрисоединенныеФайлы.Чтение.Объект.Документ.ТелефонныйЗвонок
		|Справочник.ТелефонныйЗвонокПрисоединенныеФайлы.Добавление.Объект.Документ.ТелефонныйЗвонок
		|Справочник.ТелефонныйЗвонокПрисоединенныеФайлы.Изменение.Объект.Документ.ТелефонныйЗвонок
		|Справочник.ЭлектронноеПисьмоВходящееПрисоединенныеФайлы.Чтение.Объект.Документ.ЭлектронноеПисьмоВходящее
		|Справочник.ЭлектронноеПисьмоВходящееПрисоединенныеФайлы.Добавление.Объект.Документ.ЭлектронноеПисьмоВходящее
		|Справочник.ЭлектронноеПисьмоВходящееПрисоединенныеФайлы.Изменение.Объект.Документ.ЭлектронноеПисьмоВходящее
		|Справочник.ЭлектронноеПисьмоИсходящееПрисоединенныеФайлы.Чтение.Объект.Документ.ЭлектронноеПисьмоИсходящее
		|Справочник.ЭлектронноеПисьмоИсходящееПрисоединенныеФайлы.Добавление.Объект.Документ.ЭлектронноеПисьмоИсходящее
		|Справочник.ЭлектронноеПисьмоИсходящееПрисоединенныеФайлы.Изменение.Объект.Документ.ЭлектронноеПисьмоИсходящее
		|";
	КонецЕсли;
	
КонецПроцедуры

// Заполняет структуру параметров, необходимых для работы клиентского кода
// конфигурации.
//
// Параметры:
//   Параметры   - Структура - структура параметров.
//
Процедура ПриДобавленииПараметровРаботыКлиентскойЛогикиСтандартныхПодсистем(Параметры) Экспорт
	
	ДобавитьПараметрыРаботыКлиента(Параметры);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции отвечающие за полнотекстовый поиск

// Обновляет информацию о актуальности индекса Полнотекстового поиска
//
// Параметры
//  ИнформацияОбАктуальностиИндексаППД  - Строка - в данный параметр помещается строковая информация о актуальности индекса
//  ППДВключен							 - Булево - признак доступности полнотекстового поиска
//
Процедура ОбновитьИнформациюОбАктуальностиИндексаППД(ИнформацияОбАктуальностиИндексаППД, ППДВключен, ИндексАктуален) Экспорт
	
	ИндексАктуален = Ложь;
	
	Если ПолнотекстовыйПоиск.ПолучитьРежимПолнотекстовогоПоиска() = РежимПолнотекстовогоПоиска.Запретить Тогда
		ППДВключен = Ложь;
		ИнформацияОбАктуальностиИндексаППД = НСтр("ru = 'ППД не включен'");
	Иначе
		ППДВключен = Истина;
		Если ПолнотекстовыйПоискСервер.ИндексПоискаАктуален() Тогда
			ИнформацияОбАктуальностиИндексаППД = НСтр("ru = 'Индекс актуален'");
			ИндексАктуален = Истина;
		Иначе
			ИнформацияОбАктуальностиИндексаППД = НСтр("ru = 'Дата актуальности:'")+ 
				" " + ПолнотекстовыйПоиск.ДатаАктуальности();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает поля для получения наименования владельца, если такой имеется
//
//Параметры
//  ИмяТаблицы - Строка - Имя основной таблицы, для которой формируется запрос.
//
//Возвращаемое значение:
//  Строка - строка, которая будет вставлена в запрос.
//
Функция ПолучитьИмяПоляДляНаименованияВладельца(ИмяТаблицы) Экспорт
	
	МассивОписанияКонтактов = ВзаимодействияКлиентСервер.ПолучитьМассивОписанияВозможныхКонтактов();
	
	Для каждого ЭлементОписанияМассива Из МассивОписанияКонтактов Цикл
		Если ЭлементОписанияМассива.Имя = ИмяТаблицы И ЭлементОписанияМассива.ЕстьВладелец Тогда
			Возврат "Таблица.Владелец.Наименование";
		КонецЕсли;
	КонецЦикла;
	
	Возврат """""";
	
КонецФункции

//Получает взаимодействия из цепочки по предмету взаимодействия.
//
//Параметры
//  Цепочка	  - Ссылка - предмет взаимодействия для которого получаются взаимодействия.
//  Исключать - Ссылка - взаимодействие, которое не должно попасть в результирующий массив.
//
//Возвращаемое значение:
//  Массив - найденные взаимодействия
//
Функция ПолучитьВзаимодействияИзЦепочки(Цепочка, Исключать) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ПредметыВзаимодействий.Взаимодействие КАК Ссылка
	|ИЗ
	|	РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыВзаимодействий
	|ГДЕ
	|	ПредметыВзаимодействий.Предмет = &Предмет
	|	" + ?(Исключать = Неопределено,"","  И ПредметыВзаимодействий.Взаимодействие <> &Исключать ");
	
	Запрос.УстановитьПараметр("Предмет", Цепочка);
	Запрос.УстановитьПараметр("Исключать", Исключать);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры и функции отвечающие за поиск контактов

// Возвращает список доступных видов поиска контактов
//
// Параметры
//  ППДВключен        - Булево - признак доступности полнотекстового поиска
//  Параметры         - Структура - параметры содержащие Представление и Адрес контакта
//  ЭлементыФормы     - ЭлементыФормы 
//  ДляАдреснойКниги  - Булево - истина если список формируется для адресной книги
//
// Возвращаемое значение:
//   Структура        - структура содержащая виды поиска и значения поиска в них.
//
Функция ПолучитьСписокДоступныхПоисков(ППДВключен, Параметры, ЭлементыФормы, ДляАдреснойКниги) Экспорт
	
	ВсеСпискиПоиска = Новый Структура;
	
	Если ДляАдреснойКниги Тогда
		Адрес = "";
		ДоменныйАдрес = "";
		ВариантыПоискаПоСтроке = "";
		Представление = "";
	Иначе
		Адрес = Параметры.Адрес;
		ДоменныйАдрес = ПолучитьДоменныйАдресДляПоиска(Параметры.Адрес);
		ВариантыПоискаПоСтроке = ПолучитьВариантыПоискаПоСтроке(Параметры.Представление, Параметры.Адрес);
		Представление = Параметры.Представление;
	КонецЕсли;
	
	ДобавитьВариантПоиска(ВсеСпискиПоиска, ЭлементыФормы, "ПоEmail", НСтр("ru = 'По email'"), Адрес);
	ДобавитьВариантПоиска(ВсеСпискиПоиска, ЭлементыФормы, "ПоДомену", НСтр("ru = 'По доменному имени'"), ДоменныйАдрес);
	Если Не ДляАдреснойКниги Тогда
		ДобавитьВариантПоиска(ВсеСпискиПоиска, ЭлементыФормы, "ПоТелефону", НСтр("ru = 'По телефону'"), Адрес);
	КонецЕсли;
	
	Если ППДВключен Тогда
		ДобавитьВариантПоиска(ВсеСпискиПоиска, ЭлементыФормы, "ПоСтроке",
			НСтр("ru = 'По строке'"), ВариантыПоискаПоСтроке);
	КонецЕсли;
	
	ДобавитьВариантПоиска(ВсеСпискиПоиска, ЭлементыФормы, "НачинаетсяС", НСтр("ru = 'Начинается с'"), Представление);
	
	Возврат ВсеСпискиПоиска;
	
	
КонецФункции

// Добавляет вариант поиска в список доступных поисков
//
// Параметры
//  ВсеСпискиПоиска - Структура - в нее происходит добавление варианта поиска и значения в этом варианте
//  ЭлементыФормы   - ЭлементыФормы 
//  ИмяВарианта     - Строка - Имя варианта поиска
//  Представление   - Строка - Представление варианта поиска
//  Значение        - Строка - Значение для поиска в данном варианте поиска
//
Процедура ДобавитьВариантПоиска(ВсеСпискиПоиска, ЭлементыФормы, ИмяВарианта, Представление, Значение)
	
	ЭлементыФормы.ВариантыПоиска.СписокВыбора.Добавить(ИмяВарианта, Представление);
	ВсеСпискиПоиска.Вставить(ИмяВарианта, Значение);
	
КонецПроцедуры

// Устанавливает текущим контакт в форме "Адресной книге" и "Выборе контактов".
//
// Параметры
//  Контакт - СправочникСсылка - контакт на котором необходимо спозиционироваться в форме
//  Форма   - УправляемаяФорма - форма для которой выполняются действия.
//
Процедура УстановитьТекущимКонтакт(Контакт, Форма) Экспорт
	
	Если ТипЗнч(Контакт) = Тип("СправочникСсылка.Пользователи") Тогда
		
		Форма.Элементы.СтраницыСписки.ТекущаяСтраница = Форма.Элементы.СтраницаПользователей;
		Форма.Элементы.СписокПользователей.ТекущаяСтрока = Контакт;
		
	Иначе
		
		МассивОписанийКонтактов = ВзаимодействияКлиентСервер.ПолучитьМассивОписанияВозможныхКонтактов();
		ИмяМетаданныхКонтакта = Контакт.Метаданные().Имя;
		
		Для каждого ЭлементМассиваОписания Из МассивОписанийКонтактов Цикл
			Если ЭлементМассиваОписания.Имя = ИмяМетаданныхКонтакта Тогда
				Форма.Элементы.СтраницыСписки.ТекущаяСтраница = 
					Форма.Элементы["Страница_" + ?(ЭлементМассиваОписания.ЕстьВладелец,
					                               ЭлементМассиваОписания.ИмяВладельца,
					                               ЭлементМассиваОписания.Имя)];
				Форма.Элементы["Таблица_" + ЭлементМассиваОписания.Имя].ТекущаяСтрока = Контакт;
				Если ЭлементМассиваОписания.ЕстьВладелец Тогда
					Форма.Элементы["Таблица_" + ЭлементМассиваОписания.ИмяВладельца].ТекущаяСтрока = Контакт.Владелец;
					ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
						Форма["Список_" + ЭлементМассиваОписания.Имя],"Владелец",Контакт.Владелец,,,Истина);
				КонецЕсли;
			ИначеЕсли ЭлементМассиваОписания.ИмяВладельца = ИмяМетаданныхКонтакта Тогда
				Форма.Элементы.СтраницыСписки.ТекущаяСтраница = 
					Форма.Элементы["Страница_" + ЭлементМассиваОписания.ИмяВладельца];
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
					Форма["Список_" + ЭлементМассиваОписания.Имя],"Владелец",Контакт,,,Истина);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Получает доменный адрес из адреса электронной почты
//
// Параметры
//  Адрес  - Строка - содержит адрес электронной почты из которого извлекается доменный адрес
//
// Возвращаемое значение:
//   Строка   - полученный доменный адрес
//
Функция ПолучитьДоменныйАдресДляПоиска(Адрес)
	
	Строка = Адрес;
	Позиция = Найти(Строка, "@");
	Возврат ?(Позиция = 0, "", Сред(Строка, Позиция+1));
	
КонецФункции

// Формирует варианты поиска по строке
//
// Параметры
//  Представление - Строка - представление контакта
//  Адрес         - Строка - адрес контакта
//
// Возвращаемое значение:
//   СписокЗначений
//
Функция ПолучитьВариантыПоискаПоСтроке(Представление, Адрес)
	
	Если ПустаяСтрока(Представление) Тогда
		Возврат """" + Адрес + """";
	ИначеЕсли  ПустаяСтрока(Адрес) Тогда
		Возврат """" + Представление + """";
	КонецЕсли;
	
	ВариантыПоиска = Новый СписокЗначений;
	ВариантыПоиска.Добавить("""" + Представление + """" + " ИЛИ " + Адрес);
	ВариантыПоиска.Добавить("""" + Представление + """" + " И " + Адрес);
	
	Возврат ВариантыПоиска;
	
КонецФункции

//Возвращает флаг необходимости оповещения формы взаимодействия-основания
//Параметры:
//Основание - структура, содержащая ссылку на взаимодействие, из которого создается контакт
//
Функция ЕстьРеспондент(Основание) Экспорт
	
	Если ЗначениеЗаполнено(Основание) И ТипЗнч(Основание) = Тип("Структура") Тогда
		Для Каждого Элемент Из Основание Цикл
			Если Элемент.Ключ = "Объект"
				И ВзаимодействияКлиентСервер.ЯвляетсяВзаимодействием(Элемент.Значение) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
		Возврат Ложь;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

//Возвращает массив, содержащий структуры с информацией о контактах взаимодействия
//или участниках предмета взаимодействия
//
//Параметры:
//  ТаблицаКонтактов - Документ.ТабличнаяЧасть - содержащая описания и ссылки на контакты взаимодействия
//                     или участников предмета взаимодействия
//
Функция ПреобразоватьТаблицуКонтактовВМассив(ТаблицаКонтактов) Экспорт
	
	Результат = Новый Массив;
	Для Каждого ЭлементМассива Из ТаблицаКонтактов Цикл
		Контакт = ?(ТипЗнч(ЭлементМассива.Контакт) = Тип("Строка"), Неопределено, ЭлементМассива.Контакт);
		Запись = Новый Структура(
		"Адрес, Представление, Контакт", ЭлементМассива.Адрес, ЭлементМассива.Представление, Контакт);
		Результат.Добавить(Запись);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Заполняет таблицу значений "Найденные контакты" общих форм "Адресная книга" и "Выбора контактов"
// на основании переданной таблицы значений.
//
// Параметры
//  ТаблицаКонтакты       - ТаблицаЗначений - таблица значений источник.
//  НайденныеКонтакты - ТаблицаЗначений - таблица значений приемник.
//
Процедура ЗаполнитьНайденныеКонтакты(ТаблицаКонтакты,НайденныеКонтакты) Экспорт
	
	Для Каждого Стр Из ТаблицаКонтакты Цикл
		НоваяСтрока = НайденныеКонтакты.Добавить();
		НоваяСтрока.Ссылка               = Стр.Контакт;
		НоваяСтрока.Представление        = Стр.Представление;
		НоваяСтрока.НаименованиеКонтакта = Стр.Наименование + ?(ПустаяСтрока(Стр.НаименованиеВладельца), "", " (" + Стр.НаименованиеВладельца + ")");
		НоваяСтрока.ИмяСправочника       = Стр.Контакт.Метаданные().Имя;
	КонецЦикла;
	
КонецПроцедуры

// Формирует массив метаданных возможных типов контактов
//
// Возвращаемое значение:
//   Массив   - массив содержащий метаданные возможных типов контактов
//
Функция ПолучитьМассивМетаданныхКонтакты()
	
	МассивОписанияКонтактов = ВзаимодействияКлиентСервер.ПолучитьМассивОписанияВозможныхКонтактов();
	МассивМетаданных = Новый Массив;
	Для каждого ЭлементМассиваОписания Из МассивОписанияКонтактов Цикл
	
		МассивМетаданных.Добавить(Метаданные.Справочники[ЭлементМассиваОписания.Имя]);
	
	КонецЦикла;
	
	Возврат МассивМетаданных;
	
КонецФункции 

//Подготавливает оповещение при создании на сервере документа взаимодействий
Процедура ПодготовитьОповещения(Форма,Параметры,ИспользоватьВзаимодействиеОснование = Истина) Экспорт
	
	Если Параметры.Свойство("Основание") И Параметры.Основание <> Неопределено Тогда
		
		Если ВзаимодействияКлиентСервер.ЯвляетсяВзаимодействием(Параметры.Основание) Тогда
			
			Форма.НеобходимоОповещение = Истина;
			Если ИспользоватьВзаимодействиеОснование  Тогда
				Форма.ВзаимодействиеОснование = Параметры.Основание;
			Иначе
				Форма.ОбъектОснование = Параметры.Основание;
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Параметры.Основание) = Тип("Структура") И
			Параметры.Основание.Свойство("Объект") И
			ВзаимодействияКлиентСервер.ЯвляетсяВзаимодействием(Параметры.Основание.Объект) Тогда
			
			Форма.НеобходимоОповещение = Истина;
			Если ИспользоватьВзаимодействиеОснование  Тогда
				Форма.ВзаимодействиеОснование = Параметры.Основание.Объект;
			Иначе
				Форма.ОбъектОснование = Параметры.Основание.Объект;
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Параметры.Основание) = Тип("Структура") И
			(Параметры.Основание.Свойство("Основание") И
			ВзаимодействияКлиентСервер.ЯвляетсяВзаимодействием(Параметры.Основание.Основание)) Тогда

			Форма.НеобходимоОповещение = Истина;
			Если ИспользоватьВзаимодействиеОснование  Тогда
				Форма.ВзаимодействиеОснование = Параметры.Основание.Основание;
			Иначе
				Форма.ОбъектОснование = Параметры.Основание.Основание;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли Параметры.Свойство("ЗначенияЗаполнения") И Параметры.ЗначенияЗаполнения.Свойство("Предмет") Тогда
		Форма.НеобходимоОповещение = Истина;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
//  Основные процедуры и функции поиска контактов

//Возвращает таблицу всех контактов, связанных с предметом взаимодействия
//Параметры:
//Предмет - предмет взаимодействия,
//ВключатьEmail - вернуть e-mail адреса даже если контакт не определен
//
// Возвращаемое значение:
//   ТаблицаЗначений  - таблица значений содержащая информацию о контактах
//
Функция ПолучитьВсеКонтактыПоПредметуИлиЦепочке(Предмет, ВключатьEmail)
	
	Если Не ЗначениеЗаполнено(Предмет) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ВзаимодействияКлиентСервер.ЯвляетсяВзаимодействием(Предмет) Тогда
		ТекстЗапроса = ПолучитьТекстЗапросаПоискКонтактовПоЦепочкеВзаимодействий(Истина);
	Иначе
		ТекстЗапроса = ПолучитьТекстЗапросаПоискКонтактовПоЦепочкеВзаимодействий(Истина);
		ИмяМетаданных = Предмет.Метаданные().ПолноеИмя();
		ТекстЗапроса = ТекстЗапроса + 
			ВзаимодействияПереопределяемый.ПолучитьТекстЗапросаПоискКонтактовПоПредмету(Ложь, ИмяМетаданных, Истина);
	КонецЕсли;
	
	ТекстЗапроса = ТекстЗапроса + ПолучитьТекстЗапросаНаПолучениеИнформацииОКонтактах(ВключатьEmail);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Предмет", Предмет);
	ТаблицаКонтакты = Запрос.Выполнить().Выгрузить();
	
	ТаблицаКонтакты.Колонки.Добавить("ПредставлениеНаименования");
	
	Для Каждого СтрокаТаблицы Из ТаблицаКонтакты Цикл
		СтрокаТаблицы.ПредставлениеНаименования = СтрокаТаблицы.Наименование +
			?(ПустаяСтрока(СтрокаТаблицы.НаименованиеВладельца), "", " (" + СтрокаТаблицы.НаименованиеВладельца + ")");
	КонецЦикла;
	
	Возврат ТаблицаКонтакты;
	
КонецФункции

//Возвращает текст запроса, отбирающего все контакты по цепочке взаимодействий
//Параметры:
//  ПомещатьВоВременнуюТаблицу - флаг помещения промежуточных результатов во временную таблицу
//
Функция ПолучитьТекстЗапросаПоискКонтактовПоЦепочкеВзаимодействий(ПомещатьВоВременнуюТаблицу)
	
	СписокПоиска = Новый СписокЗначений;
	СписокПоиска.Добавить("Встреча.Участники",                                 "Контакт");
	СписокПоиска.Добавить("ЗапланированноеВзаимодействие.Участники",           "Контакт");
	СписокПоиска.Добавить("ТелефонныйЗвонок",                                  "АбонентКонтакт");
	СписокПоиска.Добавить("ЭлектронноеПисьмоВходящее",                         "ОтправительКонтакт");
	СписокПоиска.Добавить("ЭлектронноеПисьмоВходящее.ПолучателиПисьма",        "Контакт");
	СписокПоиска.Добавить("ЭлектронноеПисьмоВходящее.ПолучателиКопий",         "Контакт");
	СписокПоиска.Добавить("ЭлектронноеПисьмоВходящее.ПолучателиОтвета",        "Контакт");
	СписокПоиска.Добавить("ЭлектронноеПисьмоИсходящее.ПолучателиПисьма",       "Контакт");
	СписокПоиска.Добавить("ЭлектронноеПисьмоИсходящее.ПолучателиКопий",        "Контакт");
	СписокПоиска.Добавить("ЭлектронноеПисьмоИсходящее.ПолучателиОтвета",       "Контакт");
	СписокПоиска.Добавить("ЭлектронноеПисьмоИсходящее.ПолучателиСкрытыхКопий", "Контакт");
	
	ТекстЗапроса = "";
	ТекстПроРазрешенные = " РАЗРЕШЕННЫЕ";
	ТекстВременнаяТаблица = ?(
	ПомещатьВоВременнуюТаблицу,
	"ПОМЕСТИТЬ ТаблицаКонтакты
	|",
	"");
	ТекстОбъединить = "";
	ШаблонУсловияНаСсылки = ПолучитьШаблонУсловияНаСсылкиКонтактовДляЗапроса();
	
	Для Каждого ЭлементСписка Из СписокПоиска Цикл
		ИмяТаблицы = ЭлементСписка.Значение;
		ИмяПоля    = ЭлементСписка.Представление;
		УсловиеНаСсылки = СтрЗаменить(ШаблонУсловияНаСсылки, "%ИмяПоля%", ИмяПоля);
		
		ТекстЗапроса = ТекстЗапроса + (ТекстОбъединить + 
		
		"ВЫБРАТЬ" + ТекстПроРазрешенные + " РАЗЛИЧНЫЕ
		|	Таблица." + ИмяПоля + "
		|" + ТекстВременнаяТаблица + "ИЗ
		|	Документ." + ИмяТаблицы + " КАК Таблица
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыВзаимодействий
		|	ПО Таблица.Ссылка = ПредметыВзаимодействий.Взаимодействие
		|	ГДЕ
		|		ПредметыВзаимодействий.Предмет = &Предмет
		|	И (" + УсловиеНаСсылки + ")");
		
		ТекстПроРазрешенные = "";
		ТекстВременнаяТаблица = "";
		ТекстОбъединить = "
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|";
		
	КонецЦикла;
	
	Возврат ТекстЗапроса;
	
КонецФункции

//Возвращает таблицу всех контактов, связанных с EMail
//
//Параметры
//  Адрес - Строка - адрес электронной почты для поиска
//
//Возвращаемое значение:
//  ТаблицаЗначений - таблица значений, которая содержит информацию о контактах
//
Функция ПолучитьВсеКонтактыПоEmail(Адрес) Экспорт
	
	Если ПустаяСтрока(Адрес) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = СформироватьТекстЗапросаДляПоискаПоEmail(Ложь);
	
	Запрос.УстановитьПараметр("Адрес", Адрес);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Возвращает таблицу всех контактов, связанных со списком EMail.
//
//Параметры
//  Адрес - Строка - адрес электронной почты для поиска
//
//Возвращаемое значение:
//  ВыборкаИзРезультатаЗапроса  - выборка из результата запроса содержащая информацию о контактах
//
Функция ПолучитьВсеКонтактыПоСпискуEmail(СписокАдресов) Экспорт
	
	Если СписокАдресов.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекстЗапроса = СформироватьТекстЗапросаДляПоискаПоEmail(Истина,Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("Адрес", СписокАдресов);
	Возврат Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	
КонецФункции

// Формирует строку соединения для запроса о получении информации о контакте.
//
//Параметры
//  ВключатьEmail  - Булево - признак включения в результат запроса информации о EMail.
//  ИмяСправочника - Строка - имя справочника для которого формируется запрос.
//
//Возвращаемое значение:
//  Строка - дополнение запроса.
//
Функция ПолучитьСтрокуСоединенияДляЗапросаИнформацииОКонтактах(ВключатьEmail,ИмяСправочника) Экспорт
	
	Если (Не ВключатьEmail) ИЛИ (НЕ ОбщегоНазначения.НаличиеТабличнойЧастиУСправочника(ИмяСправочника,"КонтактнаяИнформация")) Тогда
		
		Возврат "";
		
	Иначе
		
		Возврат "
		|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник."  + ИмяСправочника + ".КонтактнаяИнформация КАК ТаблицаКонтактнаяИнформация
		|			ПО Таблица.Ссылка = ТаблицаКонтактнаяИнформация.Ссылка
		|				И (ТаблицаКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))";
		
	КонецЕсли;
	
КонецФункции

// Формирует строку выборки поля, для получения в запросе адреса электронной почты.
//
// Параметры
//  ВключатьEmail  - Булево - признак необходимости получения в данном запросе
//                            адреса электронной почты.
//  ИмяСправочника - Булево - имя справочника, для которого выполняется запрос.
//  ИменоватьПоле  - Булево - признак того, что поле в запросе необходимо именовать.
//
//Возвращаемое значение:
//  Строка - строка, дополняющая запрос.
//
Функция ПолучитьСтрокуПроАдресДляЗапросаИнформацииОКонтактах(ВключатьEmail,ИмяСправочника,ИменоватьПоле = Ложь) Экспорт
	
	Если Не ВключатьEmail Тогда
		
		Возврат "";
		
	Иначе
		
		Если ОбщегоНазначения.НаличиеТабличнойЧастиУСправочника(ИмяСправочника,"КонтактнаяИнформация")Тогда
			Возврат ",
			|	ТаблицаКонтактнаяИнформация.АдресЭП";
		Иначе
			
			Возврат ",
			|	""""" + ?(ИменоватьПоле," КАК АдресЭП","");
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

// Формирует текст запроса на получение информации о контактах
//
//Параметры
//  ВключатьEmail - Булево - признак необходимости получения информации о Email.
//
// Возвращаемое значение:
//   Строка - текст запроса.
//
Функция ПолучитьТекстЗапросаНаПолучениеИнформацииОКонтактах(ВключатьEmail)
	
	МассивОписанияТиповКонтактов = ВзаимодействияКлиентСервер.ПолучитьМассивОписанияВозможныхКонтактов();
	
	ТекстЗапроса =";
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
	|	Таблица.Ссылка,
	|	Таблица.Наименование КАК Наименование,
	|	"""" КАК НаименованиеВладельца " + ПолучитьСтрокуПроАдресДляЗапросаИнформацииОКонтактах(ВключатьEmail,"Пользователи") + "
	|ИЗ
	|	ТаблицаКонтакты КАК ТаблицаКонтакты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Таблица" + ПолучитьСтрокуСоединенияДляЗапросаИнформацииОКонтактах(ВключатьEmail,"Пользователи") + "
	|		ПО ТаблицаКонтакты.Контакт = Таблица.Ссылка
	|ГДЕ
	|	(НЕ Таблица.ПометкаУдаления)
	|";
	
		
	Для каждого ЭлементМассиваОписания Из МассивОписанияТиповКонтактов Цикл
		
		Если ЭлементМассиваОписания.Имя = "Пользователи" Тогда
			Продолжить;
		Иначе
			
			ТекстЗапроса = ТекстЗапроса + "
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ
			|	Таблица.Ссылка,
			|	Таблица.Наименование,
			|	""""" + ПолучитьСтрокуПроАдресДляЗапросаИнформацииОКонтактах(ВключатьEmail,ЭлементМассиваОписания.Имя) + "
			|ИЗ
			|	ТаблицаКонтакты КАК ТаблицаКонтакты
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник." + ЭлементМассиваОписания.Имя + " КАК Таблица"  + ПолучитьСтрокуСоединенияДляЗапросаИнформацииОКонтактах(ВключатьEmail,ЭлементМассиваОписания.Имя) + "
			|		ПО ТаблицаКонтакты.Контакт = Таблица.Ссылка
			|ГДЕ
			|	(НЕ Таблица.ПометкаУдаления)
			|	"+?(ЭлементМассиваОписания.Иерархический," И (НЕ Таблица.Ссылка.ЭтоГруппа)","");
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстУпорядочитьПо = "
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	
	ТекстЗапроса = ТекстЗапроса + ТекстУпорядочитьПо;
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Формирует текст запроса для поиска контактов по Email
//
//Параметры
//  ПоискПоСписку  - Булево - признак того, что в качестве параметра передается массив значений
//
//Возвращаемое значение:
//  Строка - текст запроса.
//
Функция СформироватьТекстЗапросаДляПоискаПоEmail(ПоискПоСписку,ИтогиПоEmail = Ложь) Экспорт
	
	МассивОписанияТиповКонтактов = ВзаимодействияКлиентСервер.ПолучитьМассивОписанияВозможныхКонтактов();
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаКонтактнойИнформации.Ссылка КАК Контакт,
	|	ТаблицаКонтактнойИнформации.Представление,
	|	"""" КАК НаименованиеВладельца,
	|	ТаблицаКонтактнойИнформации.Ссылка.Наименование КАК Наименование
	|ИЗ
	|	Справочник.Пользователи.КонтактнаяИнформация КАК ТаблицаКонтактнойИнформации
	|ГДЕ
	|	ТаблицаКонтактнойИнформации.АдресЭП = &Адрес
	|	И (НЕ ТаблицаКонтактнойИнформации.Ссылка.ПометкаУдаления)
	|	И ТаблицаКонтактнойИнформации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)";
	
	Для каждого ЭлементМассиваОписания Из МассивОписанияТиповКонтактов Цикл
		
		Если ЭлементМассиваОписания.Имя = "Пользователи" Тогда
			Продолжить;
		Иначе
			
			ТекстЗапроса = ТекстЗапроса + "
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ТаблицаКонтактнойИнформации.Ссылка,
			|	ТаблицаКонтактнойИнформации.Представление,
			|	" + ?(ЭлементМассиваОписания.ЕстьВладелец," ТаблицаКонтактнойИнформации.Ссылка.Владелец.Наименование","""""") + ",
			|	ТаблицаКонтактнойИнформации.Ссылка.Наименование
			|ИЗ
			|	Справочник." + ЭлементМассиваОписания.Имя + ".КонтактнаяИнформация КАК ТаблицаКонтактнойИнформации
			|ГДЕ
			|	ТаблицаКонтактнойИнформации.АдресЭП = &Адрес
			|  И (НЕ ТаблицаКонтактнойИнформации.Ссылка.ПометкаУдаления)
			|	И ТаблицаКонтактнойИнформации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты)
			|  "+?(ЭлементМассиваОписания.Иерархический," И (НЕ ТаблицаКонтактнойИнформации.Ссылка.ЭтоГруппа)","");
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	
	
	Если ИтогиПоEmail Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|
		|ИТОГИ ПО
		|	Представление";
	КонецЕсли;
	
	Если ПоискПоСписку Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "= &Адрес", "В (&Адрес)");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Формирует текст запроса для поиска контактов по телефону и выполняет его.
//
//Параметры
//  Телефон - Строка - строка, содержащая телефон.
//  Форма   - УправляемаяФорма - Форма, для которой выполняется операция.
//
//Возвращаемое значение:
//  Булево - Истина, если найден хотя бы один контакт.
//
Функция ПолучитьВсеКонтактыПоТелефону(Телефон,Форма) Экспорт
	
	МассивОписанияТиповКонтактов = ВзаимодействияКлиентСервер.ПолучитьМассивОписанияВозможныхКонтактов();
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаКонтактнойИнформации.Ссылка КАК Контакт,
	|	ПОДСТРОКА(ТаблицаКонтактнойИнформации.Представление, 1, 1000)КАК Представление,
	|	ТаблицаКонтактнойИнформации.Ссылка.Наименование КАК Наименование,
	|	"""" КАК НаименованиеВладельца
	|ИЗ
	|	Справочник.Пользователи.КонтактнаяИнформация КАК ТаблицаКонтактнойИнформации
	|ГДЕ
	|	ПОДСТРОКА(ТаблицаКонтактнойИнформации.Представление, 1, 100) = &Телефон
	|	И (ТаблицаКонтактнойИнформации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
	|			ИЛИ ТаблицаКонтактнойИнформации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Факс))
	|  И (НЕ ТаблицаКонтактнойИнформации.Ссылка.ПометкаУдаления)
	|";
	
	Для каждого ЭлементМассиваОписания Из МассивОписанияТиповКонтактов Цикл
		
		Если ЭлементМассиваОписания.Имя = "Пользователи" Тогда
			Продолжить;
		Иначе
			
			ТекстЗапроса =ТекстЗапроса +  "
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ТаблицаКонтактнойИнформации.Ссылка,
			|	ПОДСТРОКА(ТаблицаКонтактнойИнформации.Представление, 1, 1000),
			|	ТаблицаКонтактнойИнформации.Ссылка.Наименование,
			|	" + ?(ЭлементМассиваОписания.ЕстьВладелец," ТаблицаКонтактнойИнформации.Ссылка.Владелец.Наименование","""""") + "
			|ИЗ
			|	Справочник." + ЭлементМассиваОписания.Имя + ".КонтактнаяИнформация КАК ТаблицаКонтактнойИнформации
			|ГДЕ
			|	ПОДСТРОКА(ТаблицаКонтактнойИнформации.Представление, 1, 100) = &Телефон
			|	И (ТаблицаКонтактнойИнформации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Телефон)
			|			ИЛИ ТаблицаКонтактнойИнформации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Факс))
			|  И (НЕ ТаблицаКонтактнойИнформации.Ссылка.ПометкаУдаления)
			|  "+?(ЭлементМассиваОписания.Иерархический," И (НЕ ТаблицаКонтактнойИнформации.Ссылка.ЭтоГруппа)","");
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("Телефон", Телефон);
	ТаблицаКонтакты = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаКонтакты = Неопределено ИЛИ ТаблицаКонтакты.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗаполнитьНайденныеКонтакты(ТаблицаКонтакты,Форма.НайденныеКонтакты);
	
	Возврат Истина;
	
КонецФункции

//Формирует текст запроса для поиска контактов по началу наименования и выполняет его.
//
//Параметры
//  Наименование - Строка - строка, содержащая начало наименования контакта.
//
//Возвращаемое значение:
//  ТаблицаЗначений - Результат выполненного запроса выгруженный в таблицу значений.
//
Функция ПолучитьВсеКонтактыПоНачалуНаименования(Наименование) Экспорт
	
	МассивОписанияТиповКонтактов = ВзаимодействияКлиентСервер.ПолучитьМассивОписанияВозможныхКонтактов();
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Таблица.Ссылка КАК Контакт,
	|	Таблица.Наименование КАК Наименование,
	|	"""" КАК НаименованиеВладельца,
	|	"""" КАК Представление
	|ИЗ
	|	Справочник.Пользователи КАК Таблица
	|ГДЕ
	|	Таблица.Наименование ПОДОБНО &Наименование
	|	И (НЕ Таблица.ПометкаУдаления)
	|";
	
	Для каждого ЭлементМассиваОписания Из МассивОписанияТиповКонтактов Цикл
		
		Если ЭлементМассиваОписания.Имя = "Пользователи" Тогда
			Продолжить;
		Иначе
			
			ТекстЗапроса =ТекстЗапроса +  "
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ТаблицаСправочника.Ссылка,
			|	ТаблицаСправочника.Наименование,
			|	" + ?(ЭлементМассиваОписания.ЕстьВладелец," ТаблицаСправочника.Владелец.Наименование","""""") + ",
			|	""""
			|ИЗ
			|	Справочник." +ЭлементМассиваОписания.Имя +" КАК ТаблицаСправочника
			|ГДЕ
			|	ТаблицаСправочника.Наименование ПОДОБНО &Наименование "+?(ЭлементМассиваОписания.Иерархический, " И (НЕ ТаблицаСправочника.ЭтоГруппа)","")+"
			|	И (НЕ ТаблицаСправочника.ПометкаУдаления)";
			
		КонецЕсли;
	
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";	
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("Наименование", Наименование + "%");
	Возврат Запрос.Выполнить().Выгрузить(); 
	
КонецФункции

//Формирует текст запроса для поиска контактов по началу наименования с адресами электронной почты 
//и выполняет его.
//
//Параметры
//  Наименование - Строка - строка, содержащая начало наименования контакта.
//  Форма        - УправляемаяФорма - Форма, для которой выполняется операция.
//
//Возвращаемое значение:
//  Булево - Истина, если найден хотя бы один контакт.
//
Функция ПолучитьВсеКонтактыПоНачалуНаименованияСАдресамиЭлектроннойПочты(Наименование,Форма) Экспорт
	
	МассивОписанияТиповКонтактов = ВзаимодействияКлиентСервер.ПолучитьМассивОписанияВозможныхКонтактов();
	
	ТекстЗапроса =
	" ВЫБРАТЬ
	|	Таблица.Ссылка КАК Контакт,
	|	Таблица.Наименование КАК Наименование,
	|	"""" КАК НаименованиеВладельца,
	|	ТаблицаКонтактнаяИнформация.АдресЭП КАК Представление
	|ИЗ
	|	Справочник.Пользователи КАК Таблица
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи.КонтактнаяИнформация КАК ТаблицаКонтактнаяИнформация
	|		ПО (ТаблицаКонтактнаяИнформация.Ссылка = Таблица.Ссылка)
	|			И (ТаблицаКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
	|ГДЕ
	|	Таблица.Наименование ПОДОБНО &Наименование
	|	И (НЕ Таблица.ПометкаУдаления)";
	
	Для каждого ЭлементМассиваОписания Из МассивОписанияТиповКонтактов Цикл
		
		Если ЭлементМассиваОписания.Имя = "Пользователи" Тогда
			Продолжить;
		Иначе
			
			ТекстЗапроса =ТекстЗапроса +  "
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ТаблицаСправочника.Ссылка,
			|	ТаблицаСправочника.Наименование,
			|	" + ?(ЭлементМассиваОписания.ЕстьВладелец," ТаблицаСправочника.Владелец.Наименование","""""") + ",
			|	ТаблицаКонтактнаяИнформация.АдресЭП
			|ИЗ
			|	Справочник." +ЭлементМассиваОписания.Имя +" КАК ТаблицаСправочника
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник." + ЭлементМассиваОписания.Имя + ".КонтактнаяИнформация КАК ТаблицаКонтактнаяИнформация
			|		ПО (ТаблицаКонтактнаяИнформация.Ссылка = ТаблицаСправочника.Ссылка)
			|			И (ТаблицаКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
			|ГДЕ
			|	ТаблицаСправочника.Наименование ПОДОБНО &Наименование "+?(ЭлементМассиваОписания.Иерархический," И (НЕ ТаблицаСправочника.ЭтоГруппа)","")+"
			|	И (НЕ ТаблицаСправочника.ПометкаУдаления)";
			
		КонецЕсли;
	
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("Наименование", Наименование + "%");
	ТаблицаКонтакты = Запрос.Выполнить().Выгрузить(); 
	
	Если ТаблицаКонтакты = Неопределено ИЛИ ТаблицаКонтакты.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗаполнитьНайденныеКонтакты(ТаблицаКонтакты,Форма.НайденныеКонтакты);
	Возврат Истина;
	
КонецФункции

//Формирует шаблон условия для запроса, на соответствие получаемого поля в запросе типу возможного контакта.
//
//Возвращаемое значение:
//  Строка   - сформированный текст шаблона условия.
//
Функция ПолучитьШаблонУсловияНаСсылкиКонтактовДляЗапроса() Экспорт
	
	МассивОписанияТиповКонтактов = ВзаимодействияКлиентСервер.ПолучитьМассивОписанияВозможныхКонтактов();
	
	ТекстКВозврату =  "Таблица.%ИмяПоля% ССЫЛКА Справочник.Пользователи";
	
	Для каждого ЭлементМассиваОписания Из МассивОписанияТиповКонтактов Цикл
	
		Если ЭлементМассиваОписания.Имя = "Пользователи" Тогда
			Продолжить;
		Иначе
			ТекстКВозврату = ТекстКВозврату + "
			|ИЛИ Таблица.%ИмяПоля% ССЫЛКА Справочник." + ЭлементМассиваОписания.Имя;
		КонецЕсли;
	
	КонецЦикла;
		
	Возврат ТекстКВозврату;
	
КонецФункции

//Осуществляет поиск контактов по Email или по домену Email.
//
//Параметры
//  СтрокаПоиска - Строка - служит основой для поиска.
//  ПоДомену     - Булево - признак того, что поиск необходимо осуществлять по домену.
//  Форма        - УправляемаяФорма - Форма, для которой выполняется операция.	
//
//Возвращаемое значение:
//  Булево - Истина, если найден хотя бы один контакт.
//
Функция НайтиПоEmail(СтрокаПоиска,ПоДомену,Форма) Экспорт
	
	Если ПоДомену Тогда
		ТаблицаКонтакты = ПолучитьКонтактыПоДоменномуАдресу(СтрокаПоиска);
	Иначе
		ТаблицаКонтакты = ПолучитьВсеКонтактыПоEmail(СтрокаПоиска);
	КонецЕсли;
	
	Если ТаблицаКонтакты = Неопределено ИЛИ ТаблицаКонтакты.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ЗаполнитьНайденныеКонтакты(ТаблицаКонтакты, Форма.НайденныеКонтакты);
	
	Возврат Истина;
	
КонецФункции

//Возвращает контакты по доменному адресу
//
//Параметры
//  ИмяДомена - Строка - имя домена, по которому осуществляется поиск.
//
//Возвращаемое значение:
//  ТаблицаЗначений - таблица, содержащая информацию о найденных контактах 
//
Функция ПолучитьКонтактыПоДоменномуАдресу(ИмяДомена) Экспорт
	
	Если ПустаяСтрока(ИмяДомена) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПерваяТаблица = Истина;
	ТекстЗапроса = "";
	
	МассивОписанияКонтактов = ВзаимодействияКлиентСервер.ПолучитьМассивОписанияВозможныхКонтактов();
	Для каждого ЭлементМассиваОписания Из МассивОписанияКонтактов Цикл
		
		Если ЭлементМассиваОписания.ИскатьПоДомену Тогда
			
			Если ПерваяТаблица Тогда
				
				ТекстЗапроса = ТекстЗапроса + "ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ ";
				
			Иначе
				
				ТекстЗапроса = ТекстЗапроса + "
				|ОБЪЕДИНИТЬ ВСЕ
				|
				|ВЫБРАТЬ";
				
			КонецЕсли;
			
			ТекстЗапроса = ТекстЗапроса + "
			|	ТаблицаКонтактнаяИнформация.Ссылка КАК Контакт,
			|	ТаблицаКонтактнаяИнформация.Ссылка.Наименование КАК Наименование,
			|	ТаблицаКонтактнаяИнформация.АдресЭП КАК Представление,
			|	" + ?(ЭлементМассиваОписания.ЕстьВладелец,"ТаблицаКонтактнаяИнформация.Ссылка.Владелец.Наименование ","""""") + ?(ПерваяТаблица," КАК НаименованиеВладельца ","") +" 
			|ИЗ
			|	Справочник." + ЭлементМассиваОписания.Имя + ".КонтактнаяИнформация КАК ТаблицаКонтактнаяИнформация
			|ГДЕ
			|	ТаблицаКонтактнаяИнформация.АдресЭП ПОДОБНО &СтрокаПоиска";
			
			
			ПерваяТаблица = Ложь;
		КонецЕсли;	
	КонецЦикла;
	
	Если НЕ ПерваяТаблица Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка,
		|	АдресЭП";
	Иначе
		Возврат Неопределено;
	КонецЕсли;	
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("СтрокаПоиска", "%@" + ИмяДомена);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

//Выполняет поиск контактов по строке
//
// Параметры
//  Форма            - УправляемаяФорма - форма для которой осуществляется поиск.
//  ДляАдреснойКниги - Булево - признак того, что поиск осуществляется для адресной книги.
//
//Возвращаемое значение:
//  Строка           - сообщение пользователю по результатам поиска, если такое необходимо.
//
Функция ОсуществитьПоискКонтактовПоСтроке(Форма,ДляАдреснойКниги = Ложь) Экспорт
	
	Форма.НайденныеКонтакты.Очистить();
	
	Если ПустаяСтрока(Форма.СтрокаПоиска) Тогда
		Возврат "";
	КонецЕсли;
	
	Если ПолнотекстовыйПоиск.ПолучитьРежимПолнотекстовогоПоиска() = РежимПолнотекстовогоПоиска.Запретить Тогда
		Возврат НСтр("ru = 'Использование индекса полнотекстового поиска данных запрещено!'");
	КонецЕсли;
	
	МассивМетаданных = ПолучитьМассивМетаданныхКонтакты();
	
	СписокПоиска = ПолнотекстовыйПоиск.СоздатьСписок(Форма.СтрокаПоиска, 101);
	СписокПоиска.ОбластьПоиска = МассивМетаданных;
	СписокПоиска.ПерваяЧасть();
	
	КоличествоНайденныхЭлементов = СписокПоиска.Количество();
	Если КоличествоНайденныхЭлементов = 0 Тогда
		Возврат "";
	КонецЕсли;
	
	МассивСсылок = Новый Массив;
	СоответствиеОписаний = Новый Соответствие;
	Для Инд = 0 По Мин(КоличествоНайденныхЭлементов, 100)-1 Цикл
		ЭлементСписка = СписокПоиска.Получить(Инд);
		МассивСсылок.Добавить(ЭлементСписка.Значение);
		СоответствиеОписаний.Вставить(ЭлементСписка.Значение, ЭлементСписка.Описание);
	КонецЦикла;
	
	Если ДляАдреснойКниги Тогда
		ТекстЗапроса = ПолучитьТекстЗапросаПоискКонтактовПоСтрокеСEmail();
	Иначе	
		ТекстЗапроса = ПолучитьТекстЗапросаПоискКонтактовПоСтроке();
	КонецЕсли;
	
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("МассивСсылок", МассивСсылок);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Форма.НайденныеКонтакты.Добавить();
		НоваяСтрока.Ссылка = Выборка.Контакт;
		НоваяСтрока.Представление = ?(ДляАдреснойКниги ,Выборка.Представление,СоответствиеОписаний.Получить(Выборка.Контакт));
		НоваяСтрока.НаименованиеКонтакта = Выборка.Наименование + 
			?(ПустаяСтрока(Выборка.НаименованиеВладельца), "", " (" + Выборка.НаименованиеВладельца + ")");
	КонецЦикла;
	
	Возврат ?(КоличествоНайденныхЭлементов < 101, "", НСтр("ru = 'Уточните параметры поиска. В списке отображены не все найденные контакты!'"));
	
КонецФункции

//Формирует текст запроса для поиска контактов по строке
//
//Возвращаемое значение:
//  Строка - текст запроса.
//
Функция ПолучитьТекстЗапросаПоискКонтактовПоСтроке()
	
	МассивОписанияТиповКонтактов = ВзаимодействияКлиентСервер.ПолучитьМассивОписанияВозможныхКонтактов();
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
	|	ТаблицаСправочника.Ссылка КАК Контакт,
	|	ТаблицаСправочника.Наименование КАК Наименование,
	|	"""" КАК НаименованиеВладельца,
	|	"""" КАК Представление
	|ИЗ
	|	Справочник.Пользователи КАК ТаблицаСправочника
	|ГДЕ
	|	ТаблицаСправочника.Ссылка В(&МассивСсылок)
	|	И (НЕ ТаблицаСправочника.ПометкаУдаления)";
	
	Для каждого ЭлементМассиваОписания Из МассивОписанияТиповКонтактов Цикл
		
		Если ЭлементМассиваОписания.Имя = "Пользователи" Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстЗапроса =ТекстЗапроса +  "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаСправочника.Ссылка,
		|	ТаблицаСправочника.Наименование,
		|	" + ?(ЭлементМассиваОписания.ЕстьВладелец," ТаблицаСправочника.Владелец.Наименование","""""") + ",
		|	""""
		|ИЗ
		|	Справочник." +ЭлементМассиваОписания.Имя +" КАК ТаблицаСправочника
		|ГДЕ
		|	ТаблицаСправочника.Ссылка В(&МассивСсылок) "+?(ЭлементМассиваОписания.Иерархический," И (НЕ ТаблицаСправочника.ЭтоГруппа)","")+"
		|	И (НЕ ТаблицаСправочника.ПометкаУдаления)";
		
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Формирует текст запроса для поиска контактов по строке с получением информации о адресах EMail.
//
//Возвращаемое значение:
//  Строка - текст запроса.
//
Функция ПолучитьТекстЗапросаПоискКонтактовПоСтрокеСEmail()
	
	МассивОписанияТиповКонтактов = ВзаимодействияКлиентСервер.ПолучитьМассивОписанияВозможныхКонтактов();
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ РАЗРЕШЕННЫЕ
	|	ТаблицаСправочника.Ссылка КАК Контакт,
	|	ТаблицаСправочника.Наименование КАК Наименование,
	|	"""" КАК НаименованиеВладельца,
	|	ТаблицаКонтактнаяИнформация.АдресЭП КАК Представление
	|ИЗ
	|	Справочник.Пользователи КАК ТаблицаСправочника
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи.КонтактнаяИнформация КАК ТаблицаКонтактнаяИнформация
	|		ПО (ТаблицаКонтактнаяИнформация.Ссылка = ТаблицаСправочника.Ссылка)
	|			И (ТаблицаКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
	|ГДЕ
	|	ТаблицаСправочника.Ссылка В(&МассивСсылок)
	|	И (НЕ ТаблицаСправочника.ПометкаУдаления)";
	
	Для каждого ЭлементМассиваОписания Из МассивОписанияТиповКонтактов Цикл
		
		Если ЭлементМассиваОписания.Имя = "Пользователи" Тогда
			Продолжить;
		КонецЕсли;
		
		ТекстЗапроса =ТекстЗапроса + "
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаСправочника.Ссылка,
		|	ТаблицаСправочника.Наименование,
		|	" + ?(ЭлементМассиваОписания.ЕстьВладелец," ТаблицаСправочника.Владелец.Наименование","""""") + ",
		|	ТаблицаКонтактнаяИнформация.АдресЭП
		|ИЗ
		|	Справочник." +ЭлементМассиваОписания.Имя +" КАК ТаблицаСправочника
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник." + ЭлементМассиваОписания.Имя + ".КонтактнаяИнформация КАК ТаблицаКонтактнаяИнформация
		|		ПО (ТаблицаКонтактнаяИнформация.Ссылка = ТаблицаСправочника.Ссылка)
		|			И (ТаблицаКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
		|ГДЕ
		|	ТаблицаСправочника.Ссылка В(&МассивСсылок) "+?(ЭлементМассиваОписания.Иерархический," И (НЕ ТаблицаСправочника.ЭтоГруппа)","")+"
		|	И (НЕ ТаблицаСправочника.ПометкаУдаления)";
		
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование";
	
	Возврат ТекстЗапроса;
	
КонецФункции

//Получает контакты по предмету взаимодействия, устанавливает текущей страницей формы поиска страницу
//поиска контактов по предмету
//
//Параметры
//  ЭлементыФормы      - КоллекцияЭлементовУправляемойФормы - предоставляет доступ к элементам формы.
//  Предмет            - СправочникСсылка, ДокументСсылка - предмет взаимодействия
//  КонтактыПоПредмету - ТаблицаЗначений - реквизит формы, в который помещаются найденные контакты.
//  ВключатьEmail      - Булево - признак необходимости получения данных о электронном адресе контакта.
//
Процедура ЗаполнитьКонтактыПоПредмету(ЭлементыФормы, Предмет, КонтактыПоПредмету, ВключатьEmail) Экспорт
	
	Если Не ЗначениеЗаполнено(Предмет) Тогда
		ЭлементыФормы.СтраницаВсеКонтактыПоПредмету.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	ТаблицаКонтакты = ПолучитьВсеКонтактыПоПредметуИлиЦепочке(Предмет, ВключатьEmail);
	Если (ТаблицаКонтакты = Неопределено) ИЛИ (ТаблицаКонтакты.Количество() = 0) Тогда
		ЭлементыФормы.СтраницаВсеКонтактыПоПредмету.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ТаблицаКонтакты Цикл
		НоваяСтрока = КонтактыПоПредмету.Добавить();
		НоваяСтрока.Ссылка = СтрокаТаблицы.Ссылка;
		НоваяСтрока.Наименование = СтрокаТаблицы.Наименование;
		НоваяСтрока.ИмяСправочника = СтрокаТаблицы.Ссылка.Метаданные().Имя;
		НоваяСтрока.ПредставлениеНаименования = СтрокаТаблицы.ПредставлениеНаименования;
		Если ВключатьEmail Тогда
			НоваяСтрока.Адрес = СтрокаТаблицы.АдресЭП;
		КонецЕсли;
	КонецЦикла;
	
	ЭлементыФормы.СтраницыСписки.ТекущаяСтраница = ЭлементыФормы.СтраницаВсеКонтактыПоПредмету;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////
//  Процедуры и функции получения данных контактов, взаимодействий и предметов взаимодействий

//Возвращает ссылку на текущий предмет взаимодействия
//Параметры:
//  Ссылка - ссылка на взаимодействие
//
//Возвращаемое значение:
//  СправочникОбъект, ДокументОбъект   - предмет взаимодействия.
//
Функция ПолучитьЗначениеПредмета(Ссылка) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПредметыВзаимодействий.Предмет
	|ИЗ
	|	РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыВзаимодействий
	|ГДЕ
	|	ПредметыВзаимодействий.Взаимодействие = &Взаимодействие";
	
	Запрос.УстановитьПараметр("Взаимодействие",Ссылка);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Предмет;
	КонецЕсли;
	
КонецФункции

//Возвращает ссылку на текущую папку электронного письма
//Параметры:
//  Ссылка - ссылка на взаимодействие
//
//Возвращаемое значение:
//  СправочникОбъект, ДокументОбъект   - предмет взаимодействия.
//
Функция ПолучитьПапкуЭлектронногоПисьма(Письмо) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПредметыВзаимодействий.ПапкаЭлектронногоПисьма
	|ИЗ
	|	РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыВзаимодействий
	|ГДЕ
	|	ПредметыВзаимодействий.Взаимодействие = &Взаимодействие";
	
	Запрос.УстановитьПараметр("Взаимодействие",Письмо);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Справочники.ПапкиЭлектронныхПисем.ПустаяСсылка();
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.ПапкаЭлектронногоПисьма;
	КонецЕсли;
	
КонецФункции

//Получает количество взаимодействий по контакту
//Параметры:
//  Контакт - ссылка на контакт
//
//Возвращаемое значение:
//  Число   - количество взаимодействий по контакту.
//
Функция ПолучитьКоличествоВзаимодействийПоКонтакту(Контакт) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ВложенныйЗапрос.Ссылка) КАК Количество
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ВстречаУчастники.Ссылка КАК Ссылка
	|	ИЗ
	|		Документ.Встреча.Участники КАК ВстречаУчастники
	|	ГДЕ
	|		ВстречаУчастники.Контакт В(&Контакт)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТелефонныйЗвонок.Ссылка
	|	ИЗ
	|		Документ.ТелефонныйЗвонок КАК ТелефонныйЗвонок
	|	ГДЕ
	|		ТелефонныйЗвонок.АбонентКонтакт В(&Контакт)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ЭлектронноеПисьмоВходящее.Ссылка
	|	ИЗ
	|		Документ.ЭлектронноеПисьмоВходящее КАК ЭлектронноеПисьмоВходящее
	|	ГДЕ
	|		ЭлектронноеПисьмоВходящее.ОтправительКонтакт В(&Контакт)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ЭлектронноеПисьмоИсходящееПолучателиПисьма.Ссылка
	|	ИЗ
	|		Документ.ЭлектронноеПисьмоИсходящее.ПолучателиПисьма КАК ЭлектронноеПисьмоИсходящееПолучателиПисьма
	|	ГДЕ
	|		ЭлектронноеПисьмоИсходящееПолучателиПисьма.Контакт В(&Контакт)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ЗапланированноеВзаимодействиеУчастники.Ссылка
	|	ИЗ
	|		Документ.ЗапланированноеВзаимодействие.Участники КАК ЗапланированноеВзаимодействиеУчастники
	|	ГДЕ
	|		ЗапланированноеВзаимодействиеУчастники.Контакт В(&Контакт)) КАК ВложенныйЗапрос";
	
	Запрос.УстановитьПараметр("Контакт",Контакт);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат 0;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Количество;
	КонецЕсли;

КонецФункции

///////////////////////////////////////////////////////////////////////////////////
//  Процедуры и функции работы с взаимодействиями

//Получает массив описания возможных контактов и формирует из него список значений
//контактов, которые можно создать интерактивно.
//
//Возвращаемое значение:
//  СписокЗначений - список значений, который содержит контакты, которые можно создать интерактивно.
//
Функция СоздатьСписокЗначенийИнтерактивноСоздаваемыхКонтактов() Экспорт
	
	МассивОписанияВозможныхТиповКонтактов = ВзаимодействияКлиентСервер.ПолучитьМассивОписанияВозможныхКонтактов();
	СписокКонтактовКоторыеМожноСоздать = Новый СписокЗначений;
	
	Для каждого ЭлементМассива Из МассивОписанияВозможныхТиповКонтактов Цикл
		
		Если ЭлементМассива.ВозможностьИнтерактивногоСоздания И ПравоДоступа("Добавление", Метаданные.Справочники[ЭлементМассива.Имя])Тогда
			
			СписокКонтактовКоторыеМожноСоздать.Добавить(ЭлементМассива.Имя, ЭлементМассива.Представление);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СписокКонтактовКоторыеМожноСоздать;
	
КонецФункции

// Устанавливает предмет взаимодействия по данным заполнения документа взаимодействия
//
// Параметры
//  Параметры  - Структура - параметры, переданные при создании документа взаимодействия
//  Предмет    - ДокументСсылка, СправочникСсылка - в данную процедуру устанавливается предмет
//              взаимодействия согласно данным заполнения.
//
Процедура УстановитьПредметПоДаннымЗаполнения(Параметры,Предмет) Экспорт
	
	Если ВзаимодействияКлиентСервер.ЯвляетсяПредметом(Параметры.Основание) Тогда
		
		Предмет = Параметры.Основание;
		
	ИначеЕсли ВзаимодействияКлиентСервер.ЯвляетсяВзаимодействием(Параметры.Основание) Тогда
		
		Предмет = ПолучитьЗначениеПредмета(Параметры.Основание);
		
	ИначеЕсли ТипЗнч(Параметры.Основание) = Тип("Структура") И Параметры.Основание.Свойство("Основание") И
		ВзаимодействияКлиентСервер.ЯвляетсяВзаимодействием(Параметры.Основание.Основание) Тогда
		
		Предмет = ПолучитьЗначениеПредмета(Параметры.Основание.Основание);
		
	ИначеЕсли Параметры.ЗначенияЗаполнения.Свойство("Предмет") Тогда
		
		Предмет = Параметры.ЗначенияЗаполнения.Предмет;
		
	ИначеЕсли Не Параметры.ЗначениеКопирования.Пустая() Тогда
		
		Предмет = ПолучитьЗначениеПредмета(Параметры.ЗначениеКопирования);
		
	КонецЕсли;
	
КонецПроцедуры

//Формирует массив участников документов взаимодействий  по табличной части документов.
//
//Параметры
//  Ссылка - ДокументСсылка - ссылка на документ взаимодействия.
//
//Возвращаемое значение:
//  Массив - массив структур, содержащих информацию о контактах.
//
Функция ПолучитьУчастниковПоТаблице(Ссылка) Экспорт
	
	ПолноеИмяОбъекта = Ссылка.Метаданные().ПолноеИмя();
	ИмяТаблицы = ?(ТипЗнч(Ссылка) = Тип("ДокументСсылка.СообщениеSMS"), "Адресаты", "Участники");
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Участники.Контакт,
	|	Участники.ПредставлениеКонтакта КАК Представление,
	|	Участники.КакСвязаться КАК Адрес
	|ИЗ
	|	" + ПолноеИмяОбъекта + "." + ИмяТаблицы + " КАК Участники
	|ГДЕ
	|	Участники.Ссылка = &Ссылка";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Возврат ПреобразоватьТаблицуКонтактовВМассив(Запрос.Выполнить().Выгрузить());
	
КонецФункции

//Формирует массив участника взаимодействия, содержащий одну структуру по переданным полям.
//
//Параметры
//  Ссылка - ДокументСсылка - ссылка на документ взаимодействия.
//
//Возвращаемое значение:
//  Массив - массив структур, содержащих информацию о контактах.
//
Функция ПолучитьУчастникаПоПолям(Контакт, Адрес, Представление) Экспорт
	
	СтруктураКонтакта = Новый Структура("Контакт, Адрес, Представление", Контакт, Адрес, Представление);
	ФормируемыйМассив = Новый Массив;
	ФормируемыйМассив.Добавить(СтруктураКонтакта);
	Возврат ФормируемыйМассив;
	
КонецФункции

//Проверяет содержит ли входящий массив хотя бы один элемент.
//
//Параметры
//  Контакты - Массив 
//
//Возвращаемое значение:
//  Булево - Истина, если содержит, и ложь в обратном случае.
//
Функция КонтактыЗаполнены(Контакты) Экспорт
	
	Возврат (ЗначениеЗаполнено(Контакты) И (Контакты.Количество() > 0));
	
КонецФункции

// Заполняет табличную часть участники у документов Встреча и Запланированное взаимодействие.
//
// Параметры
//  Контакты  - Массив - массив, содержащий участников взаимодействия.
//  Участники - ТабличнаяЧастьДокумента - табличная часть документа, которая будет заполнена
//                                        на основании массива.
//
Процедура ЗаполнитьКонтактыДляВстречи(Контакты, Участники, ТипКонтактнойИнформации = Неопределено) Экспорт
	
	Если Не КонтактыЗаполнены(Контакты) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ЭлементМассива Из Контакты Цикл
		
		НоваяСтрока = Участники.Добавить();
		Если ТипЗнч(ЭлементМассива) = Тип("Структура") Тогда
			НоваяСтрока.Контакт = ЭлементМассива.Контакт;
			НоваяСтрока.ПредставлениеКонтакта = ЭлементМассива.Представление;
			НоваяСтрока.КакСвязаться = ЭлементМассива.Адрес;
		Иначе
			НоваяСтрока.Контакт = ЭлементМассива;
		КонецЕсли;
		
		ДозаполнитьПоляКонтактов(НоваяСтрока.Контакт, НоваяСтрока.ПредставлениеКонтакта, НоваяСтрока.КакСвязаться , ТипКонтактнойИнформации);
		
	КонецЦикла;
	
КонецПроцедуры

//Заполняет значения прочих полей в строках табличной части Участники документов взаимодействий.
//
//Параметры
//  Контакт                 - СправочникСсылка - контакт, на основании данных которого будут заполнены прочие поля.
//  Представление           - Строка - представление контакта.
//  Адрес                   - Строка - контактная информация контакта.
//  ТипКонтактнойИнформации - Перечисления.ТипыКонтактнойИнформации - контактная информация контакта.
//
Процедура ДозаполнитьПоляКонтактов(Контакт, Представление, Адрес, ТипКонтактнойИнформации = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Контакт) Тогда
		Возврат;
	ИначеЕсли Не ПустаяСтрока(Представление) И Не ПустаяСтрока(Адрес) Тогда
		Возврат;
	КонецЕсли;
	
	// Заполним поле представление
	Если ПустаяСтрока(Представление) Тогда
		Представление = ?(ЗначениеЗаполнено(Контакт), ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Контакт,"Наименование"),"");
	КонецЕсли;
	
	// Для всех типов кроме электронной почты
	Если ТипКонтактнойИнформации <> Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты Тогда
		
		Если ПустаяСтрока(Адрес) Тогда
			ВзаимодействияВызовСервера.ПолучитьПредставлениеИВсюКонтактнуюИнформациюКонтакта(
				Контакт, "", Адрес, ТипКонтактнойИнформации);
		КонецЕсли;
		Возврат;
		
	КонецЕсли;
	
	// Для адреса электронной почты проверим, введен он или нет
	Если Найти(Адрес, "@") <> 0 Тогда
		Возврат;
	КонецЕсли;
	
	Адреса = ВзаимодействияВызовСервера.ПолучитьНаименованиеИАдресаЭлектроннойПочтыКонтакта(Контакт);
	Если Адреса <> Неопределено И Адреса.Адреса.Количество() > 0 Тогда
		Элемент = Адреса.Адреса.Получить(0);
		Адрес = Элемент.Значение;
	КонецЕсли;
	
КонецПроцедуры

//Формирует строку-представление списка участников взаимодействия
//
//Параметры
//  Объект - ДокументОбъект - документ, на основании табличной части участники которого формируется строка.
//
Процедура СформироватьСписокУчастников(Объект) Экспорт
	
	Если  ТипЗнч(Объект) = Тип("ДокументОбъект.СообщениеSMS") Тогда
		ИмяТаблицы = "Адресаты";
	Иначе 
		ИмяТаблицы = "Участники";
	КонецЕсли;
	
	Объект.СписокУчастников = "";
	Для Каждого Участник Из Объект[ИмяТаблицы] Цикл
		Объект.СписокУчастников = Объект.СписокУчастников + ?(Объект.СписокУчастников = "", "", "; ") + Участник.ПредставлениеКонтакта;
	КонецЦикла;
	
КонецПроцедуры

//Формирует список выбора для быстрого отбора по типу взаимодействий при использовании только почтового клиента
//
//Параметры
//  Элемент - ЭлементФормы - элемент, для которого формируется список выбора
//
Процедура СформироватьСписокВыбораТипВзаимодействияТолькоПочта(Элемент) Экспорт
	
	Элемент.СписокВыбора.Очистить();
	Элемент.СписокВыбора.Добавить("ВсеПисьма", НСтр("ru = 'Все письма'"));
	Элемент.СписокВыбора.Добавить("ВходящиеПисьма", НСтр("ru = 'Входящие'"));
	Элемент.СписокВыбора.Добавить("ПисьмаЧерновики", НСтр("ru = 'Черновики'"));
	Элемент.СписокВыбора.Добавить("ИсходящиеПисьма", НСтр("ru = 'Исходящие'"));
	Элемент.СписокВыбора.Добавить("Отправленные", НСтр("ru = 'Отправленные'"));
	Элемент.СписокВыбора.Добавить("УдаленныеПисьма", НСтр("ru = 'Удаленные'"));
	
КонецПроцедуры

//Получает свойство метаданных по типу
//
//Параметры
//  ТипОбъекта - тип - тип метаданных для которого получается свойство
//  ИмяСвойства - ИмяСвойства - имя свойства значение которого надо получить
//
// Возвращаемое значение:
//   Произвольное   - значение свойства метаданных
//
Функция ПолучитьСвойствоМетаданныхПоТипу(ТипОбъекта,ИмяСвойства) Экспорт

	Возврат Метаданные.НайтиПоТипу(ТипОбъекта)[ИмяСвойства];

КонецФункции

//Получает адреса электронной почты для массива контактов
//
//Параметры
//  МассивКонтактов - Массив - массив ссылок на контакты
//  Группа - Строка - имя группы в письме для которой ищутся адреса, например "Получатели", "Получатели копий"
//
// Возвращаемое значение:
//   ТаблицаЗначений   - таблица содержащая контакты и адреса их электронной почты
//
Функция ПолучитьАдресаЭлектроннойПочтыДляМассиваКонтактов(МассивКонтактов,Группа = "") Экспорт
	
	Если МассивКонтактов.Количество() = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	МассивОписанияТиповКонтактов = ВзаимодействияКлиентСервер.ПолучитьМассивОписанияВозможныхКонтактов();
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ТаблицаКонтактнаяИнформация.АдресЭП КАК Адрес,
	|	ТаблицаКонтакт.Ссылка КАК Контакт
	|ПОМЕСТИТЬ КонтактыАдреса
	|ИЗ
	|	Справочник.Пользователи КАК ТаблицаКонтакт
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи.КонтактнаяИнформация КАК ТаблицаКонтактнаяИнформация
	|		ПО (ТаблицаКонтактнаяИнформация.Ссылка = ТаблицаКонтакт.Ссылка)
	|			И (ТаблицаКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
	|ГДЕ
	|	(ТаблицаКонтакт.Ссылка В (&МассивКонтактов)
	|			ИЛИ ИСТИНА В
	|				(ВЫБРАТЬ
	|					ИСТИНА
	|				ИЗ
	|					РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
	|				ГДЕ
	|					СоставыГруппПользователей.Пользователь = ТаблицаКонтакт.Ссылка
	|					И СоставыГруппПользователей.ГруппаПользователей В (&МассивКонтактов)))";
	
	
	Для каждого ЭлементМассиваОписания Из МассивОписанияТиповКонтактов Цикл
		
		Если ЭлементМассиваОписания.Имя = "Пользователи" Тогда
			Продолжить;
		Иначе
			
			ТекстЗапроса = ТекстЗапроса + "
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ТаблицаКонтактнаяИнформация.АдресЭП,
			|	ТаблицаКонтакт.Ссылка
			|ИЗ
			|	Справочник." + ЭлементМассиваОписания.Имя + " КАК ТаблицаКонтакт
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник." + ЭлементМассиваОписания.Имя + ".КонтактнаяИнформация КАК ТаблицаКонтактнаяИнформация
			|		ПО (ТаблицаКонтактнаяИнформация.Ссылка = ТаблицаКонтакт.Ссылка)
			|			И (ТаблицаКонтактнаяИнформация.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты))
			|ГДЕ
			|	ТаблицаКонтакт.Ссылка В(&МассивКонтактов) " + ?(ЭлементМассиваОписания.Иерархический," И НЕ ТаблицаКонтакт.ЭтоГруппа","");
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТекстЗапроса = ТекстЗапроса + "
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	КонтактыАдреса.Контакт,
	|	ПРЕДСТАВЛЕНИЕ(КонтактыАдреса.Контакт) КАК Представление,
	|	&Группа
	|ИЗ
	|	КонтактыАдреса КАК КонтактыАдреса
	|УПОРЯДОЧИТЬ ПО
	|	Контакт
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КонтактыАдреса.Контакт КАК Контакт,
	|	КонтактыАдреса.Адрес КАК Адрес
	|ИЗ
	|	КонтактыАдреса КАК КонтактыАдреса
	|УПОРЯДОЧИТЬ ПО
	|	Контакт
	|ИТОГИ
	|ПО
	|	Контакт
	|";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("МассивКонтактов",МассивКонтактов);
	Запрос.УстановитьПараметр("Группа",Группа);
	Результат = Запрос.ВыполнитьПакет();
	
	ТаблицаРезультат = Результат[1].Выгрузить();
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Строка"));
	
	ТаблицаРезультат.Колонки.Добавить("Адрес", Новый ОписаниеТипов(МассивТипов, , Новый КвалификаторыСтроки(100)));
	ТаблицаРезультат.Колонки.Добавить("СписокАдресов",Новый ОписаниеТипов(МассивТипов));
	ВыборкаКонтакты = Результат[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Для каждого СтрокаТаблицы Из ТаблицаРезультат Цикл
		ВыборкаКонтакты.Следующий();
		ВыборкаАдреса = ВыборкаКонтакты.Выбрать();
		Пока ВыборкаАдреса.Следующий() Цикл
			Если ПустаяСтрока(СтрокаТаблицы.Адрес) Тогда
				СтрокаТаблицы.Адрес = ВыборкаАдреса.Адрес;
			КонецЕсли;
			СтрокаТаблицы.СписокАдресов = СтрокаТаблицы.СписокАдресов + ?(ПустаяСтрока(СтрокаТаблицы.СписокАдресов), "", ";") + ВыборкаАдреса.Адрес;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ТаблицаРезультат;
	
КонецФункции

//Получает параметры работы пользователя для исходящего электронного письма
//
//Параметры
//  УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиЭлектроннойПочты - учетная запись, с которой будет отправлено письмо
//  ФорматСообщения - ПеречислениеСсылка.СпособыРедактированияЭлектронныхПисем - формат письма
//  ДляНового - Булево - признак того, что исходящее письмо создается
//
// Возвращаемое значение:
//   Структура   - структура содержащая параметры работы пользователя для исходящего эл. письма
//
Функция ПолучитьПараметрыРаботыПользователяДляИсходящегоЭлектронногоПисьма(УчетнаяЗаписьЭлектроннойПочты,ФорматСообщения,ДляНового) Экспорт
	
	СтруктураВозврата = 
		Новый Структура("Подпись, УведомитьОДоставке, УведомитьОПрочтении, ОтображатьТелоИсходногоПисьма, ВключатьТелоИсходногоПисьма",
		                Неопределено, Ложь, Ложь,Ложь, Ложь);
	
	НастройкиРаботыСПочтой = ПолучитьНастройкуРаботаСПочтой();
	ВключатьПодпись = Ложь;

	Если ДляНового Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ПодписиУчетныхЗаписейЭлектроннойПочты.ВключатьПодписьДляНовыхСообщений,
		|	ПодписиУчетныхЗаписейЭлектроннойПочты.ФорматПодписиДляНовыхСообщений,
		|	ПодписиУчетныхЗаписейЭлектроннойПочты.ПодписьДляНовыхСообщенийФорматированныйДокумент,
		|	ПодписиУчетныхЗаписейЭлектроннойПочты.ПодписьДляНовыхСообщенийПростойТекст
		|ИЗ
		|	РегистрСведений.НастройкиУчетныхЗаписейЭлектроннойПочты КАК ПодписиУчетныхЗаписейЭлектроннойПочты
		|ГДЕ
		|	ПодписиУчетныхЗаписейЭлектроннойПочты.УчетнаяЗаписьЭлектроннойПочты = &УчетнаяЗаписьЭлектроннойПочты";
		
		Запрос.УстановитьПараметр("УчетнаяЗаписьЭлектроннойПочты",УчетнаяЗаписьЭлектроннойПочты);
		
		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			
			ВключатьПодпись = Выборка.ВключатьПодписьДляНовыхСообщений;
			Если ВключатьПодпись Тогда
				ФорматПодписи                  = Выборка.ФорматПодписиДляНовыхСообщений;
				ПодписьПростойТекст            = Выборка.ПодписьДляНовыхСообщенийПростойТекст;
				ПодписьФорматированныйДокумент = Выборка.ПодписьДляНовыхСообщенийФорматированныйДокумент.Получить();
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ВключатьПодпись Тогда
			ВключатьПодпись = ?(НастройкиРаботыСПочтой.Свойство("ВключатьПодписьДляНовыхСообщений"),
			                    НастройкиРаботыСПочтой.ВключатьПодписьДляНовыхСообщений,
			                    Ложь);
			
			Если ВключатьПодпись Тогда
			
				ФорматПодписи                  = НастройкиРаботыСПочтой.ФорматПодписиДляНовыхСообщений;
				ПодписьПростойТекст            = НастройкиРаботыСПочтой.ПодписьДляНовыхСообщенийПростойТекст;
				ПодписьФорматированныйДокумент = НастройкиРаботыСПочтой.НовоеСообщениеФорматированныйДокумент;
			
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ
		|	ПодписиУчетныхЗаписейЭлектроннойПочты.ВключатьПодписьПриОтветеПересылке,
		|	ПодписиУчетныхЗаписейЭлектроннойПочты.ФорматПодписиПриОтветеПересылке,
		|	ПодписиУчетныхЗаписейЭлектроннойПочты.ПодписьПриОтветеПересылкеПростойТекст,
		|	ПодписиУчетныхЗаписейЭлектроннойПочты.ПодписьПриОтветеПересылкеФорматированныйДокумент
		|ИЗ
		|	РегистрСведений.НастройкиУчетныхЗаписейЭлектроннойПочты КАК ПодписиУчетныхЗаписейЭлектроннойПочты
		|ГДЕ
		|	ПодписиУчетныхЗаписейЭлектроннойПочты.УчетнаяЗаписьЭлектроннойПочты = &УчетнаяЗаписьЭлектроннойПочты";
		
		Запрос.УстановитьПараметр("УчетнаяЗаписьЭлектроннойПочты",УчетнаяЗаписьЭлектроннойПочты);
		
		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда
			
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			
			ВключатьПодпись = Выборка.ВключатьПодписьПриОтветеПересылке;
			Если ВключатьПодпись Тогда
				ФорматПодписи                  = Выборка.ФорматПодписиПриОтветеПересылке;
				ПодписьПростойТекст            = Выборка.ПодписьПриОтветеПересылкеПростойТекст;
				ПодписьФорматированныйДокумент = Выборка.ПодписьПриОтветеПересылкеФорматированныйДокумент.Получить();
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ВключатьПодпись Тогда
			
			ВключатьПодпись = ?(НастройкиРаботыСПочтой.Свойство("ВключатьПодписьПриОтветеПересылке"),
			                    НастройкиРаботыСПочтой.ВключатьПодписьПриОтветеПересылке,
			                    Ложь);
			
			Если ВключатьПодпись Тогда
				ФорматПодписи                  = НастройкиРаботыСПочтой.ФорматПодписиПриОтветеПересылке;
				ПодписьПростойТекст            = НастройкиРаботыСПочтой.ПодписьПриОтветеПересылкеПростойТекст;
				ПодписьФорматированныйДокумент = НастройкиРаботыСПочтой.ПриОтветеПересылкеФорматированныйДокумент;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураВозврата.УведомитьОДоставке = 
		?(НастройкиРаботыСПочтой.Свойство("ВсегдаЗапрашиватьУведомленияОДоставке"),
	                                       НастройкиРаботыСПочтой.ВсегдаЗапрашиватьУведомленияОДоставке, Ложь);
	СтруктураВозврата.УведомитьОПрочтении = 
		?(НастройкиРаботыСПочтой.Свойство("ВсегдаЗапрашиватьУведомлениеОПрочтении"),
	                                        НастройкиРаботыСПочтой.ВсегдаЗапрашиватьУведомлениеОПрочтении, Ложь);
	СтруктураВозврата.ОтображатьТелоИсходногоПисьма = 
		?(НастройкиРаботыСПочтой.Свойство("ОтображатьТелоИсходногоПисьма"),
	                                       НастройкиРаботыСПочтой.ОтображатьТелоИсходногоПисьма, Ложь);
	СтруктураВозврата.ВключатьТелоИсходногоПисьма = 
		?(НастройкиРаботыСПочтой.Свойство("ВключатьТелоИсходногоПисьма"),
	                                       НастройкиРаботыСПочтой.ВключатьТелоИсходногоПисьма, Ложь);
	
	Если ВключатьПодпись Тогда
		
		Если ФорматСообщения = Перечисления.СпособыРедактированияЭлектронныхПисем.ОбычныйТекст Тогда
			
			СтруктураВозврата.Подпись = Символы.ПС + Символы.ПС + ПодписьПростойТекст;
			
		Иначе
			
			Если ФорматПодписи = Перечисления.СпособыРедактированияЭлектронныхПисем.ОбычныйТекст Тогда
				
				ФорматированныйДокумент = Новый ФорматированныйДокумент;
				ФорматированныйДокумент.Добавить(Символы.ПС + Символы.ПС + ПодписьПростойТекст);
				СтруктураВозврата.Подпись = ФорматированныйДокумент;
				
			Иначе
				
				ФорматированныйДокумент = ПодписьФорматированныйДокумент;
				ФорматированныйДокумент.Вставить(ФорматированныйДокумент.ПолучитьЗакладкуНачала(),,
				                                 ТипЭлементаФорматированногоДокумента.ПереводСтроки);
				ФорматированныйДокумент.Вставить(ФорматированныйДокумент.ПолучитьЗакладкуНачала(),,
				                                 ТипЭлементаФорматированногоДокумента.ПереводСтроки);
				СтруктураВозврата.Подпись = ФорматированныйДокумент;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

//Получает параметры работы пользователя для входящего электронного письма
//
// Возвращаемое значение:
//   ПеречислениеСсылка.ПорядокОтветовНаЗапросыУведомленийОПрочтении   - порядок ответов на уведомления о прочтении
//
Функция ПолучитьПараметрыРаботыПользователяДляВходящегоЭлектронногоПисьма() Экспорт

	НастройкиРаботыСПочтой = ПолучитьНастройкуРаботаСПочтой();
	
	Возврат ?(НастройкиРаботыСПочтой.Свойство("ПорядокОтветовНаЗапросыУведомленийОПрочтении"),
	          НастройкиРаботыСПочтой.ПорядокОтветовНаЗапросыУведомленийОПрочтении,
	          Перечисления.ПорядокОтветовНаЗапросыУведомленийОПрочтении.ЗапрашиватьПередТемКакОтправитьУведомление);

КонецФункции

//Выполняет отправку электронного письма
//
//Параметры
//  Объект - ДокументОбъект.ЭлектронноеПисьмоИсходящее - отправляемое письмо 
//
// Возвращаемое значение:
//   Строка   - идентификатор почтового сообщения
//
Процедура ДобавитьВПараметрАдресатов(Источник, ПараметрыПисьма, ИмяПараметра, ИмяТаблицы) Экспорт
	
	Если ТипЗнч(Источник) = Тип("ДанныеФормыСтруктура") ИЛИ ТипЗнч(Источник) = Тип("ДокументОбъект.ЭлектронноеПисьмоИсходящее")
		ИЛИ ТипЗнч(Источник) = Тип("СтрокаТаблицыЗначений") Тогда
		Таблица = Источник[ИмяТаблицы];
	ИначеЕсли ТипЗнч(Источник) = Тип("ВыборкаИзРезультатаЗапроса") Тогда
		Таблица = Источник[ИмяТаблицы].Выгрузить();
	Иначе
		Возврат;
	КонецЕсли;
	
	Если Таблица.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Адресаты = Новый Массив;
	Для Каждого СтрокаТаблицы Из Таблица Цикл
		Адресаты.Добавить(Новый Структура("Адрес,Представление", СтрокаТаблицы.Адрес, СтрокаТаблицы.Представление));
	КонецЦикла;
	
	ПараметрыПисьма.Вставить(ИмяПараметра, Адресаты);
	
КонецПроцедуры

//Выполняет отправку электронного письма
//
//Параметры
//  Объект - ДокументОбъект.ЭлектронноеПисьмоИсходящее - отправляемое письмо
//
// Возвращаемое значение:
//   Строка   - идентификатор почтового сообщения
//
Функция ВыполнитьОтправкуПисьма(Объект, Соединение = Неопределено) Экспорт
	
	РасширениеДляФайловПодписи = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ЭЦП", "РасширениеДляФайловПодписи");
	Если РасширениеДляФайловПодписи = Неопределено ИЛИ ПустаяСтрока(РасширениеДляФайловПодписи) Тогда
		РасширениеДляФайловПодписи = "p7s";
	КонецЕсли;
	
	ПараметрыПисьма = Новый Структура;

	ДобавитьВПараметрАдресатов(Объект,ПараметрыПисьма,"Кому", "ПолучателиПисьма");
	ДобавитьВПараметрАдресатов(Объект,ПараметрыПисьма,"Копии", "ПолучателиКопий");
	ДобавитьВПараметрАдресатов(Объект,ПараметрыПисьма,"СлепыеКопии", "ПолучателиСкрытыхКопий");
	ПараметрыПисьма.Вставить("Тема", Объект.Тема);
	ПараметрыПисьма.Вставить("Тело", ?(Объект.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст,
	                                   Объект.Текст,Объект.ТекстHTML));
	ПараметрыПисьма.Вставить("Кодировка", Объект.Кодировка);
	ПараметрыПисьма.Вставить("Важность",  УправлениеЭлектроннойПочтой.ПолучитьВажность(Объект.Важность));
	ПараметрыПисьма.Вставить("ТипТекста", Объект.ТипТекста);
	
	Если Не ПустаяСтрока(Объект.ИдентификаторыОснований) Тогда
		ПараметрыПисьма.Вставить("ИдентификаторыОснований", Объект.ИдентификаторыОснований);
	КонецЕсли;
	
	соотвВложения = Новый Соответствие;

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Файлы.Наименование КАК ПолноеНаименование,
	|	Файлы.Расширение КАК Расширение,
	|	Файлы.Ссылка КАК Ссылка,
	|	Файлы.ЭлектронныеЦифровыеПодписи.(
	|		НомерСтроки,
	|		Подпись
	|	),
	|	Файлы.ИДФайлаЭлектронногоПисьма
	|ИЗ
	|	Справочник.ЭлектронноеПисьмоИсходящееПрисоединенныеФайлы КАК Файлы
	|ГДЕ
	|	Файлы.ВладелецФайла = &ВладелецФайла";
	Запрос.УстановитьПараметр("ВладелецФайла", Объект.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать(); 

	Пока Выборка.Следующий() Цикл
		ИмяФайла = Выборка.ПолноеНаименование + ?(Выборка.Расширение = "", "", "." + Выборка.Расширение);
		Если ПустаяСтрока(Выборка.ИДФайлаЭлектронногоПисьма) Тогда
			соотвВложения.Вставить(ИмяФайла, ПрисоединенныеФайлы.ПолучитьДвоичныеДанныеФайла(Выборка.Ссылка));
		Иначе
			СтруктураДанныеВложения = Новый Структура;
			СтруктураДанныеВложения.Вставить("ДвоичныеДанные", ПрисоединенныеФайлы.ПолучитьДвоичныеДанныеФайла(Выборка.Ссылка));
			СтруктураДанныеВложения.Вставить("Идентификатор", Выборка.ИДФайлаЭлектронногоПисьма);
			соотвВложения.Вставить(ИмяФайла, СтруктураДанныеВложения);
		КонецЕсли;
		Для каждого ЭЦП Из Выборка.ЭлектронныеЦифровыеПодписи.Выгрузить() Цикл
		
			соотвВложения.Вставить(Выборка.ПолноеНаименование + "-DS("+ ЭЦП.НомерСтроки + ")." +
				РасширениеДляФайловПодписи,ЭЦП.Подпись.Получить());
		
		КонецЦикла;
	КонецЦикла;
	ПараметрыПисьма.Вставить("Вложения", соотвВложения);
	ПараметрыПисьма.Вставить("ОбрабатыватьТексты", Ложь);
	
	Если Объект.УведомитьОДоставке Тогда
		ПараметрыПисьма.Вставить("УведомитьОДоставке", Истина);
	КонецЕсли;
	
	Если Объект.УведомитьОПрочтении Тогда
		ПараметрыПисьма.Вставить("УведомитьОПрочтении", Истина);
	КонецЕсли;
	
	Возврат ЭлектроннаяПочта.ОтправитьПочтовоеСообщение(Объект.УчетнаяЗапись, ПараметрыПисьма,Соединение);
	
КонецФункции

//Устанавливает заголовок формы электронного письма 
//
//Параметры
//  Форма - УправляемаяФорма - форма для которой выполняется процедура
//
Процедура УстановитьЗаголовокФормыЭлектронногоПисьма(Форма) Экспорт

	ОбъектПисьмо = Форма.Объект;
	Если НЕ ОбъектПисьмо.Ссылка.Пустая() Тогда
		Форма.Автозаголовок = Ложь;
		ЗаголовокФормы = ?(ПустаяСтрока(ОбъектПисьмо.Тема), НСтр("ru = 'Письмо без темы'"), ОбъектПисьмо.Тема);
		ЗаголовокФормы = ЗаголовокФормы + 
			?(ТипЗнч(ОбъектПисьмо.Ссылка) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее"), " (Входящее)", " (Исходящее)");
		Форма.Заголовок = ЗаголовокФормы;
	Иначе
		Если ТипЗнч(ОбъектПисьмо.Ссылка) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее") Тогда
			Форма.Автозаголовок = Ложь;
			Форма.Заголовок = НСтр("ru = 'Исходящее письмо (создание)'");
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

//Получает данные выбора для документов взаимодействия
Процедура ОбработкаПолученияДанныхВыбора(ДанныеВыбора, Параметры, СтандартнаяОбработка, ИмяДокумента) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ДокументВзаимодействий.Ссылка КАК Ссылка
	|ИЗ
	|	Документ." + ИмяДокумента + " КАК ДокументВзаимодействий
	|ГДЕ
	|	ДокументВзаимодействий.Тема ПОДОБНО &СтрокаПоиска
	|	ИЛИ ДокументВзаимодействий.Номер ПОДОБНО &СтрокаПоиска";
	
	Запрос.УстановитьПараметр("СтрокаПоиска", Параметры.СтрокаПоиска + "%");
	
	ДанныеВыбора = Новый СписокЗначений;
	ДанныеВыбора.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики обновления

// Добавляет процедуры-обработчики обновления, необходимые данной подсистеме.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                  общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.2.4";
	Обработчик.Процедура = "Взаимодействия.ОбновитьХранениеПредмета_1_2_1_4";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.2.4";
	Обработчик.Процедура = "Взаимодействия.ОбновитьХранениеОтветственныйУчетнаяЗапись_1_2_1_4";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.2.4";
	Обработчик.Процедура = "Взаимодействия.СоздатьПапкиЭлектронныхПисем_1_2_1_4";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.2.4";
	Обработчик.Процедура = "Взаимодействия.ПереместитьПисьмаВПредопределенныеПапки_1_2_1_4";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.2.4";
	Обработчик.Процедура = "Взаимодействия.ПреобразоватьОписаниеВТему_1_2_1_4";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.1.2.4";
	Обработчик.Процедура = "Взаимодействия.ЗаполнитьРазмерДляИсходящихЭлектронныхПисем_1_2_1_4";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.1.2";
	Обработчик.Процедура = "Взаимодействия.ВыполнитьПерекодировкуПапокЭлектроннойПочты_2_0_1_2";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.3.22";
	Обработчик.Процедура = "Взаимодействия. ОбновитьХранениеВключатьВПредставлениеИмяПользователя_2_1_3_22";
	
КонецПроцедуры

//Процедура обновления на ИБ для версии БСП 1.2.1.4
//Перемещает письма в предопределенные папки
//
Процедура ПереместитьПисьмаВПредопределенныеПапки_1_2_1_4() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЭлектронноеПисьмоВходящее.Ссылка КАК Письмо,
	|	ПапкиЭлектронныхПисем.Ссылка КАК Папка
	|ИЗ
	|	Документ.ЭлектронноеПисьмоВходящее КАК ЭлектронноеПисьмоВходящее
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПапкиЭлектронныхПисем КАК ПапкиЭлектронныхПисем
	|		ПО ЭлектронноеПисьмоВходящее.УчетнаяЗапись = ПапкиЭлектронныхПисем.Владелец
	|ГДЕ
	|	ПапкиЭлектронныхПисем.Наименование = &Входящие
	|	И ПапкиЭлектронныхПисем.ПредопределеннаяПапка
	|	И (НЕ ЭлектронноеПисьмоВходящее.ПометкаУдаления)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЭлектронноеПисьмоИсходящее.Ссылка,
	|	ПапкиЭлектронныхПисем.Ссылка
	|ИЗ
	|	Документ.ЭлектронноеПисьмоИсходящее КАК ЭлектронноеПисьмоИсходящее
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПапкиЭлектронныхПисем КАК ПапкиЭлектронныхПисем
	|		ПО ЭлектронноеПисьмоИсходящее.УчетнаяЗапись = ПапкиЭлектронныхПисем.Владелец
	|ГДЕ
	|	ЭлектронноеПисьмоИсходящее.СтатусПисьма = ЗНАЧЕНИЕ(Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Отправлено)
	|	И ПапкиЭлектронныхПисем.ПредопределеннаяПапка
	|	И ПапкиЭлектронныхПисем.Наименование = &Отправленные
	|	И (НЕ ЭлектронноеПисьмоИсходящее.ПометкаУдаления)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЭлектронноеПисьмоИсходящее.Ссылка,
	|	ПапкиЭлектронныхПисем.Ссылка
	|ИЗ
	|	Документ.ЭлектронноеПисьмоИсходящее КАК ЭлектронноеПисьмоИсходящее
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПапкиЭлектронныхПисем КАК ПапкиЭлектронныхПисем
	|		ПО ЭлектронноеПисьмоИсходящее.УчетнаяЗапись = ПапкиЭлектронныхПисем.Владелец
	|ГДЕ
	|	ЭлектронноеПисьмоИсходящее.СтатусПисьма = ЗНАЧЕНИЕ(Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Черновик)
	|	И ПапкиЭлектронныхПисем.ПредопределеннаяПапка
	|	И ПапкиЭлектронныхПисем.Наименование = &Черновики
	|	И (НЕ ЭлектронноеПисьмоИсходящее.ПометкаУдаления)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЭлектронноеПисьмоИсходящее.Ссылка,
	|	ПапкиЭлектронныхПисем.Ссылка
	|ИЗ
	|	Документ.ЭлектронноеПисьмоИсходящее КАК ЭлектронноеПисьмоИсходящее
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПапкиЭлектронныхПисем КАК ПапкиЭлектронныхПисем
	|		ПО ЭлектронноеПисьмоИсходящее.УчетнаяЗапись = ПапкиЭлектронныхПисем.Владелец
	|ГДЕ
	|	ЭлектронноеПисьмоИсходящее.СтатусПисьма = ЗНАЧЕНИЕ(Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Исходящее)
	|	И ПапкиЭлектронныхПисем.ПредопределеннаяПапка
	|	И ПапкиЭлектронныхПисем.Наименование = &Исходящие
	|	И (НЕ ЭлектронноеПисьмоИсходящее.ПометкаУдаления)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЭлектронноеПисьмоВходящее.Ссылка,
	|	ПапкиЭлектронныхПисем.Ссылка
	|ИЗ
	|	Документ.ЭлектронноеПисьмоВходящее КАК ЭлектронноеПисьмоВходящее
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПапкиЭлектронныхПисем КАК ПапкиЭлектронныхПисем
	|		ПО ЭлектронноеПисьмоВходящее.УчетнаяЗапись = ПапкиЭлектронныхПисем.Владелец
	|ГДЕ
	|	ЭлектронноеПисьмоВходящее.ПометкаУдаления
	|	И ПапкиЭлектронныхПисем.ПредопределеннаяПапка
	|	И ПапкиЭлектронныхПисем.Наименование = &Удаленные
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЭлектронноеПисьмоИсходящее.Ссылка,
	|	ПапкиЭлектронныхПисем.Ссылка
	|ИЗ
	|	Документ.ЭлектронноеПисьмоИсходящее КАК ЭлектронноеПисьмоИсходящее
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПапкиЭлектронныхПисем КАК ПапкиЭлектронныхПисем
	|		ПО ЭлектронноеПисьмоИсходящее.УчетнаяЗапись = ПапкиЭлектронныхПисем.Владелец
	|ГДЕ
	|	ЭлектронноеПисьмоИсходящее.ПометкаУдаления
	|	И ПапкиЭлектронныхПисем.ПредопределеннаяПапка
	|	И ПапкиЭлектронныхПисем.Наименование = &Удаленные";
	
	УстановитьПараметрыЗапросаИменаПредопределенныеПапки(Запрос);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ВзаимодействияВызовСервера.УстановитьПапкуЭлектронногоПисьма(Выборка.Письмо, Выборка.Папка);
		
	КонецЦикла;
	
КонецПроцедуры

//Процедура обновления на ИБ для версии БСП 1.2.1.4
//Переносит предмет взаимодействий из реквизита документа в регистр сведений ПредметыПапкиВзаимодействий
//
Процедура СоздатьПапкиЭлектронныхПисем_1_2_1_4() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	УчетныеЗаписиЭлектроннойПочты.Ссылка
	|ИЗ
	|	Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		УправлениеЭлектроннойПочтой.СоздатьПредопределенныеПапкиЭлектронныхПисемДляУчетнойЗаписи(Выборка.Ссылка);
	
	КонецЦикла;

КонецПроцедуры

//Процедура обновления на ИБ для версии БСП 1.2.1.4
//Переносит данные из реквизита ОтветственныйЗаОбработкуПисем справочника УчетныеЗаписиЭлектроннойПочты в 
//реквизиты ОтветственныйЗаОбработкуПисем и ОтветственныйЗаВедениеПапок регистра сведений НастройкиУчетныхЗаписейЭлектроннойПочты
//
Процедура ОбновитьХранениеОтветственныйУчетнаяЗапись_1_2_1_4() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	УчетныеЗаписиЭлектроннойПочты.Ссылка,
	|	УчетныеЗаписиЭлектроннойПочты.УдалитьОтветственныйЗаОбработкуПисем
	|ИЗ
	|	Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
	|ГДЕ
	|	УчетныеЗаписиЭлектроннойПочты.УдалитьОтветственныйЗаОбработкуПисем <> ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка)
	|";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		МенеджерЗаписи = РегистрыСведений.НастройкиУчетныхЗаписейЭлектроннойПочты.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.УчетнаяЗаписьЭлектроннойПочты = Выборка.Ссылка;
		МенеджерЗаписи.ПерсональнаяУчетнаяЗапись         = Ложь;
		МенеджерЗаписи.ВключатьПодписьДляНовыхСообщений  = Ложь;
		МенеджерЗаписи.ВключатьПодписьПриОтветеПересылке = Ложь;
		МенеджерЗаписи.ОтветственныйЗаОбработкуПисем     = Выборка.УдалитьОтветственныйЗаОбработкуПисем;
		МенеджерЗаписи.ОтветственныйЗаВедениеПапок       = Выборка.УдалитьОтветственныйЗаОбработкуПисем;
		МенеджерЗаписи.Записать();
		
	КонецЦикла;
	
	
КонецПроцедуры

//Процедура обновления на ИБ для версии БСП 2.1.3.22
//Переносит данные из реквизита ВключатьВПредставлениеИмяПользователя справочника УчетныеЗаписиЭлектроннойПочты в 
//реквизит ВключатьВПредставлениеИмяПользователя регистра сведений НастройкиУчетныхЗаписейЭлектроннойПочты
//
Процедура ОбновитьХранениеВключатьВПредставлениеИмяПользователя_2_1_3_22() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	УчетныеЗаписиЭлектроннойПочты.Ссылка
	|ИЗ
	|	РегистрСведений.НастройкиУчетныхЗаписейЭлектроннойПочты КАК НастройкиУчетныхЗаписейЭлектроннойПочты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
	|		ПО НастройкиУчетныхЗаписейЭлектроннойПочты.УчетнаяЗаписьЭлектроннойПочты = УчетныеЗаписиЭлектроннойПочты.Ссылка
	|ГДЕ
	|	УчетныеЗаписиЭлектроннойПочты.УдалитьВПредставлениеВключатьИмяПользователя
	|	И НЕ НастройкиУчетныхЗаписейЭлектроннойПочты.ВПредставлениеВключатьИмяПользователя";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НаборЗаписей = РегистрыСведений.НастройкиУчетныхЗаписейЭлектроннойПочты.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.УчетнаяЗаписьЭлектроннойПочты.Установить(Выборка.Ссылка);
		НаборЗаписей.Прочитать();
		Для Каждого Запись Из НаборЗаписей Цикл
			 Запись.ВПредставлениеВключатьИмяПользователя = Истина;
		КонецЦикла;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
		
	КонецЦикла;
	
КонецПроцедуры

//Процедура обновления на ИБ для версии БСП 1.2.1.4
//Переносит предмет взаимодействий из реквизита документа в регистр сведений ПредметыПапкиВзаимодействий
//
Процедура ОбновитьХранениеПредмета_1_2_1_4() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	Встреча.Ссылка,
	|	Встреча.Предмет
	|ИЗ
	|	Документ.Встреча КАК Встреча
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗапланированноеВзаимодействие.Ссылка,
	|	ЗапланированноеВзаимодействие.Предмет
	|ИЗ
	|	Документ.ЗапланированноеВзаимодействие КАК ЗапланированноеВзаимодействие
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТелефонныйЗвонок.Ссылка,
	|	ТелефонныйЗвонок.Предмет
	|ИЗ
	|	Документ.ТелефонныйЗвонок КАК ТелефонныйЗвонок
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЭлектронноеПисьмоВходящее.Ссылка,
	|	ЭлектронноеПисьмоВходящее.Предмет
	|ИЗ
	|	Документ.ЭлектронноеПисьмоВходящее КАК ЭлектронноеПисьмоВходящее
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЭлектронноеПисьмоИсходящее.Ссылка,
	|	ЭлектронноеПисьмоИсходящее.Предмет
	|ИЗ
	|	Документ.ЭлектронноеПисьмоИсходящее КАК ЭлектронноеПисьмоИсходящее";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		УстановитьПредмет(Выборка.Ссылка, ?(ЗначениеЗаполнено(Выборка.Предмет), Выборка.Предмет, Выборка.Ссылка));
		
	КонецЦикла;
	
КонецПроцедуры

//Процедура обновления на ИБ для версии БСП 1.2.1.4
//Преобразовывает начало описания документов "Встреча", "Телефонный звонок" и "Запланированное взаимодействие" в реквизит Тема.
//
Процедура ПреобразоватьОписаниеВТему_1_2_1_4() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Встреча.Ссылка,
	|	ПОДСТРОКА(Встреча.Описание, 1, 1024) КАК Описание
	|ИЗ
	|	Документ.Встреча КАК Встреча
	|ГДЕ
	|	Встреча.Тема <> """"""""
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗапланированноеВзаимодействие.Ссылка,
	|	ПОДСТРОКА(ЗапланированноеВзаимодействие.Описание, 1, 1024)
	|ИЗ
	|	Документ.ЗапланированноеВзаимодействие КАК ЗапланированноеВзаимодействие
	|ГДЕ
	|	ЗапланированноеВзаимодействие.Тема <> """"""""
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТелефонныйЗвонок.Ссылка,
	|	ПОДСТРОКА(ТелефонныйЗвонок.Описание, 1, 1024)
	|ИЗ
	|	Документ.ТелефонныйЗвонок КАК ТелефонныйЗвонок
	|ГДЕ
	|	ТелефонныйЗвонок.Тема <> """"""""";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Не ПустаяСтрока(Выборка.Описание) Тогда
			ВзаимодействиеОбъект       = Выборка.Ссылка.ПолучитьОбъект();
			ВзаимодействиеОбъект.Тема  = Выборка.Описание;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(ВзаимодействиеОбъект);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

//Процедура обновления на ИБ для версии БСП 1.2.1.4
//Определяет оценочный размер исходящих писем.
//
Процедура ЗаполнитьРазмерДляИсходящихЭлектронныхПисем_1_2_1_4() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЭлектронноеПисьмоИсходящее.Ссылка
	|ИЗ
	|	Документ.ЭлектронноеПисьмоИсходящее КАК ЭлектронноеПисьмоИсходящее";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
	
		ПисьмоОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ПисьмоОбъект.Размер = ОценитьРазмерИсходящегоЭлектронногоПисьма(Выборка.Ссылка);
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ПисьмоОбъект);
	
	КонецЦикла;

КонецПроцедуры

// Заполняет коды у предопределенных папок и выполняет перекодировку справочника
// если это необходимо
//
Процедура ВыполнитьПерекодировкуПапокЭлектроннойПочты_2_0_1_2() Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПапкиЭлектронныхПисем.Владелец КАК Владелец
	|ПОМЕСТИТЬ ПапкиСПроблемами
	|ИЗ
	|	Справочник.ПапкиЭлектронныхПисем КАК ПапкиЭлектронныхПисем
	|ГДЕ
	|	ПапкиЭлектронныхПисем.Код = """"
	|	И ПапкиЭлектронныхПисем.ПредопределеннаяПапка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПапкиЭлектронныхПисем.Ссылка
	|ИЗ
	|	Справочник.ПапкиЭлектронныхПисем КАК ПапкиЭлектронныхПисем
	|ГДЕ
	|	ПапкиЭлектронныхПисем.Владелец В
	|			(ВЫБРАТЬ
	|				ПапкиСПроблемами.Владелец
	|			ИЗ
	|				ПапкиСПроблемами КАК ПапкиСПроблемами)
	|	И ПапкиЭлектронныхПисем.ПредопределеннаяПапка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПапкиЭлектронныхПисем.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ПапкиЭлектронныхПисем КАК ПапкиЭлектронныхПисем
	|ГДЕ
	|	ПапкиЭлектронныхПисем.Владелец В
	|			(ВЫБРАТЬ
	|				ПапкиСПроблемами.Владелец
	|			ИЗ
	|				ПапкиСПроблемами КАК ПапкиСПроблемами)
	|	И (НЕ ПапкиЭлектронныхПисем.ПредопределеннаяПапка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПапкиЭлектронныхПисем.Код";
	
	Результат = Запрос.ВыполнитьПакет();
	ВыборкаПредопределенные = Результат[1].Выбрать();
	
	Пока ВыборкаПредопределенные.Следующий() Цикл
	
		ПапкаОбъект = ВыборкаПредопределенные.Ссылка.ПолучитьОбъект();
		ПапкаОбъект.УстановитьНовыйКод();
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ПапкаОбъект);
	
	КонецЦикла;
	
	ВыборкаПользовательские = Результат[2].Выбрать();
	
	Пока ВыборкаПользовательские.Следующий() Цикл
	
		ПапкаОбъект = ВыборкаПользовательские.Ссылка.ПолучитьОбъект();
		ПапкаОбъект.УстановитьНовыйКод();
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(ПапкаОбъект);
	КонецЦикла;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Общие обработчики событий документов взаимодействий 

// Заполняет список выбора для поля "Рассмотреть после"
//
//Параметры
//  СписокВыбора - СписокЗначений - список, который будет заполнен значения выбора
//
Процедура ЗаполнитьСписокВыбораДляРассмотретьПосле(СписокВыбора) Экспорт
	
	СписокВыбора.Очистить();
	СписокВыбора.Добавить(15*60,    НСтр("ru='Через 15 мин.'"));
	СписокВыбора.Добавить(30*60,    НСтр("ru='Через 30 мин.'"));
	СписокВыбора.Добавить(60*60,    НСтр("ru='Через 1 час'"));
	СписокВыбора.Добавить(3*60*60,  НСтр("ru='Через 3 часа'"));
	СписокВыбора.Добавить(24*60*60, НСтр("ru='Завтра'"));
	
КонецПроцедуры

//Обработчик события при записи, возникающих в формах документов взаимодействий.
//
//Параметры
//  ТекущийОбъект - ДокументОбъект - документ, в котором возникло событие
//
Процедура ПриЗаписиВзаимодействияИзФормы(ТекущийОбъект,НовыйПредмет) Экспорт
	
	Ссылка = ТекущийОбъект.Ссылка;
	
	СтарыйПредмет = ПолучитьЗначениеПредмета(Ссылка);
	
	Если СтарыйПредмет = НовыйПредмет И ЗначениеЗаполнено(НовыйПредмет) Тогда
		// Предмет не изменился, ничего изменять не надо
		Возврат;
	КонецЕсли;
	
	//Если в качестве предмета устанавливается само взаимодействие то делать ничего не нужно.
	Если НовыйПредмет = Ссылка Тогда
		УстановитьПредмет(Ссылка, НовыйПредмет);
		Возврат;
	КонецЕсли;
	
	// Если в качестве нового предмета установлено взаимодействие, то надо проверить предмет у нового предмета
	Если ЗначениеЗаполнено(НовыйПредмет) Тогда
		
		Если ВзаимодействияКлиентСервер.ЯвляетсяВзаимодействием(НовыйПредмет) Тогда
			
			ПредметПредмета = ПолучитьЗначениеПредмета(НовыйПредмет);
			Если Не ЗначениеЗаполнено(ПредметПредмета) Тогда
				// У предмета установим в качестве предмета ссылку на самого себя
				УстановитьПредмет(НовыйПредмет, НовыйПредмет);
				УстановитьПредмет(Ссылка, НовыйПредмет);
			Иначе
				УстановитьПредмет(Ссылка, ПредметПредмета);
				НовыйПредмет = ПредметПредмета;
			КонецЕсли;
			
		Иначе
			
			УстановитьПредмет(Ссылка, НовыйПредмет);
			
		КонецЕсли;
		
	Иначе
		
		УстановитьПредмет(Ссылка, Ссылка);
		НовыйПредмет = Ссылка;
		
	КонецЕсли;
	
	// Если предыдущим предметом было взаимодействие, то возможно нужно поменять предмет у всей цепочки
	Если ЗначениеЗаполнено(СтарыйПредмет) И ВзаимодействияКлиентСервер.ЯвляетсяВзаимодействием(СтарыйПредмет) Тогда
		
		Если НЕ (Ссылка <> СтарыйПредмет И (Не ЗначениеЗаполнено(НовыйПредмет) ИЛИ ВзаимодействияКлиентСервер.ЯвляетсяВзаимодействием(НовыйПредмет))) Тогда
			ВзаимодействияВызовСервера.ЗаменитьПредметВЦепочкеВзаимодействий(СтарыйПредмет, НовыйПредмет, Ссылка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

//Обработчик события перед записью, возникающих в формах документов взаимодействий.
//
//Параметры
//  Форма         - УправляемаяФорма - форма в которой произошло событие
//  ТекущийОбъект - ДокументОбъект - документ, в котором возникло событие
//
Процедура ПередЗаписьюВзаимодействияИзФормы(Форма,ТекущийОбъект) Экспорт

	Если ТекущийОбъект.Ссылка.Пустая() Тогда
		ТекущийОбъект.ВзаимодействиеОснование = Форма.ВзаимодействиеОснование;
	КонецЕсли;

КонецПроцедуры

//Заполняет список доступных для создания взаимодействий
//
//Параметры
//  ДокументыДоступныеДляСоздания - СписокЗначений - заполняемый список значений
//
Процедура ЗаполнитьСписокДоступныхДляСозданияДокументов(ДокументыДоступныеДляСоздания) Экспорт
	
	Для каждого РегистрируемыйДокумент Из Метаданные.ЖурналыДокументов.Взаимодействия.РегистрируемыеДокументы Цикл
		
		Если Не РегистрируемыйДокумент.Имя = "ЭлектронноеПисьмоВходящее" Тогда
			
			ДокументыДоступныеДляСоздания.Добавить(РегистрируемыйДокумент.Имя,РегистрируемыйДокумент.Синоним);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

//Выполняется при загрузке сохраненных пользовательских настроек быстрого отбора ТипВзаимодействия 
//в формах списков документов взаимодействий
//
//Параметры
//  Форма - УправляемаяФорма - форма для которой выполняется процедура
//  Настройки - Соответствие - загружаемые настройки
//
Процедура ПриЗагрузкеТипаВзаимодействийИзНастроек(Форма,Настройки) Экспорт

	ТипВзаимодействия = Настройки.Получить("ТипВзаимодействия");
	Если ТипВзаимодействия <> Неопределено Тогда
		Настройки.Удалить("ТипВзаимодействия");
	КонецЕсли;
	
	Если Форма.ТолькоПочта Тогда
		Если ТипВзаимодействия = Неопределено ИЛИ 
			Форма.Элементы.ТипВзаимодействия.СписокВыбора.НайтиПоЗначению(ТипВзаимодействия) = Неопределено Тогда
			ТипВзаимодействия = "ВсеПисьма";
			Настройки.Удалить("ТипВзаимодействия");
		КонецЕсли;
	Иначе
		Если ТипВзаимодействия = Неопределено Тогда
			ТипВзаимодействия = "Все";
			Настройки.Удалить("ТипВзаимодействия");
		КонецЕсли;
	КонецЕсли;
	
	Форма.ТипВзаимодействия = ТипВзаимодействия;

КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////
//   Работа с элементами и реквизитами форм списков и документов

//Динамически формирует общие формы "Адресная книга" и "Подбор контактов" согласно возможным типам контактов
//
Процедура ДобавитьСтраницыФормыПодбораКонтактов(Форма) Экспорт
	
	ОписаниеТипаДинамическийСписок = Новый ОписаниеТипов("ДинамическийСписок");
	
	ДобавляемыеРеквизиты = Новый Массив;
	МассивОписанийВозможныхКонтактов = ВзаимодействияКлиентСервер.ПолучитьМассивОписанияВозможныхКонтактов();
	
	//Создадим динамические списки
	Для каждого ЭлементМассиваОписания Из МассивОписанийВозможныхКонтактов Цикл
		Если ЭлементМассиваОписания.Имя = "Пользователи" Тогда
			Продолжить;
		КонецЕсли;
		
		ДобавляемыеРеквизиты.Добавить(
			Новый РеквизитФормы("Список_" + ЭлементМассиваОписания.Имя ,ОписаниеТипаДинамическийСписок));
		
	КонецЦикла;
	
	Форма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	//Установим в динамические списки основные таблицы и обязательное использование реквизита ЭтоГруппа
	Для каждого ЭлементМассиваОписания Из МассивОписанийВозможныхКонтактов Цикл
		Если ЭлементМассиваОписания.Имя = "Пользователи" Тогда
			Продолжить;
		КонецЕсли;
		
		Форма["Список_" + ЭлементМассиваОписания.Имя].ОсновнаяТаблица = "Справочник." + ЭлементМассиваОписания.Имя;
		
	КонецЦикла;
	
	Для каждого ЭлементМассиваОписания Из МассивОписанийВозможныхКонтактов Цикл
		Если ЭлементМассиваОписания.Имя = "Пользователи" Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЭлементМассиваОписания.ЕстьВладелец  Тогда
			
			ЭлементСтраница = Форма.Элементы.Добавить(
				"Страница_" + ЭлементМассиваОписания.Имя,Тип("ГруппаФормы"),Форма.Элементы.СтраницыСписки);
			ЭлементСтраница.Вид                  = ВидГруппыФормы.Страница;
			ЭлементСтраница.ОтображатьЗаголовок  = Истина;
			ЭлементСтраница.Заголовок            = ЭлементМассиваОписания.Представление;
			ЭлементСтраница.Группировка          = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;
			
		КонецЕсли;
		
		ЭлементТаблица = Форма.Элементы.Добавить("Таблица_" + ЭлементМассиваОписания.Имя,
			Тип("ТаблицаФормы"),
			Форма.Элементы[?(ЭлементМассиваОписания.ЕстьВладелец,
			"Страница_" + ЭлементМассиваОписания.ИмяВладельца,
			"Страница_" + ЭлементМассиваОписания.Имя)]);
		ЭлементТаблица.ПутьКДанным = "Список_" + ЭлементМассиваОписания.Имя;
		ЭлементТаблица.УстановитьДействие("Выбор","СписокСправочникаВыбор");
		Если Форма.ИмяФормы = "ОбщаяФорма.ВыборКонтакта" Тогда
			ЭлементТаблица.РежимВыделения = РежимВыделенияТаблицы.Одиночный;
			ЭлементТаблица.УстановитьДействие("ПриАктивизацииСтроки","Подключаемый_СписокКонтактыПриАктивизацииСтроки");
		КонецЕсли;
		Если ЭлементМассиваОписания.ЕстьВладелец Тогда
			Форма.Элементы["Таблица_" + ЭлементМассиваОписания.ИмяВладельца].УстановитьДействие(
				"ПриАктивизацииСтроки","Подключаемый_СписокВладелецПриАктивизацииСтроки");
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
				Форма["Список_" + ЭлементМассиваОписания.Имя], "Владелец", Неопределено, , , Истина);
		КонецЕсли;
		
		КолонкаСсылка = Форма.Элементы.Добавить(
			"Колонка_" + ЭлементМассиваОписания.Имя + "_Ссылка",Тип("ПолеФормы"),ЭлементТаблица);
		КолонкаСсылка.Вид = ВидПоляФормы.ПолеВвода;
		КолонкаСсылка.ПутьКДанным = "Список_" + ЭлементМассиваОписания.Имя + ".Ссылка";
		КолонкаСсылка.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		
	КонецЦикла;
	
КонецПроцедуры

//Устанавливает отбор динамического списка документов взаимодействий, исключая документы не относящиеся к почте.
//
// Параметры
//  Список  - ДинамическийСписок - динамический список, для которого устанавливается отбор
//
Процедура СоздатьОтборПоТипуСогласноФО(Список) Экспорт
	
	ГруппаОтбора = ОбщегоНазначенияКлиентСервер.СоздатьГруппуЭлементовОтбора(
		ВзаимодействияКлиентСервер.ОтборДинамическогоСписка(Список).Элементы, "Отбор по типу согласно ФО",
		ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ);
	
	ИмяПоля                    = "Тип";
	ВидСравненияЭлементаОтбора = ВидСравненияКомпоновкиДанных.НеВСписке;
	СписокТипов = Новый СписокЗначений;
	СписокТипов.Добавить(Тип("ДокументСсылка.Встреча"));
	СписокТипов.Добавить(Тип("ДокументСсылка.ЗапланированноеВзаимодействие"));
	СписокТипов.Добавить(Тип("ДокументСсылка.ТелефонныйЗвонок"));
	СписокТипов.Добавить(Тип("ДокументСсылка.СообщениеSMS"));
	ПравоеЗначение             = СписокТипов;
	ОбщегоНазначенияКлиентСервер.ДобавитьЭлементКомпоновки(
		ГруппаОтбора, ИмяПоля, ВидСравненияЭлементаОтбора, ПравоеЗначение);

КонецПроцедуры

// Инициализирует переданную форму списка взаимодействий Форма согласно значениям
// функциональных опций.
//
Процедура ИнициализироватьФормуСпискаВзаимодействий(Форма) Экспорт

	Форма.ТолькоПочта = НЕ ПолучитьФункциональнуюОпцию("ИспользоватьПрочиеВзаимодействия");
	Форма.Элементы.СписокСоздатьЭлектронноеПисьмоОтдельнаяКнопка.Видимость = Форма.ТолькоПочта;
	Форма.Элементы.ГруппаСоздать.Видимость = НЕ Форма.ТолькоПочта;
	Если Форма.ТолькоПочта Тогда
		Форма.Заголовок = НСтр("ru = 'Электронная почта'");
		Форма.Элементы.ТипВзаимодействия.ВысотаСпискаВыбора = 6;
		СоздатьОтборПоТипуСогласноФО(Форма.Список);
		СформироватьСписокВыбораТипВзаимодействияТолькоПочта(Форма.Элементы.ТипВзаимодействия);
		Форма.Команды.Предмет.Заголовок = НСтр("ru = 'Установить предмет переписки'");
		Форма.Команды.Предмет.Подсказка = НСтр("ru = 'Установить предмет переписки'");
		Форма.Элементы.Скопировать.Видимость = Ложь;
		Если Форма.Элементы.Найти("ДеревоВзаимодействийСкопировать") <> Неопределено Тогда
			Форма.Элементы.ДеревоВзаимодействийСкопировать.Видимость = Ложь;
		КонецЕсли;
		Если Форма.Команды.Найти("ПредметСписок") <> Неопределено Тогда
			Форма.Команды.ПредметСписок.Заголовок = НСтр("ru = 'Установить предмет переписки'");
			Форма.Команды.ПредметСписок.Подсказка = НСтр("ru = 'Установить предмет переписки'");
		КонецЕсли;
	КонецЕсли;
	Форма.ИспользоватьПризнакРассмотрено = ПолучитьФункциональнуюОпцию("ИспользоватьПризнакРассмотрено");

КонецПроцедуры

// Определяет необходимость отображения для адресной книги и форм выбора контакта групп пользователей
//
// Параметры
//  Форма  - УправляемаяФорма - форма для которой будет выполняться процедура
//
Процедура ОбработатьНеобходимостьОтображенияГруппПользователей(Форма) Экспорт
	
	Форма.ИспользоватьГруппыПользователей = ПолучитьФункциональнуюОпцию("ИспользоватьГруппыПользователей");
	Если Не Форма.ИспользоватьГруппыПользователей Тогда
		Форма.СписокПользователей.ПроизвольныйЗапрос = Ложь;
	Иначе
		Форма.СписокПользователей.Параметры.УстановитьЗначениеПараметра("ГруппаПользователей", Справочники.ГруппыПользователей.ПустаяСсылка());
	КонецЕсли;
	
КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////////
//   Работа с предметами взаимодействий

// Устанавливает активность предмета взаимодействий
//
// Параметры
//  Предмет  - ПроизвольнаяСсылка - ссылка на предмет у которого изменяется активность
//  Устанавливать  - Булево - если Истина, то активность будет установлена, если Ложь то снята
//
Процедура УстановитьАктивностьПредмета(Предмет,Устанавливать) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерЗаписи =  РегистрыСведений.АктивныеПредметыВзаимодействий.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Предмет = Предмет;
	Если Устанавливать Тогда
		МенеджерЗаписи.Записать();
	Иначе
		МенеджерЗаписи.Удалить();
	КонецЕсли;

КонецПроцедуры

// Устанавливает предмет взаимодействий для электронного письма
//
// Параметры
//  Ссылка  - ДокументСсылка.ЭлектронноеПисьмоВходящее,
//            ДокументСсылка.ЭлектронноеПисьмоИсходящее,
//            ДокументСсылка.Встреча,
//            ДокументСсылка.ЗапланированноеВзаимодействие,
//            ДокументСсылка.ТелефонныйЗвонок - взаимодействие для которого будет установлен предмет
//  Предмет  - ПроизвольнаяСсылка - ссылка на устанавливаемый предмет
//
Процедура УстановитьПредмет(Ссылка, Предмет) Экспорт
	
	УстановитьПредметПапкуВзаимодействия(Ссылка,,Предмет);
	
КонецПроцедуры

// Устанавливает папку и предмет для взаимодействий
//
// Параметры
//  Ссылка  - ДокументСсылка.ЭлектронноеПисьмоВходящее,
//            ДокументСсылка.ЭлектронноеПисьмоИсходящее,
//            ДокументСсылка.Встреча,
//            ДокументСсылка.ЗапланированноеВзаимодействие,
//            ДокументСсылка.ТелефонныйЗвонок - взаимодействие для которого будут установлены папка и предмет
//  Папка  - СправочникСсылка.ПапкиЭлектронныхПисем - устанавливаемая папка
//  Предмет  - ПроизвольнаяСсылка - ссылка на устанавливаемый предмет
//
Процедура УстановитьПредметПапкуВзаимодействия(Взаимодействие,Папка = Неопределено, Предмет = Неопределено) Экспорт
	
	Если Папка = Неопределено И Предмет = Неопределено Тогда
		
		Возврат;
		
	ИначеЕсли Папка = Неопределено ИЛИ Предмет = Неопределено Тогда
		
		Запрос = Новый Запрос;
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ПредметыПапкиВзаимодействий.Предмет,
		|	ПредметыПапкиВзаимодействий.ПапкаЭлектронногоПисьма
		|ИЗ
		|	РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
		|ГДЕ
		|	ПредметыПапкиВзаимодействий.Взаимодействие = &Взаимодействие";
		
		Запрос.УстановитьПараметр("Взаимодействие",Взаимодействие);
		
		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда
			
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			
			Если Папка = Неопределено Тогда
				Папка = Выборка.ПапкаЭлектронногоПисьма;
			КонецЕсли;
			
			Если Предмет = Неопределено Тогда
				Предмет = Выборка.Предмет;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений.ПредметыПапкиВзаимодействий.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Взаимодействие = Взаимодействие;
	МенеджерЗаписи.Предмет = Предмет;
	МенеджерЗаписи.ПапкаЭлектронногоПисьма = Папка;
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////
//      Формирование письма

// Формирует текст HTML для входящего электронного письма 
//
// Параметры
//  Письмо  - ДокументСсылка.ЭлектронноеПисьмоВходящее
//  ДляПечати  - Булево - признак того, что текст HTML формируется для печатной формы письма
//  ОбработатьКартинки - Булево - признак того что картинки будут вложены в HTML
//
// Возвращаемое значение:
//   Строка   - сформированный текст HTML для входящего электронного письма
//
Функция СформироватьТекстHTMLДляВходящегоПисьма(Письмо, ДляПечати = Истина, ОбработатьКартинки = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ 
	|	ЭлектронноеПисьмоВходящее.Дата,
	|	ЭлектронноеПисьмоВходящее.ДатаПолучения,
	|	ЭлектронноеПисьмоВходящее.ОтправительАдрес,
	|	ЭлектронноеПисьмоВходящее.ОтправительПредставление,
	|	ЭлектронноеПисьмоВходящее.Текст,
	|	ЭлектронноеПисьмоВходящее.ТекстHTML,
	|	ЭлектронноеПисьмоВходящее.Тема,
	|	ЭлектронноеПисьмоВходящее.ТипТекста,
	|	ЭлектронноеПисьмоВходящее.ПолучателиПисьма.(
	|		Ссылка,
	|		НомерСтроки,
	|		Адрес,
	|		Представление,
	|		Контакт
	|	),
	|	ЭлектронноеПисьмоВходящее.ПолучателиКопий.(
	|		Ссылка,
	|		НомерСтроки,
	|		Адрес,
	|		Представление,
	|		Контакт
	|	),
	|	ЕСТЬNULL(УчетныеЗаписиЭлектроннойПочты.ИмяПользователя, """") КАК ИмяПользователяУчетнойЗаписи,
	|	ЭлектронноеПисьмоВходящее.Кодировка
	|ИЗ
	|	Документ.ЭлектронноеПисьмоВходящее КАК ЭлектронноеПисьмоВходящее
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
	|		ПО ЭлектронноеПисьмоВходящее.УчетнаяЗапись = УчетныеЗаписиЭлектроннойПочты.Ссылка
	|ГДЕ
	|	ЭлектронноеПисьмоВходящее.Ссылка = &Письмо";
	
	Запрос.УстановитьПараметр("Письмо",Письмо);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	ДокументHTML = СформироватьДокументHTMLНаОснованииПисьма(
		Письмо, Выборка.ТипТекста, Выборка.Текст,Выборка.ТекстHTML, Выборка.ТипТекста, Выборка.Кодировка, ОбработатьКартинки);
	
	Если ДляПечати Тогда
		ДополнитьТелоПисьмаШапкойПечатнойФормы(ДокументHTML, Выборка, Ложь);
	КонецЕсли;
	
	Возврат ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML);
	
КонецФункции

// Формирует текст HTML для исходящего электронного письма 
//
// Параметры
//  Письмо  - ДокументСсылка.ЭлектронноеПисьмоИсходящее
//  ДляПечати  - Булево - признак того, что текст HTML формируется для печатной формы письма
//  ОбработатьКартинки - Булево - признак того что картинки будут вложены в HTML
//
// Возвращаемое значение:
//   Строка   - сформированный текст HTML для исходящего электронного письма
//
Функция СформироватьТекстHTMLДляИсходящегоПисьма(Письмо, ДляПечати = Истина, ОбработатьКартинки = Ложь) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ЭлектронноеПисьмоИсходящее.Дата,
	|	ЭлектронноеПисьмоИсходящее.СтатусПисьма,
	|	ЭлектронноеПисьмоИсходящее.ОтправительПредставление,
	|	ЭлектронноеПисьмоИсходящее.Текст,
	|	ЭлектронноеПисьмоИсходящее.ТекстHTML,
	|	ЭлектронноеПисьмоИсходящее.Тема,
	|	ЭлектронноеПисьмоИсходящее.ТипТекста,
	|	ЭлектронноеПисьмоИсходящее.ВзаимодействиеОснование,
	|	ЭлектронноеПисьмоИсходящее.ВключатьТелоИсходногоПисьма,
	|	ЭлектронноеПисьмоИсходящее.ПолучателиПисьма.(
	|		Ссылка,
	|		НомерСтроки,
	|		Адрес,
	|		Представление,
	|		Контакт
	|	),
	|	ЭлектронноеПисьмоИсходящее.ПолучателиКопий.(
	|		Ссылка,
	|		НомерСтроки,
	|		Адрес,
	|		Представление,
	|		Контакт
	|	),
	|	ЕСТЬNULL(УчетныеЗаписиЭлектроннойПочты.ИмяПользователя, """") КАК ИмяПользователяУчетнойЗаписи
	|ИЗ
	|	Документ.ЭлектронноеПисьмоИсходящее КАК ЭлектронноеПисьмоИсходящее
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
	|		ПО ЭлектронноеПисьмоИсходящее.УчетнаяЗапись = УчетныеЗаписиЭлектроннойПочты.Ссылка
	|ГДЕ
	|	ЭлектронноеПисьмоИсходящее.Ссылка = &Письмо";
	
	Запрос.УстановитьПараметр("Письмо",Письмо);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	ДокументHTML = СформироватьДокументHTMLНаОснованииПисьма(
		Письмо,Выборка.ТипТекста,Выборка.Текст,Выборка.ТекстHTML,Выборка.ТипТекста,,ОбработатьКартинки);
	
	Если Выборка.СтатусПисьма = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Черновик 
		И Выборка.ВключатьТелоИсходногоПисьма 
		И Выборка.ВзаимодействиеОснование <> Неопределено 
		И (ТипЗнч(Выборка.ВзаимодействиеОснование) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") 
		ИЛИ ТипЗнч(Выборка.ВзаимодействиеОснование) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее")) Тогда
		
		ВыборкаОснование = ПолучитьДанныеПисьмаОснования(Выборка.ВзаимодействиеОснование);
		
		ДокументОснованиеHTML = СформироватьДокументHTMLНаОснованииПисьма(
			Выборка.ВзаимодействиеОснование,
			ВыборкаОснование.ТипТекста,
			ВыборкаОснование.Текст,
			ВыборкаОснование.ТекстHTML,
			Выборка.ТипТекста);
		
		ЭлементТелоОснованиеHTML = ДокументОснованиеHTML.Тело;
		МассивДочернихУзловТелаОснование = ПолучитьМассивДочернихУзловСодержащихHTML(ЭлементТелоОснованиеHTML);
		
		ЭлементDIV = ДобавитьЭлементСАтрибутами(ЭлементТелоОснованиеHTML,
			"div",Новый Структура("style","border:none;border-left:solid blue 1.5pt;padding:0cm 0cm 0cm 4.0pt"));
		
		Для каждого ДочернийУзел Из МассивДочернихУзловТелаОснование Цикл
			
			ЭлементDIV.ДобавитьДочерний(ДочернийУзел);
			
		КонецЦикла;
		
		ЭлементHR = ДобавитьЭлементСАтрибутами(
			ЭлементDIV,"hr",Новый Структура("size,width,align,tabindex","2","100%","center","-1"));
		ВставитьЭлементHTMLПервымДочернимЭлементом(ЭлементDIV,ЭлементHR,МассивДочернихУзловТелаОснование);
		
		СтруктураДанныеШапкиПисьмаОснования = Новый Структура(
			"ОтправительПредставление,ОтправительАдрес,Дата,Тема,ПолучателиПисьма,ПолучателиКопий",
			ВыборкаОснование.ОтправительПредставление,
			ВыборкаОснование.ОтправительАдрес,
			ВыборкаОснование.Дата,
			ВыборкаОснование.Тема,
			ВыборкаОснование.ПолучателиПисьма,
			ВыборкаОснование.ПолучателиКопий,);
		
		ЭлементШрифт = СформироватьЭлементДанныхШапкиПисьма(ЭлементDIV,
		СтруктураДанныеШапкиПисьмаОснования,
		ВыборкаОснование.ИмяОбъектаМетаданных = "ЭлектронноеПисьмоИсходящее");
		ВставитьЭлементHTMLПервымДочернимЭлементом(ЭлементDIV,ЭлементШрифт,МассивДочернихУзловТелаОснование);
		
		МассивДочернихУзловТелаТекущее = ПолучитьМассивДочернихУзловСодержащихHTML(ДокументHTML.Тело);
		Для Каждого ДочернийУзел Из МассивДочернихУзловТелаТекущее Цикл
			
			ЭлементТелоОснованиеHTML.ВставитьПеред(ДокументОснованиеHTML.ИмпортироватьУзел(ДочернийУзел,Истина),ЭлементDIV);
			
		КонецЦикла;
		
		ДокументHTML = ДокументОснованиеHTML;
		
	КонецЕсли;
	
	Если ДляПечати Тогда
		ДополнитьТелоПисьмаШапкойПечатнойФормы(ДокументHTML,Выборка,Истина);
	КонецЕсли;
	
	Возврат ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML);
	
КонецФункции

// Формирует документ HTML на основании электронного письма 
//
// Параметры
//  Письмо  - ДокументСсылка.ЭлектронноеПисьмоВходящее,
//            ДокументСсылка.ЭлектронноеПисьмоИсходящее - письмо для которого будет проведена оценка
//  ТипТекста  - ПеречислениеСсылка.ТипыТекстовЭлектронныхПисем - тип текста письма
//  Текст  - Строка - текста письма
//  ТекстHTML  - Строка - текста письма в формате HTML
//  ТипТекстаПреобразование  - ПеречислениеСсылка.ТипыТекстовЭлектронныхПисем - тип текста в который преобразуется письмо
//  Кодировка  - Строка - кодировка письма
//  ОбработатьКартинки - Булево - признак того что картинки будут вложены в HTML
//
// Возвращаемое значение:
//   Строка   - обработанный текст электронного письма
//
Функция СформироватьДокументHTMLНаОснованииПисьма(Письмо,
	ТипТекста,
	Текст,
	ТекстHTML,
	ТипТекстаПреобразование,
	Кодировка = "",
	ОбработатьКартинки = Ложь)
	
	Если ТипТекста <> ТипТекстаПреобразование И
		ТипТекста <> Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст Тогда
		
		ТекстВходящегоПисьма = ПолучитьОбычныйТекстИзHTML(ТекстHTML);
		
		ДокументHTML = ПолучитьДокументHTMLИзОбычногоТекста(ТекстВходящегоПисьма);
		
	ИначеЕсли ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст ИЛИ
		(ТипТекста.Пустая() И СокрЛП(ТекстHTML) = "") Тогда
		
		ДокументHTML = ПолучитьДокументHTMLИзОбычногоТекста(Текст);
		
	Иначе
		
		КодировкаПисьма = Кодировка;
		
		Если ПустаяСтрока(КодировкаПисьма) Тогда
			ПозицияАтрибутаКодировки = Найти(ТекстHTML,"charset");
			Если ПозицияАтрибутаКодировки <> 0 Тогда
			инд = 0;
			Пока КодСимвола(Сред(ТекстHTML,ПозицияАтрибутаКодировки + 8 + инд,1)) <> 34 Цикл
				КодировкаПисьма = КодировкаПисьма + Сред(ТекстHTML,ПозицияАтрибутаКодировки + 8 + инд,1);
				инд = инд + 1;
			КонецЦикла
		Иначе
				КодировкаПисьма = "utf8";
			КонецЕсли;
		КонецЕсли;
		
		ТаблицаФайлов = ПолучитьВложенияПисьмаСНеПустымИД(Письмо);
		
		Если ТаблицаФайлов.Количество() Тогда
			
				ДокументHTML = ЗаменитьИдентификаторыКартинокНаПутьКФайлам(ТекстHTML, ТаблицаФайлов, КодировкаПисьма, ОбработатьКартинки);
			
		Иначе
			ДокументHTML = ПолучитьОбъектДокументHTMLИзТекстаHTML(ТекстHTML, КодировкаПисьма);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ДокументHTML;
	
КонецФункции

// Обрабатывает текст HTML электронного письма 
//
// Параметры
//  Письмо  - ДокументСсылка.ЭлектронноеПисьмоВходящее,
//            ДокументСсылка.ЭлектронноеПисьмоИсходящее - письмо для которого будет проведена оценка
//
// Возвращаемое значение:
//   Строка   - обработанный текст электронного письма
//
Функция ОбработатьТекстHTML(Письмо) Экспорт
	
	СтруктураРеквизиты = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Письмо,"ТекстHTML,Кодировка");
	ТекстHTML = СтруктураРеквизиты.ТекстHTML;
	Кодировка = СтруктураРеквизиты.Кодировка;
	
	Если Не ПустаяСтрока(ТекстHTML) Тогда
		
		//Добавим тег HTML если он отсутствует. Такие письма могут приходить к примеру с Gmail. 
		//Необходимо для корректного отображения в элементе формы.
		Если СтрЧислоВхождений(ТекстHTML,"<html") = 0 Тогда
			ТекстHTML = "<html>" + ТекстHTML + "</html>"
		КонецЕсли;
		
		ТаблицаФайлов = ПолучитьВложенияПисьмаСНеПустымИД(Письмо);
		
		Если ТаблицаФайлов.Количество() Тогда
			
			ДокументHTML = ЗаменитьИдентификаторыКартинокНаПутьКФайлам(ТекстHTML, ТаблицаФайлов, Кодировка);
			
			Возврат ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML);
			
		Иначе
			
			Возврат ТекстHTML;
			
		КонецЕсли;
		
	Иначе
		
		Возврат ТекстHTML;
		
	КонецЕсли;
	
КонецФункции

// Возвращает формат исходящих писем по умолчанию для пользователя, 
// исходя из настроек системы и формата последнего письма, отправленного пользователем.
// 
// Параметры:
//   Пользователь - СправочникСсылка.Пользователи - пользователь
//
// Возвращаемое значение
//   ПеречислениеСсылка.СпособыРедактированияЭлектронныхПисем
// 
Функция ФорматСообщенияПоУмолчанию(Пользователь) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ОтправлятьПисьмаВФорматеHTML") Тогда
		Возврат Перечисления.СпособыРедактированияЭлектронныхПисем.ОбычныйТекст;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ВЫБОР
	|		КОГДА ЭлектронноеПисьмоИсходящее.ТипТекста = ЗНАЧЕНИЕ(Перечисление.ТипыТекстовЭлектронныхПисем.ПростойТекст)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.СпособыРедактированияЭлектронныхПисем.ОбычныйТекст)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.СпособыРедактированияЭлектронныхПисем.HTML)
	|	КОНЕЦ КАК ФорматСообщения,
	|	ЭлектронноеПисьмоИсходящее.Дата
	|ИЗ
	|	Документ.ЭлектронноеПисьмоИсходящее КАК ЭлектронноеПисьмоИсходящее
	|ГДЕ
	|	ЭлектронноеПисьмоИсходящее.Автор = &Пользователь
	|	И (НЕ ЭлектронноеПисьмоИсходящее.ПометкаУдаления)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЭлектронноеПисьмоИсходящее.Дата УБЫВ";
	
	Запрос.УстановитьПараметр("Пользователь",Пользователь);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Возврат Перечисления.СпособыРедактированияЭлектронныхПисем.ОбычныйТекст;
	Иначе
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.ФорматСообщения;
	КонецЕсли;
	
КонецФункции

// Заменяет в тексте HTML ИД картинок вложений на путь к файлам и создает объект документ HTML
//
// Параметры
//  ТекстHTML - Строка - обрабатываемый текст HTML
//  Атрибут - ТаблицаЗначений - таблица, содержащая информацию о присоединенных файлов
//  Кодировка - Строка - кодировка текста HTML
//
// Возвращаемое значение:
//  ДокументHTML   - созданный документ HTML
//
Функция ЗаменитьИдентификаторыКартинокНаПутьКФайлам(ТекстHTML,ТаблицаФайлов,Кодировка = Неопределено, ОбработатьКартинки = Ложь) Экспорт
	
	ДокументHTML = ПолучитьОбъектДокументHTMLИзТекстаHTML(ТекстHTML,Кодировка);
	
	Для каждого ПрисоединенныйФайл ИЗ ТаблицаФайлов Цикл
		
		Для каждого Картинка Из ДокументHTML.Картинки Цикл
			
			АтрибутИсточникКартинки = Картинка.Атрибуты.ПолучитьИменованныйЭлемент("src");
			Если АтрибутИсточникКартинки = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтрЧислоВхождений(АтрибутИсточникКартинки.Значение, ПрисоединенныйФайл.ИДФайлаЭлектронногоПисьма) > 0 Тогда
				
				НовыйАтрибутКартинки = АтрибутИсточникКартинки.КлонироватьУзел(Ложь);
				Если ОбработатьКартинки Тогда
					ДанныеФайла = ПрисоединенныеФайлы.ПолучитьДанныеФайла(ПрисоединенныйФайл.Ссылка);
					ДвоичныеДанные = ПолучитьИзВременногоХранилища(ДанныеФайла.СсылкаНаДвоичныеДанныеФайла);
					ТекстовоеСодержимое = Base64Строка(ДвоичныеДанные);
					ТекстовоеСодержимое = "data:image/" + Сред(ДанныеФайла.Расширение,2) + ";base64," + Символы.ПС + ТекстовоеСодержимое;
				Иначе
					//Если данные картинки получить не удалось, то картинку не выводим. Пользователю при этом ничего не сообщаем.
					Попытка
						ТекстовоеСодержимое = ПрисоединенныеФайлы.ПолучитьДанныеФайла(ПрисоединенныйФайл.Ссылка).СсылкаНаДвоичныеДанныеФайла;
					Исключение
						ТекстовоеСодержимое = "";
					КонецПопытки;
				КонецЕсли;
				
				НовыйАтрибутКартинки.ТекстовоеСодержимое = ТекстовоеСодержимое;
				Картинка.Атрибуты.УстановитьИменованныйЭлемент(НовыйАтрибутКартинки);
				
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ДокументHTML;
	
КонецФункции

// Получает вложения письма с непустым ИД 
//
// Параметры
//  Письмо  - ДокументСсылка.ЭлектронноеПисьмоВходящее,
//            ДокументСсылка.ЭлектронноеПисьмоИсходящее - письмо для которого будет проведена оценка
//
// Возвращаемое значение:
//   ТаблицаЗначений   - таблица с информацией о вложениях электронного письма с непустым ИД
//
Функция ПолучитьВложенияПисьмаСНеПустымИД(Письмо) Экспорт
	
	ИмяМетаданныхПисьма = Письмо.Метаданные().Имя;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ПрисоединенныеФайлыПисьма.Ссылка,
	|	ПрисоединенныеФайлыПисьма.Наименование,
	|	ПрисоединенныеФайлыПисьма.Размер,
	|	ПрисоединенныеФайлыПисьма.ИДФайлаЭлектронногоПисьма
	|ИЗ
	|	Справочник." + ИмяМетаданныхПисьма + "ПрисоединенныеФайлы КАК ПрисоединенныеФайлыПисьма
	|ГДЕ
	|	ПрисоединенныеФайлыПисьма.ВладелецФайла = &Письмо
	|	И (НЕ ПрисоединенныеФайлыПисьма.ПометкаУдаления)
	|	И ПрисоединенныеФайлыПисьма.ИДФайлаЭлектронногоПисьма <> &ПустаяСтрока";
	
	Запрос.УстановитьПараметр("ПустаяСтрока","");
	Запрос.УстановитьПараметр("Письмо",Письмо);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции 

// Получает данные письма основания
//
// Параметры
//  Письмо  - ДокументСсылка.ЭлектронноеПисьмоВходящее,
//            ДокументСсылка.ЭлектронноеПисьмоИсходящее - письмо для которого будет проведена оценка
//
// Возвращаемое значение:
//   ВыборкаИзРезультатовЗапроса   - оценка размера письма в байтах
//
Функция ПолучитьДанныеПисьмаОснования(Письмо) Экспорт
	
	ИмяОбъектаМетаданных = Письмо.Метаданные().Имя;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ ЭлектронноеПисьмоОснование.ТипТекста КАК ТипТекста,
	|	ЭлектронноеПисьмоОснование.Тема КАК Тема,
	|	ЭлектронноеПисьмоОснование.ТекстHTML КАК ТекстHTML,
	|	ЭлектронноеПисьмоОснование.Текст КАК Текст,
	|" + ?(ИмяОбъектаМетаданных = "ЭлектронноеПисьмоВходящее","ЭлектронноеПисьмоОснование.ОтправительАдрес","&ПустаяСтрока")+" КАК ОтправительАдрес,
	|	ЭлектронноеПисьмоОснование.ОтправительПредставление КАК ОтправительПредставление,
	|	ЭлектронноеПисьмоОснование.Дата КАК Дата,
	|	&ИмяОбъектаМетаданных КАК ИмяОбъектаМетаданных,
	|	ЭлектронноеПисьмоОснование.ПолучателиКопий.(
	|		Ссылка,
	|		НомерСтроки,
	|		Адрес,
	|		Представление,
	|		Контакт
	|	) КАК ПолучателиКопий,
	|	ЭлектронноеПисьмоОснование.ПолучателиПисьма.(
	|		Ссылка,
	|		НомерСтроки,
	|		Адрес,
	|		Представление,
	|		Контакт
	|	) КАК ПолучателиПисьма
	|ИЗ Документ." + ИмяОбъектаМетаданных + " КАК ЭлектронноеПисьмоОснование
	|ГДЕ
	|	ЭлектронноеПисьмоОснование.Ссылка = &Письмо";
	
	Запрос.УстановитьПараметр("Письмо",Письмо);
	Запрос.УстановитьПараметр("ПустаяСтрока","");
	Запрос.УстановитьПараметр("ИмяОбъектаМетаданных",ИмяОбъектаМетаданных);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка;
	
КонецФункции

// Обрабатывает текст HTML для помещения в форматированный документ
//
// Параметры
//  Письмо  - ДокументСсылка.ЭлектронноеПисьмоВходящее,
//            ДокументСсылка.ЭлектронноеПисьмоИсходящее - письмо для которого будет проведена оценка
//  ТекстHTML - Строка - обрабатываемый текст HTML
//  СтруктураВложений - Структура - структура в которую помещаются картинки - вложения письма.
//
// Возвращаемое значение:
//   Число   - оценка размера письма в байтах
//
Функция ОбработатьТекстHTMLДляФорматированногоДокумента(Письмо,ТекстHTML,СтруктураВложений) Экспорт
	
	Если Не ПустаяСтрока(ТекстHTML) Тогда
		
		ДокументHTML = ПолучитьОбъектДокументHTMLИзТекстаHTML(ТекстHTML);
		
		ТаблицаФайлов = ПолучитьВложенияПисьмаСНеПустымИД(Письмо);
		
		Если ТаблицаФайлов.Количество() Тогда
			
			Для каждого ПрисоединенныйФайл ИЗ ТаблицаФайлов Цикл
				
				Для каждого Картинка Из ДокументHTML.Картинки Цикл
					
					АтрибутИсточникКартинки = Картинка.Атрибуты.ПолучитьИменованныйЭлемент("src");
					
					Если СтрЧислоВхождений(АтрибутИсточникКартинки.Значение, ПрисоединенныйФайл.ИДФайлаЭлектронногоПисьма) > 0 Тогда
						
						НовыйАтрибутКартинки = АтрибутИсточникКартинки.КлонироватьУзел(Ложь);
						НовыйАтрибутКартинки.ТекстовоеСодержимое = ПрисоединенныйФайл.Наименование;
						Картинка.Атрибуты.УстановитьИменованныйЭлемент(НовыйАтрибутКартинки);
						
						СтруктураВложений.Вставить(
							ПрисоединенныйФайл.Наименование,
							Новый Картинка(ПолучитьИзВременногоХранилища(
								ПрисоединенныеФайлы.ПолучитьДанныеФайла(ПрисоединенныйФайл.Ссылка).СсылкаНаДвоичныеДанныеФайла)));
						
						Прервать;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
			Возврат ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML);
			
		Иначе
			
			Возврат ТекстHTML;
			
		КонецЕсли;
		
	Иначе
		
		Возврат ТекстHTML;
		
	КонецЕсли;
	
КонецФункции

// Добавляет строку с данными исходного письма
// Параметры
//  ЭлементРодитель - ЭлементHTML - родительский элемент HTML, для которого будет добавлены данные исходного письма
//  Атрибут - Строка - наименование данных
//  Значение - Строка - строка с данными
//
Процедура ДобавитьСтрокуДанныхИсходногоПисьма(ЭлементРодитель,Атрибут,Значение) Экспорт

	ДобавитьТекстовыйУзел(ЭлементРодитель,Атрибут + ": ",Истина);
	ДобавитьТекстовыйУзел(ЭлементРодитель,Значение,,Истина);

КонецПроцедуры

// Получает представление получателей входящего письма
//
// Параметры
//  ТаблицаПолучателей  - ТабличнаяЧасть - табличная часть для которой выполняется функция
//
// Возвращаемое значение:
//   СтрокаКВозврату   - строка с представление всех получателей табличной части.
//
Функция ПолучитьПредставленияПолучателейВходящегоПисьма(ТаблицаПолучателей) Экспорт

	СтрокаКВозврату = "";
	
	Для Каждого Получатель Из ТаблицаПолучателей Цикл
		
		СтрокаКВозврату = СтрокаКВозврату + "'" +
			?(ПустаяСтрока(Получатель.Представление), Получатель.Адрес, Получатель.Представление) + "'"+ ", ";
		
	КонецЦикла;
	
	Если Не ПустаяСтрока(СтрокаКВозврату) Тогда
		
		СтрокаКВозврату = Лев(СтрокаКВозврату,СтрДлина(СтрокаКВозврату) - 2);
		
	КонецЕсли;
	
	Возврат СтрокаКВозврату;

КонецФункции

// Формирует элемент HTML шапки исходящего электронного письма
// Параметры
//  ЭлементРодитель - ЭлементHTML - родительский элемент HTML, для которого будет добавлен элемент данных шапки
//  Выборка - ВыборкаИзРезультатаЗапроса - выборка по данным письма
//  ТолькоПоПредставлениюОтправителя - Булево - определяет необходимо ли включать адрес отправителя или только представление
//
Функция СформироватьЭлементДанныхШапкиПисьма(ЭлементРодитель,Выборка,ТолькоПоПредставлениюОтправителя = Ложь) Экспорт
	
	ЭлементШрифт = ДобавитьЭлементСАтрибутами(ЭлементРодитель, "Font", Новый Структура("size,face","2","Tahoma"));
	ДобавитьСтрокуДанныхИсходногоПисьма(ЭлементШрифт, "From", 
		Выборка.ОтправительПредставление + ?(ТолькоПоПредставлениюОтправителя,"","[" + Выборка.ОтправительАдрес +"]"));
	ДобавитьСтрокуДанныхИсходногоПисьма(ЭлементШрифт, "Sent", Формат(Выборка.Дата,"ДФ='dd MMMM yyyy'"));
	ДобавитьСтрокуДанныхИсходногоПисьма(ЭлементШрифт, "To", 
		ПолучитьПредставленияПолучателейВходящегоПисьма(Выборка.ПолучателиПисьма.Выгрузить()));
	ТаблицаПолучателейКопий = Выборка.ПолучателиКопий.Выгрузить();
	Если ТаблицаПолучателейКопий.Количество() > 0 Тогда
		ДобавитьСтрокуДанныхИсходногоПисьма(ЭлементШрифт, "cc", 
			ПолучитьПредставленияПолучателейВходящегоПисьма(ТаблицаПолучателейКопий));
	КонецЕсли;
	ДобавитьСтрокуДанныхИсходногоПисьма(ЭлементШрифт,"Subject",Выборка.Тема);
	
	Возврат ЭлементШрифт;
	
КонецФункции

// Дополняет тело письма шапкой печатной формы
// Параметры
//  ДокументHTML - ДокументHTML - документ HTML для которого будет дополнена шапка
//  Выборка - ВыборкаИзРезультатаЗапроса - выборка по данным письма
//  ЭтоИсходящее - Булево - Истина если письмо исходящее, Ложь если исходящее
//
Процедура ДополнитьТелоПисьмаШапкойПечатнойФормы(ДокументHTML,Выборка,ЭтоИсходящее) Экспорт
	
	Если ДокументHTML.Тело = Неопределено Тогда
		ЭлементТелоПисьма = ДокументHTML.СоздатьЭлемент("body");
		ДокументHTML.Тело = ЭлементТелоПисьма;
	Иначе
		ЭлементТелоПисьма = ДокументHTML.Тело;
	КонецЕсли;
	
	МассивДочернихУзловТела = ПолучитьМассивДочернихУзловСодержащихHTML(ЭлементТелоПисьма);
	
	//Имя пользователя учетной записи
	ЭлементПользователь = СформироватьЭлементИмяПользователяУчетнойЗаписи(ЭлементТелоПисьма, Выборка);
	ВставитьЭлементHTMLПервымДочернимЭлементом(ЭлементТелоПисьма,ЭлементПользователь, МассивДочернихУзловТела);
	
	//Горизонтальный разделитель
	ЭлементHR = ДобавитьЭлементСАтрибутами(ЭлементТелоПисьма, "hr",
		Новый Структура("size,width,align,tabindex","2","100%","center","-1"));
	ВставитьЭлементHTMLПервымДочернимЭлементом(ЭлементТелоПисьма,ЭлементHR,МассивДочернихУзловТела);
	
	//Шапка письма
	ЭлементДанныеШапкиПисьма = СформироватьЭлементДанныхШапкиПисьма(ЭлементТелоПисьма,Выборка,ЭтоИсходящее);
	ВставитьЭлементHTMLПервымДочернимЭлементом(ЭлементТелоПисьма,ЭлементДанныеШапкиПисьма,МассивДочернихУзловТела);
	
КонецПроцедуры

// Заменяет имена картинок в документ HTML на идентификаторы почтовых вложений
// Параметры
//  ДокументHTML - ДокументHTML - документ HTML в котором будет выполняться замена
//  ТаблицаСоответствий - ТаблицаЗначений - таблица соответствий имен файлов и идентификаторов
//
Процедура ЗаменитьИменаКартинокНаИдентификаторыПочтовыхВложенийВHTML(ДокументHTML,ТаблицаСоответствий) Экспорт
	
	Для каждого Картинка Из ДокументHTML.Картинки Цикл
		
		АтрибутИсточникКартинки = Картинка.Атрибуты.ПолучитьИменованныйЭлемент("src");
		
		НайденнаяСтрока = ТаблицаСоответствий.Найти(АтрибутИсточникКартинки.ТекстовоеСодержимое,"ИмяФайла");
		Если НайденнаяСтрока <> Неопределено Тогда
			
			НовыйАтрибутКартинки = АтрибутИсточникКартинки.КлонироватьУзел(Ложь);
			НовыйАтрибутКартинки.ТекстовоеСодержимое = Строка("cid:"+НайденнаяСтрока.ИдентификаторФайлаДляHTML);
			Картинка.Атрибуты.УстановитьИменованныйЭлемент(НовыйАтрибутКартинки);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция СформироватьЭлементИмяПользователяУчетнойЗаписи(ЭлементРодитель,Выборка)
	
	ЭлементШрифт = ДобавитьЭлементСАтрибутами(ЭлементРодитель, "Font", Новый Структура("size,face", "3", "Tahoma"));
	ДобавитьТекстовыйУзел(ЭлементШрифт,Выборка.ИмяПользователяУчетнойЗаписи, Истина);
	
	Возврат ЭлементШрифт;
	
КонецФункции

// Оценивает размер электронного письма
//
// Параметры
//  Письмо  - ДокументСсылка.ЭлектронноеПисьмоВходящее,
//            ДокументСсылка.ЭлектронноеПисьмоИсходящее - письмо для которого будет проведена оценка
//
// Возвращаемое значение:
//   Число   - оценка размера письма в байтах
//
Функция ОценитьРазмерИсходящегоЭлектронногоПисьма(Письмо) Экспорт
	
	Размер = 0;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СУММА(ЕСТЬNULL(ЭлектронноеПисьмоИсходящееПрисоединенныеФайлы.Размер, 0) * 1.5) КАК Размер
	|ИЗ
	|	Справочник.ЭлектронноеПисьмоИсходящееПрисоединенныеФайлы КАК ЭлектронноеПисьмоИсходящееПрисоединенныеФайлы
	|ГДЕ
	|	ЭлектронноеПисьмоИсходящееПрисоединенныеФайлы.ВладелецФайла = &Письмо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ЭлектронноеПисьмоИсходящее.ТипТекста = ЗНАЧЕНИЕ(Перечисление.ТипыТекстовЭлектронныхПисем.ПростойТекст)
	|			ТОГДА ЭлектронноеПисьмоИсходящее.Текст
	|		ИНАЧЕ ЭлектронноеПисьмоИсходящее.ТекстHTML
	|	КОНЕЦ КАК Текст,
	|	ЭлектронноеПисьмоИсходящее.Тема
	|ИЗ
	|	Документ.ЭлектронноеПисьмоИсходящее КАК ЭлектронноеПисьмоИсходящее
	|ГДЕ
	|	ЭлектронноеПисьмоИсходящее.Ссылка = &Письмо";
	
	Запрос.УстановитьПараметр("Письмо",Письмо);
	
	Результат = Запрос.ВыполнитьПакет();
	Если НЕ Результат[0].Пустой() Тогда
		Выборка = Результат[0].Выбрать();
		Выборка.Следующий();
		Размер = Размер + ?(Выборка.Размер = Null, 0, Выборка.Размер);
	КонецЕсли;
	
	Если НЕ Результат[1].Пустой() Тогда
		Выборка = Результат[1].Выбрать();
		Выборка.Следующий();
		Размер = Размер + СтрДлина(Выборка.Текст) + СтрДлина(Выборка.Тема);
		
	КонецЕсли;;
	
	Возврат Размер;

КонецФункции

////////////////////////////////////////////////////////////////////////////////////
//        Работа с объектом Документ HTML

// Получает массив дочерних узлов элемента HTML, содержащих HTML
//
// Параметры
//  Элемент  - ЭлементHTML
//
// Возвращаемое значение:
//   Массив   - массив дочерних узлов содержащих HTML
//
Функция ПолучитьМассивДочернихУзловСодержащихHTML(Элемент) Экспорт

	МассивДочернихУзлов = Новый Массив;
	
	Для каждого ДочернийУзел Из Элемент.ДочерниеУзлы Цикл
		
		Если ТипЗнч(ДочернийУзел) = Тип("ЭлементБлокHTML") ИЛИ ТипЗнч(ДочернийУзел) = Тип("ЭлементHTML") Тогда
			
			МассивДочернихУзлов.Добавить(ДочернийУзел);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивДочернихУзлов;

КонецФункции

// Получает объект ДокументHTML из текста HTML
//
// Параметры
//  ТекстHTML  - Строка - 
//
// Возвращаемое значение:
//   ДокументHTML   - созданный документ HTML
Функция ПолучитьОбъектДокументHTMLИзТекстаHTML(ТекстHTML,Кодировка = Неопределено) Экспорт
	
	Построитель = Новый ПостроительDOM;
	ЧтениеHTML = Новый ЧтениеHTML;
	
	НовыйТекстHTML = ТекстHTML;
	ПозицияОткрытиеXML = Найти(НовыйТекстHTML,"<?xml");
	
	Если ПозицияОткрытиеXML > 0 Тогда
		
		ПозицияЗакрытиеXML = Найти(НовыйТекстHTML,"?>");
		Если ПозицияЗакрытиеXML > 0 Тогда
			
			НовыйТекстHTML = ЛЕВ(НовыйТекстHTML,ПозицияОткрытиеXML - 1) + ПРАВ(НовыйТекстHTML,СтрДлина(НовыйТекстHTML) - ПозицияЗакрытиеXML -1);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Кодировка = Неопределено Тогда
		ЧтениеHTML.УстановитьСтроку(ТекстHTML);
	Иначе
		ЧтениеHTML.УстановитьСтроку(ТекстHTML, Кодировка);
	КонецЕсли;
	Возврат Построитель.Прочитать(ЧтениеHTML);
	
КонецФункции

// Получает объект ДокументHTML из обычного текста
//
// Параметры
//  Текст  - Строка - текст из которого будет создан документ HTML
//
// Возвращаемое значение:
//   ДокументHTML   - созданный документ HTML
Функция ПолучитьДокументHTMLИзОбычногоТекста(Текст) Экспорт
	
	ДокументHTML = Новый ДокументHTML;
	
	ЭлементТело = ДокументHTML.СоздатьЭлемент("body");
	ДокументHTML.Тело = ЭлементТело;
	
	ЭлементБлок = ДокументHTML.СоздатьЭлемент("p");
	ЭлементТело.ДобавитьДочерний(ЭлементБлок);
	
	КоличествоСтрок = СтрЧислоСтрок(Текст);
	Для Инд = 1 По КоличествоСтрок Цикл
		ДобавитьТекстовыйУзел(ЭлементБлок, СтрПолучитьСтроку(Текст, Инд), Ложь, ?(Инд = КоличествоСтрок, Ложь, Истина));
	КонецЦикла;
	
	Возврат ДокументHTML;
	
КонецФункции

// Получает текст HTML из объекта ДокументHTML
//
// Параметры
//  ДокументHTML  - ДокументHTML - документ, из которого будет извлекаться текст
//
// Возвращаемое значение:
//   Строка   - текст HTML
//
Функция ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML) Экспорт
	
	ЗаписьDOM = Новый ЗаписьDOM;
	ЗаписьHTML = Новый ЗаписьHTML;
	ЗаписьHTML.УстановитьСтроку();
	ЗаписьDOM.Записать(ДокументHTML,ЗаписьHTML);
	Возврат ЗаписьHTML.Закрыть();
	
КонецФункции

// Создает атрибут элемента HTML и устанавливает его текстовое содержимое
//
// Параметры
//  ЭлементHTML  - ЭлементHTML - элемент для которого устанавливается атрибут
//  Имя  - Строка - имя атрибута HTML
//  ТекстовоеСодержимое  - Строка - текстовое содержимое атрибута
//
Процедура УстановитьАтрибутЭлементаHTML(ЭлементHTML,Имя,ТекстовоеСодержимое) Экспорт
	
	АтрибутHTML = ЭлементHTML.ДокументВладелец.СоздатьАтрибут(Имя);
	АтрибутHTML.ТекстовоеСодержимое = ТекстовоеСодержимое;
	ЭлементHTML.Атрибуты.УстановитьИменованныйЭлемент(АтрибутHTML);
	
КонецПроцедуры

// Добавляет дочерний элемент с атрибутами
//
// Параметры
//  ЭлементРодитель  - ЭлементHTML - элемент,к которому будет добавлен дочерний элемент
//  Имя  - Строка - имя элемента HTML
//  Атрибуты  - Соответствие - ключ содержит имя атрибута, значение текстовое содержимое
//
// Возвращаемое значение:
//   ЭлементHTML   - добавленный элемент
//
Функция ДобавитьЭлементСАтрибутами(ЭлементРодитель,Имя,Атрибуты) Экспорт
	
	ЭлементHTML = ЭлементРодитель.ДокументВладелец.СоздатьЭлемент(Имя);
	
	Для Каждого Атрибут Из Атрибуты Цикл
		
		УстановитьАтрибутЭлементаHTML(ЭлементHTML, Атрибут.Ключ, Атрибут.Значение);
		
	КонецЦикла;
	
	ЭлементРодитель.ДобавитьДочерний(ЭлементHTML);
	
	Возврат ЭлементHTML;
	
КонецФункции

// Получает обычный текст из текста HTML 
//
// Параметры
//  ТекстHTML  - Строка - текст HTML
//
// Возвращаемое значение:
//   Строка   - обычный текст
//
Функция ПолучитьОбычныйТекстИзHTML(ТекстHTML) Экспорт
	
	ФорматированныйДокумент = Новый ФорматированныйДокумент;
	ФорматированныйДокумент.УстановитьHTML(ТекстHTML, Новый Структура);
	Возврат ФорматированныйДокумент.ПолучитьТекст();
	
КонецФункции

// Добавляет текстовый узел в ДокументHTML
//
// Параметры
//  ЭлементРодитель  - ЭлементHTML - элемент,к которому будет добавлен дочерний элемент
//  Текст  - Строка - содержимое текстового узла
//  Атрибуты  - Соответствие - ключ содержит имя атрибута, значение текстовое содержимое
//
// Возвращаемое значение:
//   ЭлементHTML   - добавленный элемент
//
Процедура ДобавитьТекстовыйУзел(ЭлементРодитель, Текст, ВыделятьЖирным = Ложь,ДобавлятьПереносСтроки = Ложь) Экспорт
	
	ДокументВладелец = ЭлементРодитель.ДокументВладелец;
	
	ТекстовыйУзел = ДокументВладелец.СоздатьТекстовыйУзел(Текст);
	
	Если ВыделятьЖирным Тогда
		ЭлементЖирный = ДокументВладелец.СоздатьЭлемент("b");
		ЭлементЖирный.ДобавитьДочерний(ТекстовыйУзел);
		ЭлементРодитель.ДобавитьДочерний(ЭлементЖирный);
	Иначе
		
		ЭлементРодитель.ДобавитьДочерний(ТекстовыйУзел);
		
	КонецЕсли;
	
	Если ДобавлятьПереносСтроки Тогда
		ЭлементРодитель.ДобавитьДочерний(ДокументВладелец.СоздатьЭлемент("br"));
	КонецЕсли;
	
КонецПроцедуры

// Вставляет элемент HTML перед первым дочерним узлом элемента родителя
//
// Параметры
//  ЭлементРодитель  - ЭлементHTML - элемент,к которому будет добавлен дочерний элемент
//  ВставляемыйЭлемент  - ЭлементHTML - вставляемый элемент HTML
//  МассивДочернихЭлементовРодителя  - Массив - массив дочерних элементов родительского элемента
//
Процедура ВставитьЭлементHTMLПервымДочернимЭлементом(ЭлементРодитель,
		ВставляемыйЭлемент,
		МассивДочернихЭлементовРодителя) Экспорт
	
	Если МассивДочернихЭлементовРодителя.Количество() > 0 Тогда
		ЭлементРодитель.ВставитьПеред(ВставляемыйЭлемент, МассивДочернихЭлементовРодителя[0]);
	Иначе
		ЭлементРодитель.ДобавитьДочерний(ВставляемыйЭлемент);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////////
// Работа с настройками

// Возвращает настройку текущего пользователя
// Если настройка не задана и передав параметр ЗначениеЕслиНеЗадана,
// то возвращает его
//
Функция ПолучитьНастройкуТекущегоПользователя(КлючОбъекта,
	КлючНастроек = Неопределено,
	ЗначениеЕслиНеЗадана = Неопределено)
	
	Результат = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить(
		КлючОбъекта,
		КлючНастроек,
		ЗначениеЕслиНеЗадана);
	
	Возврат Результат;
	
КонецФункции

// Сохраняет настройку текущего пользователя
Процедура СохранитьНастройкуТекущегоПользователя(КлючОбъекта, Значение, КлючНастроек = Неопределено)
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить(
		КлючОбъекта,
		КлючНастроек,
		Значение);
		
КонецПроцедуры


// Возвращает сохраненную настройку текущего пользователя
Функция ПолучитьНастройку(КлючОбъекта,
		КлючНастроек = Неопределено,
		ЗначениеЕслиНеЗадана = Неопределено) Экспорт
	
	Возврат ПолучитьНастройкуТекущегоПользователя(КлючОбъекта, КлючНастроек, ЗначениеЕслиНеЗадана);
	
КонецФункции

// Сохраняет настройку
//
Процедура СохранитьНастройку(КлючОбъекта, Значение, КлючНастроек = Неопределено) Экспорт
	
	СохранитьНастройкуТекущегоПользователя(КлючОбъекта, Значение, КлючНастроек);
	
КонецПроцедуры

// Получает настройку пользователя работы с почтой 
//
Функция ПолучитьНастройкуРаботаСПочтой() Экспорт
	
	Настройка = ПолучитьНастройкуТекущегоПользователя("РаботаСПочтой", "НастройкиПользователя", Новый Структура);
	Если ТипЗнч(Настройка) <> Тип("Структура") Тогда
		Настройка = Новый Структура;
	КонецЕсли;
	Возврат Настройка;
	
КонецФункции

// Сохраняет настройку пользователя работы с почтой
//
Процедура СохранитьНастройкуРаботаСПочтой(Значение) Экспорт
	
	СохранитьНастройкуТекущегоПользователя("РаботаСПочтой", Значение, "НастройкиПользователя");
	
КонецПроцедуры 

////////////////////////////////////////////////////////////////////
// Сообщения SMS

// Проверяет статусы доставки для отправленных SMS. 
//
// Параметры
//  СообщениеSMS  - ДокументОбъект.СообщениеSMS - документ, для которого проверяется статус доставки SMS
//  Модифицированность  - Булево - признак модифицированности документа
//
Процедура ПроверитьСтатусыДоставкиSMS(СообщениеSMS, Модифицированность) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СообщениеSMSАдресаты.НомерСтроки,
	|	СообщениеSMSАдресаты.ИдентификаторСообщения,
	|	СообщениеSMSАдресаты.СостояниеСообщения
	|ИЗ
	|	Документ.СообщениеSMS.Адресаты КАК СообщениеSMSАдресаты
	|ГДЕ
	|	СообщениеSMSАдресаты.Ссылка = &СообщениеSMS
	|	И СообщениеSMSАдресаты.ИдентификаторСообщения <> """"
	|	И (СообщениеSMSАдресаты.СостояниеСообщения = ЗНАЧЕНИЕ(Перечисление.СостоянияСообщенияSMS.ОтправляетсяПровайдером)
	|			ИЛИ СообщениеSMSАдресаты.СостояниеСообщения = ЗНАЧЕНИЕ(Перечисление.СостоянияСообщенияSMS.ОтправленоПровайдером)
	|			ИЛИ СообщениеSMSАдресаты.СостояниеСообщения = ЗНАЧЕНИЕ(Перечисление.СостоянияСообщенияSMS.ОшибкаПолученияСтатусаУПровайдера))";
	
	Запрос.УстановитьПараметр("СообщениеSMS", СообщениеSMS.Ссылка);
	
	ЕстьИзменения = Ложь;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		СостояниеСообщения = СостояниеСообщенияSMSСогласноСтатусуДоставки(ОтправкаSMS.СтатусДоставки(Выборка.ИдентификаторСообщения));
		
		Если СостояниеСообщения <> Выборка.СостояниеСообщения Тогда
			СообщениеSMS.Адресаты[Выборка.НомерСтроки - 1].СостояниеСообщения = СостояниеСообщения;
			ЕстьИзменения = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьИзменения Тогда
		СообщениеSMS.Состояние = СостояниеДокументаСообщениеSMS(СообщениеSMS);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Определяет статус документа "Сообщение SMS" по состоянию входящих в него сообщений SMS
//
// Параметры
//  СообщениеSMS  - ДокументОбъект.СообщениеSMS - документ, для которого необходимо определить
//                                                статус
//
// Возвращаемое значение:
//   Перечисления.СостоянияДокументаСообщениеSMS   - рассчитанный статус документа
//
Функция СостояниеДокументаСообщениеSMS(СообщениеSMS)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Адресаты.СостояниеСообщения КАК Состояние
	|ПОМЕСТИТЬ Состояния
	|ИЗ
	|	&Адресаты КАК Адресаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Состояния.Состояние
	|ИЗ
	|	Состояния КАК Состояния";
	
	Запрос.УстановитьПараметр("Адресаты", СообщениеSMS.Адресаты.Выгрузить());
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Перечисления.СостоянияДокументаСообщениеSMS.Черновик;
	КонецЕсли;
	
	ТекущийСтатус = Неопределено;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
	
		Если Выборка.Состояние = Перечисления.СостоянияСообщенияSMS.Исходящее Тогда
			
			Возврат  Перечисления.СостоянияДокументаСообщениеSMS.Исходящее;
			
		ИначеЕсли Выборка.Состояние = Перечисления.СостоянияСообщенияSMS.Черновик Тогда
			
			Возврат Перечисления.СостоянияСообщенияSMS.Черновик;
			
		ИначеЕсли Выборка.Состояние = Перечисления.СостоянияСообщенияSMS.НеУдалосьПередатьПровайдеру Тогда
			
			Если ТекущийСтатус = Перечисления.СостоянияДокументаСообщениеSMS.Доставлено Тогда
				ТекущийСтатус = Перечисления.СостоянияДокументаСообщениеSMS.ЧастичноДоставлено;
			Иначе
				ТекущийСтатус = Перечисления.СостоянияДокументаСообщениеSMS.НеДоставлено;
			КонецЕсли;
			
		ИначеЕсли Выборка.Состояние = Перечисления.СостоянияСообщенияSMS.ОтправляетсяПровайдером 
			      ИЛИ Выборка.Состояние = Перечисления.СостоянияСообщенияSMS.ОтправленоПровайдером
			      ИЛИ Выборка.Состояние = Перечисления.СостоянияСообщенияSMS.ОшибкаПолученияСтатусаУПровайдера
			      ИЛИ Выборка.Состояние = Перечисления.СостоянияСообщенияSMS.НеОтправленоПровайдером Тогда
			Возврат Перечисления.СостоянияДокументаСообщениеSMS.Доставляется;
		ИначеЕсли Выборка.Состояние = Перечисления.СостоянияСообщенияSMS.Доставлено Тогда
			Если ТекущийСтатус = Перечисления.СостоянияДокументаСообщениеSMS.Доставлено
				 ИЛИ ТекущийСтатус = Неопределено Тогда
				ТекущийСтатус = Перечисления.СостоянияДокументаСообщениеSMS.Доставлено;
			Иначе
				ТекущийСтатус = Перечисления.СостоянияДокументаСообщениеSMS.ЧастичноДоставлено;
			КонецЕсли;
		ИначеЕсли Выборка.Состояние = Перечисления.СостоянияСообщенияSMS.НеДоставлено Тогда
			Если ТекущийСтатус = Перечисления.СостоянияДокументаСообщениеSMS.Доставлено Тогда
				ТекущийСтатус = Перечисления.СостоянияДокументаСообщениеSMS.ЧастичноДоставлено;
			Иначе
				ТекущийСтатус = Перечисления.СостоянияДокументаСообщениеSMS.НеДоставлено;
			КонецЕсли;
		ИначеЕсли Выборка.Состояние = Перечисления.СостоянияСообщенияSMS.НеОпознаноПровайдером Тогда
			Если ТекущийСтатус = Перечисления.СостоянияДокументаСообщениеSMS.Доставлено Тогда
				ТекущийСтатус = Перечисления.СостоянияДокументаСообщениеSMS.ЧастичноДоставлено;
			Иначе
				ТекущийСтатус = Перечисления.СостоянияДокументаСообщениеSMS.НеДоставлено;
			КонецЕсли;
		КонецЕсли;
	
	КонецЦикла;
	
	Возврат ТекущийСтатус;

КонецФункции

// Преобразует статусы доставки SMS подсистемы ОтправкаSMS в 
//   состояния сообщения SMS подсистемы Взаимодействия
//
// Параметры
//  СтатусДоставки  - Перечисления.СтатусыДоставкиSMS - значение, которое необходимо преобразовать
//
// Возвращаемое значение:
//   Перечисления.СостоянияСообщенияSMS - преобразованное значение
//
Функция СостояниеСообщенияSMSСогласноСтатусуДоставки(СтатусДоставки);
	
	Если СтатусДоставки = "НеОтправлялось" Тогда
		Возврат Перечисления.СостоянияСообщенияSMS.НеОтправленоПровайдером;
	ИначеЕсли СтатусДоставки = "Отправляется" Тогда
		Возврат Перечисления.СостоянияСообщенияSMS.ОтправляетсяПровайдером;
	ИначеЕсли СтатусДоставки = "Отправлено" Тогда
		Возврат Перечисления.СостоянияСообщенияSMS.ОтправленоПровайдером;
	ИначеЕсли СтатусДоставки = "НеДоставлено" Тогда
		Возврат Перечисления.СостоянияСообщенияSMS.НеДоставлено;
	ИначеЕсли СтатусДоставки = "Доставлено" Тогда
		Возврат Перечисления.СостоянияСообщенияSMS.Доставлено;
	ИначеЕсли СтатусДоставки = "НеОтправлялось" Тогда
		Возврат Перечисления.СостоянияСообщенияSMS.НеОпознаноПровайдером;
	ИначеЕсли СтатусДоставки = "Ошибка" Тогда
		Возврат Перечисления.СостоянияСообщенияSMS.ОшибкаПолученияСтатусаУПровайдера;
	Иначе
		Возврат Перечисления.СостоянияСообщенияSMS.ОшибкаПолученияСтатусаУПровайдера;
	КонецЕсли;
	
КонецФункции

// Выполняет отправку сообщений SMS по переданному документу Сообщение SMS
Функция ОтправкаSMSПоДокументу(Документ) Экспорт
	
	Если Не ОтправкаSMS.НастройкаОтправкиSMSВыполнена() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не выполнены настройки отправки SMS.'"),,"Объект");
		ВзаимодействияКлиентСервер.УстановитьСостояниеИсходящееДокументСообщениеSMS(Документ);
		Возврат 0;
	КонецЕсли;
	
	МассивНомеров     = Документ.Адресаты.Выгрузить(,"НомерДляОтправки").ВыгрузитьКолонку("НомерДляОтправки");
	РезультатОтправки = ОтправкаSMS.ОтправитьSMS(МассивНомеров, Документ.ТекстСообщения," " , Документ.ОтправлятьВТранслите);
	
	ОтразитьРезультатыОтправкиSMSВДокументе(Документ, РезультатОтправки);
		
	Если Не ПустаяСтрока(РезультатОтправки.ОписаниеОшибки) Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатОтправки.ОписаниеОшибки,,"Документ");
	КонецЕсли;

	Возврат РезультатОтправки.ОтправленныеСообщения.Количество();
	
КонецФункции

//Выполняет процедуру отправки сообщений SMS.
Процедура ОтправкаSMS() Экспорт

	УстановитьПривилегированныйРежим(Истина);
	
	ЗаписьЖурналаРегистрации(УправлениеЭлектроннойПочтой.СобытиеЖурналаРегистрации(), 
		УровеньЖурналаРегистрации.Информация, , ,
		НСтр("ru = 'Начата регламентная отправка сообщений SMS'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		
	Если Не ОтправкаSMS.НастройкаОтправкиSMSВыполнена() Тогда
			ЗаписьЖурналаРегистрации(УправлениеЭлектроннойПочтой.СобытиеЖурналаРегистрации(), 
			УровеньЖурналаРегистрации.Ошибка, , ,
			НСтр("ru = 'Не выполнены настройки отправки SMS.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		Возврат;
	КонецЕсли;
	
	Если Не ОтправкаSMS.НастройкаОтправкиSMSВыполнена() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'Не выполнены настройки отправки SMS.'"),,"Объект");
		Возврат;
	КонецЕсли;
	
	ТаблицаАдресатовСообщения = Новый ТаблицаЗначений;
	ТаблицаАдресатовСообщения.Колонки.Добавить("НомерСтроки");
	ТаблицаАдресатовСообщения.Колонки.Добавить("НомерДляОтправки");
	ТаблицаАдресатовСообщения.Колонки.Добавить("КакСвязаться");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СообщениеSMS.Ссылка КАК Ссылка,
	|	СообщениеSMS.ТекстСообщения,
	|	СообщениеSMS.ОтправлятьВТранслите,
	|	СообщениеSMSАдресаты.НомерСтроки,
	|	СообщениеSMSАдресаты.НомерДляОтправки,
	|	СообщениеSMSАдресаты.КакСвязаться
	|ИЗ
	|	Документ.СообщениеSMS.Адресаты КАК СообщениеSMSАдресаты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.СообщениеSMS КАК СообщениеSMS
	|		ПО СообщениеSMSАдресаты.Ссылка = СообщениеSMS.Ссылка
	|ГДЕ
	|	СообщениеSMSАдресаты.СостояниеСообщения = ЗНАЧЕНИЕ(Перечисление.СостоянияСообщенияSMS.Исходящее)
	|	И НЕ СообщениеSMS.ПометкаУдаления
	|	И СообщениеSMSАдресаты.ИдентификаторСообщения = """"
	|ИТОГИ ПО
	|	Ссылка";
	
	ВыборкаДокументы = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	Пока ВыборкаДокументы.Следующий() Цикл
		
		ТаблицаАдресатовСообщения.Очистить();
		
		ВыборкаАдресаты = ВыборкаДокументы.Выбрать();
		Пока ВыборкаАдресаты.Следующий() Цикл
			
			ТекстСообщения       = ВыборкаАдресаты.ТекстСообщения;
			ОтправлятьВТранслите = ВыборкаАдресаты.ОтправлятьВТранслите;
			
			НоваяСтрока = ТаблицаАдресатовСообщения.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаАдресаты);
			
		КонецЦикла;
		
		Если ТаблицаАдресатовСообщения.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		МассивНомеров = ТаблицаАдресатовСообщения.ВыгрузитьКолонку("НомерДляОтправки");
		РезультатОтправки = ОтправкаSMS.ОтправитьSMS(МассивНомеров, ТекстСообщения, "", ОтправлятьВТранслите);
		
		Если РезультатОтправки.ОтправленныеСообщения.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ДокументОбъект = ВыборкаДокументы.Ссылка.ПолучитьОбъект();
		ОтразитьРезультатыОтправкиSMSВДокументе(ДокументОбъект, РезультатОтправки);
		ДокументОбъект.Записать();
		
	КонецЦикла;
	
	ЗаписьЖурналаРегистрации(УправлениеЭлектроннойПочтой.СобытиеЖурналаРегистрации(), 
		УровеньЖурналаРегистрации.Информация, , ,
		НСтр("ru = 'Закончена регламентная отправка сообщений SMS'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));

КонецПроцедуры

//Выполняет процедуру обновления статусов доставки SMS.
Процедура ОбновлениеСтатусовДоставкиSMS() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЗаписьЖурналаРегистрации(УправлениеЭлектроннойПочтой.СобытиеЖурналаРегистрации(), 
		УровеньЖурналаРегистрации.Информация, , ,
		НСтр("ru = 'Начато регламентное обновление состояний сообщений SMS'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		
	Если Не ОтправкаSMS.НастройкаОтправкиSMSВыполнена() Тогда
			ЗаписьЖурналаРегистрации(УправлениеЭлектроннойПочтой.СобытиеЖурналаРегистрации(), 
			УровеньЖурналаРегистрации.Ошибка, , ,
			НСтр("ru = 'Не выполнены настройки отправки SMS.'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
		Возврат;
	КонецЕсли;
	
	ТаблицаИзменившихсяСтатусов = Новый ТаблицаЗначений;
	ТаблицаИзменившихсяСтатусов.Колонки.Добавить("НомерСтроки");
	ТаблицаИзменившихсяСтатусов.Колонки.Добавить("СостояниеСообщения");
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	СообщениеSMSАдресаты.Ссылка КАК Ссылка,
	|	СообщениеSMSАдресаты.НомерСтроки,
	|	СообщениеSMSАдресаты.ИдентификаторСообщения,
	|	СообщениеSMSАдресаты.СостояниеСообщения
	|ИЗ
	|	Документ.СообщениеSMS.Адресаты КАК СообщениеSMSАдресаты
	|ГДЕ
	|	СообщениеSMSАдресаты.ИдентификаторСообщения <> """"
	|	И (СообщениеSMSАдресаты.СостояниеСообщения = ЗНАЧЕНИЕ(Перечисление.СостоянияСообщенияSMS.ОтправляетсяПровайдером)
	|			ИЛИ СообщениеSMSАдресаты.СостояниеСообщения = ЗНАЧЕНИЕ(Перечисление.СостоянияСообщенияSMS.ОтправленоПровайдером)
	|			ИЛИ СообщениеSMSАдресаты.СостояниеСообщения = ЗНАЧЕНИЕ(Перечисление.СостоянияСообщенияSMS.ОшибкаПолученияСтатусаУПровайдера))
	|	И НЕ СообщениеSMSАдресаты.Ссылка.ПометкаУдаления
	|ИТОГИ ПО
	|	Ссылка";
	
	ВыборкаДокументы = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);

	Пока ВыборкаДокументы.Следующий() Цикл
		
		ТаблицаИзменившихсяСтатусов.Очистить();
		
		ВыборкаИдентификаторы = ВыборкаДокументы.Выбрать();
		Пока ВыборкаИдентификаторы.Следующий() Цикл
			
			СостояниеСообщения = СостояниеСообщенияSMSСогласноСтатусуДоставки(ОтправкаSMS.СтатусДоставки(ВыборкаИдентификаторы.ИдентификаторСообщения));
			
			Если СостояниеСообщения <> ВыборкаИдентификаторы.СостояниеСообщения Тогда
				НоваяСтрока = ТаблицаИзменившихсяСтатусов.Добавить();
				НоваяСтрока.НомерСтроки        = ВыборкаИдентификаторы.НомерСтроки;
				НоваяСтрока.СостояниеСообщения = СостояниеСообщения;
			КонецЕсли;
			
			Если ТаблицаИзменившихсяСтатусов.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Для Каждого ИзменившийсяСтатус ИЗ ТаблицаИзменившихсяСтатусов Цикл
				ДокументОбъект = ВыборкаДокументы.Ссылка.ПолучитьОбъект();
				ДокументОбъект.Адресаты[ИзменившийсяСтатус.НомерСтроки - 1].СостояниеСообщения = ИзменившийсяСтатус.СостояниеСообщения;
			КонецЦикла;
			
			ДокументОбъект.Состояние = СостояниеДокументаСообщениеSMS(ДокументОбъект);
			
			ДокументОбъект.Записать();
			
		КонецЦикла;
		
	КонецЦикла;
	
	ЗаписьЖурналаРегистрации(УправлениеЭлектроннойПочтой.СобытиеЖурналаРегистрации(), 
		УровеньЖурналаРегистрации.Информация, , ,
		НСтр("ru = 'Закончено регламентное обновление состояний сообщений SMS'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	
КонецПроцедуры

// Устанавливает состояние документа "Сообщение SMS" в зависимости от состояний отдельных сообщений различным контактам.
//
// Параметры
//  ДокументОбъект     - ДокументОбъект.СообщениеSMS - документ, для которого определяется состояние.
//  РезультатОтправки  - Структура - результат отправки сообщения SMS
//
Процедура ОтразитьРезультатыОтправкиSMSВДокументе(ДокументОбъект, РезультатОтправки) Экспорт
	
	Для Каждого ОтправленноеСообщение Из РезультатОтправки.ОтправленныеСообщения Цикл
		Для Каждого НайденнаяСтрока Из ДокументОбъект.Адресаты.НайтиСтроки(Новый Структура("НомерДляОтправки",ОтправленноеСообщение.НомерПолучателя)) Цикл
			НайденнаяСтрока.ИдентификаторСообщения = ОтправленноеСообщение.ИдентификаторСообщения;
			НайденнаяСтрока.СостояниеСообщения     = Перечисления.СостоянияСообщенияSMS.ОтправляетсяПровайдером;
		КонецЦикла;
	КонецЦикла;
	
	ДокументОбъект.Состояние = СостояниеДокументаСообщениеSMS(ДокументОбъект);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////
// Работа с папками электронных писем

// Проверяет, является ли текущий пользователь ответственным за ведение папок для учетной записи
//
// Параметры
//  УчетнаяЗапись  - СправочникСсылка.УчетныеЗаписиЭлектроннойПочты - учетная запись для которой выполняется проверка
//
// Возвращаемое значение:
//   Булево   - Истина, если является, Ложь в обратном случае.
//
Функция ПользовательЯвляетсяОтветственнымЗаВедениеПапок(УчетнаяЗапись) Экспорт
	
	Если Пользователи.ЭтоПолноправныйПользователь() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НастройкиУчетныхЗаписейЭлектроннойПочты.ОтветственныйЗаВедениеПапок
	|ИЗ
	|	РегистрСведений.НастройкиУчетныхЗаписейЭлектроннойПочты КАК НастройкиУчетныхЗаписейЭлектроннойПочты
	|ГДЕ
	|	НастройкиУчетныхЗаписейЭлектроннойПочты.УчетнаяЗаписьЭлектроннойПочты = &УчетнаяЗаписьЭлектроннойПочты
	|	И НастройкиУчетныхЗаписейЭлектроннойПочты.ОтветственныйЗаВедениеПапок = &ОтветственныйЗаВедениеПапок";
	
	Запрос.УстановитьПараметр("УчетнаяЗаписьЭлектроннойПочты", УчетнаяЗапись);
	Запрос.УстановитьПараметр("ОтветственныйЗаВедениеПапок", Пользователи.АвторизованныйПользователь());
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
КонецФункции 

// Устанавливает родителя у папки электронных писем
//
// Параметры
//  Папка  - СправочникСсылка.ПапкиЭлектронныхПисем - папка для которой устанавливается родитель
//  НовыйРодитель  - СправочникСсылка.ПапкиЭлектронныхПисем - папка, которая будет установлена в качестве родителя
//  НеЗаписыватьПапку  - Булево - признак который определяет необходимость записывать папку в данной процедуре
//
Процедура УстановитьРодителяУПапки(Папка, НовыйРодитель, НеЗаписыватьПапку = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПапкиЭлектронныхПисем.Ссылка
	|ИЗ
	|	Справочник.ПапкиЭлектронныхПисем КАК ПапкиЭлектронныхПисем
	|ГДЕ
	|	ПапкиЭлектронныхПисем.Ссылка В ИЕРАРХИИ(&ПеремещаемаяПапка)
	|	И ПапкиЭлектронныхПисем.Ссылка = &НовыйРодитель
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПапкиЭлектронныхПисем.Ссылка) КАК Ссылка
	|ИЗ
	|	Справочник.ПапкиЭлектронныхПисем КАК ПапкиЭлектронныхПисем
	|ГДЕ
	|	ПапкиЭлектронныхПисем.Ссылка В ИЕРАРХИИ
	|			(ВЫБРАТЬ
	|				ПапкиЭлектронныхПисем.Ссылка
	|			ИЗ
	|				Справочник.ПапкиЭлектронныхПисем КАК ПапкиЭлектронныхПисем
	|			ГДЕ
	|				ПапкиЭлектронныхПисем.ПредопределеннаяПапка
	|				И ПапкиЭлектронныхПисем.Наименование = &Удаленные)
	|	И ПапкиЭлектронныхПисем.Ссылка = &НовыйРодитель";
	
	Запрос.УстановитьПараметр("Удаленные", НСтр("ru = 'Удаленные'"));
	Запрос.УстановитьПараметр("ПеремещаемаяПапка", Папка);
	Запрос.УстановитьПараметр("НовыйРодитель", НовыйРодитель);
	
	Результат = Запрос.ВыполнитьПакет();
	Если Не Результат[0].Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат[1].Пустой() Тогда
		ПеремещениеВПапкуУдаленные = Ложь;
	Иначе
		ПеремещениеВПапкуУдаленные = Истина;
	КонецЕсли;
	
	ПапкаОбъект          = Папка.ПолучитьОбъект();
	ПапкаОбъект.ДополнительныеСвойства.Вставить("ОбработаноИзменениеРодителя", Истина);
	
	Если Не НеЗаписыватьПапку Тогда
		ПапкаОбъект.Родитель = НовыйРодитель;
		ПапкаОбъект.Записать();
	КонецЕсли;
	
	ПеремещениеВПапкуУдаленные = Ложь;
	
	Если НЕ НовыйРодитель.Пустая()Тогда
		ЗначенияРеквизитовПапки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(
			НовыйРодитель,"ПредопределеннаяПапка,Наименование");
			Если ЗначенияРеквизитовПапки <> Неопределено И 
				ЗначенияРеквизитовПапки.ПредопределеннаяПапка И 
				ЗначенияРеквизитовПапки.Наименование = НСтр("ru = 'Удаленные'") Тогда
				
				ПеремещениеВПапкуУдаленные = Истина;
				
		КонецЕсли;
	КонецЕсли;
	
	Если ПеремещениеВПапкуУдаленные И НЕ ПапкаОбъект.ПометкаУдаления Тогда
		ПапкаОбъект.УстановитьПометкуУдаления(Истина);
		УстановитьПометкуУдаленияДляПисемПапки(Папка);
	ИначеЕсли ПапкаОбъект.ПометкаУдаления И НЕ ПеремещениеВПапкуУдаленные Тогда
		ПапкаОбъект.УстановитьПометкуУдаления(Ложь);
		УстановитьПометкуУдаленияДляПисемПапки(Папка);
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает пометку удаления для писем папки
//
// Параметры
//  Папка  - СправочникСсылка.ПапкиЭлектронныхПисем - папка, письма которой будут помечены на удаление
//
Процедура УстановитьПометкуУдаленияДляПисемПапки(Папка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЭлектронноеПисьмоВходящее.Ссылка,
	|	ПредметыПапкиВзаимодействий.ПапкаЭлектронногоПисьма.ПометкаУдаления КАК ПометкаУдаления
	|ИЗ
	|	Документ.ЭлектронноеПисьмоВходящее КАК ЭлектронноеПисьмоВходящее
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
	|		ПО (ПредметыПапкиВзаимодействий.Взаимодействие = ЭлектронноеПисьмоВходящее.Ссылка)
	|ГДЕ
	|	ПредметыПапкиВзаимодействий.ПапкаЭлектронногоПисьма В ИЕРАРХИИ(&Папка)
	|	И ПредметыПапкиВзаимодействий.ПапкаЭлектронногоПисьма.ПометкаУдаления <> ЭлектронноеПисьмоВходящее.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЭлектронноеПисьмоИсходящее.Ссылка,
	|	ПредметыПапкиВзаимодействий.ПапкаЭлектронногоПисьма.ПометкаУдаления
	|ИЗ
	|	Документ.ЭлектронноеПисьмоИсходящее КАК ЭлектронноеПисьмоИсходящее
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
	|		ПО (ПредметыПапкиВзаимодействий.Взаимодействие = ЭлектронноеПисьмоИсходящее.Ссылка)
	|ГДЕ
	|	ПредметыПапкиВзаимодействий.ПапкаЭлектронногоПисьма В ИЕРАРХИИ(&Папка)
	|	И ЭлектронноеПисьмоИсходящее.ПометкаУдаления <> ПредметыПапкиВзаимодействий.ПапкаЭлектронногоПисьма.ПометкаУдаления";
	
	Запрос.УстановитьПараметр("Папка",Папка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ПисьмоОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ПисьмоОбъект.ДополнительныеСвойства.Вставить("ОбработаноИзменениеПометкиУдаления",Истина);
		ПисьмоОбъект.УстановитьПометкуУдаления(Выборка.ПометкаУдаления);
		
	КонецЦикла;

КонецПроцедуры

// Устанавливает пометку удаления для писем папки
//
// Параметры
//  МассивПисем  - Массив - массив писем для которых будет установлена папка
//  Папка  - СправочникСсылка.ПапкиЭлектронныхПисем - папка, письма которой будут помечены на удаление
//
Процедура УстановитьПапкуДляМассиваПисем(МассивПисем,Папка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЭлектронноеПисьмоВходящее.Ссылка,
	|	ЭлектронноеПисьмоВходящее.ПометкаУдаления
	|ИЗ
	|	Документ.ЭлектронноеПисьмоВходящее КАК ЭлектронноеПисьмоВходящее
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
	|		ПО ЭлектронноеПисьмоВходящее.Ссылка = ПредметыПапкиВзаимодействий.Взаимодействие
	|ГДЕ
	|	ЭлектронноеПисьмоВходящее.Ссылка В(&МассивПисем)
	|	И ПредметыПапкиВзаимодействий.ПапкаЭлектронногоПисьма <> &Папка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЭлектронноеПисьмоИсходящее.Ссылка,
	|	ЭлектронноеПисьмоИсходящее.ПометкаУдаления
	|ИЗ
	|	Документ.ЭлектронноеПисьмоИсходящее КАК ЭлектронноеПисьмоИсходящее
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
	|		ПО (ПредметыПапкиВзаимодействий.Взаимодействие = ЭлектронноеПисьмоИсходящее.Ссылка)
	|ГДЕ
	|	ЭлектронноеПисьмоИсходящее.Ссылка В(&МассивПисем)
	|	И ПредметыПапкиВзаимодействий.ПапкаЭлектронногоПисьма <> &Папка";
	
	Запрос.УстановитьПараметр("МассивПисем",МассивПисем);
	Запрос.УстановитьПараметр("Папка",Папка);
	
	ЗначенияРеквизитовПапки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Папка, "ПредопределеннаяПапка,Наименование");
	Если ЗначенияРеквизитовПапки <> Неопределено 
		И ЗначенияРеквизитовПапки.ПредопределеннаяПапка 
		И ЗначенияРеквизитовПапки.Наименование = НСтр("ru = 'Удаленные'") Тогда
		
		ПеремещениеВПапкуУдаленные = Истина;
		
	Иначе
		
		ПеремещениеВПапкуУдаленные = Ложь;
		
	КонецЕсли;
		
	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
		ВзаимодействияВызовСервера.УстановитьПапкуЭлектронногоПисьма(Выборка.Ссылка, Папка);
		Если ПеремещениеВПапкуУдаленные И НЕ Выборка.ПометкаУдаления Тогда
			ПисьмоОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ПисьмоОбъект.ДополнительныеСвойства.Вставить("ОбработаноИзменениеПометкиУдаления", Истина);
			ПисьмоОбъект.УстановитьПометкуУдаления(Истина);
		ИначеЕсли НЕ ПеремещениеВПапкуУдаленные И Выборка.ПометкаУдаления Тогда
			ПисьмоОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ПисьмоОбъект.ДополнительныеСвойства.Вставить("ОбработаноИзменениеПометкиУдаления", Истина);
			ПисьмоОбъект.УстановитьПометкуУдаления(Ложь);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Устанавливает пометку удаления для папки и входящих в нее писем
//
// Параметры
//  Папка  - СправочникСсылка.ПапкиЭлектронныхПисем - папка, письма которой будут помечены на удаление
//  ОписаниеОшибки  - Строка - описание возникшей ошибки
//
Процедура ВыполнитьУдалениеПапкиЭлектронныхПисем(Папка, ОписаниеОшибки = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ПапкиЭлектронныхПисем.Ссылка
	|ИЗ
	|	Справочник.ПапкиЭлектронныхПисем КАК ПапкиЭлектронныхПисем
	|ГДЕ
	|	ПапкиЭлектронныхПисем.ПредопределеннаяПапка
	|	И ПапкиЭлектронныхПисем.Наименование = &Удаленные
	|	И ПапкиЭлектронныхПисем.Владелец В
	|			(ВЫБРАТЬ
	|				ПапкиЭлектронныхПисем.Владелец
	|			ИЗ
	|				Справочник.ПапкиЭлектронныхПисем КАК ПапкиЭлектронныхПисем
	|			ГДЕ
	|				ПапкиЭлектронныхПисем.Ссылка = &Папка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПапкиЭлектронныхПисем.Ссылка
	|ИЗ
	|	Справочник.ПапкиЭлектронныхПисем КАК ПапкиЭлектронныхПисем
	|ГДЕ
	|	ПапкиЭлектронныхПисем.Ссылка В ИЕРАРХИИ(&Папка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЭлектронноеПисьмоВходящее.Ссылка,
	|	ЭлектронноеПисьмоВходящее.ПометкаУдаления КАК ПометкаУдаления
	|ИЗ
	|	РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронноеПисьмоВходящее КАК ЭлектронноеПисьмоВходящее
	|		ПО ПредметыПапкиВзаимодействий.Взаимодействие = ЭлектронноеПисьмоВходящее.Ссылка
	|ГДЕ
	|	ПредметыПапкиВзаимодействий.ПапкаЭлектронногоПисьма В ИЕРАРХИИ(&Папка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЭлектронноеПисьмоИсходящее.Ссылка,
	|	ЭлектронноеПисьмоИсходящее.ПометкаУдаления
	|ИЗ
	|	РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ЭлектронноеПисьмоИсходящее КАК ЭлектронноеПисьмоИсходящее
	|		ПО ПредметыПапкиВзаимодействий.Взаимодействие = ЭлектронноеПисьмоИсходящее.Ссылка
	|ГДЕ
	|	ПредметыПапкиВзаимодействий.ПапкаЭлектронногоПисьма В ИЕРАРХИИ(&Папка)";
	
	Запрос.УстановитьПараметр("Папка", Папка);
	Запрос.УстановитьПараметр("Удаленные", НСтр("ru = 'Удаленные'"));
	
	МассивРезультатовЗапроса = Запрос.ВыполнитьПакет();
	
	Если МассивРезультатовЗапроса[0].Пустой() Или МассивРезультатовЗапроса[2].Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	ВыборкаПапкаУдаленные = МассивРезультатовЗапроса[0].Выбрать();
	ВыборкаПапкаУдаленные.Следующий();
	ПапкаУдаленные = ВыборкаПапкаУдаленные.Ссылка;
	
	ВыборкаПисьма = МассивРезультатовЗапроса[2].Выбрать();
	ВыборкаПапки  = МассивРезультатовЗапроса[1].Выбрать();
	
	НачатьТранзакцию();
	
	Попытка
		
		Пока ВыборкаПисьма.Следующий() Цикл
			
			ВзаимодействияВызовСервера.УстановитьПапкуЭлектронногоПисьма(ВыборкаПисьма.Ссылка, ПапкаУдаленные);
			
			Если НЕ ВыборкаПисьма.ПометкаУдаления Тогда
				ПисьмоОбъект = ВыборкаПисьма.Ссылка.ПолучитьОбъект();
				ПисьмоОбъект.УстановитьПометкуУдаления(Истина);
			КонецЕсли;
			
		КонецЦикла;
		
		Пока ВыборкаПапки.Следующий() Цикл
			
			ПапкаОбъект =  ВыборкаПапки.Ссылка.ПолучитьОбъект();
			ПапкаОбъект.УстановитьПометкуУдаления(Истина);
			
		КонецЦикла;
		
	Исключение
		
		ОтменитьТранзакцию();
		
		ОписаниеОшибки = НСтр("ru = 'При удалении папки произошла ошибка.
		                      |Удаление папки не выполнено.
		                      |Дополнительное описание:
		                      |%ДополнительноеОписание%'");
		ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%ДополнительноеОписание%", ИнформацияОбОшибке().Описание);

		Возврат;
		
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

// Определяет папку для электронного письма
//
// Параметры
//  Письмо  - ДокументСсылка.ЭлектронноеПисьмоВходящее,
//            ДокументСсылка.ЭлектронноеПисьмоИсходящее - письмо для которого определяется папка
//
// Возвращаемое значение:
//   СправочникСсылка.ПапкиЭлектронныхПисем - папка, определенная для письма
//
Функция ОпределитьПапкуДляПисьма(Письмо) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Папка = ОпределитьПапкуДляПисьмаПоУмолчанию(Письмо ,Истина);
	Если ЗначениеЗаполнено(Папка) И (НЕ Папка.ПредопределеннаяПапка) Тогда
		Возврат Папка;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ПравилаОбработкиЭлектроннойПочты.КомпоновщикНастроек,
	|	ПравилаОбработкиЭлектроннойПочты.ПомещатьВПапку
	|ИЗ
	|	Справочник.ПравилаОбработкиЭлектроннойПочты КАК ПравилаОбработкиЭлектроннойПочты
	|ГДЕ
	|	ПравилаОбработкиЭлектроннойПочты.Владелец В
	|			(ВЫБРАТЬ
	|				Взаимодействия.УчетнаяЗапись
	|			ИЗ
	|				ЖурналДокументов.Взаимодействия КАК Взаимодействия
	|			ГДЕ
	|				Взаимодействия.Ссылка = &Письмо)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПравилаОбработкиЭлектроннойПочты.РеквизитДопУпорядочивания";
	
	Запрос.УстановитьПараметр("Письмо", Письмо);
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Пока Выборка.Следующий() Цикл
			
			СхемаПравилаОбработки = 
				Справочники.ПравилаОбработкиЭлектроннойПочты.ПолучитьМакет("СхемаПравилаОбработкиЭлектроннойПочты");
			
			КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
			КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
			КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаПравилаОбработки));
			КомпоновщикНастроек.ЗагрузитьНастройки(Выборка.КомпоновщикНастроек.Получить());
			КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
				КомпоновщикНастроек.Настройки.Отбор,"Ссылка",Письмо,ВидСравненияКомпоновкиДанных.Равно);
			
			МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(
				СхемаПравилаОбработки, КомпоновщикНастроек.ПолучитьНастройки(),,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
			
			Если МакетКомпоновкиДанных.ЗначенияПараметров.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ТекстЗапроса = МакетКомпоновкиДанных.НаборыДанных.ОсновнойНаборДанных.Запрос;
			ЗапросПравило = Новый Запрос(ТекстЗапроса);
			Для каждого Параметр Из МакетКомпоновкиДанных.ЗначенияПараметров Цикл
				ЗапросПравило.Параметры.Вставить(Параметр.Имя, Параметр.Значение);
			КонецЦикла;
			
			Результат = ЗапросПравило.Выполнить();
			Если Не Результат.Пустой() Тогда
				Возврат Выборка.ПомещатьВПапку;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	Возврат Папка;
	
КонецФункции

// Определяет папку для электронного письма по умолчанию
//
// Параметры
//  Письмо  - ДокументСсылка.ЭлектронноеПисьмоВходящее,
//            ДокументСсылка.ЭлектронноеПисьмоИсходящее - письмо для которого определяется папка
//  ВключаяПроверкиПисьмаОснования  - Булево - признак необходимости проверки на определение папки в папку письма основания
//
// Возвращаемое значение:
//   СправочникСсылка.ПапкиЭлектронныхПисем - папка, определенная для письма
//
Функция ОпределитьПапкуДляПисьмаПоУмолчанию(Письмо, ВключаяПроверкиПисьмаОснования = ЛОЖЬ) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	
	Если ВключаяПроверкиПисьмаОснования Тогда
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ПапкиЭлектронныхПисем.Ссылка КАК Папка,
		|	Взаимодействия.Ссылка КАК Письмо
		|ПОМЕСТИТЬ ПапкиПоОснованию
		|ИЗ
		|	ЖурналДокументов.Взаимодействия КАК Взаимодействия
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПапкиЭлектронныхПисем КАК ПапкиЭлектронныхПисем
		|			ПО ПредметыПапкиВзаимодействий.ПапкаЭлектронногоПисьма = ПапкиЭлектронныхПисем.Ссылка
		|				И ((НЕ ПапкиЭлектронныхПисем.ПредопределеннаяПапка))
		|		ПО (ПредметыПапкиВзаимодействий.Взаимодействие = Взаимодействия.ВзаимодействиеОснование)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиУчетныхЗаписейЭлектроннойПочты КАК НастройкиУчетныхЗаписейЭлектроннойПочты
		|			ПО УчетныеЗаписиЭлектроннойПочты.Ссылка = НастройкиУчетныхЗаписейЭлектроннойПочты.УчетнаяЗаписьЭлектроннойПочты
		|		ПО Взаимодействия.УчетнаяЗапись = УчетныеЗаписиЭлектроннойПочты.Ссылка
		|ГДЕ
		|	Взаимодействия.Ссылка = &Письмо
		|	И (Взаимодействия.ВзаимодействиеОснование ССЫЛКА Документ.ЭлектронноеПисьмоИсходящее
		|			ИЛИ Взаимодействия.ВзаимодействиеОснование ССЫЛКА Документ.ЭлектронноеПисьмоВходящее)
		|	И ПапкиЭлектронныхПисем.Владелец = Взаимодействия.УчетнаяЗапись
		|	И НастройкиУчетныхЗаписейЭлектроннойПочты.ПомещатьПисьмоВПапкуПисьмаОснования
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ПапкиЭлектронныхПисем.Ссылка,
		|	ПапкиЭлектронныхПисем.Наименование
		|ПОМЕСТИТЬ ПапкиПисем
		|ИЗ
		|	Справочник.ПапкиЭлектронныхПисем КАК ПапкиЭлектронныхПисем
		|ГДЕ
		|	ПапкиЭлектронныхПисем.ПредопределеннаяПапка
		|	И ПапкиЭлектронныхПисем.Владелец В
		|			(ВЫБРАТЬ
		|				Взаимодействия.УчетнаяЗапись
		|			ИЗ
		|				ЖурналДокументов.Взаимодействия КАК Взаимодействия
		|			ГДЕ
		|				Взаимодействия.Ссылка = &Письмо)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Взаимодействия.Ссылка,
		|	ВЫБОР
		|		КОГДА Взаимодействия.ПометкаУдаления
		|			ТОГДА &Удаленные
		|		КОГДА Взаимодействия.Тип = ТИП(Документ.ЭлектронноеПисьмоВходящее)
		|			ТОГДА &Входящие
		|		КОГДА Взаимодействия.Тип = ТИП(Документ.ЭлектронноеПисьмоИсходящее)
		|			ТОГДА ВЫБОР
		|					КОГДА Взаимодействия.СтатусИсходящегоПисьма = ЗНАЧЕНИЕ(Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Черновик)
		|						ТОГДА &Черновики
		|					КОГДА Взаимодействия.СтатусИсходящегоПисьма = ЗНАЧЕНИЕ(Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Отправлено)
		|						ТОГДА &Отправленные
		|					КОГДА Взаимодействия.СтатусИсходящегоПисьма = ЗНАЧЕНИЕ(Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Исходящее)
		|						ТОГДА &Исходящие
		|				КОНЕЦ
		|		ИНАЧЕ &НежелательнаяПочта
		|	КОНЕЦ КАК НаименованиеПапки
		|ПОМЕСТИТЬ НаименованиеПапкиНазначения
		|ИЗ
		|	ЖурналДокументов.Взаимодействия КАК Взаимодействия
		|ГДЕ
		|	Взаимодействия.Ссылка = &Письмо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НаименованиеПапкиНазначения.Ссылка КАК Письмо,
		|	ВЫБОР
		|		КОГДА ПапкиПоОснованию.Папка ЕСТЬ NULL 
		|			ТОГДА ПапкиПисем.Ссылка
		|		ИНАЧЕ ПапкиПоОснованию.Папка
		|	КОНЕЦ КАК Папка
		|ИЗ
		|	НаименованиеПапкиНазначения КАК НаименованиеПапкиНазначения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПапкиПисем КАК ПапкиПисем
		|		ПО НаименованиеПапкиНазначения.НаименованиеПапки = ПапкиПисем.Наименование
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПапкиПоОснованию КАК ПапкиПоОснованию
		|		ПО НаименованиеПапкиНазначения.Ссылка = ПапкиПоОснованию.Письмо";
		
	Иначе
		
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ПапкиЭлектронныхПисем.Ссылка,
		|	ПапкиЭлектронныхПисем.Наименование
		|ПОМЕСТИТЬ ПапкиПисем
		|ИЗ
		|	Справочник.ПапкиЭлектронныхПисем КАК ПапкиЭлектронныхПисем
		|ГДЕ
		|	ПапкиЭлектронныхПисем.ПредопределеннаяПапка
		|	И ПапкиЭлектронныхПисем.Владелец В
		|			(ВЫБРАТЬ
		|				Взаимодействия.УчетнаяЗапись
		|			ИЗ
		|				ЖурналДокументов.Взаимодействия КАК Взаимодействия
		|			ГДЕ
		|				Взаимодействия.Ссылка = &Письмо)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Взаимодействия.Ссылка,
		|	ВЫБОР
		|		КОГДА Взаимодействия.ПометкаУдаления
		|			ТОГДА &Удаленные
		|		КОГДА Взаимодействия.Тип = ТИП(Документ.ЭлектронноеПисьмоВходящее)
		|			ТОГДА &Входящие
		|		КОГДА Взаимодействия.Тип = ТИП(Документ.ЭлектронноеПисьмоИсходящее)
		|			ТОГДА ВЫБОР
		|					КОГДА Взаимодействия.СтатусИсходящегоПисьма = ЗНАЧЕНИЕ(Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Черновик)
		|						ТОГДА &Черновики
		|					КОГДА Взаимодействия.СтатусИсходящегоПисьма = ЗНАЧЕНИЕ(Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Отправлено)
		|						ТОГДА &Отправленные
		|					КОГДА Взаимодействия.СтатусИсходящегоПисьма = ЗНАЧЕНИЕ(Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Исходящее)
		|						ТОГДА &Исходящие
		|				КОНЕЦ
		|		ИНАЧЕ &НежелательнаяПочта
		|	КОНЕЦ КАК НаименованиеПапки
		|ПОМЕСТИТЬ НаименованиеПапкиНазначения
		|ИЗ
		|	ЖурналДокументов.Взаимодействия КАК Взаимодействия
		|ГДЕ
		|	Взаимодействия.Ссылка = &Письмо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НаименованиеПапкиНазначения.Ссылка КАК Письмо,
		|	ПапкиПисем.Ссылка КАК Папка
		|ИЗ
		|	НаименованиеПапкиНазначения КАК НаименованиеПапкиНазначения
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПапкиПисем КАК ПапкиПисем
		|		ПО НаименованиеПапкиНазначения.НаименованиеПапки = ПапкиПисем.Наименование";
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Письмо",Письмо);
	УстановитьПараметрыЗапросаИменаПредопределенныеПапки(Запрос);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		Возврат Выборка.Папка;
		
	КонецЕсли;
	
КонецФункции

// Устанавливает имена предопределенных папок в качестве параметров запроса
//
// Параметры
//  Запрос  - Запрос - для которого будут установлены параметры
//
Процедура УстановитьПараметрыЗапросаИменаПредопределенныеПапки(Запрос) Экспорт

	Запрос.УстановитьПараметр("Удаленные", НСтр("ru = 'Удаленные'"));
	Запрос.УстановитьПараметр("Входящие", НСтр("ru = 'Входящие'"));
	Запрос.УстановитьПараметр("Черновики", НСтр("ru = 'Черновики'"));
	Запрос.УстановитьПараметр("Отправленные", НСтр("ru = 'Отправленные'"));
	Запрос.УстановитьПараметр("Исходящие", НСтр("ru = 'Исходящие'"));
	Запрос.УстановитьПараметр("НежелательнаяПочта", НСтр("ru = 'Нежелательная почта'"));

КонецПроцедуры

// Устанавливает папки для массива писем
//
// Параметры
//  МассивПисем  - Массив - массив писем для которого будут установлены папки
//
Процедура УстановитьПапкиДляМассиваПисем(МассивПисем) Экспорт
	
	ТаблицаПапок = ОпределитьПапкиДляМассиваПисем(МассивПисем);
	Для каждого СтрокаТаблицы Из ТаблицаПапок Цикл
		ВзаимодействияВызовСервера.УстановитьПапкуЭлектронногоПисьма(СтрокаТаблицы.Письмо,СтрокаТаблицы.Папка);
	КонецЦикла;
	
КонецПроцедуры

// Определяет папки для массива писем
//
// Параметры
//  МассивПисем  - Массив - массив писем для которого будут определены папки
//
// Возвращаемое значение:
//   ТаблицаЗначений - содержит соответствие писем и определенных для них папок
//
Функция ОпределитьПапкиДляМассиваПисем(МассивПисем)
	
	ТаблицаСоответствий = Новый ТаблицаЗначений;
	ТаблицаСоответствий.Колонки.Добавить("Папка");
	ТаблицаСоответствий.Колонки.Добавить("Письмо");
	
	Если МассивПисем.Количество() = 0 Тогда
		Возврат ТаблицаСоответствий;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ПравилаОбработкиЭлектроннойПочты.Владелец КАК УчетнаяЗапись,
	|	ПравилаОбработкиЭлектроннойПочты.КомпоновщикНастроек,
	|	ПравилаОбработкиЭлектроннойПочты.ПомещатьВПапку
	|ИЗ
	|	Справочник.ПравилаОбработкиЭлектроннойПочты КАК ПравилаОбработкиЭлектроннойПочты
	|ГДЕ
	|	ПравилаОбработкиЭлектроннойПочты.Владелец В
	|			(ВЫБРАТЬ
	|				Взаимодействия.УчетнаяЗапись
	|			ИЗ
	|				ЖурналДокументов.Взаимодействия КАК Взаимодействия
	|			ГДЕ
	|				Взаимодействия.Ссылка В (&МассивПисем))
	|	И (НЕ ПравилаОбработкиЭлектроннойПочты.ПометкаУдаления)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПравилаОбработкиЭлектроннойПочты.РеквизитДопУпорядочивания
	|ИТОГИ ПО
	|	УчетнаяЗапись";
	
	Запрос.УстановитьПараметр("МассивПисем", МассивПисем);
	
	Результат = Запрос.Выполнить();
	Если Не Результат.Пустой() Тогда
		ВыборкаУчетнаяЗапись = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаУчетнаяЗапись.Следующий() Цикл
			Выборка = ВыборкаУчетнаяЗапись.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				СхемаПравилаОбработки = 
					Справочники.ПравилаОбработкиЭлектроннойПочты.ПолучитьМакет("СхемаПравилаОбработкиЭлектроннойПочты");
				
				КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
				КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
				КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаПравилаОбработки));
				КомпоновщикНастроек.ЗагрузитьНастройки(Выборка.КомпоновщикНастроек.Получить());
				КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
					КомпоновщикНастроек.Настройки.Отбор, "Ссылка", МассивПисем, ВидСравненияКомпоновкиДанных.ВСписке);
				ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(
					КомпоновщикНастроек.Настройки.Отбор,
					"Ссылка.УчетнаяЗапись",
					ВыборкаУчетнаяЗапись.УчетнаяЗапись,
					ВидСравненияКомпоновкиДанных.Равно);
				
				МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(
					СхемаПравилаОбработки,
					КомпоновщикНастроек.ПолучитьНастройки(),
					,,
					Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
				
				ТекстЗапроса = МакетКомпоновкиДанных.НаборыДанных.ОсновнойНаборДанных.Запрос;
				ЗапросПравило = Новый Запрос(ТекстЗапроса);
				Для каждого Параметр Из МакетКомпоновкиДанных.ЗначенияПараметров Цикл
					ЗапросПравило.Параметры.Вставить(Параметр.Имя, Параметр.Значение);
				КонецЦикла;
				
				РезультатПисьма = ЗапросПравило.Выполнить();
				Если Не РезультатПисьма.Пустой() Тогда
					ВыборкаПисьма = РезультатПисьма.Выбрать();
					Пока ВыборкаПисьма.Следующий() Цикл
						
						НоваяСтрокаТаблицы = ТаблицаСоответствий.Добавить();
						НоваяСтрокаТаблицы.Папка = Выборка.ПомещатьВПапку;
						НоваяСтрокаТаблицы.Письмо = ВыборкаПисьма.Ссылка;
						
						ИндексЭлементаМассиваКУдалению = МассивПисем.Найти(ВыборкаПисьма.Ссылка);
						Если ИндексЭлементаМассиваКУдалению <> Неопределено Тогда
							МассивПисем.Удалить(ИндексЭлементаМассиваКУдалению);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				Если МассивПисем.Количество() = 0 Тогда
					Возврат ТаблицаСоответствий;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
	КонецЕсли;
	
	ОпределитьПапкиДляМассиваПисемПоУмолчанию(МассивПисем, ТаблицаСоответствий);
	Возврат ТаблицаСоответствий;
	
КонецФункции

// Определяет папки по умолчанию для массива писем
//
// Параметры
//  МассивПисем  - Массив - массив писем для которого будут определены папки
//  ТаблицаПисем  - ТаблицаЗначений - в которую помещается соответствие писем и определенных для них папок
//
Процедура ОпределитьПапкиДляМассиваПисемПоУмолчанию(МассивПисем,ТаблицаПисем)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ПапкиЭлектронныхПисем.Ссылка,
	|	ПапкиЭлектронныхПисем.Наименование,
	|	ПапкиЭлектронныхПисем.Владелец КАК УчетнаяЗапись
	|ПОМЕСТИТЬ ПапкиПисем
	|ИЗ
	|	Справочник.ПапкиЭлектронныхПисем КАК ПапкиЭлектронныхПисем
	|ГДЕ
	|	ПапкиЭлектронныхПисем.ПредопределеннаяПапка
	|	И ПапкиЭлектронныхПисем.Владелец В
	|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|				Взаимодействия.УчетнаяЗапись
	|			ИЗ
	|				ЖурналДокументов.Взаимодействия КАК Взаимодействия
	|			ГДЕ
	|				Взаимодействия.Ссылка В (&МассивПисем))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Взаимодействия.Ссылка,
	|	ВЫБОР
	|		КОГДА Взаимодействия.ПометкаУдаления
	|			ТОГДА &Удаленные
	|		КОГДА Взаимодействия.Тип = ТИП(Документ.ЭлектронноеПисьмоВходящее)
	|			ТОГДА &Входящие
	|		КОГДА Взаимодействия.Тип = ТИП(Документ.ЭлектронноеПисьмоИсходящее)
	|			ТОГДА ВЫБОР
	|					КОГДА Взаимодействия.СтатусИсходящегоПисьма = ЗНАЧЕНИЕ(Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Черновик)
	|						ТОГДА &Черновики
	|					КОГДА Взаимодействия.СтатусИсходящегоПисьма = ЗНАЧЕНИЕ(Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Отправлено)
	|						ТОГДА &Отправленные
	|					КОГДА Взаимодействия.СтатусИсходящегоПисьма = ЗНАЧЕНИЕ(Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Исходящее)
	|						ТОГДА &Исходящие
	|				КОНЕЦ
	|		ИНАЧЕ &НежелательнаяПочта
	|	КОНЕЦ КАК НаименованиеПапки,
	|	Взаимодействия.УчетнаяЗапись
	|ПОМЕСТИТЬ НаименованиеПапкиНазначения
	|ИЗ
	|	ЖурналДокументов.Взаимодействия КАК Взаимодействия
	|ГДЕ
	|	Взаимодействия.Ссылка В(&МассивПисем)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПапкиПисем.Ссылка КАК Папка,
	|	НаименованиеПапкиНазначения.Ссылка КАК Письмо
	|ИЗ
	|	НаименованиеПапкиНазначения КАК НаименованиеПапкиНазначения
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПапкиПисем КАК ПапкиПисем
	|		ПО НаименованиеПапкиНазначения.НаименованиеПапки = ПапкиПисем.Наименование
	|			И НаименованиеПапкиНазначения.УчетнаяЗапись = ПапкиПисем.УчетнаяЗапись";
	
	
	Запрос.УстановитьПараметр("МассивПисем",МассивПисем);
	УстановитьПараметрыЗапросаИменаПредопределенныеПапки(Запрос);
	
	Результат = Запрос.Выполнить();
	Если НЕ Результат.Пустой() Тогда
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(Результат.Выгрузить(), ТаблицаПисем);
	КонецЕсли;
	
КонецПроцедуры

// Определяет признак изменения пометки удаления при записи письма
//
// Параметры
//  ПисьмоОбъект  - ДокументОбъект.ЭлектронноеПисьмоИсходящее,
//                  ДокументОбъект.ЭлектронноеПисьмоВходящее - письмо для которого выполняется процедура
Процедура ОтработатьПризнакИзмененияПометкиУдаленияПриЗаписиПисьма(ПисьмоОбъект) Экспорт
	
	Если ПисьмоОбъект.ПометкаУдаления <> ПисьмоОбъект.ДополнительныеСвойства.ПометкаУдаления Тогда
		Если НЕ ПисьмоОбъект.ДополнительныеСвойства.Свойство("ОбработаноИзменениеПометкиУдаления") Тогда
			Если ПисьмоОбъект.ПометкаУдаления = Истина Тогда
				Папка = ОпределитьПапкуДляПисьмаПоУмолчанию(ПисьмоОбъект.Ссылка);
			Иначе
				Папка = ОпределитьПапкуДляПисьма(ПисьмоОбъект.Ссылка);
			КонецЕсли;
			ВзаимодействияВызовСервера.УстановитьПапкуЭлектронногоПисьма(ПисьмоОбъект.Ссылка, Папка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////////
//  Прочее

// Получает в привелигированном режиме значение константы "Адрес публикации информационной базы в интернете"
//
// Возвращаемое значение:
//   Строка - значение константы
//
Функция АдресПубликацииИнформационнойБазыВИнтернете() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат Константы.АдресПубликацииИнформационнойБазыВИнтернете.Получить();
	
КонецФункции

//Процедура заполняет список выбора времени
//Параметры:
//  ПолеВводаФормы  - элемент-владелец списка,
//  Интервал        - интервал, с которым необходимо заполнить список, по умолчанию час
Процедура ЗаполнитьСписокВыбораВремени(ПолеВводаФормы, Интервал = 3600) Экспорт

	НачалоРабочегоДня      = '00010101000000';
	ОкончаниеРабочегоДня   = '00010101235959';

	СписокВремен = ПолеВводаФормы.СписокВыбора;
	СписокВремен.Очистить();

	ВремяСписка = НачалоРабочегоДня;
	Пока НачалоЧаса(ВремяСписка) <= НачалоЧаса(ОкончаниеРабочегоДня) Цикл
		Если НЕ ЗначениеЗаполнено(ВремяСписка) Тогда
			ПредставлениеВремени = "00:00";
		Иначе
			ПредставлениеВремени = Формат(ВремяСписка,"ДФ=ЧЧ:мм");
		КонецЕсли;

		СписокВремен.Добавить(ВремяСписка, ПредставлениеВремени);

		ВремяСписка = ВремяСписка + Интервал;
	КонецЦикла;

КонецПроцедуры
