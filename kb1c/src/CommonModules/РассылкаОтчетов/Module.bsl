////////////////////////////////////////////////////////////////////////////////
// Подсистема "Рассылка отчетов" (сервер)
// 
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Подготавливает параметры для функции ВыполнитьРассылку и выполняет ее.
//
// Параметры:
//   Рассылка (СправочникСсылка.РассылкиОтчетов)   Рассылка, параметры которой будут подготовлены
//   ПараметрыЖурнала  (Структура)        Необязательный. Параметры записи в журнал регистрации
//       |- ИмяСобытия (Строка)           Имя события (или группы событий)
//       |- Метаданные (ОбъектМетаданных) Метаданные для привязки события журнала регистрации
//       |- Данные     (*)                Данные для привязки события журнала регистрации
//   ПредварительныеНастройки (Структура)          Необязательный. Настройки, которые не требуется формировать из рассылки.
//       |- Получатели        (Соответствие)       Набор получателей и их e-mail адресов
//           |- Ключ          (СправочникСсылка.*) Получатель
//           |- Значение      (Строка)             Набор e-mail адресов получателя в строке с разделителями
//
// Возвращаемое значение:
//   Истина - Рассылка выполнена
//   Ложь   - Рассылка не выполнена
//
Функция ПодготовитьПараметрыИВыполнитьРассылку(Рассылка, ПараметрыЖурнала = Неопределено, ПредварительныеНастройки = Неопределено) Экспорт
	
	// Параметры записи в журнал регистрации
	Если ПараметрыЖурнала = Неопределено Тогда
		ПараметрыЖурнала = Новый Структура;
	КонецЕсли;
	
	Если НЕ ПараметрыЖурнала.Свойство("ИмяСобытия") Тогда
		ПараметрыЖурнала.Вставить("ИмяСобытия", НСтр("ru = 'Рассылка отчетов. Запуск по требованию'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	КонецЕсли;
	
	Если НЕ ПараметрыЖурнала.Свойство("Данные") Тогда
		ПараметрыЖурнала.Вставить("Данные", Рассылка);
	КонецЕсли;
	
	Если НЕ ПараметрыЖурнала.Свойство("Метаданные") Тогда
		ПараметрыЖурнала.Вставить("Метаданные", ПараметрыЖурнала.Данные.Метаданные());
	КонецЕсли;
	
	// Проверка прав доступа
	Если НЕ ПравоВывода(ПараметрыЖурнала) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Проверка базовых реквизитов рассылки
	Если НЕ Рассылка.Подготовлена
		ИЛИ Рассылка.ПометкаУдаления Тогда
		
		Причина = "";
		Если НЕ Рассылка.Подготовлена Тогда
			Причина = Причина + Символы.ПС + НСтр("ru = 'Рассылка не подготовлена'");
		КонецЕсли;
		Если Рассылка.ПометкаУдаления Тогда
			Причина = Причина + Символы.ПС + НСтр("ru = 'Рассылка помечена на удаление'");
		КонецЕсли;
		
		ЗаписьЖурнала(ПараметрыЖурнала, УровеньЖурналаРегистрации.Предупреждение,
			НСтр("ru = 'Завершение'"), СокрЛП(Причина));
		Возврат Ложь;
		
	КонецЕсли;
	
	// Регистрация запуска (запущена, но не выполнена)
	РегистрыСведений.СостоянияРассылокОтчетов.ЗафиксироватьЗапускРассылки(Рассылка);
	
	// Таблица отчетов
	ТаблицаОтчетов = Новый ТаблицаЗначений;
	ТаблицаОтчетов.Колонки.Добавить("Отчет", Метаданные.Справочники.РассылкиОтчетов.ТабличныеЧасти.Отчеты.Реквизиты.Отчет.Тип);
	ТаблицаОтчетов.Колонки.Добавить("ОтправлятьЕслиПустой", Новый ОписаниеТипов("Булево"));
	
	МассивТиповНастроек = Новый Массив;
	МассивТиповНастроек.Добавить(Тип("Неопределено"));
	МассивТиповНастроек.Добавить(Тип("ПользовательскиеНастройкиКомпоновкиДанных"));
	МассивТиповНастроек.Добавить(Тип("Структура"));
	
	ТаблицаОтчетов.Колонки.Добавить("Настройки", Новый ОписаниеТипов(МассивТиповНастроек));
	ТаблицаОтчетов.Колонки.Добавить("Форматы", Новый ОписаниеТипов("Массив"));
	
	// Форматы по умолчанию
	ФорматыПоУмолчанию = Новый Массив;
	Найденные = Рассылка.ФорматыОтчетов.НайтиСтроки(Новый Структура("Отчет", РассылкаОтчетовПовтИсп.ПустоеЗначениеОтчета()));
	Для Каждого СтрокаФормат Из Найденные Цикл
		ФорматыПоУмолчанию.Добавить(СтрокаФормат.Формат);
	КонецЦикла;
	Если ФорматыПоУмолчанию.Количество() = 0 Тогда
		СписокФорматов = РассылкаОтчетовПовтИсп.СписокФорматов();
		Для Каждого ЗначениеСписка Из СписокФорматов Цикл
			Если ЗначениеСписка.Пометка Тогда
				ФорматыПоУмолчанию.Добавить(ЗначениеСписка.Значение);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Если ФорматыПоУмолчанию.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Не установлены форматы по умолчанию.'");
	КонецЕсли;
	
	// Заполнение таблицы отчетов
	Для Каждого СтрокаОтчет Из Рассылка.Отчеты Цикл
		Стр = ТаблицаОтчетов.Добавить();
		Стр.Отчет = СтрокаОтчет.Отчет;
		Стр.ОтправлятьЕслиПустой = СтрокаОтчет.ОтправлятьЕслиПустой;
		
		// Настройки
		Настройки = СтрокаОтчет.Настройки.Получить();
		Если ТипЗнч(Настройки) = Тип("ТаблицаЗначений") Тогда
			Стр.Настройки = Новый Структура;
			Найденные = Настройки.НайтиСтроки(Новый Структура("Использование", Истина));
			Для Каждого СтрокаНастройка Из Найденные Цикл
				Стр.Настройки.Вставить(СтрокаНастройка.Реквизит, СтрокаНастройка.Значение);
			КонецЦикла;
		Иначе
			Стр.Настройки = Настройки;
		КонецЕсли;
		
		// Форматы
		Найденные = Рассылка.ФорматыОтчетов.НайтиСтроки(Новый Структура("Отчет", СтрокаОтчет.Отчет));
		Если Найденные.Количество() = 0 Тогда
			Стр.Форматы = ФорматыПоУмолчанию;
		Иначе
			Для Каждого СтрокаФормат Из Найденные Цикл
				Стр.Форматы.Добавить(СтрокаФормат.Формат);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	// Подготовка параметров доставки
	ПараметрыДоставки = Новый Структура;
	ПараметрыДоставки.Вставить("ЗапускЗафиксирован",           Истина);
	ПараметрыДоставки.Вставить("Автор",                        Пользователи.ТекущийПользователь());
	ПараметрыДоставки.Вставить("ИспользоватьПапку",            Рассылка.ИспользоватьПапку);
	ПараметрыДоставки.Вставить("ИспользоватьСетевойКаталог",   Рассылка.ИспользоватьСетевойКаталог);
	ПараметрыДоставки.Вставить("ИспользоватьFTPРесурс",        Рассылка.ИспользоватьFTPРесурс);
	ПараметрыДоставки.Вставить("ИспользоватьЭлектроннуюПочту", Рассылка.ИспользоватьЭлектроннуюПочту);
	
	// Проверки отмеченных способов доставки
	Если НЕ ПараметрыДоставки.ИспользоватьПапку
		 И НЕ ПараметрыДоставки.ИспользоватьСетевойКаталог
		 И НЕ ПараметрыДоставки.ИспользоватьFTPРесурс
		 И НЕ ПараметрыДоставки.ИспользоватьЭлектроннуюПочту 
		Тогда
		ЗаписьЖурнала(ПараметрыЖурнала, УровеньЖурналаРегистрации.Предупреждение,
			НСтр("ru = 'Не выбран способ доставки.'"));
		Возврат Ложь;
	КонецЕсли;
	
	ПараметрыДоставки.Вставить("Персонализирована", Рассылка.Персонализирована);
	ПараметрыДоставки.Вставить("Архивировать",      Рассылка.Архивировать);
	ПараметрыДоставки.Вставить("ИмяАрхива",         Рассылка.ИмяАрхива);
	ПараметрыДоставки.Вставить("ПарольАрхива",      Рассылка.ПарольАрхива);
	
	// Подготовка параметров доставки в папку
	Если ПараметрыДоставки.ИспользоватьПапку Тогда
		ПараметрыДоставки.Вставить("Папка", Рассылка.Папка);
	КонецЕсли;
	
	// Подготовка параметров доставки в сетевой каталог
	Если ПараметрыДоставки.ИспользоватьСетевойКаталог Тогда
		ПараметрыДоставки.Вставить("СетевойКаталогWindows", Рассылка.СетевойКаталогWindows);
		ПараметрыДоставки.Вставить("СетевойКаталогLinux",   Рассылка.СетевойКаталогLinux);
	КонецЕсли;
	
	// Подготовка параметров доставки на FTP ресурс
	Если ПараметрыДоставки.ИспользоватьFTPРесурс Тогда
		ПараметрыДоставки.Вставить("Сервер",              Рассылка.FTPСервер);
		ПараметрыДоставки.Вставить("Порт",                Рассылка.FTPПорт);
		ПараметрыДоставки.Вставить("Логин",               Рассылка.FTPЛогин);
		ПараметрыДоставки.Вставить("Пароль",              Рассылка.FTPПароль);
		ПараметрыДоставки.Вставить("Каталог",             Рассылка.FTPКаталог);
		ПараметрыДоставки.Вставить("ПассивноеСоединение", Рассылка.FTPПассивноеСоединение);
	КонецЕсли;
	
	// Подготовка параметров доставки по электронной почте
	Если ПараметрыДоставки.ИспользоватьЭлектроннуюПочту Тогда
		ПараметрыДоставки.Вставить("УчетнаяЗапись",   Рассылка.УчетнаяЗапись);
		ПараметрыДоставки.Вставить("ТолькоУведомить", Рассылка.ТолькоУведомить);
		ПараметрыДоставки.Вставить("СкрытыеКопии",    Рассылка.СкрытыеКопии);
		ПараметрыДоставки.Вставить("ШаблонТемы",      Рассылка.ТемаПисьма);
		ПараметрыДоставки.Вставить("ШаблонТекста", 
			?(
				Рассылка.ПисьмоВФорматеHTML, 
				Рассылка.ТекстПисьмаВФорматеHTML, 
				Рассылка.ТекстПисьма));
		
		// Получатели
		Если ПредварительныеНастройки <> Неопределено И ПредварительныеНастройки.Свойство("Получатели") Тогда
			
			ПараметрыДоставки.Вставить("Получатели", ПредварительныеНастройки.Получатели);
			
		Иначе
			
			Получатели = СформироватьСписокПолучателейРассылки(ПараметрыЖурнала, Рассылка);
			
			Если Получатели.Количество() = 0 Тогда
				
				ПараметрыДоставки.ИспользоватьЭлектроннуюПочту = Ложь;
				
				Если НЕ ПараметрыДоставки.ИспользоватьПапку
					И НЕ ПараметрыДоставки.ИспользоватьСетевойКаталог
					И НЕ ПараметрыДоставки.ИспользоватьFTPРесурс Тогда
					
					Возврат Ложь;
					
				КонецЕсли;
				
			КонецЕсли;
			
			ПараметрыДоставки.Вставить("Получатели", Получатели);
			
		КонецЕсли;
		
		// Дополнительные параметры
		ПараметрыДоставки.Вставить("ПараметрыПисьма", Новый Структура);
		
		// Адрес ответа
		Если ЗначениеЗаполнено(Рассылка.АдресОтвета) Тогда
			ПараметрыДоставки.ПараметрыПисьма.Вставить("АдресОтвета", Рассылка.АдресОтвета);
		КонецЕсли;
		
		// Вложения
		ПараметрыДоставки.ПараметрыПисьма.Вставить("ТипТекста", ?(Рассылка.ПисьмоВФорматеHTML, "HTML", "ПростойТекст"));
		ПараметрыДоставки.ПараметрыПисьма.Вставить("Вложения", Новый Соответствие);
		Если Рассылка.ПисьмоВФорматеHTML Тогда
			СтруктураКартинок = Рассылка.КартинкиПисьмаВФорматеHTML.Получить();
			Если ТипЗнч(СтруктураКартинок) = Тип("Структура") Тогда
				Для Каждого КлючИЗначение Из СтруктураКартинок Цикл
					ПараметрыДоставки.ПараметрыПисьма.Вложения.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли; // Рассылка.ПисьмоВФорматеHTML
	КонецЕсли; // ПараметрыДоставки.ИспользоватьЭлектроннуюПочту
		
	Возврат ВыполнитьРассылку(ТаблицаОтчетов, ПараметрыДоставки, Рассылка, ПараметрыЖурнала);
	
КонецФункции // ПодготовитьПараметрыИВыполнитьРассылку()

// Формирует отчеты и отправляет согласно настройкам транспорта (Папка, FILE, EMAIL, FTP);
//   Позволяет выполнить рассылку не создавая элемент справочника "Рассылки отчетов".
//
////////////////////////////////////////////////////////////////////////////////
// Параметры:
//
//   ТаблицаОтчетов (ТаблицаЗначений) Набор выгружаемых отчетов. Колонки:
//       |- Отчет (...) Отчет, который необходимо сформировать.
//           |- (СправочникСсылка.ВариантыОтчетов)
//           |- (СправочникСсылка.ДополнительныеОтчетыИОбработки)
//       |- ОтправлятьЕслиПустой (Булево) Флаг отправки отчета даже если он пустой.
//       |- Настройки (...) Настройки, с которыми должен сформироваться отчет.
//           Дополнительно используется для определения принадлежности отчета к СКД.
//           |- (Неопределено) Настройки по умолчанию. Для определения принадлежности к СКД 
//                будет использован реквизит объекта "СхемаКомпоновкиДанных".
//           |- (ПользовательскиеНастройкиКомпоновкиДанных) Табличный документ сформируется механизмами СКД.
//           |- (Структура) Табличный документ сформируется при помощи метода "Сформировать()".
//               |- Ключ     (Строка) Имя реквизита объекта отчета
//               |- Значение (*)      Значение реквизита объекта отчета
//       |- Форматы (Массив) из (ПеречислениеСсылка.ФорматыСохраненияОтчетов)
//            Форматы, в которых необходимо сохранить и отправить отчет
//
//   ПараметрыДоставки (Структура) Настройки транспорта (способа доставки) отчетов. 
//     Набор реквизитов может отличаться для разных способов доставки:
//     --- Обязательные реквизиты ---
//
//       |- Автор (СправочникСсылка.Пользователи) Автор рассылки
//
//       |- ИспользоватьПапку            (Булево) Доставка отчетов в папку подсистемы "Работа с файлами"
//       |- ИспользоватьСетевойКаталог   (Булево) Доставка отчетов в папку файловой системы
//       |- ИспользоватьFTPРесурс        (Булево) Доставка отчетов на FTP
//       |- ИспользоватьЭлектроннуюПочту (Булево) Доставка отчетов по электронной почте
//
//    --- Обязательные реквизиты когда { ИспользоватьПапку = Истина } ---
//
//       |- Папка (СправочникСсылка.ПапкиФайлов) Папка подсистемы "Работа с файлами"
//
//    --- Обязательные реквизиты когда { ИспользоватьСетевойКаталог = Истина } ---
//
//       |- СетевойКаталогWindows (Строка) Каталог файловой системы (локальный на сервере или сетевой)
//       |- СетевойКаталогLinux   (Строка) Каталог файловой системы (локальный на сервере или сетевой)
//
//    --- Обязательные реквизиты когда { ИспользоватьFTPРесурс = Истина } ---
//
//       |- Сервер              (Строка)
//       |- Порт                (Число)
//       |- Логин               (Строка)
//       |- Пароль              (Строка)
//       |- Каталог             (Строка)
//       |- ПассивноеСоединение (Булево)
//
//    --- Обязательные реквизиты когда { ИспользоватьЭлектроннуюПочту = Истина } ---
//
//       |- УчетнаяЗапись (СправочникСсылка.УчетныеЗаписиЭлектроннойПочты) Учетная запись для отправки почтового сообщения
//       |- Получатели (Соответствие) Набор получателей и их e-mail адресов
//           |- Ключ     (СправочникСсылка.*) Получатель
//           |- Значение (Строка)             Набор e-mail адресов получателя в строке с разделителями
//
//     --- Необязательные реквизиты ---
//
//       |- Персонализирована (Булево, Ложь) Рассылка персонализирована получателями
//       |- Архивировать      (Булево, Ложь) Архивировать все файлы сформированных отчетов в один архив
//       |- ИмяАрхива         (Строка)       Архивация может потребоваться для отчетов, которые при сохранении 
//       |- ПарольАрхива      (Строка)       в формат создают каталоги (например html)
//
//     --- Необязательные реквизиты когда { ИспользоватьЭлектроннуюПочту = Истина } ---
//
//       |- ТолькоУведомить (Булево, Ложь) Отправлять только уведомления (не присоединять сформированные отчеты)
//       |- СкрытыеКопии    (Булево, Ложь) Если "Истина", то при отправке вместо "Кому" заполняется "СлепыеКопии".
//       |- ШаблонТемы      (Строка)       Тема письма
//       |- ШаблонТекста    (Строка)       Тело письма
//       |- ПараметрыПисьма (Структура)    Параметры сообщения,
//            которые будут переданы подсистеме "РаботаСПочтовымиСообщениями" напрямую.
//            Их обработку можно увидеть в модуле "ЭлектроннаяПочта", процедура "ОтправитьСообщение".
//            Подсистемой "РассылкаОтчетов" могут использоваться:
//           |- ТипТекста (ТипТекстаПочтовогоСообщения, Строка, ПеречислениеСсылка.ТипыТекстовЭлектронныхПисем)
//           |- Вложения  (Соответствие)
//               |- Ключ  (Строка) Наименование
//               |- Значение (...) Данные
//                   |- (Текст) Адрес во временном хранилище
//                   |- (ДвоичныеДанные)
//                   |- (ИнтернетПочтовоеСообщение)
//           |- АдресОтвета (Строка) E-mail адрес ответа
//
//     --- Влияние ключевых параметров ---
//
//       { Персонализирована = Истина } => 
//           { ИспользоватьПапку = Ложь }
//           { ИспользоватьСетевойКаталог = Ложь }
//           { ИспользоватьFTPРесурс = Ложь }
//           { ТолькоУведомить = Ложь }
//
//   Рассылка (*) Используется как объект-инициатор для отображения ошибок и в шаблонах темы и сообщения
//
//   ПараметрыЖурнала (Структура) Необязательный. Параметры записи в журнал регистрации
//       |- ИмяСобытия (Строка)           Имя события (или группы событий)
//       |- Метаданные (ОбъектМетаданных) Метаданные для привязки события журнала регистрации
//       |- Данные     (*)                Данные для привязки события журнала регистрации
//
////////////////////////////////////////////////////////////////////////////////
// Возвращаемое значение:
//   Истина - Рассылка выполнена
//   Ложь   - Рассылка не выполнена
//
Функция ВыполнитьРассылку(ТаблицаОтчетов, ПараметрыДоставки, Рассылка, ПараметрыЖурнала = Неопределено) Экспорт
	РассылкаВыполнена = Ложь;
	
	Если НЕ ПараметрыДоставки.Свойство("ЗапускЗафиксирован") ИЛИ НЕ ПараметрыДоставки.ЗапускЗафиксирован Тогда
		РегистрыСведений.СостоянияРассылокОтчетов.ЗафиксироватьЗапускРассылки(Рассылка);
	КонецЕсли;
	
	// Добавление дерева сформированных отчетов - табличных документов и отчетов, сохраненных в форматы (файлов)
	ДеревоОтчетов = СоздатьДеревоОтчетов();
	
	// Заполнение параметрами по умолчанию и проверка на заполненность ключевых параметров доставки
	Если НЕ ЗаполнитьПараметрыРассылкиПараметрамиПоУмолчанию(ТаблицаОтчетов, ПараметрыДоставки, Рассылка, ПараметрыЖурнала) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Строка дерева общих (не персонализированных по получателям) отчетов
	ПараметрыДоставки.Вставить("СтрокаОбщихОтчетов", ОпределитьСтрокуДереваДляПолучателя(ДеревоОтчетов, Неопределено, ПараметрыДоставки));
	
	ЗаписьЖурнала(ПараметрыЖурнала, ,
		НСтр("ru = 'Инициализирована рассылка %1, автор: %2'"), , 
		"'"+ Строка(Рассылка) +"'", 
		"'"+ Строка(ПараметрыДоставки.Автор) +"'");
	
	// Формирование и сохранение отчетов
	НомерОтчета = 1;
	Для Каждого СтрокаОтчет Из ТаблицаОтчетов Цикл
		ТекстЖурнала = НСтр("ru = 'Отчет %1 формируется'");
		Если СтрокаОтчет.Настройки = Неопределено Тогда
			ТекстЖурнала = ТекстЖурнала + Символы.ПС + НСтр("ru = '(пользовательские настройки не заданы)'");
		КонецЕсли;
		ЗаписьЖурнала(ПараметрыЖурнала, УровеньЖурналаРегистрации.Примечание,
			ТекстЖурнала, ,
			"'"+ Строка(СтрокаОтчет.Отчет) +"'");
		
		// Инициализация отчета
		ПараметрыОтчета = Новый Структура("Отчет, Настройки, Форматы, ОтправлятьЕслиПустой");
		ЗаполнитьЗначенияСвойств(ПараметрыОтчета, СтрокаОтчет);
		Если НЕ ИнициализироватьОтчет(ПараметрыЖурнала, ПараметрыОтчета, ПараметрыДоставки.Персонализирована) Тогда
			Продолжить;
		КонецЕсли;
		
		// Формирование табличных документов и сохранение в форматы
		Попытка
			Если ПараметрыОтчета.Персонализирован Тогда
				// В разрезе получателей
				Для Каждого КлючИЗначение Из ПараметрыДоставки.Получатели Цикл
					СформироватьИСохранитьОтчет(
						ПараметрыЖурнала, 
						ПараметрыОтчета, 
						ДеревоОтчетов, 
						ПараметрыДоставки, 
						КлючИЗначение.Ключ); // Получатель
				КонецЦикла;
			Иначе
				// Без персонализации
				СформироватьИСохранитьОтчет(
					ПараметрыЖурнала, 
					ПараметрыОтчета, 
					ДеревоОтчетов, 
					ПараметрыДоставки, 
					Неопределено); // Получатель
			КонецЕсли;
			ЗаписьЖурнала(ПараметрыЖурнала, УровеньЖурналаРегистрации.Примечание,
				НСтр("ru = 'Отчет %1 успешно сформирован'"), ,
				"'"+ Строка(СтрокаОтчет.Отчет) +"'");
			НомерОтчета = НомерОтчета + 1;
		Исключение
			ЗаписьЖурнала(ПараметрыЖурнала, ,
				НСтр("ru = 'Отчет %1 не сформирован:'"), ИнформацияОбОшибке(),
				"'"+ Строка(СтрокаОтчет.Отчет) +"'");
		КонецПопытки;
	КонецЦикла;
	
	// Проверка на количество сохраненных отчетов
	Если ДеревоОтчетов.Строки.Найти(3, "Уровень", Истина) = Неопределено Тогда
		ЗаписьЖурнала(ПараметрыЖурнала, УровеньЖурналаРегистрации.Предупреждение,
			НСтр("ru = 'Не сохранено ни одного отчета'"), ,);
		УдалитьВременныеФайлы(ПараметрыЖурнала, ПараметрыДоставки);
		Возврат Ложь;
	КонецЕсли;
	
	// Общие отчеты
	ОбщиеВложения = ПараметрыДоставки.СтрокаОбщихОтчетов.Строки.НайтиСтроки(Новый Структура("Уровень", 3), Истина);
	
	// Отправка личных отчетов
	Для Каждого СтрокаПолучатель Из ДеревоОтчетов.Строки Цикл
		// Пропустить строку дерева общих отчетов
		Если СтрокаПолучатель = ПараметрыДоставки.СтрокаОбщихОтчетов Тогда
			Продолжить;
		КонецЕсли;
		
		// Личные вложения
		ЛичныеВложения = СтрокаПолучатель.Строки.НайтиСтроки(Новый Структура("Уровень", 3), Истина);
		
		// Проверка на количество сохраненных персональных отчетов
		Если ЛичныеВложения.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		// Объединение общих и личных вложений
		ВложенияПолучателя = ОбъединитьМассивы(ОбщиеВложения, ЛичныеВложения);
		
		// Формирование представления отчетов
		СформироватьПредставлениеОтчетовДляПолучателя(ПараметрыДоставки, СтрокаПолучатель);
		
		// 
		АрхивацияВложений(ВложенияПолучателя, ПараметрыДоставки, СтрокаПолучатель.Значение);
		
		// Отправить отчеты получателю
		Попытка
			ОтправитьОтчетыПолучателю(
				ВложенияПолучателя,
				ПараметрыДоставки,
				СтрокаПолучатель);
			РассылкаВыполнена = Истина;
			ПараметрыДоставки.ВыполненаПоЭлектроннойПочте = Истина;
		Исключение
			ЗаписьЖурнала(ПараметрыЖурнала, ,
				НСтр("ru = 'Ошибка отправки отчетов получателю %1:'"), ИнформацияОбОшибке(), 
				"'"+ Строка(СтрокаПолучатель.Ключ) +"'");
		КонецПопытки;
		
		//
		Если РассылкаВыполнена Тогда
			ПараметрыДоставки.Получатели.Удалить(СтрокаПолучатель.Ключ);
		КонецЕсли;
	КонецЦикла;
	
	// Отправка общих отчетов
	Если ОбщиеВложения.Количество() > 0 Тогда
		// Представление отчетов
		СформироватьПредставлениеОтчетовДляПолучателя(ПараметрыДоставки, СтрокаПолучатель);
		
		//
		АрхивацияВложений(ОбщиеВложения, ПараметрыДоставки, ПараметрыДоставки.КаталогВременныхФайлов);
		
		//
		Если ВыполнитьДоставку(ПараметрыЖурнала, ПараметрыДоставки, ОбщиеВложения) Тогда
			РассылкаВыполнена = Истина;
		КонецЕсли;
	КонецЕсли; // ЕстьОбщиеОтчеты

	Если РассылкаВыполнена Тогда
		ЗаписьЖурнала(ПараметрыЖурнала, , НСтр("ru = 'Рассылка выполнена'"));
	Иначе
		ЗаписьЖурнала(ПараметрыЖурнала, , НСтр("ru = 'Рассылка не выполнена'"));
	КонецЕсли;
	
	УдалитьВременныеФайлы(ПараметрыЖурнала, ПараметрыДоставки);
	
	//
	Если ПараметрыЖурнала.Свойство("БылиОшибки") Тогда
		ПараметрыДоставки.БылиОшибки = ПараметрыЖурнала.БылиОшибки;
	КонецЕсли;
	Если ПараметрыЖурнала.Свойство("БылиПредупреждения") Тогда
		ПараметрыДоставки.БылиПредупреждения = ПараметрыЖурнала.БылиПредупреждения;
	КонецЕсли;
	РегистрыСведений.СостоянияРассылокОтчетов.ЗафиксироватьРезультатВыполненияРассылки(Рассылка, ПараметрыДоставки);
	
	Возврат РассылкаВыполнена;
КонецФункции // ВыполнитьРассылку()

// Для вызова из модулей "РассылкаОтчетовПереопределяемый" и "РассылкаОтчетовПовтИсп".
//   Добавляет формат (в случае его отсутствия) и устанавливает его параметры (если переданы).
//
Процедура УстановитьПараметрыФормата(СписокФорматов, ФорматСсылка, Картинка = Неопределено, ИспользоватьПоУмолчанию = Неопределено) Экспорт
	Если ТипЗнч(ФорматСсылка) = Тип("Строка") Тогда
		ФорматСсылка = Перечисления.ФорматыСохраненияОтчетов[ФорматСсылка];
	КонецЕсли;
	ЭлементСписка = СписокФорматов.НайтиПоЗначению(ФорматСсылка);
	Если ЭлементСписка = Неопределено Тогда
		ЭлементСписка = СписокФорматов.Добавить(ФорматСсылка, Строка(ФорматСсылка), Ложь, БиблиотекаКартинок.ФорматПустой);
	КонецЕсли;
	Если Картинка <> Неопределено Тогда
		ЭлементСписка.Картинка = Картинка;
	КонецЕсли;
	Если ИспользоватьПоУмолчанию <> Неопределено Тогда
		ЭлементСписка.Пометка = ИспользоватьПоУмолчанию;
	КонецЕсли;
КонецПроцедуры

// Для вызова из модулей "РассылкаОтчетовПереопределяемый" и "РассылкаОтчетовПовтИсп".
//   Добавляет описание типа получателей в соответствующую таблицу.
//
// Параметры:
//   ТаблицаТипов  (ТаблицаЗначений) Таблица, в которой будет зарегистрирован результат
//   ДоступныеТипы (Массив)          Использованные типы удаляются из этого массива
//   Настройки     (Структура)       Предустановленные настройки основного типа
//
Процедура ДобавитьЭлементВТаблицуТиповПолучателей(ТаблицаТипов, ДоступныеТипы, Настройки) Экспорт
	УстановитьПривилегированныйРежим(Истина);
	
	МетаданныеОсновногоТипа = Метаданные.НайтиПоТипу(Настройки.ОсновнойТип);
	
	// Регистрация использования основного типа
	ИндексТипа = ДоступныеТипы.Найти(Настройки.ОсновнойТип);
	Если ИндексТипа <> Неопределено Тогда
		ДоступныеТипы.Удалить(ИндексТипа);
	КонецЕсли;
	
	// Идентификаторы объектов метаданных
	ИОМД = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Настройки.ОсновнойТип);
	СтрокаТаблицы = ТаблицаТипов.Найти(ИОМД, "ИОМД");
	Если СтрокаТаблицы = Неопределено Тогда
		СтрокаТаблицы = ТаблицаТипов.Добавить();
		СтрокаТаблицы.ИОМД = ИОМД;
	КонецЕсли;
	
	// Тип получателей
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Настройки.ОсновнойТип);
	
	// Тип получателей: Основной
	СтрокаТаблицы.ОсновнойТип = Новый ОписаниеТипов(МассивТипов);
	
	// Тип получателей: Дополнительный
	Если Настройки.Свойство("ДополнительныйТип") Тогда
		МассивТипов.Добавить(Настройки.ДополнительныйТип);
		
		// Регистрация дополнительного типа.
		ИндексТипа = ДоступныеТипы.Найти(Настройки.ДополнительныйТип);
		Если ИндексТипа <> Неопределено Тогда
			ДоступныеТипы.Удалить(ИндексТипа);
		КонецЕсли;
	КонецЕсли;
	СтрокаТаблицы.ТипПолучателей = Новый ОписаниеТипов(МассивТипов);
	
	// Представление
	Если Настройки.Свойство("Представление") Тогда
		СтрокаТаблицы.Представление = Настройки.Представление;
	Иначе
		СтрокаТаблицы.Представление = МетаданныеОсновногоТипа.Синоним;
	КонецЕсли;
	
	// Основной вид контактной информации "E-mail" для объекта
	Если Настройки.Свойство("ВидКИ") И НЕ Настройки.ВидКИ.ЭтоГруппа Тогда
		СтрокаТаблицы.ОсновнойВидКИ = Настройки.ВидКИ;
		СтрокаТаблицы.ГруппаКИ = Настройки.ВидКИ.Родитель;
	Иначе
		Если Настройки.Свойство("ВидКИ") Тогда
			СтрокаТаблицы.ГруппаКИ = Настройки.ВидКИ;
		Иначе
			ИмяГруппыКИ = СтрЗаменить(МетаданныеОсновногоТипа.ПолноеИмя(), ".", "");
			СтрокаТаблицы.ГруппаКИ = Справочники.ВидыКонтактнойИнформации[ИмяГруппыКИ];
		КонецЕсли;
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1 Ссылка ИЗ Справочник.ВидыКонтактнойИнформации ГДЕ Родитель = &Родитель И Тип = &Тип";
		Запрос.УстановитьПараметр("Родитель", СтрокаТаблицы.ГруппаКИ);
		Запрос.Параметры.Вставить("Тип", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			СтрокаТаблицы.ОсновнойВидКИ = Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;
	
	// Полный путь к форме выбора этого объекта
	Если Настройки.Свойство("ПутьФормыВыбора") Тогда
		СтрокаТаблицы.ПутьФормыВыбора = Настройки.ПутьФормыВыбора;
	Иначе
		СтрокаТаблицы.ПутьФормыВыбора = МетаданныеОсновногоТипа.ПолноеИмя() +".ФормаВыбора";
	КонецЕсли;
КонецПроцедуры

// Выполняет массив рассылок и размещает результат по адресу АдресРезультата. В файловом
//   режиме вызывается напрямую, в клиент-серверном - через фоновое задание.
//
// Параметры:
//   ПараметрыВыполнения (Структура) Выполняемые рассылки и их параметры.
//       |- МассивРассылок           (Массив) из (СправочникСсылка.РассылкиОтчетов)
//       |- ПредварительныеНастройки (Структура) см. функцию ПодготовитьПараметрыИВыполнитьРассылку()
//   АдресРезультата     (Строка)    Адрес во временном хранилище, по которому будет размещен результат.
//
Процедура ВыполнитьРассылкиВФоновомЗадании(ПараметрыВыполнения, АдресРезультата) Экспорт
	МассивРассылок           = ПараметрыВыполнения.МассивРассылок;
	ПредварительныеНастройки = ПараметрыВыполнения.ПредварительныеНастройки;
	
	// Выбираем все рассылки, включая вложенные, исключая группы
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	РассылкиОтчетов.Ссылка КАК Рассылка,
	|	РассылкиОтчетов.Представление КАК Представление,
	|	ВЫБОР
	|		КОГДА РассылкиОтчетов.Подготовлена = ИСТИНА
	|				И РассылкиОтчетов.ПометкаУдаления = ЛОЖЬ
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Подготовлена,
	|	ЛОЖЬ КАК Выполнена,
	|	ЛОЖЬ КАК СОшибками
	|ИЗ
	|	Справочник.РассылкиОтчетов КАК РассылкиОтчетов
	|ГДЕ
	|	РассылкиОтчетов.Ссылка В ИЕРАРХИИ(&МассивРассылок)
	|	И РассылкиОтчетов.ЭтоГруппа = ЛОЖЬ";
	
	Запрос.УстановитьПараметр("МассивРассылок", МассивРассылок);
	ТаблицаРассылок = Запрос.Выполнить().Выгрузить();
	Подготовленные = ТаблицаРассылок.НайтиСтроки(Новый Структура("Подготовлена", Истина));
	Выполнено = 0;
	СОшибками = 0;
	
	МассивСообщений = Новый Массив;
	Для Каждого СтрокаТаблицы Из Подготовленные Цикл
		
		ПараметрыЖурнала = Новый Структура("МассивОшибок", Новый Массив);
		
		СтрокаТаблицы.Выполнена = ПодготовитьПараметрыИВыполнитьРассылку(
			СтрокаТаблицы.Рассылка, 
			ПараметрыЖурнала, 
			ПредварительныеНастройки);
		СтрокаТаблицы.СОшибками = (ПараметрыЖурнала.МассивОшибок.Количество() > 0);
		
		Если СтрокаТаблицы.СОшибками Тогда
			МассивСообщений.Добавить("---" + Символы.ПС + Символы.ПС + СтрокаТаблицы.Представление + ":"); // Заголовок
			Для Каждого Сообщение Из ПараметрыЖурнала.МассивОшибок Цикл
				МассивСообщений.Добавить(Сообщение);
			КонецЦикла;
		КонецЕсли;
		
		Если СтрокаТаблицы.Выполнена Тогда
			Выполнено = Выполнено + 1;
			Если СтрокаТаблицы.СОшибками Тогда
				СОшибками = СОшибками + 1;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Результат = Новый Структура("Оповестить, Заголовок, Текст, ТекстОшибок");
	
	Всего        = ТаблицаРассылок.Количество();
	Подготовлено = Подготовленные.Количество();
	НеВыполнено  = Подготовлено - Выполнено;
	
	Если Всего = 0 Тогда
		Результат.Текст = НСтр("ru = 'Выбранные группы не содержат рассылок отчетов.'");
	ИначеЕсли Всего <= 5 Тогда
		Результат.Текст = "";
		Для Каждого СтрокаТаблицы Из ТаблицаРассылок Цикл
			Если НЕ СтрокаТаблицы.Подготовлена Тогда
				ШаблонСообщения = НСтр("ru = 'Рассылка %1 не подготовлена'");
			ИначеЕсли НЕ СтрокаТаблицы.Выполнена Тогда
				ШаблонСообщения = НСтр("ru = 'Рассылка %1 не выполнена'");
			ИначеЕсли СтрокаТаблицы.СОшибками Тогда
				ШаблонСообщения = НСтр("ru = 'Рассылка %1 выполнена с ошибками'");
			Иначе
				ШаблонСообщения = НСтр("ru = 'Рассылка %1 выполнена'");
			КонецЕсли;
			
			Результат.Текст = Результат.Текст 
			+ ?(Результат.Текст= "", "", Символы.ПС + Символы.ПС)
			+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				ШаблонСообщения, 
				"'"+ СтрокаТаблицы.Представление +"'");
		КонецЦикла;
	Иначе
		Результат.Текст = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Подготовлено рассылок: %1 из %2
			|Выполнено: %3
			|С ошибками: %4
			|Не выполнено: %5'"), 
			Формат(Подготовлено, "ЧН=0; ЧГ=0"), Формат(Всего, "ЧН=0; ЧГ=0"),
			Формат(Выполнено,    "ЧН=0; ЧГ=0"), 
			Формат(СОшибками,    "ЧН=0; ЧГ=0"), 
			Формат(НеВыполнено,  "ЧН=0; ЧГ=0"));
	КонецЕсли;
	
	Результат.Оповестить = Ложь;
	Результат.ТекстОшибок = РассылкаОтчетовКлиентСервер.СтрокаСообщенийПользователю(МассивСообщений);
	Результат.Вставить("ТипДляОбновления", ?(Всего = 1, ТаблицаРассылок[0].Рассылка, Тип("СправочникСсылка.РассылкиОтчетов")));
	
	ПоместитьВоВременноеХранилище(Результат, АдресРезультата);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС

////////////////////////////////////////////////////////////////////////////////
// Обработчики условных вызовов

// Добавляет команды создания рассылок в форму отчета.
//
Процедура ФормаОтчетаДобавитьКоманды(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	// Рассылки можно добавлять только если есть ссылка варианта.
	Если Не ЗначениеЗаполнено(Форма.ВариантСсылка) Тогда
		Возврат;
	КонецЕсли;
	
	// Добавление команд и кнопок
	КомандаСоздать = Форма.Команды.Добавить("РассылкаОтчетовСоздатьНовую");
	КомандаСоздать.Действие  = "Подключаемый_Команда";
	КомандаСоздать.Картинка  = БиблиотекаКартинок.РассылкаОтчетов;
	КомандаСоздать.Заголовок = НСтр("ru = 'Создать рассылку отчетов...'");
	КомандаСоздать.Подсказка = НСтр("ru = 'Создать новую рассылку отчетов и добавить в нее отчет с текущими настройками.'");
	
	КомандаПрисоединить = Форма.Команды.Добавить("РассылкаОтчетовПрисоединитьКСуществующей");
	КомандаПрисоединить.Действие  = "Подключаемый_Команда";
	КомандаПрисоединить.Картинка  = БиблиотекаКартинок.РассылкаОтчетов;
	КомандаПрисоединить.Заголовок = НСтр("ru = 'Включить в существующую рассылку отчетов...'");
	КомандаПрисоединить.Подсказка = НСтр("ru = 'Присоединить отчет с текущими настройками к существующей рассылке отчетов.'");
	
	Форма.ПостоянныеКоманды.Добавить(КомандаСоздать.Имя);
	Форма.ПостоянныеКоманды.Добавить(КомандаПрисоединить.Имя);
	
	Подменю = Форма.Элементы.Добавить("ОтправитьРассылку", Тип("ГруппаФормы"), Форма.Элементы.Отправить);
	Подменю.Вид = ВидГруппыФормы.ГруппаКнопок;
	Подменю.Заголовок = НСтр("ru = 'Отправить рассылку'");
	
	ЭлементСоздать = Форма.Элементы.Добавить(КомандаСоздать.Имя, Тип("КнопкаФормы"), Подменю);
	ЭлементСоздать.ИмяКоманды = КомандаСоздать.Имя;
	ЭлементСоздать.ТолькоВоВсехДействиях = Ложь;
	
	ЭлементПрисоединить = Форма.Элементы.Добавить(КомандаПрисоединить.Имя, Тип("КнопкаФормы"), Подменю);
	ЭлементПрисоединить.ИмяКоманды = КомандаПрисоединить.Имя;
	ЭлементПрисоединить.ТолькоВоВсехДействиях = Ложь;
	
	ПодменюВсеДействия = Форма.Элементы.Добавить(Подменю.Имя + "ВсеДействия", Тип("ГруппаФормы"), Форма.Элементы.ОтправитьВсеДействия);
	ЗаполнитьЗначенияСвойств(ПодменюВсеДействия, Подменю, "Вид, Заголовок");
	
	ЭлементСоздать = Форма.Элементы.Добавить(КомандаСоздать.Имя + "ВсеДействия", Тип("КнопкаФормы"), ПодменюВсеДействия);
	ЭлементСоздать.ИмяКоманды = КомандаСоздать.Имя;
	ЭлементСоздать.ТолькоВоВсехДействиях = Истина;
	
	ЭлементПрисоединить = Форма.Элементы.Добавить(КомандаПрисоединить.Имя + "ВсеДействия", Тип("КнопкаФормы"), ПодменюВсеДействия);
	ЭлементПрисоединить.ИмяКоманды = КомандаПрисоединить.Имя;
	ЭлементПрисоединить.ТолькоВоВсехДействиях = Истина;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Выполнение регламентных заданий

// Запускает рассылку и контролирует результат.
//
// Параметры:
//   Рассылка (СправочникСсылка.РассылкиОтчетов) Рассылка, которая должна быть выполнена
//
Процедура ВыполнитьРассылкуПоРасписанию(Рассылка) Экспорт
	
	Если ПустаяСтрока(ИмяПользователя()) Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	// Проверки
	Если НЕ Рассылка.ВыполнятьПоРасписанию Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'У рассылки отчетов ""%1"" отключен флажок ""Выполнять по расписанию""'"),
			Строка(Рассылка));
	КонецЕсли;
	
	// Параметры записи в журнал регистрации
	ПараметрыЖурнала = Новый Структура("ИмяСобытия, Метаданные, Данные");
	ПараметрыЖурнала.ИмяСобытия = НСтр("ru = 'Рассылка отчетов. Запуск по расписанию'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	ПараметрыЖурнала.Метаданные = Рассылка.Метаданные();
	ПараметрыЖурнала.Данные     = Рассылка;
	
	// Рассылка
	ПодготовитьПараметрыИВыполнитьРассылку(Рассылка, ПараметрыЖурнала);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Экспортные служебные процедуры и функции

// Формирует список получателей из табличной части "Получатели" рассылки.
//
// Параметры:
//   Рассылка (СправочникСсылка.РассылкиОтчетов, Структура) Элемент справочника, для которого необходимо сформировать список получателей
//
// Возвращаемое значение: 
//   Результат (Структура)
//       |- Получатели (Соответствие) см. функцию ВыполнитьРассылку, параметр ПараметрыДоставки.Получатели
//       |- Ошибки (Строка) Ошибки, которые возникли в процессе
//
Функция СформироватьСписокПолучателейРассылки(ПараметрыЖурнала, Рассылка) Экспорт
	
	ВидКИ = Рассылка.ВидПочтовогоАдресаПолучателей;
	
	Если Рассылка.Личная Тогда
		
		РеквизитыТЧ = Метаданные.Справочники.РассылкиОтчетов.ТабличныеЧасти.Получатели.Реквизиты;
		
		ТипПолучателей = ТипЗнч(Рассылка.Автор);
		ТаблицаПолучателей = Новый ТаблицаЗначений;
		Для Каждого Реквизит Из РеквизитыТЧ Цикл
			ТаблицаПолучателей.Колонки.Добавить(Реквизит.Имя, Реквизит.Тип);
		КонецЦикла;
		ТаблицаПолучателей.Добавить().Получатель = Рассылка.Автор;
		
	Иначе
		
		ТипПолучателей = Рассылка.ТипПолучателейРассылки.КлючОбъектаМетаданных.Получить();
		ТаблицаПолучателей = Рассылка.Получатели.Выгрузить();
		
	КонецЕсли;
	
	СписокПолучателей = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Если ТипПолучателей = Тип("СправочникСсылка.Пользователи") Тогда
	
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаПолучателей.Получатель,
		|	ТаблицаПолучателей.Исключен
		|ПОМЕСТИТЬ втТаблицаПолучателей
		|ИЗ
		|	&ТаблицаПолучателей КАК ТаблицаПолучателей
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	МАКСИМУМ(РассылкиОтчетовПолучатели.Исключен) КАК Исключен,
		|	СоставыГруппПользователей.Пользователь
		|ПОМЕСТИТЬ втПолучатели
		|ИЗ
		|	втТаблицаПолучателей КАК РассылкиОтчетовПолучатели
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
		|		ПО РассылкиОтчетовПолучатели.Получатель = СоставыГруппПользователей.ГруппаПользователей
		|			И (СоставыГруппПользователей.ГруппаПользователей.ПометкаУдаления = ЛОЖЬ)
		|ГДЕ
		|	СоставыГруппПользователей.Пользователь ССЫЛКА Справочник.Пользователи
		|	И СоставыГруппПользователей.Пользователь.ПометкаУдаления = ЛОЖЬ
		|	И СоставыГруппПользователей.Пользователь.Недействителен = ЛОЖЬ
		|	И СоставыГруппПользователей.Пользователь.Служебный = ЛОЖЬ
		|
		|СГРУППИРОВАТЬ ПО
		|	СоставыГруппПользователей.Пользователь
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	втПолучатели.Пользователь КАК Получатель,
		|	тчКонтактнаяИнформация.Представление КАК EMail
		|ИЗ
		|	втПолучатели КАК втПолучатели
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи.КонтактнаяИнформация КАК тчКонтактнаяИнформация
		|		ПО втПолучатели.Пользователь = тчКонтактнаяИнформация.Ссылка
		|ГДЕ
		|	втПолучатели.Исключен = ЛОЖЬ
		|	И тчКонтактнаяИнформация.Вид = &ВидКИ";
		
	Иначе
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаПолучателей.Получатель,
		|	ТаблицаПолучателей.Исключен
		|ПОМЕСТИТЬ втТаблицаПолучателей
		|ИЗ
		|	&ТаблицаПолучателей КАК ТаблицаПолучателей
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	СпрПолучателей.Ссылка КАК Получатель,
		|	тчКонтактнаяИнформация.Представление КАК EMail
		|ИЗ
		|	Справочник.Пользователи КАК СпрПолучателей
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Пользователи.КонтактнаяИнформация КАК тчКонтактнаяИнформация
		|		ПО (тчКонтактнаяИнформация.Ссылка = СпрПолучателей.Ссылка)
		|			И (тчКонтактнаяИнформация.Вид = &ВидКИ)
		|ГДЕ
		|	СпрПолучателей.Ссылка В ИЕРАРХИИ
		|			(ВЫБРАТЬ
		|				Получатели.Получатель
		|			ИЗ
		|				втТаблицаПолучателей КАК Получатели
		|			ГДЕ
		|				Получатели.Исключен = ЛОЖЬ)
		|	И (НЕ СпрПолучателей.Ссылка В ИЕРАРХИИ
		|				(ВЫБРАТЬ
		|					ИсключенияПолучателей.Получатель
		|				ИЗ
		|					втТаблицаПолучателей КАК ИсключенияПолучателей
		|				ГДЕ
		|					ИсключенияПолучателей.Исключен = ИСТИНА))
		|	И СпрПолучателей.ПометкаУдаления = ЛОЖЬ
		|	И &ЭтоНеГруппа";
		
		УстановитьПривилегированныйРежим(Истина);
		ПолучателиМД = Метаданные.НайтиПоТипу(ТипПолучателей);
		УстановитьПривилегированныйРежим(Ложь);
		
		Если НЕ ПолучателиМД.Иерархический Тогда
			// Не иерархический
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "В ИЕРАРХИИ", "В");
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И &ЭтоНеГруппа", "");
		ИначеЕсли ПолучателиМД.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияЭлементов Тогда
			// Иерархия элементов
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И &ЭтоНеГруппа", "");
		Иначе
			// Иерархия групп
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И &ЭтоНеГруппа", "И СпрПолучателей.ЭтоГруппа = ЛОЖЬ");
		КонецЕсли;
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Справочник.Пользователи", ПолучателиМД.ПолноеИмя());
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ТаблицаПолучателей", ТаблицаПолучателей);
	Если ЗначениеЗаполнено(ВидКИ) Тогда
		Запрос.УстановитьПараметр("ВидКИ", ВидКИ);
	Иначе
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ".Вид = &ВидКИ", ".Тип = &ТипКИ");
		Запрос.УстановитьПараметр("ТипКИ", Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);
	КонецЕсли;
	Запрос.Текст = ТекстЗапроса;
	
	ШаблонСообщенияОбОшибке = НСтр("ru = 'При формировании списка получателей ""%1"" возникла ошибка:'");
	
	// Механизм расширения
	Попытка
		СтандартнаяОбработка = Истина;
		РассылкаОтчетовПереопределяемый.ПередФормированиемСпискаПолучателейРассылки(Рассылка, Запрос, СтандартнаяОбработка, СписокПолучателей);
		Если СтандартнаяОбработка <> Истина Тогда
			Возврат СписокПолучателей;
		КонецЕсли;
	Исключение
		ЗаписьЖурнала(ПараметрыЖурнала, ,
			ШаблонСообщенияОбОшибке, ИнформацияОбОшибке(),
			Строка(ТипПолучателей));
		Возврат СписокПолучателей;
	КонецПопытки;
	
	// Стандартная обработка
	Попытка
		ТЗИтог = Запрос.Выполнить().Выгрузить();
	Исключение
		ЗаписьЖурнала(ПараметрыЖурнала, ,
			ШаблонСообщенияОбОшибке, ИнформацияОбОшибке(),
			Строка(ТипПолучателей));
		Возврат СписокПолучателей;
	КонецПопытки;
	
	Для Каждого СтрИтог Из ТЗИтог Цикл
		Если НЕ ЗначениеЗаполнено(СтрИтог.EMail) Тогда
			Продолжить;
		КонецЕсли;
		
		ТекущийАдрес = СписокПолучателей.Получить(СтрИтог.Получатель);
		Если ТекущийАдрес = Неопределено Тогда
			СписокПолучателей.Вставить(СтрИтог.Получатель, СтрИтог.EMail);
		Иначе
			Если Найти(ВРег(ТекущийАдрес), ВРег(СтрИтог.EMail)) = 0 Тогда
				СписокПолучателей.Вставить(СтрИтог.Получатель, ТекущийАдрес +"; "+ СтрИтог.EMail);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если СписокПолучателей.Количество() = 0 Тогда
		ТекстОшибок = НСтр("ru = 'Не удалось сформировать список получателей %1 рассылки %2 по одной из возможных причин:
		| - У получателей не заполнен почтовый адрес %3
		| - Не заполнен список получателей
		| - Выбраны пустые группы получателей
		| - Получатели помечены на удаление
		| - Недостаточно прав доступа к справочнику'");
		
		ЗаписьЖурнала(ПараметрыЖурнала, УровеньЖурналаРегистрации.Ошибка,
			ТекстОшибок, "",
			"'"+ Строка(ТипПолучателей) +"'",
			"'"+ Строка(ПараметрыЖурнала.Данные) +"'",
			"'"+ Строка(ВидКИ) +"'");
	КонецЕсли;
	
	Возврат СписокПолучателей;
КонецФункции // СформироватьСписокПолучателейРассылки

// Подключает, проверяет и инициализирует отчет по ссылке, используется перед формированием или редактированием параметров
// 
// Параметры:
//   ПараметрыОтчета (Структура) Отчет, настройки и результат его инициализации.
//   ПерсонализацияВозможна (Булево) = Истина, если отчет может быть персонализирован.
//   УникальныйИдентификаторФормы (УникальныйИдентификатор) Необязательный. Адрес размещения СКД.
// 
// Изменяемые параметры: 
//   ПараметрыОтчета (Структура)
//     --- Начальные параметры ---
//       |- Отчет     (СправочникСсылка.ВариантыОтчетов, СправочникСсылка.ДополнительныеОтчетыИОбработки) 
//       |- Настройки (Неопределено, ПользовательскиеНастройкиКомпоновкиДанных, ТаблицаЗначений)
//           | Настройки отчета, которые необходимо использовать,
//           | подробнее см. процедуру "ЗаписатьНастройкиСтрокиОтчеты" модуля "Справочник.РассылкиОтчетов.ФормаОбъекта"
//
//     --- Заполняются для всех отчетов ---
//       |- Имя        (Строка)
//       |- ЭтоВариант (Булево) = Истина, если поставщик - справочник "ВариантыОтчетов".
//       |- СКД        (Булево) = Истина, если отчет на базе СКД.
//       |- Метаданные (ОбъектМетаданных)
//       |- Объект     (ОтчетОбъект.*)
//
//     --- Заполняются для СКД отчетов ---
//       |- СхемаКД               (СхемаКомпоновкиДанных)
//       |- КомпоновщикНастроекКД (КомпоновщикНастроекКомпоновкиДанных)
//       |- НастройкиКД           (НастройкиКомпоновкиДанных)
//       |- АдресСхемыКД          (Строка) Адрес схемы компоновки данных во временном хранилище.
//
//     --- Заполняются для произвольных отчетов ---
//       |- ДоступныеРеквизиты (Структура)
//           |- Ключ     (Строка)    Имя реквизита
//           |- Значение (Структура)
//               |- Представление (Строка)
//               |- Тип           (ОписаниеТипов)
//
//     --- Результат инициализации ---
//       |- Инициализирован (Булево) = Истина, если инициализация прошла успешно.
//       |- Ошибки          (Строка)
//
// Возвращаемое значение: 
//   (Булево) = Истина, если инициализация прошла успешно.
//
Функция ИнициализироватьОтчет(ПараметрыЖурнала, ПараметрыОтчета, ПерсонализацияВозможна, УникальныйИдентификаторФормы = Неопределено) Экспорт
	
	// Проверка повторной инициализации
	Если ПараметрыОтчета.Свойство("Инициализирован") Тогда
		Возврат ПараметрыОтчета.Инициализирован;
	КонецЕсли;
	
	ПараметрыОтчета.Вставить("Инициализирован", Ложь);
	ПараметрыОтчета.Вставить("Ошибки", "");
	ПараметрыОтчета.Вставить("Персонализирован", Ложь);
	ПараметрыОтчета.Вставить("ПерсональныеОтборы", Новый Соответствие);
	
	// Определение структуры настроек
	МассивРеквизитов = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(
		"Имя, ЭтоВариант, СКД, Метаданные, Объект, " +                   // общие параметры
		"СхемаКД, КомпоновщикНастроекКД, АдресСхемыКД, НастройкиКД, " +  // параметры СКД отчетов
		"ДоступныеРеквизиты",); // параметры произвольных отчетов
	Для Каждого ИмяРеквизита Из МассивРеквизитов Цикл
		ИмяРеквизита = СокрЛП(ИмяРеквизита);
		Если НЕ ПараметрыОтчета.Свойство(ИмяРеквизита) Тогда
			ПараметрыОтчета.Вставить(ИмяРеквизита);
		КонецЕсли;
	КонецЦикла;
	
	// Базовые проверки и настройки отчета.
	ПараметрыОтчета.ЭтоВариант = (ТипЗнч(ПараметрыОтчета.Отчет) = Тип("СправочникСсылка.ВариантыОтчетов"));
	Если ПараметрыОтчета.ЭтоВариант Тогда
		
		РезультатПодключения = ВариантыОтчетов.ПодключитьОтчетОбъект(ПараметрыОтчета.Отчет);
		Если Не РезультатПодключения.Подключен Тогда
			ЗаписьЖурнала(ПараметрыЖурнала, УровеньЖурналаРегистрации.Ошибка, РезультатПодключения.Ошибки);
			Возврат ПараметрыОтчета.Инициализирован;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(ПараметрыОтчета, РезультатПодключения, "Имя, Метаданные, Объект");
		
	Иначе
		
		ЗаголовокСообщенияОбОшибке = НСтр("ru = 'Ошибка подключения дополнительного отчета %1:'");
		
		Результат = Неопределено;
		СведенияОВнешнейОбработке = Неопределено;
		Попытка
			ПриПодключенииДопОтчета(ПараметрыОтчета.Отчет, ПараметрыОтчета, Результат);
			СведенияОВнешнейОбработке = ПараметрыОтчета.Объект.СведенияОВнешнейОбработке();
		Исключение
			ЗаписьЖурнала(ПараметрыЖурнала, ,
				ЗаголовокСообщенияОбОшибке, ИнформацияОбОшибке(),
				"'"+ Строка(ПараметрыОтчета.Отчет) +"'");
		КонецПопытки;
		
		Если Результат <> Истина Тогда
			Если Результат = Неопределено Тогда
				ЗаписьЖурнала(ПараметрыЖурнала, УровеньЖурналаРегистрации.Ошибка,
					ЗаголовокСообщенияОбОшибке, НСтр("ru = 'Подсистема ''Дополнительные отчеты и обработки'' недоступна.'"),
					"'"+ Строка(ПараметрыОтчета.Отчет) +"'");
			КонецЕсли;
			Возврат ПараметрыОтчета.Инициализирован;
		КонецЕсли;
		
		// Проверки на соответствия требованиям подсистемы
		Если ТипЗнч(СведенияОВнешнейОбработке) <> Тип("Структура") Тогда
			ЗаписьЖурнала(ПараметрыЖурнала, УровеньЖурналаРегистрации.Ошибка,
				ЗаголовокСообщенияОбОшибке, НСтр("ru = 'Неверно заполнены сведения о внешней обработке.'"),
				"'"+ Строка(ПараметрыОтчета.Отчет) +"'");
			Возврат ПараметрыОтчета.Инициализирован;
		КонецЕсли;
		
		Если НЕ СведенияОВнешнейОбработке.Свойство("РассылкаОтчетов") ИЛИ СведенияОВнешнейОбработке.РассылкаОтчетов <> Истина Тогда
			ЗаписьЖурнала(ПараметрыЖурнала, УровеньЖурналаРегистрации.Ошибка,
				ЗаголовокСообщенияОбОшибке, НСтр("ru = 'Не указаны сведения о внешней обработке, необходимые для рассылки.'"),
				"'"+ Строка(ПараметрыОтчета.Отчет) +"'");
			Возврат ПараметрыОтчета.Инициализирован;
		КонецЕсли;
		
	КонецЕсли;
	
	// Определение принадлежности отчета к Системе Компоновки Данных
	Если ТипЗнч(ПараметрыОтчета.Настройки) = Тип("ПользовательскиеНастройкиКомпоновкиДанных") Тогда
		ПараметрыОтчета.СКД = Истина;
	ИначеЕсли ТипЗнч(ПараметрыОтчета.Настройки) = Тип("ТаблицаЗначений") Тогда
		ПараметрыОтчета.СКД = Ложь;
	ИначеЕсли ТипЗнч(ПараметрыОтчета.Настройки) = Тип("Структура") Тогда
		ПараметрыОтчета.СКД = Ложь;
	Иначе
		ПараметрыОтчета.СКД = (ПараметрыОтчета.Объект.СхемаКомпоновкиДанных <> Неопределено);
	КонецЕсли;
	
	// Инициализация отчета и заполнение его параметров
	Если ПараметрыОтчета.СКД Тогда
		//
		ОпределенИдентификаторФормы = (ТипЗнч(УникальныйИдентификаторФормы) = Тип("УникальныйИдентификатор"));
		
		// Схема компоновки, на основании которой будет выполняться отчет.
		ПараметрыОтчета.СхемаКД = ПараметрыОтчета.Объект.СхемаКомпоновкиДанных;
		
		// Если передан идентификатор формы, то схема должна хранится пока живет форма (особенность СКД)
		Если ОпределенИдентификаторФормы Тогда
			ПараметрыОтчета.АдресСхемыКД = ПоместитьВоВременноеХранилище(
				ПараметрыОтчета.Объект.СхемаКомпоновкиДанных, 
				УникальныйИдентификаторФормы);
		КонецЕсли;
		
		// Описывает связь настроек компоновки данных и схемы компоновки данных.
		ПараметрыОтчета.КомпоновщикНастроекКД = ПараметрыОтчета.Объект.КомпоновщикНастроек;
		
		// Краткий синоним
		КомпоновщикНастроекКД = ПараметрыОтчета.КомпоновщикНастроекКД;
		
		// Выполняет инициализацию компоновщика и его настроек (Настройки) источником доступных настроек.
		КомпоновщикНастроекКД.Инициализировать(
			Новый ИсточникДоступныхНастроекКомпоновкиДанных(
				?(ОпределенИдентификаторФормы, ПараметрыОтчета.АдресСхемыКД, ПараметрыОтчета.СхемаКД)));
		
		// Настройка компоновки данных в целом. 
		Если ПараметрыОтчета.ЭтоВариант Тогда
			ПараметрыОтчета.НастройкиКД = ПараметрыОтчета.Отчет.Настройки.Получить();
			Если ПараметрыОтчета.НастройкиКД = Неопределено Тогда
				ВариантыНастроекКД = ПараметрыОтчета.СхемаКД.ВариантыНастроек;
				КлючВарианта = ПараметрыОтчета.Отчет.КлючВарианта;
				ВариантНастроекКД = ВариантыНастроекКД.Найти(КлючВарианта);
				Если ВариантНастроекКД = Неопределено Тогда
					ЗаписьЖурнала(ПараметрыЖурнала, УровеньЖурналаРегистрации.Ошибка,
						НСтр("ru = 'Вариант ""%1"" не найден для отчета ""%2""'"), ,
						Строка(ПараметрыОтчета.Отчет),
						ПараметрыОтчета.Имя);
					Возврат ПараметрыОтчета.Инициализирован;
				КонецЕсли;
				ПараметрыОтчета.НастройкиКД = ВариантНастроекКД.Настройки;
			КонецЕсли;
		Иначе
			ПараметрыОтчета.НастройкиКД = ПараметрыОтчета.СхемаКД.НастройкиПоУмолчанию;
		КонецЕсли;
		
		// Загружает настройки в компоновщик.
		КомпоновщикНастроекКД.ЗагрузитьНастройки(ПараметрыОтчета.НастройкиКД);
		
		// Восстановление сохраненных значений
		Если ТипЗнч(ПараметрыОтчета.Настройки) = Тип("ПользовательскиеНастройкиКомпоновкиДанных") Тогда
			КомпоновщикНастроекКД.ЗагрузитьПользовательскиеНастройки(ПараметрыОтчета.Настройки);
		КонецЕсли;
		
		//// Восстановление работоспособности настроек
		//КомпоновщикНастроекКД.Восстановить();
		
		// Персональные отборы
		Если ПерсонализацияВозможна Тогда
			ПользовательскиеНастройкиКД = КомпоновщикНастроекКД.ПользовательскиеНастройки;
			
			Для Каждого Настройка Из ПользовательскиеНастройкиКД.Элементы Цикл
				Если ТипЗнч(Настройка) = Тип("ЭлементОтбораКомпоновкиДанных") 
					И Настройка.Использование
					И ТипЗнч(Настройка.ПравоеЗначение) = Тип("Строка") Тогда
					
					ЗначениеНастройки = Настройка.ПравоеЗначение;
					
				ИначеЕсли ТипЗнч(Настройка) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") 
					И Настройка.Использование
					И ТипЗнч(Настройка.Значение) = Тип("Строка")Тогда
					
					ЗначениеНастройки = Настройка.Значение;
					
				Иначе
					
					Продолжить;
					
				КонецЕсли;
				
				Если ЗначениеНастройки = "[Получатель]" Тогда
					ПараметрыОтчета.ПерсональныеОтборы.Вставить(ПользовательскиеНастройкиКД.ПолучитьИдентификаторПоОбъекту(Настройка));
				КонецЕсли;
			КонецЦикла;
		КонецЕсли; // ПерсонализацияВозможна
		
	Иначе // ПараметрыОтчета.СКД 
		
		// Доступные реквизиты отчета
		ПараметрыОтчета.ДоступныеРеквизиты = Новый Структура;
		Для Каждого Реквизит Из ПараметрыОтчета.Метаданные.Реквизиты Цикл
			ПараметрыОтчета.ДоступныеРеквизиты.Вставить(Реквизит.Имя, 
				Новый Структура("Представление, Тип", Реквизит.Представление(), Реквизит.Тип));
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ПараметрыОтчета.Настройки) Тогда
			
			// Проверка наличия реквизитов
			// Подготовка соответствий персональных отборов
			// Установка статичных значений реквизитов
			Для Каждого КлючИЗначение Из ПараметрыОтчета.Настройки Цикл
				Настройка = КлючИЗначение.Ключ;
				ЗначениеНастройки = КлючИЗначение.Значение;
				
				// Доступность реквизита
				Если НЕ ПараметрыОтчета.ДоступныеРеквизиты.Свойство(Настройка) Тогда
					Продолжить;
				КонецЕсли;
				
				// Принадлежность к механизму персонализации
				Если ПерсонализацияВозможна И ЗначениеНастройки = "[Получатель]" Тогда
					// Регистрация поля персонального отбора
					ПараметрыОтчета.ПерсональныеОтборы.Вставить(Настройка);
				Иначе
					// Установка значения реквизита объекта отчета
					ПараметрыОтчета.Объект[Настройка] = ЗначениеНастройки;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли; // ПараметрыОтчета.СКД
	
	ПараметрыОтчета.Персонализирован = (ПараметрыОтчета.ПерсональныеОтборы.Количество() > 0);
	ПараметрыОтчета.Инициализирован = Истина;
	
	Возврат ПараметрыОтчета.Инициализирован;
КонецФункции // ИнициализироватьОтчет()

// Формирует отчет, проверяя что результат пустой.
//
// Параметры:
//   ПараметрыЖурнала (Структура) Параметры записи в журнал регистрации. См. описание к процедуре "ЗаписьЖурнала".
//   ПараметрыОтчета  (Структура) См. возвращаемое значение функции "ИнициализироватьОтчет"
//   Получатель       (СправочникСсылка.*)
//
// Возвращаемое значение: 
//   Результат (Структура)
//       |- ТабДок (ТабличныйДокумент) Результат формирования отчета
//       |- Пустой (Булево) = Истина, если отчет не содержал ни одного значения параметра
//
Функция СформироватьОтчет(ПараметрыЖурнала, ПараметрыОтчета, Получатель = Неопределено) Экспорт
	Результат = Новый Структура("ТабДок, СФормирован, Пустой", Новый ТабличныйДокумент, Ложь, Истина);
	
	Если НЕ ПараметрыОтчета.Свойство("Инициализирован") Тогда
		ЗаписьЖурнала(ПараметрыЖурнала, ,
			НСтр("ru = 'Отчет ''%1'' не инициализирован'"), ,
			Строка(ПараметрыОтчета.Отчет));
		Возврат Результат;
	КонецЕсли;
	
	ОтчетОбъект = ПараметрыОтчета.Объект;
	
	Если ПараметрыОтчета.СКД Тогда
		
		КомпоновщикНастроекКД = ПараметрыОтчета.КомпоновщикНастроекКД;
		СхемаКД = ПараметрыОтчета.СхемаКД;
		
		// Заполнение персонализированных данных получателей.
		Если Получатель <> Неопределено И ПараметрыОтчета.Свойство("ПерсональныеОтборы") Тогда
			ПользовательскиеНастройкиКД = КомпоновщикНастроекКД.ПользовательскиеНастройки;
			БылиОшибки = Ложь;
			Для Каждого КлючИЗначение Из ПараметрыОтчета.ПерсональныеОтборы Цикл
				Настройка = ПользовательскиеНастройкиКД.ПолучитьОбъектПоИдентификатору(КлючИЗначение.Ключ);
				Если      ТипЗнч(Настройка) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
					Настройка.ПравоеЗначение = Получатель;
				ИначеЕсли ТипЗнч(Настройка) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
					Настройка.Значение = Получатель;
				КонецЕсли;
			КонецЦикла;
			Если БылиОшибки Тогда
				Возврат Результат;
			КонецЕсли;
		КонецЕсли;
		
		ИсходныеСообщенияПользователю = ПолучитьСообщенияПользователю(Истина);
		Если НЕ ОтчетОбъект.ПроверитьЗаполнение() Тогда
			ТекстИсключения = "";
			СообщенияПользователю = ПолучитьСообщенияПользователю(Истина);
			Для Каждого Сообщение Из СообщенияПользователю Цикл
				ТекстИсключения = ТекстИсключения + Символы.ПС + Сообщение.Текст;
			КонецЦикла;
			ЗаписьЖурнала(ПараметрыЖурнала, УровеньЖурналаРегистрации.Ошибка,
				НСтр("ru = 'Отчет ''%1'' не прошел проверку заполнения:'"), СокрЛ(ТекстИсключения),
				Строка(ПараметрыОтчета.Отчет));
			Результат.ТабДок = Неопределено;
			Возврат Результат;
		КонецЕсли;
		Для Каждого Сообщение Из ИсходныеСообщенияПользователю Цикл
			Сообщение.Сообщить();
		КонецЦикла; 
		
		// Формирование табличного документа.
		ОтчетОбъект.СкомпоноватьРезультат(Результат.ТабДок);
		Результат.Сформирован = Истина;
		
		// Пропуск проверки на то, что отчет пустой.
		Если ПараметрыОтчета.ОтправлятьЕслиПустой Тогда
			Результат.Пустой = Ложь;
			Возврат Результат;
		КонецЕсли;
		
		// Передача флажка "ОтчетПустой" из отчета.
		Если ОтчетОбъект.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Свойство("ОтчетПустой") Тогда
			Результат.Пустой = ОтчетОбъект.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.ОтчетПустой;
			Возврат Результат;
		ИначеЕсли ОтчетОбъект.КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Свойство("ОтчетПустой") Тогда
			Результат.Пустой = ОтчетОбъект.КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.ОтчетПустой;
			Возврат Результат;
		КонецЕсли;
		
		// Объект для создания макета компоновки данных.
		КомпоновщикМакетаКД = Новый КомпоновщикМакетаКомпоновкиДанных;
		
		// Выполняет компоновку макета.
		МакетКД = КомпоновщикМакетаКД.Выполнить(СхемаКД, КомпоновщикНастроекКД.ПолучитьНастройки());
		
		// Пропуск проверки на то, что отчет пустой.
		Если ЕстьВнешнийНаборДанных(МакетКД.НаборыДанных) Тогда
			Результат.Пустой = Ложь;
			Возврат Результат;
		КонецЕсли;
		
		// Объект, выполняющий компоновку данных.
		ПроцессорКД = Новый ПроцессорКомпоновкиДанных;
		
		// Инициализировать объект.
		ПроцессорКД.Инициализировать(МакетКД, , , Истина);
		
		// Объект для вывода результата компоновки в табличный документ.
		ПроцессорВыводаРезультатаКД = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
		
		// Устанавливает табличный документ, в который нужно выводить результат.
		ПроцессорВыводаРезультатаКД.УстановитьДокумент(Новый ТабличныйДокумент);
		
		// Последовательный вывод
		ПроцессорВыводаРезультатаКД.НачатьВывод();
		
		// Получает следующий элемент результата компоновки.
		ЭлементРезультатаКД = ПроцессорКД.Следующий();
		Пока ЭлементРезультатаКД <> Неопределено Цикл
			
			// Вывести элемент результата компоновки отчета в документ.
			ПроцессорВыводаРезультатаКД.ВывестиЭлемент(ЭлементРезультатаКД);
			
			// Определить не пустой результат
			Если Результат.Пустой Тогда
				Для Каждого ЗначениеПараметраМакетаКД Из ЭлементРезультатаКД.ЗначенияПараметров Цикл
					Если ЗначениеЗаполнено(ЗначениеПараметраМакетаКД.Значение) Тогда
						ПроцессорВыводаРезультатаКД.ЗакончитьВывод();
						Результат.Пустой = Ложь;
						Возврат Результат;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			// Получает следующий элемент результата компоновки.
			ЭлементРезультатаКД = ПроцессорКД.Следующий();
		КонецЦикла;
		
		// Указание объекту о том, что вывод результата завершен.
		ПроцессорВыводаРезультатаКД.ЗакончитьВывод();
		
	Иначе
		
		// Заполнение значения персонализированных отборов произвольных отчетов
		Если Получатель <> Неопределено И ПараметрыОтчета.Свойство("ПерсональныеОтборы") Тогда
			БылиОшибки = Ложь;
			Для Каждого КлючИЗначение Из ПараметрыОтчета.ПерсональныеОтборы Цикл
				ОтчетОбъект[КлючИЗначение.Ключ] = Получатель;
			КонецЦикла;
			Если БылиОшибки Тогда
				Возврат Результат;
			КонецЕсли;
		КонецЕсли;
		
		// Формирование произвольного отчета
		Результат.ТабДок = ОтчетОбъект.Сформировать();
		Результат.Сформирован = Истина;
		
		Если ТипЗнч(Результат.ТабДок) = Тип("ТабличныйДокумент") Тогда
			Результат.Пустой = Ложь;
		Иначе
			Результат.ТабДок = Новый ТабличныйДокумент;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Выполняет транспортировку вложений для всех способов доставки.
//
// Параметры:
//   Автор             (СправочникСсылка.*) Автор рассылки
//   ПараметрыДоставки (Структура)    см. функцию ВыполнитьРассылку
//   Вложения          (Соответствие) см. функцию ДобавитьОтчетыВоВложения
//
// Возвращаемое значение: 
//   Результат (Структура)
//       |- Доставка  (Строка) Представление способа доставки
//       |- Выполнена (Булево) = Истина, если доставка выполнена хотя бы одним из способов.
//
Функция ВыполнитьДоставку(ПараметрыЖурнала, ПараметрыДоставки, Вложения) Экспорт
	Результат = Ложь;
	ШаблонСообщенияОбОшибке = НСтр("ru = 'Ошибка доставки отчетов'");
	
	Если ПараметрыДоставки.ИспользоватьСетевойКаталог Тогда
		
		СетевойКаталогСервера = ПараметрыДоставки.СетевойКаталогWindows;
		ТипПлатформыСервера = ОбщегоНазначенияПовтИсп.ТипПлатформыСервера();
		
		Если ТипПлатформыСервера = ТипПлатформы.Linux_x86
			ИЛИ ТипПлатформыСервера = ТипПлатформы.Linux_x86_64 Тогда
			СетевойКаталогСервера = ПараметрыДоставки.СетевойКаталогLinux;
		КонецЕсли;
		
		Попытка
			Для Каждого Вложение Из Вложения Цикл
				КопироватьФайл(Вложение.Значение, СетевойКаталогСервера + Вложение.Ключ);
				Если ПараметрыДоставки.ДобавлятьСсылки <> "" Тогда
					ПараметрыДоставки.ПредставлениеОтчетовПолучателя = СтрЗаменить(
						ПараметрыДоставки.ПредставлениеОтчетовПолучателя,
						Вложение.Значение,
						ПараметрыДоставки.СетевойКаталогWindows + Вложение.Ключ);
				КонецЕсли;
			КонецЦикла;
			Результат = Истина;
			ПараметрыДоставки.ВыполненаВСетевойКаталог = Истина;
		Исключение
			ЗаписьЖурнала(ПараметрыЖурнала, ,
				ШаблонСообщенияОбОшибке, ИнформацияОбОшибке());
		КонецПопытки;
		
	КонецЕсли; // ПараметрыДоставки.ИспользоватьСетевойКаталог
		
	Если ПараметрыДоставки.ИспользоватьFTPРесурс Тогда
		
		Цель = "ftp://"+ ПараметрыДоставки.Сервер +":"+ Формат(ПараметрыДоставки.Порт, "ЧН=0; ЧГ=0") + ПараметрыДоставки.Каталог;
		
		Попытка
			Прокси = Неопределено;
			ПриОпределенииНастроекПрокси(Прокси);
			Соединение = Новый FTPСоединение(
				ПараметрыДоставки.Сервер, 
				ПараметрыДоставки.Порт, 
				ПараметрыДоставки.Логин, 
				ПараметрыДоставки.Пароль, 
				Прокси, 
				ПараметрыДоставки.ПассивноеСоединение, 
				15);
			Соединение.УстановитьТекущийКаталог(ПараметрыДоставки.Каталог);
			Для Каждого Вложение Из Вложения Цикл
				Соединение.Записать(Вложение.Значение, ПараметрыДоставки.Каталог + Вложение.Ключ);
				Если ПараметрыДоставки.ДобавлятьСсылки <> "" Тогда
					ПараметрыДоставки.ПредставлениеОтчетовПолучателя = СтрЗаменить(
						ПараметрыДоставки.ПредставлениеОтчетовПолучателя,
						Вложение.Значение,
						Цель + Вложение.Ключ);
				КонецЕсли;
			КонецЦикла;
			
			Результат = Истина;
			ПараметрыДоставки.ВыполненаНаFTP = Истина;
		Исключение
			ЗаписьЖурнала(ПараметрыЖурнала, ,
				ШаблонСообщенияОбОшибке, ИнформацияОбОшибке(),);
		КонецПопытки;
		
	КонецЕсли; // ПараметрыДоставки.ИспользоватьFTPРесурс
	
	Если ПараметрыДоставки.ИспользоватьПапку Тогда
		
		Попытка
			ПриВыполненииДоставкиВПапку(ПараметрыДоставки, Вложения);
			Результат = Истина;
			ПараметрыДоставки.ВыполненаВПапку = Истина;
		Исключение
			ЗаписьЖурнала(ПараметрыЖурнала, ,
				ШаблонСообщенияОбОшибке, ИнформацияОбОшибке());
		КонецПопытки;
		
	КонецЕсли; // ПараметрыДоставки.ИспользоватьПапку

	Если ПараметрыДоставки.ИспользоватьЭлектроннуюПочту Тогда
		
		Если ПараметрыДоставки.ТолькоУведомить Тогда
			ШаблонСообщенияОбОшибке = НСтр("ru = 'Ошибка отправки уведомлений по электронной почте:'");
			ВложенияПисьма = Новый Соответствие;
		Иначе
			ШаблонСообщенияОбОшибке = НСтр("ru = 'Ошибка отправки отчетов по электронной почте:'");
			ВложенияПисьма = Вложения;
		КонецЕсли;
		
		Попытка
			ОтправитьОтчетыПолучателю(ВложенияПисьма, ПараметрыДоставки);
			Если НЕ ПараметрыДоставки.ТолькоУведомить Тогда
				Результат = Истина;
			КонецЕсли;
			Если Результат = Истина Тогда
				ПараметрыДоставки.ВыполненаПоЭлектроннойПочте = Истина;
			КонецЕсли;
		Исключение
			ЗаписьЖурнала(ПараметрыЖурнала, ,
				ШаблонСообщенияОбОшибке, ИнформацияОбОшибке());
		КонецПопытки;
		
	КонецЕсли; // ПараметрыДоставки.ИспользоватьЭлектроннуюПочту
	
	Возврат Результат;
КонецФункции

// Получает имя пользователя базы данных по ссылке справочника "Пользователи".
//
// Параметры:
//   Пользователь (СправочникСсылка.Пользователи) 
//
// Возвращаемое значение:
//   (Строка) Имя пользователя
//
Функция ПолучитьИмяПользователяИБ(Пользователь) Экспорт
	Если НЕ ЗначениеЗаполнено(Пользователь) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПользовательИБ = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(
		ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Пользователь, "ИдентификаторПользователяИБ"));
	Если ПользовательИБ = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ПользовательИБ.Имя;
КонецФункции // ПолучитьИмяПользователяИБ

// Создает запись в журнале регистрации и сообщениях пользователю;
//   Поддерживает до 4х параметров в комментарии при помощи функции
//   СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку.
//   Поддерживает передачу информации об ошибке, подробное представление
//   ошибки добавляется в комментарий записи в журнал регистрации.
// 
// Параметры:
//   ПараметрыЖурнала (Структура) Параметры записи в журнал регистрации
//       |- ИмяСобытия (Строка)           Имя события (или группы событий)
//       |- Метаданные (ОбъектМетаданных) Метаданные для привязки события журнала регистрации
//       |- Данные     (*)                Данные для привязки события журнала регистрации
//   УровеньЖурнала          (УровеньЖурналаРегистрации) Важность сообщения для администратора.
//   КомментарийСПараметрами (Строка) Комментарий, который может содержать параметры %1, %2, %3 и %4.
//   ИнформацияОбОшибке      (...)    Информация об ошибке, которая будет размещена после комментария.
//       |- (ИнформацияОбОшибке)
//       |- (Строка)
//   Параметр1 (Строка) Для подстановки в КомментарийСПараметрами вместо %1.
//   Параметр2 (Строка) Для подстановки в КомментарийСПараметрами вместо %2.
//   Параметр3 (Строка) Для подстановки в КомментарийСПараметрами вместо %3.
//   Параметр4 (Строка) Для подстановки в КомментарийСПараметрами вместо %4.
//
Процедура ЗаписьЖурнала(ПараметрыЖурнала, УровеньЖурнала = Неопределено, КомментарийСПараметрами = "", 
	ИнформацияОбОшибке = Неопределено, 
	Параметр1 = Неопределено, 
	Параметр2 = Неопределено, 
	Параметр3 = Неопределено, 
	Параметр4 = Неопределено) Экспорт
	
	// Определение уровня журнала регистрации на основе типа переданного сообщения об ошибке
	Если ТипЗнч(УровеньЖурнала) <> Тип("УровеньЖурналаРегистрации") Тогда
		Если ТипЗнч(ИнформацияОбОшибке) = Тип("ИнформацияОбОшибке") Тогда
			УровеньЖурнала = УровеньЖурналаРегистрации.Ошибка;
		ИначеЕсли ТипЗнч(ИнформацияОбОшибке) = Тип("Строка") Тогда
			УровеньЖурнала = УровеньЖурналаРегистрации.Предупреждение;
		Иначе
			УровеньЖурнала = УровеньЖурналаРегистрации.Информация;
		КонецЕсли;
	КонецЕсли;
	
	ЗаписатьВЖурнал = ЗначениеЗаполнено(ПараметрыЖурнала.Данные);
	СообщитьПользователю = ПараметрыЖурнала.Свойство("МассивОшибок") И (
		УровеньЖурнала = УровеньЖурналаРегистрации.Ошибка 
		ИЛИ УровеньЖурнала = УровеньЖурналаРегистрации.Предупреждение);
	
	// Комментарий для журнала регистрации и пользователя
	Если Параметр1 <> Неопределено Тогда
		КомментарийСПараметрами = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			КомментарийСПараметрами, Параметр1, Параметр2, Параметр3, Параметр4);
	КонецЕсли;
	
	ТекстДляЖурнала      = КомментарийСПараметрами;
	ТекстДляПользователя = КомментарийСПараметрами;
	Если ТипЗнч(ИнформацияОбОшибке) = Тип("ИнформацияОбОшибке") Тогда
		ТекстДляЖурнала      = ТекстДляЖурнала      + Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
		ТекстДляПользователя = ТекстДляПользователя + Символы.ПС + ФункцииОтчетовКлиентСервер.КраткоеПредставлениеОшибкиФормированияОтчета(ИнформацияОбОшибке);
	ИначеЕсли ТипЗнч(ИнформацияОбОшибке) = Тип("Строка") Тогда
		ТекстДляЖурнала      = ТекстДляЖурнала      + Символы.ПС + ИнформацияОбОшибке;
		ТекстДляПользователя = ТекстДляПользователя + Символы.ПС + ИнформацияОбОшибке;
	КонецЕсли;
	ТекстДляЖурнала      = СокрЛП(ТекстДляЖурнала);
	ТекстДляПользователя = СокрЛП(ТекстДляПользователя);
	
	// Журнал регистрации 
	Если ЗаписатьВЖурнал Тогда
		УстановитьПривилегированныйРежим(Истина);
		ЗаписьЖурналаРегистрации(
			ПараметрыЖурнала.ИмяСобытия, 
			УровеньЖурнала, 
			ПараметрыЖурнала.Метаданные, 
			ПараметрыЖурнала.Данные, 
			ТекстДляЖурнала);
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Если СообщитьПользователю Тогда
		Если УровеньЖурнала = УровеньЖурналаРегистрации.Ошибка Тогда
			ПараметрыЖурнала.Вставить("БылиОшибки", Истина);
		Иначе
			ПараметрыЖурнала.Вставить("БылиПредупреждения", Истина);
		КонецЕсли;
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = ТекстДляПользователя;
		Сообщение.УстановитьДанные(ПараметрыЖурнала.Данные);
		Если ПараметрыЖурнала.Свойство("МассивОшибок") Тогда
			ПараметрыЖурнала.МассивОшибок.Добавить(Сообщение);
		Иначе
			Сообщение.Сообщить();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Локальные служебные процедуры и функции

// Помимо формирования отчетов выполняет персонализацию отчетов по списку получателей
//   и формирует отчеты в разрезах получателей (если это необходимо)
//
// Параметры:
//   ПараметрыЖурнала (Структура) Параметры записи в журнал регистрации
//       |- Префикс    (Строка)           Префикс для имени события журнала регистрации
//       |- Метаданные (ОбъектМетаданных) Метаданные для записи в журнал регистрации
//       |- Данные     (*)                Данные для записи в журнал регистрации
//   ПараметрыОтчета   (Структура)       см. функцию ВыполнитьРассылку, параметр ТаблицаОтчетов
//   ДеревоОтчетов     (ТаблицаЗначений) Список отчетов с результатом формирования в виде табличных документов
//   ПараметрыДоставки (Структура)       см. функцию ВыполнитьРассылку
//   Получатель        (СправочникСсылка.*)
//
// Результат выполнения записывается в ДеревоОтчетов
// Ошибки записываются в журнал регистрации и в сообщения сеанса пользователя
//
Процедура СформироватьИСохранитьОтчет(ПараметрыЖурнала, ПараметрыОтчета, ДеревоОтчетов, ПараметрыДоставки, ПолучательСсылка)
	
	// Определение корневой строки дерева, соответствующей получателю
	// 1 - Получатели 
	//   Ключ      - Ссылка
	//   Значение  - каталог получателя
	//   Настройки - представление сформированных отчетов
	СтрокаПолучатель = ОпределитьСтрокуДереваДляПолучателя(ДеревоОтчетов, ПолучательСсылка, ПараметрыДоставки);
	КаталогПолучателя = СтрокаПолучатель.Значение;
	
	// Формирование отчета для получателя
	Результат = СформироватьОтчет(ПараметрыЖурнала, ПараметрыОтчета, ПолучательСсылка);
	
	// Проверка результата
	Если НЕ Результат.Сформирован ИЛИ (Результат.Пустой И НЕ ПараметрыОтчета.ОтправлятьЕслиПустой) Тогда
		Возврат;
	КонецЕсли;
	
	// Регистрация промежуточного результата
	// 2 - Табличные документы получателей
	//   Ключ      - Имя отчета
	//   Значение  - Табличный документ
	//   Настройки - ............. все параметры отчета .................
	СтрокаОтчет = СтрокаПолучатель.Строки.Добавить();
	СтрокаОтчет.Уровень   = 2;
	СтрокаОтчет.Ключ      = Строка(ПараметрыОтчета.Отчет);
	СтрокаОтчет.Значение  = Результат.ТабДок;
	СтрокаОтчет.Настройки = ПараметрыОтчета;
	
	ПредставлениеОтчета = СокрЛП(СтрокаОтчет.Ключ) + " ([ПредставлениеФорматов])";
	
	// Сохранение табличного документа в форматы
	ПредставлениеФорматов = "";
	Для Каждого Формат Из ПараметрыОтчета.Форматы Цикл
		
		ПараметрыФормата = ПараметрыДоставки.ПараметрыФорматов.Получить(Формат);
		
		Если ПараметрыФормата = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ПолноеИмяФайла = КаталогПолучателя + ПривестиИмяФайла(
			СтрокаОтчет.Ключ 
			+ " ("
			+ ПараметрыФормата.Имя 
			+ ")" 
			+ ?(ПараметрыФормата.Расширение = Неопределено, "", ПараметрыФормата.Расширение));
		
		НайтиСвободноеИмяФайла(ПолноеИмяФайла);
		
		СтандартнаяОбработка = Истина;
		
		// Механизм расширения
		РассылкаОтчетовПереопределяемый.ПередСохранениемТабличногоДокументаВФормат(
			СтандартнаяОбработка, 
			СтрокаОтчет.Значение, 
			Формат, 
			ПолноеИмяФайла);
		
		// Сохранение отчета встроенными средствами подсистемы
		Если СтандартнаяОбработка = Истина Тогда
			ЗаголовокОшибки = НСтр("ru = 'Ошибка записи отчета %1 в формат %2:'");
			
			Если ПараметрыФормата.ТипФайла = Неопределено Тогда
				ЗаписьЖурнала(ПараметрыЖурнала, УровеньЖурналаРегистрации.Ошибка,
					ЗаголовокОшибки, НСтр("ru = 'Формат не поддерживается'"),
					"'"+ СтрокаОтчет.Ключ +"'", 
					"'"+ ПараметрыФормата.Имя +"'");
				Продолжить;
			КонецЕсли;
			
			Попытка
				СтрокаОтчет.Значение.Записать(ПолноеИмяФайла, ПараметрыФормата.ТипФайла);
			Исключение
				ЗаписьЖурнала(ПараметрыЖурнала, УровеньЖурналаРегистрации.Ошибка,
					ЗаголовокОшибки, ИнформацияОбОшибке(), 
					"'"+ СтрокаОтчет.Ключ +"'", 
					"'"+ ПараметрыФормата.Имя +"'");
				Продолжить;
			КонецПопытки;
		КонецЕсли; // СтандартнаяОбработка
		
		// Проверки и регистрация результата
		ВременныйФайл = Новый Файл(ПолноеИмяФайла);
		Если НЕ ВременныйФайл.Существует() Тогда
			ЗаписьЖурнала(ПараметрыЖурнала, УровеньЖурналаРегистрации.Ошибка,
				ЗаголовокОшибки + Символы.ПС + НСтр("ru = 'Файл %3 не найден.'"), ,
				"'"+ СтрокаОтчет.Ключ +"'", 
				"'"+ ПараметрыФормата.Имя +"'",
				"'"+ ВременныйФайл.ПолноеИмя +"'");
			Продолжить;
		КонецЕсли;
		
		// Регистрация конечного результата - сохраненного отчета во временном каталоге
		// 3 - Файлы получателей
		//   Ключ      - имя файла
		//   Значение  - полный путь к файлу
		//   Настройки - настройки файла
		СтрокаФайл = СтрокаОтчет.Строки.Добавить();
		СтрокаФайл.Уровень = 3;
		СтрокаФайл.Ключ      = ВременныйФайл.Имя;
		СтрокаФайл.Значение  = ВременныйФайл.ПолноеИмя;
		
		СтрокаФайл.Настройки = Новый Структура("ФайлСКаталогом, ИмяФайла, ПолноеИмяФайла, ИмяКаталога, ПолноеИмяКаталога, 
		|Формат, Имя, Расширение, ТипФайла, Ссылка");
		
		СтрокаФайл.Настройки.Формат = Формат;
		ЗаполнитьЗначенияСвойств(СтрокаФайл.Настройки, ПараметрыФормата, "Имя, Расширение, ТипФайла");
		
		СтрокаФайл.Настройки.ИмяФайла          = ВременныйФайл.Имя;
		СтрокаФайл.Настройки.ПолноеИмяФайла    = ВременныйФайл.ПолноеИмя;
		СтрокаФайл.Настройки.ИмяКаталога       = ВременныйФайл.ИмяБезРасширения + "_files";
		СтрокаФайл.Настройки.ПолноеИмяКаталога = ВременныйФайл.Путь + СтрокаФайл.Настройки.ИмяКаталога + "\";
		
		КаталогФайла = Новый Файл(СтрокаФайл.Настройки.ПолноеИмяКаталога);
		
		СтрокаФайл.Настройки.ФайлСКаталогом = (КаталогФайла.Существует() И КаталогФайла.ЭтоКаталог());
		
		Если СтрокаФайл.Настройки.ФайлСКаталогом И НЕ ПараметрыДоставки.Архивировать Тогда
			// Каталог вместе с файлом архивируются, а вместо файла отправляется архив файла с каталогом
			ИмяАрхива       = ВременныйФайл.ИмяБезРасширения + ".zip";
			ПолноеИмяАрхива = КаталогПолучателя + ИмяАрхива;
			
			РежимСохранения = РежимСохраненияПутейZIP.СохранятьОтносительныеПути;
			РежимОбработки  = РежимОбработкиПодкаталоговZIP.ОбрабатыватьРекурсивно;
			
			ЗаписьZipФайла = Новый ЗаписьZipФайла(ПолноеИмяАрхива);
			ЗаписьZipФайла.Добавить(СтрокаФайл.Настройки.ПолноеИмяФайла,    РежимСохранения, РежимОбработки);
			ЗаписьZipФайла.Добавить(СтрокаФайл.Настройки.ПолноеИмяКаталога, РежимСохранения, РежимОбработки);
			ЗаписьZipФайла.Записать();
			
			СтрокаФайл.Ключ     = ИмяАрхива;
			СтрокаФайл.Значение = ПолноеИмяАрхива;
		КонецЕсли;
		
		КаталогФайла = Неопределено;
		ВременныйФайл = Неопределено;
		
		ПредставлениеФорматов = ПредставлениеФорматов 
			+ ?(ПредставлениеФорматов = "", "", ", ") 
			// открывающий тег для ссылок (позже полные пути к файлам будут заменены на ссылки на конечных ресурсах)
			+ ?(ПараметрыДоставки.ДобавлятьСсылки = "КФорматам", "<a href = '"+ СтрокаФайл.Значение +"'>", "")
			// имя формата
			+ ПараметрыФормата.Имя
			// закрывающий тег для ссылок
			+ ?(ПараметрыДоставки.ДобавлятьСсылки = "КФорматам", "</a>", "");
			
		//
		Если ПараметрыДоставки.ДобавлятьСсылки = "ПослеОтчетов" Тогда
			ПредставлениеОтчета = ПредставлениеОтчета + Символы.ПС + "<" + СтрокаФайл.Значение + ">";
		КонецЕсли;
		
	КонецЦикла; // Для Каждого Формат Из ПараметрыОтчета.Форматы Цикл
	
	// Представление конкретного отчета
	ПредставлениеОтчета = СтрЗаменить(ПредставлениеОтчета, "[ПредставлениеФорматов]", ПредставлениеФорматов);
	СтрокаОтчет.Настройки.Вставить("ПредставлениеВПисьме", ПредставлениеОтчета);
	
КонецПроцедуры

// Вспомогательная процедура функции "ВыполнитьРассылку" - заполняет значения по умолчанию для параметров, 
//   которые не были переданы явно.
//   Так же подготавливает и заполняет параметры, необходимые для рассылки
// 
// Параметры
// см. функцию ВыполнитьРассылку
//
Функция ЗаполнитьПараметрыРассылкиПараметрамиПоУмолчанию(ТаблицаОтчетов, ПараметрыДоставки, Рассылка, ПараметрыЖурнала)
	
	// Параметры записи в журнал регистрации
	Если ТипЗнч(ПараметрыЖурнала) <> Тип("Структура") Тогда
		ПараметрыЖурнала = Новый Структура;
	КонецЕсли;
	
	Если НЕ ПараметрыЖурнала.Свойство("ИмяСобытия") Тогда
		ПараметрыЖурнала.Вставить("ИмяСобытия", НСтр("ru = 'Рассылка отчетов. Запуск по требованию'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()));
	КонецЕсли;
	
	Если НЕ ПараметрыЖурнала.Свойство("Данные") Тогда
		ПараметрыЖурнала.Вставить("Данные", Рассылка);
	КонецЕсли;
	
	Если НЕ ПараметрыЖурнала.Свойство("Метаданные") Тогда
		ПараметрыЖурнала.Вставить("Метаданные", ПараметрыЖурнала.Данные.Метаданные());
	КонецЕсли;
	
	// Проверка прав доступа
	Если НЕ ПравоВывода(ПараметрыЖурнала) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ПараметрыДоставки.Вставить("Рассылка", СокрЛП(Строка(Рассылка)));
	ПараметрыДоставки.Вставить("ДатаВыполнения", ТекущаяДатаСеанса());
	ПараметрыДоставки.Вставить("БылиОшибки",                   Ложь);
	ПараметрыДоставки.Вставить("БылиПредупреждения",           Ложь);
	ПараметрыДоставки.Вставить("ВыполненаВПапку",              Ложь);
	ПараметрыДоставки.Вставить("ВыполненаВСетевойКаталог",     Ложь);
	ПараметрыДоставки.Вставить("ВыполненаНаFTP",               Ложь);
	ПараметрыДоставки.Вставить("ВыполненаПоЭлектроннойПочте",  Ложь);
	ПараметрыДоставки.Вставить("ВыполненныеСпособыПубликации", "");
	
	Если ПараметрыДоставки.ИспользоватьПапку Тогда
		Если НЕ ЗначениеЗаполнено(ПараметрыДоставки.Папка) Тогда
			ПараметрыДоставки.ИспользоватьПапку = Ложь;
			ЗаписьЖурнала(ПараметрыЖурнала, УровеньЖурналаРегистрации.Предупреждение,
				НСтр("ru = 'Папка не заполнена, доставка в папку отключена'"), ,);
		Иначе
			ПравоДоступа = Истина;
			ПриОпределенииПраваИзмененияПапкиИФайлов(ПараметрыДоставки.Папка, ПравоДоступа);
			Если НЕ ПравоДоступа Тогда
				ПараметрыДоставки.ИспользоватьПапку = Ложь;
				УстановитьПривилегированныйРежим(Истина);
				ПредставлениеПапки = Строка(ПараметрыДоставки.Папка);
				УстановитьПривилегированныйРежим(Ложь);
				ЗаписьЖурнала(ПараметрыЖурнала, УровеньЖурналаРегистрации.Ошибка,
					НСтр("ru = 'Недостаточно прав на изменение файлов папки %1, доставка в папку отключена'"), ,
					"'"+ ПредставлениеПапки +"'");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыДоставки.ИспользоватьСетевойКаталог Тогда
		Если НЕ ЗначениеЗаполнено(ПараметрыДоставки.СетевойКаталогWindows) 
			ИЛИ НЕ ЗначениеЗаполнено(ПараметрыДоставки.СетевойКаталогLinux) Тогда
			
			Если ЗначениеЗаполнено(ПараметрыДоставки.СетевойКаталогWindows) Тогда
				ЗначениеПодстановки = НСтр("ru = 'Linux'");
			ИначеЕсли ЗначениеЗаполнено(ПараметрыДоставки.СетевойКаталогLinux) Тогда
				ЗначениеПодстановки = НСтр("ru = 'Windows'");
			Иначе
				ЗначениеПодстановки = НСтр("ru = 'Windows и Linux'");
			КонецЕсли;
			
			ПараметрыДоставки.ИспользоватьСетевойКаталог = Ложь;
			ЗаписьЖурнала(ПараметрыЖурнала, УровеньЖурналаРегистрации.Ошибка,
				НСтр("ru = 'Сетевой каталог %1 не выбран, доставка в сетевой каталог отключена'"), ,
				ЗначениеПодстановки);
			
		Иначе
			
			ПараметрыДоставки.СетевойКаталогWindows = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(
				ПараметрыДоставки.СетевойКаталогWindows);
			ПараметрыДоставки.СетевойКаталогLinux = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(
				ПараметрыДоставки.СетевойКаталогLinux);
			
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыДоставки.ИспользоватьFTPРесурс И НЕ ЗначениеЗаполнено(ПараметрыДоставки.Сервер) Тогда
		ПараметрыДоставки.ИспользоватьFTPРесурс = Ложь;
		ЗаписьЖурнала(ПараметрыЖурнала, УровеньЖурналаРегистрации.Ошибка,
			НСтр("ru = 'FTP сервер не заполнен, доставка в папку на FTP ресурс отключена'"));
	КонецЕсли;
	
	Если ПараметрыДоставки.ИспользоватьЭлектроннуюПочту И НЕ ЗначениеЗаполнено(ПараметрыДоставки.УчетнаяЗапись) Тогда
		ПараметрыДоставки.ИспользоватьЭлектроннуюПочту = Ложь;
		ЗаписьЖурнала(ПараметрыЖурнала, УровеньЖурналаРегистрации.Ошибка,
			НСтр("ru = 'Учетная запись не выбрана, доставка по электронной почте отключена'"));
	КонецЕсли;
	
	Если НЕ ПараметрыДоставки.Свойство("Персонализирована") Тогда
		ПараметрыДоставки.Вставить("Персонализирована", Ложь);
	КонецЕсли;
	
	Если ПараметрыДоставки.Персонализирована Тогда
		Если НЕ ПараметрыДоставки.ИспользоватьЭлектроннуюПочту Тогда
			ЗаписьЖурнала(ПараметрыЖурнала, УровеньЖурналаРегистрации.Ошибка,
				НСтр("ru = 'Персонализированная рассылка может быть отправлена только по электронной почте'"));
			Возврат Ложь;
		КонецЕсли;
		ПараметрыДоставки.ИспользоватьПапку          = Ложь;
		ПараметрыДоставки.ИспользоватьСетевойКаталог = Ложь;
		ПараметрыДоставки.ИспользоватьFTPРесурс      = Ложь;
		ПараметрыДоставки.Вставить("ТолькоУведомить", Ложь);
	КонецЕсли;
	
	Если ПараметрыДоставки.ИспользоватьЭлектроннуюПочту Тогда
		// Соединение с почтовым сервером поднимается дольше всего
		Если НЕ ПараметрыДоставки.Свойство("Соединение") Тогда
			ПараметрыДоставки.Вставить("Соединение", Неопределено);
		КонецЕсли;
		
		// Уведомления о доставке по электронной почте
		Если НЕ ПараметрыДоставки.Свойство("ТолькоУведомить") Тогда
			ПараметрыДоставки.Вставить("ТолькоУведомить", Ложь);
		КонецЕсли;
		
		Если ПараметрыДоставки.ТолькоУведомить 
			 И НЕ (ПараметрыДоставки.ИспользоватьПапку 
				ИЛИ ПараметрыДоставки.ИспользоватьСетевойКаталог 
				ИЛИ ПараметрыДоставки.ИспользоватьFTPРесурс)
			Тогда
			ЗаписьЖурнала(ПараметрыЖурнала, УровеньЖурналаРегистрации.Предупреждение,
				НСтр("ru = 'Использование уведомлений по электронной почте возможно только совместно с другими способами доставки'"));
			Возврат Ложь;
		КонецЕсли;
		
		// 
		Если НЕ ПараметрыДоставки.Свойство("СкрытыеКопии") Тогда
			ПараметрыДоставки.Вставить("СкрытыеКопии", Ложь);
		КонецЕсли;
		
		// Параметры письма
		Если НЕ ПараметрыДоставки.Свойство("ПараметрыПисьма") Тогда
			ПараметрыДоставки.Вставить("ПараметрыПисьма", Новый Структура);
		КонецЕсли;
		
		ПараметрыПисьма = ПараметрыДоставки.ПараметрыПисьма;
		
		ПараметрыПисьма.Вставить("ОбрабатыватьТексты", Ложь);
		
		// Тип текста почтового сообщения
		Если НЕ ПараметрыПисьма.Свойство("ТипТекста") ИЛИ НЕ ЗначениеЗаполнено(ПараметрыПисьма.ТипТекста) Тогда
			ПараметрыПисьма.Вставить("ТипТекста", ТипТекстаПочтовогоСообщения.ПростойТекст);
		КонецЕсли;
		
		ПараметрыДоставки.Вставить("ПисьмоВФорматеHTML", ПараметрыПисьма.ТипТекста = "HTML" ИЛИ ПараметрыПисьма.ТипТекста = ТипТекстаПочтовогоСообщения.HTML);
		
		// Тип текста почтового сообщения
		Если ПараметрыПисьма.Свойство("Вложения") Тогда
			ПараметрыПисьма.Вставить("ПредустановленныеВложения", ПараметрыПисьма.Вложения);
			
			// Приведение кода HTML документа к "правильным" ссылкам на вложенные картинки
			Если ПараметрыДоставки.ПисьмоВФорматеHTML Тогда
				Для Каждого КлючИЗначение Из ПараметрыПисьма.ПредустановленныеВложения Цикл
					Если ТипЗнч(КлючИЗначение.Значение) = Тип("Картинка") И Найти(КлючИЗначение.Ключ, ".") = 0 Тогда
						ФорматЭтойКартинки = КлючИЗначение.Значение.Формат();
						Если ФорматЭтойКартинки <> ФорматКартинки.НеизвестныйФормат Тогда
							НовыйКлюч = КлючИЗначение.Ключ +"."+ НРег(Строка(ФорматЭтойКартинки));
							ПараметрыДоставки.ШаблонТекста = СтрЗаменить(
								ПараметрыДоставки.ШаблонТекста, 
								"<img src='"+ КлючИЗначение.Ключ +"' width='", 
								"<img src='"+ НовыйКлюч          +"' width='");
						КонецЕсли;
					КонецЕсли; //
				КонецЦикла; // КлючИЗначение Из ПараметрыПисьма.ПредустановленныеВложения
			КонецЕсли; // ПараметрыДоставки.ПисьмоВФорматеHTML
		КонецЕсли; // ПараметрыПисьма.Свойство("Вложения")
		
		// Шаблон темы
		Если НЕ ПараметрыДоставки.Свойство("ШаблонТемы") ИЛИ НЕ ЗначениеЗаполнено(ПараметрыДоставки.ШаблонТемы) Тогда
			ПараметрыДоставки.Вставить("ШаблонТемы", РассылкаОтчетовКлиентСервер.ШаблонТемы());
		КонецЕсли;
		
		// Шаблон сообщения
		Если НЕ ПараметрыДоставки.Свойство("ШаблонТекста") ИЛИ НЕ ЗначениеЗаполнено(ПараметрыДоставки.ШаблонТекста) Тогда
			ПараметрыДоставки.Вставить("ШаблонТекста", РассылкаОтчетовКлиентСервер.ШаблонТекста());
			Если ПараметрыДоставки.ПисьмоВФорматеHTML Тогда
				Документ = Новый ФорматированныйДокумент;
				Документ.Добавить(ПараметрыДоставки.ШаблонТекста, ТипЭлементаФорматированногоДокумента.Текст);
				Документ.ПолучитьHTML(ПараметрыДоставки.ШаблонТекста, Новый Структура);
			КонецЕсли;
		КонецЕсли;
		
		// Удаление лишних элементов стиля
		Если ПараметрыДоставки.ПисьмоВФорматеHTML Тогда
			СтильЛев = Найти(ПараметрыДоставки.ШаблонТекста, "<style");
			СтильПрав = Найти(ПараметрыДоставки.ШаблонТекста, "</style>");
			Если СтильЛев > 0 И СтильПрав > СтильЛев Тогда
				ПараметрыДоставки.ШаблонТекста = Лев(ПараметрыДоставки.ШаблонТекста, СтильЛев - 1) + Сред(ПараметрыДоставки.ШаблонТекста, СтильПрав + 8);
			КонецЕсли;
		КонецЕсли;
		
		// Состав значений для подстановки
		СтруктураЗаполненияШаблонов = Новый Структура("НаименованиеРассылки, Автор, ЗаголовокСистемы, ДатаВыполнения");
		СтруктураЗаполненияШаблонов.НаименованиеРассылки = ПараметрыДоставки.Рассылка;
		СтруктураЗаполненияШаблонов.Автор                = ПараметрыДоставки.Автор;
		СтруктураЗаполненияШаблонов.ЗаголовокСистемы     = РассылкаОтчетовПовтИсп.ИмяЭтойИнформационнойБазы();
		СтруктураЗаполненияШаблонов.ДатаВыполнения       = ПараметрыДоставки.ДатаВыполнения;
		Если НЕ ПараметрыДоставки.Персонализирована Тогда
			СтруктураЗаполненияШаблонов.Вставить("Получатель", "");
		КонецЕсли;
		
		// Шаблон темы
		ПараметрыДоставки.ШаблонТемы = РассылкаОтчетовКлиентСервер.ЗаполнитьШаблон(
			ПараметрыДоставки.ШаблонТемы, 
			СтруктураЗаполненияШаблонов);
		
		// Шаблон сообщения
		ПараметрыДоставки.ШаблонТекста = РассылкаОтчетовКлиентСервер.ЗаполнитьШаблон(
			ПараметрыДоставки.ШаблонТекста,
			СтруктураЗаполненияШаблонов);
		
		// Признаки необходимости заполнения шаблонов (кэш проверок)
		ПараметрыДоставки.Вставить(
			"ЗаполнитьПолучателяВШаблонеТемы",
			Найти(ПараметрыДоставки.ШаблонТемы, "[Получатель]") <> 0);
		ПараметрыДоставки.Вставить(
			"ЗаполнитьПолучателяВШаблонеСообщения",
			Найти(ПараметрыДоставки.ШаблонТекста, "[Получатель]") <> 0);
		ПараметрыДоставки.Вставить(
			"ЗаполнитьСформированныеОтчетыВШаблонеСообщения",
			Найти(ПараметрыДоставки.ШаблонТекста, "[СформированныеОтчеты]") <> 0);
		ПараметрыДоставки.Вставить(
			"ЗаполнитьСпособДоставкиВШаблонеСообщения",
			Найти(ПараметрыДоставки.ШаблонТекста, "[СпособДоставки]") <> 0);
		
		// 
		ПараметрыДоставки.Вставить("ПредставлениеОтчетовПолучателя", "");
	КонецЕсли; // ПараметрыДоставки.ИспользоватьЭлектроннуюПочту
	
	// Каталог временных файлов
	ПараметрыДоставки.Вставить("КаталогВременныхФайлов", 
		ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(
			ПолучитьИмяВременногоФайла(".RP"))); // RP = report publishing, RD = report distribution
	СоздатьКаталог(ПараметрыДоставки.КаталогВременныхФайлов);
	
	// Соответствие каталогов временных файлов получателей
	ПараметрыДоставки.Вставить("НастройкиПолучателей", Новый Соответствие);
	
	// Признак архивирования и пароль архива
	Если НЕ ПараметрыДоставки.Свойство("Архивировать") Тогда
		ПараметрыДоставки.Вставить("Архивировать", Ложь);
		ПараметрыДоставки.Вставить("ПарольАрхива", "");
	ИначеЕсли НЕ ПараметрыДоставки.Свойство("ПарольАрхива") Тогда
		ПараметрыДоставки.Вставить("ПарольАрхива", "");
	КонецЕсли;
	
	Если ПараметрыДоставки.Архивировать Тогда
		// Имя архива
		Если НЕ ПараметрыДоставки.Свойство("ИмяАрхива") ИЛИ НЕ ЗначениеЗаполнено(ПараметрыДоставки.ИмяАрхива) Тогда
			ПараметрыДоставки.Вставить("ИмяАрхива", РассылкаОтчетовКлиентСервер.ШаблонИмениАрхива());
		КонецЕсли;
		
		// Удаление запрещенных символов, заполнение шаблона
		ПараметрыДоставки.ИмяАрхива = ПривестиИмяФайла(
			РассылкаОтчетовКлиентСервер.ЗаполнитьШаблон(ПараметрыДоставки.ИмяАрхива,
				Новый Структура("НаименованиеРассылки, ДатаВыполнения", 
					ПараметрыДоставки.Рассылка, 
					ТекущаяДатаСеанса())));
		
		// Расширение
		Если НРег(Прав(ПараметрыДоставки.ИмяАрхива, 4)) <> ".zip" Тогда
			ПараметрыДоставки.ИмяАрхива = ПараметрыДоставки.ИмяАрхива +".zip";
		КонецЕсли;
	КонецЕсли;
	
	// Параметры форматов
	ПараметрыДоставки.Вставить("ПараметрыФорматов", Новый Соответствие);
	Для Каждого ФорматМД Из Метаданные.Перечисления.ФорматыСохраненияОтчетов.ЗначенияПеречисления Цикл
		Формат = Перечисления.ФорматыСохраненияОтчетов[ФорматМД.Имя];
		ПараметрыФормата = ПараметрыЗаписиТабличногоДокументаВФормат(Формат);
		ПараметрыФормата.Вставить("Имя", ФорматМД.Имя);
		ПараметрыДоставки.ПараметрыФорматов.Вставить(Формат, ПараметрыФормата);
	КонецЦикла;
	
	// Параметры добавления ссылок на конечные файлы в письмо
	ПараметрыДоставки.Вставить("ДобавлятьСсылки", "");
	Если ПараметрыДоставки.ИспользоватьЭлектроннуюПочту 
		И (ПараметрыДоставки.ИспользоватьПапку
			ИЛИ ПараметрыДоставки.ИспользоватьСетевойКаталог
			ИЛИ ПараметрыДоставки.ИспользоватьFTPРесурс)
		И ПараметрыДоставки.ЗаполнитьСформированныеОтчетыВШаблонеСообщения Тогда
		
		Если ПараметрыДоставки.Архивировать Тогда
			ПараметрыДоставки.ДобавлятьСсылки = "КАрхиву";
		ИначеЕсли ПараметрыДоставки.ПисьмоВФорматеHTML Тогда
			ПараметрыДоставки.ДобавлятьСсылки = "КФорматам";
		Иначе
			ПараметрыДоставки.ДобавлятьСсылки = "ПослеОтчетов";
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции // ЗаполнитьПараметрыРассылкиПараметрамиПоУмолчанию()

// Формирует список рассылки из списка получателей, подготавливает все параметры письма 
//   и передает управление подсистеме "ЭлектроннаяПочта"
// 
// Параметры:
//   Вложения (Соответствие)       - см. функцию СохранитьОтчетыВФорматы, параметр Результат
//   ПараметрыДоставки (Структура) - см. функцию ВыполнитьРассылку, параметр называется так же
//   СтрокаПолучатель              - Настройки получателя:
//       (СтрокаДереваЗначений)    - Используется свойство строки "Получатель".
//       (Неопределено)            - Используется весь список получателей из "ПараметрыДоставки.Получатели".
// 
// Для контроля за выполнением рекомендуется вызывать в конструкции "Попытка ... Исключение"
//
Процедура ОтправитьОтчетыПолучателю(Вложения, ПараметрыДоставки, СтрокаПолучатель = Неопределено)
	Получатель = ?(СтрокаПолучатель = Неопределено, Неопределено, СтрокаПолучатель.Ключ);
	ПараметрыПисьма = ПараметрыДоставки.ПараметрыПисьма;
	
	// Вложения - отчеты
	ПараметрыПисьма.Вставить("Вложения", Вложения);
	
	// Вложения - предустановленные
	Если ПараметрыПисьма.Свойство("ПредустановленныеВложения") Тогда
		Для Каждого КлючИЗначение Из ПараметрыПисьма.ПредустановленныеВложения Цикл
			Вложение = КлючИЗначение.Значение;
			ЭлектроннаяПочта.ПривестиВложениеДляВставкиВПисьмо(Вложение);
			ПараметрыПисьма.Вложения.Добавить(Новый Структура("Ключ, Значение", КлючИЗначение.Ключ, Вложение));
		КонецЦикла;
	КонецЕсли;
	
	// Шаблоны тема и тела
	ШаблонТемы = ПараметрыДоставки.ШаблонТемы;
	ШаблонТекста = ПараметрыДоставки.ШаблонТекста;
	
	// Вставка сформированных отчетов в шаблон сообщения
	Если ПараметрыДоставки.ЗаполнитьСформированныеОтчетыВШаблонеСообщения Тогда
		Если ПараметрыДоставки.ПисьмоВФорматеHTML Тогда
			ПараметрыДоставки.ПредставлениеОтчетовПолучателя = СтрЗаменить(
				ПараметрыДоставки.ПредставлениеОтчетовПолучателя,
				Символы.ПС,
				Символы.ПС + "<br>");
		КонецЕсли;
		ШаблонТекста = СтрЗаменить(ШаблонТекста, "[СформированныеОтчеты]", ПараметрыДоставки.ПредставлениеОтчетовПолучателя);
	КонецЕсли;
	
	// Способ доставки заполняется ранее (за пределами этой процедуры)
	Если ПараметрыДоставки.ЗаполнитьСпособДоставкиВШаблонеСообщения Тогда
		ШаблонТекста = СтрЗаменить(ШаблонТекста, "[СпособДоставки]", ПредставлениеСпособовДоставки(ПараметрыДоставки));
	КонецЕсли;
	
	// Тема и тело сообщения
	ПараметрыПисьма.Вставить("Тема", ШаблонТемы);
	ПараметрыПисьма.Вставить("Тело", ШаблонТекста);
	
	// Тема и тело сообщения
	КлючАдресаДоставки = ?(ПараметрыДоставки.СкрытыеКопии, "СлепыеКопии", "Кому");
	
	Если Получатель = Неопределено Тогда
		Если ПараметрыДоставки.Получатели.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		// Доставка всем получателям
		Если ПараметрыДоставки.ЗаполнитьПолучателяВШаблонеТемы ИЛИ ПараметрыДоставки.ЗаполнитьПолучателяВШаблонеСообщения Тогда
			// Шаблоны персонализированы - доставка каждому получателю
			Для Каждого КлючИЗначение Из ПараметрыДоставки.Получатели Цикл
				// Тема и тело сообщения
				Если ПараметрыДоставки.ЗаполнитьПолучателяВШаблонеТемы Тогда
					ПараметрыПисьма.Тема = СтрЗаменить(ШаблонТемы, "[Получатель]", Строка(КлючИЗначение.Ключ));
				КонецЕсли;
				Если ПараметрыДоставки.ЗаполнитьПолучателяВШаблонеСообщения Тогда
					ПараметрыПисьма.Тело = СтрЗаменить(ШаблонТекста, "[Получатель]", Строка(КлючИЗначение.Ключ));
				КонецЕсли;
				
				// Получатель
				ПараметрыПисьма.Вставить(КлючАдресаДоставки, КлючИЗначение.Значение);
				
				// Отправляем письмо
				ЭлектроннаяПочта.ОтправитьПочтовоеСообщение(ПараметрыДоставки.УчетнаяЗапись, ПараметрыПисьма, ПараметрыДоставки.Соединение);
			КонецЦикла;
		Иначе
			// Шаблоны не персонализированы - склеивание E-Mail адресов получателей и совместная доставка
			Кому = "";
			Для Каждого КлючИЗначение Из ПараметрыДоставки.Получатели Цикл
				Кому = Кому + ?(Кому = "", "", ", ") + КлючИЗначение.Значение;
			КонецЦикла;
			
			ПараметрыПисьма.Вставить(КлючАдресаДоставки, Кому);
			
			// Отправляем письмо
			ЭлектроннаяПочта.ОтправитьПочтовоеСообщение(ПараметрыДоставки.УчетнаяЗапись, ПараметрыПисьма, ПараметрыДоставки.Соединение);
		КонецЕсли;
	Иначе
		// Доставка конкретному получателю
		
		// Тема и тело сообщения
		Если ПараметрыДоставки.ЗаполнитьПолучателяВШаблонеТемы Тогда
			ПараметрыПисьма.Тема = СтрЗаменить(ШаблонТемы, "[Получатель]", Строка(Получатель));
		КонецЕсли;
		Если ПараметрыДоставки.ЗаполнитьПолучателяВШаблонеСообщения Тогда
			ПараметрыПисьма.Тело = СтрЗаменить(ШаблонТекста, "[Получатель]", Строка(Получатель));
		КонецЕсли;
		
		// Получатель
		ПараметрыПисьма.Вставить(КлючАдресаДоставки, ПараметрыДоставки.Получатели[Получатель]);
		
		// Отправляем письмо
		ЭлектроннаяПочта.ОтправитьПочтовоеСообщение(ПараметрыДоставки.УчетнаяЗапись, ПараметрыПисьма, ПараметрыДоставки.Соединение);
	КонецЕсли;
	
КонецПроцедуры

// Объединяет массивы, возвращая результат объединения
// 
Функция ОбъединитьМассивы(Массив1, Массив2)
	Массив = Новый Массив;
	Для Каждого ЭлементМассива Из Массив1 Цикл
		Массив.Добавить(ЭлементМассива);
	КонецЦикла;
	Для Каждого ЭлементМассива Из Массив2 Цикл
		Массив.Добавить(ЭлементМассива);
	КонецЦикла;
	Возврат Массив;
КонецФункции

// Выполняет архивацию вложений в соответствии с параметрами доставки
// 
// Параметры:
//   Вложения               (Соответствие) - см. функцию ДобавитьОтчетыВоВложения
//   ПараметрыДоставки      (Структура)    - см. функцию ВыполнитьРассылку
//   КаталогВременныхФайлов (Строка)       - каталог, в который будет выполнена архивация
// 
Процедура АрхивацияВложений(Вложения, ПараметрыДоставки, КаталогВременныхФайлов)
	Если НЕ ПараметрыДоставки.Архивировать Тогда
		Возврат;
	КонецЕсли;
	
	// Каталог вместе с файлом архивируются, а имя файла меняется на имя архива
	ПолноеИмяФайла = КаталогВременныхФайлов + ПараметрыДоставки.ИмяАрхива;
	
	РежимСохранения = РежимСохраненияПутейZIP.СохранятьОтносительныеПути;
	РежимОбработки  = РежимОбработкиПодкаталоговZIP.ОбрабатыватьРекурсивно;
	
	ЗаписьZipФайла = Новый ЗаписьZipФайла(ПолноеИмяФайла, ПараметрыДоставки.ПарольАрхива);
	
	Для Каждого Вложение Из Вложения Цикл
		ЗаписьZipФайла.Добавить(Вложение.Значение, РежимСохранения, РежимОбработки);
		Если Вложение.Настройки.ФайлСКаталогом = Истина Тогда
			ЗаписьZipФайла.Добавить(Вложение.Настройки.ПолноеИмяКаталога, РежимСохранения, РежимОбработки);
		КонецЕсли;
	КонецЦикла;
	
	ЗаписьZipФайла.Записать();
		
	Вложения = Новый Соответствие;
	Вложения.Вставить(ПараметрыДоставки.ИмяАрхива, ПолноеИмяФайла);
	
	Если ПараметрыДоставки.ЗаполнитьСформированныеОтчетыВШаблонеСообщения Тогда
		ПараметрыДоставки.ПредставлениеОтчетовПолучателя = 
			ПараметрыДоставки.ПредставлениеОтчетовПолучателя 
			+ Символы.ПС 
			+ Символы.ПС
			+ НСтр("ru = 'Файлы отчетов запакованы в архив'")
			+ " ";
	КонецЕсли;
		
	Если ПараметрыДоставки.ДобавлятьСсылки = "КАрхиву" Тогда
		// Способ доставки подразумевает добавление ссылок
		Если ПараметрыДоставки.ПисьмоВФорматеHTML Тогда
			ПараметрыДоставки.ПредставлениеОтчетовПолучателя = СокрЛП(
				ПараметрыДоставки.ПредставлениеОтчетовПолучателя
				+"<a href = '"+ ПолноеИмяФайла +"'>"+ ПараметрыДоставки.ИмяАрхива +"</a>");
		Иначе
			ПараметрыДоставки.ПредставлениеОтчетовПолучателя = СокрЛП(
				ПараметрыДоставки.ПредставлениеОтчетовПолучателя
				+""""+ ПараметрыДоставки.ИмяАрхива +""":"+ Символы.ПС +"<"+ ПолноеИмяФайла +">");
		КонецЕсли;
	ИначеЕсли ПараметрыДоставки.ЗаполнитьСформированныеОтчетыВШаблонеСообщения Тогда
		// Доставка только по почте
		ПараметрыДоставки.ПредставлениеОтчетовПолучателя = СокрЛП(
			ПараметрыДоставки.ПредставлениеОтчетовПолучателя
			+""""+ ПараметрыДоставки.ИмяАрхива +"""");
	КонецЕсли;
	
КонецПроцедуры

// Возвращает параметры, которые можно использовать для сохранения табличного документа в формат
// 
// Параметры:
//   Формат (ПеречислениеСсылка.ФорматыСохраненияОтчетов) - Формат, для которого необходимо получить параметры
// 
// Возвращаемое значение: 
//   Результат (Структура) - параметры записи
//       |- Расширение (Строка) - расширение, с которым можно сохранить файл
//       |- ТипФайла (ТипФайлаТабличногоДокумента) - тип, который необходимо передать табличному документу для сохранения
//
Функция ПараметрыЗаписиТабличногоДокументаВФормат(Формат)
	Результат = Новый Структура("Расширение, ТипФайла");
	Если Формат = Перечисления.ФорматыСохраненияОтчетов.XLSX Тогда
		Результат.Расширение = ".xlsx";
		Результат.ТипФайла = ТипФайлаТабличногоДокумента.XLSX;
		
	ИначеЕсли Формат = Перечисления.ФорматыСохраненияОтчетов.XLS Тогда
		Результат.Расширение = ".xls";
		Результат.ТипФайла = ТипФайлаТабличногоДокумента.XLS;
		
	ИначеЕсли Формат = Перечисления.ФорматыСохраненияОтчетов.ODS Тогда
		Результат.Расширение = ".ods";
		Результат.ТипФайла = ТипФайлаТабличногоДокумента.ODS;
		
	ИначеЕсли Формат = Перечисления.ФорматыСохраненияОтчетов.MXL Тогда
		Результат.Расширение = ".mxl";
		Результат.ТипФайла = ТипФайлаТабличногоДокумента.MXL;
		
	ИначеЕсли Формат = Перечисления.ФорматыСохраненияОтчетов.PDF Тогда
		Результат.Расширение = ".pdf";
		Результат.ТипФайла = ТипФайлаТабличногоДокумента.PDF;
		
	ИначеЕсли Формат = Перечисления.ФорматыСохраненияОтчетов.HTML4 Тогда
		Результат.Расширение = ".html";
		Результат.ТипФайла = ТипФайлаТабличногоДокумента.HTML4;
		
	ИначеЕсли Формат = Перечисления.ФорматыСохраненияОтчетов.DOCX Тогда
		Результат.Расширение = ".docx";
		Результат.ТипФайла = ТипФайлаТабличногоДокумента.DOCX;
		
	ИначеЕсли Формат = Перечисления.ФорматыСохраненияОтчетов.TXT Тогда
		Результат.Расширение = ".txt";
		Результат.ТипФайла = ТипФайлаТабличногоДокумента.TXT;
	
	ИначеЕсли Формат = Перечисления.ФорматыСохраненияОтчетов.ANSITXT Тогда
		Результат.Расширение = ".txt";
		Результат.ТипФайла = ТипФайлаТабличногоДокумента.ANSITXT;
		
	Иначе 
		// "Рыба" для всех форматов, добавленных при внедрении, обработчик сохранения
		// которых должен находиться в переопределяемом модуле
		Результат.Расширение = Неопределено;
		Результат.ТипФайла = Неопределено;
		
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Очистка временных файлов, которые использовались в рассылке
// 
// Параметры
//   ПараметрыЖурнала (Структура) - Параметры записи в журнал регистрации, 
//                    см. комментарий к процедуре ЗаписьЖурнала, параметр называется так же
//   ПараметрыДоставки (Структура) - ...
//       |- КаталогВременныхФайлов (Строка) - Каталог, который использовался рассылкой для хранения временных файлов
Процедура УдалитьВременныеФайлы(ПараметрыЖурнала, ПараметрыДоставки)
	Попытка
		УдалитьФайлы(ПараметрыДоставки.КаталогВременныхФайлов, "*");
	Исключение
		ЗаписьЖурнала(ПараметрыЖурнала, ,
			НСтр("ru = 'Ошибка очистки каталога временных файлов %1:'"), ИнформацияОбОшибке(), 
			"'"+ ПараметрыДоставки.КаталогВременныхФайлов +"'");
	КонецПопытки;
КонецПроцедуры

// Преобразует недопустимые символы файлов в похожие допустимые
//   Работает только с именем файла, путь не поддерживается.
// 
// Параметры:
//   ИсходноеИмяФайла (Строка)
// 
// Возвращаемое значение: 
//   Результат (Строка) - Результат преобразования
//
Функция ПривестиИмяФайла(ИсходноеИмяФайла)
	
	Результат = Лев(СокрЛП(ИсходноеИмяФайла), 255);
	
	СоответствиеЗамен = Новый Соответствие;
	СоответствиеЗамен.Вставить("""", "'");
	СоответствиеЗамен.Вставить("/", "_");
	СоответствиеЗамен.Вставить("\", "_");
	СоответствиеЗамен.Вставить(":", "_");
	СоответствиеЗамен.Вставить(";", "_");
	СоответствиеЗамен.Вставить("|", "_");
	СоответствиеЗамен.Вставить("=", "_");
	СоответствиеЗамен.Вставить("?", "_");
	СоответствиеЗамен.Вставить("*", "_");
	СоответствиеЗамен.Вставить("<", "_");
	СоответствиеЗамен.Вставить(">", "_");
	
	// Символы, не поддерживаемые
	СоответствиеЗамен.Вставить("[", "");
	СоответствиеЗамен.Вставить("]", "");
	СоответствиеЗамен.Вставить(",", "");
	СоответствиеЗамен.Вставить("{", "");
	СоответствиеЗамен.Вставить("}", "");
	
	Для Каждого КлючИЗначение Из СоответствиеЗамен Цикл
		Результат = СтрЗаменить(Результат, КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

// Возвращает дерево значений, необходимое для формирования и доставки отчетов
// 
Функция СоздатьДеревоОтчетов()
	// Уровень (вложенности): 
	//
	// 1 - Получатели 
	//   Ключ      - Ссылка
	//   Значение  - каталог получателя
	//
	// 2 - Табличные документы получателей
	//   Ключ      - Имя отчета
	//   Значение  - Табличный документ
	//   Настройки - ............. все параметры отчета .................
	//
	// 3 - Файлы получателей
	//   Ключ      - имя файла
	//   Значение  - полный путь к файлу
	//   Настройки - ФайлСКаталогом, ИмяФайла, ПолноеИмяФайла, ИмяКаталога, ПолноеИмяКаталога, Формат, Имя, Расширение, ТипФайла
	//
	
	ДеревоОтчетов = Новый ДеревоЗначений;
	ДеревоОтчетов.Колонки.Добавить("Уровень",   Новый ОписаниеТипов("Число"));
	ДеревоОтчетов.Колонки.Добавить("Ключ",      );
	ДеревоОтчетов.Колонки.Добавить("Значение",  );
	ДеревоОтчетов.Колонки.Добавить("Настройки", Новый ОписаниеТипов("Структура"));
	
	Возврат ДеревоОтчетов;
КонецФункции

// Проверяет права текущего пользователя на вывод информации, 
//   если прав нет - производится запись в журнал регистрации
//
Функция ПравоВывода(ПараметрыЖурнала)
	ПравоВывода = ПравоДоступа("Вывод", Метаданные);
	Если НЕ ПравоВывода Тогда
		ЗаписьЖурнала(ПараметрыЖурнала, УровеньЖурналаРегистрации.Ошибка,
			НСтр("ru = 'У пользователя %1 недостаточно прав на вывод информации'"), ,
			"'"+ Строка(Пользователи.ТекущийПользователь()) +"'");
	КонецЕсли;
	Возврат ПравоВывода;
КонецФункции

// Формирует представление способов доставки в соответствии с параметрами доставки
//
// Параметры:
//   ПараметрыДоставки (Структура) - см. функцию ВыполнитьРассылку
//
// Возвращаемое значение: 
//   ТекстПредставления - (Строка) описание
//
Функция ПредставлениеСпособовДоставки(ПараметрыДоставки)
	Префикс = НСтр("ru = 'Результат'");
	ТекстПредставления = "";
	Суффикс = "";
	
	Если НЕ ПараметрыДоставки.ТолькоУведомить Тогда
		
		ТекстПредставления = ТекстПредставления 
		+ ?(ТекстПредставления = "", Префикс, " " + НСтр("ru = 'и'")) 
		+ " "
		+ НСтр("ru = 'отправлен по почте (см. вложения)'");
		
	КонецЕсли; // ПараметрыДоставки.ТолькоУведомить

	Если ПараметрыДоставки.ВыполненаВПапку Тогда
		
		ТекстПредставления = ТекстПредставления 
		+ ?(ТекстПредставления = "", Префикс, " " + НСтр("ru = 'и'")) 
		+ " "
		+ НСтр("ru = 'доставлен в папку'")
		+ " ";
		
		Ссылка = ПолучитьНавигационнуюСсылкуИнформационнойБазы() +"#"+ ПолучитьНавигационнуюСсылку(ПараметрыДоставки.Папка);
		
		Если ПараметрыДоставки.ПисьмоВФорматеHTML Тогда
			ТекстПредставления = ТекстПредставления 
			+ "<a href = '"
			+ Ссылка
			+ "'>" 
			+ Строка(ПараметрыДоставки.Папка)
			+ "</a>";
		Иначе
			ТекстПредставления = ТекстПредставления 
			+ """"
			+ Строка(ПараметрыДоставки.Папка)
			+ """";
			Суффикс = Суффикс + ":" + Символы.ПС + "<" + Ссылка + ">";
		КонецЕсли;
		
	КонецЕсли; // ПараметрыДоставки.ВыполненаВПапку

	Если ПараметрыДоставки.ВыполненаВСетевойКаталог Тогда
		
		ТекстПредставления = ТекстПредставления 
		+ ?(ТекстПредставления = "", Префикс, " " + НСтр("ru = 'и'")) 
		+ " "
		+ НСтр("ru = 'доставлен в сетевой каталог'")
		+ " ";
		
		Если ПараметрыДоставки.ПисьмоВФорматеHTML Тогда
			ТекстПредставления = ТекстПредставления 
			+ "<a href = '"
			+ ПараметрыДоставки.СетевойКаталогWindows
			+ "'>" 
			+ ПараметрыДоставки.СетевойКаталогWindows
			+ "</a>";
		Иначе
			ТекстПредставления = ТекстПредставления 
			+ "<"
			+ ПараметрыДоставки.СетевойКаталогWindows
			+ ">";
		КонецЕсли;
		
	КонецЕсли; // ПараметрыДоставки.ВыполненаВСетевойКаталог

	Если ПараметрыДоставки.ВыполненаНаFTP Тогда
		
		ТекстПредставления = ТекстПредставления 
		+ ?(ТекстПредставления = "", Префикс, " " + НСтр("ru = 'и'")) 
		+ " "
		+ НСтр("ru = 'доставлен на FTP ресурс'")
		+ " ";
		
		Ссылка = "ftp://"
		+ ПараметрыДоставки.Сервер 
		+ ":"
		+ Формат(ПараметрыДоставки.Порт, "ЧН=0; ЧГ=0") 
		+ ПараметрыДоставки.Каталог;
		
		Если ПараметрыДоставки.ПисьмоВФорматеHTML Тогда
			ТекстПредставления = ТекстПредставления 
			+ "<a href = '"
			+ Ссылка
			+ "'>" 
			+ Ссылка
			+ "</a>";
		Иначе
			ТекстПредставления = ТекстПредставления 
			+ "<"
			+ Ссылка
			+ ">";
		КонецЕсли;
		
	КонецЕсли; // ПараметрыДоставки.ВыполненаНаFTP

	ТекстПредставления = ТекстПредставления + ?(Суффикс = "", ".", Суффикс);
	
	Возврат ТекстПредставления;
КонецФункции

// Если файл существует - добавляет суффикс в имя файла
//
// Параметры:
//   ПолноеИмяФайла - (Строка) 
//
Процедура НайтиСвободноеИмяФайла(ПолноеИмяФайла)
	Файл = Новый Файл(ПолноеИмяФайла);
	
	Если НЕ Файл.Существует() Тогда
		Возврат;
	КонецЕсли;
	
	// Установить шаблон имени файла для подстановки различных суффиксов
	ШаблонИмени = "";
	ДлинаИмени = СтрДлина(ПолноеИмяФайла);
	КодСлеша = КодСимвола("/");
	КодОбратногоСлеша = КодСимвола("\");
	КодТочки = КодСимвола(".");
	Для ОбратныйИндекс = 1 По ДлинаИмени Цикл
		Индекс = ДлинаИмени - ОбратныйИндекс + 1;
		Код = КодСимвола(ПолноеИмяФайла, Индекс);
		Если Код = КодТочки Тогда
			ШаблонИмени = Лев(ПолноеИмяФайла, Индекс - 1) + "<шаблон>" + Сред(ПолноеИмяФайла, Индекс);
			Прервать;
		ИначеЕсли Код = КодСлеша ИЛИ Код = КодОбратногоСлеша Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если ШаблонИмени = "" Тогда
		ШаблонИмени = ПолноеИмяФайла + "<шаблон>";
	КонецЕсли;
	
	Индекс = 0;
	Пока Файл.Существует() Цикл
		Индекс = Индекс + 1;
		ПолноеИмяФайла = СтрЗаменить(ШаблонИмени, "<шаблон>", " ("+ Формат(Индекс, "ЧГ=") +")");
		Файл = Новый Файл(ПолноеИмяФайла);
	КонецЦикла;
КонецПроцедуры

// Создает корневую строку дерева для получателя (в случае ее отсутствия) и заполняет ее параметрами по умолчанию.
//
// Параметры:
//   ДеревоОтчетов     - (ДеревоЗначений)
//   ПолучательСсылка  - (СправочникСсылка.*, Неопределено)
//   ПараметрыДоставки - (Структура)
//
// Возвращаемое значение: 
//   СтрокаПолучатель  - (СтрокаДереваЗначений)
//
Функция ОпределитьСтрокуДереваДляПолучателя(ДеревоОтчетов, ПолучательСсылка, ПараметрыДоставки)
	
	СтрокаПолучатель = ДеревоОтчетов.Строки.Найти(ПолучательСсылка, "Ключ", Ложь);
	Если СтрокаПолучатель = Неопределено Тогда
		
		КаталогПолучателя = ПараметрыДоставки.КаталогВременныхФайлов;
		Если ПолучательСсылка <> Неопределено Тогда
			КаталогПолучателя = КаталогПолучателя 
				+ ПривестиИмяФайла(Строка(ПолучательСсылка)) 
				+ " (" 
				+ Строка(ПолучательСсылка.УникальныйИдентификатор()) 
				+ ")\";
			СоздатьКаталог(КаталогПолучателя);
		КонецЕсли;
		
		СтрокаПолучатель = ДеревоОтчетов.Строки.Добавить();
		СтрокаПолучатель.Уровень   = 1;
		СтрокаПолучатель.Ключ      = ПолучательСсылка;
		СтрокаПолучатель.Значение  = КаталогПолучателя;
		
	КонецЕсли;
	
	Возврат СтрокаПолучатель;
	
КонецФункции // ОпределитьСтрокуДереваДляПолучателя 

// Формирует представление отчетов для получателя.
//
Процедура СформироватьПредставлениеОтчетовДляПолучателя(ПараметрыДоставки, СтрокаПолучатель)
	
	СформированныеОтчеты = "";
	
	Если ПараметрыДоставки.ИспользоватьЭлектроннуюПочту И ПараметрыДоставки.ЗаполнитьСформированныеОтчетыВШаблонеСообщения Тогда
		
		Разделитель = Символы.ПС;
		Если ПараметрыДоставки.ДобавлятьСсылки = "ПослеОтчетов" Тогда
			Разделитель = Разделитель + Символы.ПС;
		КонецЕсли;
		
		Индекс = 0;
		
		Для Каждого СтрокаОтчет Из ПараметрыДоставки.СтрокаОбщихОтчетов.Строки Цикл
			Индекс = Индекс + 1;
			СформированныеОтчеты = СформированныеОтчеты 
			+ Разделитель 
			+ Формат(Индекс, "ЧГ=") 
			+ ". " 
			+ СтрокаОтчет.Настройки.ПредставлениеВПисьме;
		КонецЦикла; 
		
		Если СтрокаПолучатель <> Неопределено И СтрокаПолучатель <> ПараметрыДоставки.СтрокаОбщихОтчетов Тогда
			Для Каждого СтрокаОтчет Из СтрокаПолучатель.Строки Цикл
				Индекс = Индекс + 1;
				СформированныеОтчеты = СформированныеОтчеты 
				+ Разделитель 
				+ Формат(Индекс, "ЧГ=") 
				+ ". " 
				+ СтрокаОтчет.Настройки.ПредставлениеВПисьме;
			КонецЦикла; 
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыДоставки.Вставить("ПредставлениеОтчетовПолучателя", СокрЛП(СформированныеОтчеты));
	
КонецПроцедуры

// Проверяет наличие внешних наборов данных.
//
// Параметры:
//   НаборыДанных (НаборыДанныхМакетаКомпоновкиДанных)
//
// Возвращаемое значение: 
//   (Булево)
//
Функция ЕстьВнешнийНаборДанных(НаборыДанных)
	
	Для Каждого НаборДанных Из НаборыДанных Цикл
		
		Если ТипЗнч(НаборДанных) = Тип("НаборДанныхОбъектМакетаКомпоновкиДанных") Тогда
			
			Возврат Истина;
			
		ИначеЕсли ТипЗнч(НаборДанных) = Тип("НаборДанныхОбъединениеМакетаКомпоновкиДанных") Тогда
			
			Если ЕстьВнешнийНаборДанных(НаборДанных.Элементы) Тогда
				
				Возврат Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Условные вызовы в друге подсистемы

// Подключает отчет подсистемы "Дополнительные отчеты и обработки".
//   Обработка исключений производится управляющим кодом.
// 
// Параметры:
//   ДопОтчет        (СправочникСсылка.ДополнительныеОтчетыИОбработки) Отчет, который необходимо инициализировать
//   ПараметрыОтчета (Структура) Набор параметров, получаемый в процессе проверки и подключения отчета
//                               см. описание функции "ИнициализироватьОтчет" модуля "РассылкаОтчетов"
//   Результат       (Булево, Неопределено)
//     |- Истина       - Удалось подключить дополнительный отчет
//     |- Ложь         - Не удалось подключить дополнительный отчет
//     |- Неопределено - По умолчанию. Подсистема доп. отчетов недоступна.
//
Процедура ПриПодключенииДопОтчета(ДопОтчет, ПараметрыОтчета, Результат) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки") Тогда
		МодульДополнительныеОтчетыИОбработки = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ДополнительныеОтчетыИОбработки");
		МодульДополнительныеОтчетыИОбработки.ПриПодключенииДопОтчета(ДопОтчет, ПараметрыОтчета, Результат);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриВыполненииДоставкиВПапку(ПараметрыДоставки, Вложения) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСФайлами") Тогда
		МодульРаботаСФайламиСлужебный = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("РаботаСФайламиСлужебный");
		МодульРаботаСФайламиСлужебный.ПриВыполненииДоставкиВПапку(ПараметрыДоставки, Вложения);
	КонецЕсли;
	
КонецПроцедуры

// Проверяет право изменения папки.
//
// Параметры: см. описание процедуры "ВыполнитьДоставку" модуля "РассылкаОтчетов"
//
Процедура ПриОпределенииПраваИзмененияПапкиИФайлов(Папка, Результат) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСФайлами") Тогда
		
		Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
			МодульУправлениеДоступом = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("УправлениеДоступом");
			Результат = МодульУправлениеДоступом.ЕстьПравоПоЗначениюДоступа("ИзменениеПапокИФайлов", Папка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Получает настройки прокси на сервере.
//
Процедура ПриОпределенииНастроекПрокси(Прокси) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.ПолучениеФайловИзИнтернета") Тогда
		МодульПолучениеФайловИзИнтернета = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ПолучениеФайловИзИнтернета");
		МодульПолучениеФайловИзИнтернета.ПриОпределенииНастроекПрокси(Прокси);
	КонецЕсли;
	
КонецПроцедуры




