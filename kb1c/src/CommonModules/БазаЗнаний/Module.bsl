#Область Пользователи

#Область ПраваПользователей

Функция ПравоРедактирования(знач ПользовательСсылка, знач СтатьяСсылка = Неопределено) Экспорт
	
	Возврат Истина;
	
КонецФункции

Функция ПравоПросмотра(знач ПользовательСсылка, знач СтатьяСсылка = Неопределено) Экспорт
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#КонецОбласти

#Область СессииПользователей

// Открывает сессию пользователя и записывает данные в регистр сессий
//
// Параметры
//	ПользовательСсылка - СправочникСсылка.Пользователи|ВнешниеПользователи
//	ВремяСессии - Число. Время сессии в минутах
//
// Возвращаемое значение
//	УникальныйИдентификатор. Идентификатор сессии пользователя
//
Функция НачатьСессиюПользователя(знач ПользовательСсылка, знач ВремяСессии = 0) Экспорт
	
	КлючСессии = Новый УникальныйИдентификатор;
	
	МенеджерЗаписи = РегистрыСведений.СессииПользователейБазыЗнаний.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Сессия		= КлючСессии;
	МенеджерЗаписи.Пользователь	= ПользовательСсылка;
	МенеджерЗаписи.Начало		= ТекущаяДатаСеанса();
	
	Если ВремяСессии > 0 Тогда
		МенеджерЗаписи.Завершение = МенеджерЗаписи.Начало + ВремяСессии * 60;
		Если МенеджерЗаписи.Завершение < ТекущаяДатаСеанса() Тогда
			МенеджерЗаписи.Закрыта = Истина;
		КонецЕсли;
	КонецЕсли;
	
	МенеджерЗаписи.Записать(Истина);
	
	Возврат КлючСессии;
	
КонецФункции

// Возвращает ключи открытых сессий пользователей
//
// Параметры
//	ПользовательСсылка - СправочникСсылка.Пользователи|ВнешниеПользователи
//	ВсеСессии - Булево. Если установить значение Истина, тогда будет возвращен массив
//		всех открытых пользователем сессий
//
// Возвращаемое значение
//	Неопределено - не найдено ни одной открытой сессии
//	УникальныйИдентификатор - первая открытая сессия (если ВсеСессии = Ложь)
//	Массив - ключи открытых сессий (если ВсеСессии = Истина)
//
Функция ПолучитьКлючОткрытойСессии(знач ПользовательСсылка, знач ВсеСессии = Ложь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь", ПользовательСсылка);
	Запрос.УстановитьПараметр("ТекущееВремя", ТекущаяДатаСеанса());
	Запрос.Текст = 
	"ВЫБРАТЬ " + ?(ВсеСессии, "", "ПЕРВЫЕ 1") + "
	|	СессииПользователейБазыЗнаний.Сессия
	|ИЗ
	|	РегистрСведений.СессииПользователейБазыЗнаний КАК СессииПользователейБазыЗнаний
	|ГДЕ
	|	СессииПользователейБазыЗнаний.Пользователь = &Пользователь
	|	И НЕ СессииПользователейБазыЗнаний.Закрыта
	|	И СессииПользователейБазыЗнаний.Начало <= &ТекущееВремя
	|
	|УПОРЯДОЧИТЬ ПО
	|	СессииПользователейБазыЗнаний.Начало";
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Если ВсеСессии Тогда
			Возврат Результат.Выгрузить().ВыгрузитьКолонку("Сессия");
		Иначе 
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			Возврат Выборка.Сессия;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

// Возвращает пользователя по ключу сессии
//
// Параметры
//	КлючСессии - УникальныйИдентификатор
//
// Возвращаемое значение
//	ПользовательСсылка - СправочникСсылка.Пользователи|ВнешниеПользователи
//
Функция ПолучитьПользователяСессии(знач КлючСессии) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ключ", КлючСессии);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СессииПользователейБазыЗнаний.Пользователь
	|ИЗ
	|	РегистрСведений.СессииПользователейБазыЗнаний КАК СессииПользователейБазыЗнаний
	|ГДЕ
	|	СессииПользователейБазыЗнаний.Сессия = &Ключ";
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	Иначе 
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.Пользователь;
	КонецЕсли;
	
КонецФункции

// Проверяет статус сессии по ключу
//
// Параметры
//	КлючСессии - УникальныйИдентификатор
//
// Возвращаемое значение
//	Неопределено - если сессия не найдена
//	Булево - состояние сессии. Истина - открыта, Ложь - закрыта
//
Функция ПроверитьСтатусСессии(знач КлючСессии) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ключ", КлючСессии);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СессииПользователейБазыЗнаний.Закрыта
	|ИЗ
	|	РегистрСведений.СессииПользователейБазыЗнаний КАК СессииПользователейБазыЗнаний
	|ГДЕ
	|	СессииПользователейБазыЗнаний.Сессия = &Ключ";
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	Иначе 
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат НЕ Выборка.Закрыта;
	КонецЕсли;
	
КонецФункции

// Закрывает сессию пользователя по ключу
//
// Параметры
//	КлючСессии - УникальныйИдентификатор
//
Процедура ЗавершитьСессииПользователя(знач КлючСессии) Экспорт
	
	МенеджерЗаписи = РегистрыСведений.СессииПользователейБазыЗнаний.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.Сессия = КлючСессии;
	МенеджерЗаписи.Прочитать();
	Если МенеджерЗаписи.Выбран() Тогда
		МенеджерЗаписи.Завершение	= ТекущаяДатаСеанса();
		МенеджерЗаписи.Закрыта		= Истина;
		МенеджерЗаписи.Записать(Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Статистика

// Категории
Процедура ДополнитьКатегорииОбновленияРодителями(МассивКатегорий)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Категории", МассивКатегорий);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КатегорииБазыЗнаний.Родитель
	|ИЗ
	|	Справочник.КатегорииБазыЗнаний КАК КатегорииБазыЗнаний
	|ГДЕ
	|	КатегорииБазыЗнаний.Ссылка В(&Категории)";
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	МассивРодителей = Результат.Выгрузить().ВыгрузитьКолонку("Родитель");
	ДополнитьКатегорииОбновленияРодителями(МассивРодителей);
	
	Для Каждого КатегорияСсылка Из МассивРодителей Цикл
		Если МассивКатегорий.Найти(КатегорияСсылка) = Неопределено Тогда
			МассивКатегорий.Добавить(КатегорияСсылка);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьСтатистикуКатегорий(знач ПараметрыВыполнения, знач АдресХранилища = "") Экспорт 
	
	МассивКатегорий	= ПараметрыВыполнения.Категории;
	ДополнитьКатегорииОбновленияРодителями(МассивКатегорий);
	
	Для Каждого КатегорияСсылка Из МассивКатегорий Цикл
		Если НЕ ЗначениеЗаполнено(КатегорияСсылка) Тогда
			Продолжить;
		КонецЕсли;
		
		КолКатегорий	= 0;
		КолСтатей		= 0;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", КатегорияСсылка);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КатегорииБазыЗнаний.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.КатегорииБазыЗнаний КАК КатегорииБазыЗнаний
		|ГДЕ
		|	КатегорииБазыЗнаний.Ссылка В ИЕРАРХИИ(&Ссылка)
		|	И НЕ КатегорииБазыЗнаний.ПометкаУдаления";
		МассивКатегорий = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		КолКатегорий	= МассивКатегорий.Количество();
		
		МассивКатегорий.Добавить(КатегорияСсылка);
		Запрос.УстановитьПараметр("Категории", МассивКатегорий);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СтатьиБазыЗнанийКатегории.Ссылка) КАК Количество
		|ИЗ
		|	Справочник.СтатьиБазыЗнаний.Категории КАК СтатьиБазыЗнанийКатегории
		|ГДЕ
		|	СтатьиБазыЗнанийКатегории.Категория В(&Категории)
		|	И НЕ СтатьиБазыЗнанийКатегории.Ссылка.ПометкаУдаления";
		Результат = Запрос.Выполнить();
		Если НЕ Результат.Пустой() Тогда
			Выборка = Результат.Выбрать();
			Выборка.Следующий();
			КолСтатей = Выборка.Количество;
		КонецЕсли;
		
		МенеджерЗаписи = РегистрыСведений.СтатистикаКатегорийБазыЗнаний.СоздатьМенеджерЗаписи();
		МенеджерЗаписи.КатегорияБазыЗнаний	= КатегорияСсылка;
		МенеджерЗаписи.Категории			= КолКатегорий;
		МенеджерЗаписи.Статьи				= КолСтатей;
		МенеджерЗаписи.Записать(Истина);
	КонецЦикла;
	
	ПараметрыВыполнения.Вставить("Выполнено", Истина);
	Если ЭтоАдресВременногоХранилища(АдресХранилища) Тогда
		ПоместитьВоВременноеХранилище(ПараметрыВыполнения, АдресХранилища);
	КонецЕсли;
	
КонецПроцедуры

// Ключевые слова
Процедура ОбновитьРейтингКлючевыхСлов(знач ПараметрыВыполнения, знач АдресХранилища = "") Экспорт
	
	// Пустая категория - общий рейтинг
	// Категория ссылка - рейтинг в рамках конкретной категории
	
	КлючевыеСлова = ПараметрыВыполнения.КлючевыеСлова;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Теги", КлючевыеСлова);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВложенныйЗапрос.КлючевоеСлово КАК КлючевоеСлово,
	|	ВложенныйЗапрос.КатегорияБазыЗнаний,
	|	КОЛИЧЕСТВО(ВложенныйЗапрос.СтатьяБазыЗнаний) КАК Количество,
	|	ВложенныйЗапрос.КлючевоеСлово.Наименование КАК Наименование
	|ИЗ
	|	(ВЫБРАТЬ
	|		СвязьКлючевыхСловБазыЗнаний.КлючевоеСлово КАК КлючевоеСлово,
	|		ЗНАЧЕНИЕ(Справочник.КатегорииБазыЗнаний.ПустаяСсылка) КАК КатегорияБазыЗнаний,
	|		СвязьКлючевыхСловБазыЗнаний.СтатьяБазыЗнаний КАК СтатьяБазыЗнаний
	|	ИЗ
	|		РегистрСведений.СвязьКлючевыхСловБазыЗнаний КАК СвязьКлючевыхСловБазыЗнаний
	|	ГДЕ
	|		СвязьКлючевыхСловБазыЗнаний.КлючевоеСлово В(&Теги)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		СвязьКлючевыхСловБазыЗнаний.КлючевоеСлово,
	|		СтатьиБазыЗнанийКатегории.Категория,
	|		СвязьКлючевыхСловБазыЗнаний.СтатьяБазыЗнаний
	|	ИЗ
	|		РегистрСведений.СвязьКлючевыхСловБазыЗнаний КАК СвязьКлючевыхСловБазыЗнаний
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтатьиБазыЗнаний.Категории КАК СтатьиБазыЗнанийКатегории
	|			ПО СвязьКлючевыхСловБазыЗнаний.СтатьяБазыЗнаний = СтатьиБазыЗнанийКатегории.Ссылка
	|	ГДЕ
	|		СвязьКлючевыхСловБазыЗнаний.КлючевоеСлово В(&Теги)) КАК ВложенныйЗапрос
	|
	|СГРУППИРОВАТЬ ПО
	|	ВложенныйЗапрос.КлючевоеСлово,
	|	ВложенныйЗапрос.КатегорияБазыЗнаний,
	|	ВложенныйЗапрос.КлючевоеСлово.Наименование
	|
	|УПОРЯДОЧИТЬ ПО
	|	КлючевоеСлово";
	
	ТаблицаДанных = Запрос.Выполнить().Выгрузить();
	ТаблицаДанных.Индексы.Добавить("КлючевоеСлово");
	
	// Новые данные рейтинга
	МассивТегов	= Новый Массив;
	ОбщегоНазначения.ЗаполнитьМассивУникальнымиЗначениями(МассивТегов, ТаблицаДанных.ВыгрузитьКолонку("КлючевоеСлово"));
	Для Каждого КлючевоеСлово Из МассивТегов Цикл
		ТаблицаЗаписей = ТаблицаДанных.НайтиСтроки(Новый Структура("КлючевоеСлово", КлючевоеСлово));
		
		НаборЗаписей = РегистрыСведений.РейтингКлючевыхСловБазыЗнаний.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.КлючевоеСлово.Установить(КлючевоеСлово);
		Для Каждого СтрокаТаблицы Из ТаблицаЗаписей Цикл
			ЗаписьРегистра = НаборЗаписей.Добавить();
			ЗаполнитьЗначенияСвойств(ЗаписьРегистра, СтрокаТаблицы);
		КонецЦикла;
		НаборЗаписей.Записать(Истина);
		
		ТекИндекс = КлючевыеСлова.Найти(КлючевоеСлово);
		Если ТекИндекс <> Неопределено Тогда
			КлючевыеСлова.Удалить(ТекИндекс);
		КонецЕсли;
	КонецЦикла;
	
	// Удалим нулевые данные
	Для Каждого КлючевоеСлово Из КлючевыеСлова Цикл
		НаборЗаписей = РегистрыСведений.РейтингКлючевыхСловБазыЗнаний.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.КлючевоеСлово.Установить(КлючевоеСлово);
		НаборЗаписей.Прочитать();
		НаборЗаписей.Очистить();
		НаборЗаписей.Записать(Истина);
	КонецЦикла;
	
	ПараметрыВыполнения.Вставить("Выполнено", Истина);
	Если ЭтоАдресВременногоХранилища(АдресХранилища) Тогда
		ПоместитьВоВременноеХранилище(ПараметрыВыполнения, АдресХранилища);
	КонецЕсли;
	
КонецПроцедуры

// Статьи
Процедура ОбновитьКоличествоКомментариев(знач ПараметрыВыполнения, знач АдресХранилища = "") Экспорт
	
	СтатьяСсылка = ПараметрыВыполнения.Статья;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", СтатьяСсылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	КОЛИЧЕСТВО(КомментарииБазыЗнаний.Ссылка) КАК Количество
	|ИЗ
	|	Справочник.КомментарииБазыЗнаний КАК КомментарииБазыЗнаний
	|ГДЕ
	|	КомментарииБазыЗнаний.Владелец = &Ссылка
	|	И НЕ КомментарииБазыЗнаний.ПометкаУдаления";
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Количество = 0;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Количество = Выборка.Количество;
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений.СтатистикаСтатейБазыЗнаний.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.СтатьяБазыЗнаний	= СтатьяСсылка;
	МенеджерЗаписи.Прочитать();
	Если МенеджерЗаписи.Выбран() Тогда
		МенеджерЗаписи.Комментарии = Количество;
		МенеджерЗаписи.Записать(Истина);
	КонецЕсли;
	
	ПараметрыВыполнения.Вставить("Выполнено", Истина);
	Если ЭтоАдресВременногоХранилища(АдресХранилища) Тогда
		ПоместитьВоВременноеХранилище(ПараметрыВыполнения, АдресХранилища);
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗарегистрироватьИзменениеСтатьи(знач СтатьяСсылка) Экспорт
	
	МенеджерЗаписи = РегистрыСведений.СтатистикаСтатейБазыЗнаний.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.СтатьяБазыЗнаний = СтатьяСсылка;
	МенеджерЗаписи.Прочитать();
	
	Если НЕ МенеджерЗаписи.Выбран() Тогда
		МенеджерЗаписи.СтатьяБазыЗнаний = СтатьяСсылка;
	КонецЕсли;
	
	Если МенеджерЗаписи.Создана = Дата(1, 1, 1) Тогда
		МенеджерЗаписи.Создана = ТекущаяДатаСеанса();
	КонецЕсли;
	
	МенеджерЗаписи.Изменена = ТекущаяДатаСеанса();
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

Процедура ДобавитьПросмотрСтатьи(знач СтатьяСсылка) Экспорт
	
	НаборЗаписей = РегистрыСведений.СтатистикаСтатейБазыЗнаний.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.СтатьяБазыЗнаний.Установить(СтатьяСсылка);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписьРегистра = НаборЗаписей[0];
	ЗаписьРегистра.Просмотры = ЗаписьРегистра.Просмотры + 1;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

Процедура ДобавитьОценкуСтатье(знач СтатьяСсылка, знач Пользователь, знач Оценка) Экспорт
	
	Если Оценка < 1 ИЛИ Оценка > 5 Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерЗаписи = РегистрыСведений.РейтингСтатейБазыЗнаний.СоздатьМенеджерЗаписи();
	МенеджерЗаписи.СтатьяБазыЗнаний = СтатьяСсылка;
	МенеджерЗаписи.Пользователь		= Пользователь;
	
	МенеджерЗаписи.Прочитать();
	Если НЕ МенеджерЗаписи.Выбран() Тогда
		МенеджерЗаписи.СтатьяБазыЗнаний	= СтатьяСсылка;
		МенеджерЗаписи.Пользователь		= Пользователь;
	КонецЕсли;
	
	МенеджерЗаписи.Оценка		= Оценка;
	МенеджерЗаписи.ДатаОценки	= ТекущаяДатаСеанса();
	МенеджерЗаписи.Записать(Истина);
	
	НаборЗаписей = РегистрыСведений.СтатистикаСтатейБазыЗнаний.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.СтатьяБазыЗнаний.Установить(СтатьяСсылка);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() > 0 Тогда
		ДанныеРейтинга = ПолучитьДанныеРейтингаСтатьи(СтатьяСсылка);
		
		ЗаписьРегистра = НаборЗаписей[0];
		ЗаписьРегистра.СредняяОценка	= ДанныеРейтинга.СредняяОценка;
		ЗаписьРегистра.Проголосовало	= ДанныеРейтинга.Проголосовало;
		
		НаборЗаписей.Записать();
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьОценкуСтатьи(знач СтатьяСсылка, знач Пользователь) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Статья", СтатьяСсылка);
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РейтингСтатейБазыЗнаний.Оценка
	|ИЗ
	|	РегистрСведений.РейтингСтатейБазыЗнаний КАК РейтингСтатейБазыЗнаний
	|ГДЕ
	|	РейтингСтатейБазыЗнаний.СтатьяБазыЗнаний = &Статья
	|	И РейтингСтатейБазыЗнаний.Пользователь = &Пользователь";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат 0;
	Иначе 
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		Возврат Выборка.Оценка;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьДанныеРейтингаСтатьи(знач СтатьяСсылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СтатьяБазыЗнаний", СтатьяСсылка);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РейтингСтатейБазыЗнаний.Оценка) = 0
	|			ТОГДА 0
	|		ИНАЧЕ СУММА(РейтингСтатейБазыЗнаний.Оценка) / КОЛИЧЕСТВО(РейтингСтатейБазыЗнаний.Оценка)
	|	КОНЕЦ КАК СредняяОценка,
	|	КОЛИЧЕСТВО(РейтингСтатейБазыЗнаний.Оценка) КАК Проголосовало
	|ИЗ
	|	РегистрСведений.РейтингСтатейБазыЗнаний КАК РейтингСтатейБазыЗнаний
	|ГДЕ
	|	РейтингСтатейБазыЗнаний.СтатьяБазыЗнаний = &СтатьяБазыЗнаний";
	Результат = Запрос.Выполнить();
	
	Данные = Новый Структура("СредняяОценка, Проголосовало", 0, 0);
	
	Если Результат.Пустой() Тогда
		Возврат Данные;
	Иначе 
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		ЗаполнитьЗначенияСвойств(Данные, Выборка);
		
		Возврат Данные;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСтатистикуПоСтатье(знач СтатьяСсылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Статья", СтатьяСсылка);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СтатистикаСтатейБазыЗнаний.*
	|ИЗ
	|	РегистрСведений.СтатистикаСтатейБазыЗнаний КАК СтатистикаСтатейБазыЗнаний
	|ГДЕ
	|	СтатистикаСтатейБазыЗнаний.СтатьяБазыЗнаний = &Статья";
	
	Результат = Запрос.Выполнить();
	
	СтруктураДанных = Новый Структура;
	Для Каждого Колонка Из Результат.Колонки Цикл
		СтруктураДанных.Вставить(Колонка.Имя, Колонка.ТипЗначения.ПривестиЗначение());
	КонецЦикла;
	
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		ЗаполнитьЗначенияСвойств(СтруктураДанных, Выборка);
	КонецЕсли;
	
	Возврат СтруктураДанных;
	
КонецФункции

// Новости
Процедура ДобавитьПросмотрНовости(знач НовостьСсылка, знач Пользователь = Неопределено) Экспорт
	
	// Статистика просмотров новостей
	НаборЗаписей = РегистрыСведений.СтатистикаНовостейБазыЗнаний.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Новость.Установить(НовостьСсылка);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 Тогда
		ЗаписьРегистра = НаборЗаписей.Добавить();
		ЗаписьРегистра.Новость	= НовостьСсылка;
	Иначе 
		ЗаписьРегистра = НаборЗаписей[0];
	КонецЕсли;
	ЗаписьРегистра.Просмотры = ЗаписьРегистра.Просмотры + 1;
	
	НаборЗаписей.Записать(Истина);
	
	// Если пользователь указан, установим что он просмотрел новость
	Если ЗначениеЗаполнено(Пользователь) Тогда
		НаборЗаписей = РегистрыСведений.ПолучателиНовостейБазыЗнаний.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Новость.Установить(НовостьСсылка);
		НаборЗаписей.Отбор.Пользователь.Установить(Пользователь);
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() = 0 Тогда
			ЗаписьРегистра = НаборЗаписей.Добавить();
			ЗаписьРегистра.Новость		= НовостьСсылка;
			ЗаписьРегистра.Пользователь	= Пользователь;
		Иначе 
			ЗаписьРегистра = НаборЗаписей[0];
		КонецЕсли;
		ЗаписьРегистра.Просмотрено = Истина;
		
		НаборЗаписей.Записать(Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ЧтениеДанных

// Возвращает массив данных по категориям по заданным настройкам отбора
// 
// Параметры
//	НастройкаОтбора - Массив[Структура]
//		Группа
//			ЭтоГруппа - Булево. Признак группы
//			ТипГруппы - ТипГруппыЭлементовОтбораКомпоновкиДанных
//			Элементы - Массив[Структура]. Массив элементов отбора 
//		Элементы
//			Поле - Строка. Поле для отбора. Допустимые значения:
//				Ссылка.*, Родитель.*, Наименование, Тип
//			ВидСравнения - ВидСравненияКомпоновкиДанных
//			Значение - любое значение
//	НастройкаПорядка - Строка. Допустимые значения:
//		Ссылка, Родитель, Наименование, РеквизитДопУпорядочивания, Тип
//
// Возвращаемое значение
//	ТаблицаЗначений.
//		Ссылка - СправочникСсылка.КатегорииБазыЗнаний
//		Родитель - СправочникСсылка.КатегорииБазыЗнаний
//		Наименование - Строка
//		Описание - Строка
//		Тип - Число
//		РеквизитДопУпорядочивания - Число
//		КоличествоСтатей - Число
//		КоличествоКатегорий - Число
//		Идентификатор - УникальныйИдентификатор
//		Избранное - Структура
//			Создание - Булево
//			Изменение - Булево
//			Удаление - Булево
//			Комментарии - Булево
//			Оповещения - Булево
//
Функция ПолучитьКатегории(знач НастройкаОтбора, знач НастройкаПорядка = Неопределено, знач Разрешенные = Истина) Экспорт
	
	Если НЕ ТипЗнч(НастройкаОтбора) = Тип("Массив") Тогда
		НастройкаОтбора = Новый Массив;
	КонецЕсли;
	                   
	НастройкаПорядка = БазаЗнанийКлиентСервер.РазобратьСтрокуСортировки(НастройкаПорядка);
	
	// Из СКД сформируем требуемый текст запроса с условиями
	СхемаКомпоновки = Справочники.КатегорииБазыЗнаний.ПолучитьМакет("ВыборкаДанных");
		
	КомпоновщикМакета	= Новый КомпоновщикМакетаКомпоновкиДанных();
	КомпоновщикНастроек	= Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновки));
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновки.НастройкиПоУмолчанию);
	КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	
	// Отбор
	БазаЗнанийСлужебный.УстановитьОтборПоЗаданнымНастройкам(КомпоновщикНастроек.Настройки.Отбор, НастройкаОтбора);
	
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновки,
		КомпоновщикНастроек.ПолучитьНастройки(),,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ТекстЗапроса = МакетКомпоновкиДанных.НаборыДанных.ОсновнойНаборДанных.Запрос;
	
	// Установим в построитель запросов
	ПостроительЗапроса = Новый ПостроительЗапроса(ТекстЗапроса);
	ПостроительЗапроса.ЗаполнитьНастройки();
	Для Каждого Параметр Из МакетКомпоновкиДанных.ЗначенияПараметров Цикл
		ПостроительЗапроса.Параметры.Вставить(Параметр.Имя, Параметр.Значение);
	КонецЦикла;
	
	// Добавляем настройку упорядочивания
	Для Каждого СтруктураПорядка Из НастройкаПорядка Цикл
		ПостроительЗапроса.Порядок.Добавить(СтруктураПорядка.Поле);
		
		ЭлементПорядка = ПостроительЗапроса.Порядок.Найти(СтруктураПорядка.Поле);
		Если ЭлементПорядка <> Неопределено Тогда
			ЭлементПорядка.Направление = СтруктураПорядка.Направление;
		КонецЕсли;
	КонецЦикла;
	
	// RLS
	Если НЕ Разрешенные Тогда
		ПостроительЗапроса.Текст = СтрЗаменить(ПостроительЗапроса.Текст, " РАЗРЕШЕННЫЕ", "");
	КонецЕсли;
	
	// Получим запрос и заполним данные
	Запрос = ПостроительЗапроса.ПолучитьЗапрос();
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаДанных = РезультатЗапроса.Выгрузить();
	ТаблицаДанных.Индексы.Добавить("Ссылка");
	ТаблицаДанных.Колонки.Добавить("Идентификатор");
	ТаблицаДанных.Колонки.Добавить("Избранное");
	
	Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл
		СтрокаТаблицы.Идентификатор = СтрокаТаблицы.Ссылка.УникальныйИдентификатор();
	КонецЦикла;
	
	// Получим данные по избранным категориям пользователя
	ТекПользователь = Пользователи.ТекущийПользователь();
	Если ЗначениеЗаполнено(ТекПользователь) Тогда
		СписокКатегорий = Новый СписокЗначений;
		СписокКатегорий.ЗагрузитьЗначения(ТаблицаДанных.ВыгрузитьКолонку("Ссылка"));
		
		НастройкаОтбора = Новый Массив;
		НастройкаОтбора.Добавить(Новый Структура("Поле, ВидСравнения, Значение",
			"КатегорияБазыЗнаний",
			ВидСравнения.ВСписке,
			СписокКатегорий));
		
		ДанныеИзбранное = ПолучитьИзбранное(ТекПользователь, НастройкаОтбора);
		
		Для Каждого СтруктураДанных Из ДанныеИзбранное Цикл
			СтрокаТаблицы = ТаблицаДанных.Найти(СтруктураДанных.КатегорияБазыЗнаний, "Ссылка");
			Если СтрокаТаблицы = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаТаблицы.Избранное = Новый ФиксированнаяСтруктура(СтруктураДанных);
		КонецЦикла;
	КонецЕсли;
	
	Возврат ТаблицаДанных;
	
КонецФункции

// Возвращает массив данных по статьям по заданным настройкам отбора
// 
// Параметры
//	НастройкаОтбора - Тип: Массив[Структура].
//		Группа
//			ЭтоГруппа - Булево. Признак группы
//			ТипГруппы - ТипГруппыЭлементовОтбораКомпоновкиДанных
//			Элементы - Массив[Структура]. Массив элементов отбора 
//		Элементы
//			Поле - Строка. Поле для отбора. Допустимые значения:
//				Ссылка.*, Родитель.*, Наименование, Тип
//			ВидСравнения - ВидСравненияКомпоновкиДанных
//			Значение - любое значение
//	НастройкаПорядка - Строка. Доступные значения:
//		Ссылка, Категория, РеквизитДопУпорядочивания, Наименование, СредняяОценка, Просмотры, Создана
//	Количество - Число. Количество статей в массиве
//
// Возвращаемое значение
//	ТаблицаЗначений.
//		Ссылка - СправочникСсылка.СтатьиБазыЗнаний
//		Наименование - Строка
//		КраткоеОписание - Строка
//		Текст - Строка
//		РеквизитДопУпорядочивания - Число
//		Редактирует - СправочникСсылка.Пользователь
//		ДатаБлокировки - Дата
//		Автор - СправочникСсылка.Пользователь
//		Черновик - Булево
//		Категории - Массив[СправочникСсылка.КатегорииБазыЗнаний]
//		Статистика - Структура
//			Просмотры - Число
//			Создана - Дата
//			Изменена - Дата
//			СредняяОценка - Число
//			Проголосовало - Число
//			Комментарии - Число
//		Идентификатор - УникальныйИдентификатор
//
Функция ПолучитьСтатьи(знач НастройкаОтбора, знач НастройкаПорядка = Неопределено, знач Количество = 0, знач Разрешенные = Истина) Экспорт
	
	КолПервых = Макс(0, Количество);
	
	Если НЕ ТипЗнч(НастройкаОтбора) = Тип("Массив") Тогда
		НастройкаОтбора = Новый Массив;
	КонецЕсли;
	                   
	НастройкаПорядка = БазаЗнанийКлиентСервер.РазобратьСтрокуСортировки(НастройкаПорядка);
	
	// Из СКД сформируем требуемый текст запроса с условиями
	СхемаКомпоновки = Справочники.СтатьиБазыЗнаний.ПолучитьМакет("ВыборкаДанных");
		
	КомпоновщикМакета	= Новый КомпоновщикМакетаКомпоновкиДанных();
	КомпоновщикНастроек	= Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновки));
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновки.НастройкиПоУмолчанию);
	КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	
	// Отбор
	БазаЗнанийСлужебный.УстановитьОтборПоЗаданнымНастройкам(КомпоновщикНастроек.Настройки.Отбор, НастройкаОтбора);
	
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновки,
		КомпоновщикНастроек.ПолучитьНастройки(),,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	НачальнаяСтрока = "ВЫБРАТЬ РАЗРЕШЕННЫЕ" + ?(КолПервых <= 0, "", " ПЕРВЫЕ " + Формат(КолПервых, "ЧГ=")) + "
	|	СтатьиБазыЗнаний.Категории.(
	|		Категория
	|	),";
	
	ТекстЗапроса = МакетКомпоновкиДанных.НаборыДанных.ОсновнойНаборДанных.Запрос;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВЫБРАТЬ РАЗРЕШЕННЫЕ", НачальнаяСтрока); 
	
	// Установим в построитель запросов
	ПостроительЗапроса = Новый ПостроительЗапроса(ТекстЗапроса);
	ПостроительЗапроса.ЗаполнитьНастройки();
	Для Каждого Параметр Из МакетКомпоновкиДанных.ЗначенияПараметров Цикл
		ПостроительЗапроса.Параметры.Вставить(Параметр.Имя, Параметр.Значение);
	КонецЦикла;
	
	// Добавляем настройку упорядочивания
	Для Каждого СтруктураПорядка Из НастройкаПорядка Цикл
		ПостроительЗапроса.Порядок.Добавить(СтруктураПорядка.Поле);
		
		ЭлементПорядка = ПостроительЗапроса.Порядок.Найти(СтруктураПорядка.Поле);
		Если ЭлементПорядка <> Неопределено Тогда
			ЭлементПорядка.Направление = СтруктураПорядка.Направление;
		КонецЕсли;
	КонецЦикла;
	
	// RLS
	Если НЕ Разрешенные Тогда
		ПостроительЗапроса.Текст = СтрЗаменить(ПостроительЗапроса.Текст, " РАЗРЕШЕННЫЕ", "");
	КонецЕсли;
	
	// Получим запрос и заполним данные
	Запрос = ПостроительЗапроса.ПолучитьЗапрос();
	РезультатЗапроса = Запрос.Выполнить();
	
	ТаблицаДанных = Новый ТаблицаЗначений;
	ТаблицаДанных.Колонки.Добавить("Ссылка");
	ТаблицаДанных.Колонки.Добавить("Наименование");
	ТаблицаДанных.Колонки.Добавить("КраткоеОписание");
	ТаблицаДанных.Колонки.Добавить("Текст");
	ТаблицаДанных.Колонки.Добавить("РеквизитДопУпорядочивания");
	ТаблицаДанных.Колонки.Добавить("Редактирует");
	ТаблицаДанных.Колонки.Добавить("ДатаБлокировки");
	ТаблицаДанных.Колонки.Добавить("Автор");
	ТаблицаДанных.Колонки.Добавить("Черновик");
	ТаблицаДанных.Колонки.Добавить("Категории");
	ТаблицаДанных.Колонки.Добавить("Просмотры");
	ТаблицаДанных.Колонки.Добавить("Создана");
	ТаблицаДанных.Колонки.Добавить("Изменена");
	ТаблицаДанных.Колонки.Добавить("СредняяОценка");
	ТаблицаДанных.Колонки.Добавить("Проголосовало");
	ТаблицаДанных.Колонки.Добавить("Комментарии");
	ТаблицаДанных.Колонки.Добавить("Идентификатор");
	
	ТаблицаДанных.Индексы.Добавить("Ссылка");
	
	Выборка = ПостроительЗапроса.Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаТаблицы = ТаблицаДанных.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка, , "Категории");
		
		СтрокаТаблицы.Категории		= Выборка.Категории.Выгрузить().ВыгрузитьКолонку("Категория");
		СтрокаТаблицы.Идентификатор = СтрокаТаблицы.Ссылка.УникальныйИдентификатор();
	КонецЦикла;
	
	Возврат ТаблицаДанных;
	
КонецФункции

// Возвращает массив данных новостей по заданным настройкам отбора
// 
// Параметры
//	НастройкаОтбора - Тип: Массив[Структура].
//		Группа
//			ЭтоГруппа - Булево. Признак группы
//			ТипГруппы - ТипГруппыЭлементовОтбораКомпоновкиДанных
//			Элементы - Массив[Структура]. Массив элементов отбора 
//		Элементы
//			Поле - Строка. Поле для отбора. Допустимые значения:
//				Ссылка.*, Родитель.*, Наименование, Тип
//			ВидСравнения - ВидСравненияКомпоновкиДанных
//			Значение - любое значение
//	НастройкаПорядка - Строка. Доступные значения:
//		Дата, Ссылка.*
//	Количество - Число. Количество статей в массиве
//
// Возвращаемое значение
//	ТаблицаЗначений.
//		Ссылка - СправочникСсылка.СтатьиБазыЗнаний
//		Заголовок - Строка
//		Дата - Дата
//		Текст - Строка
//		ТекстHTML - Строка
//		ОбъектБазыЗнаний - СправочникСсылка.КатегорииБазыЗнаний, СправочникСсылка.СтатьиБазыЗнаний
//		Важность - Число
//		Вид - ПеречислениеСсылка.ВидыНовостейБазыЗнаний
//		Автор - СправочникСсылка.Пользователи
//		Просмотрено - Булево
//		Просмотров - Число
//		Идентификатор - УникальныйИдентификатор
//
Функция ПолучитьНовости(знач НастройкаОтбора, знач НастройкаПорядка = Неопределено, знач Количество = 20, знач Разрешенные = Истина) Экспорт
	
	Если НЕ ТипЗнч(НастройкаОтбора) = Тип("Массив") Тогда
		НастройкаОтбора = Новый Массив;
	КонецЕсли;
	                   
	НастройкаПорядка = БазаЗнанийКлиентСервер.РазобратьСтрокуСортировки(НастройкаПорядка);
	
	ТекПользователь = Пользователи.ТекущийПользователь();
	Количество		= Макс(0, Количество);
	СтрКоличество	= ?(Количество <= 0, "", " ПЕРВЫЕ " + Формат(Количество, "ЧГ="));
	
	// Из СКД сформируем требуемый текст запроса с условиями
	СхемаКомпоновки = Справочники.НовостиБазыЗнаний.ПолучитьМакет("ВыборкаДанных");
		
	КомпоновщикМакета	= Новый КомпоновщикМакетаКомпоновкиДанных();
	КомпоновщикНастроек	= Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновки));
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновки.НастройкиПоУмолчанию);
	КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	
	КомпоновщикНастроек.Настройки.ПараметрыДанных.УстановитьЗначениеПараметра("Пользователь", ТекПользователь);
	
	// Отбор
	БазаЗнанийСлужебный.УстановитьОтборПоЗаданнымНастройкам(КомпоновщикНастроек.Настройки.Отбор, НастройкаОтбора);
	
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновки,
		КомпоновщикНастроек.ПолучитьНастройки(),,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	НачальнаяСтрока = "ВЫБРАТЬ РАЗРЕШЕННЫЕ" + СтрКоличество;
	
	ТекстЗапроса = МакетКомпоновкиДанных.НаборыДанных.ОсновнойНаборДанных.Запрос;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВЫБРАТЬ РАЗРЕШЕННЫЕ", НачальнаяСтрока); 
	
	// Установим в построитель запросов
	ПостроительЗапроса = Новый ПостроительЗапроса(ТекстЗапроса);
	ПостроительЗапроса.ЗаполнитьНастройки();
	Для Каждого Параметр Из МакетКомпоновкиДанных.ЗначенияПараметров Цикл
		ПостроительЗапроса.Параметры.Вставить(Параметр.Имя, Параметр.Значение);
	КонецЦикла;
	
	// Добавляем настройку упорядочивания
	Для Каждого СтруктураПорядка Из НастройкаПорядка Цикл
		ПостроительЗапроса.Порядок.Добавить(СтруктураПорядка.Поле);
		
		ЭлементПорядка = ПостроительЗапроса.Порядок.Найти(СтруктураПорядка.Поле);
		Если ЭлементПорядка <> Неопределено Тогда
			ЭлементПорядка.Направление = СтруктураПорядка.Направление;
		КонецЕсли;
	КонецЦикла;
	
	// RLS
	Если НЕ Разрешенные Тогда
		ПостроительЗапроса.Текст = СтрЗаменить(ПостроительЗапроса.Текст, " РАЗРЕШЕННЫЕ", "");
	КонецЕсли;
	
	// Получим запрос и заполним данные
	Запрос = ПостроительЗапроса.ПолучитьЗапрос();
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "
		|ИЗ", "
		|ПОМЕСТИТЬ НовостиСсылки
		|ИЗ") + "
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Ссылка";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НовостиБазыЗнаний.Ссылка КАК Ссылка,
	|	НовостиБазыЗнаний.Наименование КАК Заголовок,
	|	НовостиБазыЗнаний.Дата КАК Дата,
	|	НовостиБазыЗнаний.Текст,
	|	НовостиБазыЗнаний.ТекстHTML,
	|	НовостиБазыЗнаний.ОбъектБазыЗнаний,
	|	НовостиБазыЗнаний.Важность,
	|	НовостиБазыЗнаний.Автор,
	|	НовостиБазыЗнаний.Вид,
	|	ЕСТЬNULL(ДанныеПолучателя.Просмотрено, ЛОЖЬ) КАК Просмотрено,
	|	ЕСТЬNULL(Статистика.Просмотры, 0) КАК Просмотров
	|ИЗ
	|	Справочник.НовостиБазыЗнаний КАК НовостиБазыЗнаний
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПолучателиНовостейБазыЗнаний КАК ДанныеПолучателя
	|		ПО НовостиБазыЗнаний.Ссылка = ДанныеПолучателя.Новость
	|			И (ДанныеПолучателя.Пользователь = &Пользователь)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатистикаНовостейБазыЗнаний КАК Статистика
	|		ПО НовостиБазыЗнаний.Ссылка = Статистика.Новость
	|ГДЕ
	|	НовостиБазыЗнаний.Ссылка В
	|			(ВЫБРАТЬ
	|				НовостиСсылки.Ссылка
	|			ИЗ
	|				НовостиСсылки)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ,
	|	Ссылка УБЫВ";

	ТаблицаДанных = Запрос.Выполнить().Выгрузить();
	ТаблицаДанных.Колонки.Добавить("Идентификатор");
	
	Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл
		СтрокаТаблицы.Идентификатор = СтрокаТаблицы.Ссылка.УникальныйИдентификатор();
	КонецЦикла;
	
	Возврат ТаблицаДанных;
	
КонецФункции

// Возвращает массив ссылок на статьи с отбором и сортировкой по статистике
// 
// Параметры
//	НастройкаОтбора - Тип: Массив[Структура].
//		Группа
//			ЭтоГруппа - Булево. Признак группы
//			ТипГруппы - ТипГруппыЭлементовОтбораКомпоновкиДанных
//			Элементы - Массив[Структура]. Массив элементов отбора 
//		Элементы
//			Поле - Строка. Поле для отбора. Допустимые значения:
//				Ссылка.*, Родитель.*, Наименование, Тип
//			ВидСравнения - ВидСравненияКомпоновкиДанных
//			Значение - любое значение
//	НастройкаПорядка - Строка. Доступные значения:
//		Дата, Ссылка.*
//	Количество - Число. Количество статей в массиве
//
// Возвращаемое значение
//	ТаблицаЗначений (см. ПолучитьСтатьи)
//
Функция ПолучитьСтатьиПоСтатистике(знач ВидСтраницы, знач СтатьяСсылка = Неопределено, знач Количество = 20, знач Направление = "вперед", знач Разрешенные = Истина) Экспорт
	
	Количество		= Макс(0, Количество);
	Направление		= НРег(Направление);
	
	СтрКоличество	= ?(Количество <= 0, "", " ПЕРВЫЕ " + Формат(Количество, "ЧГ="));
	НапрСравнения	= ?(Направление = "вперед", ВидСравненияКомпоновкиДанных.Меньше, ВидСравненияКомпоновкиДанных.Больше);
	ПараметрыПоВиду = БазаЗнанийHTMLКлиентСервер.ПолучитьПараметрыВыводаСтраницыПоВиду(ВидСтраницы);
	
	// Установка отбора
	НастройкаОтбора = Новый Массив;
	Если ЗначениеЗаполнено(СтатьяСсылка) Тогда
		Статистика = ПолучитьСтатистикуПоСтатье(СтатьяСсылка);
		
		Если ВидСтраницы = "featured_articles" Тогда
			// СредняяОценка >	
			ГруппаИЛИ_1 = БазаЗнанийКлиентСервер.ДобавитьГруппуОтбора(НастройкаОтбора, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
			БазаЗнанийКлиентСервер.ДобавитьЭлементОтбора(ГруппаИЛИ_1, "СредняяОценка", Статистика.СредняяОценка, НапрСравнения);
			
			// СредняяОценка =, Просмотры >
			ГруппаИЛИ_2 = БазаЗнанийКлиентСервер.ДобавитьГруппуОтбора(ГруппаИЛИ_1, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
			БазаЗнанийКлиентСервер.ДобавитьЭлементОтбора(ГруппаИЛИ_2, "СредняяОценка", Статистика.СредняяОценка, ВидСравненияКомпоновкиДанных.Равно);
			БазаЗнанийКлиентСервер.ДобавитьЭлементОтбора(ГруппаИЛИ_2, "Просмотры", Статистика.Просмотры, НапрСравнения);
			
			// СредняяОценка =, Просмотры =, Ссылка >
			ГруппаИЛИ_3 = БазаЗнанийКлиентСервер.ДобавитьГруппуОтбора(ГруппаИЛИ_1, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
			БазаЗнанийКлиентСервер.ДобавитьЭлементОтбора(ГруппаИЛИ_3, "СредняяОценка", Статистика.СредняяОценка, ВидСравненияКомпоновкиДанных.Равно);
			БазаЗнанийКлиентСервер.ДобавитьЭлементОтбора(ГруппаИЛИ_3, "Просмотры", Статистика.Просмотры, ВидСравненияКомпоновкиДанных.Равно);
			БазаЗнанийКлиентСервер.ДобавитьЭлементОтбора(ГруппаИЛИ_3, "Ссылка", СтатьяСсылка, НапрСравнения);
		ИначеЕсли ВидСтраницы = "recently_added" Тогда
			// Создана >
			ГруппаИЛИ_1 = БазаЗнанийКлиентСервер.ДобавитьГруппуОтбора(НастройкаОтбора, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
			БазаЗнанийКлиентСервер.ДобавитьЭлементОтбора(ГруппаИЛИ_1, "Создана", Статистика.Создана, НапрСравнения);
			
			// Создана =, Ссылка >
			ГруппаИЛИ_2 = БазаЗнанийКлиентСервер.ДобавитьГруппуОтбора(ГруппаИЛИ_1, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
			БазаЗнанийКлиентСервер.ДобавитьЭлементОтбора(ГруппаИЛИ_2, "Создана", Статистика.Создана, ВидСравненияКомпоновкиДанных.Равно);
			БазаЗнанийКлиентСервер.ДобавитьЭлементОтбора(ГруппаИЛИ_2, "Ссылка", СтатьяСсылка, НапрСравнения);
		ИначеЕсли ВидСтраницы = "most_popular" Тогда
			// Просмотры >
			ГруппаИЛИ_1 = БазаЗнанийКлиентСервер.ДобавитьГруппуОтбора(НастройкаОтбора, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
			БазаЗнанийКлиентСервер.ДобавитьЭлементОтбора(ГруппаИЛИ_1, "Просмотры", Статистика.Просмотры, НапрСравнения);
			
			// Просмотры =, Ссылка >
			ГруппаИЛИ_2 = БазаЗнанийКлиентСервер.ДобавитьГруппуОтбора(ГруппаИЛИ_1, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
			БазаЗнанийКлиентСервер.ДобавитьЭлементОтбора(ГруппаИЛИ_2, "Просмотры", Статистика.Просмотры, ВидСравненияКомпоновкиДанных.Равно);
			БазаЗнанийКлиентСервер.ДобавитьЭлементОтбора(ГруппаИЛИ_2, "Ссылка", СтатьяСсылка, НапрСравнения);
		ИначеЕсли ВидСтраницы = "top_rated" Тогда
			// СредняяОценка >
			ГруппаИЛИ_1 = БазаЗнанийКлиентСервер.ДобавитьГруппуОтбора(НастройкаОтбора, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
			БазаЗнанийКлиентСервер.ДобавитьЭлементОтбора(ГруппаИЛИ_1, "СредняяОценка", Статистика.СредняяОценка, НапрСравнения);
			
			// СредняяОценка =, Ссылка >
			ГруппаИЛИ_2 = БазаЗнанийКлиентСервер.ДобавитьГруппуОтбора(ГруппаИЛИ_1, ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли);
			БазаЗнанийКлиентСервер.ДобавитьЭлементОтбора(ГруппаИЛИ_2, "СредняяОценка", Статистика.СредняяОценка, ВидСравненияКомпоновкиДанных.Равно);
			БазаЗнанийКлиентСервер.ДобавитьЭлементОтбора(ГруппаИЛИ_2, "Ссылка", СтатьяСсылка, НапрСравнения);
		КонецЕсли;
	КонецЕсли;
	
	// Установка порядка
	НастройкаПорядка = ПараметрыПоВиду.Порядок;
	Если Направление = "назад" Тогда
		НастройкаПорядка = СтрЗаменить(НастройкаПорядка, " УБЫВ", "");
		НастройкаПорядка = СтрЗаменить(НастройкаПорядка, " ВОЗР", " УБЫВ");
	КонецЕсли;
	НастройкаПорядка = БазаЗнанийКлиентСервер.РазобратьСтрокуСортировки(НастройкаПорядка);
	
	// Из СКД сформируем требуемый текст запроса с условиями
	СхемаКомпоновки = РегистрыСведений.СтатистикаСтатейБазыЗнаний.ПолучитьМакет("ВыборкаДанных");
		
	КомпоновщикМакета	= Новый КомпоновщикМакетаКомпоновкиДанных();
	КомпоновщикНастроек	= Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновки));
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновки.НастройкиПоУмолчанию);
	КомпоновщикНастроек.Восстановить(СпособВосстановленияНастроекКомпоновкиДанных.ПроверятьДоступность);
	
	// Отбор
	БазаЗнанийСлужебный.УстановитьОтборПоЗаданнымНастройкам(КомпоновщикНастроек.Настройки.Отбор, НастройкаОтбора);
	
	МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновки,
		КомпоновщикНастроек.ПолучитьНастройки(),,,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	НачальнаяСтрока = "ВЫБРАТЬ РАЗРЕШЕННЫЕ" + СтрКоличество;
	
	ТекстЗапроса = МакетКомпоновкиДанных.НаборыДанных.ОсновнойНаборДанных.Запрос;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ВЫБРАТЬ РАЗРЕШЕННЫЕ", НачальнаяСтрока); 
	
	// Установим в построитель запросов
	ПостроительЗапроса = Новый ПостроительЗапроса(ТекстЗапроса);
	ПостроительЗапроса.ЗаполнитьНастройки();
	Для Каждого Параметр Из МакетКомпоновкиДанных.ЗначенияПараметров Цикл
		ПостроительЗапроса.Параметры.Вставить(Параметр.Имя, Параметр.Значение);
	КонецЦикла;
	
	// Добавляем настройку упорядочивания
	Для Каждого СтруктураПорядка Из НастройкаПорядка Цикл
		ПостроительЗапроса.Порядок.Добавить(СтруктураПорядка.Поле);
		
		ЭлементПорядка = ПостроительЗапроса.Порядок.Найти(СтруктураПорядка.Поле);
		Если ЭлементПорядка <> Неопределено Тогда
			ЭлементПорядка.Направление = СтруктураПорядка.Направление;
		КонецЕсли;
	КонецЦикла;
	
	// RLS
	Если НЕ Разрешенные Тогда
		ПостроительЗапроса.Текст = СтрЗаменить(ПостроительЗапроса.Текст, " РАЗРЕШЕННЫЕ", "");
	КонецЕсли;
	
	// Получим данные
	ПостроительЗапроса.Выполнить();
	Если ПостроительЗапроса.Результат.Пустой() Тогда
		Возврат Новый ТаблицаЗначений;
	КонецЕсли;
	МассивСтатей = ПостроительЗапроса.Результат.Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	// Подготовим запрос для получения данных
	НастройкаОтбора = Новый Массив;
	БазаЗнанийКлиентСервер.ДобавитьЭлементОтбора(НастройкаОтбора, "Ссылка", МассивСтатей, ВидСравненияКомпоновкиДанных.ВСписке);
	
	Возврат ПолучитьСтатьи(НастройкаОтбора, ПараметрыПоВиду.Порядок, , Ложь);
	
КонецФункции

// Возвращает массив ссылок на статьи с отбором по ключевому слову и категории
//
// Параметры
//	КлючевоеСлово - СправочникСсылка.КлючевыеСловаБазыЗнаний
//	КатегорияСсылка - СправочникСсылка.КатегорииБазыЗнаний
//
// Возвращаемое значение
//	Массив[СправочникСсылка.СтатьиБазыЗнаний]
//
Функция ПолучитьСтатьиПоКлючевомуСлову(знач КлючевоеСлово, знач КатегорияСсылка) Экспорт
	
	Если ТипЗнч(КлючевоеСлово) <> Тип("СправочникСсылка.КлючевыеСловаБазыЗнаний") Тогда
		КлючевоеСлово = Справочники.КлючевыеСловаБазыЗнаний.ПустаяСсылка();
	КонецЕсли;
	Если ТипЗнч(КатегорияСсылка) <> Тип("СправочникСсылка.КатегорииБазыЗнаний") Тогда
		КатегорияСсылка = Справочники.КатегорииБазыЗнаний.ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("КлючевоеСлово"	, КлючевоеСлово);
	Если ЗначениеЗаполнено(КатегорияСсылка) Тогда
		Запрос.УстановитьПараметр("Категория", КатегорияСсылка);
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	СвязьКлючевыхСловБазыЗнаний.СтатьяБазыЗнаний КАК Ссылка
		|ИЗ
		|	РегистрСведений.СвязьКлючевыхСловБазыЗнаний КАК СвязьКлючевыхСловБазыЗнаний
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СтатьиБазыЗнаний.Категории КАК СтатьиБазыЗнанийКатегории
		|		ПО СвязьКлючевыхСловБазыЗнаний.СтатьяБазыЗнаний = СтатьиБазыЗнанийКатегории.Ссылка
		|ГДЕ
		|	СвязьКлючевыхСловБазыЗнаний.КлючевоеСлово = &КлючевоеСлово
		|	И СтатьиБазыЗнанийКатегории.Категория = &Категория";
	Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СвязьКлючевыхСловБазыЗнаний.СтатьяБазыЗнаний КАК Ссылка
		|ИЗ
		|	РегистрСведений.СвязьКлючевыхСловБазыЗнаний КАК СвязьКлючевыхСловБазыЗнаний
		|ГДЕ
		|	СвязьКлючевыхСловБазыЗнаний.КлючевоеСлово = &КлючевоеСлово";
	КонецЕсли;
	МассивСсылок = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат МассивСсылок;
	
КонецФункции

// Возвращает собранные данные по статье, согласно запрошенным областям
//
// Параметры
//	СтатьяСсылка - СправочникСсылка.СтатьиБазыЗнаний
//	Область - Строка. Перечень областей необходимых к получению
//		Общее - КлючИЗначение. Реквизиты шапки справочника
//		Содержание - ТаблицаЗначений. ТЧ "Содержание"
//		Картинки - Соответствие. ТЧ "Картинки".
//		Таблицы - Соответствие. ТЧ "Таблицы"
//		Категории - ТаблицаЗначений. ТЧ "Категории"
//		Сноски - ТаблицаЗначений. ТЧ "Сноски"
//		Статистика - КлючИЗначение. РС "СтатистикаСтатейБазыЗнаний"
//		Блокировки - КлючИЗначение. РС "БлокировкаСтатьейБазыЗнаний"
//		Комментарии - Массив[Структура]. Справочник "КомментарииБазыЗнаний"
//		КлючевыеСлова - ТаблицаЗначений. Справочник "КлючевыеСловаБазыЗнаний"
//
// Возвращаемое значение
//	Структура
//
Функция ПолучитьДанныеСтатьи(знач СтатьяСсылка, знач Область = "") Экспорт
	
	Если НЕ ЗначениеЗаполнено(Область) Тогда
		Область = "Общее, Содержание, Картинки, Таблицы, Категории, Сноски,"
				+ "Статистика, Блокировки, КлючевыеСлова, Комментарии";
	КонецЕсли;
	
	ДанныеСтатьи	= Новый Структура;
	НаборДанных		= Новый Структура(Область);
	
	// Запрос
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", СтатьяСсылка);
	
	// Обработка и заполнение данных
	Если НаборДанных.Свойство("Общее") Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтатьиБазыЗнаний.Ссылка,
		|	СтатьиБазыЗнаний.Наименование,
		|	СтатьиБазыЗнаний.Ответственный,
		|	СтатьиБазыЗнаний.Текст,
		|	СтатьиБазыЗнаний.ТекстHTML,
		|	СтатьиБазыЗнаний.КраткоеОписание,
		|	СтатьиБазыЗнаний.ПоложениеСодержания,
		|	СтатьиБазыЗнаний.ЗапретПубликации
		|ИЗ
		|	Справочник.СтатьиБазыЗнаний КАК СтатьиБазыЗнаний
		|ГДЕ
		|	СтатьиБазыЗнаний.Ссылка = &Ссылка";
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		ДанныеСтатьи.Вставить("Ссылка"				, Выборка.Ссылка);
		ДанныеСтатьи.Вставить("Идентификатор"		, Выборка.Ссылка.УникальныйИдентификатор());
		ДанныеСтатьи.Вставить("Ответственный"		, Выборка.Ответственный);
		ДанныеСтатьи.Вставить("Заголовок"			, Выборка.Наименование);
		ДанныеСтатьи.Вставить("Описание"			, Выборка.КраткоеОписание);
		ДанныеСтатьи.Вставить("Текст"				, Выборка.Текст);
		ДанныеСтатьи.Вставить("ТекстHTML"			, Выборка.ТекстHTML);
		ДанныеСтатьи.Вставить("ЗапретПубликации"	, Выборка.ЗапретПубликации);
		ДанныеСтатьи.Вставить("ПоложениеСодержания"	, Выборка.ПоложениеСодержания);
	КонецЕсли;
	
	Если НаборДанных.Свойство("Содержание") Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтатьиБазыЗнанийСодержание.Область,
		|	СтатьиБазыЗнанийСодержание.Родитель,
		|	СтатьиБазыЗнанийСодержание.Наименование,
		|	СтатьиБазыЗнанийСодержание.Текст,
		|	СтатьиБазыЗнанийСодержание.ТекстHTML,
		|	СтатьиБазыЗнанийСодержание.Ответственный,
		|	СтатьиБазыЗнанийСодержание.ДатаСоздания,
		|	СтатьиБазыЗнанийСодержание.Уровень,
		|	СтатьиБазыЗнанийСодержание.РазрешитьСворачивание
		|ИЗ
		|	Справочник.СтатьиБазыЗнаний.Содержание КАК СтатьиБазыЗнанийСодержание
		|ГДЕ
		|	СтатьиБазыЗнанийСодержание.Ссылка = &Ссылка";
		
		ДанныеСтатьи.Вставить("Содержание", Запрос.Выполнить().Выгрузить());
	КонецЕсли;
		
	Если НаборДанных.Свойство("Картинки") Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтатьиБазыЗнанийКартинки.Область,
		|	СтатьиБазыЗнанийКартинки.Идентификатор,
		|	СтатьиБазыЗнанийКартинки.Имя,
		|	СтатьиБазыЗнанийКартинки.Подпись,
		|	СтатьиБазыЗнанийКартинки.Выравнивание,
		|	СтатьиБазыЗнанийКартинки.Граница,
		|	СтатьиБазыЗнанийКартинки.Высота,
		|	СтатьиБазыЗнанийКартинки.Подсказка
		|ИЗ
		|	Справочник.СтатьиБазыЗнаний.Картинки КАК СтатьиБазыЗнанийКартинки
		|ГДЕ
		|	СтатьиБазыЗнанийКартинки.Ссылка = &Ссылка";
		ТаблицаКартинки = Запрос.Выполнить().Выгрузить();
		ДанныеКартинки	= Новый Соответствие;
		Для Каждого СтрокаТаблицы Из ТаблицаКартинки Цикл
			КлючОбласти		= ?(ПустаяСтрока(СтрокаТаблицы.Область), "Главная", СтрокаТаблицы.Область);
			МассивОбласти	= ДанныеКартинки.Получить(КлючОбласти);
			
			Если МассивОбласти = Неопределено Тогда
				МассивОбласти = Новый Массив;
			КонецЕсли;
			
			МассивОбласти.Добавить(ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаТаблицы));
			ДанныеКартинки.Вставить(КлючОбласти, МассивОбласти);
		КонецЦикла;
		
		ДанныеСтатьи.Вставить("Картинки", ДанныеКартинки);
	КонецЕсли;
		
	Если НаборДанных.Свойство("Таблицы") Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтатьиБазыЗнанийТаблицы.Область,
		|	СтатьиБазыЗнанийТаблицы.Имя,
		|	СтатьиБазыЗнанийТаблицы.Идентификатор,
		|	СтатьиБазыЗнанийТаблицы.Подпись,
		|	СтатьиБазыЗнанийТаблицы.Выравнивание,
		|	СтатьиБазыЗнанийТаблицы.ТаблицаСтилейHTML,
		|	СтатьиБазыЗнанийТаблицы.ТекстТаблицыHTML
		|ИЗ
		|	Справочник.СтатьиБазыЗнаний.Таблицы КАК СтатьиБазыЗнанийТаблицы
		|ГДЕ
		|	СтатьиБазыЗнанийТаблицы.Ссылка = &Ссылка";
		ТаблицаТаблицы = Запрос.Выполнить().Выгрузить();
		ДанныеТаблицы	= Новый Соответствие;
		Для Каждого СтрокаТаблицы Из ТаблицаТаблицы Цикл
			КлючОбласти		= ?(ПустаяСтрока(СтрокаТаблицы.Область), "Главная", СтрокаТаблицы.Область);
			МассивОбласти	= ДанныеТаблицы.Получить(КлючОбласти);
			
			Если МассивОбласти = Неопределено Тогда
				МассивОбласти = Новый Массив;
			КонецЕсли;
			
			МассивОбласти.Добавить(ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаТаблицы));
			ДанныеТаблицы.Вставить(КлючОбласти, МассивОбласти);
		КонецЦикла;
		
		ДанныеСтатьи.Вставить("Таблицы", ДанныеТаблицы);
	КонецЕсли;
	
	Если НаборДанных.Свойство("Категории") Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтатьиБазыЗнанийКатегории.Категория
		|ИЗ
		|	Справочник.СтатьиБазыЗнаний.Категории КАК СтатьиБазыЗнанийКатегории
		|ГДЕ
		|	СтатьиБазыЗнанийКатегории.Ссылка = &Ссылка";
		
		ДанныеСтатьи.Вставить("Категории", Запрос.Выполнить().Выгрузить());
	КонецЕсли;
	
	Если НаборДанных.Свойство("Сноски") Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтатьиБазыЗнанийСноски.НомерСтроки,
		|	СтатьиБазыЗнанийСноски.Идентификатор,
		|	СтатьиБазыЗнанийСноски.Группа,
		|	СтатьиБазыЗнанийСноски.Наименование,
		|	СтатьиБазыЗнанийСноски.ГиперссылкаТип,
		|	СтатьиБазыЗнанийСноски.ГиперссылкаАдрес,
		|	СтатьиБазыЗнанийСноски.ГиперссылкаОткрывать,
		|	СтатьиБазыЗнанийСноски.ГиперссылкаПодсказка
		|ИЗ
		|	Справочник.СтатьиБазыЗнаний.Сноски КАК СтатьиБазыЗнанийСноски
		|ГДЕ
		|	СтатьиБазыЗнанийСноски.Ссылка = &Ссылка";
		ДанныеСноски = Запрос.Выполнить().Выгрузить();
		ДанныеСноски.Индексы.Добавить("Группа");
		
		ДанныеСтатьи.Вставить("Сноски", ДанныеСноски);
	КонецЕсли;

	Если НаборДанных.Свойство("Статистика") Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(Статистика.Просмотры, 0) КАК Просмотры,
		|	ЕСТЬNULL(Статистика.Создана, ДАТАВРЕМЯ(1, 1, 1)) КАК Создана,
		|	ЕСТЬNULL(Статистика.Изменена, ДАТАВРЕМЯ(1, 1, 1)) КАК Изменена,
		|	ЕСТЬNULL(Статистика.СредняяОценка, 0) КАК СредняяОценка,
		|	ЕСТЬNULL(Статистика.Проголосовало, 0) КАК Проголосовало
		|ИЗ
		|	Справочник.СтатьиБазыЗнаний КАК СтатьиБазыЗнаний
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатистикаСтатейБазыЗнаний КАК Статистика
		|		ПО СтатьиБазыЗнаний.Ссылка = Статистика.СтатьяБазыЗнаний
		|ГДЕ
		|	СтатьиБазыЗнаний.Ссылка = &Ссылка";
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		ДанныеСтатьи.Вставить("Просмотры"		, Выборка.Просмотры);
		ДанныеСтатьи.Вставить("Создана"			, Выборка.Создана);
		ДанныеСтатьи.Вставить("Изменена"		, Выборка.Изменена);
		ДанныеСтатьи.Вставить("СредняяОценка"	, Выборка.СредняяОценка);
		ДанныеСтатьи.Вставить("Проголосовало"	, Выборка.Проголосовало);
	КонецЕсли;
	
	Если НаборДанных.Свойство("Блокировки") Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	Блокировки.Пользователь КАК Редактирует,
		|	ЕСТЬNULL(Блокировки.ДатаБлокировки, ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаБлокировки
		|ИЗ
		|	Справочник.СтатьиБазыЗнаний КАК СтатьиБазыЗнаний
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.БлокировкаСтатьейБазыЗнаний КАК Блокировки
		|		ПО СтатьиБазыЗнаний.Ссылка = Блокировки.СтатьяБазыЗнаний
		|			И (Блокировки.Область = """")
		|ГДЕ
		|	СтатьиБазыЗнаний.Ссылка = &Ссылка";
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		ДанныеСтатьи.Вставить("Редактирует"		, Выборка.Редактирует);
		ДанныеСтатьи.Вставить("ДатаБлокировки"	, Выборка.ДатаБлокировки);
	КонецЕсли;
	
	Если НаборДанных.Свойство("КлючевыеСлова") Тогда
		ЗапросТеги = Новый Запрос;
		ЗапросТеги.УстановитьПараметр("Ссылка", СтатьяСсылка);
		ЗапросТеги.Текст = 
		"ВЫБРАТЬ
		|	СвязьКлючевыхСловБазыЗнаний.КлючевоеСлово КАК Ссылка,
		|	СвязьКлючевыхСловБазыЗнаний.КлючевоеСлово.Наименование КАК Наименование
		|ИЗ
		|	РегистрСведений.СвязьКлючевыхСловБазыЗнаний КАК СвязьКлючевыхСловБазыЗнаний
		|ГДЕ
		|	СвязьКлючевыхСловБазыЗнаний.СтатьяБазыЗнаний = &Ссылка
		|	И НЕ СвязьКлючевыхСловБазыЗнаний.КлючевоеСлово.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	Наименование";

		ДанныеСтатьи.Вставить("КлючевыеСлова", ЗапросТеги.Выполнить().Выгрузить());
	КонецЕсли;
	
	Если НаборДанных.Свойство("Комментарии") Тогда
		ЗапросКомментарии = Новый Запрос;
		ЗапросКомментарии.УстановитьПараметр("Ссылка", СтатьяСсылка);
		ЗапросКомментарии.Текст = 
		"ВЫБРАТЬ
		|	ЕСТЬNULL(СвязьКомментариевБазыЗнаний.Родитель, ЗНАЧЕНИЕ(Справочник.КомментарииБазыЗнаний.ПустаяСсылка)) КАК Родитель,
		|	КомментарииБазыЗнаний.Ссылка,
		|	КомментарииБазыЗнаний.Автор,
		|	КомментарииБазыЗнаний.Автор.Наименование КАК АвторПредставление,
		|	КомментарииБазыЗнаний.Период,
		|	КомментарииБазыЗнаний.Текст,
		|	КомментарииБазыЗнаний.ТекстHTML
		|ИЗ
		|	Справочник.КомментарииБазыЗнаний КАК КомментарииБазыЗнаний
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СвязьКомментариевБазыЗнаний КАК СвязьКомментариевБазыЗнаний
		|		ПО КомментарииБазыЗнаний.Ссылка = СвязьКомментариевБазыЗнаний.Ссылка
		|ГДЕ
		|	КомментарииБазыЗнаний.Владелец = &Ссылка
		|	И НЕ КомментарииБазыЗнаний.ПометкаУдаления";
		ТаблицаКомментариев = ЗапросКомментарии.Выполнить().Выгрузить();
		ТаблицаКомментариев.Индексы.Добавить("Родитель");
		МассивКомментариев	= ТаблицаКомментариевВИерархиюМассивов(ТаблицаКомментариев);
		
		ДанныеСтатьи.Вставить("Комментарии", МассивКомментариев);
	КонецЕсли;
	
	Возврат ДанныеСтатьи;
	
КонецФункции

Функция ПолучитьМассивКлючевыхСловПоКатегории(знач КатегорияСсылка, знач Количество = 0) Экспорт
	
	Если ТипЗнч(КатегорияСсылка) <> Тип("СправочникСсылка.КатегорииБазыЗнаний") Тогда
		КатегорияСсылка = Справочники.КатегорииБазыЗнаний.ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Категория", КатегорияСсылка);
	Запрос.Текст = 
	"ВЫБРАТЬ " + ?(Количество = 0, "", "ПЕРВЫЕ " + Формат(Количество, "ЧГ=")) + "
	|	РейтингКлючевыхСловБазыЗнаний.КлючевоеСлово,
	|	РейтингКлючевыхСловБазыЗнаний.Количество,
	|	РейтингКлючевыхСловБазыЗнаний.КлючевоеСлово.Наименование КАК Наименование
	|ИЗ
	|	РегистрСведений.РейтингКлючевыхСловБазыЗнаний КАК РейтингКлючевыхСловБазыЗнаний
	|ГДЕ
	|	РейтингКлючевыхСловБазыЗнаний.КатегорияБазыЗнаний = &Категория
	|
	|УПОРЯДОЧИТЬ ПО
	|	РейтингКлючевыхСловБазыЗнаний.Количество УБЫВ";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ТаблицаКомментариевВИерархиюМассивов(ТаблицаЗначений, знач РодительСсылка = Неопределено)
	
	Если НЕ ТипЗнч(РодительСсылка) = Тип("СправочникСсылка.КомментарииБазыЗнаний") Тогда
		РодительСсылка = Справочники.КомментарииБазыЗнаний.ПустаяСсылка();
	КонецЕсли;
	
	КопияТаблицы = ТаблицаЗначений.Скопировать(Новый Структура("Родитель", РодительСсылка));
	КопияТаблицы.Сортировать("Период, Ссылка");
	
	МассивСтрок = Новый Массив;
	Для Каждого СтрокаТаблицы Из КопияТаблицы Цикл
		СтруктураСтроки = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(СтрокаТаблицы);
		СтруктураСтроки.Вставить("Элементы", ТаблицаКомментариевВИерархиюМассивов(ТаблицаЗначений, СтрокаТаблицы.Ссылка));
		СтруктураСтроки.Вставить("Идентификатор", СтрокаТаблицы.Ссылка.УникальныйИдентификатор());
		СтруктураСтроки.Вставить("АвторИдентификатор", СтрокаТаблицы.Автор.УникальныйИдентификатор());
		
		МассивСтрок.Добавить(СтруктураСтроки);
	КонецЦикла;
	
	Возврат МассивСтрок;
	
КонецФункции

#КонецОбласти

#Область НовостнаяЛента

// Добавляет новость в ленту новостей в фоновом режиме.
//
// Параметры
//	ПараметрыВыполнения - Структура
//		Автор - СправочникСсылка.Пользователи
//		Заголовок - Строка. Максимально короткое представление новости. Обычный текст.
//		ТекстHTML - Строка. HTML текст новости. Из нее формируется обычный текст новости.
//			Использование картинок допустимо только если они не хранятся в базе знаний.
//		ОбъектБазыЗнаний - СправочникСсылка.СтатьиБазыЗнаний, СправочникСсылка.КатегорииБазыЗнаний.
//			Новость может быть не связана с объектом. Если же задана связь, то считываются ограничения
//			и новость добавляется персонифицировано только пользователям подписанным на данный объект.
//		Получатели - Массив, СправочникСсылка.Пользователи.
//			Пользователь (массив пользователей) которым необходимо добавить новость. Независимо от
//			значения параметра ОбъектБазыЗнаний, новость будет добавлено персонально к указанным
//			получателям. При этом права доступа не учитываются, поэтому примите во внимание, новость
//			может не отображаться в ленте пользователя если он не имеет доступа к объекту.
//			В данный параметр перед запуском фонового задания заполняется список пользователей,
//			которым планируется добавить новость.
//		Важность - Число. 1 - высокая, 2 - средняя (по умолчанию), 3 - низкая
//		Текст - обычный текст новости. Если пустой то текст устанавливается из параметра ТекстHTML.
//			Используется для отражения при просмотре новостной ленты на отдельной странице.
//
Процедура ДобавитьНовость(знач ПараметрыВыполнения, знач АдресХранилища = "") Экспорт
	
	Автор				= ПараметрыВыполнения.Автор;
	Заголовок			= ПараметрыВыполнения.Заголовок;
	ТекстHTML			= ПараметрыВыполнения.ТекстHTML;
	ОбъектБазыЗнаний	= ?(ПараметрыВыполнения.Свойство("ОбъектБазыЗнаний"), ПараметрыВыполнения.ОбъектБазыЗнаний, Неопределено);
	Получатели 			= ?(ПараметрыВыполнения.Свойство("Получатели"), ПараметрыВыполнения.Получатели, Неопределено);
	Важность			= ?(ПараметрыВыполнения.Свойство("Важность"), ПараметрыВыполнения.Важность, 2);
	Текст				= ?(ПараметрыВыполнения.Свойство("Текст"), ПараметрыВыполнения.Текст, "");
	ВидНовости			= ?(ПараметрыВыполнения.Свойство("ВидНовости"), ПараметрыВыполнения.ВидНовости, Неопределено);
	
	Результат = Справочники.НовостиБазыЗнаний.ДобавитьНовость(Автор, Заголовок, ТекстHTML, ОбъектБазыЗнаний, ВидНовости, Получатели, Важность, Текст);
	
	ПараметрыВыполнения.Вставить("Выполнено", Истина);
	ПараметрыВыполнения.Вставить("Результат", Результат);
	Если ЭтоАдресВременногоХранилища(АдресХранилища) Тогда
		ПоместитьВоВременноеХранилище(ПараметрыВыполнения, АдресХранилища);
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьНовости(знач ПараметрыВыполнения, знач АдресХранилища = "") Экспорт 
	
	ЗначениеПараметра = ПараметрыВыполнения.Ссылки;
	Если ТипЗнч(ЗначениеПараметра) = Тип("СправочникСсылка.НовостиБазыЗнаний") Тогда
		МассивСсылок = Новый Массив;
		МассивСсылок.Добавить(ЗначениеПараметра);
	ИначеЕсли ТипЗнч(ЗначениеПараметра) = Тип("Массив") Тогда
		МассивСсылок = ЗначениеПараметра;
	КонецЕсли;
	
	Для Каждого ЭлементСсылка Из МассивСсылок Цикл
		
		ЭлементОбъект = ЭлементСсылка.ПолучитьОбъект();
		ЭлементОбъект.Удалить();
		
	КонецЦикла;
	
	ПараметрыВыполнения.Вставить("Выполнено", Истина);
	Если ЭтоАдресВременногоХранилища(АдресХранилища) Тогда
		ПоместитьВоВременноеХранилище(ПараметрыВыполнения, АдресХранилища);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьНовостиПоОбъекту(знач ОбъектБазыЗнаний) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОбъектБазыЗнаний", ОбъектБазыЗнаний);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	НовостиБазыЗнаний.Ссылка
	|ИЗ
	|	Справочник.НовостиБазыЗнаний КАК НовостиБазыЗнаний
	|ГДЕ
	|	НовостиБазыЗнаний.ОбъектБазыЗнаний = &ОбъектБазыЗнаний";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

#КонецОбласти

#Область БлокировкаСтатей

Функция ПолучитьДанныеБлокировки(знач СтатьяСсылка, знач Область = "") Экспорт
	
	ДанныеБлокировки = Новый Структура("СтатьяБазыЗнаний, Область, Пользователь, ДатаБлокировки"
		, СтатьяСсылка
		, Область
		, Неопределено
		, Дата(1, 1, 1));
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СтатьяБазыЗнаний", СтатьяСсылка);
	Запрос.УстановитьПараметр("Область"			, Область);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	БлокировкаСтатьейБазыЗнаний.СтатьяБазыЗнаний,
	|	БлокировкаСтатьейБазыЗнаний.Область,
	|	БлокировкаСтатьейБазыЗнаний.Пользователь,
	|	БлокировкаСтатьейБазыЗнаний.ДатаБлокировки
	|ИЗ
	|	РегистрСведений.БлокировкаСтатьейБазыЗнаний КАК БлокировкаСтатьейБазыЗнаний
	|ГДЕ
	|	БлокировкаСтатьейБазыЗнаний.СтатьяБазыЗнаний = &СтатьяБазыЗнаний
	|	И БлокировкаСтатьейБазыЗнаний.Область = &Область";
	Результат = Запрос.Выполнить();
	
	Если НЕ Результат.Пустой() Тогда
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		
		ЗаполнитьЗначенияСвойств(ДанныеБлокировки, Выборка);
	КонецЕсли;
		
	Возврат ДанныеБлокировки;
	
КонецФункции

#КонецОбласти

#Область Избранное

// Возвращает массив данных по избранным данным пользователя
// 
// Параметры
//	НастройкаОтбора - Тип: Массив.
//		Значение - Структура
//			Поле - Строка. Поле для отбора. Допустимые значения:
//				Ссылка.*, Родитель.*, Наименование, Тип
//			ВидСравнения - ВидСравнения
//			Значение[С|По] - любое значение
//
// Возвращаемое значение
//	Массив
//		Значение - Структура
//			КатегорияБазыЗнаний - СправочникСсылка.КатегорииБазыЗнаний
//			Создание - Булево
//			Изменение - Булево
//			Удаление - Булево
//			Комментарии - Булево
//			Оповещения - Булево
//
Функция ПолучитьИзбранное(знач ПользовательСсылка, знач НастройкаОтбора = Неопределено) Экспорт 
	
	ПостроительЗапроса = Новый ПостроительЗапроса;
	ПостроительЗапроса.Параметры.Вставить("Пользователь", ПользовательСсылка);
	ПостроительЗапроса.Текст = 
	"ВЫБРАТЬ
	|	ИзбранноеБазыЗнаний.КатегорияБазыЗнаний,
	|	ИзбранноеБазыЗнаний.Создание,
	|	ИзбранноеБазыЗнаний.Изменение,
	|	ИзбранноеБазыЗнаний.Удаление,
	|	ИзбранноеБазыЗнаний.Оповещение,
	|	ИзбранноеБазыЗнаний.Прочее
	|ИЗ
	|	РегистрСведений.ИзбранноеБазыЗнаний КАК ИзбранноеБазыЗнаний
	|ГДЕ
	|	ИзбранноеБазыЗнаний.Пользователь = &Пользователь
	|{ГДЕ
	|	ИзбранноеБазыЗнаний.КатегорияБазыЗнаний.*,
	|	ИзбранноеБазыЗнаний.Создание,
	|	ИзбранноеБазыЗнаний.Изменение,
	|	ИзбранноеБазыЗнаний.Удаление,
	|	ИзбранноеБазыЗнаний.Оповещение,
	|	ИзбранноеБазыЗнаний.Прочее}";
	Для Каждого СтруктураОтбора Из НастройкаОтбора Цикл
		ЭлементОтбора = ПостроительЗапроса.Отбор.Добавить(СтруктураОтбора.Поле);
		ЭлементОтбора.Использование	= Истина;
		ЭлементОтбора.ВидСравнения	= СтруктураОтбора.ВидСравнения;
		ЭлементОтбора.Значение		= СтруктураОтбора.Значение;
		Если СтруктураОтбора.Свойство("ЗначениеС") Тогда
			ЭлементОтбора.ЗначениеС		= СтруктураОтбора.ЗначениеС;
		КонецЕсли;
		Если СтруктураОтбора.Свойство("ЗначениеПо") Тогда
			ЭлементОтбора.ЗначениеПо	= СтруктураОтбора.ЗначениеПо;
		КонецЕсли;
	КонецЦикла;
	ПостроительЗапроса.Выполнить();
	
	Возврат ОбщегоНазначения.ТаблицаЗначенийВМассив(ПостроительЗапроса.Результат.Выгрузить());
	
КонецФункции

#КонецОбласти