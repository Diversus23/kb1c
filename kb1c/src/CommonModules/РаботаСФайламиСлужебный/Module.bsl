////////////////////////////////////////////////////////////////////////////////
// Подсистема "Работа с файлами".
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС

// См. описание этой же процедуры в модуле СтандартныеПодсистемыСервер.
Процедура ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики) Экспорт
	
	// КЛИЕНТСКИЕ ОБРАБОТЧИКИ.
	
	КлиентскиеОбработчики[
		"СтандартныеПодсистемы.БазоваяФункциональность\ПриПолученииСпискаПредупрежденийЗавершенияРаботы"].Добавить(
			"РаботаСФайламиСлужебныйКлиент");
	
	// СЕРВЕРНЫЕ ОБРАБОТЧИКИ.
	
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриДобавленииПараметровРаботыКлиентскойЛогикиСтандартныхПодсистемПриЗавершении"].Добавить(
		"РаботаСФайламиСлужебный");
	
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриОтправкеДанныхПодчиненному"].Добавить(
		"РаботаСФайламиСлужебный");
	
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриОтправкеДанныхГлавному"].Добавить(
		"РаботаСФайламиСлужебный");
	
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриПолученииДанныхОтПодчиненного"].Добавить(
		"РаботаСФайламиСлужебный");
	
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриПолученииДанныхОтГлавного"].Добавить(
		"РаботаСФайламиСлужебный");
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.ФайловыеФункции") Тогда
		СерверныеОбработчики["СтандартныеПодсистемы.ФайловыеФункции\ПриДобавленииФайловВТомаПриРазмещении"].Добавить(
			"РаботаСФайламиСлужебный");
		
		СерверныеОбработчики["СтандартныеПодсистемы.ФайловыеФункции\ПриУдаленииРегистрацииИзменений"].Добавить(
			"РаботаСФайламиСлужебный");
		
		СерверныеОбработчики["СтандартныеПодсистемы.ФайловыеФункции\ПриОпределенииТекстаЗапросаДляИзвлеченияТекста"].Добавить(
			"РаботаСФайламиСлужебный");
		
		СерверныеОбработчики["СтандартныеПодсистемы.ФайловыеФункции\ПриОпределенииКоличестваВерсийСНеизвлеченнымТекстом"].Добавить(
			"РаботаСФайламиСлужебный");
		
		СерверныеОбработчики["СтандартныеПодсистемы.ФайловыеФункции\ПриЗаписиИзвлеченногоТекста"].Добавить(
			"РаботаСФайламиСлужебный");
		
		СерверныеОбработчики["СтандартныеПодсистемы.ФайловыеФункции\ПриОпределенииКоличестваФайловВТомах"].Добавить(
			"РаботаСФайламиСлужебный");
		
		СерверныеОбработчики["СтандартныеПодсистемы.ФайловыеФункции\ПриОпределенииНаличияХранимыхФайлов"].Добавить(
			"РаботаСФайламиСлужебный");
		
		СерверныеОбработчики["СтандартныеПодсистемы.ФайловыеФункции\ПриПолученииХранимыхФайлов"].Добавить(
			"РаботаСФайламиСлужебный");
		
		СерверныеОбработчики["СтандартныеПодсистемы.ФайловыеФункции\ПриОпределенииНавигационнойСсылкиФайла"].Добавить(
			"РаботаСФайламиСлужебный");
		
		СерверныеОбработчики["СтандартныеПодсистемы.ФайловыеФункции\ПриОпределенииИмениФайлаСПутемКДвоичнымДанным"].Добавить(
			"РаботаСФайламиСлужебный");
		
		СерверныеОбработчики["СтандартныеПодсистемы.ФайловыеФункции\ПриОпределенииДвоичныхДанныхФайлаИПодписи"].Добавить(
			"РаботаСФайламиСлужебный");
	КонецЕсли;
	
	СерверныеОбработчики["СтандартныеПодсистемы.ОбновлениеВерсииИБ\ПриДобавленииОбработчиковОбновления"].Добавить(
		"РаботаСФайламиСлужебныйВызовСервера");
	
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриДобавленииИсключенийПоискаСсылок"].Добавить(
		"РаботаСФайламиСлужебный");
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		СерверныеОбработчики["СтандартныеПодсистемы.УправлениеДоступом\ПриЗаполненииВозможныхПравПоЗначениямДоступа"].Добавить(
			"РаботаСФайламиСлужебный");
	
		СерверныеОбработчики["СтандартныеПодсистемы.УправлениеДоступом\ПриЗаполненииВидовОграниченийПравОбъектовМетаданных"].Добавить(
			"РаботаСФайламиСлужебный");
		
		СерверныеОбработчики["СтандартныеПодсистемы.УправлениеДоступом\ПриЗаполненииСвойствВидаДоступа"].Добавить(
			"РаботаСФайламиСлужебный");
	КонецЕсли;
	
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриПолученииОбъектовНачальногоОбразаПланаОбмена"].Добавить(
		"РаботаСФайламиСлужебный");
	
КонецПроцедуры

// Возвращает Истина, если это элемент данных, относящийся к подсистеме РаботаСФайлами
//
Функция ЭтоЭлементРаботаСФайлами(ЭлементДанных) Экспорт
	
	Возврат ТипЗнч(ЭлементДанных) = Тип("СправочникОбъект.ВерсииФайлов")
		ИЛИ ТипЗнч(ЭлементДанных) = Тип("СправочникСсылка.ВерсииФайлов");
	
КонецФункции

// Заполняет структуру параметров, необходимых для работы клиентского кода
// конфигурации при завершении работы.
//
// Параметры:
//   Параметры   - Структура - структура параметров.
//
Процедура ДобавитьПараметрыРаботыКлиентаПриЗавершении(Параметры) Экспорт
	
	 Параметры.Вставить("РаботаСФайлами", ПолучитьПараметрыПриЗавершенииРаботы());
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры используемые при обмене данными

// Только для внутреннего использования
//
Процедура ПриОтправкеФайла(ЭлементДанных, ОтправкаЭлемента, Знач СозданиеНачальногоОбраза = Ложь, Получатель = Неопределено) Экспорт
	
	Если ОтправкаЭлемента = ОтправкаЭлементаДанных.Удалить
		ИЛИ ОтправкаЭлемента = ОтправкаЭлементаДанных.Игнорировать Тогда
		
		// Стандартную обработку не переопределяем
		
	ИначеЕсли ТипЗнч(ЭлементДанных) = Тип("СправочникОбъект.ВерсииФайлов") Тогда
		
		Если СозданиеНачальногоОбраза Тогда
			
			Если ЭлементДанных.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске Тогда
				
				Если Получатель <> Неопределено
					И Получатель.ДополнительныеСвойства.Свойство("РазмещатьФайлыВНачальномОбразе") Тогда
					
					// Помещаем данные файла из тома на диске в служебный реквизит справочника
					ПоместитьФайлВРеквизитСправочника(ЭлементДанных);
					
				Иначе
					
					// Копируем файл из тома на диске в каталог создания начального образа
					ИмяКаталогаФайлов = ХранилищеОбщихНастроек.Загрузить("ОбменФайлами", "ВременныйКаталог");
					
					ПолныйПуть = ФайловыеФункцииСлужебный.ПолныйПутьТома(ЭлементДанных.Том) + ЭлементДанных.ПутьКФайлу;
					УникальныйИдентификатор = ЭлементДанных.Ссылка.УникальныйИдентификатор();
					
					НовыйПутьФайла = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(
							ИмяКаталогаФайлов,
							УникальныйИдентификатор);
					
					ФайловыеФункцииСлужебный.СкопироватьФайлПриСозданииНачальногоОбраза(ПолныйПуть, НовыйПутьФайла);
					
				КонецЕсли;
				
			Иначе
				
				// Если файл хранится в ИБ, то при создании начального образа
				// он будет выгружен в составе регистра сведений ХранимыеФайлыВерсий.
				
			КонецЕсли;
			
		Иначе
			
			Если ЭлементДанных.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске Тогда
				
				// Помещаем данные файла из тома на диске в служебный реквизит справочника
				ПоместитьФайлВРеквизитСправочника(ЭлементДанных);
				
			Иначе // Перечисления.ТипыХраненияФайлов.ВИнформационнойБаза
				
				Попытка
					// Помещаем данные файла из информационной базы в служебный реквизит справочника
					АдресВоВременномХранилище = РаботаСФайламиСлужебныйВызовСервера.ПолучитьНавигационнуюСсылкуВоВременномХранилище(ЭлементДанных.Ссылка);
					ЭлементДанных.ФайлХранилище = Новый ХранилищеЗначения(ПолучитьИзВременногоХранилища(АдресВоВременномХранилище), Новый СжатиеДанных(9));
				Исключение
					// Возможно, файл не был найден. Отправку данных не прерываем.
					ЗаписьЖурналаРегистрации(
						НСтр("ru = 'Файлы.Не удалось отправить файл при обмене данными'",
						     ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
						УровеньЖурналаРегистрации.Ошибка,
						,
						,
						ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()) );
					
					ЭлементДанных.ФайлХранилище = Новый ХранилищеЗначения(Неопределено);
				КонецПопытки;
				
				ЭлементДанных.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе;
				ЭлементДанных.ПутьКФайлу = "";
				ЭлементДанных.Том = Справочники.ТомаХраненияФайлов.ПустаяСсылка();
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ЭлементДанных) = Тип("РегистрСведенийНаборЗаписей.ХранимыеФайлыВерсий")
		И Не СозданиеНачальногоОбраза Тогда
		
		// Выгрузку регистра выполняем только при создании начального образа
		ОтправкаЭлемента = ОтправкаЭлементаДанных.Игнорировать;
		
	КонецЕсли;
	
КонецПроцедуры

// Только для внутреннего использования
//
Процедура ПриПолученииФайла(ЭлементДанных, ПолучениеЭлемента) Экспорт
	
	Если ПолучениеЭлемента = ПолучениеЭлементаДанных.Игнорировать Тогда
		
		// Стандартную обработку не переопределяем
		
	ИначеЕсли ТипЗнч(ЭлементДанных) = Тип("СправочникОбъект.Файлы")
		И ПолучениеФайлаЗапрещено(ЭлементДанных) Тогда
		
		ПолучениеЭлемента = ПолучениеЭлементаДанных.Игнорировать;
		
	ИначеЕсли ТипЗнч(ЭлементДанных) = Тип("СправочникОбъект.ВерсииФайлов") Тогда
		
		Если ПолучениеВерсииФайлаЗапрещено(ЭлементДанных) Тогда
			
			ПолучениеЭлемента = ПолучениеЭлементаДанных.Игнорировать;
			Возврат;
		КонецЕсли;
		
		// Для существующих файлов, размещенных в томах, выполняем их удаление из томов,
		// т.к. при получении нового файла он будет заново размещен в томе или информационной базе.
		Если НЕ ЭлементДанных.ЭтоНовый() Тогда
			
			ВерсияФайла = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ЭлементДанных.Ссылка, "ТипХраненияФайла, Том, ПутьКФайлу");
			
			Если ВерсияФайла.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске Тогда
				
				ПрежнийПутьНаТоме = ФайловыеФункцииСлужебный.ПолныйПутьТома(ВерсияФайла.Том) + ВерсияФайла.ПутьКФайлу;
				
				ФайловыеФункцииСлужебный.УдалитьФайлыНаСервере(ПрежнийПутьНаТоме);
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ФайловыеФункцииСлужебный.ТипХраненияФайлов() = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске Тогда
			
			// По обмену пришел элемент с хранением в базе - но в базе приемнике принято хранить в томах.
			// Из служебного реквизита файл размещаем на томе и меняем ТипХраненияФайла на ВТомахНаДиске.
			
			ПутьКФайлуНаТоме = "";
			СсылкаНаТом = Неопределено;
			
			// Добавление файла в один из томов (где есть свободное место).
			ФайловыеФункцииСлужебный.ДобавитьНаДиск(
				ЭлементДанных.ФайлХранилище.Получить(),
				ПутьКФайлуНаТоме,
				СсылкаНаТом,
				ЭлементДанных.ДатаМодификацииУниверсальная,
				ЭлементДанных.НомерВерсии,
				ЭлементДанных.Наименование,
				ЭлементДанных.Расширение,
				ЭлементДанных.Размер,
				ЭлементДанных.Зашифрован);
			
			ЭлементДанных.ПутьКФайлу = ПутьКФайлуНаТоме;
			ЭлементДанных.Том        = СсылкаНаТом;
			ЭлементДанных.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске;
			
			ЭлементДанных.ФайлХранилище = Новый ХранилищеЗначения(Неопределено);
			
		Иначе
			
			ДвоичныеДанные = ЭлементДанных.ФайлХранилище.Получить();
			
			Если ТипЗнч(ДвоичныеДанные) = Тип("ДвоичныеДанные") Тогда
				ЭлементДанных.ДополнительныеСвойства.Вставить("ДвоичныеДанныеФайла", ДвоичныеДанные);
			КонецЕсли;
			
			ЭлементДанных.ФайлХранилище = Новый ХранилищеЗначения(Неопределено);
			ЭлементДанных.Том = Справочники.ТомаХраненияФайлов.ПустаяСсылка();
			ЭлементДанных.ПутьКФайлу = "";
			ЭлементДанных.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает объекты, имеющие в наличии присоединенные (средствами подсистемы "Работа с файлами") файлы.
//
// Используется совместно с функцией ПрисоединенныеФайлы.СконвертироватьФайлыВПрисоединенные().
//
// Параметры:
//  ТаблицаВладельцевФайлов - Строка - полное имя объекта метаданных,
//                            который может владеть присоединенными файлами.
//
Функция СсылкиНаОбъектыСФайлами(Знач ТаблицаВладельцевФайлов) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ОбъектыСФайлами.Ссылка КАК Ссылка
	|ИЗ
	|	&Таблица КАК ОбъектыСФайлами
	|ГДЕ
	|	ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				Справочник.Файлы КАК Файлы
	|			ГДЕ
	|				Файлы.ВладелецФайла = ОбъектыСФайлами.Ссылка)";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Таблица", ТаблицаВладельцевФайлов);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработчики условных вызовов в эту подсистему

// Записывает вложения в папку.
// 
// Параметры: см. описание процедуры "ВыполнитьДоставку" модуля "РассылкаОтчетов"
//
Процедура ПриВыполненииДоставкиВПапку(ПараметрыДоставки, Вложения) Экспорт
	
	// Перенос вложений в таблицу
	УстановитьПривилегированныйРежим(Истина);
	
	ТаблицаВложений = Новый ТаблицаЗначений;
	ТаблицаВложений.Колонки.Добавить("ИмяФайла",              Новый ОписаниеТипов("Строка"));
	ТаблицаВложений.Колонки.Добавить("ПолныйПутьКФайлу",      Новый ОписаниеТипов("Строка"));
	ТаблицаВложений.Колонки.Добавить("Файл",                  Новый ОписаниеТипов("Файл"));
	ТаблицаВложений.Колонки.Добавить("ФайлСсылка",            Новый ОписаниеТипов("СправочникСсылка.Файлы"));
	ТаблицаВложений.Колонки.Добавить("ИмяФайлаБезРасширения", Метаданные.Справочники.Файлы.Реквизиты.ПолноеНаименование.Тип);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Для Каждого Вложение Из Вложения Цикл
		СтрокаТаблицы = ТаблицаВложений.Добавить();
		СтрокаТаблицы.ИмяФайла              = Вложение.Ключ;
		СтрокаТаблицы.ПолныйПутьКФайлу      = Вложение.Значение;
		СтрокаТаблицы.Файл                  = Новый Файл(СтрокаТаблицы.ПолныйПутьКФайлу);
		СтрокаТаблицы.ИмяФайлаБезРасширения = СтрокаТаблицы.Файл.ИмяБезРасширения;
	КонецЦикла;
	
	// Поиск существующих файлов
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Файлы.Ссылка,
	|	Файлы.ПолноеНаименование
	|ИЗ
	|	Справочник.Файлы КАК Файлы
	|ГДЕ
	|	Файлы.ВладелецФайла = &ВладелецФайла
	|	И Файлы.ПолноеНаименование В(&МассивИменФайлов)";
	
	Запрос.УстановитьПараметр("ВладелецФайла", ПараметрыДоставки.Папка);
	Запрос.УстановитьПараметр("МассивИменФайлов", ТаблицаВложений.ВыгрузитьКолонку("ИмяФайлаБезРасширения"));
	
	СуществующиеФайлы = Запрос.Выполнить().Выгрузить();
	Для Каждого Файл Из СуществующиеФайлы Цикл
		СтрокаТаблицы = ТаблицаВложений.Найти(Файл.ПолноеНаименование, "ИмяФайлаБезРасширения");
		СтрокаТаблицы.ФайлСсылка = Файл.Ссылка;
	КонецЦикла;
	
	// Постоянные переменные
	Комментарий = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Рассылка отчетов %1 от %2'"),
		"'"+ ПараметрыДоставки.Рассылка +"'",
		Формат(ПараметрыДоставки.ДатаВыполнения, "ДЛФ=DT"));
	ХранитьВерсии = Истина;
	ЭтоВебКлиент = Ложь;
	АдресВременногоХранилищаТекста = "";
	Пользователь = Пользователи.ТекущийПользователь();
	ЗаписатьВИсторию = Истина;
	ВладелецФайла = ПараметрыДоставки.Папка;
	
	Для Каждого Вложение Из ТаблицаВложений Цикл
		// Временные переменные
		АдресВременногоХранилищаФайла = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(Вложение.ПолныйПутьКФайлу));
		ВремяИзменения              = Вложение.Файл.ПолучитьВремяИзменения();
		ВремяИзмененияУниверсальное = Вложение.Файл.ПолучитьУниверсальноеВремяИзменения();
		Размер                      = Вложение.Файл.Размер();
		РасширениеБезТочки          = СтрЗаменить(Вложение.Файл.Расширение, ".", "");
		ИмяБезРасширения            = Вложение.ИмяФайлаБезРасширения;
		
		// Запись
		Если ЗначениеЗаполнено(Вложение.ФайлСсылка) Тогда
			РаботаСФайламиСлужебныйВызовСервера.СоздатьВерсиюИОбновитьВерсиюВФайле(
				ВремяИзменения,
				ВремяИзмененияУниверсальное,
				Вложение.ФайлСсылка, 
				ИмяБезРасширения, 
				Размер, 
				РасширениеБезТочки, 
				АдресВременногоХранилищаФайла, 
				АдресВременногоХранилищаТекста,
				ЭтоВебКлиент,
				Пользователь);
		Иначе
			Вложение.ФайлСсылка = РаботаСФайламиСлужебныйВызовСервера.СоздатьФайлСВерсией(
				ВладелецФайла,
				ИмяБезРасширения,
				РасширениеБезТочки,
				ВремяИзменения,
				ВремяИзмененияУниверсальное,
				Размер,
				АдресВременногоХранилищаФайла,
				АдресВременногоХранилищаТекста,
				ЭтоВебКлиент,
				Пользователь,
				Комментарий,
				ЗаписатьВИсторию);
		КонецЕсли;
		
		// Заполнение ссылки на файл
		Если ПараметрыДоставки.ДобавлятьСсылки <> "" Тогда
			ПараметрыДоставки.ПредставлениеОтчетовПолучателя = СтрЗаменить(
				ПараметрыДоставки.ПредставлениеОтчетовПолучателя,
				Вложение.ПолныйПутьКФайлу,
				ПолучитьНавигационнуюСсылкуИнформационнойБазы() +"#"+ ПолучитьНавигационнуюСсылку(Вложение.ФайлСсылка));
		КонецЕсли;
		
		// Очистка
		УдалитьИзВременногоХранилища(АдресВременногоХранилищаФайла);
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий подсистем БСП

// Заполняет структуру параметров, необходимых для работы клиентского кода
// при завершении работы конфигурации, т.е. в обработчиках:
// - ПередЗавершениемРаботыСистемы,
// - ПриЗавершенииРаботыСистемы
//
// Параметры:
//   Параметры   - Структура - структура параметров.
//
Процедура ПриДобавленииПараметровРаботыКлиентскойЛогикиСтандартныхПодсистемПриЗавершении(Параметры) Экспорт
	
	ДобавитьПараметрыРаботыКлиентаПриЗавершении(Параметры);
	
КонецПроцедуры

// Процедура является обработчиком одноименного события, возникающего при обмене данными в распределенной информационной базе.
//
// Параметры:
// см. описание обработчика события ПриОтправкеДанныхПодчиненному() в синтаксис-помощнике.
// 
Процедура ПриОтправкеДанныхПодчиненному(ЭлементДанных, ОтправкаЭлемента, СозданиеНачальногоОбраза, Получатель) Экспорт
	
	ПриОтправкеФайла(ЭлементДанных, ОтправкаЭлемента, СозданиеНачальногоОбраза, Получатель);
	
КонецПроцедуры

// Процедура является обработчиком одноименного события, возникающего при обмене данными в распределенной информационной базе.
//
// Параметры:
// см. описание обработчика события ПриОтправкеДанныхГлавному() в синтаксис-помощнике.
// 
Процедура ПриОтправкеДанныхГлавному(ЭлементДанных, ОтправкаЭлемента, Получатель) Экспорт
	
	ПриОтправкеФайла(ЭлементДанных, ОтправкаЭлемента);
	
КонецПроцедуры

// Процедура является обработчиком одноименного события, возникающего при обмене данными в распределенной информационной базе.
//
// Параметры:
// см. описание обработчика события ПриПолученииДанныхОтПодчиненного() в синтаксис-помощнике.
// 
Процедура ПриПолученииДанныхОтПодчиненного(ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад, Отправитель) Экспорт
	
	ПриПолученииФайла(ЭлементДанных, ПолучениеЭлемента);
	
КонецПроцедуры

// Процедура является обработчиком одноименного события, возникающего при обмене данными в распределенной информационной базе.
//
// Параметры:
// см. описание обработчика события ПриПолученииДанныхОтГлавного() в синтаксис-помощнике.
// 
Процедура ПриПолученииДанныхОтГлавного(ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад, Отправитель) Экспорт
	
	ПриПолученииФайла(ЭлементДанных, ПолучениеЭлемента);
	
КонецПроцедуры

// Заполняет массив списком имен объектов метаданных, данные которых могут содержать ссылки на различные объекты метаданных,
// но при этом эти ссылки не должны учитываться в бизнес-логике приложения.
//
// Параметры:
//  Массив       - массив строк, например, "РегистрСведений.ВерсииОбъектов".
//
Процедура ПриДобавленииИсключенийПоискаСсылок(Массив) Экспорт
	
	Массив.Добавить(Метаданные.РегистрыСведений.ФайлыВРабочемКаталоге.ПолноеИмя());
	
КонецПроцедуры

// Добавляет файл на том при "Разместить файлы начального образа"
//
Процедура ПриДобавленииФайловВТомаПриРазмещении(СоответствиеПутейФайлов, ХранитьФайлыВТомахНаДиске, ПрисоединяемыеФайлы) Экспорт
	
	РаботаСФайламиСлужебныйВызовСервера.ДобавитьФайлыВТомаПриРазмещении(СоответствиеПутейФайлов, ХранитьФайлыВТомахНаДиске);
	
КонецПроцедуры

// Удаляет регистрацию изменений после "Разместить файлы начального образа"
//
Процедура ПриУдаленииРегистрацииИзменений(ПланОбменаСсылка, ПрисоединяемыеФайлы) Экспорт
	
	РаботаСФайламиСлужебныйВызовСервера.УдалитьРегистрациюИзменений(ПланОбменаСсылка);
	
КонецПроцедуры

// Возвращает текст запроса для извлечения текста
//
Процедура ПриОпределенииТекстаЗапросаДляИзвлеченияТекста(ТекстЗапроса, ПолучитьВсеФайлы = Ложь) Экспорт
	
	РаботаСФайламиСлужебныйВызовСервера.ПолучитьТекстЗапросаДляИзвлеченияТекста(ТекстЗапроса, ПолучитьВсеФайлы);
	
КонецПроцедуры

// Возвращает число файлов с неизвлеченным текстом
//
Процедура ПриОпределенииКоличестваВерсийСНеизвлеченнымТекстом(ЧислоВерсий) Экспорт
	
	ЧислоВерсий = 0;
	ЧислоВерсий = ЧислоВерсий + РаботаСФайламиСлужебныйВызовСервера.ПолучитьКоличествоВерсийСНеизвлеченнымТекстом();
	
КонецПроцедуры

// Записывает извлеченный текст
//
Процедура ПриЗаписиИзвлеченногоТекста(ФайлОбъект) Экспорт
	
	Если ЭтоЭлементРаботаСФайлами(ФайлОбъект) Тогда
		РаботаСФайламиСлужебныйВызовСервера.ЗаписатьИзвлеченныйТекст(ФайлОбъект);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает в параметре КоличествоФайловВТомах количество файлов в томах.
//
Процедура ПриОпределенииКоличестваФайловВТомах(КоличествоФайловВТомах) Экспорт
	
	РаботаСФайламиСлужебныйВызовСервера.ОпределитьКоличествоФайловВТомах(КоличествоФайловВТомах);
	
КонецПроцедуры

// Возвращает Истина в параметре ЕстьХранимыеФайлы, если есть хранимые файлы к объекту ВнешнийОбъект.
//
Процедура ПриОпределенииНаличияХранимыхФайлов(ВнешнийОбъект, ЕстьХранимыеФайлы) Экспорт
	
	РаботаСФайламиСлужебныйВызовСервера.ОпределитьНаличиеХранимыхФайлов(ВнешнийОбъект, ЕстьХранимыеФайлы);
	
КонецПроцедуры

// Возвращает в параметре ХранимыеФайлы массив хранимых файлов к объекту ВнешнийОбъект.
//
Процедура ПриПолученииХранимыхФайлов(ВнешнийОбъект, ХранимыеФайлы) Экспорт
	
	РаботаСФайламиСлужебныйВызовСервера.ПолучитьХранимыеФайлы(ВнешнийОбъект, ХранимыеФайлы);
	
КонецПроцедуры

// Возвращает навигационную ссылку на файл (на реквизит или во временное хранилище)
//
Процедура ПриОпределенииНавигационнойСсылкиФайла(ФайлСсылка, УникальныйИдентификатор, НавигационнаяСсылка) Экспорт
	
	Если ЭтоЭлементРаботаСФайлами(ФайлСсылка) Тогда
		НавигационнаяСсылка = РаботаСФайламиСлужебныйВызовСервера.ПолучитьНавигационнуюСсылкуДляОткрытия(ФайлСсылка, УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

// Получает полный путь к файлу на диске
//
Процедура ПриОпределенииИмениФайлаСПутемКДвоичнымДанным(ФайлСсылка, ПутьКФайлу) Экспорт
	
	Если ЭтоЭлементРаботаСФайлами(ФайлСсылка) Тогда
		ПутьКФайлу = РаботаСФайламиСлужебныйВызовСервера.ПолучитьИмяФайлаСПутемКДвоичнымДанным(ФайлСсылка);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает структуру с двоичными данными файла и подписи.
//
Процедура ПриОпределенииДвоичныхДанныхФайлаИПодписи(ДанныеСтроки, ДанныеФайлаИПодписи) Экспорт
	
	Если ЭтоЭлементРаботаСФайлами(ДанныеСтроки.Объект) Тогда
		ДанныеФайлаИПодписи = РаботаСФайламиСлужебныйВызовСервера.ПолучитьДанныеФайлаИДвоичныеДанные(
			, ДанныеСтроки.Объект, ДанныеСтроки.АдресПодписи);
	КонецЕсли;
	
КонецПроцедуры

// Заполняет описания возможных прав, назначаемых по значениям доступа.
// 
// Параметры:
//  ВозможныеПрава - ТаблицаЗначений, содержащая поля,
//                   описание которых  см. в комментарии к функции
//                   РегистрыСведений.ПраваПоЗначениямДоступа.ВозможныеПрава().
//
Процедура ПриЗаполненииВозможныхПравПоЗначениямДоступа(Знач ВозможныеПрава) Экспорт
	
	////////////////////////////////////////////////////////////
	// Справочник.ПапкиФайлов
	////////////////////////////////////////////////////////////
	Право = ВозможныеПрава.Добавить();
	Право.ВладелецПрав  = "Справочник.ПапкиФайлов";
	Право.Имя           = "ЧтениеПапокИФайлов";
	Право.Синоним       = НСтр("ru = 'Чтение папок и файлов'");
	Право.Сокращение    = НСтр("ru = 'Чтение'");
	Право.Заголовок     = НСтр("ru = 'Чт'");
	Право.НачальноеЗначение = Истина;
	// Требуемая роль (одна из указанных)
	Право.ТребуемаяРоль.Добавить("РаботаСПапкамиФайлов");
	// Права для стандартных шаблонов ограничений доступа.
	Право.ЧтениеВТаблицах.Добавить("Справочник.ПапкиФайлов");
	Право.ЧтениеВТаблицах.Добавить("Справочник.Файлы");
	Право.ЧтениеВТаблицах.Добавить("Справочник.ВерсииФайлов");
	Право.ЧтениеВТаблицах.Добавить("РегистрСведений.ХранимыеФайлыВерсий");
	
	Право = ВозможныеПрава.Добавить();
	Право.ВладелецПрав  = "Справочник.ПапкиФайлов";
	Право.Имя           = "ДобавлениеПапокИФайлов";
	Право.Синоним       = НСтр("ru = 'Добавление папок и файлов'");
	Право.Сокращение    = НСтр("ru = 'Добавление'");
	Право.Заголовок     = НСтр("ru = 'Доб'");
	// Права, требуемые для этого права.
	Право.ТребуемыеПрава.Добавить("ЧтениеПапокИФайлов");
	Право.ТребуемыеПрава.Добавить("ИзменениеПапокИФайлов");
	// Требуемая роль (одна из указанных).
	Право.ТребуемаяРоль.Добавить("РаботаСПапкамиФайлов");
	// Права для стандартных шаблонов ограничений доступа.
	Право.ДобавлениеВТаблицах.Добавить("Справочник.ПапкиФайлов");
	Право.ДобавлениеВТаблицах.Добавить("Справочник.Файлы");
	
	Право = ВозможныеПрава.Добавить();
	Право.ВладелецПрав  = "Справочник.ПапкиФайлов";
	Право.Имя           = "ИзменениеПапокИФайлов";
	Право.Синоним       = НСтр("ru = 'Изменение папок и файлов'");
	Право.Сокращение    = НСтр("ru = 'Изменение'");
	Право.Заголовок     = НСтр("ru = 'Изм'");
	// Требуемая роль (одна из указанных).
	Право.ТребуемаяРоль.Добавить("РаботаСПапкамиФайлов");
	Право.ТребуемыеПрава.Добавить("ЧтениеПапокИФайлов");
	// Права для стандартных шаблонов ограничений доступа.
	Право.ИзменениеВТаблицах.Добавить("Справочник.ПапкиФайлов");
	Право.ИзменениеВТаблицах.Добавить("Справочник.Файлы");
	
	Право = ВозможныеПрава.Добавить();
	Право.ВладелецПрав  = "Справочник.ПапкиФайлов";
	Право.Имя           = "ПометкаУдаленияПапокИФайлов";
	Право.Синоним       = НСтр("ru = 'Пометка удаления папок и файлов'");
	Право.Сокращение    = НСтр("ru = 'Пометка удаления'");
	Право.Заголовок     = НСтр("ru = 'ПомУд'");
	// Права, требуемые для этого права.
	Право.ТребуемыеПрава.Добавить("ЧтениеПапокИФайлов");
	Право.ТребуемыеПрава.Добавить("ИзменениеПапокИФайлов");
	// Требуемая роль (одна из указанных)
	Право.ТребуемаяРоль.Добавить("РаботаСПапкамиФайлов");
	
	Право = ВозможныеПрава.Добавить();
	Право.ВладелецПрав  = "Справочник.ПапкиФайлов";
	Право.Имя           = "УправлениеПравами";
	Право.Синоним       = НСтр("ru = 'Управление правами папок файлов'");
	Право.Сокращение    = НСтр("ru = 'Управление правами'");
	Право.Заголовок     = НСтр("ru = 'Адм'");
	// Права, требуемые для этого права.
	Право.ТребуемыеПрава.Добавить("ЧтениеПапокИФайлов");
	// Требуемая роль (одна из указанных)
	Право.ТребуемаяРоль.Добавить("РаботаСПапкамиФайлов");
	
КонецПроцедуры

// Заполняет состав видов доступа, используемых при ограничении прав объектов метаданных.
// Если состав видов доступа не заполнен, отчет "Права доступа" покажет некорректные сведения.
//
// Обязательно требуется заполнить только виды доступа, используемые
// в шаблонах ограничения доступа явно, а виды доступа, используемые
// в наборах значений доступа могут быть получены из текущего состояния
// регистра сведений НаборыЗначенийДоступа.
//
//  Для автоматической подготовки содержимого процедуры следует
// воспользоваться инструментами разработчика для подсистемы
// Управление доступом.
//
// Параметры:
//  Описание     - Строка, многострочная строка формата <Таблица>.<Право>.<ВидДоступа>[.Таблица объекта]
//                 Например, Документ.ПриходнаяНакладная.Чтение.Организации
//                           Документ.ПриходнаяНакладная.Чтение.Контрагенты
//                           Документ.ПриходнаяНакладная.Добавление.Организации
//                           Документ.ПриходнаяНакладная.Добавление.Контрагенты
//                           Документ.ПриходнаяНакладная.Изменение.Организации
//                           Документ.ПриходнаяНакладная.Изменение.Контрагенты
//                           Документ.ЭлектронныеПисьма.Чтение.Объект.Документ.ЭлектронныеПисьма
//                           Документ.ЭлектронныеПисьма.Добавление.Объект.Документ.ЭлектронныеПисьма
//                           Документ.ЭлектронныеПисьма.Изменение.Объект.Документ.ЭлектронныеПисьма
//                           Документ.Файлы.Чтение.Объект.Справочник.ПапкиФайлов
//                           Документ.Файлы.Чтение.Объект.Документ.ЭлектронноеПисьмо
//                           Документ.Файлы.Добавление.Объект.Справочник.ПапкиФайлов
//                           Документ.Файлы.Добавление.Объект.Документ.ЭлектронноеПисьмо
//                           Документ.Файлы.Изменение.Объект.Справочник.ПапкиФайлов
//                           Документ.Файлы.Изменение.Объект.Документ.ЭлектронноеПисьмо
//                 Вид доступа Объект предопределен, как литерал, его нет в предопределенных элементах
//                 ПланыВидовХарактеристик.ВидыДоступа. Этот вид доступа используется в шаблонах ограничений доступа,
//                 как "ссылка" на другой объект, по которому ограничивается таблица.
//                 Когда вид доступа "Объект" задан, также требуется задать типы таблиц, которые используются
//                 для этого вида доступа. Т.е. перечислить типы, которые соответствующие полю,
//                 использованному в шаблоне ограничения доступа в паре с видом доступа "Объект".
//                 При перечислении типов по виду доступа "Объект" нужно перечислить только те типы поля,
//                 которые есть у поля РегистрыСведений.НаборыЗначенийДоступа.Объект, остальные типы лишние.
// 
Процедура ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(Описание) Экспорт
	
	Описание = Описание +
	"
	|Справочник.ПапкиФайлов.Чтение.ПапкиФайлов
	|Справочник.ПапкиФайлов.Добавление.ПапкиФайлов
	|Справочник.ПапкиФайлов.Изменение.ПапкиФайлов
	|Справочник.ВерсииФайлов.Чтение.Объект.Справочник.ПапкиФайлов
	|Справочник.Файлы.Чтение.Объект.Справочник.ПапкиФайлов
	|Справочник.Файлы.Добавление.Объект.Справочник.ПапкиФайлов
	|Справочник.Файлы.Изменение.Объект.Справочник.ПапкиФайлов
	|РегистрСведений.ХранимыеФайлыВерсий.Чтение.Объект.Справочник.ПапкиФайлов
	|";
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.БизнесПроцессыИЗадачи") Тогда
		Описание = Описание + 
		"
		|Справочник.ВерсииФайлов.Чтение.Объект.БизнесПроцесс.Задание
		|Справочник.Файлы.Чтение.Объект.БизнесПроцесс.Задание
		|Справочник.Файлы.Добавление.Объект.БизнесПроцесс.Задание
		|Справочник.Файлы.Изменение.Объект.БизнесПроцесс.Задание
		|РегистрСведений.ХранимыеФайлыВерсий.Чтение.Объект.БизнесПроцесс.Задание
		|";
	КонецЕсли;
	
КонецПроцедуры

// Заполняет свойства видов доступа, добавленных прикладным разработчиком
// в план видов характеристик ВидыДоступа, как предопределенные элементы.
//
// Параметры:
//  Свойства - Структура со свойствами,
//             описание которых см. в комментарии к функции
//             ПланыВидовХарактеристик.ВидыДоступа.СвойстваВидовДоступа().
//
Процедура ПриЗаполненииСвойствВидаДоступа(Знач Свойства) Экспорт
	
	Если Свойства.ВидДоступа = ПланыВидовХарактеристик["ВидыДоступа"].ПапкиФайлов Тогда
		Свойства.Таблицы.Добавить("Справочник.ПапкиФайлов");
		Свойства.ВидДоступаЧерезПраваПоЗначениямДоступа = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Используется для получения объектов метаданных, которые должны входить в состав плана обмена
// и НЕ должны входить в состав подписок на события регистрации изменений для этого плана обмена.
// Эти объекты метаданных используются только в момент создания начального образа подчиненного узла
// и не мигрируют в процессе обмена.
// Если подсистема имеет объекты метаданных, которые участвуют только в создании начального образа подчиненного узла,
// то в параметр <Объект> необходимо добавить эти объекты метаданных.
//
// Параметры:
// Объекты – Массив. Массив объектов метаданных конфигурации.
//
Процедура ПриПолученииОбъектовНачальногоОбразаПланаОбмена(Объекты) Экспорт
	
	Объекты.Добавить(Метаданные.РегистрыСведений.ХранимыеФайлыВерсий);
	
КонецПроцедуры

/////////////////////////////////////////////////////////////////////////////////////////
// Работа с кодировками

// Функция возвращает таблицу имен кодировок
// Возвращаемое значение:
// Результат (СписокЗначений)
// - Значение (Строка) - например "ibm852"
// - Представление (Строка) - например "ibm852 (Центральноевропейская DOS)"
//
Функция ПолучитьСписокКодировок() Экспорт

	СписокКодировок = Новый СписокЗначений;
	
	СписокКодировок.Добавить("ibm852",			"IBM852 (Центральноевропейская DOS)");
	СписокКодировок.Добавить("ibm866",			"IBM866 (Кириллица DOS)");
	СписокКодировок.Добавить("iso-8859-1",		"ISO-8859-1 (Западноевропейская ISO)");
	СписокКодировок.Добавить("iso-8859-2",		"ISO-8859-2 (Центральноевропейская ISO)");
	СписокКодировок.Добавить("iso-8859-3",		"ISO-8859-3 (Латиница 3 ISO)");
	СписокКодировок.Добавить("iso-8859-4",		"ISO-8859-4 (Балтийская ISO)");
	СписокКодировок.Добавить("iso-8859-5",		"ISO-8859-5 (Кириллица ISO)");
	СписокКодировок.Добавить("iso-8859-7",		"ISO-8859-7 (Греческая ISO)");
	СписокКодировок.Добавить("iso-8859-9",		"ISO-8859-9 (Турецкая ISO)");
	СписокКодировок.Добавить("iso-8859-15",		"ISO-8859-15 (Латиница 9 ISO)");
	СписокКодировок.Добавить("koi8-r",			"KOI8-R (Кириллица KOI8-R)");
	СписокКодировок.Добавить("koi8-u",			"KOI8-U (Кириллица KOI8-U)");
	СписокКодировок.Добавить("us-ascii",		"US-ASCII США");
	СписокКодировок.Добавить("utf-8",			"UTF-8 (Юникод UTF-8)");
	СписокКодировок.Добавить("windows-1250",	"Windows-1250 (Центральноевропейская Windows)");
	СписокКодировок.Добавить("windows-1251",	"windows-1251 (Кириллица Windows)");
	СписокКодировок.Добавить("windows-1252",	"Windows-1252 (Западноевропейская Windows)");
	СписокКодировок.Добавить("windows-1253",	"Windows-1253 (Греческая Windows)");
	СписокКодировок.Добавить("windows-1254",	"Windows-1254 (Турецкая Windows)");
	СписокКодировок.Добавить("windows-1257",	"Windows-1257 (Балтийская Windows)");
	
	Возврат СписокКодировок;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработчики подписок на события

// Обработчик подписки "при записи" версии файла
//
Процедура ВерсииФайловПриЗаписи(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		ЗаписатьДанныеФайлаВРегистрПриОбмене(Источник);
		Возврат;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("ПереименованиеФайла") Тогда
		Возврат;
	КонецЕсли;
	
	Если Источник.ДополнительныеСвойства.Свойство("КонвертацияФайлов") Тогда
		Возврат;
	КонецЕсли;
	
	// копируем реквизиты из версии в файл
	ТекущаяВерсия = Источник;
	Если Не ТекущаяВерсия.Ссылка.Пустая() Тогда
	
		ФайлСсылка = Источник.Владелец;
		
		РеквизитыФайла = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ФайлСсылка, 
			"ИндексКартинки, ТекущаяВерсияРазмер, ТекущаяВерсияДатаСоздания, ТекущаяВерсияАвтор, ТекущаяВерсияРасширение, ТекущаяВерсияНомерВерсии, ТекущаяВерсияТом, ТекущаяВерсияПутьКФайлу, ТекущаяВерсияКод, ТекущаяВерсияДатаМодификацииФайла");
			
			Если РеквизитыФайла.ТекущаяВерсияРазмер <> ТекущаяВерсия.Размер 
				ИЛИ РеквизитыФайла.ТекущаяВерсияДатаСоздания <> ТекущаяВерсия.ДатаСоздания
				ИЛИ РеквизитыФайла.ТекущаяВерсияРасширение <> ТекущаяВерсия.Расширение
				ИЛИ РеквизитыФайла.ТекущаяВерсияНомерВерсии <> ТекущаяВерсия.НомерВерсии
				ИЛИ РеквизитыФайла.ТекущаяВерсияТом <> ТекущаяВерсия.Том
				ИЛИ РеквизитыФайла.ТекущаяВерсияПутьКФайлу <> ТекущаяВерсия.ПутьКФайлу 
				ИЛИ РеквизитыФайла.ТекущаяВерсияКод <> ТекущаяВерсия.Код
				ИЛИ РеквизитыФайла.ИндексКартинки <> ТекущаяВерсия.ИндексКартинки
				ИЛИ РеквизитыФайла.ТекущаяВерсияДатаМодификацииФайла <> ТекущаяВерсия.ДатаМодификацииФайла
			Тогда
				ФайлОбъект = ФайлСсылка.ПолучитьОбъект();
				
				// Сменим индекс картинки, возможно, появилась версия или сменился индекс картинки у версии
				ФайлОбъект.ИндексКартинки = ТекущаяВерсия.ИндексКартинки;
				
				// копируем реквизиты для ускорения работы RLS
				ФайлОбъект.ТекущаяВерсияРазмер = ТекущаяВерсия.Размер;
				ФайлОбъект.ТекущаяВерсияДатаСоздания = ТекущаяВерсия.ДатаСоздания;
				ФайлОбъект.ТекущаяВерсияАвтор = ТекущаяВерсия.Автор;
				ФайлОбъект.ТекущаяВерсияРасширение = ТекущаяВерсия.Расширение;
				ФайлОбъект.ТекущаяВерсияНомерВерсии = ТекущаяВерсия.НомерВерсии;
				ФайлОбъект.ТекущаяВерсияТом = ТекущаяВерсия.Том;
				ФайлОбъект.ТекущаяВерсияПутьКФайлу = ТекущаяВерсия.ПутьКФайлу;
				ФайлОбъект.ТекущаяВерсияКод = ТекущаяВерсия.Код;
				ФайлОбъект.ТекущаяВерсияДатаМодификацииФайла = ТекущаяВерсия.ДатаМодификацииФайла;
				
				ФайлОбъект.Записать();
			КонецЕсли;
		
	КонецЕсли;
		
	ПриОбновленииСостоянияОчередиИзвлеченияТекста(
		Источник.Ссылка, Источник.СтатусИзвлеченияТекста);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики условных вызовов в другие подсистемы

// Проверяет возможность пометки удаления для текущего пользователя
// при использовании ограничения для папки или файла.
// 
// Параметры:
//  Ссылка       - СправочникСсылка.ПапкиФайлов, СправочникСсылка.Файлы,
//                 <ссылка на владельца>.
//
//  ПометкаНаУдалениеРазрешена - Булево (возвращаемое значение).
//                 Начальное значение Истина. Если права нет нужно установить Ложь.
//
Процедура ПриОпределенииПраваПометкиУдаления(Ссылка, ПометкаНаУдалениеРазрешена) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		
		Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.ПапкиФайлов") Тогда
			
			МодульУправлениеДоступом = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("УправлениеДоступом");
			Если НЕ МодульУправлениеДоступом.ЕстьПравоПоЗначениюДоступа("ПометкаУдаленияПапокИФайлов", Ссылка) Тогда
				ПометкаНаУдалениеРазрешена = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Добавляет и удаляет записи в регистр сведений ОчередьИзвлеченияТекста при изменении
// состояние извлечения текста версий файлов
//
// Параметры:
//	ИсточникТекста - СправочникСсылка.ВерсииФайлов, СправочникСсылка.*ПрисоединенныеФайлы,
//		файл, у которого изменилось состояние извлечения текста
//	СостояниеИзвлеченияТекста - ПеречислениеСсылка.СтатусыИзвлеченияТекстаФайлов, новый
//		статус извлечения текста у файла
//
Процедура ПриОбновленииСостоянияОчередиИзвлеченияТекста(ИсточникТекста, СостояниеИзвлеченияТекста) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса.ФайловыеФункцииВМоделиСервиса") Тогда
		
		Если ОбщегоНазначения.ИспользованиеРазделителяСеанса() Тогда
			МодульФайловыеФункцииСлужебныйВМоделиСервиса = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ФайловыеФункцииСлужебныйВМоделиСервиса");
			МодульФайловыеФункцииСлужебныйВМоделиСервиса.ОбновитьСостояниеОчередиИзвлеченияТекста(ИсточникТекста, СостояниеИзвлеченияТекста);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры и функции

Процедура ЗаписатьДанныеФайлаВРегистрПриОбмене(Источник)
	
	Перем ДвоичныеДанныеФайла;
	
	Если Источник.ДополнительныеСвойства.Свойство("ДвоичныеДанныеФайла", ДвоичныеДанныеФайла) Тогда
		НаборЗаписей = РегистрыСведений.ХранимыеФайлыВерсий.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ВерсияФайла.Установить(Источник.Ссылка);
		
		Запись = НаборЗаписей.Добавить();
		Запись.ВерсияФайла = Источник.Ссылка;
		Запись.ХранимыйФайл = Новый ХранилищеЗначения(ДвоичныеДанныеФайла);
		
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
		
		Источник.ДополнительныеСвойства.Удалить("ДвоичныеДанныеФайла");
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучениеФайлаЗапрещено(ЭлементДанных)
	
	Возврат ЭлементДанных.ЭтоНовый()
	      И Не ФайловыеФункцииСлужебныйКлиентСервер.ПроверитьРасширениеФайлаДляЗагрузки(
	             ЭлементДанных.ТекущаяВерсияРасширение, Ложь);
	
КонецФункции

Функция ПолучениеВерсииФайлаЗапрещено(ЭлементДанных)
	
	Возврат ЭлементДанных.ЭтоНовый()
	      И Не ФайловыеФункцииСлужебныйКлиентСервер.ПроверитьРасширениеФайлаДляЗагрузки(
	             ЭлементДанных.Расширение, Ложь);
	
КонецФункции

Процедура ПоместитьФайлВРеквизитСправочника(ЭлементДанных)
	
	Попытка
		// Помещаем данные файла из тома на диске в служебный реквизит справочника
		ЭлементДанных.ФайлХранилище = ФайловыеФункцииСлужебный.ПоместитьДвоичныеДанныеВХранилище(ЭлементДанных.Том, ЭлементДанных.ПутьКФайлу, ЭлементДанных.Ссылка.УникальныйИдентификатор());
	Исключение
		// Возможно, файл не был найден. Отправку данных не прерываем.
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Файлы.Не удалось отправить файл при обмене данными'",
			     ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()) );
		
		ЭлементДанных.ФайлХранилище = Новый ХранилищеЗначения(Неопределено);
	КонецПопытки;
	
	ЭлементДанных.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе;
	ЭлементДанных.ПутьКФайлу = "";
	ЭлементДанных.Том = Справочники.ТомаХраненияФайлов.ПустаяСсылка();
	
КонецПроцедуры

Функция ПолучитьПараметрыПриЗавершенииРаботы()
	
	ПараметрыПриЗавершении  = Новый Структура;
	ПараметрыПриЗавершении.Вставить("КоличествоЗанятыхФайлов", 0);
	
	Если ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
		
		Пользователь = ПользователиКлиентСервер.АвторизованныйПользователь();
		Если ТипЗнч(Пользователь) = Тип("СправочникСсылка.Пользователи") Тогда
			
			ПараметрыПриЗавершении.Вставить("КоличествоЗанятыхФайлов",
				РаботаСФайламиСлужебныйВызовСервера.ПолучитьКоличествоЗанятыхФайлов(, Пользователь));
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПараметрыПриЗавершении;
	
КонецФункции
