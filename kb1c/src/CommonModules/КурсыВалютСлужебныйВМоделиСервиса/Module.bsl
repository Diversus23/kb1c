////////////////////////////////////////////////////////////////////////////////
// Подсистема "Валюты в модели сервиса"
//  
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС

// См. описание этой же процедуры в модуле СтандартныеПодсистемыСервер.
Процедура ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики) Экспорт
	
	// СЕРВЕРНЫЕ ОБРАБОТЧИКИ.
	
	СерверныеОбработчики[
		"СтандартныеПодсистемы.ОбновлениеВерсииИБ\ПриДобавленииОбработчиковОбновления"].Добавить(
			"КурсыВалютСлужебныйВМоделиСервиса");
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса.ПоставляемыеДанные") Тогда
		СерверныеОбработчики[
			"СтандартныеПодсистемы.РаботаВМоделиСервиса.ПоставляемыеДанные\ПриОпределенииОбработчиковПоставляемыхДанных"].Добавить(
			"КурсыВалютСлужебныйВМоделиСервиса");
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса.ОчередьЗаданий") Тогда
		СерверныеОбработчики[
			"СтандартныеПодсистемы.РаботаВМоделиСервиса.ОчередьЗаданий\ПриОпределенииПсевдонимовОбработчиков"].Добавить(
			"КурсыВалютСлужебныйВМоделиСервиса");
	КонецЕсли;
	
	СерверныеОбработчики[
		"СтандартныеПодсистемы.РаботаВМоделиСервиса\ПослеЗагрузкиДанныхИзДругойМодели"].Добавить(
			"КурсыВалютСлужебныйВМоделиСервиса");
	
КонецПроцедуры

// Загрузить полный список курсов за все время
//
Процедура ЗагрузитьКурсы() Экспорт
	
	Дескрипторы = ПоставляемыеДанные.ДескрипторыПоставляемыхДанныхИзМенеджера("КурсыВалют");
	
	Если Дескрипторы.Descriptor.Количество() < 1 Тогда
		ВызватьИсключение(НСтр("ru = 'В менеджере сервиса отсутствуют данные вида ""КурсыВалют""'"));
	КонецЕсли;
	
	Курсы = ПоставляемыеДанные.СсылкиПоставляемыхДанныхИзКэша("КурсыОднойВалюты");
	Для каждого Курс Из Курсы Цикл
		ПоставляемыеДанные.УдалитьПоставляемыеДанныеИзКэша(Курс);
	КонецЦикла; 
	
	ПоставляемыеДанные.ЗагрузитьИОбработатьДанные(Дескрипторы.Descriptor[0]);
	
КонецПроцедуры

// Вызывается после загрузки данных в область
// Обновляет курсы валют из поставляемых данных
//
Процедура ОбновитьКурсыВалют() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	Валюты.Код
	               |ИЗ
	               |	Справочник.Валюты КАК Валюты
	               |ГДЕ
	               |	Валюты.ЗагружаетсяИзИнтернета = ИСТИНА";
	Выборка = Запрос.Выполнить().Выбрать();
	
	//Копируем курсы. Это необходимо делать синхронно, т.к. за вызовом ОбновитьКурсыВалют
	//следует обновление ИБ, которое пытается заблокировать базу. Копирование курсов - 
	//длительный процесс, который в асинхронном режиме может начаться в произвольный момент
	//и помешать блокировке.
	Пока Выборка.Следующий() Цикл
		КопироватьКурсыВалюты(Выборка.Код);
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ПОЛУЧЕНИЯ ПОСТАВЛЯЕМЫХ ДАННЫХ

// Регистрирует обработчики поставляемых данных за день и за все время
//
Процедура ЗарегистрироватьОбработчикиПоставляемыхДанных(Знач Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.ВидДанных = "КурсыВалютЗаДень";
	Обработчик.КодОбработчика = "КурсыВалютЗаДень";
	Обработчик.Обработчик = КурсыВалютСлужебныйВМоделиСервиса;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.ВидДанных = "КурсыВалют";
	Обработчик.КодОбработчика = "КурсыВалют";
	Обработчик.Обработчик = КурсыВалютСлужебныйВМоделиСервиса;
	
КонецПроцедуры

// Вызывается при получении уведомления о новых данных.
// В теле следует проверить, необходимы ли эти данные приложению, 
// и если да - установить флажок Загружать
// 
// Параметры:
//   Дескриптор   - ОбъектXDTO Descriptor.
//   Загружать    - булево, возвращаемое
//
Процедура ДоступныНовыеДанные(Знач Дескриптор, Загружать) Экспорт
	
	// При получении КурсыВалютЗаДень данные из файла дописываются ко всем хранящимся курсам по валюте
	// и записываются во все области данных, для валют, упоминающихся в области. Записывается только курс за
	// данную дату.
	//
	Если Дескриптор.DataType = "КурсыВалютЗаДень" Тогда
		Загружать = Истина;
	// Данные КурсыВалют приходят к нам в 3х случаях - 
	// при подключении ИБ к МС, 
	// при обновлении ИБ, когда после обновления потребовались валюты, которые были не нужны до этого
	// при ручной загрузке файла курсов в МС
	// Во всех случаях сбрасываем кеш, перезаписываются все курсы во всех ОД
	ИначеЕсли Дескриптор.DataType = "КурсыВалют" Тогда
		Загружать = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Вызывается после вызова ДоступныНовыеДанные, позволяет разобрать данные.
//
// Параметры:
//   Дескриптор   - ОбъектXDTO Дескриптор.
//   ПутьКФайлу   - Строка или Неопределено. Полное имя извлеченного файла. Файл будет автоматически удален 
//                  после завершения процедуры. Если в менеджере сервиса не был
//                  указан файл - значение аргумента равно Неопределено.
//
Процедура ОбработатьНовыеДанные(Знач Дескриптор, Знач ПутьКФайлу) Экспорт
	
	Если Дескриптор.DataType = "КурсыВалютЗаДень" Тогда
		ОбработатьПоставляемыеКурсыЗаДень(Дескриптор, ПутьКФайлу);
	ИначеЕсли Дескриптор.DataType = "КурсыВалют" Тогда
		ОбработатьПоставляемыеКурсы(Дескриптор, ПутьКФайлу);
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при отмене обработки данных в случае сбоя
//
Процедура ОбработкаДанныхОтменена(Знач Дескриптор) Экспорт 
	
	ПоставляемыеДанные.ОбластьОбработана(Дескриптор.FileGUID, "КурсыВалютЗаДень", Неопределено);
	
КонецПроцедуры	

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ОБНОВЛЕНИЯ ИНФОРМАЦИОННОЙ БАЗЫ

// Добавляет процедуры-обработчики обновления, необходимые данной подсистеме.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                  общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.1.7";
	Обработчик.Процедура = "КурсыВалютСлужебныйВМоделиСервиса.ПреобразованиеСвязейВалют";
	
КонецПроцедуры

// Вызывается при обновлении с прошлых версий, где не выставлялся флажок ЗагружаетсяИзИнтернета
//
Процедура ПреобразованиеСвязейВалют() Экспорт
	Перем Запрос, Выборка, НаборЗаписей, Запись;
	Перем КлассификаторXML, КлассификаторТаблица, Валюта, НайденнаяСтрока;
	
	// Проставляем флаг "ЗагружаетсяИзИнтернета"
	
	КлассификаторXML = Справочники.Валюты.ПолучитьМакет("ОбщероссийскийКлассификаторВалют").ПолучитьТекст();
	КлассификаторТаблица = ОбщегоНазначения.ПрочитатьXMLВТаблицу(КлассификаторXML).Данные;
	КлассификаторТаблица.Индексы.Добавить("Code");
	
	Выборка = Справочники.Валюты.Выбрать();
	Пока Выборка.Следующий()  Цикл
    	Валюта = Выборка.ПолучитьОбъект();
		НайденнаяСтрока = КлассификаторТаблица.Найти(Валюта.Код, "Code");
		Если НайденнаяСтрока <> Неопределено И НайденнаяСтрока.RBCLoading = "истина" Тогда
			Валюта.ЗагружаетсяИзИнтернета = Истина;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(Валюта);
		КонецЕсли;
	КонецЦикла;	


КонецПроцедуры	

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий подсистем БСП

// Заполняет соответствие имен методов их псевдонимам для вызова из очереди заданий
//
// Параметры:
//  СоответствиеИменПсевдонимам - Соответствие
//   Ключ - Псевдоним метода, например ОчиститьОбластьДанных
//   Значение - Имя метода для вызова, например РаботаВМоделиСервиса.ОчиститьОбластьДанных
//    В качестве значения можно указать Неопределено, в этом случае считается что имя 
//    совпадает с псевдонимом
//
Процедура ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам) Экспорт
	
	СоответствиеИменПсевдонимам.Вставить("КурсыВалютСлужебныйВМоделиСервиса.КопироватьКурсыВалюты");
	
КонецПроцедуры

// Зарегистрировать обработчики поставляемых данных
//
// При получении уведомления о доступности новых общих данных, вызывается процедуры
// ДоступныНовыеДанные модулей, зарегистрированных через ПолучитьОбработчикиПоставляемыхДанных.
// В процедуру передается Дескриптор - ОбъектXDTO Descriptor.
// 
// В случае, если ДоступныНовыеДанные устанавливает аргумент Загружать в значение Истина, 
// данные загружаются, дескриптор и путь к файлу с данными передаются в процедуру 
// ОбработатьНовыеДанные. Файл будет автоматически удален после завершения процедуры.
// Если в менеджере сервиса не был указан файл - значение аргумента равно Неопределено.
//
// Параметры: 
//   Обработчики, ТаблицаЗначений - таблица для добавления обработчиков. 
//       Колонки:
//        ВидДанных, строка - код вида данных, обрабатываемый обработчиком
//        КодОбработчика, строка(20) - будет использоваться при восстановлении обработки данных после сбоя
//        Обработчик,  ОбщийМодуль - модуль, содержащий следующие процедуры:
//          ДоступныНовыеДанные(Дескриптор, Загружать) Экспорт  
//          ОбработатьНовыеДанные(Дескриптор, ПутьКФайлу) Экспорт
//          ОбработкаДанныхОтменена(Дескриптор) Экспорт
//
Процедура ПриОпределенииОбработчиковПоставляемыхДанных(Обработчики) Экспорт
	
	ЗарегистрироватьОбработчикиПоставляемыхДанных(Обработчики);
	
КонецПроцедуры

// Вызывается после окончания загрузки данных из локальной версии
// в область данных сервиса или наоборот.
//
Процедура ПослеЗагрузкиДанныхИзДругойМодели() Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса.ПоставляемыеДанные") Тогда
		//Создаем связи между разделенными и неразделенными валютами, копируем курсы
		ОбновитьКурсыВалют();
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Сериализация/десериализация файла курсов

// Записывает файл в формате поставляемых данных
//
// Параметры:
//  ТаблицаКурсов - ТаблицаЗначений с колонками Код, Дата, Кратность, Курс
//  Файл - Строка или ЗаписьТекста
//
Процедура ЗаписатьТаблицуКурсов(Знач ТаблицаКурсов, Знач Файл)
	
	Если ТипЗнч(Файл) = Тип("Строка") Тогда
		ЗаписьТекста = Новый ЗаписьТекста(Файл);
	Иначе
		ЗаписьТекста = Файл;
	КонецЕсли;
	
	Для каждого СтрокаТаблицы Из ТаблицаКурсов Цикл
			
		КурсXML = СтрЗаменить(
		СтрЗаменить(
		СтрЗаменить(
			СтрЗаменить("<Rate Code=""%1"" Date=""%2"" Factor=""%3"" Rate=""%4""/>", 
			"%1", СтрокаТаблицы.Код),
			"%2", Лев(СериализаторXDTO.XMLСтрока(СтрокаТаблицы.Дата), 10)),
			"%3", СериализаторXDTO.XMLСтрока(СтрокаТаблицы.Кратность)),
			"%4", СериализаторXDTO.XMLСтрока(СтрокаТаблицы.Курс));
		
		ЗаписьТекста.ЗаписатьСтроку(КурсXML);
	КонецЦикла; 
	
	Если ТипЗнч(Файл) = Тип("Строка") Тогда
		ЗаписьТекста.Закрыть();
	КонецЕсли;
	
КонецПроцедуры

// Читает файл в формате поставляемых данных
//
// Параметры:
//  ПутьКФайлу - Строка, имя файла
//  ИскатьДубликаты - Булево, сворачивает записи с одинаковой датой
//
// Возвращаемое значение
//	ТаблицаЗначений с колонками Код, Дата, Кратность, Курс
//
Функция ПрочитатьТаблицуКурсов(Знач ПутьКФайлу, Знач ИскатьДубликаты = Ложь)
	
	ТипДанныхКурса = ФабрикаXDTO.Тип("http://www.1c.ru/SaaS/SuppliedData/CurrencyRates", "Rate");
	ТаблицаКурсов = Новый ТаблицаЗначений();
	ТаблицаКурсов.Колонки.Добавить("Код", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(200)));
	ТаблицаКурсов.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата", , , Новый КвалификаторыДаты(ЧастиДаты.Дата)));
	ТаблицаКурсов.Колонки.Добавить("Кратность", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(9, 0)));
	ТаблицаКурсов.Колонки.Добавить("Курс", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(20, 4)));
	
	Чтение = Новый ЧтениеТекста(ПутьКФайлу);
	ТекущаяСтрока = Чтение.ПрочитатьСтроку();
	Пока ТекущаяСтрока <> Неопределено Цикл
		
		ЧтениеXML = Новый ЧтениеXML();
		ЧтениеXML.УстановитьСтроку(ТекущаяСтрока);
		Курс = ФабрикаXDTO.ПрочитатьXML(ЧтениеXML, ТипДанныхКурса);
		
		Если ИскатьДубликаты Тогда
			Для каждого Дубликат Из ТаблицаКурсов.НайтиСтроки(Новый Структура("Дата", Курс.Date)) Цикл
				ТаблицаКурсов.Удалить(Дубликат);
			КонецЦикла;
		КонецЕсли;
		
		ЗаписьКурсовВалют = ТаблицаКурсов.Добавить();
		ЗаписьКурсовВалют.Код    = Курс.Code;
		ЗаписьКурсовВалют.Дата    = Курс.Date;
		ЗаписьКурсовВалют.Кратность = Курс.Factor;
		ЗаписьКурсовВалют.Курс      = Курс.Rate;

		ТекущаяСтрока = Чтение.ПрочитатьСтроку();
	КонецЦикла;
	Чтение.Закрыть();
	
	ТаблицаКурсов.Индексы.Добавить("Код");
	Возврат ТаблицаКурсов;
		
КонецФункции

// Вызывается, когда получены данные вида "КурсыВалют"
//
// Параметры:
//   Дескриптор   - ОбъектXDTO Descriptor.
//   ПутьКФайлу   - строка. Полное имя извлеченного файла.
//
Процедура ОбработатьПоставляемыеКурсы(Знач Дескриптор, Знач ПутьКФайлу)
	
	ТаблицаКурсов = ПрочитатьТаблицуКурсов(ПутьКФайлу);
	ТаблицаКурсов.Индексы.Добавить("Код");
	
	// Разбиваем на файлы по валюте и записываем в базу
	ТаблицаКодов = ТаблицаКурсов.Скопировать( , "Код");
	ТаблицаКодов.Свернуть("Код");
	Для каждого СтрокаКода Из ТаблицаКодов Цикл
		
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
		ЗаписатьТаблицуКурсов(ТаблицаКурсов.НайтиСтроки(Новый Структура("Код", СтрокаКода.Код)), ИмяВременногоФайла);
		
		Дескриптор = Новый Структура("ВидДанных, ДатаДобавления, ИдентификаторФайла, Характеристики",
			"КурсыОднойВалюты", ТекущаяУниверсальнаяДата(), Новый УникальныйИдентификатор, Новый Массив);
		Дескриптор.Характеристики.Добавить(Новый Структура("Код, Значение, Ключевая", "Валюта", СтрокаКода.Код, Истина));
		
		ПоставляемыеДанные.СохранитьПоставляемыеДанныеВКэш(Дескриптор, ИмяВременногоФайла);
		Попытка
			УдалитьФайлы(ИмяВременногоФайла);
		Исключение
		КонецПопытки;
	
	КонецЦикла; 
	
	ОбластиДляОбновления = ПоставляемыеДанные.ОбластиТребующиеОбработки(
		Дескриптор.ИдентификаторФайла, "КурсыВалют");
	
	РаспространитьКурсыПоОД(, ТаблицаКурсов, ОбластиДляОбновления, 
		Дескриптор.ИдентификаторФайла, "КурсыВалют");

КонецПроцедуры

// Вызывается после получения новых данных вида КурсыВалютЗаДень
//
// Параметры:
//   Дескриптор   - ОбъектXDTO Descriptor.
//   ПутьКФайлу   - строка. Полное имя извлеченного файла.
//
Процедура ОбработатьПоставляемыеКурсыЗаДень(Знач Дескриптор, Знач ПутьКФайлу)
		
	ТаблицаКурсов = ПрочитатьТаблицуКурсов(ПутьКФайлу);
	
	ДатаКурсов = "";
	Для каждого Характеристика Из Дескриптор.Properties.Property Цикл
		Если Характеристика.Code = "Дата" Тогда
			ДатаКурсов = Дата(Характеристика.Value); 		
		КонецЕсли;
	КонецЦикла; 
	
	Если ДатаКурсов = "" Тогда
		ВызватьИсключение НСтр("ru = 'Данные вида ""КурсыВалютЗаДень"" не содержат характеристики ""Дата"". Обновление курсов невозможно.'"); 
	КонецЕсли;
	
	ОбластиДляОбновления = ПоставляемыеДанные.ОбластиТребующиеОбработки(Дескриптор.FileGUID, "КурсыВалютЗаДень", Истина);
	
	ИндексОбщихКурсов = ОбластиДляОбновления.Найти(-1);
	Если ИндексОбщихКурсов <> Неопределено Тогда
		
		КэшКурсов = ПоставляемыеДанные.ДескрипторыПоставляемыхДанныхИзКэша("КурсыОднойВалюты", , Ложь);
		Если КэшКурсов.Количество() > 0 Тогда
			Для каждого СтрокаКурсов Из ТаблицаКурсов Цикл
				
				КэшТекущей = Неопределено;
				Для	каждого ДескрипторКэша Из КэшКурсов Цикл
					Если ДескрипторКэша.Характеристики.Количество() > 0 
						И ДескрипторКэша.Характеристики[0].Код = "Валюта"
						И ДескрипторКэша.Характеристики[0].Значение = СтрокаКурсов.Код Тогда
						КэшТекущей = ДескрипторКэша;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
				Если КэшТекущей <> Неопределено Тогда
					Данные = ПоставляемыеДанные.ПоставляемыеДанныеИзКэша(КэшТекущей.ИдентификаторФайла);
					Данные.Записать(ИмяВременногоФайла);
				Иначе
					КэшТекущей = Новый Структура("ВидДанных, ДатаДобавления, ИдентификаторФайла, Характеристики",
						"КурсыОднойВалюты", ТекущаяУниверсальнаяДата(), Новый УникальныйИдентификатор, Новый Массив);
					КэшТекущей.Характеристики.Добавить(Новый Структура("Код, Значение, Ключевая", "Валюта", СтрокаКурсов.Код, Истина));
				КонецЕсли;
				
				ЗаписьТекста = Новый ЗаписьТекста(ИмяВременногоФайла, КодировкаТекста.UTF8, 
				Символы.ПС, Истина);
				
				ТаблицаДляЗаписи = Новый Массив;
				ТаблицаДляЗаписи.Добавить(СтрокаКурсов);
				ЗаписатьТаблицуКурсов(ТаблицаДляЗаписи, ЗаписьТекста);
				ЗаписьТекста.Закрыть();
				
				ПоставляемыеДанные.СохранитьПоставляемыеДанныеВКэш(КэшТекущей, ИмяВременногоФайла);
				Попытка
					УдалитьФайлы(ИмяВременногоФайла);
				Исключение
				КонецПопытки;

			КонецЦикла; 
			
		КонецЕсли;
		
		ОбластиДляОбновления.Удалить(ИндексОбщихКурсов);
	КонецЕсли;
	
	РаспространитьКурсыПоОД(ДатаКурсов, ТаблицаКурсов, ОбластиДляОбновления, 
		Дескриптор.FileGUID, "КурсыВалютЗаДень");

КонецПроцедуры

// Копирует курсы во все ОД
//
// Параметры
//  ДатаКурсов - Дата или Неопределено. Курсы добавляются за указанную дату либо за все время
//  ТаблицаКурсов - ТаблицаЗначений с курсами
//  ОбластиДляОбновления - Массив со списком кодов областей
//  ИдентификаторФайла - УникальныйИдентификатор файла обрабатываемых курсов
//  КодОбработчика - Строка, код обработчика
//
Процедура РаспространитьКурсыПоОД(Знач ДатаКурсов, Знач ТаблицаКурсов, 
	Знач ОбластиДляОбновления, Знач ИдентификаторФайла, Знач КодОбработчика)
	
	Для каждого ОбластьДанных Из ОбластиДляОбновления Цикл
	
		ОбщегоНазначения.УстановитьРазделениеСеанса(Истина, ОбластьДанных);
		
		ЗапросВалюты = Новый Запрос;
		ЗапросВалюты.Текст = "ВЫБРАТЬ
		                     |	Валюты.Ссылка,
		                     |	Валюты.Код
		                     |ИЗ
		                     |	Справочник.Валюты КАК Валюты
		                     |ГДЕ
		                     |	Валюты.ЗагружаетсяИзИнтернета = ИСТИНА";
		ВыборкаВалюты = ЗапросВалюты.Выполнить().Выбрать();
		НачатьТранзакцию();
		Пока ВыборкаВалюты.Следующий() Цикл
		
			Курсы = ТаблицаКурсов.НайтиСтроки(Новый Структура("Код", ВыборкаВалюты.Код));
			Если Курсы.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
		
			НаборЗаписей = РегистрыСведений.КурсыВалют.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Валюта.Установить(ВыборкаВалюты.Ссылка);
			Если ДатаКурсов <> Неопределено Тогда
				НаборЗаписей.Отбор.Период.Установить(ДатаКурсов);
			Иначе 
				//Блокируем неэффективное обновление связанных валют
				НаборЗаписей.ОбменДанными.Загрузка = Истина;
			КонецЕсли;
			
			Для каждого СтрокаКурсов Из Курсы Цикл
				Запись = НаборЗаписей.Добавить();
				Запись.Валюта = ВыборкаВалюты.Ссылка;
				Запись.Период = СтрокаКурсов.Дата;
				Запись.Кратность = СтрокаКурсов.Кратность;
				Запись.Курс = СтрокаКурсов.Курс;
			КонецЦикла; 
			НаборЗаписей.Записать();
			
		КонецЦикла;
		ПоставляемыеДанные.ОбластьОбработана(ИдентификаторФайла, КодОбработчика, ОбластьДанных);
		ЗафиксироватьТранзакцию();
	КонецЦикла;
	
КонецПроцедуры

// Вызывается при изменении реквизита ЗагружаетсяИзИнтернета
//
// Валюта - СправочникСсылка.Валюты
//
Процедура ЗапланироватьКопированиеКурсовВалюты(Знач Валюта) Экспорт
	
	Если Не Валюта.ЗагружаетсяИзИнтернета Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыМетода = Новый Массив;
	ПараметрыМетода.Добавить(Валюта.Код);

	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("ИмяМетода", "КурсыВалютСлужебныйВМоделиСервиса.КопироватьКурсыВалюты");
	ПараметрыЗадания.Вставить("Параметры", ПараметрыМетода);
	
	УстановитьПривилегированныйРежим(Истина);
	ОчередьЗаданий.ДобавитьЗадание(ПараметрыЗадания);

КонецПроцедуры

// Вызывается после загрузки данных в область или при установке флажка ЗагружаетсяИзИнтернета
// Копирует курсы одной валюты за все даты из 
// неразделенного xml файла в разделенный регистр
// 
// Параметры
//  КодВалюты - Строка
//
Процедура КопироватьКурсыВалюты(Знач КодВалюты) Экспорт
	
	ВалютаСсылка = Справочники.Валюты.НайтиПоКоду(КодВалюты);
	Если ВалютаСсылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ТипДанныхКурса = ФабрикаXDTO.Тип("http://www.1c.ru/SaaS/SuppliedData/CurrencyRates", "Rate");
	
	Фильтр = Новый Массив;
	Фильтр.Добавить(Новый Структура("Код, Значение", "Валюта", КодВалюты));
	Курсы = ПоставляемыеДанные.СсылкиПоставляемыхДанныхИзКэша("КурсыОднойВалюты", Фильтр);
	Если Курсы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПутьКФайлу = ПолучитьИмяВременногоФайла();
	ПоставляемыеДанные.ПоставляемыеДанныеИзКэша(Курсы[0]).Записать(ПутьКФайлу);
	ТаблицаКурсов = ПрочитатьТаблицуКурсов(ПутьКФайлу, Истина);
	Попытка
		УдалитьФайлы(ПутьКФайлу);
	Исключение
	КонецПопытки;
	
	ТаблицаКурсов.Колонки.Дата.Имя = "Период";
	ТаблицаКурсов.Колонки.Добавить("Валюта");
	ТаблицаКурсов.ЗаполнитьЗначения(ВалютаСсылка, "Валюта");
	
	НаборЗаписей = РегистрыСведений.КурсыВалют.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Валюта.Установить(ВалютаСсылка);
	НаборЗаписей.Загрузить(ТаблицаКурсов);
	НаборЗаписей.ОбменДанными.Загрузка = Истина;
	НаборЗаписей.Записать();

КонецПроцедуры
