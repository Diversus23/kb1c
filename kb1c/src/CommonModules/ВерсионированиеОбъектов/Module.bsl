////////////////////////////////////////////////////////////////////////////////
// Подсистема "Версионирование объектов".
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Выполняется при обновлении конфигурации.
// 1. Очищает настройки версионирования по объектам, для которых версионирование не применено
// 2. Устанавливает настройки версионирования по умолчанию
//
Процедура ОбновитьНастройкиВерсионированияОбъектов() Экспорт
	
	ВерсионируемыеОбъекты = ПолучитьВерсионируемыеОбъекты();
	
	ВыборкаЗаписей = РегистрыСведений.НастройкиВерсионированияОбъектов.Выбрать();
	
	Пока ВыборкаЗаписей.Следующий() Цикл
		Если ВерсионируемыеОбъекты.Найти(ВыборкаЗаписей.ТипОбъекта) = Неопределено Тогда
			МенеджерЗаписи = ВыборкаЗаписей.ПолучитьМенеджерЗаписи();
			МенеджерЗаписи.Удалить();
		КонецЕсли;
	КонецЦикла;
	
	// составной тип из строки и ссылки на справочник Номенклатуры.
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(Тип("Строка"));
	
	ВерсионируемыеОбъектыТЗ = Новый ТаблицаЗначений;
	ВерсионируемыеОбъектыТЗ.Колонки.Добавить("ТипОбъекта", 
				Новый ОписаниеТипов(МассивТипов, , Метаданные.РегистрыСведений.НастройкиВерсионированияОбъектов.Измерения.ТипОбъекта.Тип.КвалификаторыСтроки) );
	Для Каждого ТипОбъекта Из ВерсионируемыеОбъекты Цикл
		ВерсионируемыеОбъектыТЗ.Добавить();
	КонецЦикла;
	ВерсионируемыеОбъектыТЗ.ЗагрузитьКолонку(ВерсионируемыеОбъекты, "ТипОбъекта");
	
	Запрос = Новый Запрос;
	Запрос.Текст =
			"ВЫБРАТЬ
			|	ВерсионируемыеОбъекты.ТипОбъекта
			|ПОМЕСТИТЬ ТаблицаВерсионируемыхОбъектов
			|ИЗ
			|	&ВерсионируемыеОбъекты КАК ВерсионируемыеОбъекты
			|;
			|////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ТаблицаВерсионируемыхОбъектов.ТипОбъекта
			|ИЗ
			|	ТаблицаВерсионируемыхОбъектов КАК ТаблицаВерсионируемыхОбъектов
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиВерсионированияОбъектов КАК НастройкиВерсионированияОбъектов
			|			ПО НастройкиВерсионированияОбъектов.ТипОбъекта = ТаблицаВерсионируемыхОбъектов.ТипОбъекта
			|ГДЕ
			|	НастройкиВерсионированияОбъектов.Вариант ЕСТЬ NULL ";
			
	Запрос.Параметры.Вставить("ВерсионируемыеОбъекты", ВерсионируемыеОбъектыТЗ);
	ВерсионируемыеОбъектыБезНастройки = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ТипОбъекта");
	
	НаборЗаписейНастроек = РегистрыСведений.НастройкиВерсионированияОбъектов.СоздатьНаборЗаписей();
	НаборЗаписейНастроек.Прочитать();
	Для Каждого ВерсионируемыйОбъект Из ВерсионируемыеОбъектыБезНастройки Цикл
		НоваяЗапись = НаборЗаписейНастроек.Добавить();
		НоваяЗапись.ТипОбъекта = ВерсионируемыйОбъект;
		НоваяЗапись.Вариант = Перечисления.ВариантыВерсионированияОбъектов.НеВерсионировать;
		НоваяЗапись.Использовать = ? (НоваяЗапись.Вариант = Перечисления.ВариантыВерсионированияОбъектов.НеВерсионировать, Ложь, Истина);
	КонецЦикла;
	
	НаборЗаписейНастроек.Записать(Истина);
	
КонецПроцедуры

// Записывает настройку версионирования по объекту в регистр сведений.
//
// Параметры:
//  ИмяОбъектаМетаданных   - Строка - полное имя объекта метаданных;
//  ВариантВерсионирования - Перечисление.ВариантыВерсионированияОбъектов.
//
Процедура ЗаписатьНастройкуВерсионированияПоОбъекту(ИмяОбъектаМетаданных, ВариантВерсионирования) Экспорт
	
	Настройка = РегистрыСведений.НастройкиВерсионированияОбъектов.СоздатьМенеджерЗаписи();
	Настройка.ТипОбъекта = ИмяОбъектаМетаданных;
	Настройка.Вариант = ВариантВерсионирования;
	Настройка.Записать();
	
КонецПроцедуры

// Выполняет с формой действия, необходимые для подключения подсистемы версионирования.
//
// Параметры:
//  Форма - УправляемаяФорма - форма для подключения механизма версионирования.
//
Процедура ПриСозданииНаСервере(Форма) Экспорт
	
	Если Пользователи.РолиДоступны("ЧтениеВерсийОбъектов") И ПолучитьФункциональнуюОпцию("ИспользоватьВерсионированиеОбъектов") Тогда
		ИмяФормыМассив = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Форма.ИмяФормы, ".");
		ПолноеИмяМетаданных = ИмяФормыМассив[0] + "." + ИмяФормыМассив[1];
	Иначе
		ПолноеИмяМетаданных = Неопределено;
	КонецЕсли;
	
	Форма.УстановитьПараметрыФункциональныхОпцийФормы(Новый Структура("ТипВерсионируемогоОбъекта", ПолноеИмяМетаданных));
	
КонецПроцедуры

// Возвращает табличный документ, заполненный данными объекта.
// 
// Параметры:
//  СсылкаНаОбъект - ЛюбаяСсылка
//
// Возвращаемое значение:
//  ТабличныйДокумент - печатная форма объекта.
//
Функция ОтчетПоВерсииОбъекта(СсылкаНаОбъект) Экспорт
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	СформироватьОтчетПоПереданнойВерсии(ТабличныйДокумент, СериализоватьОбъект(СсылкаНаОбъект.ПолучитьОбъект()), СсылкаНаОбъект);
	Возврат ТабличныйДокумент;
	
КонецФункции

// Устарела. Следует использовать ОтчетПоВерсииОбъекта.
//
Функция ПолучитьПечатнуюФормуОбъекта(СсылкаНаОбъект) Экспорт
	
	Возврат ОтчетПоВерсииОбъекта(СсылкаНаОбъект);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС

// См. описание этой же процедуры в модуле СтандартныеПодсистемыСервер.
Процедура ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики) Экспорт
	
	// СЕРВЕРНЫЕ ОБРАБОТЧИКИ.
	
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриДобавленииИсключенийПоискаСсылок"].Добавить(
		"ВерсионированиеОбъектов");
		
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриПолученииДанныхОтПодчиненного"].Добавить(
		"ВерсионированиеОбъектов");
	
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриПолученииДанныхОтГлавного"].Добавить(
		"ВерсионированиеОбъектов");
	
КонецПроцедуры

// Записывает версию объекта в информационную базу.
//
// Параметры
//	Объект - для создания версии
//
Процедура ПриСозданииВерсииОбъекта(Объект) Экспорт
	
	Перем НомерПоследнейВерсии, Комментарий;
	
	Если НЕ ОбъектВерсионируется(Объект, НомерПоследнейВерсии) Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Объект.ДополнительныеСвойства.Свойство("ВерсионированиеОбъектовКомментарийКВерсии", Комментарий) Тогда
		Комментарий = "";
	КонецЕсли;
	
	СведенияОВерсииОбъекта = Новый Структура;
	СведенияОВерсииОбъекта.Вставить("НомерВерсии", Число(НомерПоследнейВерсии) + 1);
	СведенияОВерсииОбъекта.Вставить("Комментарий", Комментарий);
	
	СоздатьВерсиюОбъекта(Объект, СведенияОВерсииОбъекта);
	
КонецПроцедуры

// Записывает версию объекта, полученного при обмене данными, в информационную базу.
// Для версии объекта не по коллизии проверяет включенность версионирования.
//
// Параметры
//	Объект - для создания версии
//
Процедура ПриСозданииВерсииОбъектаПоОбменуДанными(Объект) Экспорт
	
	Перем НомерПоследнейВерсии;
	
	Если Не ОбщегоНазначения.ЭтоОбъектСсылочногоТипа(Объект.Метаданные()) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Ссылка = Объект.Ссылка;
	
	СведенияОВерсииОбъекта = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(
		Объект.ДополнительныеСвойства.СведенияОВерсииОбъекта);
	
	Если СведенияОВерсииОбъекта.ТипВерсииОбъекта = "ПринятыеДанныеПоКоллизии" Тогда
		
		НомерПоследнейВерсии = НомерПоследнейВерсии(Ссылка);
		
		СведенияОВерсииОбъекта.Вставить("Объект", Ссылка);
		СведенияОВерсииОбъекта.Вставить("НомерВерсии", Число(НомерПоследнейВерсии) + 1);
		СведенияОВерсииОбъекта.ТипВерсииОбъекта = Перечисления.ТипыВерсийОбъекта[СведенияОВерсииОбъекта.ТипВерсииОбъекта];
		
		СоздатьВерсиюОбъекта(Объект, СведенияОВерсииОбъекта, Ложь);
		
	ИначеЕсли ОбъектВерсионируется(Объект, НомерПоследнейВерсии) Тогда
		
		Если СведенияОВерсииОбъекта.ОтложеннаяОбработка Тогда
			
			НомерПоследнейВерсии = НомерПоследнейВерсии(Ссылка);
			ЗаписатьВерсиюПоверхПредыдущей(Ссылка, Объект, НомерПоследнейВерсии, СведенияОВерсииОбъекта);
			
		Иначе
			
			СведенияОВерсииОбъекта.Вставить("Объект", Ссылка);
			СведенияОВерсииОбъекта.Вставить("НомерВерсии", Число(НомерПоследнейВерсии) + 1);
			СведенияОВерсииОбъекта.ТипВерсииОбъекта = Перечисления.ТипыВерсийОбъекта[СведенияОВерсииОбъекта.ТипВерсииОбъекта];
			
			СоздатьВерсиюОбъекта(Объект, СведенияОВерсииОбъекта, Ложь);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Объект.ДополнительныеСвойства.Удалить("СведенияОВерсииОбъекта");
	
КонецПроцедуры

// Создает и записывает версию объекта в информационную базу.
//
Процедура СоздатьВерсиюОбъекта(Объект, СведенияОВерсииОбъекта, ЗаписьОбычнойВерсии = Истина)
	
	Если Не ПривилегированныйРежим() Тогда
		ВыполнитьПроверкуПравДоступа("Изменение", Объект.Метаданные());
	КонецЕсли;
	
	ЗаписьXML = Новый ЗаписьFastInfoset;
	ЗаписьXML.УстановитьДвоичныеДанные();
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	ЗаписатьXML(ЗаписьXML, Объект, НазначениеТипаXML.Явное);
	ДвоичныеДанные = ЗаписьXML.Закрыть();
	ХранилищеДанных = Новый ХранилищеЗначения(ДвоичныеДанные, Новый СжатиеДанных(9));
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерЗаписиВерсииОбъектов = РегистрыСведений.ВерсииОбъектов.СоздатьМенеджерЗаписи();
	МенеджерЗаписиВерсииОбъектов.ДатаВерсии    = ТекущаяДатаСеанса();
	МенеджерЗаписиВерсииОбъектов.ВерсияОбъекта = ХранилищеДанных;
	
	ЗаполнитьЗначенияСвойств(МенеджерЗаписиВерсииОбъектов, СведенияОВерсииОбъекта);
	
	Если ЗаписьОбычнойВерсии Тогда
		
		МенеджерЗаписиВерсииОбъектов.Объект      = Объект.Ссылка;
		МенеджерЗаписиВерсииОбъектов.АвторВерсии = Пользователи.АвторизованныйПользователь();
		МенеджерЗаписиВерсииОбъектов.ТипВерсииОбъекта = Перечисления.ТипыВерсийОбъекта.ИзмененоПользователем;
		
	КонецЕсли;
	
	МенеджерЗаписиВерсииОбъектов.Записать();
	
КонецПроцедуры

// Записывает версию объекта, полученного при обмене данными, в информационную базу.
//
// Параметры
//	Объект - для создания версии
//	СведенияОВерсииОбъекта - Структура - содержит информацию о версии объекта
//	СсылкаСуществует - Булево - Признак наличия объекта по ссылке в информационной базе
//
Процедура СоздатьВерсиюОбъектаПоОбменуДанными(Объект, СведенияОВерсииОбъекта, СсылкаСуществует = Неопределено) Экспорт
	
	Ссылка = Объект.Ссылка;
	
	Если Не ЗначениеЗаполнено(СсылкаСуществует) Тогда
		СсылкаСуществует = ОбщегоНазначения.СсылкаСуществует(Ссылка);
	КонецЕсли;
		
	Если СсылкаСуществует Тогда
		
		НомерПоследнейВерсии = НомерПоследнейВерсии(Ссылка);
		
	Иначе
		
		Ссылка = ОбщегоНазначения.МенеджерОбъектаПоСсылке(Ссылка).ПолучитьСсылку(Объект.ПолучитьСсылкуНового().УникальныйИдентификатор());
		НомерПоследнейВерсии = 0;
		
	КонецЕсли;
	
	СведенияОВерсииОбъекта.Вставить("Объект", Ссылка);
	СведенияОВерсииОбъекта.Вставить("НомерВерсии", Число(НомерПоследнейВерсии) + 1);
	СведенияОВерсииОбъекта.ТипВерсииОбъекта = Перечисления.ТипыВерсийОбъекта[СведенияОВерсииОбъекта.ТипВерсииОбъекта];
	
	Если Не ЗначениеЗаполнено(СведенияОВерсииОбъекта.АвторВерсии) Тогда
		СведенияОВерсииОбъекта.АвторВерсии = Пользователи.АвторизованныйПользователь();
	КонецЕсли;
	
	СоздатьВерсиюОбъекта(Объект, СведенияОВерсииОбъекта, Ложь);
	
КонецПроцедуры

// Устанавливает признак игнорирования версии объекта
//
// Параметры:
//	Ссылка - Ссылка на игнорируемый объект
//	НомерВерсии - Число - Номер версии игнорируемого объекта
//	Игнорировать - Булево Признак игнорирования версии
//
Процедура ИгнорироватьВерсиюОбъекта(Ссылка, НомерВерсии, Игнорировать) Экспорт
	
	Если Не ПривилегированныйРежим() Тогда
		ВыполнитьПроверкуПравДоступа("Изменение", Ссылка.Метаданные());
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = РегистрыСведений.ВерсииОбъектов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(Ссылка);
	НаборЗаписей.Отбор.НомерВерсии.Установить(НомерВерсии);
	НаборЗаписей.Прочитать();
	
	Запись = НаборЗаписей[0];
	
	Запись.ВерсияПроигнорирована = Игнорировать;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

// Возвращает количество коллизий или непринятых объектов
//
// Параметры:
//	УзлыОбмена - ПланОбменаСсылка, Массив, СписокЗначений, Неопределено - отбор для получения количества коллизий
//	ЭтоКоличествоКоллизий - Булево - Если Истина, то возвращает количество коллизий, иначе количество непринятых
//	ПоказыватьПроигнорированные - Булево - Признак необходимости учета проигнорированных
//	УзелИнформационнойБазы - ПланОбменаСсылка - Количество по конкретному узлу
//	Период - Стандартный период - Количество за дату
//	СтрокаПоиска - Строка - Количество объектов, содержащих в комментарии СтрокаПоиска
//
Функция КоличествоКоллизийИлиНепринятых(УзлыОбмена = Неопределено, ЭтоКоличествоКоллизий = Неопределено,
	ПоказыватьПроигнорированные = Ложь, Период = Неопределено, СтрокаПоиска = "") Экспорт
	
	Количество = 0;
	
	Если Не ЕстьПравоНаЧтениеВерсийОбъектов() Тогда
		Возврат Количество;
	КонецЕсли;
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КОЛИЧЕСТВО(ВерсииОбъектов.Объект) КАК Количество
	|ИЗ
	|	РегистрСведений.ВерсииОбъектов КАК ВерсииОбъектов
	|ГДЕ
	|	ВерсииОбъектов.ВерсияПроигнорирована <> &ОтборПоПропущенным
	|	И (ВерсииОбъектов.ТипВерсииОбъекта В (&ТипыВерсий))
	|	[ОтборПоУзлу]
	|	[ОтборПоПериоду]
	|	[ОтборПоПричине]";
	
	Запрос = Новый Запрос;
	
	ОтборПоПропущенным = ?(ПоказыватьПроигнорированные, Неопределено, Истина);
	Запрос.УстановитьПараметр("ОтборПоПропущенным", ОтборПоПропущенным);
	
	Если УзлыОбмена = Неопределено Тогда
		СтрокаОтбора = "";
	ИначеЕсли ПланыОбмена.ТипВсеСсылки().СодержитТип(ТипЗнч(УзлыОбмена)) Тогда
		СтрокаОтбора = "И ВерсииОбъектов.АвторВерсии = &УзлыОбмена";
		Запрос.УстановитьПараметр("УзлыОбмена", УзлыОбмена);
	Иначе
		СтрокаОтбора = "И ВерсииОбъектов.АвторВерсии В (&УзлыОбмена)";
		Запрос.УстановитьПараметр("УзлыОбмена", УзлыОбмена);
	КонецЕсли;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ОтборПоУзлу]", СтрокаОтбора);
	
	Если ЗначениеЗаполнено(Период) Тогда
		
		СтрокаОтбора = "И (ВерсииОбъектов.ДатаВерсии >= &ДатаНачала
		| И ВерсииОбъектов.ДатаВерсии <= &ДатаОкончания)";
		Запрос.УстановитьПараметр("ДатаНачала", Период.ДатаНачала);
		Запрос.УстановитьПараметр("ДатаОкончания", Период.ДатаОкончания);
		
	Иначе
		
		СтрокаОтбора = "";
		
	КонецЕсли;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ОтборПоПериоду]", СтрокаОтбора);
	
	ТипыВерсий = Новый СписокЗначений;
	Если ЗначениеЗаполнено(ЭтоКоличествоКоллизий) Тогда
		
		Если ЭтоКоличествоКоллизий Тогда
			
			ТипыВерсий.Добавить(Перечисления.ТипыВерсийОбъекта.ПринятыеДанныеПоКоллизии);
			ТипыВерсий.Добавить(Перечисления.ТипыВерсийОбъекта.НепринятыеДанныеПоКоллизии);
			
			СтрокаОтбора = "";
			
		Иначе
			
			ТипыВерсий.Добавить(Перечисления.ТипыВерсийОбъекта.НепринятыеДанныеПоДатеЗапретаОбъектСуществует);
			ТипыВерсий.Добавить(Перечисления.ТипыВерсийОбъекта.НепринятыеДанныеПоДатеЗапретаОбъектНеСуществует);
			
			Если ЗначениеЗаполнено(СтрокаПоиска) Тогда
				
				СтрокаОтбора = "И ВерсииОбъектов.Комментарий ПОДОБНО &Комментарий";
				Запрос.УстановитьПараметр("Комментарий", "%" + СтрокаПоиска + "%");
				
			Иначе
				
				СтрокаОтбора = "";
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе // Отбор по комментарию не поддерживается
		
		ТипыВерсий.Добавить(Перечисления.ТипыВерсийОбъекта.ПринятыеДанныеПоКоллизии);
		ТипыВерсий.Добавить(Перечисления.ТипыВерсийОбъекта.НепринятыеДанныеПоКоллизии);
		ТипыВерсий.Добавить(Перечисления.ТипыВерсийОбъекта.НепринятыеДанныеПоДатеЗапретаОбъектСуществует);
		ТипыВерсий.Добавить(Перечисления.ТипыВерсийОбъекта.НепринятыеДанныеПоДатеЗапретаОбъектНеСуществует);
		
	КонецЕсли;
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ОтборПоПричине]", СтрокаОтбора);
	Запрос.УстановитьПараметр("ТипыВерсий", ТипыВерсий);
	
	Запрос.Текст = ТекстЗапроса;
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Количество = Выборка.Количество;
	КонецЕсли;
	
	Возврат Количество;
	
КонецФункции

Функция ОбъектИзДвоичныхДанных(Запись)
	
	ДвоичныеДанные = Запись.ВерсияОбъекта.Получить();
	
	ЧтениеXML = Новый ЧтениеFastInfoSet;
	ЧтениеXML.УстановитьДвоичныеДанные(ДвоичныеДанные);
	Если ЧтениеXML.Прочитать() Тогда
		Если ВозможностьЧтенияXML(ЧтениеXML) Тогда
			Объект = ПрочитатьXML(ЧтениеXML);
			ЧтениеXML.Закрыть();
			Возврат Объект;
		Иначе
			ЧтениеXML.Закрыть();
			ВызватьИсключение НСтр("ru = 'Ошибка при восстановлении объекта'");
		КонецЕсли;
	Иначе
		ЧтениеXML.Закрыть();
		ВызватьИсключение НСтр("ru = 'Ошибка чтения данных'");
	КонецЕсли;

КонецФункции

Функция ЗаписьОВерсииОбъекта(СсылкаНаОбъект, НомерВерсии)
	
	НаборЗаписей = РегистрыСведений.ВерсииОбъектов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(СсылкаНаОбъект);
	НаборЗаписей.Отбор.НомерВерсии.Установить(НомерВерсии);
	НаборЗаписей.Прочитать();
	
	Возврат НаборЗаписей;
	
КонецФункции

// Возвращает дату последней коллизии или дату последнего запрета загрузки
// Параметры:
//	ПолучитьДатуПоследнейКоллизии - Булево - Если Истина, то возвращает дату последней коллизии,
//	если Ложь, то возвращает дату последнего запрета загрузки
Функция ДатаПоследнейКоллизииИлиЗапретаЗагрузки(ПолучитьДатуПоследнейКоллизии) Экспорт
	
	ДатаВерсии = Дата(1,1,1);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	МАКСИМУМ(ВерсииОбъектов.ДатаВерсии) КАК ДатаВерсии
	|ИЗ
	|	РегистрСведений.ВерсииОбъектов КАК ВерсииОбъектов
	|ГДЕ
	|	НЕ(ВерсииОбъектов.ТипВерсииОбъекта <> &ТипВерсииОбъекта1
	|				И ВерсииОбъектов.ТипВерсииОбъекта <> &ТипВерсииОбъекта2)
	|	И ВерсииОбъектов.ВерсияПроигнорирована = ЛОЖЬ";
	
	Если ПолучитьДатуПоследнейКоллизии Тогда
		
		Запрос.УстановитьПараметр("ТипВерсииОбъекта1", Перечисления.ТипыВерсийОбъекта.ПринятыеДанныеПоКоллизии);
		Запрос.УстановитьПараметр("ТипВерсииОбъекта2", Перечисления.ТипыВерсийОбъекта.НепринятыеДанныеПоКоллизии);
		
		
	Иначе
		
		Запрос.УстановитьПараметр("ТипВерсииОбъекта1", Перечисления.ТипыВерсийОбъекта.НепринятыеДанныеПоДатеЗапретаОбъектСуществует);
		Запрос.УстановитьПараметр("ТипВерсииОбъекта2", Перечисления.ТипыВерсийОбъекта.НепринятыеДанныеПоДатеЗапретаОбъектНеСуществует);
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	
	Если Не Результат.Пустой() Тогда
		
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		ДатаВерсии = Выборка.ДатаВерсии;
		
	КонецЕсли;
	
	Возврат ДатаВерсии;
	
КонецФункции

Процедура ЗаписатьВерсиюПоверхПредыдущей(Ссылка, Объект, НомерВерсии, СведенияОВерсииОбъекта);
	
	УстановитьПривилегированныйРежим(Истина);
	
	НаборЗаписей = ЗаписьОВерсииОбъекта(Ссылка, НомерВерсии);
	
	Если НаборЗаписей.Количество() = 0 Тогда
		
		ДанныеВерсии = Новый Структура;
		ДанныеВерсии.Вставить("Объект", Ссылка);
		ДанныеВерсии.Вставить("НомерВерсии", Число(НомерВерсии) + 1);
		ДанныеВерсии.Вставить("АвторВерсии", СведенияОВерсииОбъекта.АвторВерсии);
		ДанныеВерсии.Вставить("Комментарий", НСтр("ru = 'Версия создана при синхронизации данных.'"));
		ДанныеВерсии.Вставить("ТипВерсииОбъекта", Перечисления.ТипыВерсийОбъекта[СведенияОВерсииОбъекта.ТипВерсииОбъекта]);
		
		СоздатьВерсиюОбъекта(Объект, ДанныеВерсии, Ложь);
		
	Иначе
		
		ЗаписьОВерсии = НаборЗаписей[0];
		
		ЗаписьXML = Новый ЗаписьFastInfoset;
		ЗаписьXML.УстановитьДвоичныеДанные();
		ЗаписьXML.ЗаписатьОбъявлениеXML();
		ЗаписатьXML(ЗаписьXML, Объект, НазначениеТипаXML.Явное);
		ДвоичныеДанные = ЗаписьXML.Закрыть();
		ХранилищеДанных = Новый ХранилищеЗначения(ДвоичныеДанные, Новый СжатиеДанных(9));
		
		ЗаписьОВерсии.ДатаВерсии	= ТекущаяДатаСеанса();
		ЗаписьОВерсии.ВерсияОбъекта = ХранилищеДанных;
		
		НаборЗаписей.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики условных вызовов в эту подсистему

// Обработчик перехода на версию объекта
//
// Параметры:
//	ОбъектСсылка - Ссылка - Ссылка на объект, для которого имеется версия
//	НомерВерсииДляПерехода - Число - Номер версии, на которую необходимо выполнить переход
//	НомерИгнорируемойВерсии - Число - Номер версии, на которую необходимо проигнорировать
//	ПропуститьПроверкуЗапретаИзменения - Булево - Признак пропуска проверки даты запрета загрузки
//
Процедура ПриПереходеНаВерсиюОбъекта(СсылкаНаОбъект, Знач НомерВерсии, ПринятьВерсию, ПропуститьПроверкуЗапретаИзменения = Ложь) Экспорт
	
	Если Не ПривилегированныйРежим() Тогда
		ВыполнитьПроверкуПравДоступа("Изменение", СсылкаНаОбъект.Метаданные());
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	ЗаписатьОбъект = Ложь;
	
	НаборЗаписей = ЗаписьОВерсииОбъекта(СсылкаНаОбъект, НомерВерсии);
	Запись = НаборЗаписей[0];
	
	Если ПринятьВерсию
		И (Запись.ТипВерсииОбъекта = Перечисления.ТипыВерсийОбъекта.НепринятыеДанныеПоКоллизии
		Или Запись.ТипВерсииОбъекта = Перечисления.ТипыВерсийОбъекта.НепринятыеДанныеПоДатеЗапретаОбъектСуществует
		Или Запись.ТипВерсииОбъекта = Перечисления.ТипыВерсийОбъекта.НепринятыеДанныеПоДатеЗапретаОбъектНеСуществует) Тогда
		
		Объект = ОбъектИзДвоичныхДанных(Запись);
		ДатаВерсии = Запись.ДатаВерсии;
		ЗаписатьОбъект = Истина;
		
	ИначеЕсли Не ПринятьВерсию И Запись.ТипВерсииОбъекта = Перечисления.ТипыВерсийОбъекта.ПринятыеДанныеПоКоллизии Тогда
		
		НомерВерсии = НомерВерсии - 1;
		
		Если НомерВерсии <> 0 Тогда
			
			ПредыдущаяЗапись = ЗаписьОВерсииОбъекта(СсылкаНаОбъект, НомерВерсии)[0];
			Объект = ОбъектИзДвоичныхДанных(ПредыдущаяЗапись);
			ДатаВерсии = ПредыдущаяЗапись.ДатаВерсии;
			ЗаписатьОбъект = Истина;
			
		КонецЕсли;
		
				
	Иначе
		
		ЗаписатьОбъект = Ложь;
		
	КонецЕсли;
	
	Если ЗаписатьОбъект Тогда
		
		Объект.ДополнительныеСвойства.Вставить("ВерсионированиеОбъектовКомментарийКВерсии",
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Выполнен переход к версии №%1 от %2'"),
			Строка(НомерВерсии),
			Формат(ДатаВерсии, "ДЛФ=DT")));
		
		Если ПропуститьПроверкуЗапретаИзменения Тогда
			Объект.ДополнительныеСвойства.Вставить("ПропуститьПроверкуЗапретаИзменения");
		КонецЕсли;
		
		Объект.Записать();
		
		Запись.ВерсияПроигнорирована = Истина;
	
		НаборЗаписей.Записать();
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Возвращает номер последней записанной версии объекта.
//
// Параметры:
//  Ссылка - ЛюбаяСсылка - ссылка на объект информационной базы.
//
// Возвращаемое значение:
//  Число - номер версии объекта.
//
Функция НомерПоследнейВерсии(Ссылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ЕСТЬNULL(МАКСИМУМ(ВерсииОбъектов.НомерВерсии), 0) КАК НомерВерсии
	|ИЗ
	|	РегистрСведений.ВерсииОбъектов КАК ВерсииОбъектов
	|ГДЕ
	|	ВерсииОбъектов.Объект = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.НомерВерсии;
	
КонецФункции

// Возвращает полные имена объектов метаданных, для которых подключен механизм версионирования.
//
// Возвращаемое значение:
//  Массив строк - имена объектов метаданных.
//
Функция ПолучитьВерсионируемыеОбъекты()
	
	Результат = Новый Массив;
	
	Для Каждого ЭлементМетаданных Из Метаданные.Справочники Цикл
		Если Метаданные.ОбщиеКоманды.ИсторияИзменений.ТипПараметраКоманды.СодержитТип(
					Тип("СправочникСсылка."+ЭлементМетаданных.Имя)) Тогда
			Результат.Добавить(ЭлементМетаданных.ПолноеИмя());
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ЭлементМетаданных Из Метаданные.Документы Цикл
		Если Метаданные.ОбщиеКоманды.ИсторияИзменений.ТипПараметраКоманды.СодержитТип(
					Тип("ДокументСсылка."+ЭлементМетаданных.Имя)) Тогда
			Результат.Добавить(ЭлементМетаданных.ПолноеИмя());
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Возвращает вариант версионирования для указанного объекта метаданных.
//
// Параметры
//  ПолноеИмяОбъекта - Строка - полный путь к объекту метаданных. Например, "Справочник.Номенклатура".
//
// Возвращаемое значение:
//  Перечисление.ВариантыВерсионированияОбъектов.
//
Функция ВариантВерсионированияОбъекта(ПолноеИмяОбъекта) Экспорт
	
	Возврат ПолучитьФункциональнуюОпцию("ВариантыВерсионированияОбъектов",
		Новый Структура("ТипВерсионируемогоОбъекта", ПолноеИмяОбъекта));
		
КонецФункции	

// Получает объект по его сериализованному XML представлению.
//
// Параметры
//  АдресВоВременномХранилище - Строка - адрес двоичных данных во временном хранилище.
//  ТекстСообщенияОбОшибке    - Строка - (возвращаемый параметр) текст ошибки, если восстановить объект не удалось.
//
// Возвращаемое значение - Объект или Неопределено.
//
Функция ВосстановитьОбъектПоXML(знач АдресВоВременномХранилище = "", ТекстСообщенияОбОшибке = "") Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	
	ЧтениеFastInfoSet = Новый ЧтениеFastInfoSet;
	ЧтениеFastInfoSet.УстановитьДвоичныеДанные(ДвоичныеДанные);
	
	Попытка
		Объект = ПрочитатьXML(ЧтениеFastInfoSet);
	Исключение
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Версионирование'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ТекстСообщенияОбОшибке = НСтр("ru = 'Не удалось перейти на выбранную версию.
											|Возможная причина: версия объекта была записана в другой версии программы.
											|Техническая информация об ошибке: %1'");
		ТекстСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщенияОбОшибке, КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат Объект;
	
КонецФункции

// Возвращает структуру, содержащую версию объекта и дополнительную информацию.
//
// Параметры:
//  Ссылка      - Ссылка - ссылка версионируемый объект;
//  НомерВерсии - Число  - номер версии объекта.
//
// Возвращаемое значение - Структура:
//                          ВерсияОбъекта - ДвоичныеДанные - сохраненная версия объекта информационной базы;
//                          АвторВерсии   - Справочник.Пользователи, Справочник.ВнешниеПользователи - 
//                                          пользователь, записавший версию объекта.
//                          ДатаВерсии    - Дата - дата записи версии объекта.
// 
// Примечание:
//  Функция может вызвать исключение, если запись не содержит данных.
//  Функцию требуется вызвать в привилегированном режиме.
//
Функция СведенияОВерсииОбъекта(знач Ссылка, знач НомерВерсии) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ВерсииОбъектов.ВерсияОбъекта КАК ВерсияОбъекта,
	               |	ВерсииОбъектов.АвторВерсии КАК АвторВерсии,
	               |	ВерсииОбъектов.ДатаВерсии КАК ДатаВерсии,
	               |	ВерсииОбъектов.Комментарий КАК Комментарий
	               |ИЗ
	               |	РегистрСведений.ВерсииОбъектов КАК ВерсииОбъектов
	               |ГДЕ
	               |	ВерсииОбъектов.Объект = &Ссылка
	               |	И ВерсииОбъектов.НомерВерсии = &НомерВерсии";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("НомерВерсии", Число(НомерВерсии));
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ВерсияОбъекта = Неопределено;
	Если Выборка.Следующий() Тогда
		ВерсияОбъекта = Выборка.ВерсияОбъекта.Получить();
	КонецЕсли;
	
	Если ВерсияОбъекта = Неопределено Тогда
		ВызватьИсключение НСтр("ru = 'Не удалось получить предыдущую версию объекта.'");
	КонецЕсли;
	
	Возврат Новый Структура("ВерсияОбъекта, АвторВерсии, ДатаВерсии, Комментарий",
	                        ВерсияОбъекта,
	                        Выборка.АвторВерсии,
	                        Выборка.ДатаВерсии,
							Выборка.Комментарий);
		
КонецФункции

// Проверяет настройки версионирования по переданному объекту и
// и возвращает вариант версионирования. Если по объекту не настроено
// версионирование, то он версионируется в соответствии с правилами
// версионирования "по умолчанию".
//
Функция ОбъектВерсионируется(знач Источник, НомерПоследнейВерсии) Экспорт
	
	// Проверяем, что подсистема версионирования включена
	Если НЕ ПолучитьФункциональнуюОпцию("ИспользоватьВерсионированиеОбъектов") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ВариантВерсионирования = ВариантВерсионированияОбъекта(Источник.Метаданные().ПолноеИмя());
	Если ВариантВерсионирования = Ложь Тогда
		ВариантВерсионирования = Перечисления.ВариантыВерсионированияОбъектов.НеВерсионировать;
	КонецЕсли;
	
	НомерПоследнейВерсии = НомерПоследнейВерсии(Источник.Ссылка);
	
	Возврат Не (ВариантВерсионирования = Перечисления.ВариантыВерсионированияОбъектов.НеВерсионировать 
				Или ВариантВерсионирования = Перечисления.ВариантыВерсионированияОбъектов.ВерсионироватьПриПроведении
					И НомерПоследнейВерсии = 0
					И Не Источник.Проведен);
	
КонецФункции

// Добавляет в дополнительные свойства сведения для записи версии объекта,
// полученного при обмене данными.
//
Процедура ДобавлениеСведенийОВерсииОбъектаПриОбменеДанными(Объект, АвторВерсии)
	
	Если ТипЗнч(Объект) <> Тип("УдалениеОбъекта") И ОбщегоНазначения.ЭтоОбъектСсылочногоТипа(Объект.Метаданные()) Тогда
		
		СведенияОВерсииОбъекта = Новый Структура;
		СведенияОВерсииОбъекта.Вставить("АвторВерсии", АвторВерсии);
		СведенияОВерсииОбъекта.Вставить("ТипВерсииОбъекта", "ИзмененоПользователем");
		СведенияОВерсииОбъекта.Вставить("Комментарий", НСтр("ru = 'Версия получена при синхронизации данных.'"));
		СведенияОВерсииОбъекта.Вставить("ОтложеннаяОбработка", Ложь);
		Объект.ДополнительныеСвойства.Вставить("СведенияОВерсииОбъекта", Новый ФиксированнаяСтруктура(СведенияОВерсииОбъекта));
		
	КонецЕсли;
	
КонецПроцедуры

// Проверяет наличие у пользователя прав на чтение информации о версиях
//
Функция ЕстьПравоНаЧтениеВерсийОбъектов() Экспорт
	Возврат Пользователи.РолиДоступны("ЧтениеВерсийОбъектов, ЧтениеИнформацииОВерсияхОбъектов");
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработчики служебных событий подсистем БСП

// Заполняет массив списком имен объектов метаданных, данные которых могут содержать ссылки на различные объекты метаданных,
// но при этом эти ссылки не должны учитываться в бизнес-логике приложения.
//
// Параметры:
//  Массив       - массив строк, например, "РегистрСведений.ВерсииОбъектов".
//
Процедура ПриДобавленииИсключенийПоискаСсылок(Массив) Экспорт
	
	Массив.Добавить(Метаданные.РегистрыСведений.ВерсииОбъектов.ПолноеИмя());
	
КонецПроцедуры

// Процедура является обработчиком одноименного события, возникающего при обмене данными в распределенной информационной базе.
//
// Параметры:
// см. описание обработчика события ПриПолученииДанныхОтПодчиненного() в синтаксис-помощнике.
// 
Процедура ПриПолученииДанныхОтПодчиненного(ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад, Отправитель) Экспорт
	
	ДобавлениеСведенийОВерсииОбъектаПриОбменеДанными(ЭлементДанных, Отправитель);
	
КонецПроцедуры

// Процедура является обработчиком одноименного события, возникающего при обмене данными в распределенной информационной базе.
//
// Параметры:
// см. описание обработчика события ПриПолученииДанныхОтГлавного() в синтаксис-помощнике.
// 
Процедура ПриПолученииДанныхОтГлавного(ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад, Отправитель) Экспорт
	
	ДобавлениеСведенийОВерсииОбъектаПриОбменеДанными(ЭлементДанных, Отправитель);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Функции для получения отчета по объекту

// Возвращает сериализованный объект в виде двоичных данных.
//
// Параметры:
//  Объект - Любой - сериализуемый объект.
//
// Возвращаемое значение:
//  ДвоичныеДанные - сериализованный объект.
Функция СериализоватьОбъект(Объект)
	
	ЗаписьXML = Новый ЗаписьFastInfoset;
	ЗаписьXML.УстановитьДвоичныеДанные();
	ЗаписьXML.ЗаписатьОбъявлениеXML();
	
	ЗаписатьXML(ЗаписьXML, Объект, НазначениеТипаXML.Явное);
	
	Возврат ЗаписьXML.Закрыть();

КонецФункции

// Процедура считывает данные XML из файла и заполняет структуры данных
//
// Возвращаемое значение:
// Структура, содержащая два соответствия: ТабличныеЧасти, Реквизиты
// Структура хранения данных:
// Соответствие ТабличныеЧасти, которое содержит в себе значения табличных частей
// формат: 
//          СоответствиеИмя1 -> ТаблицаЗначений1
//                            |      |     ... |
//                            Поле1  Поле2     ПолеM1
//
//          СоответствиеИмя2 -> ТаблицаЗначений2
//                            |      |     ... |
//                            Поле1  Поле2     ПолеM2
//
//
//          СоответствиеИмяN -> ТаблицаЗначенийN
//                            |      |     ... |
//                            Поле1  Поле2     ПолеM3
//
// Соответствие ЗначенияРеквизитов
//          ИмяРеквизита1 -> Значение1
//          ИмяРеквизита2 -> Значение2
//          ...
//          ИмяРеквизитаN -> ЗначениеN
//
Функция РазборПредставленияОбъектаXML(ДвоичныеДанные, Ссылка)
	
	// содержит имя метаданного измененного объекта
	Перем ИмяОбъекта;
	
	// Содержит положение маркера в дереве XML.
	// Требуется для идентификации текущего элемента.
	Перем УровеньЧтения;
	
	// Содержат значения реквизитов справочников / документов
	ЗначенияРеквизитов = Новый ТаблицаЗначений;
	
	ЗначенияРеквизитов.Колонки.Добавить("НаименованиеРеквизита");
	ЗначенияРеквизитов.Колонки.Добавить("ЗначениеРеквизита");
	ЗначенияРеквизитов.Колонки.Добавить("ТипРеквизита");
	ЗначенияРеквизитов.Колонки.Добавить("Тип");
	
	ТабличныеЧасти = Новый Соответствие;
	
	ЧтениеXML = Новый ЧтениеFastInfoSet;
	
	ЧтениеXML.УстановитьДвоичныеДанные(ДвоичныеДанные);
	
	// уровень позиции маркера в иерархии XML:
	// 0 - уровень не задан
	// 1 - первый элемент (имя объекта)
	// 2 - описание реквизита или табличной части
	// 3 - описание строки табличной части
	// 4 - описание поля строки табличной части
	УровеньЧтения = 0;
	
	МетаданныеОбъекта = Ссылка.Метаданные();
	ТабличныеЧастиМТД = МетаданныеОбъекта.ТабличныеЧасти;
	
	ТипЗначения = "";
	
	ТипЗначенияПоляТЧ = "";
	
	// основной цикл разбора по XML
	Пока ЧтениеXML.Прочитать() Цикл
		
		Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			УровеньЧтения = УровеньЧтения + 1;
			Если УровеньЧтения = 1 Тогда // указатель на первом элементе XML - корень XML
				ИмяОбъекта = ЧтениеXML.Имя;
			ИначеЕсли УровеньЧтения = 2 Тогда // указатель на втором уровне - это реквизит или имя табличной части
				ИмяРеквизита = ЧтениеXML.Имя;
				
				// любой реквизит "может оказаться" табличной частью, поэтому на всякий случай его запомним.
				ИмяТабличнойЧасти = ИмяРеквизита;
				
				НовоеЗР = ЗначенияРеквизитов.Добавить();
				НовоеЗР.НаименованиеРеквизита = ИмяРеквизита;
				
				Если ЧтениеXML.КоличествоАтрибутов() > 0 Тогда
					Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
						Если ЧтениеXML.ТипУзла = ТипУзлаXML.Атрибут 
						   И ЧтениеXML.Имя = "xsi:type" Тогда
							НовоеЗР.ТипРеквизита = ЧтениеXML.Значение;
							
							XMLТип = ЧтениеXML.Значение;
							
							Если Лев(XMLТип, 3) = "xs:" Тогда
								НовоеЗР.Тип = ИзXMLТипа(Новый ТипДанныхXML(Прав(XMLТип, СтрДлина(XMLТип)-3), "http://www.w3.org/2001/XMLSchema"));
							Иначе
								НовоеЗР.Тип = ИзXMLТипа(Новый ТипДанныхXML(XMLТип, ""));
							КонецЕсли;
							
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(НовоеЗР.Тип) Тогда
					
					ОписаниеРеквизита = МетаданныеОбъекта.Реквизиты.Найти(НовоеЗР.НаименованиеРеквизита);
					
					Если ОписаниеРеквизита = Неопределено Тогда
						
						НаименованиеРеквизита = ПолучитьПредставлениеРеквизитаНаЯзыке(НовоеЗР.НаименованиеРеквизита);
						
						Если ОбщегоНазначения.ЭтоСтандартныйРеквизит(МетаданныеОбъекта.СтандартныеРеквизиты, НаименованиеРеквизита) Тогда
							
							ОписаниеРеквизита = МетаданныеОбъекта.СтандартныеРеквизиты[НаименованиеРеквизита];
							
						КонецЕсли;
						
					КонецЕсли;
					
					Если ОписаниеРеквизита <> Неопределено
						И ОписаниеРеквизита.Тип.Типы().Количество() = 1 Тогда
						НовоеЗР.Тип = ОписаниеРеквизита.Тип.Типы()[0];
					КонецЕсли;
					
				КонецЕсли;
				
			ИначеЕсли (УровеньЧтения = 3) и (ЧтениеXML.Имя = "Row") Тогда // указатель на поле табличной части
				Если ТабличныеЧасти[ИмяТабличнойЧасти] = Неопределено Тогда
					ТабличныеЧасти.Вставить(ИмяТабличнойЧасти, Новый ТаблицаЗначений);
				КонецЕсли;
				
				ТабличныеЧасти[ИмяТабличнойЧасти].Добавить();
			ИначеЕсли УровеньЧтения = 4 Тогда // указатель на поле табличной части
				
				ТипЗначенияПоляТЧ = "";
				
				ИмяПоляТЧ = ЧтениеXML.Имя; // 
				Таблица   = ТабличныеЧасти[ИмяТабличнойЧасти];
				Если Таблица.Колонки.Найти(ИмяПоляТЧ)= Неопределено Тогда
					Таблица.Колонки.Добавить(ИмяПоляТЧ);
				КонецЕсли;
				
				Если ЧтениеXML.КоличествоАтрибутов() > 0 Тогда
					Пока ЧтениеXML.ПрочитатьАтрибут() Цикл
						Если ЧтениеXML.ТипУзла = ТипУзлаXML.Атрибут 
						   И ЧтениеXML.Имя = "xsi:type" Тогда
							XMLТип = ЧтениеXML.Значение;
							
							Если Лев(XMLТип, 3) = "xs:" Тогда
								ТипЗначенияПоляТЧ = ИзXMLТипа(Новый ТипДанныхXML(Прав(XMLТип, СтрДлина(XMLТип)-3), "http://www.w3.org/2001/XMLSchema"));
							Иначе
								ТипЗначенияПоляТЧ = ИзXMLТипа(Новый ТипДанныхXML(XMLТип, ""));
							КонецЕсли;
							
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
			КонецЕсли;
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			УровеньЧтения = УровеньЧтения - 1;
			ТипЗначения = "";
		ИначеЕсли ЧтениеXML.ТипУзла = ТипУзлаXML.Текст Тогда
			Если (УровеньЧтения = 2) Тогда // значение реквизита
				
				НовоеЗР.ЗначениеРеквизита = ?(ЗначениеЗаполнено(НовоеЗР.Тип), XMLЗначение(НовоеЗР.Тип, ЧтениеXML.Значение), ЧтениеXML.Значение);
				
			ИначеЕсли (УровеньЧтения = 4) Тогда // значение реквизита
				ПоследняяСтрока = ТабличныеЧасти[ИмяТабличнойЧасти].Получить(ТабличныеЧасти[ИмяТабличнойЧасти].Количество()-1);
				
				Если ТипЗначенияПоляТЧ = "" Тогда
					ОписаниеРТЧ = Неопределено;
					Если ТабличныеЧастиМТД.Найти(ИмяТабличнойЧасти) <> Неопределено Тогда
						ОписаниеРТЧ = ТабличныеЧастиМТД[ИмяТабличнойЧасти].Реквизиты.Найти(ИмяПоляТЧ);
						
						Если ОписаниеРТЧ <> Неопределено
						   И ОписаниеРТЧ.Тип.Типы().Количество() = 1 Тогда
							ТипЗначенияПоляТЧ = ОписаниеРТЧ.Тип.Типы()[0];
						КонецЕсли;
					КонецЕсли;					
				КонецЕсли;
				
				ПоследняяСтрока[ИмяПоляТЧ] = ?(ЗначениеЗаполнено(ТипЗначенияПоляТЧ), XMLЗначение(ТипЗначенияПоляТЧ, ЧтениеXML.Значение), ЧтениеXML.Значение);
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// 2-й этап: из списка реквизитов исключаем табличные части
	Для Каждого Элемент Из ТабличныеЧасти Цикл
		ЗначенияРеквизитов.Удалить(ЗначенияРеквизитов.Найти(Элемент.Ключ));
	КонецЦикла;
	//ТабличныеЧастиМТД
	Для Каждого ЭлементСоответствия Из ТабличныеЧасти Цикл
		Таблица = ЭлементСоответствия.Значение;
		Если Таблица.Колонки.Количество() = 0 Тогда
			ТаблицаМТД = ТабличныеЧастиМТД.Найти(ЭлементСоответствия.Ключ);
			Если ТаблицаМТД <> Неопределено Тогда
				Для Каждого ОписаниеКолонки Из ТаблицаМТД.Реквизиты Цикл
					Если Таблица.Колонки.Найти(ОписаниеКолонки.Имя)= Неопределено Тогда
						Таблица.Колонки.Добавить(ОписаниеКолонки.Имя);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Результат = Новый Структура;
	Результат.Вставить("Реквизиты", ЗначенияРеквизитов);
	Результат.Вставить("ТабличныеЧасти", ТабличныеЧасти);
	
	Возврат Результат;
	
КонецФункции

// Получает представление наименования системного реквизита
//
Функция ПолучитьПредставлениеРеквизитаНаЯзыке(знач ИмяРеквизита)
	
	Если      ИмяРеквизита = "Number" Тогда
		Возврат НСтр("ru = 'Номер'; en='Number'");
	ИначеЕсли ИмяРеквизита = "Name" Тогда
		Возврат НСтр("ru = 'Наименование'; en='Name'");
	ИначеЕсли ИмяРеквизита = "Code" Тогда
		Возврат НСтр("ru = 'Код'; en='Code'");
	ИначеЕсли ИмяРеквизита = "IsFolder" Тогда
		Возврат НСтр("ru = 'ЭтоГруппа'; en='Is folder'");
	ИначеЕсли ИмяРеквизита = "Description" Тогда
		Возврат НСтр("ru = 'Наименование'; en='Description'");
	ИначеЕсли ИмяРеквизита = "Date" Тогда
		Возврат НСтр("ru = 'Дата'; en='Date'");
	ИначеЕсли ИмяРеквизита = "Posted" Тогда
		Возврат НСтр("ru = 'Проведен'; en='Posted'");
	ИначеЕсли ИмяРеквизита = "DeletionMark" Тогда
		Возврат НСтр("ru = 'ПометкаУдаления'; en='Deletion mark'");
	ИначеЕсли ИмяРеквизита = "Ref" Тогда
		Возврат НСтр("ru = 'Ссылка'; en='Ref'");
	ИначеЕсли ИмяРеквизита = "Parent" Тогда
		Возврат НСтр("ru = 'Родитель'; en='Parent'");
	ИначеЕсли ИмяРеквизита = "Owner" Тогда
		Возврат НСтр("ru = 'Владелец'; en='Owner'");
	Иначе
		Возврат ИмяРеквизита;
	КонецЕсли;
	
КонецФункции

Процедура СформироватьОтчетПоПереданнойВерсии(ТЧОтчета, СериализованныйXML, СсылкаНаОбъект)
	
	Если СсылкаНаОбъект.Метаданные().Макеты.Найти("МакетОбъекта") <> Неопределено Тогда
		Макет = ОбщегоНазначения.МенеджерОбъектаПоСсылке(СсылкаНаОбъект).ПолучитьМакет("МакетОбъекта");
	Иначе
		Макет = Неопределено;
	КонецЕсли;
	
	Если Макет = Неопределено Тогда
		
		ВерсияОбъекта = РазборПредставленияОбъектаXML(СериализованныйXML, СсылкаНаОбъект);
		ВерсияОбъекта.Вставить("ИмяОбъекта",     Строка(СсылкаНаОбъект));
		ВерсияОбъекта.Вставить("АвторИзменения", "");
		ВерсияОбъекта.Вставить("ДатаИзменения",  ТекущаяДатаСеанса());
		
		Секция = ТЧОтчета.ПолучитьОбласть("R2");
		ВывестиТекстВОтчет(ТЧОтчета, Секция, "R2C2", СсылкаНаОбъект.Метаданные().Синоним,,,16, Истина);
		
		///////////////////////////////////////////////////////////////////////////////
		// вывод списка изменившихся реквизитов
		
		ТЧОтчета.Область("C2").ШиринаКолонки = 30;
		ТЧОтчета.Область("C3").ШиринаКолонки = 50;
		
		ЧислоВыведенныхСтрок = ВывестиРеквизитыПоРазобранномуОбъекту(ТЧОтчета, ВерсияОбъекта, СсылкаНаОбъект);
		ЧислоВыведенныхСтрок = ВывестиТабличныеЧастиПоРазобранномуОбъекту(ТЧОтчета, ВерсияОбъекта, ЧислоВыведенныхСтрок+7, СсылкаНаОбъект);
	Иначе
		ФормированиеПоСтандартномуМакету(ТЧОтчета,
										 Макет,
										 СсылкаНаОбъект.ПолучитьОбъект(),
										 "",
										 СсылкаНаОбъект);
	КонецЕсли;
	
КонецПроцедуры

// Формирует отчет по объекту, используя стандартный макет.
//
// Параметры:
// ТЧОтчета - ТабличныйДокумент - табличный документ, в который будет выводится отчет
// ВерсияОбъекта - СправочникОбъект,ДокументОбъект - объект, данные которого необходимо отобразить в отчете
// НаименованиеОбъекта - Строка - наименование объекта, по которому 
//
Процедура ФормированиеПоСтандартномуМакету(ТЧОтчета, Макет, ВерсияОбъекта, знач ОписаниеВерсии, СсылкаНаОбъект)
	
	МетаданныеОбъекта = СсылкаНаОбъект.Метаданные();
	
	НаименованиеОбъекта = МетаданныеОбъекта.Имя;
	
	ТЧОтчета = Новый ТабличныйДокумент;
	
	Если Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(СсылкаНаОбъект)) Тогда
		Макет = Справочники[НаименованиеОбъекта].ПолучитьМакет("МакетОбъекта");
	Иначе
		Макет = Документы[НаименованиеОбъекта].ПолучитьМакет("МакетОбъекта");
	КонецЕсли;
	
	// Заголовок
	Область = Макет.ПолучитьОбласть("Заголовок");
	ТЧОтчета.Вывести(Область);
	
	Область = ТЧОтчета.ПолучитьОбласть("R3");
	УстановитьСвойстваТекста(Область.Область("R1C2"), ОписаниеВерсии, , , , Истина);
	ТЧОтчета.Вывести(Область);
	
	Область = ТЧОтчета.ПолучитьОбласть("R5");
	ТЧОтчета.Вывести(Область);
	
	// Шапка
	Шапка = Макет.ПолучитьОбласть("Шапка");
	Шапка.Параметры.Заполнить(ВерсияОбъекта);
	ТЧОтчета.Вывести(Шапка);
	
	Для Каждого МетаданныеТЧ Из МетаданныеОбъекта.ТабличныеЧасти Цикл
		Если ВерсияОбъекта[МетаданныеТЧ.Имя].Количество() > 0 Тогда
			Область = Макет.ПолучитьОбласть(МетаданныеТЧ.Имя+"Шапка");
			ТЧОтчета.Вывести(Область);
			
			ОбластьДеталиПриходаТовара = Макет.ПолучитьОбласть(МетаданныеТЧ.Имя);
			Для Каждого ТекСтрокаДеталиПриходаТовара Из ВерсияОбъекта[МетаданныеТЧ.Имя] Цикл
				ОбластьДеталиПриходаТовара.Параметры.Заполнить(ТекСтрокаДеталиПриходаТовара);
				ТЧОтчета.Вывести(ОбластьДеталиПриходаТовара);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	ТЧОтчета.ОтображатьСетку = Ложь;
	ТЧОтчета.Защита = Истина;
	ТЧОтчета.ТолькоПросмотр = Истина;
	ТЧОтчета.ОтображатьЗаголовки = Ложь;
	
КонецПроцедуры

// Выводит изменившиеся реквизиты в отчет. При этом получает их представление.
//
Функция ВывестиРеквизитыПоРазобранномуОбъекту(ТЧОтчета, ВерсияОбъекта, СсылкаНаОбъект)
	
	Секция = ТЧОтчета.ПолучитьОбласть("R6");
	ВывестиТекстВОтчет(ТЧОтчета, Секция, "R1C1:R1C3", " ");
	ВывестиТекстВОтчет(ТЧОтчета, Секция, "R1C2", "Реквизиты", , , 11, Истина);
	ТЧОтчета.НачатьГруппуСтрок("ГруппаРеквизитов");
	ВывестиТекстВОтчет(ТЧОтчета, Секция, "R1C1:R1C3", " ");
	
	ЧислоВыводимыхСтрок = 0;
	
	Для Каждого ЭлементРеквизит Из ВерсияОбъекта.Реквизиты Цикл
		
		НаименованиеРеквизита = ПолучитьПредставлениеРеквизитаНаЯзыке(ЭлементРеквизит.НаименованиеРеквизита);
		
		ОписаниеРеквизита = СсылкаНаОбъект.Метаданные().Реквизиты.Найти(НаименованиеРеквизита);
		
		Если ОписаниеРеквизита = Неопределено Тогда
			Для Каждого ОписаниеСтандартногоРеквизита Из СсылкаНаОбъект.Метаданные().СтандартныеРеквизиты Цикл
				Если ОписаниеСтандартногоРеквизита.Имя = НаименованиеРеквизита Тогда
					ОписаниеРеквизита = ОписаниеСтандартногоРеквизита;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ЗначениеРеквизита = ?(ЭлементРеквизит.ЗначениеРеквизита = Неопределено, "", ЭлементРеквизит.ЗначениеРеквизита);
		
		ВыводимоеНаименование = НаименованиеРеквизита;
		ПредставлениеЗначения = Строка(ЗначениеРеквизита);
		
		УстановитьСвойстваТекста(Секция.Область("R1C2"), ВыводимоеНаименование, , , , Истина);
		УстановитьСвойстваТекста(Секция.Область("R1C3"), ПредставлениеЗначения);
		Секция.Область("R1C2:R1C3").ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 1, 0);
		Секция.Область("R1C2:R1C3").ЦветРамки = ЦветаСтиля.НедоступныеДанныеЦвет;
		
		ТЧОтчета.Вывести(Секция);
		
		ЧислоВыводимыхСтрок = ЧислоВыводимыхСтрок + 1;
	КонецЦикла;
	
	ТЧОтчета.ЗакончитьГруппуСтрок();
	
	Возврат ЧислоВыводимыхСтрок;
	
КонецФункции

// Выводит табличные части по разобранному объекту, при выводе единственного объекта
//
Функция ВывестиТабличныеЧастиПоРазобранномуОбъекту(ТЧОтчета, ВерсияОбъекта, НомерСтрокиВывода, СсылкаНаОбъект);
	
	ЧислоВыводимыхСтрок = 0;
	
	Если ВерсияОбъекта.ТабличныеЧасти.Количество() <> 0 Тогда
		
		Для Каждого СтрокаТабличнаяЧасть Из ВерсияОбъекта.ТабличныеЧасти Цикл
			НаименованиеТабличнойЧасти = СтрокаТабличнаяЧасть.Ключ;
			ТабличнаяЧасть             = СтрокаТабличнаяЧасть.Значение;
			Если ТабличнаяЧасть.Количество() > 0 Тогда
				
				МетаданныеТЧ = СсылкаНаОбъект.Метаданные().ТабличныеЧасти.Найти(НаименованиеТабличнойЧасти);
				
				СинонимТЧ = Неопределено;
				Если МетаданныеТЧ <> Неопределено Тогда
					СинонимТЧ = МетаданныеТЧ.Синоним;
				КонецЕсли;
				СинонимТЧ = ?(ЗначениеЗаполнено(СинонимТЧ), СинонимТЧ, НаименованиеТабличнойЧасти);
				
				Секция = ТЧОтчета.ПолучитьОбласть("R" + Строка(НомерСтрокиВывода));
				ВывестиТекстВОтчет(ТЧОтчета, Секция, "R1C1:R1C100", " ");
				ОбластьВывода = ВывестиТекстВОтчет(ТЧОтчета, Секция, "R1C2", СинонимТЧ, , , 11, Истина);
				ТЧОтчета.Область("R"+ОбластьВывода.Верх+"C2").СоздатьФорматСтрок();
				ТЧОтчета.Область("R"+ОбластьВывода.Верх+"C2").ШиринаКолонки = Окр(СтрДлина(СинонимТЧ)*2, 0, РежимОкругления.Окр15как20);
				ТЧОтчета.НачатьГруппуСтрок("ГруппаСтрок");
				
				ВывестиТекстВОтчет(ТЧОтчета, Секция, "R1C1:R1C3", " ");
				
				ЧислоВыводимыхСтрок = ЧислоВыводимыхСтрок + 1;
				
				НомерСтрокиВывода = НомерСтрокиВывода + 3;
				
				ДобавляемаяТЧ = Новый ТабличныйДокумент;
				
				ДобавляемаяТЧ.Присоединить(СформироватьПустойСектор(ТабличнаяЧасть.Количество()+1));
				
				НомерКолонки = 2;
				
				СоответствиеРазмерностиКолонок = Новый Соответствие;
				
				Секция = Новый ТабличныйДокумент;
				
				УстановитьСвойстваТекста(Секция.Область("R1C1"),"N", , ЦветаСтиля.НедоступныеДанныеЦвет, , Истина, Истина);
				
				НомерСтроки = 1;
				Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
					НомерСтроки = НомерСтроки + 1;
					УстановитьСвойстваТекста(Секция.Область("R" + НомерСтроки + "C1"), Строка(НомерСтроки-1), , , , , Истина);
				КонецЦикла;
				ДобавляемаяТЧ.Присоединить(Секция);
				
				НомерКолонки = 3;
				
				Для Каждого КолонкаТабличнойЧасти Из ТабличнаяЧасть.Колонки Цикл
					Секция = Новый ТабличныйДокумент;
					НаименованиеПоля = КолонкаТабличнойЧасти.Имя;
					
					ОписаниеПоля = Неопределено;
					Если МетаданныеТЧ <> Неопределено Тогда
						ОписаниеПоля = МетаданныеТЧ.Реквизиты.Найти(НаименованиеПоля);
					КонецЕсли;
					
					Если ОписаниеПоля = Неопределено Или Не ЗначениеЗаполнено(ОписаниеПоля.Синоним) Тогда
						ВыводимоеНаименованиеПоля = НаименованиеПоля;
					Иначе
						ВыводимоеНаименованиеПоля = ОписаниеПоля.Синоним;
					КонецЕсли;
					ЦветЗаголовкаКолонки = ?(ОписаниеПоля = Неопределено, ЦветаСтиля.ЗаголовокУдаленногоРеквизитаФон, ЦветаСтиля.НедоступныеДанныеЦвет);
					УстановитьСвойстваТекста(Секция.Область("R1C1"),
											 ВыводимоеНаименованиеПоля, ,ЦветЗаголовкаКолонки, , Истина, Истина);
					СоответствиеРазмерностиКолонок.Вставить(НомерКолонки, СтрДлина(НаименованиеПоля) + 4);
					НомерСтроки = 1;
					Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
						НомерСтроки = НомерСтроки + 1;
						Значение = ?(СтрокаТабличнойЧасти[НаименованиеПоля] = Неопределено, "", СтрокаТабличнойЧасти[НаименованиеПоля]);
						ПредставлениеЗначения = Строка(Значение);
						
						УстановитьСвойстваТекста(Секция.Область("R" + НомерСтроки + "C1"), ПредставлениеЗначения, , , , , Истина);
						Если СтрДлина(ПредставлениеЗначения) > (СоответствиеРазмерностиКолонок[НомерКолонки] - 4) Тогда
							СоответствиеРазмерностиКолонок[НомерКолонки] = СтрДлина(ПредставлениеЗначения) + 4;
						КонецЕсли;
					КонецЦикла; // Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
					
					ДобавляемаяТЧ.Присоединить(Секция);
					НомерКолонки = НомерКолонки + 1;
				КонецЦикла; // Для Каждого КолонкаТабличнойЧасти Из ТабличнаяЧасть.Колонки Цикл
				
				ОбластьВывода = ТЧОтчета.Вывести(ДобавляемаяТЧ);
				ТЧОтчета.Область("R"+ОбластьВывода.Верх+"C1:R"+ОбластьВывода.Низ+"C"+НомерКолонки).СоздатьФорматСтрок();
				ТЧОтчета.Область("R"+ОбластьВывода.Верх+"C2").ШиринаКолонки = 7;
				Для ТекущийНомерКолонки = 3 По НомерКолонки-1 Цикл
					ТЧОтчета.Область("R"+ОбластьВывода.Верх+"C"+ТекущийНомерКолонки).ШиринаКолонки = СоответствиеРазмерностиКолонок[ТекущийНомерКолонки];
				КонецЦикла;
				ТЧОтчета.ЗакончитьГруппуСтрок();
				
			КонецЕсли; // Если ТабличнаяЧасть.Количество() > 0 Тогда
		КонецЦикла; // Для Каждого СтрокаТабличнаяЧасть Из ВерсияОбъекта.ТабличныеЧасти Цикл
		
	КонецЕсли;
	
КонецФункции

// Выводит текст в область табличного документа с определенным оформлением
//
Функция ВывестиТекстВОтчет(ТЧОтчета,
                             знач Секция,
                             знач Регион,
                             знач Текст,
                             знач ЦветТекста = Неопределено,
                             знач ЦветФона   = Неопределено,
                             знач Размер     = 9,
                             знач Жирный     = Ложь)
	
	ОбластьСекции = Секция.Область(Регион);
	
	Если ЦветТекста <> Неопределено Тогда
		ОбластьСекции.ЦветТекста = ЦветТекста;
	КонецЕсли;
	
	Если ЦветФона <> Неопределено Тогда
		ОбластьСекции.ЦветФона = ЦветФона;
	КонецЕсли;
	
	ОбластьСекции.Текст      = Текст;
	ОбластьСекции.Шрифт      = Новый Шрифт(, Размер, Жирный, , , );
	ОбластьСекции.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;
	
	ОбластьСекции.ГраницаСверху = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
	ОбластьСекции.ГраницаСнизу  = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
	ОбластьСекции.ГраницаСлева  = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
	ОбластьСекции.ГраницаСправа = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
	
	Возврат ТЧОтчета.Вывести(Секция);
	
КонецФункции

// Используется для вывода текста в область табличного документа
// с условным оформлением
//
Процедура УстановитьСвойстваТекста(ОбластьСекции, Текст,
                                   знач ЦветТекста = Неопределено,
                                   знач ЦветФона = Неопределено,
                                   знач Размер = 9,
                                   знач Жирный = Ложь,
                                   знач ПоказыватьГраницы = Ложь)
	
	ОбластьСекции.Текст = Текст;
	
	Если ЦветТекста <> Неопределено Тогда
		ОбластьСекции.ЦветТекста = ЦветТекста;
	КонецЕсли;
	
	Если ЦветФона <> Неопределено Тогда
		ОбластьСекции.ЦветФона = ЦветФона;
	КонецЕсли;
	
	ОбластьСекции.Шрифт = Новый Шрифт(, Размер, Жирный, , , );
	
	Если ПоказыватьГраницы Тогда
		ОбластьСекции.ГраницаСверху = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
		ОбластьСекции.ГраницаСнизу  = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
		ОбластьСекции.ГраницаСлева  = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
		ОбластьСекции.ГраницаСправа = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
		ОбластьСекции.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Центр;
	КонецЕсли;
	
КонецПроцедуры

// Формирует пустой сектор для вывода в отчет. Используется,
// если строка не была изменена в одной из версий.
//
Функция СформироватьПустойСектор(знач ЧислоСтрок, знач ТипВывода = "")
	
	ЗначениеЗаполнения = Новый Массив;
	
	Для Индекс = 1 По ЧислоСтрок Цикл
		ЗначениеЗаполнения.Добавить(" ");
	КонецЦикла;
	
	Возврат СформироватьСекторСтрокиТЧ(ЗначениеЗаполнения, ТипВывода);
	
КонецФункции

// ЗначениеЗаполнения - массив строк
// ТипВывода - строка :
//           "и" - изменение
//           "д" - добавление
//           "у" - удаление
//           ""  - обычный вывод
Функция СформироватьСекторСтрокиТЧ(знач ЗначениеЗаполнения,знач ТипВывода = "")
	
	ОбщийШаблон = РегистрыСведений.ВерсииОбъектов.ПолучитьМакет("СтандартныйМакетПредставленияОбъекта");
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	Если      ТипВывода = ""  Тогда
		Шаблон = ОбщийШаблон.ПолучитьОбласть("ИсходноеЗначениеРеквизита");
	ИначеЕсли ТипВывода = "И" Тогда
		Шаблон = ОбщийШаблон.ПолучитьОбласть("ИзмененноеЗначениеРеквизита");
	ИначеЕсли ТипВывода = "Д" Тогда
		Шаблон = ОбщийШаблон.ПолучитьОбласть("ДобавленныйРеквизит");
	ИначеЕсли ТипВывода = "У" Тогда
		Шаблон = ОбщийШаблон.ПолучитьОбласть("УдаленныйРеквизит");
	КонецЕсли;
	
	Для Каждого ОчередноеЗначение Из ЗначениеЗаполнения Цикл
		Шаблон.Параметры.ЗначениеРеквизита = ОчередноеЗначение;
		ТабличныйДокумент.Вывести(Шаблон);
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

