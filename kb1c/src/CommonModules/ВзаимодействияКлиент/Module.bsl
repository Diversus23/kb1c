
////////////////////////////////////////////////////////////////////////////////
// Подсистема "Взаимодействия"
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАМНЫЙ ИНТЕРФЕЙС

//Открывает форму нового документа "Электронное письмо исходящее"
//с переданными в процедуру параметрами
//
// Параметры
//  Отправитель  - СправочникСсылка.УчетныеЗаписи - учетная запись, с которой выполняется отправка
//  Получатель   - Строка, СписокЗначений, Массив - список получателей письма
//  Тема         - Строка - тема письма
//  Текст        - Строка - текст письма
//  СписокФайлов - Массив - вложения письма
//  Предмет      - Ссылка - предмет письма
//
Процедура ОткрытьФормуОтправкиПочтовогоСообщения(знач Отправитель = Неопределено,
                                                 знач Получатель = Неопределено,
                                                 знач Тема = "",
                                                 знач Текст = "",
                                                 знач СписокФайлов = Неопределено,
                                                 знач Предмет = Неопределено) Экспорт
	
	ПараметрыПисьма = Новый Структура;
	
	ПараметрыПисьма.Вставить("УчетнаяЗапись", Отправитель);
	ПараметрыПисьма.Вставить("Кому", Получатель);
	ПараметрыПисьма.Вставить("Тема", Тема);
	ПараметрыПисьма.Вставить("Тело", Текст);
	ПараметрыПисьма.Вставить("Вложения", СписокФайлов);
	ПараметрыПисьма.Вставить("Предмет", Предмет);
	
	ОткрытьФорму("Документ.ЭлектронноеПисьмоИсходящее.Форма.ФормаДокумента", ПараметрыПисьма);
	
КонецПроцедуры

//Открывает форму нового документа "Сообщение SMS"
//с переданными в процедуру параметрами
//
// Параметры
//  Адресаты             - Строка, СписокЗначений, Массив - список получателей письма
//  Текст                - Строка - текст письма
//  Предмет              - Ссылка - предмет письма
//  ОтправлятьВТранслите - Булево - признак того, что сообщение при отправке должно быть преобразовано в латинские символы
//
Процедура ОткрытьФормуОтправкиSMS(знач Адресаты = Неопределено,
                                  знач Текст = "",
                                  знач Предмет = Неопределено,
                                  знач ОтправлятьВТранслите = Ложь) Экспорт
	
	ПараметрыСообщения = Новый Структура;
	
	ПараметрыСообщения.Вставить("Адресаты", Адресаты);
	ПараметрыСообщения.Вставить("Текст", Текст);
	ПараметрыСообщения.Вставить("Предмет", Предмет);
	ПараметрыСообщения.Вставить("ОтправлятьВТранслите", ОтправлятьВТранслите);
	
	ОткрытьФорму("Документ.СообщениеSMS.Форма.ФормаДокумента", ПараметрыСообщения);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

//Создает взаимодействие или предмет взаимодействия
//Параметры:
//  ИмяФормыОбъекта - имя формы элемента создаваемого объекта,
//  Основание       - объект основание,
//  Источник        - форма объекта-основания
//
Процедура СоздатьВзаимодействиеИлиПредмет(ИмяФормыОбъекта, Основание, Источник) Экспорт

	ПараметрыОткрытияФормы = Новый Структура("Основание", Основание);
	Если (ТипЗнч(Основание) = Тип("ДокументСсылка.Встреча") 
	    ИЛИ  ТипЗнч(Основание) = Тип("ДокументСсылка.ЗапланированноеВзаимодействие"))
		И Источник.Элементы.Найти("Участники") <> Неопределено
		И Источник.Элементы.Участники.ТекущиеДанные <> Неопределено Тогда
	
	    ДанныеУчастникаИсточник = Источник.Элементы.Участники.ТекущиеДанные;
	    ПараметрыОткрытияФормы.Вставить("ДанныеУчастника",Новый Структура("Контакт,КакСвязаться,Представление",
	                                                                      ДанныеУчастникаИсточник.Контакт,
	                                                                      ДанныеУчастникаИсточник.КакСвязаться,
	                                                                      ДанныеУчастникаИсточник.ПредставлениеКонтакта));
	
	ИначеЕсли (ТипЗнч(Основание) = Тип("ДокументСсылка.СообщениеSMS") 
		 И Источник.Элементы.Адресаты.ТекущиеДанные <> Неопределено)
		 И Источник.Элементы.Найти("Адресаты") <> Неопределено Тогда
		
		ДанныеУчастникаИсточник = Источник.Элементы.Адресаты.ТекущиеДанные;
		ПараметрыОткрытияФормы.Вставить("ДанныеУчастника",Новый Структура("Контакт,КакСвязаться,Представление",
		                                                                  ДанныеУчастникаИсточник.Контакт,
		                                                                  ДанныеУчастникаИсточник.КакСвязаться,
		                                                                  ДанныеУчастникаИсточник.ПредставлениеКонтакта));
	
	КонецЕсли;
	
	ОткрытьФорму(ИмяФормыОбъекта, ПараметрыОткрытияФормы, Источник);

КонецПроцедуры

//Запрашивает подтверждение и обновляет индекс полнотекстового поиска данных
//
Процедура КомандаОбновитьИндексППДВыполнить(ИнформацияОбАктуальностиИндексаППД,ППДВключен,ИндексАктуален) Экспорт

	СтрВопроса = НСтр("ru = 'Обновление индекса полнотекстового поиска может занять длительное время. Продолжить?'");
	Ответ = Вопрос(СтрВопроса, РежимДиалогаВопрос.ДаНет);
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;

	Состояние(НСтр("ru = 'Идет обновление индекса полнотекстового поиска ...'"));
	Результат = ВзаимодействияВызовСервера.ОбновитьИндексППД(ИнформацияОбАктуальностиИндексаППД,ППДВключен,ИндексАктуален);
	Состояние();

	Если Не ПустаяСтрока(Результат) Тогда
		Предупреждение(Результат);
	КонецЕсли;

КонецПроцедуры

//Открывает форму объекта-контакта заполненную по описанию участника взаимодействия
//Параметры:
//  Описание  - текстовое описание контакта,
//  Адрес     - контактная информация,
//  Основание - объект, из которого создается контакт
//
Процедура СоздатьКонтакт(Описание, Адрес, Основание,ТипыКонтактов) Экспорт

	Если ТипыКонтактов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	ТипКонтакта = ТипыКонтактов.ВыбратьЭлемент("Выбор типа контакта");
	Если ТипКонтакта <> Неопределено Тогда
		ПараметрФормы = Новый Структура(
			"Основание",
			Новый Структура("Наименование, Адрес, Объект",
			                Описание, Адрес, Основание));
		Если НЕ ВзаимодействияКлиентПереопределяемый.СоздатьКонтактНестандартнаяФорма(ТипКонтакта.Значение,ПараметрФормы) Тогда
			ОткрытьФорму("Справочник." + ТипКонтакта.Значение + ".ФормаОбъекта", ПараметрФормы);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Обработчик для события формы ОбработкаОповещения. Вызывается для взаимодействия.
Процедура ОтработатьОповещение(Форма,ИмяСобытия, Параметр, Источник) Экспорт
	
	Если ТипЗнч(Параметр) = Тип("Структура") И Параметр.Свойство("ТипОповещения") Тогда
		Если (Параметр.ТипОповещения = "ЗаписьВзаимодействия" ИЛИ Параметр.ТипОповещения = "ЗаписьПредмета")
			И Параметр.Основание = Форма.Объект.Ссылка Тогда
			
			Если (Форма.Предмет = Неопределено ИЛИ ВзаимодействияКлиентСервер.ЯвляетсяВзаимодействием(Форма.Предмет)) И 
				Форма.Предмет <> Параметр.Предмет Тогда
				Форма.Предмет = Параметр.Предмет;
				Форма.ОтобразитьИзменениеДанных(Форма.Предмет, ВидИзмененияДанных.Изменение);
			КонецЕсли;
			
		ИначеЕсли Параметр.ТипОповещения = "ЗаписьКонтакта" И Параметр.Основание = Форма.Объект.Ссылка Тогда
			
			Если ТипЗнч(Форма.Объект.Ссылка)=Тип("ДокументСсылка.ТелефонныйЗвонок") Тогда
				Форма.Объект.АбонентКонтакт = Параметр.Ссылка;
				Если ПустаяСтрока(Форма.Объект.АбонентПредставление) Тогда
					Форма.Объект.АбонентПредставление = Параметр.Наименование;
				КонецЕсли;
			ИначеЕсли ТипЗнч(Форма.Объект.Ссылка)=Тип("ДокументСсылка.Встреча") ИЛИ 
				ТипЗнч(Форма.Объект.Ссылка)=Тип("ДокументСсылка.ЗапланированноеВзаимодействие")Тогда
				Форма.Элементы.Участники.ТекущиеДанные.Контакт = Параметр.Ссылка;
				Если ПустаяСтрока(Форма.Элементы.Участники.ТекущиеДанные.ПредставлениеКонтакта) Тогда
					Форма.Элементы.Участники.ТекущиеДанные.ПредставлениеКонтакта = Параметр.Наименование;
				КонецЕсли;
			ИначеЕсли ТипЗнч(Форма.Объект.Ссылка)=Тип("ДокументСсылка.СообщениеSMS") Тогда
				Форма.Элементы.Адресаты.ТекущиеДанные.Контакт = Параметр.Ссылка;
				Если ПустаяСтрока(Форма.Элементы.Адресаты.ТекущиеДанные.ПредставлениеКонтакта) Тогда
					Форма.Элементы.Адресаты.ТекущиеДанные.ПредставлениеКонтакта = Параметр.Наименование;
				КонецЕсли;
			КонецЕсли;
			
			Форма.Элементы.СоздатьКонтакт.Доступность = Ложь;
			Форма.Модифицированность = Истина;
			
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ВыбранКонтакт" Тогда
		
		Если Форма.ИмяФормы = "Документ.ЭлектронноеПисьмоИсходящее.Форма.ФормаДокумента" 
			ИЛИ Форма.ИмяФормы = "Документ.ЭлектронноеПисьмоВходящее.Форма.ФормаДокумента" Тогда
			Возврат;
		КонецЕсли;
		
		БылИзмененКонтакт = (Параметр.Контакт <> Параметр.ВыбранныйКонтакт) И ЗначениеЗаполнено(Параметр.Контакт);
		Контакт = Параметр.ВыбранныйКонтакт;
		Если Параметр.ТолькоEmail Тогда
			ТипКонтактнойИнформации = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.АдресЭлектроннойПочты");
		ИначеЕсли Параметр.ТолькоТелефон Тогда
			ТипКонтактнойИнформации = ПредопределенноеЗначение("Перечисление.ТипыКонтактнойИнформации.Телефон");
		Иначе
			ТипКонтактнойИнформации = Неопределено;
		КонецЕсли;
		
		Если БылИзмененКонтакт Тогда
			
			Если Параметр.ДляФормыУточненияКонтактов Тогда
				//Возврат БылИзмененКонтакт;
			Иначе
				ВзаимодействияВызовСервера.ПолучитьПредставлениеИВсюКонтактнуюИнформациюКонтакта(
				             Контакт, Параметр.Представление, Параметр.Адрес, ТипКонтактнойИнформации);
			КонецЕсли;
			
			Адрес         = Параметр.Адрес;
			Представление = Параметр.Представление;
			
		ИначеЕсли Параметр.ЗаменятьПустыеАдресИПредставление И (ПустаяСтрока(Параметр.Адрес) ИЛИ ПустаяСтрока(Параметр.Представление)) Тогда
			
			нПредставление = ""; 
			нАдрес = "";
			ВзаимодействияВызовСервера.ПолучитьПредставлениеИВсюКонтактнуюИнформациюКонтакта(
			             Контакт, нПредставление, нАдрес, ТипКонтактнойИнформации);
			
			Если ПустаяСтрока(Параметр.Представление) Тогда
				Представление = нПредставление;
			КонецЕсли;
			
			Если ПустаяСтрока(Параметр.Адрес) Тогда
				Адрес = нАдрес;
			КонецЕсли;
			
		Иначе
			
			Адрес         = Параметр.Адрес;
			Представление = Параметр.Представление;
			
		КонецЕсли;
		
		Если Форма.ИмяФормы = "ОбщаяФорма.АдреснаяКнига" Тогда

			ТекущиеДанные = Форма.Элементы.ПолучателиПисьма.ТекущиеДанные;
			Если ТекущиеДанные = Неопределено Тогда
				Возврат;
			КонецЕсли;
			
			ТекущиеДанные.Контакт       = Контакт;
			ТекущиеДанные.Адрес         = Адрес;
			ТекущиеДанные.Представление = Представление;
			
			Форма.Модифицированность = Истина;
			
		ИначеЕсли ТипЗнч(Форма.Объект.Ссылка)=Тип("ДокументСсылка.СообщениеSMS") Тогда
			ТекущиеДанные = Форма.Элементы.Адресаты.ТекущиеДанные;
			Если ТекущиеДанные = Неопределено Тогда
				Возврат;
			КонецЕсли;
			
			ТекущиеДанные.Контакт               = Контакт;
			ТекущиеДанные.КакСвязаться          = Адрес;
			ТекущиеДанные.ПредставлениеКонтакта = Представление;
			
			ВзаимодействияКлиентСервер.ПроверитьЗаполнениеКонтактов(Форма.Объект,Форма,"СообщениеSMS");
						
		ИначеЕсли ТипЗнч(Форма.Объект.Ссылка)=Тип("ДокументСсылка.ЗапланированноеВзаимодействие") Тогда
			ТекущиеДанные = Форма.Элементы.Участники.ТекущиеДанные;
			Если ТекущиеДанные = Неопределено Тогда
				Возврат;
			КонецЕсли;
			
			ТекущиеДанные.Контакт               = Контакт;
			ТекущиеДанные.КакСвязаться          = Адрес;
			ТекущиеДанные.ПредставлениеКонтакта = Представление;
			
			ВзаимодействияКлиентСервер.ПроверитьЗаполнениеКонтактов(Форма.Объект,Форма,"ЗапланированноеВзаимодействие");
			Форма.Модифицированность = Истина;
			
		ИначеЕсли ТипЗнч(Форма.Объект.Ссылка)=Тип("ДокументСсылка.Встреча") Тогда
			ТекущиеДанные = Форма.Элементы.Участники.ТекущиеДанные;
			Если ТекущиеДанные = Неопределено Тогда
				Возврат;
			КонецЕсли;
			
			ТекущиеДанные.Контакт               = Контакт;
			ТекущиеДанные.КакСвязаться          = Адрес;
			ТекущиеДанные.ПредставлениеКонтакта = Представление;
			
			ВзаимодействияКлиентСервер.ПроверитьЗаполнениеКонтактов(Форма.Объект,Форма,"ЗапланированноеВзаимодействие");
			Форма.Модифицированность = Истина;
			
		ИначеЕсли ТипЗнч(Форма.Объект.Ссылка)=Тип("ДокументСсылка.ТелефонныйЗвонок") Тогда
			
			Форма.Объект.АбонентКонтакт       = Контакт;
			Форма.Объект.АбонентКакСвязаться  = Адрес;
			Форма.Объект.АбонентПредставление = Представление;
			
			ВзаимодействияКлиентСервер.ПроверитьЗаполнениеКонтактов(Форма.Объект,Форма,"ТелефонныйЗвонок");
			Форма.Модифицированность = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

//Создает новый документ взаимодействий
//
// Параметры
//  ТипОбъект         - Строка - тип создаваемого объекта
//  ПараметрыСоздания - Структура - параметры создаваемого документа
//  ЭлементСписок     - ТаблицаФормы - элемент формы в котором происходит создание
//
Процедура СоздатьНовоеВзаимодействие(ТипОбъекта,ПараметрыСоздания = Неопределено) Экспорт

	ОткрытьФорму("Документ."+ ТипОбъекта+".ФормаОбъекта",ПараметрыСоздания);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ОБРАБОТЧИКИ СОБЫТИЙ ДОКУМЕНТОВ ВЗАИМОДЕЙСТВИЙ

//Вызывает форму выбора контакта и обрабатывает результат выбора.
//
//Параметры
//  Предмет                           - Ссылка - ссылка на предмет взаимодействия.
//  Адрес                             - Строка - адрес контакта.
//  Представление                     - Строка - представление контакта.
//  Контакт                           - Ссылка - контакт.
//  Параметры                         - Структура - структура параметров открытия формы, состоит .
//                                      ТолькоEmail, ТолькоТелефон, ЗаменятьПустыеАдресИПредставление, ДляФормыУточненияКонтактов
//
//Возвращаемое значение:
//  Булево - истина, если выбор был сделан, ложь в обратном случае.
//
Функция ВыбратьКонтакт(Предмет, Адрес, Представление, Контакт, Параметры) Экспорт

	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Предмет",       Предмет);
	ПараметрыОткрытия.Вставить("Адрес",         Адрес);
	ПараметрыОткрытия.Вставить("Представление", Представление);
	ПараметрыОткрытия.Вставить("Контакт",       Контакт);
	ПараметрыОткрытия.Вставить("ТолькоEmail",   Параметры.ТолькоEmail);
	ПараметрыОткрытия.Вставить("ТолькоТелефон", Параметры.ТолькоТелефон);
	ПараметрыОткрытия.Вставить("ЗаменятьПустыеАдресИПредставление", Параметры.ЗаменятьПустыеАдресИПредставление);
	ПараметрыОткрытия.Вставить("ДляФормыУточненияКонтактов", Параметры.ДляФормыУточненияКонтактов);
	
	ОткрытьФорму("ОбщаяФорма.ВыборКонтакта", ПараметрыОткрытия);

КонецФункции

//Обработка выбора поля "рассмотреть после" в документах взаимодействиях
//
//Параметры
//  ЗначениеПоля         - Дата - значение поля "Отработать после". 
//  ВыбранноеЗначение    - Дата, число - либо выбранная дата, либо числовой инкремент от текущей даты.
//  СтандартнаяОбработка - Булево - признак стандартной обработки обработчика события формы.
//  Модифицированность   - Булево - признак модифицированности формы.
//
Процедура ОбработатьВыборВПолеРассмотретьПосле(ЗначениеПоля, ВыбранноеЗначение, СтандартнаяОбработка, Модифицированность) Экспорт
	
	СтандартнаяОбработка = Ложь;
	Модифицированность = Истина;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Число") Тогда
		ЗначениеПоля = ОбщегоНазначенияКлиент.ДатаСеанса() + ВыбранноеЗначение;
	Иначе
		ЗначениеПоля = ВыбранноеЗначение;
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает отбор по владельцу в динамическом списке подчиненного справочника, при активизации строки динамического списка справочника родителя.
 //
 // Параметры
 //  Элемент  		- ТаблицаФормы - таблица в которой произошло событие
 //  Форма		 	- УправляемаяФорма - форма, на которой находятся элементы.
 //
Процедура КонтактВладелецПриАктивизацииСтроки(Элемент,Форма)  Экспорт
	
	ИмяТаблицыБезПрефикса = Прав(Элемент.Имя,СтрДлина(Элемент.Имя)-8);
	ЗначениеОтбора = ?(Элемент.ТекущиеДанные = Неопределено, Неопределено, Элемент.ТекущиеДанные.Ссылка);
	
	МассивОписанияКонтактов = ВзаимодействияКлиентСервер.ПолучитьМассивОписанияВозможныхКонтактов();
	Для каждого ЭлементМассиваОписания Из МассивОписанияКонтактов  Цикл
		Если ЭлементМассиваОписания.ИмяВладельца = ИмяТаблицыБезПрефикса Тогда
			Если ОбщегоНазначенияКлиентСервер.ЭтоПлатформа83БезРежимаСовместимости() Тогда
				КоллекцияОтборов = Форма["Список_" + ЭлементМассиваОписания.Имя].КомпоновщикНастроек.ФиксированныеНастройки.Отбор;
			Иначе
				КоллекцияОтборов = Форма["Список_" + ЭлементМассиваОписания.Имя].Отбор;
			КонецЕсли;
			КоллекцияОтборов.Элементы[0].ПравоеЗначение = ЗначениеОтбора;
		КонецЕсли;
	КонецЦикла;
 
КонецПроцедуры 

//Задает вопрос пользователю при смене режима форматирования электронного письма с HTML на обычный текст и возвращает выбор пользователя.
Функция ПриИзмененииФорматаСообщенияНаОбычныйТекст() Экспорт

	ТекстСообщения = НСтр("ru='При преобразовании этого сообщения в обычный текст будут утеряны все элементы оформления, картинки и прочие вставленные элементы. Продолжить?'");
	Результат = Вопрос(ТекстСообщения, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет, НСтр("ru = 'Изменение формата письма'"));
	Возврат Результат = КодВозвратаДиалога.Да;

КонецФункции

// Обработчик перед началом добавления динамических списков журнала взаимодействия
//
// Параметры
//  Элемент - ЭлементФормы - список в который происходит добавление
//  Отказ  - Булево - признак отказа от добавления
//  Копирование  - Булево - признак копирования
//  ТолькоПочта  - ТолькоПочта - признак того что используются только почтовый клиент
//  ДокументыДоступныеДляСоздания  - СписокЗначений - список доступных для создания документов
//  ПараметрыСоздания  - Структура - параметры создания нового документа
//
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование,ТолькоПочта,ДокументыДоступныеДляСоздания,ПараметрыСоздания = Неопределено) Экспорт
	
	Если Копирование Тогда
		
		ТекущиеДанные = Элемент.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		Если ТипЗнч(ТекущиеДанные.Ссылка) = Тип("ДокументСсылка.ЭлектронноеПисьмоВходящее") Или
			ТипЗнч(ТекущиеДанные.Ссылка) = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее") Тогда
			Отказ = Истина;
			Если Не ТолькоПочта Тогда
				Предупреждение(НСтр("ru = 'Копирование электронных писем запрещено'"));
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		Если ТолькоПочта Тогда
			Отказ = Истина;
			СоздатьНовоеВзаимодействие("ЭлектронноеПисьмоИсходящее",ПараметрыСоздания);
		Иначе
			
			Отказ = Истина;
			РезультатВыбора = ДокументыДоступныеДляСоздания.ВыбратьЭлемент(НСтр("ru = 'Выберите тип документа'"));
			Если НЕ РезультатВыбора = Неопределено Тогда
				
				СоздатьНовоеВзаимодействие(РезультатВыбора.Значение,ПараметрыСоздания);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик для события формы ПослеЗаписиНаСервере. Вызывается для взаимодействия или предмета взаимодействия
//
// Параметры
//  Форма                          - УправляемаяФорма - форма, для которой обрабатывается событие
//  Объект                         - ДанныеФормыКоллекция - данные объекта хранимые в форме
//  ПараметрыЗаписи                - Структура - структура, в которую добавляются параметры, которые потом будут посланы с оповещением.
//  ИмяОбъектаОтправителяСообщения - Строка - имя объекта метаданных, для формы которого обрабатывается событие.
//  ПосылатьОповещение  - Булево   - признак необходимости отправки оповещения из этой процедуры.
// 
Процедура ВзаимодействиеПредметПослеЗаписи(Форма,Объект,ПараметрыЗаписи,ИмяОбъектаОтправителяСообщения = "",ПосылатьОповещение = Истина) Экспорт
	
	Если Форма.НеобходимоОповещение Тогда
		
		Если ЗначениеЗаполнено(Форма.ВзаимодействиеОснование) Тогда
			ПараметрыЗаписи.Вставить("Основание",Форма.ВзаимодействиеОснование);
		Иначе
			ПараметрыЗаписи.Вставить("Основание",Неопределено);
		КонецЕсли;
	
		Если ВзаимодействияКлиентСервер.ЯвляетсяВзаимодействием(Объект.Ссылка) Тогда
			ПараметрыЗаписи.Вставить("Предмет",Форма.Предмет);
			ПараметрыЗаписи.Вставить("ТипОповещения","ЗаписьВзаимодействия");
		ИначеЕсли ВзаимодействияКлиентСервер.ЯвляетсяПредметом(Объект.Ссылка) Тогда
			ПараметрыЗаписи.Вставить("Предмет",Объект.Ссылка);
			ПараметрыЗаписи.Вставить("ТипОповещения","ЗаписьПредмета");
		КонецЕсли;
		
		Если ПосылатьОповещение Тогда
			Оповестить("Запись_" + ИмяОбъектаОтправителяСообщения,ПараметрыЗаписи,Объект.Ссылка);
			Форма.НеобходимоОповещение = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик для события формы ПослеЗаписиНаСервере. Вызывается для контакта.
//
// Параметры
//  Форма                          - УправляемаяФорма - форма, для которой обрабатывается событие
//  Объект                         - ДанныеФормыКоллекция - данные объекта хранимые в форме
//  ПараметрыЗаписи                - Структура - структура, в которую добавляются параметры, которые потом будут посланы с оповещением.
//  ИмяОбъектаОтправителяСообщения - Строка - имя объекта метаданных, для формы которого обрабатывается событие.
//  ПосылатьОповещение  - Булево   - признак необходимости отправки оповещения из этой процедуры.
//
Процедура КонтактПослеЗаписи(Форма,Объект,ПараметрыЗаписи,ИмяОбъектаОтправителяСообщения,ПосылатьОповещение = Истина) Экспорт
	
	Если Форма.НеобходимоОповещение Тогда
		
		Если ЗначениеЗаполнено(Форма.ОбъектОснование) Тогда
			ПараметрыЗаписи.Вставить("Ссылка",Объект.Ссылка);
			ПараметрыЗаписи.Вставить("Наименование",Объект.Наименование);
			ПараметрыЗаписи.Вставить("Основание",Форма.ОбъектОснование);
			ПараметрыЗаписи.Вставить("ТипОповещения","ЗаписьКонтакта");
		КонецЕсли;
		
		Если ПосылатьОповещение Тогда
			Оповестить("Запись_" + ИмяОбъектаОтправителяСообщения,ПараметрыЗаписи,Объект.Ссылка);
			Форма.НеобходимоОповещение = Ложь
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик для события формы ПриНажатии поля HTML документа.
//
// Параметры
//  Элемент                        - ЭлементФормы - для которой обрабатывается событие
//  ДанныеСобытия                  - ФиксированнаяСтруктура - данные содержит параметры события
//  СтандартнаяОбработка           - Булево - признак стандартной обработки события.
//
Процедура ПолеHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка) Экспорт
	
	Если ДанныеСобытия.Href <> Неопределено Тогда
		СтандартнаяОбработка = ЛОЖЬ;
		ЗапуститьПриложение(ДанныеСобытия.Href);
	КонецЕсли;
	
КонецПроцедуры
