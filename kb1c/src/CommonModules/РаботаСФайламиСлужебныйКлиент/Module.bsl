////////////////////////////////////////////////////////////////////////////////
// Подсистема "Работа с файлами".
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Открывает форму папки со списком файлов.
Процедура РассылкаОтчетовПросмотрПапки(СтандартнаяОбработка, Папка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура("Папка", Папка);
	ОткрытьФорму("Справочник.Файлы.Форма.ХранилищеФайлов", ПараметрыФормы, , Папка);
	
КонецПроцедуры

// Добавляет предупреждения пользователю при завершении работы программы.
Процедура ПриЗавершенииРаботыСистемы(Предупреждения) Экспорт
	Ответ = ПроверитьЗанятыеФайлыПриЗавершенииРаботы();
	Если Ответ = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Ответ) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;	
	
	// Инициализация формы индивидуального открытия и ее параметров.
	ПрикладнаяФормаПредупреждения = Неопределено;
	Ответ.Свойство("ПрикладнаяФормаПредупреждения", ПрикладнаяФормаПредупреждения);
	ПараметрыПрикладнойФормыПредупреждения = Неопределено;
	Ответ.Свойство("ПараметрыПрикладнойФормыПредупреждения", ПараметрыПрикладнойФормыПредупреждения);
	
	// Инициализация формы открытия из списка и её параметров.
	Форма = Неопределено;
	Ответ.Свойство("Форма", Форма);
	ПараметрыФормы = Неопределено;
	Ответ.Свойство("ПараметрыФормы", ПараметрыФормы);
	
	КоличествоЗанятыхФайлов = Ответ.КоличествоЗанятыхФайлов;
	
	ТекстГиперСсылки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Открыть список редактируемых файлов (%1)'"),
		КоличествоЗанятыхФайлов);
	
	ДействиеПриНажатииГиперссылки = Новый Структура;
	Если ПрикладнаяФормаПредупреждения <> Неопределено Тогда 
		ДействиеПриНажатииГиперссылки.Вставить("ПрикладнаяФормаПредупреждения", ПрикладнаяФормаПредупреждения);
		ДействиеПриНажатииГиперссылки.Вставить("ПараметрыПрикладнойФормыПредупреждения", ПараметрыПрикладнойФормыПредупреждения);
	КонецЕсли;
	Если Форма <> Неопределено Тогда 
		ДействиеПриНажатииГиперссылки.Вставить("Форма", 			Форма);
		ДействиеПриНажатииГиперссылки.Вставить("ПараметрыФормы", 	ПараметрыФормы);
	КонецЕсли;
	
	ПредупреждениеПользователю = Новый Структура;
	ПредупреждениеПользователю.Вставить("ТекстГиперСсылки", 				ТекстГиперСсылки);
	ПредупреждениеПользователю.Вставить("ДействиеПриНажатииГиперссылки", 	ДействиеПриНажатииГиперссылки);
	ПредупреждениеПользователю.Вставить("Приоритет", 70);
	
	Предупреждения.Добавить(ПредупреждениеПользователю);
КонецПроцедуры	

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Проверяет можно ли освободить Файл.
//
// Параметры:
//  ОбъектСсылка - СправочникСсылка.Файлы - файл.
//
//  РедактируетТекущийПользователь - Булево -
//                 файл редактирует текущий пользователь.
//
//  Редактирует  - СправочникСсылка.Пользователи - тот, кто занял файл.
//
//  СтрокаОшибки - Строка, в которой возвращается причина ошибки в случае неуспеха
//                 (например, "Файл занят другим пользователем").
//
// Возвращаемое значение:
//  Булево. Истина, если файл можно освободить.
//
Функция ВозможностьОсвободитьФайл(ОбъектСсылка,
                                  РедактируетТекущийПользователь,
                                  Редактирует,
                                  СтрокаОшибки = "") Экспорт
	
	Если РедактируетТекущийПользователь Тогда 
		Возврат Истина;
	ИначеЕсли Редактирует.Пустая() Тогда
		СтрокаОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Невозможно освободить файл ""%1"",
			           |т.к. он никем не занят.'"),
			Строка(ОбъектСсылка));
		Возврат Ложь;
	Иначе
		Если ФайловыеФункцииСлужебныйКлиентСервер.ПерсональныеНастройкиРаботыСФайлами(
		       ).ЭтоПолноправныйПользователь Тогда
			
			Возврат Истина;
		КонецЕсли;
		
		СтрокаОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Невозможно освободить файл ""%1"",
			           |т.к. он занят пользователем ""%2"".'"),
			Строка(ОбъектСсылка),
			Строка(Редактирует));
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Помечает файл, как занятый для редактирования.
//
// Параметры:
//  ОбъектСсылка            - СправочникСсылка.Файлы - файл.
//  УникальныйИдентификатор - УникальныйИдентификатор формы.
//
// Возвращаемое значение:
//  Булево. Истина, если операция выполнена успешно.
//
Функция ЗанятьФайлПоСсылке(ОбъектСсылка, УникальныйИдентификатор = Неопределено) Экспорт
	
	Перем ДанныеФайла;
	
	ОбщегоНазначенияКлиент.ПредложитьУстановкуРасширенияРаботыСФайлами();
	
	РасширениеПодключено = ПодключитьРасширениеРаботыСФайлами();
	
	СтрокаОшибки = "";
	Если НЕ РаботаСФайламиСлужебныйВызовСервера.ПолучитьДанныеФайлаИЗанятьФайл(
	          ОбъектСсылка, ДанныеФайла, СтрокаОшибки, УникальныйИдентификатор) Тогда
		
		// Если занять нельзя, тогда выводится сообщение об ошибке.
		Предупреждение(СтрокаОшибки);
		Возврат Ложь;
	КонецЕсли;
	
	Если РасширениеПодключено Тогда
		НаЧтение = Ложь;
		ВРабочемКаталогеВладельца = ДанныеФайла.РабочийКаталогВладельца <> "";
		ПеререгистрироватьФайлВРабочемКаталоге(ДанныеФайла, НаЧтение, ВРабочемКаталогеВладельца);
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Редактирование файла'"),
		ДанныеФайла.НавигационнаяСсылка,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Файл ""%1""
			           |занят для редактирования.'"), Строка(ДанныеФайла.Ссылка)),
		БиблиотекаКартинок.Информация32);
		
	Возврат Истина;
	
КонецФункции

// Помечает файлы, как занятые для редактирования.
//
// Параметры:
//  МассивФайлов - Массив - массив файлов.
//
Процедура ЗанятьФайлыПоСсылкам(Знач МассивФайлов) Экспорт
	
	ОбщегоНазначенияКлиент.ПредложитьУстановкуРасширенияРаботыСФайлами();
	
	// Получение массива данных файлов.
	ДанныеФайлов = Новый Массив;
	РаботаСФайламиСлужебныйВызовСервера.ПолучитьДанныеДляМассиваФайлов(МассивФайлов, ДанныеФайлов);
	ВГраницаМассива  = ДанныеФайлов.ВГраница();
	
	Для Инд = 0 По ВГраницаМассива Цикл
		ДанныеФайла = ДанныеФайлов[ВГраницаМассива - Инд];
		
		СтрокаОшибки = "";
		Если НЕ РаботаСФайламиКлиентСервер.МожноЛиЗанятьФайл(ДанныеФайла, СтрокаОшибки)
		 ИЛИ НЕ ДанныеФайла.Редактирует.Пустая() Тогда // Занять невозможно.
			
			ДанныеФайлов.Удалить(ВГраницаМассива - Инд);
		КонецЕсли;
	КонецЦикла;
	
	РасширениеПодключено = ПодключитьРасширениеРаботыСФайлами();
	
	// Занять файлы.
	КоличествоЗанятых = 0;
	
	Для Каждого ДанныеФайла Из ДанныеФайлов Цикл
		
		Если Не РаботаСФайламиСлужебныйВызовСервера.ЗанятьФайл(ДанныеФайла, "") Тогда 
			Продолжить;
		КонецЕсли;
		
		Если РасширениеПодключено Тогда
			НаЧтение = Ложь;
			ВРабочемКаталогеВладельца = ДанныеФайла.РабочийКаталогВладельца <> "";
			ПеререгистрироватьФайлВРабочемКаталоге(ДанныеФайла, НаЧтение, ВРабочемКаталогеВладельца);
		КонецЕсли;
		
		КоличествоЗанятых = КоличествоЗанятых + 1;
	КонецЦикла;
	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Занять файлы'"),
		,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Файлы (%1 из %2) заняты для редактирования.'"),
			КоличествоЗанятых,
			МассивФайлов.Количество()),
		БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

// Открывает файл для редактирования.
//
// Параметры:
//  ОбъектСсылка            - СправочникСсылка.Файлы - файл.
//  УникальныйИдентификатор - УникальныйИдентификатор формы.
//  РабочийКаталогВладельца - Строка - рабочий каталог владельца.
//
// Возвращаемое значение:
//  Булево. Истина, если операция выполнена успешно.
//
Функция РедактироватьФайлПоСсылке(ОбъектСсылка,
                                  УникальныйИдентификатор = Неопределено,
                                  РабочийКаталогВладельца = Неопределено) Экспорт
	
	Перем ДанныеФайла;
	
	ОбщегоНазначенияКлиент.ПредложитьУстановкуРасширенияРаботыСФайлами();
	
	РасширениеПодключено = ПодключитьРасширениеРаботыСФайлами();
	
	СтрокаОшибки = "";
	Если НЕ РаботаСФайламиСлужебныйВызовСервера.ПолучитьДанныеФайлаДляОткрытияИЗанятьФайл(ОбъектСсылка, ДанныеФайла, 
		СтрокаОшибки, УникальныйИдентификатор, РабочийКаталогВладельца) Тогда
		
		СтандартнаяОбработка = Истина;
		РаботаСФайламиКлиентПереопределяемый.ПриОшибкеЗахватаФайла(ДанныеФайла, СтандартнаяОбработка);
		
		Если СтандартнаяОбработка Тогда
			// Если занять нельзя, тогда выводится сообщение об ошибке.
			Предупреждение(СтрокаОшибки);
		КонецЕсли;
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Если РасширениеПодключено Тогда
		НаЧтение = Ложь;
		ВРабочемКаталогеВладельца = ДанныеФайла.РабочийКаталогВладельца <> "";
		ПеререгистрироватьФайлВРабочемКаталоге(ДанныеФайла, НаЧтение, ВРабочемКаталогеВладельца);
	КонецЕсли;

	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Редактирование файла'"),
		ДанныеФайла.НавигационнаяСсылка,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Файл ""%1""
			           |занят для редактирования.'"), Строка(ДанныеФайла.Ссылка)),
			БиблиотекаКартинок.Информация32);
	
	// Если Файл без файла, тогда открывается карточка.
	Если ДанныеФайла.Версия.Пустая() Тогда 
		ОткрытьЗначение(ДанныеФайла.Ссылка);
		Возврат Истина;
	КонецЕсли;
	
	Если РасширениеПодключено Тогда
		ПолноеИмяФайла = "";
		Результат = ПолучитьФайлВерсииВРабочийКаталог(ДанныеФайла, ПолноеИмяФайла, УникальныйИдентификатор);
		Если Результат Тогда
			ОткрытьФайлПриложением(ДанныеФайла, ПолноеИмяФайла);
		КонецЕсли;
	Иначе
		ФайловыеФункцииСлужебныйКлиент.ПоказатьНапоминаниеПриРедактировании();
		
		ИмяФайла = ОбщегоНазначенияКлиентСервер.ПолучитьИмяСРасширением(
			ДанныеФайла.ПолноеНаименованиеВерсии, ДанныеФайла.Расширение);
		
		ПолучитьФайл(ДанныеФайла.НавигационнаяСсылкаТекущейВерсии, ИмяФайла, Истина);
		
		// для варианта с хранением файлов на диске (на сервере) удаляем Файл из временного хранилища после получения
		Если ЭтоАдресВременногоХранилища(ДанныеФайла.НавигационнаяСсылкаТекущейВерсии) Тогда
			УдалитьИзВременногоХранилища(ДанныеФайла.НавигационнаяСсылкаТекущейВерсии);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Открывает файл для редактирования.
//
// Параметры:
//  ДанныеФайла             - Структура с данными файла.
//  УникальныйИдентификатор - УникальныйИдентификатор формы.
//
Процедура РедактироватьФайл(ДанныеФайла, УникальныйИдентификатор = Неопределено) Экспорт
	
	ОбщегоНазначенияКлиент.ПредложитьУстановкуРасширенияРаботыСФайлами();
	
	РасширениеПодключено = ПодключитьРасширениеРаботыСФайлами();
	
	СтрокаОшибки = "";
	Если НЕ РаботаСФайламиКлиентСервер.МожноЛиЗанятьФайл(ДанныеФайла, СтрокаОшибки) Тогда
		Предупреждение(СтрокаОшибки);
		Возврат;
	КонецЕсли;
	
	// Если Файл не занят, тогда занять файл.
	Если ДанныеФайла.Редактирует.Пустая() Тогда
		ЗанятьФайл(ДанныеФайла);
	КонецЕсли;
	
	// Если Файл без файла, тогда открыть карточку.
	Если ДанныеФайла.Версия.Пустая() Тогда 
		ОткрытьЗначение(ДанныеФайла.Ссылка);
		Возврат;
	КонецЕсли;
	
	Если РасширениеПодключено Тогда
		ПолноеИмяФайла = "";
		
		Результат = ПолучитьФайлВерсииВРабочийКаталог(
			ДанныеФайла, ПолноеИмяФайла, УникальныйИдентификатор);
		
		Если Результат Тогда
			ОткрытьФайлПриложением(ДанныеФайла, ПолноеИмяФайла);
		КонецЕсли;
	Иначе
		ФайловыеФункцииСлужебныйКлиент.ПоказатьНапоминаниеПриРедактировании();
		
		ИмяФайла = ОбщегоНазначенияКлиентСервер.ПолучитьИмяСРасширением(
			ДанныеФайла.ПолноеНаименованиеВерсии, ДанныеФайла.Расширение);
		
		ПолучитьФайл(ДанныеФайла.НавигационнаяСсылкаТекущейВерсии, ИмяФайла, Истина);
		
		// При хранении файлов на диске (на сервере) удалить файл из временного хранилища после получения.
		Если ЭтоАдресВременногоХранилища(ДанныеФайла.НавигационнаяСсылкаТекущейВерсии) Тогда
			УдалитьИзВременногоХранилища(ДанныеФайла.НавигационнаяСсылкаТекущейВерсии);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Открыть версию файла.
//
// Параметры:
//  ДанныеФайла             - Структура с данными файла.
//  УникальныйИдентификатор - УникальныйИдентификатор формы.
//
Процедура ОткрытьВерсиюФайла(ДанныеФайла, УникальныйИдентификатор = Неопределено) Экспорт
	
	ОбщегоНазначенияКлиент.ПредложитьУстановкуРасширенияРаботыСФайлами();
	
	РасширениеПодключено = ПодключитьРасширениеРаботыСФайлами();
	Если РасширениеПодключено Тогда
		ПолноеИмяФайла = "";
		
		Результат = ПолучитьФайлВерсииВРабочийКаталог(
			ДанныеФайла, ПолноеИмяФайла, УникальныйИдентификатор);
		
		Если Результат Тогда
			ОткрытьФайлПриложением(ДанныеФайла, ПолноеИмяФайла);
		КонецЕсли;
	Иначе
		Адрес = РаботаСФайламиСлужебныйВызовСервера.ПолучитьНавигационнуюСсылкуДляОткрытия(
			ДанныеФайла.Версия, УникальныйИдентификатор);
		
		ИмяФайла = ОбщегоНазначенияКлиентСервер.ПолучитьИмяСРасширением(
			ДанныеФайла.ПолноеНаименованиеВерсии, ДанныеФайла.Расширение);
		
		ПолучитьФайл(Адрес, ИмяФайла, Истина);
		
		// При хранении файлов на диске (на сервере) удалить файл из временного хранилища после получения.
		Если ЭтоАдресВременногоХранилища(Адрес) Тогда
			УдалитьИзВременногоХранилища(Адрес);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Закончить редактирование Файла и поместить его на сервер.
//
// Параметры:
//  ОбъектСсылка         - СправочникСсылка.Файлы - файл.
//  ИдентификаторФормы   - УникальныйИдентификатор управляемой формы.
//  ХранитьВерсии        - Булево - хранить версии.
//
//  РедактируетТекущийПользователь - Булево - файл редактирует текущий пользователь.
//
//  Редактирует          - СправочникСсылка.Пользователи - кто занял файл.
//  АвторТекущейВерсии   - СправочникСсылка.Пользователи - Автор текущей версии.
//
//  ПереданныйПолныйПутьКФайлу - Строка - полный путь к файлу
//                       (вместо взятия пути из рабочего каталога).
//
//  СоздатьНовуюВерсию   - Булево - Создать новую версию.
//  КомментарийКВерсии   - Строка - Комментарий к версии.
//  ПоказыватьОповещение - Булево - Показывать оповещение.
//  ПрименитьКоВсем      - Булево - Применить ко всем.
//  ОсвобождатьФайлы     - Булево - Освобождать файлы.
//
Функция ЗакончитьРедактирование(ОбъектСсылка,
                                ИдентификаторФормы,
                                Знач ХранитьВерсии = Неопределено,
                                Знач РедактируетТекущийПользователь = Неопределено,
                                Знач Редактирует = Неопределено,
                                Знач АвторТекущейВерсии = Неопределено,
                                ПереданныйПолныйПутьКФайлу = "",
                                СоздатьНовуюВерсию = Неопределено,
                                КомментарийКВерсии = Неопределено,
                                ПоказыватьОповещение = Истина,
                                ПрименитьКоВсем = Ложь,
                                ОсвобождатьФайлы = Истина,
                                Кодировка = Неопределено) Экспорт
	
	Перем ДанныеФайла;
	
	ОбщегоНазначенияКлиент.ПредложитьУстановкуРасширенияРаботыСФайлами();
	РасширениеПодключено = ПодключитьРасширениеРаботыСФайлами();
	
	Если РасширениеПодключено Тогда
		// Веб-клиент с расширением для работы с файлами,
		// Тонкий клиент,
		// Толстый клиент.
		
		ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ПолучитьДанныеФайлаИРабочийКаталог(ОбъектСсылка);
		
		// Проверка возможности освобождения.
		СтрокаОшибки = "";
		Если НЕ ВозможностьОсвободитьФайл(ДанныеФайла.Ссылка,
		                                  ДанныеФайла.РедактируетТекущийПользователь,
		                                  ДанныеФайла.Редактирует, СтрокаОшибки) Тогда
			Предупреждение(СтрокаОшибки);
			Возврат Ложь;
		КонецЕсли;
		
		ПолныйПутьКФайлу = ПереданныйПолныйПутьКФайлу;
		Если ПолныйПутьКФайлу = "" Тогда
			
			ПолныйПутьКФайлу = ФайловыеФункцииСлужебныйКлиент
				.ПолучитьПолныйПутьКФайлуВРабочемКаталоге(ДанныеФайла);
		КонецЕсли;
		
		// Проверка наличия файла на диске.
		ФайлНовойВерсии = Новый Файл(ПолныйПутьКФайлу);
		Если НЕ ФайлНовойВерсии.Существует() Тогда
			
			Если ПрименитьКоВсем = Ложь Тогда
			
				Если НЕ ПустаяСтрока(ПолныйПутьКФайлу) Тогда
					СтрокаПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Не удалось поместить файл
						           |""%1"" (%2),
						           |в хранилище файлов, т.к. он не найден в рабочем каталоге.
						           |
						           |Освободить файл?'"),
						Строка(ДанныеФайла.Ссылка),
						ПолныйПутьКФайлу);
				Иначе
					СтрокаПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Не удалось поместить файл ""%1"",
						           |в хранилище файлов, т.к. он не найден в рабочем каталоге.
						           |
						           |Освободить файл?'"),
						Строка(ДанныеФайла.Ссылка));
					СтрокаПредупреждения = СтрокаПредупреждения + ".";
				КонецЕсли;
				
				Ответ = Вопрос(СтрокаПредупреждения, РежимДиалогаВопрос.ДаНет);
				Если Ответ = КодВозвратаДиалога.Да Тогда
					ОсвобождатьФайлы = Истина;
				Иначе
					ОсвобождатьФайлы = Ложь;
				КонецЕсли;
			КонецЕсли;
			
			Если ОсвобождатьФайлы Тогда
				ОсвободитьФайлБезВопроса(ДанныеФайла, ИдентификаторФормы);
				Возврат Истина;
			КонецЕсли;
			
			Возврат Ложь;
			
		КонецЕсли;
		
		Попытка
			ТолькоЧтение = ФайлНовойВерсии.ПолучитьТолькоЧтение();
			ФайлНовойВерсии.УстановитьТолькоЧтение(НЕ ТолькоЧтение);
			ФайлНовойВерсии.УстановитьТолькоЧтение(ТолькоЧтение);
		Исключение
			
			Предупреждение(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось поместить файл ""%1"",
				           |в хранилище файлов, т.к. он заблокирован другой программой.'"),
				Строка(ДанныеФайла.Ссылка)));
		
		КонецПопытки;
		
		// Запрос комментария и признака хранения версии.
		Если СоздатьНовуюВерсию = Неопределено Тогда
			
			ФормаВозврата = РаботаСФайламиСлужебныйКлиентПовтИсп.ПолучитьФормуВозвратаФайла();
			
			СоздатьНовуюВерсию = Истина;
			СоздатьНовуюВерсиюДоступность = Истина;
			
			Если ДанныеФайла.ХранитьВерсии Тогда
				СоздатьНовуюВерсию = Истина;
				
				// Если автор текущей версии не текущий пользователь, тогда
				// отключается доступность флажка «Не создавать новую версию».
				Если ДанныеФайла.АвторТекущейВерсии <> ДанныеФайла.Редактирует Тогда
					СоздатьНовуюВерсиюДоступность = Ложь;
				Иначе
					СоздатьНовуюВерсиюДоступность = Истина;
				КонецЕсли;
			Иначе
				СоздатьНовуюВерсию = Ложь;
				СоздатьНовуюВерсиюДоступность = Ложь;
			КонецЕсли;
			
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("ФайлСсылка",                    ДанныеФайла.Ссылка);
			СтруктураПараметров.Вставить("КомментарийКВерсии",            "");
			СтруктураПараметров.Вставить("СоздатьНовуюВерсию",            СоздатьНовуюВерсию);
			СтруктураПараметров.Вставить("СоздатьНовуюВерсиюДоступность", СоздатьНовуюВерсиюДоступность);
			
			ФормаВозврата.УстановитьПараметрыИспользования(СтруктураПараметров);
			
			Результат = ФормаВозврата.ОткрытьМодально();
			Если ТипЗнч(Результат) <> Тип("Структура") Тогда
				Возврат Ложь;
			КонецЕсли;
			
			КодВозврата = Результат.КодВозврата;
			Если КодВозврата <> КодВозвратаДиалога.ОК Тогда
				Возврат Ложь;
			КонецЕсли;
			
			СоздатьНовуюВерсию = Результат.СоздатьНовуюВерсию;
			КомментарийКВерсии = Результат.КомментарийКВерсии;
			
		Иначе // Параметры СоздатьНовуюВерсию и КомментарийКВерсии переданы извне.
			
			Если ДанныеФайла.ХранитьВерсии Тогда
				
				// Если автор текущей версии не текущий пользователь, тогда
				// отключается доступность флажка «Не создавать новую версию».
				Если ДанныеФайла.АвторТекущейВерсии <> ДанныеФайла.Редактирует Тогда
					СоздатьНовуюВерсию = Истина;
				КонецЕсли;
				
			Иначе
				СоздатьНовуюВерсию = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		СтараяВерсия = ДанныеФайла.ТекущаяВерсия;
		Интерактивно = Ложь;
		
		РазмерВМб                   = ФайлНовойВерсии.Размер() / (1024 * 1024);
		ВремяИзменения              = ФайлНовойВерсии.ПолучитьВремяИзменения();
		ВремяИзмененияУниверсальное = ФайлНовойВерсии.ПолучитьУниверсальноеВремяИзменения();
		Размер                      = ФайлНовойВерсии.Размер();
		
		// Файл с признаком шифрован снова шифруется для тех же сертификатов.
		Если ДанныеФайла.Зашифрован Тогда
			
			МенеджерКриптографии = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьМенеджерКриптографии();
			
			МассивСертификатов = Новый Массив;
			
			Для Каждого СтруктураСертификата Из ДанныеФайла.МассивСертификатовШифрования Цикл
				
				Сертификат = Неопределено;
				Если СтруктураСертификата.Сертификат <> Неопределено Тогда
					Сертификат = Новый СертификатКриптографии(СтруктураСертификата.Сертификат);
				Иначе
					Сертификат = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьСертификатПоОтпечатку(
						СтруктураСертификата.Отпечаток);
				КонецЕсли;
				МассивСертификатов.Добавить(Сертификат);
				
			КонецЦикла;
			
			Если МассивСертификатов.Количество() = 0 Тогда 
				СтруктураВозврата = ВыбратьСертификатыДляШифрования(ДанныеФайла);
				
				Если ТипЗнч(СтруктураВозврата) = Тип("Массив") Тогда
					МассивСертификатов = СтруктураВозврата;
					
					ЗаписатьСертификатыВТабличнуюЧасть(
						ДанныеФайла.Ссылка, МассивСертификатов, ИдентификаторФормы);
				Иначе
					Возврат Ложь;
				КонецЕсли;
			КонецЕсли;
			
			ИмяФайлаСПутемШифрованное = ПолныйПутьКФайлу + ".crp";
			
			МенеджерКриптографии.Зашифровать(
				ПолныйПутьКФайлу, ИмяФайлаСПутемШифрованное, МассивСертификатов);
			
			УдалитьФайл(ПолныйПутьКФайлу);
			ПереместитьФайл(ИмяФайлаСПутемШифрованное, ПолныйПутьКФайлу);
		КонецЕсли;
		
		Пока Истина Цикл
			Попытка
				АдресВременногоХранилища = "";
				ВыбранныйПутьКФайлу = "";
				
				ИмяФайла = ФайлНовойВерсии.Имя;
				
				ТекстПояснения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Выполняется передача файла ""%1"" (%2 Мб)...
					           |Пожалуйста, подождите.'"),
					ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерВМб));
				
				Состояние(ТекстПояснения);
				
				ПомещаемыеФайлы = Новый Массив;
				Описание = Новый ОписаниеПередаваемогоФайла(ПолныйПутьКФайлу, "");
				ПомещаемыеФайлы.Добавить(Описание);
				
				ПомещенныеФайлы = Новый Массив;
				
				Если ПоместитьФайлы(ПомещаемыеФайлы,
				                    ПомещенныеФайлы,
				                    ,
				                    Интерактивно,
				                    ИдентификаторФормы) Тогда
					Состояние();
					
					Если ПомещенныеФайлы.Количество() = 1 Тогда
						АдресВременногоХранилища = ПомещенныеФайлы[0].Хранение;
					КонецЕсли;
					
					ЭтоВебКлиент = Ложь;
					
					ТекстНеИзвлеченНаКлиенте = Ложь;
					#Если ВебКлиент Тогда
						ТекстНеИзвлеченНаКлиенте = Истина;
					#КонецЕсли
					
					ОбщиеНастройкиРаботыСФайлами = ФайловыеФункцииСлужебныйКлиентСервер.ОбщиеНастройкиРаботыСФайлами();
					
					ИмяБезРасширения = ФайлНовойВерсии.ИмяБезРасширения;
					Расширение       = ФайлНовойВерсии.Расширение;
					
					Если НЕ ОбщиеНастройкиРаботыСФайлами.ИзвлекатьТекстыФайловНаСервере Тогда
						
						АдресВременногоХранилищаТекста =
							ФайловыеФункцииСлужебныйКлиентСервер.ИзвлечьТекстВоВременноеХранилище(
								ПолныйПутьКФайлу, ИдентификаторФормы, , Кодировка);
					Иначе
						АдресВременногоХранилищаТекста = "";
					КонецЕсли;
					
					ВРабочемКаталогеВладельца = ДанныеФайла.РабочийКаталогВладельца <> "";
					
					НеМенятьЗаписьВРабочемКаталоге = Ложь;
					Если ПереданныйПолныйПутьКФайлу <> "" Тогда
						НеМенятьЗаписьВРабочемКаталоге = Истина;
					КонецЕсли;
					
					ВерсияОбновлена = РаботаСФайламиСлужебныйВызовСервера.ОпубликоватьИОсвободитьФайл(
						ДанныеФайла, 
						СоздатьНовуюВерсию,
						АдресВременногоХранилища,
						КомментарийКВерсии,
						ВремяИзменения,
						ВремяИзмененияУниверсальное,
						Размер,
						ИмяБезРасширения,
						Расширение,
						ПолныйПутьКФайлу,
						АдресВременногоХранилищаТекста,
						ЭтоВебКлиент,
						ТекстНеИзвлеченНаКлиенте,
						ВРабочемКаталогеВладельца,
						НеМенятьЗаписьВРабочемКаталоге,
						ИдентификаторФормы,
						,
						ФайловыеФункцииСлужебныйКлиент.РабочийКаталогПользователя());
					
					НоваяВерсия = ДанныеФайла.ТекущаяВерсия;
					
					Если ПереданныйПолныйПутьКФайлу = "" Тогда
						
						УдалятьФайлИзЛокальногоКэшаФайловПриЗавершенииРедактирования =
							ФайловыеФункцииСлужебныйКлиентСервер.ПерсональныеНастройкиРаботыСФайлами(
								).УдалятьФайлИзЛокальногоКэшаФайловПриЗавершенииРедактирования;
						
						Если УдалятьФайлИзЛокальногоКэшаФайловПриЗавершенииРедактирования = Неопределено Тогда
							УдалятьФайлИзЛокальногоКэшаФайловПриЗавершенииРедактирования = Ложь;
						КонецЕсли;
						
						Если ДанныеФайла.РабочийКаталогВладельца <> "" Тогда
							УдалятьФайлИзЛокальногоКэшаФайловПриЗавершенииРедактирования = Ложь;
						КонецЕсли;
						
						Если УдалятьФайлИзЛокальногоКэшаФайловПриЗавершенииРедактирования Тогда
							УдалитьФайлИзРабочегоКаталога(НоваяВерсия);
						Иначе
							Файл = Новый Файл(ПолныйПутьКФайлу);
							Файл.УстановитьТолькоЧтение(Истина);
						КонецЕсли;
					КонецЕсли;
					
					Если ПоказыватьОповещение Тогда
						
						Если ВерсияОбновлена Тогда
							ШаблонПояснения = НСтр("ru = 'Файл ""%1""
							                             |обновлен и освобожден.'");
						Иначе
							ШаблонПояснения = НСтр("ru = 'Файл ""%1""
							                             |не изменился и освобожден.'");
							ПоказатьИнформациюФайлНеБылИзменен();
						КонецЕсли;
						
						ПоказатьОповещениеПользователя(
							НСтр("ru = 'Редактирование закончено'"),
							ДанныеФайла.НавигационнаяСсылка,
							СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								ШаблонПояснения, Строка(ДанныеФайла.Ссылка)),
							БиблиотекаКартинок.Информация32);
					КонецЕсли;
					
					// Удаление зашифрованного файла из кеша.
					Если ДанныеФайла.Зашифрован Тогда
						УдалитьФайл(ПолныйПутьКФайлу);
					КонецЕсли;
					
					Возврат Истина;
				Иначе
					Состояние();
					Возврат Ложь;
				КонецЕсли;
				
			Исключение
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				
				ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось поместить файл ""%1""
					           |в хранилище файлов по причине
					           |""%2"".
					           |
					           |Повторить операцию?'"),
					Строка(ДанныеФайла.Ссылка),
					КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
				
				КодВозврата = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ПовторитьОтмена);
				
				Если КодВозврата = КодВозвратаДиалога.Отмена Тогда
					Возврат Ложь;
				КонецЕсли;
				
			КонецПопытки;
		КонецЦикла;
		
	Иначе // Веб-клиент без расширения для работы с файлами.
		
		Если ХранитьВерсии = Неопределено Тогда
			ДанныеФайла  = РаботаСФайламиСлужебныйВызовСервера.ПолучитьДанныеФайла(ОбъектСсылка);
			
			ХранитьВерсии                  = ДанныеФайла.ХранитьВерсии;
			РедактируетТекущийПользователь = ДанныеФайла.РедактируетТекущийПользователь;
			Редактирует                    = ДанныеФайла.Редактирует;
			АвторТекущейВерсии             = ДанныеФайла.АвторТекущейВерсии;
			Кодировка                      = ДанныеФайла.КодировкаТекущейВерсии;
		КонецЕсли;

		// Проверка возможности освобождения файла.
		СтрокаОшибки = "";
		Если НЕ ВозможностьОсвободитьФайл(ОбъектСсылка,
		                                  РедактируетТекущийПользователь,
		                                  Редактирует,
		                                  СтрокаОшибки) Тогда
			Предупреждение(СтрокаОшибки);
			Возврат Ложь;
		КонецЕсли;
		
		ПолныйПутьКФайлу = "";
		
		Если СоздатьНовуюВерсию = Неопределено Тогда
			ФормаВозврата = РаботаСФайламиСлужебныйКлиентПовтИсп.ПолучитьФормуВозвратаФайла();
			
			СоздатьНовуюВерсию = Истина;
			СоздатьНовуюВерсиюДоступность = Истина;
			
			Если ХранитьВерсии Тогда
				СоздатьНовуюВерсию = Истина;
				
				// Если автор текущей версии не текущий пользователь, тогда
				// отключается доступность флажка «Не создавать новую версию».
				Если АвторТекущейВерсии <> Редактирует Тогда
					СоздатьНовуюВерсиюДоступность = Ложь;
				Иначе
					СоздатьНовуюВерсиюДоступность = Истина;
				КонецЕсли;
			Иначе
				СоздатьНовуюВерсию = Ложь;
				СоздатьНовуюВерсиюДоступность = Ложь;
			КонецЕсли;
			
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("ФайлСсылка",                    ОбъектСсылка);
			СтруктураПараметров.Вставить("КомментарийКВерсии",            "");
			СтруктураПараметров.Вставить("СоздатьНовуюВерсию",            СоздатьНовуюВерсию);
			СтруктураПараметров.Вставить("СоздатьНовуюВерсиюДоступность", СоздатьНовуюВерсиюДоступность);
			
			ФормаВозврата.УстановитьПараметрыИспользования(СтруктураПараметров);
			
			Результат = ФормаВозврата.ОткрытьМодально();
			Если ТипЗнч(Результат) <> Тип("Структура") Тогда
				Возврат Ложь;
			КонецЕсли;
			
			КодВозврата = Результат.КодВозврата;
			Если КодВозврата <> КодВозвратаДиалога.ОК Тогда
				Возврат Ложь;
			КонецЕсли;
			
			СоздатьНовуюВерсию = Результат.СоздатьНовуюВерсию;
			КомментарийКВерсии = Результат.КомментарийКВерсии;
			
		Иначе // Параметры СоздатьНовуюВерсию и КомментарийКВерсии переданы извне.
			
			Если ХранитьВерсии Тогда
				
				// Если автор текущей версии не текущий пользователь, тогда
				// отключается доступность флажка «Не создавать новую версию».
				Если АвторТекущейВерсии <> Редактирует Тогда
					СоздатьНовуюВерсию = Истина;
				КонецЕсли;
				
			Иначе
				СоздатьНовуюВерсию = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		Интерактивно = Истина;
		
		Пока Истина Цикл
			Попытка
				АдресВременногоХранилища = "";
				ВыбранныйПутьКФайлу = "";
				ПоказатьНапоминаниеПередПоместитьФайл();
				
				Если ПоместитьФайл(АдресВременногоХранилища,
				                   ПолныйПутьКФайлу,
				                   ВыбранныйПутьКФайлу,
				                   Интерактивно,
				                   ИдентификаторФормы) Тогда
					
					АдресВременногоХранилищаТекста = "";
					ИмяБезРасширения = "";
					Расширение = "";
					
					ЭтоВебКлиент = Истина;
					
					ТекстНеИзвлеченНаКлиенте = Ложь;
					#Если ВебКлиент Тогда
						ТекстНеИзвлеченНаКлиенте = Истина;
					#КонецЕсли
					
					ВремяИзменения = Дата('00010101'); // Т.к. невозможно получить дату изменения файла на диске.
					ВремяИзмененияУниверсальное = Дата('00010101');
					Размер = 0; // Т.к. невозможно получить размер файла на диске.
					
					СтрокиПути = ОбщегоНазначенияКлиентСервер.РазложитьСтрокуПоТочкамИСлэшам(ВыбранныйПутьКФайлу);
					
					Если СтрокиПути.Количество() >= 2 Тогда
						Расширение = СтрокиПути[СтрокиПути.Количество()-1];
						ИмяБезРасширения = СтрокиПути[СтрокиПути.Количество()-2];
					КонецЕсли;
					
					ВерсияОбновлена =
						РаботаСФайламиСлужебныйВызовСервера.ПолучитьДанныеФайлаИОпубликоватьИОсвободитьФайл(
							ОбъектСсылка,
							ДанныеФайла,
							СоздатьНовуюВерсию,
							АдресВременногоХранилища,
							КомментарийКВерсии,
							ВремяИзменения,
							ВремяИзмененияУниверсальное,
							Размер,
							ИмяБезРасширения,
							Расширение,
							ПолныйПутьКФайлу,
							АдресВременногоХранилищаТекста,
							ЭтоВебКлиент,
							ТекстНеИзвлеченНаКлиенте,
							ИдентификаторФормы,
							ФайловыеФункцииСлужебныйКлиент.РабочийКаталогПользователя());
					
					НоваяВерсия = ДанныеФайла.ТекущаяВерсия;
					
					Если ПоказыватьОповещение Тогда
						
						Если ВерсияОбновлена Тогда
							ШаблонПояснения = НСтр("ru = 'Файл ""%1""
							                             |обновлен и освобожден.'");
						Иначе
							ШаблонПояснения = НСтр("ru = 'Файл ""%1""
							                             |не изменился и освобожден.'");
							ПоказатьИнформациюФайлНеБылИзменен();
						КонецЕсли;
						
						ПоказатьОповещениеПользователя(
							НСтр("ru = 'Редактирование закончено'"),
							ДанныеФайла.НавигационнаяСсылка,
							СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								ШаблонПояснения, Строка(ДанныеФайла.Ссылка)),
							БиблиотекаКартинок.Информация32);
					КонецЕсли;
						
					Возврат Истина;
				Иначе
					Возврат Ложь;
				КонецЕсли;
				
			Исключение
				ИнформацияОбОшибке = ИнформацияОбОшибке();
				
				ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось поместить файл ""%1""
					           |в хранилище файлов по причине
					           |""%2"".
					           |
					           |Повторить операцию?'"),
					Строка(ОбъектСсылка),
					КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
				
				КодВозврата = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ПовторитьОтмена);
				
				Если КодВозврата = КодВозвратаДиалога.Отмена Тогда
					Возврат Ложь;
				КонецЕсли;
				
			КонецПопытки;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Освобождает файлы без обновления.
//
// Параметры:
//  МассивФайлов - Массив - массив файлов
//
Процедура ОсвободитьФайлыПоСсылкам(Знач МассивФайлов) Экспорт
	
	ОбщегоНазначенияКлиент.ПредложитьУстановкуРасширенияРаботыСФайлами();
	
	// Получение массива данных файлов.
	ДанныеФайлов = Новый Массив;
	РаботаСФайламиСлужебныйВызовСервера.ПолучитьДанныеДляМассиваФайлов(МассивФайлов, ДанныеФайлов);
	ВГраницаМассива  = ДанныеФайлов.ВГраница();
	
	Для Инд = 0 По ВГраницаМассива Цикл
		ДанныеФайла = ДанныеФайлов[ВГраницаМассива - Инд];
		
		СтрокаОшибки = "";
		Если НЕ ВозможностьОсвободитьФайл(ДанныеФайла.Ссылка,
		                                  ДанныеФайла.РедактируетТекущийПользователь,
		                                  ДанныеФайла.Редактирует,
		                                  СтрокаОшибки) Тогда
			
			ДанныеФайлов.Удалить(ВГраницаМассива - Инд);
		КонецЕсли;
		
	КонецЦикла;
	
	РасширениеПодключено = ПодключитьРасширениеРаботыСФайлами();
	
	Результат = Вопрос(
		НСтр("ru = 'Отмена редактирования файлов может
		           |привести к потере Ваших изменений.
		           |
		           |Продолжить?'"),
		РежимДиалогаВопрос.ДаНет,
		,
		КодВозвратаДиалога.Нет);
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	// Занятие файлов.
	Для Каждого ДанныеФайла Из ДанныеФайлов Цикл
		
		НеЗадаватьВопрос = Истина;
		
		ОсвободитьФайл(
			ДанныеФайла.Ссылка,
			ДанныеФайла.ХранитьВерсии,
			ДанныеФайла.РедактируетТекущийПользователь,
			ДанныеФайла.Редактирует,
			Неопределено,
			НеЗадаватьВопрос);
	КонецЦикла;
	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Отменить редактирование файлов'"),
		,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Отменено редактирование файлов (%1 из %2).'"),
			ДанныеФайлов.Количество(),
			МассивФайлов.Количество()),
		БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

// Освобождает файл без обновления.
//
// Параметры:
//  ОбъектСсылка  - СправочникСсылка.Файлы - файл.
//  ХранитьВерсии - Булево - хранить версии.
//
//  РедактируетТекущийПользователь - Булево - файл редактирует текущий пользователь.
//
//  Редактирует             - СправочникСсылка.Пользователи - кто занял файл.
//  УникальныйИдентификатор - УникальныйИдентификатор управляемой формы.
//
//  НеЗадаватьВопрос - Булево - Не задавать вопрос "Отмена редактирования файла
//                      может привести к потере Ваших изменений. Продолжить?".
//
// Возвращаемое значение:
//   Булево. Истина, если операция выполнена успешно.
//
Функция ОсвободитьФайл(ОбъектСсылка,
                       Знач ХранитьВерсии = Неопределено,
                       Знач РедактируетТекущийПользователь = Неопределено,
                       Знач Редактирует = Неопределено,
                       УникальныйИдентификатор = Неопределено,
                       НеЗадаватьВопрос = Ложь) Экспорт
	
	Перем ДанныеФайла;
	
	ОбщегоНазначенияКлиент.ПредложитьУстановкуРасширенияРаботыСФайлами();
	
	Если ХранитьВерсии = Неопределено Тогда
		ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ПолучитьДанныеФайла(ОбъектСсылка);
		
		ХранитьВерсии                  = ДанныеФайла.ХранитьВерсии;
		РедактируетТекущийПользователь = ДанныеФайла.РедактируетТекущийПользователь;
		Редактирует                    = ДанныеФайла.Редактирует;
	КонецЕсли;

	СтрокаОшибки = "";
	Если НЕ ВозможностьОсвободитьФайл(ОбъектСсылка,
	                                  РедактируетТекущийПользователь,
	                                  Редактирует,
	                                  СтрокаОшибки) Тогда
		Предупреждение(СтрокаОшибки);
		Возврат Ложь;
	КонецЕсли;
	
	ПродолжитьРаботу = Истина;
	
	Если НеЗадаватьВопрос = Ложь Тогда
		
		Результат = Вопрос(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Отмена редактирования файла
			           |""%1""
			           |может привести к потере ваших изменений.
			           |
			           |Продолжить?'"),
			Строка(ОбъектСсылка)),
		РежимДиалогаВопрос.ДаНет,
		,
		КодВозвратаДиалога.Нет);
		
		Если Результат <> КодВозвратаДиалога.Да Тогда
			ПродолжитьРаботу = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ПродолжитьРаботу Тогда
		
		РасширениеПодключено = ПодключитьРасширениеРаботыСФайлами();
		
		РаботаСФайламиСлужебныйВызовСервера.ПолучитьДанныеФайлаИОсвободитьФайл(
			ОбъектСсылка, ДанныеФайла, УникальныйИдентификатор);
		
		Если РасширениеПодключено Тогда
			НаЧтение = Истина;
			ВРабочемКаталогеВладельца = ДанныеФайла.РабочийКаталогВладельца <> "";
			ПеререгистрироватьФайлВРабочемКаталоге(ДанныеФайла, НаЧтение, ВРабочемКаталогеВладельца);
		КонецЕсли;
		
		Если Не НеЗадаватьВопрос Тогда
			ПоказатьОповещениеПользователя(
				НСтр("ru = 'Файл освобожден'"),
				ДанныеФайла.НавигационнаяСсылка,
				ДанныеФайла.ПолноеНаименованиеВерсии,
				БиблиотекаКартинок.Информация32);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Освобождает файл без обновления.
//
// Параметры:
//  ДанныеФайла             - Структура с данными файла.
//  УникальныйИдентификатор - УникальныйИдентификатор управляемой формы.
//
Процедура ОсвободитьФайлБезВопроса(ДанныеФайла, УникальныйИдентификатор = Неопределено) Экспорт
	
	РаботаСФайламиСлужебныйВызовСервера.ОсвободитьФайл(ДанныеФайла, УникальныйИдентификатор);
	
	РасширениеПодключено = ПодключитьРасширениеРаботыСФайлами();
	Если РасширениеПодключено Тогда
		НаЧтение = Истина;
		ВРабочемКаталогеВладельца = ДанныеФайла.РабочийКаталогВладельца <> "";
		ПеререгистрироватьФайлВРабочемКаталоге(ДанныеФайла, НаЧтение, ВРабочемКаталогеВладельца);
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Файл освобожден'"),
		ДанныеФайла.НавигационнаяСсылка,
		ДанныеФайла.ПолноеНаименованиеВерсии,
		БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

// Освобождает файлы без обновления.
//
// Параметры:
//  ОбъектыСсылка - Массив - массив файлов.
//
Процедура ОсвободитьФайлы(ОбъектыСсылка) Экспорт
	
	СписокНевозможноОсвободить = Новый СписокЗначений;
	
	// Получение массива данных Файлов.
	ДанныеФайлов = РаботаСФайламиСлужебныйВызовСервера.ПолучитьДанныеФайла(ОбъектыСсылка);
	ВГраницаМассива  = ДанныеФайлов.ВГраница();
	
	Для Инд = 0 По ВГраницаМассива Цикл
		ДанныеФайла = ДанныеФайлов[ВГраницаМассива - Инд];
		
		СтрокаОшибки = "";
		Если НЕ ВозможностьОсвободитьФайл(
				ДанныеФайла.Ссылка, 
				ДанныеФайла.РедактируетТекущийПользователь,
				ДанныеФайла.Редактирует, 
				СтрокаОшибки) Тогда // Освободить невозможно.
			
			СписокНевозможноОсвободить.Добавить(ДанныеФайла.Ссылка, СтрокаОшибки);
			ДанныеФайлов.Удалить(ВГраницаМассива - Инд);
		КонецЕсли;
	КонецЦикла;
	
	// Если освободить нельзя, тогда открывается диалог.
	Если СписокНевозможноОсвободить.Количество() > 0 Тогда
		
		Если НЕ ДиалогВопросаСоСписком(
		          СписокНевозможноОсвободить,
		          НСтр("ru = 'Освободить остальные файлы?'"),
		          НСтр("ru = 'При попытке освободить файлы возникли следующие ошибки:'"),
		          НСтр("ru = 'Освободить файлы'")) Тогда
			
			Возврат;
		КонецЕсли;
	Иначе
		Ответ = Вопрос(
			НСтр("ru = 'Освобождение файлов может привести
			           |к потере ваших изменений.
			           |
			           |Освободить файлы?'"),
			РежимДиалогаВопрос.ДаНет,
			,
			КодВозвратаДиалога.Нет);

		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	РасширениеПодключено = ПодключитьРасширениеРаботыСФайлами();
	
	// Освобождение файлов.
	Для Каждого ДанныеФайла Из ДанныеФайлов Цикл
		
		РаботаСФайламиСлужебныйВызовСервера.ОсвободитьФайл(ДанныеФайла);
		
		Если РасширениеПодключено Тогда
			НаЧтение = Истина;
			ВРабочемКаталогеВладельца = ДанныеФайла.РабочийКаталогВладельца <> "";
			ПеререгистрироватьФайлВРабочемКаталоге(ДанныеФайла, НаЧтение, ВРабочемКаталогеВладельца);
		КонецЕсли;
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Файл освобожден'"),
			ДанныеФайла.НавигационнаяСсылка,
			ДанныеФайла.ПолноеНаименованиеВерсии,
			БиблиотекаКартинок.Информация32);
		
	КонецЦикла;
	
КонецПроцедуры

// Перемещает файлы в указанную папку.
//
// Параметры:
//  ОбъектыСсылка - Массив - массив файлов.
//
//  Папка         - СправочникСсылка.ПапкиФайлов - папка,
//                  в которую требуется перенести файлы.
//
Процедура ПеренестиФайлыВПапку(ОбъектыСсылка, Папка) Экспорт
	
	ДанныеФайлов = РаботаСФайламиСлужебныйВызовСервера.ПеренестиФайлы(ОбъектыСсылка, Папка);
	
	Для Каждого ДанныеФайла Из ДанныеФайлов Цикл
		
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Перенос файла'"),
			ДанныеФайла.НавигационнаяСсылка,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Файл ""%1""
				           |перенесен в папку ""%2"".'"),
				Строка(ДанныеФайла.Ссылка),
				Строка(Папка)),
			БиблиотекаКартинок.Информация32);
		
	КонецЦикла;
	
КонецПроцедуры

// Публикует файлы.
//
// Параметры:
//  МассивФайлов       - Массив - массив файлов
//  ИдентификаторФормы - УникальныйИдентификатор управляемой формы.
//
Процедура ОпубликоватьФайлыПоСсылкам(Знач МассивФайлов, ИдентификаторФормы) Экспорт
	
	ОбщегоНазначенияКлиент.ПредложитьУстановкуРасширенияРаботыСФайлами();
	
	// Получение массива данных файлов.
	ДанныеФайлов = Новый Массив;
	РаботаСФайламиСлужебныйВызовСервера.ПолучитьДанныеДляМассиваФайлов(МассивФайлов, ДанныеФайлов);
	ВГраницаМассива  = ДанныеФайлов.ВГраница();
	
	Для Инд = 0 По ВГраницаМассива Цикл
		ДанныеФайла = ДанныеФайлов[ВГраницаМассива - Инд];
		
		// Проверка возможности освобождения.
		СтрокаОшибки = "";
		Если НЕ ВозможностьОсвободитьФайл(ДанныеФайла.Ссылка,
		                                  ДанныеФайла.РедактируетТекущийПользователь,
		                                  ДанныеФайла.Редактирует,
		                                  СтрокаОшибки) Тогда
		
			ДанныеФайлов.Удалить(ВГраницаМассива - Инд);
		КонецЕсли;
		
	КонецЦикла;
	
	РасширениеПодключено = ПодключитьРасширениеРаботыСФайлами();
	
	
	ФормаВозврата = РаботаСФайламиСлужебныйКлиентПовтИсп.ПолучитьФормуВозвратаФайла();
	
	СоздатьНовуюВерсию = Истина;
	СоздатьНовуюВерсиюДоступность = Истина;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ФайлСсылка",                    Неопределено);
	СтруктураПараметров.Вставить("КомментарийКВерсии",            "");
	СтруктураПараметров.Вставить("СоздатьНовуюВерсию",            СоздатьНовуюВерсию);
	СтруктураПараметров.Вставить("СоздатьНовуюВерсиюДоступность", СоздатьНовуюВерсиюДоступность);
	
	ФормаВозврата.УстановитьПараметрыИспользования(СтруктураПараметров);
	
	Результат = ФормаВозврата.ОткрытьМодально();
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	КодВозврата = Результат.КодВозврата;
	Если КодВозврата <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	СоздатьНовуюВерсию = Результат.СоздатьНовуюВерсию;
	КомментарийКВерсии = Результат.КомментарийКВерсии;
	
	Для Каждого Данные Из ДанныеФайлов Цикл
		
		ПоказыватьОповещение = Ложь;
		
		ОпубликоватьФайл(
					Данные.Ссылка,
					ИдентификаторФормы,
					Данные.ХранитьВерсии,
					Данные.РедактируетТекущийПользователь,
					Данные.Редактирует,
					Данные.АвторТекущейВерсии,
					"",
					СоздатьНовуюВерсию,
					КомментарийКВерсии,
					ПоказыватьОповещение);
	КонецЦикла;
	
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Сохранить изменения файлов'"),
		,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Сохранены изменения файлов (%1 из %2).'"),
			ДанныеФайлов.Количество(),
			МассивФайлов.Количество()),
		БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

// Опубликовать файл без его освобождения.
//
// Параметры:
//  ОбъектСсылка            - СправочникСсылка.Файлы - файл.
//  ИдентификаторФормы      - УникальныйИдентификатор формы.
//  ХранитьВерсии           - Булево.
//
//  РедактируетТекущийПользователь - Булево - файл редактирует
//                            текущий пользователь.
//
//  Редактирует             - СправочникСсылка.Пользователи - кто занял файл.
//  АвторТекущейВерсии      - СправочникСсылка.Пользователи - Автор текущей версии
//
//  ПереданныйПолныйПутьКФайлу - Строка - полный путь к файлу (вместо взятия пути
//                            из рабочего каталога).
//
//  СоздатьНовуюВерсию      - Булево - Создать новую версию.
//  КомментарийКВерсии      - Строка - Комментарий к версии.
//  ПоказыватьОповещение    - Булево - Показывать оповещение.
//
Функция ОпубликоватьФайл(
			ОбъектСсылка,
			ИдентификаторФормы,
			Знач ХранитьВерсии = Неопределено,
			Знач РедактируетТекущийПользователь = Неопределено,
			Знач Редактирует = Неопределено,
			Знач АвторТекущейВерсии = Неопределено,
			ПереданныйПолныйПутьКФайлу = "",
			СоздатьНовуюВерсию = Неопределено,
			КомментарийКВерсии = Неопределено,
			ПоказыватьОповещение = Истина) Экспорт
	
	Перем ДанныеФайла;
	Перем АдресВременногоХранилища;
	
	ОбщегоНазначенияКлиент.ПредложитьУстановкуРасширенияРаботыСФайлами();	

	РасширениеПодключено = ПодключитьРасширениеРаботыСФайлами();
	
	Если РасширениеПодключено Тогда
		// Код для тонкого клиента, толстого клиента и веб-клиента с подключенным расширением.
		
		ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ПолучитьДанныеФайлаИРабочийКаталог(ОбъектСсылка);
		
		ХранитьВерсии = ДанныеФайла.ХранитьВерсии;
		
		// Проверка возможности освобождения.
		СтрокаОшибки = "";
		Если НЕ ВозможностьОсвободитьФайл(ДанныеФайла.Ссылка, ДанныеФайла.РедактируетТекущийПользователь, ДанныеФайла.Редактирует, СтрокаОшибки) Тогда
			Предупреждение(СтрокаОшибки);
			Возврат Ложь;
		КонецЕсли;
		
		ПолныйПутьКФайлу = ПереданныйПолныйПутьКФайлу;
		Если ПолныйПутьКФайлу = "" Тогда
			
			ПолныйПутьКФайлу = ФайловыеФункцииСлужебныйКлиент
				.ПолучитьПолныйПутьКФайлуВРабочемКаталоге(ДанныеФайла);
		КонецЕсли;
		
		НеМенятьЗаписьВРабочемКаталоге = Ложь;
		Если ПереданныйПолныйПутьКФайлу <> "" Тогда
			НеМенятьЗаписьВРабочемКаталоге = Истина;
		КонецЕсли;
		
		// Проверка наличия файла на диске.
		ФайлНовойВерсии = Новый Файл(ПолныйПутьКФайлу);
		Если НЕ ФайлНовойВерсии.Существует() Тогда
			
			СтрокаПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось поместить файл ""%1"",
				           |в хранилище файлов, т.к. он не найден в рабочем каталоге.'"),
				Строка(ДанныеФайла.Ссылка));
			
			Если НЕ ПустаяСтрока(ПолныйПутьКФайлу) Тогда
				СтрокаПредупреждения = СтрокаПредупреждения + " (" + ПолныйПутьКФайлу + ").";
			Иначе
				СтрокаПредупреждения = СтрокаПредупреждения + ".";
			КонецЕсли;
			
			СтрокаПредупреждения = СтрокаПредупреждения + Символы.ПС + "Освободить файл?";
			
			КодВозврата = Вопрос(СтрокаПредупреждения, РежимДиалогаВопрос.ДаНет);
			
			Если КодВозврата = КодВозвратаДиалога.Да Тогда
				ОсвободитьФайлБезВопроса(ДанныеФайла, ИдентификаторФормы);
			КонецЕсли;
				
			Возврат Ложь;
			
		КонецЕсли;
		
		// Запрос комментария и признака хранения версии.
		Если СоздатьНовуюВерсию = Неопределено Тогда
			
			ФормаВозврата = РаботаСФайламиСлужебныйКлиентПовтИсп.ПолучитьФормуВозвратаФайла();
			
			СоздатьНовуюВерсию = Истина;
			СоздатьНовуюВерсиюДоступность = Истина;
			
			Если ДанныеФайла.ХранитьВерсии Тогда
				СоздатьНовуюВерсию = Истина;
				
				// Если автор текущей версии не текущий пользователь, тогда
				// отключается доступность флажка «Не создавать новую версию».
				Если ДанныеФайла.АвторТекущейВерсии <> ДанныеФайла.Редактирует Тогда
					СоздатьНовуюВерсиюДоступность = Ложь;
				Иначе
					СоздатьНовуюВерсиюДоступность = Истина;
				КонецЕсли;
			Иначе
				СоздатьНовуюВерсию = Ложь;
				СоздатьНовуюВерсиюДоступность = Ложь;
			КонецЕсли;
			
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("ФайлСсылка", ДанныеФайла.Ссылка);
			СтруктураПараметров.Вставить("КомментарийКВерсии", "");
			СтруктураПараметров.Вставить("СоздатьНовуюВерсию", СоздатьНовуюВерсию);
			СтруктураПараметров.Вставить("СоздатьНовуюВерсиюДоступность",
				СоздатьНовуюВерсиюДоступность);
			
			ФормаВозврата.УстановитьПараметрыИспользования(СтруктураПараметров);
			
			Результат = ФормаВозврата.ОткрытьМодально();
			Если ТипЗнч(Результат) <> Тип("Структура") Тогда
				Возврат Ложь;
			КонецЕсли;
			
			КодВозврата = Результат.КодВозврата;
			Если КодВозврата <> КодВозвратаДиалога.ОК Тогда
				Возврат Ложь;
			КонецЕсли;
			
			СоздатьНовуюВерсию = Результат.СоздатьНовуюВерсию;
			КомментарийКВерсии = Результат.КомментарийКВерсии;
			
		Иначе // Параметры СоздатьНовуюВерсию и КомментарийКВерсии переданы извне.
			
			Если ХранитьВерсии Тогда
				
				// Если автор текущей версии не текущий пользователь, тогда
				// отключается доступность флажка «Не создавать новую версию».
				Если АвторТекущейВерсии <> Редактирует Тогда
					СоздатьНовуюВерсию = Истина;
				КонецЕсли;
				
			Иначе
				СоздатьНовуюВерсию = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		Интерактивно = Ложь;
		ВыбранныйПутьКФайлу = "";
		
		ИмяФайлаСПутемВременное = "";
		
		РазмерВМб = ФайлНовойВерсии.Размер() / (1024 * 1024);
		ВремяИзменения = ФайлНовойВерсии.ПолучитьВремяИзменения();
		ВремяИзмененияУниверсальное = ФайлНовойВерсии.ПолучитьУниверсальноеВремяИзменения();
		РазмерФайла = ФайлНовойВерсии.Размер();
		
		// Если файл с признаком шифрован, тогда при публикации
		// файл снова шифруется для тех же сертификатов.
		Если ДанныеФайла.Зашифрован Тогда
			
			МассивСертификатов = Новый Массив;
			МенеджерКриптографии = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьМенеджерКриптографии();
			
			Для Каждого СтруктураСертификата Из ДанныеФайла.МассивСертификатовШифрования Цикл
				
				Сертификат = Неопределено;
				Если СтруктураСертификата.Сертификат <> Неопределено Тогда
					Сертификат = Новый СертификатКриптографии(СтруктураСертификата.Сертификат);
				Иначе
					Сертификат = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьСертификатПоОтпечатку(
						СтруктураСертификата.Отпечаток);
				КонецЕсли;
				МассивСертификатов.Добавить(Сертификат);
				
			КонецЦикла;
			
			Если МассивСертификатов.Количество() = 0 Тогда 
				СтруктураВозврата = ВыбратьСертификатыДляШифрования(ДанныеФайла);
				
				Если ТипЗнч(СтруктураВозврата) = Тип("Массив") Тогда
					МассивСертификатов = СтруктураВозврата;
					
					ЗаписатьСертификатыВТабличнуюЧасть(
						ДанныеФайла.Ссылка, МассивСертификатов, ИдентификаторФормы);
				Иначе
					Возврат Ложь;
				КонецЕсли;
			КонецЕсли;
			
			ИмяФайлаСПутемШифрованное = ПолныйПутьКФайлу + ".crp";
			
			МенеджерКриптографии.Зашифровать(
				ПолныйПутьКФайлу, ИмяФайлаСПутемШифрованное, МассивСертификатов);
			
			ИмяФайлаСПутемВременное = ПолныйПутьКФайлу + ".bak";
			ПереместитьФайл(ПолныйПутьКФайлу, ИмяФайлаСПутемВременное);
			ПереместитьФайл(ИмяФайлаСПутемШифрованное, ПолныйПутьКФайлу);
			
		КонецЕсли;
		
		ИмяФайла = ФайлНовойВерсии.Имя;
		
		ТекстПояснения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Выполняется передача файла ""%1"" (%2 Мб)...
			           |Пожалуйста, подождите.'"),
			ИмяФайла,
			ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерВМб));
		
		Состояние(ТекстПояснения);

		ПомещаемыеФайлы = Новый Массив;
		Описание = Новый ОписаниеПередаваемогоФайла(ПолныйПутьКФайлу, "");
		ПомещаемыеФайлы.Добавить(Описание);
		
		ПомещенныеФайлы = Новый Массив;
		
		Если ПоместитьФайлы(ПомещаемыеФайлы, ПомещенныеФайлы, , Интерактивно, ИдентификаторФормы) Тогда
			Состояние();
			
			Если ПомещенныеФайлы.Количество() = 1 Тогда
				АдресВременногоХранилища = ПомещенныеФайлы[0].Хранение;
			КонецЕсли;
			
			ОбщиеНастройкиРаботыСФайлами = ФайловыеФункцииСлужебныйКлиентСервер.ОбщиеНастройкиРаботыСФайлами();
			ИмяКаталога = ФайловыеФункцииСлужебныйКлиент.РабочийКаталогПользователя();
			
			ОтносительныйПутьКФайлу = "";
			
			ИмяБезРасширения = ФайлНовойВерсии.ИмяБезРасширения;
			Расширение = ФайлНовойВерсии.Расширение;
			
			ВРабочемКаталогеВладельца = ДанныеФайла.РабочийКаталогВладельца <> "";
			
			Если ДанныеФайла.РабочийКаталогВладельца <> "" Тогда // Есть рабочий каталог.
				ОтносительныйПутьКФайлу = ПолныйПутьКФайлу;
			Иначе
				Позиция = Найти(ПолныйПутьКФайлу, ИмяКаталога);
				Если Позиция <> 0 Тогда
					ОтносительныйПутьКФайлу = Сред(ПолныйПутьКФайлу, СтрДлина(ИмяКаталога) + 1);
				КонецЕсли;
			КонецЕсли;
			
			Если НЕ ОбщиеНастройкиРаботыСФайлами.ИзвлекатьТекстыФайловНаСервере Тогда
				
				АдресВременногоХранилищаТекста =
					ФайловыеФункцииСлужебныйКлиентСервер.ИзвлечьТекстВоВременноеХранилище(
						ПолныйПутьКФайлу, ИдентификаторФормы);
			Иначе
				АдресВременногоХранилищаТекста = "";
			КонецЕсли;
			
			ЭтоВебКлиент = Ложь;
			
			ТекстНеИзвлеченНаКлиенте = Ложь;
			#Если ВебКлиент Тогда
				ТекстНеИзвлеченНаКлиенте = Истина;
			#КонецЕсли
			
			ВерсияОбновлена = РаботаСФайламиСлужебныйВызовСервера.ОпубликоватьФайл(
				ДанныеФайла.Ссылка, 
				СоздатьНовуюВерсию,
				АдресВременногоХранилища,
				КомментарийКВерсии,
				ВремяИзменения,
				ВремяИзмененияУниверсальное,
				РазмерФайла,
				ИмяБезРасширения,
				Расширение,
				ОтносительныйПутьКФайлу,
				ПолныйПутьКФайлу,
				АдресВременногоХранилищаТекста,
				ЭтоВебКлиент,
				ТекстНеИзвлеченНаКлиенте,
				ВРабочемКаталогеВладельца,
				НеМенятьЗаписьВРабочемКаталоге,
				ИдентификаторФормы);
				
			Если ПоказыватьОповещение Тогда
				
				Если ВерсияОбновлена Тогда
					ПоказатьОповещениеПользователя(
						НСтр("ru = 'Новая версия сохранена'"),
						ДанныеФайла.НавигационнаяСсылка,
						ДанныеФайла.ПолноеНаименованиеВерсии,
						БиблиотекаКартинок.Информация32);
				Иначе
					ПоказатьИнформациюФайлНеБылИзменен();
					
					ПоказатьОповещениеПользователя(
						НСтр("ru = 'Новая версия не сохранена'"),
						,
						НСтр("ru = 'Файл не изменился'"),
						БиблиотекаКартинок.Информация32);
				КонецЕсли;
			КонецЕсли;
			
			// Удаление зашифрованного файла из кеша.
			Если ДанныеФайла.Зашифрован Тогда
				ПереместитьФайл(ИмяФайлаСПутемВременное, ПолныйПутьКФайлу);
			КонецЕсли;
			
		Иначе
			Состояние();
		КонецЕсли;
		
	Иначе // Веб-клиент без расширения для работы с файлами.

		Если ХранитьВерсии = Неопределено Тогда
			ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ПолучитьДанныеФайла(ОбъектСсылка);
			ХранитьВерсии                  = ДанныеФайла.ХранитьВерсии;
			РедактируетТекущийПользователь = ДанныеФайла.РедактируетТекущийПользователь;
			Редактирует                    = ДанныеФайла.Редактирует;
			АвторТекущейВерсии             = ДанныеФайла.АвторТекущейВерсии;
		КонецЕсли;

		// Проверка возможности освобождения файла.
		СтрокаОшибки = "";
		Если НЕ ВозможностьОсвободитьФайл(ОбъектСсылка, РедактируетТекущийПользователь, Редактирует, СтрокаОшибки) Тогда
			Предупреждение(СтрокаОшибки);
			Возврат Ложь;
		КонецЕсли;
		
		ПолныйПутьКФайлу = "";

		Если СоздатьНовуюВерсию = Неопределено Тогда
			
			// Запрос комментария и признака хранения версии.
			ФормаВозврата = РаботаСФайламиСлужебныйКлиентПовтИсп.ПолучитьФормуВозвратаФайла();
			
			СоздатьНовуюВерсию = Истина;
			СоздатьНовуюВерсиюДоступность = Истина;
			
			Если ХранитьВерсии Тогда
				СоздатьНовуюВерсию = Истина;
				
				// Если автор текущей версии не текущий пользователь, тогда
				// отключается доступность флажка «Не создавать новую версию».
				Если АвторТекущейВерсии <> Редактирует Тогда
					СоздатьНовуюВерсиюДоступность = Ложь;
				Иначе
					СоздатьНовуюВерсиюДоступность = Истина;
				КонецЕсли;
			Иначе
				СоздатьНовуюВерсию = Ложь;
				СоздатьНовуюВерсиюДоступность = Ложь;
			КонецЕсли;
			
			СтруктураПараметров = Новый Структура;
			СтруктураПараметров.Вставить("ФайлСсылка",                    ОбъектСсылка);
			СтруктураПараметров.Вставить("КомментарийКВерсии",            "");
			СтруктураПараметров.Вставить("СоздатьНовуюВерсию",            СоздатьНовуюВерсию);
			СтруктураПараметров.Вставить("СоздатьНовуюВерсиюДоступность", СоздатьНовуюВерсиюДоступность);
			
			ФормаВозврата.УстановитьПараметрыИспользования(СтруктураПараметров);
			
			Результат = ФормаВозврата.ОткрытьМодально();
			Если ТипЗнч(Результат) <> Тип("Структура") Тогда
				Возврат Ложь;
			КонецЕсли;
			
			КодВозврата = Результат.КодВозврата;
			Если КодВозврата <> КодВозвратаДиалога.ОК Тогда
				Возврат Ложь;
			КонецЕсли;
			
			СоздатьНовуюВерсию = Результат.СоздатьНовуюВерсию;
			КомментарийКВерсии = Результат.КомментарийКВерсии;
			
		Иначе // Параметры СоздатьНовуюВерсию и КомментарийКВерсии переданы извне.
			
			Если ХранитьВерсии Тогда
				
				// Если автор текущей версии не текущий пользователь, тогда
				// отключается доступность флажка «Не создавать новую версию».
				Если АвторТекущейВерсии <> Редактирует Тогда
					СоздатьНовуюВерсию = Истина;
				КонецЕсли;
				
			Иначе
				СоздатьНовуюВерсию = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
		Интерактивно = Истина;
		
		ВыбранныйПутьКФайлу = "";
		ПоказатьНапоминаниеПередПоместитьФайл();
		Если ПоместитьФайл(АдресВременногоХранилища,
		                   ПолныйПутьКФайлу,
		                   ВыбранныйПутьКФайлу,
		                   Интерактивно,
		                   ИдентификаторФормы) Тогда
			
			ИмяБезРасширения = "";
			Расширение = "";
			ВремяИзменения = Дата('00010101'); // Т.к. невозможно получить дату изменения файла на диске.
			ВремяИзмененияУниверсальное = Дата('00010101');
			РазмерФайла = 0; // Т.к. невозможно получить размер файла на диске.
			
			ОтносительныйПутьКФайлу = "";
			АдресВременногоХранилищаТекста = "";
			
			СтрокиПути = ОбщегоНазначенияКлиентСервер.РазложитьСтрокуПоТочкамИСлэшам(ВыбранныйПутьКФайлу);
			
			Если СтрокиПути.Количество() >= 2 Тогда
				Расширение = СтрокиПути[СтрокиПути.Количество()-1];
				ИмяБезРасширения = СтрокиПути[СтрокиПути.Количество()-2];
			КонецЕсли;

			ЭтоВебКлиент = Истина;
			
			ТекстНеИзвлеченНаКлиенте = Ложь;
			#Если ВебКлиент Тогда
				ТекстНеИзвлеченНаКлиенте = Истина;
			#КонецЕсли
			
			ВРабочемКаталогеВладельца = Ложь;
			
			РаботаСФайламиСлужебныйВызовСервера.ПолучитьДанныеФайлаИОпубликоватьФайл(
				ОбъектСсылка, 
				ДанныеФайла,
				СоздатьНовуюВерсию,
				АдресВременногоХранилища,
				КомментарийКВерсии,
				ВремяИзменения,
				ВремяИзмененияУниверсальное,
				РазмерФайла,
				ИмяБезРасширения,
				Расширение,
				ОтносительныйПутьКФайлу,
				ПолныйПутьКФайлу,
				АдресВременногоХранилищаТекста,
				ЭтоВебКлиент,
				ТекстНеИзвлеченНаКлиенте,
				ВРабочемКаталогеВладельца,
				ИдентификаторФормы);
				
			Если ПоказыватьОповещение Тогда
				ПоказатьОповещениеПользователя(
					НСтр("ru = 'Новая версия сохранена'"),
					ДанныеФайла.НавигационнаяСсылка,
					ДанныеФайла.ПолноеНаименованиеВерсии,
					БиблиотекаКартинок.Информация32);
			КонецЕсли;
		
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// При переименовании Файл и ВерсияФайла обновляет информацию
// в рабочем каталоге (имя файла на диске и в регистре).
//
// Параметры:
//  ТекущаяВерсия  - СправочникСсылка.ВерсииФайлов - версия файла.
//  НовоеИмя       - Строка - Новое имя файла.
//
Процедура ОбновитьИнформациюВРабочемКаталоге(ТекущаяВерсия, НовоеИмя) Экспорт
	
	ИмяКаталога = ФайловыеФункцииСлужебныйКлиент.РабочийКаталогПользователя();
	ПолноеИмяФайла = "";
	
	ВРабочемКаталогеНаЧтение = Истина;
	ВРабочемКаталогеВладельца = Ложь;
	
	ФайлВРабочемКаталоге = ФайлНаходитсяВЛокальномКэшеФайлов(
		Неопределено,
		ТекущаяВерсия,
		ПолноеИмяФайла,
		ВРабочемКаталогеНаЧтение,
		ВРабочемКаталогеВладельца);
	
	Если ФайлВРабочемКаталоге = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		Файл = Новый Файл(ПолноеИмяФайла);
		ТолькоИмя = Файл.Имя;
		РазмерФайла = Файл.Размер();
		ПутьБезИмени = Лев(ПолноеИмяФайла, СтрДлина(ПолноеИмяФайла) - СтрДлина(ТолькоИмя));
		НовоеПолноеИмя = ПутьБезИмени + НовоеИмя + Файл.Расширение;
		ПереместитьФайл(ПолноеИмяФайла, НовоеПолноеИмя);
		
		РаботаСФайламиСлужебныйВызовСервера.УдалитьИзРегистра(ТекущаяВерсия);
		
		РаботаСФайламиСлужебныйВызовСервера.ЗанестиИнформациюФайлаВРегистр(
			ТекущаяВерсия,
			НовоеПолноеИмя,
			ИмяКаталога,
			ВРабочемКаталогеНаЧтение,
			РазмерФайла,
			ВРабочемКаталогеВладельца);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

// Перерегистрировать В рабочем каталоге с другим флагом НаЧтение - если там вообще есть такой Файл
// Параметры
//  ДанныеФайла  - структура с данными файла
//  НаЧтение - Булево - файл помещен на чтение
//  ВРабочемКаталогеВладельца - Булево - файл в рабочем каталоге владельца (а не в основном рабочем каталоге)
Процедура ПеререгистрироватьФайлВРабочемКаталоге(ДанныеФайла, НаЧтение, ВРабочемКаталогеВладельца)
	// Если Файл без файла - ничего не делаем в рабочем каталоге
	Если ДанныеФайла.Версия.Пустая() Тогда 
		Возврат;
	КонецЕсли;

	ИмяКаталога = ФайловыеФункцииСлужебныйКлиент.РабочийКаталогПользователя();
	ПолноеИмяФайла = "";
	
	ВРабочемКаталогеНаЧтение = Истина;
	ФайлВРабочемКаталоге = ФайлНаходитсяВЛокальномКэшеФайлов(ДанныеФайла, ДанныеФайла.ТекущаяВерсия, ПолноеИмяФайла, ВРабочемКаталогеНаЧтение, ВРабочемКаталогеВладельца);
	Если ФайлВРабочемКаталоге = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСФайламиСлужебныйВызовСервера.ЗанестиИнформациюФайлаВРегистр(ДанныеФайла.ТекущаяВерсия, ПолноеИмяФайла, ИмяКаталога, НаЧтение, 0, ВРабочемКаталогеВладельца);
	Файл = Новый Файл(ПолноеИмяФайла);
	Файл.УстановитьТолькоЧтение(НаЧтение);	
КонецПроцедуры

// Удаление файла со снятием атрибута readonly
// Параметры
//  ПолноеИмяФайла - Строка -  Полное имя файла
//  ЗадаватьВопрос - Булево- Задавать вопрос об удалении
//  ШапкаВопроса - Строка - Шапка вопроса - добавляет текст к вопросу об удалении
Процедура УдалитьФайл(ПолноеИмяФайла, ЗадаватьВопрос = Неопределено, ШапкаВопроса = Неопределено) Экспорт
	
	ПодтверждатьПриУдаленииИзЛокальногоКэшаФайлов
		= ФайловыеФункцииСлужебныйКлиентСервер.ПерсональныеНастройкиРаботыСФайлами(
			).ПодтверждатьПриУдаленииИзЛокальногоКэшаФайлов;
	
	Если ЗадаватьВопрос <> Неопределено Тогда
		ПодтверждатьПриУдаленииИзЛокальногоКэшаФайлов = ЗадаватьВопрос;
	КонецЕсли;
	
	Если ПодтверждатьПриУдаленииИзЛокальногоКэшаФайлов = Истина Тогда
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Удалить файл ""%1""
			           |из рабочего каталога?'"), ПолноеИмяФайла);
		
		Если ШапкаВопроса <> Неопределено Тогда
			ТекстВопроса = ШапкаВопроса + Символы.ПС + Символы.ПС + ТекстВопроса;
		КонецЕсли;
		
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Файл = Новый Файл(ПолноеИмяФайла);
	Если Файл.Существует() Тогда
		Файл.УстановитьТолькоЧтение(Ложь);
		УдалитьФайлы(ПолноеИмяФайла);
	КонецЕсли;
	
КонецПроцедуры

// Получает Файл из хранилища файлов в рабочий каталог
// и возвращает путь к этому файлу.
//
// Параметры
//  ДанныеФайла        - Структура с данными файла.
//  ИмяФайлаСПутем     - Строка (возвращаемое значение).
//  НаЧтение           - Булево - Ложь - для чтения, Истина для редактирования.
//  ИдентификаторФормы - УникальныйИдентификатор формы.
//
// Возвращаемое значение:
//   Булево - успешно ли выполнена операция.
//
Функция ПолучитьФайлВерсииВЛокальныйКэшФайлов(
	ДанныеФайла,
	ИмяФайлаСПутем,
	НаЧтение,
	ИдентификаторФормы,
	ДополнительныеПараметры)
	
	ИмяФайлаСПутем = "";
	
	ДатаФайлаВБазе   = ДанныеФайла.ДатаМодификацииУниверсальная;
	РазмерФайлаВБазе = ДанныеФайла.Размер;
	
	ВРабочемКаталогеНаЧтение = Истина;
	ВРабочемКаталогеВладельца = Ложь;
	
	ФайлВРабочемКаталоге = ФайлНаходитсяВЛокальномКэшеФайлов(
		ДанныеФайла,
		ДанныеФайла.Версия,
		ИмяФайлаСПутем,
		ВРабочемКаталогеНаЧтение,
		ВРабочемКаталогеВладельца);
	
	Если ФайлВРабочемКаталоге = Ложь Тогда
		Возврат ПолучитьССервераИЗарегистрироватьВЛокальномКэшеФайлов(
			ДанныеФайла,
			ИмяФайлаСПутем,
			ДанныеФайла.ДатаМодификацииУниверсальная,
			НаЧтение,
			ИдентификаторФормы,
			ДополнительныеПараметры);
	КонецЕсли;

	// Получаем путь файла в рабочем каталоге - с проверкой на уникальность
	Если ИмяФайлаСПутем = "" Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Ошибка получения файла из хранилища файлов
			           |в рабочий каталог.'"));
		Возврат Ложь;
	КонецЕсли;
	
	// Выяснено, что Файл в рабочем каталоге есть.
	// Проверка даты изменения и принятие решения, что делать дальше.
	Действие = ФайловыеФункцииСлужебныйКлиент.ДействиеПриОткрытииФайлаВРабочемКаталоге(
		ИмяФайлаСПутем, ДанныеФайла);
	
	Если Действие = "ВзятьИзХранилищаИОткрыть" Тогда
		УдалитьФайл(ИмяФайлаСПутем);
		
		Возврат ПолучитьССервераИЗарегистрироватьВЛокальномКэшеФайлов(
			ДанныеФайла,
			ИмяФайлаСПутем,
			ДанныеФайла.ДатаМодификацииУниверсальная,
			НаЧтение,
			ИдентификаторФормы,
			ДополнительныеПараметры);
			
	ИначеЕсли Действие = "ОткрытьСуществующий" Тогда
		
		Если ДанныеФайла.ВРабочемКаталогеНаЧтение <> НаЧтение Тогда
			ВРабочемКаталогеВладельца = ДанныеФайла.РабочийКаталогВладельца <> "";
			
			ПеререгистрироватьВРабочемКаталоге(
				ДанныеФайла.Версия,
				ИмяФайлаСПутем,
				НаЧтение,
				ВРабочемКаталогеВладельца);
		КонецЕсли;
		
		Возврат Истина;
	
	Иначе // Действие = "Отмена".
		ИмяФайлаСПутем = "";
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Проверяет максимальную длину, если нужно - меняет рабочий каталог и переносит файлы
//
// Параметры
//  ДанныеФайла  - структура с данными файла
//  ИмяФайлаСПутем - Строка - полное имя файла
//  ИмяФайла - Строка - имя файла (без пути)
//
// Возвращаемое значение:
//   Булево  - успешно ли выполнена операция - т.е. длина полного имени файла не превышает 260
Функция ПроверитьМаксимальнуюДлинуПолногоПутиВРабочемКаталоге(ДанныеФайла, ИмяФайлаСПутем, ИмяФайла)
#Если Не ВебКлиент Тогда
	
	ИмяКаталогаПрежнееЗначение = ДанныеФайла.РабочийКаталогВладельца;
	
	МаксимальнаяДлинаПолногоПути = 260;
	Если НРег(ДанныеФайла.Расширение) = "xls" ИЛИ НРег(ДанныеФайла.Расширение) = "xlsx" Тогда
		МаксимальнаяДлинаПолногоПути = 218; // Excel Длина имени файла вместе с путем не должна превышать 218 знака
	КонецЕсли;
	
	МаксимальнаяДлинаИмениФайла = МаксимальнаяДлинаПолногоПути - 5; // 5 - минимум для "C:\1\"
	
	Если СтрДлина(ИмяФайлаСПутем) > МаксимальнаяДлинаПолногоПути Тогда
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Длина полного пути к файлу (рабочий каталог плюс имя файла) превышает %1 символов
			           |""%2"".'"),
			МаксимальнаяДлинаПолногоПути,
			ИмяФайлаСПутем);
	
		ПутьКаталогаПользователя = КаталогДанныхПользователя();
		МаксимальнаяДлинаИмениФайла = МаксимальнаяДлинаПолногоПути - СтрДлина(ПутьКаталогаПользователя);
		
		// если  имя  файла плюс 5 превышает 260 - пишем "Измените имя  файла на более короткое. ОК" и выходим.
		Если СтрДлина(ИмяФайла) > МаксимальнаяДлинаИмениФайла Тогда
			ТекстСообщения = ТекстСообщения + Символы.ВК + Символы.ВК
				+ НСтр("ru = 'Измените имя файла на более короткое.'");
			Предупреждение(ТекстСообщения);
			Возврат Ложь;
		КонецЕсли;
		
		// Если структура папок (путь к рабочему каталогу текущей папки) превышает 260-5 (1.txt), пишем "Измените имена папок или перенесите текущую папку в другую папку"
		Если СтрДлина(ДанныеФайла.РабочийКаталогВладельца) > МаксимальнаяДлинаПолногоПути - 5 Тогда
			ТекстСообщения = ТекстСообщения + Символы.ВК + Символы.ВК
				+ НСтр("ru = 'Измените имена папок или перенесите текущую папку в другую папку.'");
			Предупреждение(ТекстСообщения);
			Возврат Ложь;
		КонецЕсли;
		
		Пока Истина Цикл
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Длина полного пути к файлу (рабочий каталог плюс имя файла) превышает %1 символов
				           |""%2"".'"),
				МаксимальнаяДлинаПолногоПути, ИмяФайлаСПутем);
			
			ТекстВопроса = ТекстСообщения + Символы.ВК + Символы.ВК 
				+ НСтр("ru = 'Выбрать другой основной рабочий каталог?
				             |(Содержимое рабочего каталога будет перенесено в выбранный каталог).'");
			Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			Если Ответ = КодВозвратаДиалога.Нет Тогда
				Возврат Ложь;
			КонецЕсли;
			
			// Выбираем другой путь к рабочему каталогу.
			Заголовок = НСтр("ru = 'Выберите другой рабочий каталог'");
			Если Не ВыбратьПутьКРабочемуКаталогу(ДанныеФайла.РабочийКаталогВладельца, Заголовок, Истина) Тогда
				Возврат Ложь;
			КонецЕсли;
			
			ИмяФайлаСПутем = ДанныеФайла.РабочийКаталогВладельца + ИмяФайла;
			
			Если СтрДлина(ИмяФайлаСПутем) <= МаксимальнаяДлинаПолногоПути Тогда // уложились в 260 символов
				
				Если ПеренестиСодержимоеРабочегоКаталога(ИмяКаталогаПрежнееЗначение, ДанныеФайла.РабочийКаталогВладельца) Тогда
					// Регистр сведений ФайлыВРабочемКаталоге - сейчас там полный путь к файлу -
					// надо его менять - выделять общую часть и replace. -просто SQL запросом -
					// для текущего пользователя.
					РаботаСФайламиСлужебныйВызовСервера.СохранитьРабочийКаталогПапкиИЗаменитьПутиВРегистре(ДанныеФайла.Владелец, 
						ДанныеФайла.РабочийКаталогВладельца, ИмяКаталогаПрежнееЗначение);
				Иначе
					Возврат Ложь;
				КонецЕсли;
				
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
	
	КонецЕсли;
	
#КонецЕсли
	Возврат Истина;
КонецФункции

// Получает Файл из хранилища файлов в рабочий каталог папки
// и возвращает путь к этому файлу.
//
// Параметры
//  ДанныеФайла        - Структура с данными файла.
//  ИмяФайлаСПутем     - Строка (возвращаемое значение).
//  НаЧтение           - Булево - Ложь - для чтения, Истина для редактирования.
//  ИдентификаторФормы - УникальныйИдентификатор формы.
//
// Возвращаемое значение:
//   Булево - успешно ли выполнена операция.
//
Функция ПолучитьФайлВерсииВРабочийКаталогПапки(
	ДанныеФайла,
	ИмяФайлаСПутем,
	НаЧтение,
	ИдентификаторФормы,
	ДополнительныеПараметры)
	
	Перем Версия;
	Перем ДатаПомещения;
	
	ВРабочемКаталогеВладельца = Истина;
	
	
	
	// Формирование имени файла с расширением
	ИмяФайла = ДанныеФайла.ПолноеНаименованиеВерсии;
	Если НЕ ПустаяСтрока(ДанныеФайла.Расширение) Тогда 
		
		ИмяФайла = ОбщегоНазначенияКлиентСервер.ПолучитьИмяСРасширением(
			ИмяФайла, ДанныеФайла.Расширение);
	КонецЕсли;
	
	Если ИмяФайлаСПутем = "" Тогда
		ИмяФайлаСПутем = ДанныеФайла.РабочийКаталогВладельца + ИмяФайла;
		
		Если НЕ ПроверитьМаксимальнуюДлинуПолногоПутиВРабочемКаталоге(ДанныеФайла, ИмяФайлаСПутем, ИмяФайла) Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// Поиск регистрации файла в рабочем каталоге (полное имя с путем).
	НайденныеСвойства = РаботаСФайламиСлужебныйВызовСервера.НайтиВРегистреПоПути(ИмяФайлаСПутем);
	ФайлЕстьВРегистре = НайденныеСвойства.ФайлЕстьВРегистре;
	Версия            = НайденныеСвойства.Версия;
	ДатаПомещения     = ?(ФайлЕстьВРегистре, НайденныеСвойства.ДатаПомещения, ДатаПомещения);
	Владелец          = НайденныеСвойства.Владелец;
	НомерВерсии       = НайденныеСвойства.НомерВерсии;
	ВРегистреНаЧтение = НайденныеСвойства.ВРегистреНаЧтение;
	ВРегистреКодФайла = НайденныеСвойства.ВРегистреКодФайла;
	ВРегистреПапка    = НайденныеСвойства.ВРегистреПапка;
	
	ФайлНаДиске = Новый Файл(ИмяФайлаСПутем);
	ФайлНаДискеСуществует = ФайлНаДиске.Существует();
	
	// Удаление регистрации файла, если он не существует.
	Если ФайлЕстьВРегистре И НЕ ФайлНаДискеСуществует Тогда
		РаботаСФайламиСлужебныйВызовСервера.УдалитьИзРегистра(Версия);
		ФайлЕстьВРегистре = Ложь;
	КонецЕсли;
	
	Если НЕ ФайлЕстьВРегистре И НЕ ФайлНаДискеСуществует Тогда
		
		Возврат ПолучитьССервераИЗарегистрироватьВРабочемКаталогеПапки(
			ДанныеФайла,
			ИмяФайлаСПутем,
			ДанныеФайла.ДатаМодификацииУниверсальная,
			НаЧтение,
			ИдентификаторФормы,
			ДополнительныеПараметры);
	КонецЕсли;
	
	// Установлено, что в рабочем каталоге файл существует.
	
	Если ФайлЕстьВРегистре И Версия <> ДанныеФайла.ТекущаяВерсия Тогда
		
		Если Владелец = ДанныеФайла.Ссылка И ВРегистреНаЧтение = Истина Тогда
			// Если владелец версий файла совпадает и
			// существующий файл в рабочем каталоге зарегистрирован для чтения,
			// тогда можно заменить его другим файлом из хранилища.
			Возврат ПолучитьССервераИЗарегистрироватьВРабочемКаталогеПапки(
				ДанныеФайла,
				ИмяФайлаСПутем,
				ДанныеФайла.ДатаМодификацииУниверсальная,
				НаЧтение,
				ИдентификаторФормы,
				ДополнительныеПараметры);
		КонецЕсли;
		
		Если ДанныеФайла.Владелец = ВРегистреПапка Тогда // Одна и та же папка.
			СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В рабочем каталоге уже есть файл
				           |""%1"",
				           |связанный с другим файлом в информационной базе.
				           |
				           |Код файла в хранилище файлов: %2.
				           |Код файла в рабочем каталоге: %3.
				           |
				           |Переименуйте один из файлов в информационной базе.'"),
				ИмяФайлаСПутем,
				ДанныеФайла.КодФайла,
				ВРегистреКодФайла);
		Иначе
			СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В рабочем каталоге уже есть файл
				           |""%1"",
				           |связанный с другим файлом информационной базы.
				           |
				           |Код файла в хранилище файлов: %2.
				           |Код файла в рабочем каталоге: %3.
				           |
				           |В информационной базе измените рабочий каталог одной из папок.
				           |(У двух папок не должно быть одинакового рабочего каталога).'"),
				ИмяФайлаСПутем,
				ДанныеФайла.КодФайла,
				ВРегистреКодФайла);
		КонецЕсли;
		
		Предупреждение(СтрокаСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	// Выяснено, что Файл в рабочем каталоге есть.
	// Либо файл незарегистрирован, либо зарегистрирован и версия совпадает.
	
	// Проверка даты изменения и принятие решения, что делать дальше.
	Действие = ФайловыеФункцииСлужебныйКлиент.ДействиеПриОткрытииФайлаВРабочемКаталоге(
		ИмяФайлаСПутем, ДанныеФайла);
	
	Если Действие = "ВзятьИзХранилищаИОткрыть" Тогда
		// В рабочем каталоге папки настройка подтверждения при удалении не используется.
		УдалитьФайл(ИмяФайлаСПутем, Ложь); 
		
		Возврат ПолучитьССервераИЗарегистрироватьВЛокальномКэшеФайлов(
			ДанныеФайла,
			ИмяФайлаСПутем,
			ДанныеФайла.ДатаМодификацииУниверсальная,
			НаЧтение,
			ИдентификаторФормы,
			ДополнительныеПараметры);
			
	ИначеЕсли Действие = "ОткрытьСуществующий" Тогда
		
		Если ДанныеФайла.ВРабочемКаталогеНаЧтение <> НаЧтение
		 ИЛИ НЕ ФайлЕстьВРегистре Тогда
			
			ВРабочемКаталогеВладельца = ДанныеФайла.РабочийКаталогВладельца <> "";
			
			ПеререгистрироватьВРабочемКаталоге(
				ДанныеФайла.Версия,
				ИмяФайлаСПутем,
				НаЧтение,
				ВРабочемКаталогеВладельца);
		КонецЕсли;
		
		Возврат Истина;
	
	Иначе // Действие = "Отмена".
		ПолноеИмяФайла = "";
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Получить Файл из информационной базы на локальный диск и возвращает путь
//к этому файлу в параметре
//
// Параметры
//  ДанныеФайла  - структура с данными файла
//  ПолноеИмяФайла - Строка - здесь возвращается полное имя файла
//  ИдентификаторФормы - уникальный идентификатор формы
//
// Возвращаемое значение:
//   Булево  - успешно ли выполнена операция
//
Функция ПолучитьФайлВерсииВРабочийКаталог(
	ДанныеФайла,
	ПолноеИмяФайла,
	ИдентификаторФормы = Неопределено,
	ДополнительныеПараметры = Неопределено) Экспорт
	
	ИмяКаталога = ФайловыеФункцииСлужебныйКлиент.РабочийКаталогПользователя();
	
	Если ИмяКаталога = Неопределено ИЛИ ПустаяСтрока(ИмяКаталога) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	РабочийКаталогВладельца = ДанныеФайла.РабочийКаталогВладельца;
	
	НаЧтение = ДанныеФайла.НаЧтение;
	
	Если (НаЧтение И РабочийКаталогВладельца = "")
	 ИЛИ ДанныеФайла.Версия <> ДанныеФайла.ТекущаяВерсия Тогда
		
		Возврат ПолучитьФайлВерсииВЛокальныйКэшФайлов(
			ДанныеФайла, ПолноеИмяФайла, НаЧтение, ИдентификаторФормы, ДополнительныеПараметры);
		
	ИначеЕсли РабочийКаталогВладельца = "" Тогда
		Возврат ПолучитьФайлВерсииВЛокальныйКэшФайлов(
			ДанныеФайла, ПолноеИмяФайла, НаЧтение, ИдентификаторФормы, ДополнительныеПараметры);
		
	ИначеЕсли НаЧтение И РабочийКаталогВладельца <> "" Тогда 
		Возврат ПолучитьФайлВерсииВРабочийКаталогПапки(
			ДанныеФайла, ПолноеИмяФайла, НаЧтение, ИдентификаторФормы, ДополнительныеПараметры);
		
	ИначеЕсли НаЧтение = Ложь И РабочийКаталогВладельца <> "" Тогда
		Возврат ПолучитьФайлВерсииВРабочийКаталогПапки(
			ДанныеФайла, ПолноеИмяФайла, НаЧтение, ИдентификаторФормы, ДополнительныеПараметры);
	КонецЕсли;
	
КонецФункции

// Получить Файл с сервера и зарегистрировать в рабочем каталоге
//
// Параметры
//  ДанныеФайла  - структура с данными файла
//  ПолноеИмяФайлаВРабочемКаталоге - Строка - здесь возвращается полное имя файла
//  ДатаФайлаВБазе - Дата - дата файла в базе
//  НаЧтение - Булево - файл помещен на чтение
//  ИдентификаторФормы - уникальный идентификатор формы
//
// Возвращаемое значение:
//   Булево  - успешно ли выполнена операция
Функция ПолучитьССервераИЗарегистрироватьВРабочемКаталогеПапки(
	ДанныеФайла,
	ИмяФайлаСПутемВРабочемКаталогеПапки,
	ДатаФайлаВБазе,
	НаЧтение,
	ИдентификаторФормы,
	ДополнительныеПараметры)
	
	ИмяФайлаСПутем = "";
	
	ВРабочемКаталогеНаЧтение = Истина;
	ВРабочемКаталогеВладельца = Ложь;
	
	ФайлВРабочемКаталоге = ФайлНаходитсяВЛокальномКэшеФайлов(
		ДанныеФайла,
		ДанныеФайла.Версия,
		ИмяФайлаСПутем,
		ВРабочемКаталогеНаЧтение,
		ВРабочемКаталогеВладельца);
	
	Если ФайлВРабочемКаталоге = Ложь Тогда
		Возврат ПолучитьССервераИЗарегистрироватьВЛокальномКэшеФайлов(
			ДанныеФайла,
			ИмяФайлаСПутемВРабочемКаталогеПапки,
			ДанныеФайла.ДатаМодификацииУниверсальная,
			НаЧтение,
			ИдентификаторФормы,
			ДополнительныеПараметры);
	КонецЕсли;

	// Получаем путь файла в рабочем каталоге - с проверкой на уникальность
	Если ИмяФайлаСПутем = "" Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			НСтр("ru = 'Ошибка получения файла из хранилища файлов
			           |в рабочий каталог.'"));
		Возврат Ложь;
	КонецЕсли;
	
	// Выяснено, что Файл в рабочем каталоге есть.
	// Проверка даты изменения и принятие решения, что делать дальше.
	Действие = ФайловыеФункцииСлужебныйКлиент.ДействиеПриОткрытииФайлаВРабочемКаталоге(
		ИмяФайлаСПутем, ДанныеФайла);
	
	Если Действие = "ВзятьИзХранилищаИОткрыть" Тогда
		// В рабочем каталоге папки настройка подтверждения при удалении не используется.
		УдалитьФайл(ИмяФайлаСПутем, Ложь);
		
		Возврат ПолучитьССервераИЗарегистрироватьВЛокальномКэшеФайлов(
			ДанныеФайла,
			ИмяФайлаСПутем,
			ДанныеФайла.ДатаМодификацииУниверсальная,
			НаЧтение,
			ИдентификаторФормы,
			ДополнительныеПараметры);
			
	ИначеЕсли Действие = "ОткрытьСуществующий" Тогда
		
		Если ДанныеФайла.ВРабочемКаталогеНаЧтение <> НаЧтение Тогда
			ВРабочемКаталогеВладельца = ДанныеФайла.РабочийКаталогВладельца <> "";
			
			ПеререгистрироватьВРабочемКаталоге(
				ДанныеФайла.Версия,
				ИмяФайлаСПутем,
				НаЧтение,
				ВРабочемКаталогеВладельца);
		КонецЕсли;
		
		Возврат Истина;
	
	Иначе // Действие = "Отмена".
		ИмяФайлаСПутем = "";
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Функция предназначена для открытия файла соответствующим приложением
//
// Параметры
//  ДанныеФайла  - структура с данными файла
//  ИмяОткрываемогоФайла - Строка - полное имя файла
Процедура ОткрытьФайлПриложением(ДанныеФайла, ИмяОткрываемогоФайла) Экспорт
	
	РасширениеПодключено = ПодключитьРасширениеРаботыСФайлами();
	Если РасширениеПодключено Тогда
		
		ПерсональныеНастройкиРаботыСФайлами =
			ФайловыеФункцииСлужебныйКлиентСервер.ПерсональныеНастройкиРаботыСФайлами();
		
		ТекстовыеФайлыСпособОткрытия = ПерсональныеНастройкиРаботыСФайлами.ТекстовыеФайлыСпособОткрытия;
		Если ТекстовыеФайлыСпособОткрытия = ПредопределенноеЗначение("Перечисление.СпособыОткрытияФайлаНаПросмотр.ВоВстроенномРедакторе") Тогда
			
			ТекстовыеФайлыРасширение = ПерсональныеНастройкиРаботыСФайлами.ТекстовыеФайлыРасширение;
			Если ФайловыеФункцииСлужебныйКлиентСервер.РасширениеФайлаВСписке(ТекстовыеФайлыРасширение, ДанныеФайла.Расширение) Тогда
				
				ПараметрыФормы = Новый Структура("Файл, ДанныеФайла, ИмяОткрываемогоФайла", 
					ДанныеФайла.Ссылка, ДанныеФайла, ИмяОткрываемогоФайла);
					
				ОткрытьФорму("Справочник.Файлы.Форма.РедактированиеТекстовогоФайла", 
					ПараметрыФормы, , ДанныеФайла.КодФайла);
				Возврат;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если НРег(ДанныеФайла.Расширение) = НРег("grs") Тогда
			
			Схема = Новый ГрафическаяСхема; 
			Схема.Прочитать(ИмяОткрываемогоФайла);
			
			ЗаголовокСтрока = ОбщегоНазначенияКлиентСервер.ПолучитьИмяСРасширением(
				ДанныеФайла.ПолноеНаименованиеВерсии, ДанныеФайла.Расширение);
			
			Схема.Показать(ЗаголовокСтрока, ИмяОткрываемогоФайла);
			Возврат;
			
		КонецЕсли;
		
		Если НРег(ДанныеФайла.Расширение) = НРег("mxl") Тогда
			
			ДвоичныеДанные = Новый ДвоичныеДанные(ИмяОткрываемогоФайла);
			Адрес = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
			ТабличныйДокумент = ФайловыеФункцииСлужебныйВызовСервера.ТабличныйДокументИзВременногоХранилища(Адрес);
			
			ЗаголовокСтрока = ОбщегоНазначенияКлиентСервер.ПолучитьИмяСРасширением(
				ДанныеФайла.ПолноеНаименованиеВерсии, ДанныеФайла.Расширение);
				
			ПараметрыОткрытия = Новый Структура;
			ПараметрыОткрытия.Вставить("ИмяДокумента", ЗаголовокСтрока);
			ПараметрыОткрытия.Вставить("ПутьКФайлу", ИмяОткрываемогоФайла);
			ПараметрыОткрытия.Вставить("ТабличныйДокумент", ТабличныйДокумент);
			
			ОткрытьФорму("ОбщаяФорма.РедактированиеТабличногоДокумента", ПараметрыОткрытия);
			
			Возврат;
			
		КонецЕсли;
		
		// Открыть Файл
		ЗапуститьПриложение(ИмяОткрываемогоФайла);
	КонецЕсли;
КонецПроцедуры

// Сохранение на диск Файла
// 
// Параметры
//  ДанныеФайла  - структура с данными файла
//  УникальныйИдентификатор - уникальный идентификатор формы
//
// Возвращаемое значение:
//   Строка - выбранный полный путь файла
Функция СохранитьКак(ДанныеФайла, УникальныйИдентификатор) Экспорт
	
	РасширениеПодключено = ПодключитьРасширениеРаботыСФайлами();
	
	Если РасширениеПодключено Тогда

		// проверим - если файл уже есть в кеше, и он новее чем в базе - дадим диалог с выбором
		ПутьКФайлуВКеше = "";
		Если ДанныеФайла.РедактируетТекущийПользователь Тогда
			ВРабочемКаталогеНаЧтение = Истина;
			ВРабочемКаталогеВладельца = Ложь;
			ПолноеИмяФайла = "";
			ФайлВРабочемКаталоге = ФайлНаходитсяВЛокальномКэшеФайлов(ДанныеФайла, ДанныеФайла.Версия, ПолноеИмяФайла, ВРабочемКаталогеНаЧтение, ВРабочемКаталогеВладельца);
			
			Если ФайлВРабочемКаталоге = Истина Тогда
				
				ДатаФайлаВБазе = ДанныеФайла.ДатаМодификацииУниверсальная;

				ФайлВерсии = Новый Файл(ПолноеИмяФайла);
				ДатаФайлаНаДиске = ФайлВерсии.ПолучитьУниверсальноеВремяИзменения();
				
				Если ДатаФайлаНаДиске > ДатаФайлаВБазе Тогда // В рабочем каталоге более новый (изменен пользователем со стороны)		
				
					ПараметрыОткрытияФормы = Новый Структура;
					ПараметрыОткрытияФормы.Вставить("Файл",       ПолноеИмяФайла);
					
					Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Дата изменения файла ""%1""
						           |в рабочем каталоге более поздняя (новее), чем в хранилище файлов.
						           |Возможно, файл был изменен.'"),
						Строка(ДанныеФайла.Ссылка));
					
					ПараметрыОткрытияФормы.Вставить("Сообщение",  Сообщение);
					
					Ответ = ОткрытьФормуМодально("Справочник.Файлы.Форма.РежимСозданияФайлаДляСохранитьКак", ПараметрыОткрытияФормы);
					
					Если Ответ = КодВозвратаДиалога.Отмена
					 ИЛИ Ответ = Неопределено Тогда
						
						Возврат "";
					КонецЕсли;
					
					Если Ответ = 1 Тогда // На основе файла на локальном компьютере
						ПутьКФайлуВКеше = ПолноеИмяФайла;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		ПутьВыбора = ДанныеФайла.ПапкаДляСохранитьКак;
		Если ПутьВыбора = Неопределено ИЛИ ПутьВыбора = "" Тогда
			
			#Если НЕ ВебКлиент Тогда
				Если СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ЭтоБазоваяВерсияКонфигурации Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						НСтр("ru = 'Данная команда не поддерживается в базовой версии.'"));
					Возврат "";
				КонецЕсли;
			#КонецЕсли
			
			ПутьВыбора = ФайловыеФункцииСлужебныйКлиент.КаталогМоиДокументы();
			
		КонецЕсли;

		Пароль = "";
		СохранятьСРасшифровкой = Ложь;
		РасширениеДляЗашифрованныхФайлов = "";
		Если ДанныеФайла.Зашифрован Тогда
			
			ПредставленияСертификатов = "";
			Для Каждого СтруктураСертификата Из ДанныеФайла.МассивСертификатовШифрования Цикл
				
				Отпечаток = СтруктураСертификата.Отпечаток;
				
				ТолькоВЛичномХранилище = Истина;
				Сертификат = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьСертификатПоОтпечатку(Отпечаток, ТолькоВЛичномХранилище);
				Если Сертификат <> Неопределено Тогда // тут собираем только личные сертификаты - с закрытым ключом
					Если НЕ ПустаяСтрока(ПредставленияСертификатов) Тогда
						ПредставленияСертификатов = ПредставленияСертификатов + Символы.ПС;
					КонецЕсли;
					ПредставленияСертификатов = ПредставленияСертификатов + СтруктураСертификата.Представление;
				КонецЕсли;
				
			КонецЦикла;
			
			Заголовок = НСтр("ru = 'Выбор режима сохранения'");
			ПараметрыФормы = Новый Структура("Заголовок, ПредставленияСертификатов", 
				Заголовок, ПредставленияСертификатов);
			КодВозврата = ОткрытьФормуМодально("Справочник.Файлы.Форма.ВыборСохраненияШифрованногоФайла", ПараметрыФормы);
			Если ТипЗнч(КодВозврата) = Тип("Структура") Тогда
				
				Пароль = КодВозврата.Пароль;
				РасширениеДляЗашифрованныхФайлов = КодВозврата.РасширениеДляЗашифрованныхФайлов;
				
				Если КодВозврата.СохранятьСРасшифровкой = 1 Тогда
					СохранятьСРасшифровкой = Истина;
				Иначе
					СохранятьСРасшифровкой = Ложь;
				КонецЕсли;	
				
			Иначе
				Возврат "";
			КонецЕсли;
			
		КонецЕсли;
		
		ИмяСРасширением = ОбщегоНазначенияКлиентСервер.ПолучитьИмяСРасширением(
			ДанныеФайла.ПолноеНаименованиеВерсии, ДанныеФайла.Расширение);
		
		Расширение = ДанныеФайла.Расширение;
		
		Если НЕ СохранятьСРасшифровкой Тогда
			Если НЕ ПустаяСтрока(РасширениеДляЗашифрованныхФайлов) Тогда
				ИмяСРасширением = ИмяСРасширением + "." + РасширениеДляЗашифрованныхФайлов;
				Расширение = РасширениеДляЗашифрованныхФайлов;
			КонецЕсли;	
		КонецЕсли;	
		
		// выбираем путь к файлу на диске
		ВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
		ВыборФайла.МножественныйВыбор = Ложь;
		ВыборФайла.ПолноеИмяФайла = ИмяСРасширением;
		Фильтр = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Все файлы (*.%1)|*.%1'"), Расширение, Расширение);
		ВыборФайла.Фильтр = Фильтр;
		ВыборФайла.Каталог = ПутьВыбора;
		
		Если ВыборФайла.Выбрать() Тогда
			
			АдресФайла = ДанныеФайла.НавигационнаяСсылкаТекущейВерсии;
			
			Если ДанныеФайла.ТекущаяВерсия <> ДанныеФайла.Версия Тогда
				АдресФайла = РаботаСФайламиСлужебныйВызовСервера.ПолучитьНавигационнуюСсылкуДляОткрытия(
					ДанныеФайла.Версия, УникальныйИдентификатор);
			КонецЕсли;	
			
			ИмяФайла = ОбщегоНазначенияКлиентСервер.ПолучитьИмяСРасширением(
				ДанныеФайла.ПолноеНаименованиеВерсии, ДанныеФайла.Расширение);
			
			РазмерВМб = ДанныеФайла.Размер / (1024 * 1024);
			
			ТекстПояснения =
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Выполняется сохранение файла ""%1"" (%2 Мб)...
					       |Пожалуйста, подождите.'"),
				ИмяФайла, 
				ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерВМб));
				
			Состояние(ТекстПояснения);	
			
			Файл = Новый Файл(ВыборФайла.ПолноеИмяФайла);
			Если Файл.Существует() Тогда
				Если ПутьКФайлуВКеше <> ВыборФайла.ПолноеИмяФайла Тогда
					Файл.УстановитьТолькоЧтение(Ложь);
					УдалитьФайлы(ВыборФайла.ПолноеИмяФайла);
				КонецЕсли;
			КонецЕсли;
			
			Если ПутьКФайлуВКеше = "" Тогда
				
				ПередаваемыеФайлы = Новый Массив;
				Описание = Новый ОписаниеПередаваемогоФайла(ВыборФайла.ПолноеИмяФайла, АдресФайла);
				ПередаваемыеФайлы.Добавить(Описание);
				
				ПутьКФайлу = Файл.Путь;
				ПутьКФайлу = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПутьКФайлу, ОбщегоНазначенияКлиентПовтИсп.ТипПлатформыКлиента());
				
				// Сохраним Файл из БД на диск
				Если ПолучитьФайлы(ПередаваемыеФайлы,, ПутьКФайлу, Ложь) Тогда
					
					// для варианта с хранением файлов на диске (на сервере) удаляем Файл из временного хранилища после получения
					Если ЭтоАдресВременногоХранилища(АдресФайла) Тогда
						УдалитьИзВременногоХранилища(АдресФайла);
					КонецЕсли;
					
					Если СохранятьСРасшифровкой Тогда
						ИмяФайлаСПутем = ВыборФайла.ПолноеИмяФайла;
						
						Попытка
							МенеджерКриптографии = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьМенеджерКриптографии();
							МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу = Пароль;
							
							ИмяФайлаСПутемРасшифрованное = ИмяФайлаСПутем + ".dec";
							МенеджерКриптографии.Расшифровать(ИмяФайлаСПутем, ИмяФайлаСПутемРасшифрованное);
							
							УдалитьФайлы(ИмяФайлаСПутем);
							ПереместитьФайл(ИмяФайлаСПутемРасшифрованное, ИмяФайлаСПутем);
						Исключение
							УдалитьФайлы(ИмяФайлаСПутем);
							ВызватьИсключение;
						КонецПопытки;
					КонецЕсли;
					
					
					НовыйФайл = Новый Файл(ВыборФайла.ПолноеИмяФайла);
					
					НовыйФайл.УстановитьУниверсальноеВремяИзменения(
						ДанныеФайла.ДатаМодификацииУниверсальная);
					
					Состояние(НСтр("ru = 'Файл успешно сохранен'"), , ВыборФайла.ПолноеИмяФайла);
				КонецЕсли;
			Иначе
				Если ПутьКФайлуВКеше <> ВыборФайла.ПолноеИмяФайла Тогда
					КопироватьФайл(ПутьКФайлуВКеше, ВыборФайла.ПолноеИмяФайла);
				КонецЕсли;
				Состояние(НСтр("ru = 'Файл успешно сохранен'"), , ВыборФайла.ПолноеИмяФайла);
			КонецЕсли;
			
			ПутьВыбораПрежний = ПутьВыбора;
			Файл = Новый Файл(ВыборФайла.ПолноеИмяФайла);
			ПутьВыбора = Файл.Путь;
			Если ПутьВыбораПрежний <> ПутьВыбора Тогда
				ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить("НастройкиПрограммы", "ПапкаДляСохранитьКак",  ПутьВыбора);
			КонецЕсли;
			
			Возврат ВыборФайла.ПолноеИмяФайла;
		КонецЕсли;
		
	Иначе  // веб клиент
		АдресФайла = ДанныеФайла.НавигационнаяСсылкаТекущейВерсии;
		
		ИмяФайла = ОбщегоНазначенияКлиентСервер.ПолучитьИмяСРасширением(
			ДанныеФайла.ПолноеНаименованиеВерсии, ДанныеФайла.Расширение);
		
		РазмерВМб = ДанныеФайла.Размер / (1024 * 1024);
		
		ТекстПояснения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Выполняется сохранение файла ""%1"" (%2 Мб)...
				       |Пожалуйста, подождите.'"),
			ИмяФайла,
			ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерВМб));
			
		Состояние(ТекстПояснения);
		
		// Сохраним Файл из БД на диск
		ПолучитьФайл(АдресФайла, ИмяФайла, Истина);
			
		// для варианта с хранением файлов на диске (на сервере) удаляем Файл из временного хранилища после получения
		Если ЭтоАдресВременногоХранилища(АдресФайла) Тогда
			УдалитьИзВременногоХранилища(АдресФайла);
		КонецЕсли;
	КонецЕсли;	
	
	Возврат "";
КонецФункции

// Процедура открывает проводник Windows, позиционируясь на Файл
// 
// Параметры
//  ДанныеФайла  - структура с данными файла
Процедура КаталогФайла(ДанныеФайла) Экспорт
	
	// Если Файл без файла  - эта операция не имеет смысла
	Если ДанныеФайла.Версия.Пустая() Тогда 
		Возврат;
	КонецЕсли;
	
#Если НЕ ВебКлиент Тогда
	ПолноеИмяФайла = ПолучитьПутьФайлаВРабочемКаталоге(ДанныеФайла);
	Если ФайловыеФункцииСлужебныйКлиент.ОткрытьПроводникСФайлом(ПолноеИмяФайла) = Истина Тогда
		Возврат;
	КонецЕсли;
	
	ИмяФайла = ОбщегоНазначенияКлиентСервер.ПолучитьИмяСРасширением(
		ДанныеФайла.ПолноеНаименованиеВерсии, ДанныеФайла.Расширение);
	
	КодВозврата = Вопрос(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Файл ""%1""
			           |отсутствует в рабочем каталоге.
			           |
			           |Получить файл из хранилища файлов?'"),
			ИмяФайла),
		РежимДиалогаВопрос.ДаНет);
	
	Если КодВозврата = КодВозвратаДиалога.Да Тогда
		ПолучитьФайлВерсииВРабочийКаталог(ДанныеФайла, ПолноеИмяФайла);
		ФайловыеФункцииСлужебныйКлиент.ОткрытьПроводникСФайлом(ПолноеИмяФайла);
	КонецЕсли;
	
	// для варианта с хранением файлов на диске (на сервере) удаляем Файл из временного хранилища после получения
	Если ЭтоАдресВременногоХранилища(ДанныеФайла.НавигационнаяСсылкаТекущейВерсии) Тогда
		УдалитьИзВременногоХранилища(ДанныеФайла.НавигационнаяСсылкаТекущейВерсии);
	КонецЕсли;
#Иначе
	ФайловыеФункцииСлужебныйКлиент.ПредупредитьОНеобходимостиРасширенияРаботыСФайлами();
#КонецЕсли
КонецПроцедуры

// Открывает диалог вопроса со списком Файлов или информации о Файлах
//
// Параметры
//  Список - СписокЗначений - список файлов
//  СообщениеВопрос - Строка - текст вопроса
//  СообщениеЗаголовок - Строка - текст заголовка вопроса
//  Заголовок - Строка - заголовок формы
Функция ДиалогВопросаСоСписком(Список, СообщениеВопрос, СообщениеЗаголовок, Заголовок)
	Параметры = Новый Структура;	
	Параметры.Вставить("СообщениеВопрос", СообщениеВопрос);
	Параметры.Вставить("СообщениеЗаголовок", СообщениеЗаголовок);
	Параметры.Вставить("Заголовок", Заголовок);
	Параметры.Вставить("Файлы", Список);
	
	Результат = ОткрытьФормуМодально("Справочник.Файлы.Форма.ФормаВопроса", Параметры);
	Возврат (Результат = КодВозвратаДиалога.Да);

КонецФункции

// переносит файл из одного списка приложенных файлов в другой
// Параметры
//  ФайлСсылка  - СправочникСсылка.Файлы - файл
//  ВладелецФайла  - ЛюбаяСсылка - владелец файла
Процедура ПеренестиФайлВПриложенныеФайлы(ФайлСсылка, ВладелецФайла) Экспорт

	Результат = РаботаСФайламиСлужебныйВызовСервера.ПолучитьДанныеДляПереносаВПриложенныеФайлы(
		ФайлСсылка, ВладелецФайла).Получить(ФайлСсылка);
	
	Если Результат = "Скопировать" Тогда
		
		СозданФайл = РаботаСФайламиСлужебныйВызовСервера.СкопироватьФайлВПриложенных(
			ФайлСсылка, ВладелецФайла);
		
		Оповестить("Запись_Файл", Новый Структура("Владелец, Файл, Событие", ВладелецФайла, СозданФайл, "СозданФайл"));
		
		ПоказатьОповещениеПользователя(
				"Создание:", 
				ПолучитьНавигационнуюСсылку(СозданФайл),
				Строка(СозданФайл),
				БиблиотекаКартинок.Информация32);
		
	ИначеЕсли Результат = "Обновить" Тогда
		
		ОбновленФайл = РаботаСФайламиСлужебныйВызовСервера.ОбновитьФайлВПриложенных(ФайлСсылка, ВладелецФайла);
			
		ПоказатьОповещениеПользователя(
				"Изменение:", 
				ПолучитьНавигационнуюСсылку(ОбновленФайл),
				Строка(ОбновленФайл),
				БиблиотекаКартинок.Информация32);
		
	КонецЕсли;
	
КонецПроцедуры	

// переносит файлы из одного списка приложенных файлов в другой
// Параметры
//  МассивФайлов - Массив - массив файлов
//  ВладелецФайла  - ЛюбаяСсылка - владелец файла
Процедура ПеренестиФайлыВПриложенныеФайлы(МассивФайлов, ВладелецФайла) Экспорт
	
	Если МассивФайлов.Количество() = 1 Тогда 
		ПеренестиФайлВПриложенныеФайлы(МассивФайлов[0], ВладелецФайла);
	Иначе
		
		Результат = РаботаСФайламиСлужебныйВызовСервера.ПолучитьДанныеДляПереносаВПриложенныеФайлы(
			МассивФайлов, ВладелецФайла);
		
		МассивОбновить = Новый Массив;
		МассивСкопировать = Новый Массив;
		Для Каждого ФайлСсылка Из МассивФайлов Цикл
			Если Результат.Получить(ФайлСсылка) = "Скопировать" Тогда
				МассивСкопировать.Добавить(ФайлСсылка);
			ИначеЕсли Результат.Получить(ФайлСсылка) = "Обновить" Тогда
				МассивОбновить.Добавить(ФайлСсылка);
			КонецЕсли;
		КонецЦикла;	
		
		Если МассивСкопировать.Количество() > 0 Тогда 
			РаботаСФайламиСлужебныйВызовСервера.СкопироватьФайлВПриложенных(
				МассивСкопировать, ВладелецФайла);
		КонецЕсли;	
		
		Если МассивОбновить.Количество() > 0 Тогда 
			РаботаСФайламиСлужебныйВызовСервера.ОбновитьФайлВПриложенных(МассивОбновить, ВладелецФайла);
		КонецЕсли;	
		
		ОбщееКоличество = МассивСкопировать.Количество() + МассивОбновить.Количество();
		Если ОбщееКоличество > 0 Тогда 
			
			ПолноеОписание = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Файлы (%1 шт) перенесены в %2'"),
				ОбщееКоличество,
				ВладелецФайла);
			
			ПоказатьОповещениеПользователя(
				НСтр("ru = 'Файлы перенесены'"),
				,
				ПолноеОписание,
				БиблиотекаКартинок.Информация32);
				
		КонецЕсли;	
			
	КонецЕсли;	
	
КонецПроцедуры

// Выбирает на  диске файл и создает из него новую версию - реализация низкоуровневая
//
// Параметры
//  ДанныеФайла  - структура с данными файла
//  ИдентификаторФормы - уникальный идентификатор формы
//  ДиалогПолноеИмяФайла - Строка - полное имя файла, выбранное в диалоге
//  СоздатьНовуюВерсию -  Булево - Создать новую версию
//  КомментарийКВерсии - Строка - Комментарий к версии
Процедура ОбновитьИзФайлаНаДискеРеализация(ДанныеФайла, ИдентификаторФормы, ДиалогПолноеИмяФайла, 
	СоздатьНовуюВерсию = Неопределено, КомментарийКВерсии = Неопределено) Экспорт
	
	ФайлНаДиске = Новый Файл(ДиалогПолноеИмяФайла);
	ИмяИРасширениеФайлаНаДиске = ФайлНаДиске.Имя;
	ВремяИзмененияВыбранное = ФайлНаДиске.ПолучитьУниверсальноеВремяИзменения();
	РасширениеФайлаНаДиске = ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(ФайлНаДиске.Расширение);
	ИмяФайла = ФайлНаДиске.ИмяБезРасширения;
	
	РасширениеДляЗашифрованныхФайлов =
		ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьПерсональныеНастройкиРаботыСЭЦП(
			).РасширениеДляЗашифрованныхФайлов;
	
	ФайлЗашифрован = Ложь;
	Если НРег(РасширениеФайлаНаДиске) = НРег(РасширениеДляЗашифрованныхФайлов) Тогда
		
		ФайлЗашифрован = Истина;
		
		// отрезаем .p7m в конце
		Позиция = Найти(ИмяИРасширениеФайлаНаДиске, РасширениеФайлаНаДиске);
		ИмяИРасширениеФайлаНаДиске = Лев(ИмяИРасширениеФайлаНаДиске, Позиция - 2);
		
		// отрезаем .p7m в конце
		ДиалогПолноеИмяФайлаПрежнее = ДиалогПолноеИмяФайла;
		Позиция = Найти(ДиалогПолноеИмяФайла, РасширениеФайлаНаДиске);
		ДиалогПолноеИмяФайла = Лев(ДиалогПолноеИмяФайла, Позиция - 2);
		
		ВрФайлНешифрованный = Новый Файл(ДиалогПолноеИмяФайла);
		
		РасширениеФайлаНаДиске = ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(
			ВрФайлНешифрованный.Расширение);
		
		ФайловыеФункцииСлужебныйКлиентСервер.ПроверитьРасширениеФайлаДляЗагрузки(
			РасширениеФайлаНаДиске);
		
		// Тут расшифровать и поставить ту же дату изменения, что и ДиалогПолноеИмяФайлаПрежнее.
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Заголовок", НСтр("ru = 'Введите пароль для расшифровки'"));
		ПараметрыФормы.Вставить("ПредставленияСертификатов", "");
		ПараметрыФормы.Вставить("Файл", ДанныеФайла.Ссылка);
		
		КодВозврата = ОткрытьФормуМодально("ОбщаяФорма.ВводПароляСОписаниями", ПараметрыФормы);
		
		Пароль = ?(ТипЗнч(КодВозврата) = Тип("Строка"), КодВозврата, "");
		
		УдалитьФайл(ДиалогПолноеИмяФайла, Ложь); // на случай если есть файл с таким именем

		МенеджерКриптографии = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьМенеджерКриптографии();
		МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу = Пароль;		
		МенеджерКриптографии.Расшифровать(ДиалогПолноеИмяФайлаПрежнее, ДиалогПолноеИмяФайла);
		
		ВрФайлНешифрованный = Новый Файл(ДиалогПолноеИмяФайла);
		
		РасширениеФайлаНаДиске = ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(
			ВрФайлНешифрованный.Расширение);
		
		ВрФайлНешифрованный.УстановитьУниверсальноеВремяИзменения(ВремяИзмененияВыбранное);
		
	КонецЕсли;
	
	// данные файла могли измениться - обновим
	ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ПолучитьДанныеФайлаИРабочийКаталог(ДанныеФайла.Ссылка);

	ПредыдущаяВерсия = ДанныеФайла.Версия;
	
	ИмяИРасширениеФайлаВБазе = ОбщегоНазначенияКлиентСервер.ПолучитьИмяСРасширением(
		ДанныеФайла.ПолноеНаименованиеВерсии, ДанныеФайла.Расширение);
	
	РедактируетТекущийПользователь = ДанныеФайла.РедактируетТекущийПользователь;
	
	ДатаФайлаВБазе = ДанныеФайла.ДатаМодификацииУниверсальная;
	
	Если ВремяИзмененияВыбранное < ДатаФайлаВБазе Тогда // В хранилище более новый.
		
		СтрокаОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Файл ""%1""
			           |в хранилище файлов имеет более позднюю дату изменения (%2),
			           |чем выбранный файл (%3).
			           |
			           |Операция прервана.'"),
			Строка(ДанныеФайла.Ссылка),
			МестноеВремя(ДатаФайлаВБазе),
			МестноеВремя(ВремяИзмененияВыбранное));
		
		Предупреждение(СтрокаОшибки);
		Возврат;
	КонецЕсли;
	
	
	// Проверка наличия файла в рабочем каталоге.
	ВРабочемКаталогеНаЧтение = Истина;
	ВРабочемКаталогеВладельца = Ложь;
	ПолноеИмяФайла = "";
	ФайлВРабочемКаталоге = ФайлНаходитсяВЛокальномКэшеФайлов(
		Неопределено, ПредыдущаяВерсия, ПолноеИмяФайла, ВРабочемКаталогеНаЧтение, ВРабочемКаталогеВладельца);
	
	Если РедактируетТекущийПользователь Тогда // Файл уже был занят.
		
		Если ФайлВРабочемКаталоге = Истина Тогда
			ФайлВКеше = Новый Файл(ПолноеИмяФайла);
			ВремяИзмененияВКеше = ФайлВКеше.ПолучитьУниверсальноеВремяИзменения();
			
			Если ВремяИзмененияВыбранное < ВремяИзмененияВКеше Тогда // В рабочем каталоге более новый.
				
				СтрокаОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Файл ""%1""
					           |в рабочем каталоге имеет более позднюю дату изменения (%2),
					           |чем выбранный файл (%3).
					           |
					           |Операция прервана.'"),
					Строка(ДанныеФайла.Ссылка),
					МестноеВремя(ВремяИзмененияВКеше),
					МестноеВремя(ВремяИзмененияВыбранное));
				
				Предупреждение(СтрокаОшибки);
				Возврат;
			КонецЕсли;
			
			#Если НЕ ВебКлиент Тогда
				// Проверка, что файл не занят приложением.
				Попытка
					ТекстовыйДокумент = Новый ТекстовыйДокумент;
					ТекстовыйДокумент.Прочитать(ПолноеИмяФайла);
				Исключение
					СтрокаОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Файл ""%1""
						           |в рабочем каталоге открыт для редактирования.
						           |
						           |Закончите редактирование перед выполнением
						           |обновления из файла на диске.'"),
						ПолноеИмяФайла);
					Предупреждение(СтрокаОшибки);
					Возврат;
				КонецПопытки;
			#КонецЕсли
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ФайлВРабочемКаталоге И ИмяИРасширениеФайлаНаДиске <> ИмяИРасширениеФайлаВБазе Тогда
		Попытка
			УдалитьФайлИзРабочегоКаталога(ДанныеФайла.ТекущаяВерсия, Истина);
			ФайлВРабочемКаталоге = Ложь;
		Исключение
			Предупреждение(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
			Возврат;
		КонецПопытки;
	КонецЕсли;

	Если Не РедактируетТекущийПользователь Тогда
		
		СтрокаОшибки = "";
		Если Не РаботаСФайламиКлиентСервер.МожноЛиЗанятьФайл(ДанныеФайла, СтрокаОшибки) Тогда
			Предупреждение(СтрокаОшибки);
			Возврат;
		КонецЕсли;
		
		СтрокаОшибки = "";
		Если Не РаботаСФайламиСлужебныйВызовСервера.ЗанятьФайл(ДанныеФайла, СтрокаОшибки, ИдентификаторФормы) Тогда 
			Предупреждение(СтрокаОшибки);
			Возврат;
		КонецЕсли;
		
		НаЧтение = Ложь;
		ВРабочемКаталогеВладельца = ДанныеФайла.РабочийКаталогВладельца <> "";
		ПеререгистрироватьФайлВРабочемКаталоге(ДанныеФайла, НаЧтение, ВРабочемКаталогеВладельца);
		
	КонецЕсли;
	
	ПереданныйПолныйПутьКФайлу = "";
	
	НовоеПолноеИмяФайла = "";
	ДанныеФайла.Вставить("ПутьОбновленияИзФайлаНаДиске", ДиалогПолноеИмяФайла);
	ДанныеФайла.Расширение = ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(РасширениеФайлаНаДиске);
	
	// Помещение в рабочий каталог из выбранного файла на диске,
	// т.к. указано свойство ПутьОбновленияИзФайлаНаДиске.
	ПолучитьФайлВерсииВРабочийКаталог(ДанныеФайла, НовоеПолноеИмяФайла, ИдентификаторФормы);
	
	Если ФайлЗашифрован Тогда
		РаботаСФайламиСлужебныйВызовСервера.УстановитьПризнакЗашифрован(ДанныеФайла.Ссылка, ФайлЗашифрован);
	КонецЕсли;
	
	Если РедактируетТекущийПользователь Тогда // Файл уже был занят.
		
		ОпубликоватьФайл(ДанныеФайла.Ссылка, 
			ИдентификаторФормы,
			Неопределено,
			Неопределено, 
			Неопределено,
			Неопределено,
			ПереданныйПолныйПутьКФайлу,
			СоздатьНовуюВерсию, 
			КомментарийКВерсии);
			
	Иначе
		
		ЗакончитьРедактирование(
			ДанныеФайла.Ссылка, 
			ИдентификаторФормы,
			ДанныеФайла.ХранитьВерсии,
			ДанныеФайла.РедактируетТекущийПользователь,
			ДанныеФайла.Редактирует,
			ДанныеФайла.АвторТекущейВерсии,
			ПереданныйПолныйПутьКФайлу,
			СоздатьНовуюВерсию, 
			КомментарийКВерсии); 
			
	КонецЕсли;	
	
	Если ФайлЗашифрован Тогда
		УдалитьФайл(ДиалогПолноеИмяФайла, Ложь);
	КонецЕсли;
	
КонецПроцедуры

// Выбирает на  диске файл и создает из него новую версию
// 
// Параметры
//  ДанныеФайла  - структура с данными файла
//  ИдентификаторФормы - уникальный идентификатор формы
Функция ОбновитьИзФайлаНаДиске(ДанныеФайла, ИдентификаторФормы) Экспорт
	
	РасширениеПодключено = ПодключитьРасширениеРаботыСФайлами();
	
	Если РасширениеПодключено Тогда
	
		Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		
		Если НЕ ПустаяСтрока(ДанныеФайла.РабочийКаталогВладельца) Тогда
			ПутьВыбора = ДанныеФайла.РабочийКаталогВладельца;
		Иначе	
			ПутьВыбора = ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекЗагрузить("НастройкиПрограммы", "ПапкаДляОбновитьИзФайла");
		КонецЕсли;	
		
		Если ПутьВыбора = Неопределено ИЛИ ПутьВыбора = "" Тогда
			
			#Если НЕ ВебКлиент Тогда
				Если СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ЭтоБазоваяВерсияКонфигурации Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						НСтр("ru = 'Данная команда не поддерживается в базовой версии.'"));
					Возврат Ложь;
				КонецЕсли;
			#КонецЕсли
			
			ПутьВыбора = ФайловыеФункцииСлужебныйКлиент.КаталогМоиДокументы();
			
		КонецЕсли;
		
		Диалог.Заголовок                   = НСтр("ru = 'Выбор файла'");
		Диалог.ПредварительныйПросмотр     = Ложь;
		Диалог.ПроверятьСуществованиеФайла = Ложь;
		Диалог.МножественныйВыбор          = Ложь;
		Диалог.Каталог                     = ПутьВыбора;
		
		Диалог.ПолноеИмяФайла = ОбщегоНазначенияКлиентСервер.ПолучитьИмяСРасширением(
			ДанныеФайла.ПолноеНаименованиеВерсии, ДанныеФайла.Расширение); 
		
		Диалог.Фильтр = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Файл (*.%1)|*.%1|Все файлы (*.*)|*.*'"),
			ДанныеФайла.Расширение,
			ДанныеФайла.Расширение);
		
		Если Диалог.Выбрать() Тогда
			
			ПутьВыбораПрежний = ПутьВыбора;
			ФайлНаДиске = Новый Файл(Диалог.ПолноеИмяФайла);
			ПутьВыбора = ФайлНаДиске.Путь;
			
			Если ПустаяСтрока(ДанныеФайла.РабочийКаталогВладельца) Тогда
				Если ПутьВыбораПрежний <> ПутьВыбора Тогда
					ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить("НастройкиПрограммы", "ПапкаДляОбновитьИзФайла",  ПутьВыбора);
				КонецЕсли;
			КонецЕсли;
			
			ОбновитьИзФайлаНаДискеРеализация(ДанныеФайла, ИдентификаторФормы, Диалог.ПолноеИмяФайла);
			
			Возврат Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Возвращает параметры для работы с занятыми файлами.
// Возвращает:
//	Неопределено - если нет редактируемых файлов или работать с ними не надо.
//	Структуру - структура с передаваемыми параметрами.
// 
Функция ПроверитьЗанятыеФайлыПриЗавершенииРаботы()
	
	Если ПользователиКлиентСервер.ЭтоСеансВнешнегоПользователя() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПоказыватьЗанятыеФайлыПриЗавершенииРаботы =
		ФайловыеФункцииСлужебныйКлиентСервер.ПерсональныеНастройкиРаботыСФайлами(
			).ПоказыватьЗанятыеФайлыПриЗавершенииРаботы;
	
	Если НЕ ПоказыватьЗанятыеФайлыПриЗавершенииРаботы Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ТекущийПользователь = ПользователиКлиентСервер.ТекущийПользователь();
	
	КоличествоЗанятыхФайлов = СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиентаПриЗавершении().РаботаСФайлами.КоличествоЗанятыхФайлов;
	Если КоличествоЗанятыхФайлов = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыПрикладнойФормыПредупреждения = Новый Структура;
	ПараметрыПрикладнойФормыПредупреждения.Вставить("СообщениеВопрос",      НСтр("ru = 'Завершить работу с программой?'"));
	ПараметрыПрикладнойФормыПредупреждения.Вставить("СообщениеЗаголовок",   НСтр("ru = 'Следующие файлы заняты вами для редактирования:'"));
	ПараметрыПрикладнойФормыПредупреждения.Вставить("Заголовок",            НСтр("ru = 'Завершение работы'"));
	ПараметрыПрикладнойФормыПредупреждения.Вставить("Редактирует",          ТекущийПользователь);
	
	ПрикладнаяФормаПредупреждения = "Справочник.Файлы.Форма.СписокЗанятыхСВопросом";
	Форма                         = "Справочник.Файлы.Форма.РедактируемыеФайлы";
	
	ВозвращаемыеПараметры = Новый Структура;
	ВозвращаемыеПараметры.Вставить("ПрикладнаяФормаПредупреждения", ПрикладнаяФормаПредупреждения);
	ВозвращаемыеПараметры.Вставить("ПараметрыПрикладнойФормыПредупреждения", ПараметрыПрикладнойФормыПредупреждения);
	ВозвращаемыеПараметры.Вставить("Форма", Форма);
	ВозвращаемыеПараметры.Вставить("ПрикладнаяФормаПредупреждения", ПрикладнаяФормаПредупреждения);
	ВозвращаемыеПараметры.Вставить("КоличествоЗанятыхФайлов", КоличествоЗанятыхФайлов);
	
	Возврат ВозвращаемыеПараметры;
КонецФункции


// Шифрует Файл
// Параметры
//  ФайлСсылка  - СправочникСсылка.Файлы - файл
//  МассивСертификатов - Массив - массив сертификатов ЭЦП
//  УникальныйИдентификаторФормы - уникальный идентификатор формы
//  ДанныеФайла  - структура с данными файла
//  МассивДанныхДляЗанесенияВБазу - массив структур
//  МассивОтпечатков  - Массив - массив отпечатков сертификатов, использованных для шифрования
Функция Зашифровать(ФайлСсылка,
					МассивСертификатов,
					УникальныйИдентификаторФормы,
					ДанныеФайла,
					МассивДанныхДляЗанесенияВБазу,
					МассивОтпечатков) Экспорт
	
	// не нужно ПредложитьУстановкуРасширенияРаботыСФайлами(), т.к. все делается в памяти через ДвоичныеДанные
	
	МассивОтпечатков = Новый Массив;
	Для Каждого Сертификат Из МассивСертификатов Цикл
		Отпечаток = Base64Строка(Сертификат.Отпечаток);
		Представление = ЭлектроннаяЦифроваяПодписьКлиентСервер.ПолучитьПредставлениеПользователя(Сертификат.Субъект);
		ДвоичныеДанныеСертификата = Сертификат.Выгрузить();
		
		ОтпечатокСтруктура = Новый Структура("Отпечаток, Представление, Сертификат", Отпечаток, Представление, ДвоичныеДанныеСертификата);
		МассивОтпечатков.Добавить(ОтпечатокСтруктура);
	КонецЦикла;
	
	МассивОбъектовШифрования = Новый Массив;
	
	КоличествоВерсий = ДанныеФайла.КоличествоВерсий;
	
	Если КоличествоВерсий > 1 Тогда
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Будет выполнено шифрование всех %1 версий файла.
			           |Это может занять продолжительное время.
			           |
			           |Продолжить шифрование файла?'"),
			КоличествоВерсий);
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	МассивВерсий = РаботаСФайламиСлужебныйВызовСервера.ПолучитьДанныеФайлаИНавигационнуюСсылкуВсехВерсийФайла(ФайлСсылка, УникальныйИдентификаторФормы);
	
	Если МассивВерсий.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ТекстСостояния = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Выполняется получение всех версий файла ""%1"".'"),
		ФайлСсылка);
	
	Состояние(ТекстСостояния, 0);
	
	Счетчик = 0;
	Для Каждого СтруктураВерсии Из МассивВерсий Цикл
		
		Прогресс = Счетчик / МассивВерсий.Количество() * 100;
		Состояние(ТекстСостояния, Прогресс);
		
		ДанныеФайла = СтруктураВерсии.ДанныеФайла;
		АдресФайла = СтруктураВерсии.НавигационнаяСсылкаВерсии;
		
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресФайла);
		
		СтруктураДляШифрования = Новый Структура;
		СтруктураДляШифрования.Вставить("ДвоичныеДанные", ДвоичныеДанные);
		СтруктураДляШифрования.Вставить("ВерсияСсылка",   СтруктураВерсии.ВерсияСсылка);
		СтруктураДляШифрования.Вставить("АдресФайла",     АдресФайла);
		
		МассивОбъектовШифрования.Добавить(СтруктураДляШифрования);
		
		Счетчик = Счетчик + 1;
		
	КонецЦикла;
	
	Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Выполняется шифрование всех версий файла ""%1"".'"),
		ФайлСсылка));
	
	МенеджерКриптографии = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьМенеджерКриптографии();
	
	МассивДанныхДляЗанесенияВБазу = Новый Массив;
	
	Для Каждого СтруктураДляШифрования Из МассивОбъектовШифрования Цикл
		
		ДвоичныеДанные = СтруктураДляШифрования.ДвоичныеДанные;
		ВерсияСсылка = СтруктураДляШифрования.ВерсияСсылка;
		
		ШифрованныйФайлДвоичныеДанные = МенеджерКриптографии.Зашифровать(ДвоичныеДанные, МассивСертификатов);
		АдресВременногоХранилища = ПоместитьВоВременноеХранилище(ШифрованныйФайлДвоичныеДанные, УникальныйИдентификаторФормы);
		
		ДанныеДляЗаписиНаСервере = Новый Структура("АдресВременногоХранилища, ВерсияСсылка, АдресФайла, АдресВременногоХранилищаТекста", 
			АдресВременногоХранилища, ВерсияСсылка, СтруктураДляШифрования.АдресФайла, "");
		МассивДанныхДляЗанесенияВБазу.Добавить(ДанныеДляЗаписиНаСервере);
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Расшифрует объект - Файл, Версия
// Параметры
//  ФайлСсылка  - СправочникСсылка.Файлы - файл
//  УникальныйИдентификаторФормы - уникальный идентификатор формы
//  ДанныеФайла  - структура с данными файла
//  МассивДанныхДляЗанесенияВБазу - массив структур
Функция Расшифровать(ФайлСсылка, УникальныйИдентификаторФормы, ДанныеФайла,
	МассивДанныхДляЗанесенияВБазу) Экспорт
	
	КоличествоВерсий = ДанныеФайла.КоличествоВерсий;
	
	// не нужно ПредложитьУстановкуРасширенияРаботыСФайлами(), т.к. все делается в памяти через ДвоичныеДанные
	
	ПредставленияСертификатов = "";
	Для Каждого СтруктураСертификата Из ДанныеФайла.МассивСертификатовШифрования Цикл
		
		Отпечаток = СтруктураСертификата.Отпечаток;
		
		ТолькоВЛичномХранилище = Истина; // тут собираем только личные сертификаты - с закрытым ключом
		Сертификат = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьСертификатПоОтпечатку(Отпечаток, ТолькоВЛичномХранилище);
		Если Сертификат <> Неопределено Тогда 
			Если НЕ ПустаяСтрока(ПредставленияСертификатов) Тогда
				ПредставленияСертификатов = ПредставленияСертификатов + Символы.ПС;
			КонецЕсли;
			ПредставленияСертификатов = ПредставленияСертификатов + СтруктураСертификата.Представление;
		КонецЕсли;
		
	КонецЦикла;
	
	Пароль = "";
	Заголовок = НСтр("ru = 'Введите пароль для расшифровки'");
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Заголовок",                 Заголовок);
	ПараметрыФормы.Вставить("ПредставленияСертификатов", ПредставленияСертификатов);
	ПараметрыФормы.Вставить("Файл",                      ФайлСсылка);
	
	Ответ = ОткрытьФормуМодально("ОбщаяФорма.ВводПароляСОписаниями", ПараметрыФормы);
	Если ТипЗнч(Ответ) = Тип("Строка") Тогда
		Пароль = Ответ;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
	МассивОбъектовШифрования = Новый Массив;
	
	Если КоличествоВерсий > 1 Тогда
		
		ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Будет выполнена расшифровка всех %1 версий файла.
			           |Это может занять продолжительное время. 
			           |
			           |Продолжить расшифровку файла?'"),
			КоличествоВерсий);
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Выполняется получение всех версий файла ""%1"".'"),
		ФайлСсылка);
		
	Состояние(ТекстСообщения, 0);
	
	МассивВерсий = РаботаСФайламиСлужебныйВызовСервера.ПолучитьДанныеФайлаИНавигационнуюСсылкуВсехВерсийФайла(
		ФайлСсылка, УникальныйИдентификаторФормы);
	
	Счетчик = 0;
	Для Каждого СтруктураВерсии Из МассивВерсий Цикл
		
		Прогресс = Счетчик / МассивВерсий.Количество() * 100;
		Состояние(ТекстСообщения, Прогресс);
		
		ДанныеФайла = СтруктураВерсии.ДанныеФайла;
		АдресФайла = СтруктураВерсии.НавигационнаяСсылкаВерсии;
		
		ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресФайла);
		
		СтруктураДляШифрования = Новый Структура("ДвоичныеДанные, ВерсияСсылка, АдресФайла, Расширение", 
			ДвоичныеДанные, СтруктураВерсии.ВерсияСсылка, АдресФайла, ДанныеФайла.Расширение);
			
		МассивОбъектовШифрования.Добавить(СтруктураДляШифрования);
		Счетчик = Счетчик + 1;
		
	КонецЦикла;
	
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Выполняется расшифровка всех версий файла ""%1"".'"),
		ФайлСсылка);
	Состояние(ТекстСообщения);
	
	МенеджерКриптографии = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьМенеджерКриптографии();
	МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу = Пароль;
	
	МассивДанныхДляЗанесенияВБазу = Новый Массив;
	ИзвлекатьТекстыФайловНаСервере =
		ФайловыеФункцииСлужебныйКлиентСервер.ОбщиеНастройкиРаботыСФайлами(
			).ИзвлекатьТекстыФайловНаСервере;
	
	Для Каждого СтруктураДляШифрования Из МассивОбъектовШифрования Цикл
		
		ДвоичныеДанные = СтруктураДляШифрования.ДвоичныеДанные;
		ВерсияСсылка = СтруктураДляШифрования.ВерсияСсылка;
		
		ДвоичныеДанныеРасшифрованные = МенеджерКриптографии.Расшифровать(ДвоичныеДанные);
		АдресВременногоХранилища = ПоместитьВоВременноеХранилище(ДвоичныеДанныеРасшифрованные, УникальныйИдентификаторФормы);
		
		АдресВременногоХранилищаТекста = "";
		#Если НЕ ВебКлиент Тогда
			Если НЕ ИзвлекатьТекстыФайловНаСервере Тогда
				ПолныйПутьКФайлу = ПолучитьИмяВременногоФайла(СтруктураДляШифрования.Расширение);
				ДвоичныеДанныеРасшифрованные.Записать(ПолныйПутьКФайлу);
				
				АдресВременногоХранилищаТекста = ФайловыеФункцииСлужебныйКлиентСервер.ИзвлечьТекстВоВременноеХранилище(
					ПолныйПутьКФайлу, УникальныйИдентификаторФормы);
					
				УдалитьФайлы(ПолныйПутьКФайлу);
			Иначе
				АдресВременногоХранилищаТекста = "";
			КонецЕсли;
		#КонецЕсли
		
		ДанныеДляЗаписиНаСервере = Новый Структура("АдресВременногоХранилища, ВерсияСсылка, АдресФайла, АдресВременногоХранилищаТекста", 
			АдресВременногоХранилища, ВерсияСсылка, СтруктураДляШифрования.АдресФайла, АдресВременногоХранилищаТекста);
		МассивДанныхДляЗанесенияВБазу.Добавить(ДанныеДляЗаписиНаСервере);
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Заносит информацию о подписях
// Параметры
//  ФайлСсылка  - СправочникСсылка.Файлы - файл
//  Владелец  - ЛюбаяСсылка - владелец файла
//  МассивДанныхДляЗанесенияВБазу - массив структур
//  УникальныйИдентификаторФормы - уникальный идентификатор формы
Процедура ЗанестиИнформациюОПодписях(ФайлСсылка, Владелец, МассивДанныхДляЗанесенияВБазу, УникальныйИдентификатор = Неопределено) Экспорт
	
	РаботаСФайламиСлужебныйВызовСервера.ЗанестиИнформациюОПодписях(МассивДанныхДляЗанесенияВБазу, УникальныйИдентификатор);
	
	ОповеститьОбИзменении(ФайлСсылка);
	Оповестить("Запись_Файл", Новый Структура("Событие", "ОбъектПодписан"), ФайлСсылка);
	Оповестить("Запись_Файл", Новый Структура("Событие", "ПрисоединенныйФайлПодписан"), Владелец);
	
	Если МассивДанныхДляЗанесенияВБазу.Количество() = 1 Тогда
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Добавлена подпись из файла для
			           |""%1"".'"),
			ФайлСсылка);
	Иначе
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Добавлены подписи из файлов для
			           |""%1"".'"),
			ФайлСсылка);
	КонецЕсли;	
	
	Состояние(ТекстСообщения);
	
КонецПроцедуры

// Очистка рабочего каталога - для освобождения места - в первую очередь удаляет файлы 
// наиболее давно помещенные в рабочий каталог
// Параметры
//  РазмерФайловВРабочемКаталоге  - Число - размер файлов в рабочем каталоге
//  РазмерДобавляемогоФайла - Число - Размер добавляемого файла
//  ОчищатьВсе - Булево - Удалять все файлы в каталоге (а не только до освобождения нужного объема места на диске)
Процедура ОчиститьРабочийКаталог(РазмерФайловВРабочемКаталоге, РазмерДобавляемогоФайла, ОчищатьВсе) Экспорт
	
#Если Не ВебКлиент Тогда
	ИмяКаталога = ФайловыеФункцииСлужебныйКлиент.РабочийКаталогПользователя();
	
	ТаблицаФайлов = Новый Массив;
	
	МассивФайлов = НайтиФайлы(ИмяКаталога, "*.*");
	
	ОбходФайловТаблица(ИмяКаталога, МассивФайлов, ТаблицаФайлов);
	
	// Вызов сервера - для сортировки
	//  сортировка по дате - в начале будут самые давно помещенные в рабочий каталог
	РаботаСФайламиСлужебныйВызовСервера.СортироватьМассивСтруктур(ТаблицаФайлов);
	
	МаксРазмер = ФайловыеФункцииСлужебныйКлиентСервер.ПерсональныеНастройкиРаботыСФайлами(
		).МаксимальныйРазмерЛокальногоКэшаФайлов;
	
	СреднийРазмерФайла = 1000;
	Если ТаблицаФайлов.Количество() <> 0 Тогда
		СреднийРазмерФайла = РазмерФайловВРабочемКаталоге / ТаблицаФайлов.Количество();
	КонецЕсли;
	
	СколькоНадоОсвободитьМеста = МаксРазмер / 10;
	Если СреднийРазмерФайла * 3 / 2 > СколькоНадоОсвободитьМеста Тогда
		СколькоНадоОсвободитьМеста = СреднийРазмерФайла * 3 / 2;
	КонецЕсли;
	
	СколькоОсталось = РазмерФайловВРабочемКаталоге + РазмерДобавляемогоФайла;	
	
	Ответ = "";
	
	Для Каждого Строка из ТаблицаФайлов Цикл
		
		Если Строка.Версия.Пустая() Тогда
			Если Ответ <> "ДаДляВсех" И Ответ <> "НетДляВсех" Тогда
			
				Если ОчищатьВсе = Ложь Тогда
					ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Выполняется очистка рабочего каталога при добавлении файла.
						           |
						           |В хранилище файлов не найден файл
						           |""%1"".
						           |
						           |Удалить его из рабочего каталога?'"),
						ИмяКаталога + Строка.Путь);
				Иначе
					ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'В хранилище файлов не найден файл
						           |""%1"".
						           |
						           |Удалить его из рабочего каталога?'"),
						ИмяКаталога + Строка.Путь);
				КонецЕсли;
				
				Кнопки = Новый СписокЗначений;
				Кнопки.Добавить("Да",         НСтр("ru = 'Да'"));
				Кнопки.Добавить("ДаДляВсех",  НСтр("ru = 'Да для всех'"));
				Кнопки.Добавить("Нет",        НСтр("ru = 'Нет'"));
				Кнопки.Добавить("НетДляВсех", НСтр("ru = 'Нет для всех'"));
				
				Ответ = Вопрос(ТекстВопроса, Кнопки);
			КонецЕсли;
			
			Если Ответ = "Нет" ИЛИ Ответ = "НетДляВсех" Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		ПолныйПуть = ИмяКаталога + Строка.Путь;
		ФайлНаДиске = Новый Файл(ПолныйПуть);
		ФайлНаДиске.УстановитьТолькоЧтение(Ложь);
		ШапкаВопроса = НСтр("ru = 'Выполняется очистка рабочего каталога при добавлении файла.'");
		УдалитьФайл(ПолныйПуть, Неопределено, ШапкаВопроса);
		
		ПутьСПодкаталогом = ИмяКаталога;
		Позиция = Найти(Строка.Путь, ОбщегоНазначенияКлиентСервер.РазделительПути());
		Если Позиция <> 0 Тогда
			ПутьСПодкаталогом = ИмяКаталога + Лев(Строка.Путь, Позиция);
		КонецЕсли;
		
		// Если каталог стал пуст - удалить его
		МассивФайловВКаталоге = НайтиФайлы(ПутьСПодкаталогом, "*.*");
		Если МассивФайловВКаталоге.Количество() = 0 Тогда
			Если ПутьСПодкаталогом <> ИмяКаталога Тогда
				УдалитьФайлы(ПутьСПодкаталогом);
			КонецЕсли;
		КонецЕсли;
		
		// Удаление из регистра сведений
		РаботаСФайламиСлужебныйВызовСервера.УдалитьИзРегистра(Строка.Версия);
		
		СколькоОсталось = СколькоОсталось - Строка.Размер;
		Если СколькоОсталось < МаксРазмер - СколькоНадоОсвободитьМеста Тогда
			Если НЕ ОчищатьВсе Тогда
				Прервать; // Освободили достаточно - выходим
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ОчищатьВсе Тогда
		РаботаСФайламиСлужебныйВызовСервера.ОчиститьВсеСвоиКромеЗанятых();
	КонецЕсли;
#КонецЕсли
КонецПроцедуры

// Рекурсивный обход файлов в рабочем каталоге и сбор информации о них
// Параметры
//  Путь - Строка - путь рабочего каталога
//  МассивФайлов - Массив - массив объектов "Файл"
//  ТаблицаФайлов - Массив - массив структур файлов
Процедура ОбходФайловТаблица(Путь, МассивФайлов, ТаблицаФайлов)
	
#Если Не ВебКлиент Тогда
	Перем Версия;
	Перем ДатаПомещения;
	
	ИмяКаталога = ФайловыеФункцииСлужебныйКлиент.РабочийКаталогПользователя();
	
	Для Каждого ВыбранныйФайл Из МассивФайлов Цикл
		
		Если ВыбранныйФайл.ЭтоКаталог() Тогда
			НовыйПуть = Строка(Путь);
			НовыйПуть = НовыйПуть + ОбщегоНазначенияКлиентСервер.РазделительПути();
			НовыйПуть = НовыйПуть + Строка(ВыбранныйФайл.Имя);
			МассивФайловВКаталоге = НайтиФайлы(НовыйПуть, "*.*");
			
			Если МассивФайловВКаталоге.Количество() <> 0 Тогда
				ОбходФайловТаблица(НовыйПуть, МассивФайловВКаталоге, ТаблицаФайлов);
			КонецЕсли;
		
			Продолжить;
		КонецЕсли;
		
		// временные файлы Word не удаляем из рабочего каталога
		Если Лев(ВыбранныйФайл.Имя, 1) = "~" И ВыбранныйФайл.ПолучитьНевидимость() = Истина Тогда
			Продолжить;
		КонецЕсли;
		
		ОтносительныйПуть = Сред(ВыбранныйФайл.ПолноеИмя, СтрДлина(ИмяКаталога) + 1);
		
		// Если не найдем на диске - то минимальная дата 
		//  будет самой старой - и удалится при очистке из рабочего каталога самых старых файлов
		ДатаПомещения = Дата('00010101');
		
		НайденныеСвойства = РаботаСФайламиСлужебныйВызовСервера.НайтиВРегистреПоПути(ОтносительныйПуть);
		ФайлЕстьВРегистре = НайденныеСвойства.ФайлЕстьВРегистре;
		Версия            = НайденныеСвойства.Версия;
		ДатаПомещения     = ?(ФайлЕстьВРегистре, НайденныеСвойства.ДатаПомещения, ДатаПомещения);
		Владелец          = НайденныеСвойства.Владелец;
		НомерВерсии       = НайденныеСвойства.НомерВерсии;
		ВРегистреНаЧтение = НайденныеСвойства.ВРегистреНаЧтение;
		ВРегистреКодФайла = НайденныеСвойства.ВРегистреКодФайла;
		ВРегистреПапка    = НайденныеСвойства.ВРегистреПапка;
		
		Если ФайлЕстьВРегистре Тогда
			РедактируетТекущийПользователь = РаботаСФайламиСлужебныйВызовСервера.ПолучитьРедактируетТекущийПользователь(Версия);
			
			// Если не занят текущим пользователем, можно удалить
			Если Не РедактируетТекущийПользователь Тогда
				Запись = Новый Структура;
				Запись.Вставить("Путь", ОтносительныйПуть);
				Запись.Вставить("Размер", ВыбранныйФайл.Размер());
				Запись.Вставить("Версия", Версия);
				Запись.Вставить("ДатаПомещенияВРабочийКаталог", ДатаПомещения);
				ТаблицаФайлов.Добавить(Запись);
			КонецЕсли;
		Иначе
			Запись = Новый Структура;
			Запись.Вставить("Путь", ОтносительныйПуть);
			Запись.Вставить("Размер", ВыбранныйФайл.Размер());
			Запись.Вставить("Версия", Версия);
			Запись.Вставить("ДатаПомещенияВРабочийКаталог", ДатаПомещения);
			ТаблицаФайлов.Добавить(Запись);
		КонецЕсли;
		
	КонецЦикла;
#КонецЕсли
	
КонецПроцедуры

// Удалить с диска и из регистра сведений
//
// Параметры
//  Ссылка  - СправочникСсылка.Файлы - файл
//  УдалитьДажеВРабочемКаталоге - Булево - Удалить даже в рабочем каталоге
Процедура УдалитьФайлИзРабочегоКаталога(Ссылка, УдалитьДажеВРабочемКаталоге = Неопределено) Экспорт
	
	ИмяКаталога = ФайловыеФункцииСлужебныйКлиент.РабочийКаталогПользователя();
	
	ВРабочемКаталогеНаЧтение = Ложь;
	ВРабочемКаталогеВладельца = Ложь;
	ПутьВРегистре = РаботаСФайламиСлужебныйВызовСервера.ПолучитьИмяФайлаСПутемИзРегистра(Ссылка, ИмяКаталога, ВРабочемКаталогеНаЧтение, ВРабочемКаталогеВладельца);	
	
	// Получить путь из регистра
	ИмяФайлаСПутем = ПутьВРегистре;
	Если ИмяФайлаСПутем <> "" Тогда
		
		// обычно в рабочем каталоге не удаляем - только если передан УдалитьДажеВРабочемКаталоге
		Если Не ВРабочемКаталогеВладельца ИЛИ УдалитьДажеВРабочемКаталоге = Истина Тогда
		
			ФайлНаДиске = Новый Файл(ИмяФайлаСПутем);
			Если ФайлНаДиске.Существует() Тогда
				файл = Новый Файл(ИмяФайлаСПутем);
				файл.УстановитьТолькоЧтение(Ложь);
				УдалитьФайл(ИмяФайлаСПутем);
				
				ПутьСПодкаталогом = ИмяКаталога;
				Позиция = Найти(ПутьВРегистре, ОбщегоНазначенияКлиентСервер.РазделительПути());
				Если Позиция <> 0 Тогда
					ПутьСПодкаталогом = ИмяКаталога + Лев(ПутьВРегистре, Позиция);
				КонецЕсли;
				
				МассивФайловВКаталоге = НайтиФайлы(ПутьСПодкаталогом, "*.*");
				Если МассивФайловВКаталоге.Количество() = 0 Тогда
					Если ПутьСПодкаталогом <> ИмяКаталога Тогда
						УдалитьФайлы(ПутьСПодкаталогом);
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЕсли;
	
	РаботаСФайламиСлужебныйВызовСервера.УдалитьИзРегистра(Ссылка);
	
КонецПроцедуры

// Получает относительный путь к файлу в рабочем каталоге - если есть в регистре сведений - оттуда,
// если нет - сгенерируем - и запишем в регистр сведений
//
// Параметры
//  ДанныеФайла  - структура с данными файла
//
// Возвращаемое значение:
//   Строка  - путь файла
Функция ПолучитьПутьФайлаВРабочемКаталоге(ДанныеФайла)
	
	ПутьДляВозврата = "";
	ИмяФайлаСПутем = "";
	ИмяКаталога = ФайловыеФункцииСлужебныйКлиент.РабочийКаталогПользователя();
	
	// Сперва пытаемся найти такую запись в регистре сведений
	ИмяФайлаСПутем = ДанныеФайла.ИмяФайлаСПутемВРабочемКаталоге;
	ВРабочемКаталогеНаЧтение = ДанныеФайла.ВРабочемКаталогеНаЧтение;
	
	Если ИмяФайлаСПутем <> "" Тогда
		// Тут надо еще на наличие на диске проверять
		ФайлНаДиске = Новый Файл(ИмяФайлаСПутем);
		Если ФайлНаДиске.Существует() Тогда
			Возврат ИмяФайлаСПутем;	
		КонецЕсли;
	КонецЕсли;
	
	// Формирование имени файла с расширением
	ИмяФайла = ДанныеФайла.ПолноеНаименованиеВерсии;
	Расширение = ДанныеФайла.Расширение;
	Если Не ПустаяСтрока(Расширение) Тогда 
		ИмяФайла = ОбщегоНазначенияКлиентСервер.ПолучитьИмяСРасширением(ИмяФайла, Расширение);
	КонецЕсли;
	
	ИмяФайлаСПутем = "";
	Если Не ПустаяСтрока(ИмяФайла) Тогда
		Если НЕ ПустаяСтрока(ДанныеФайла.РабочийКаталогВладельца) Тогда
			ИмяФайлаСПутем = ДанныеФайла.РабочийКаталогВладельца + ДанныеФайла.ПолноеНаименованиеВерсии + "." + ДанныеФайла.Расширение;
		Иначе
			ИмяФайлаСПутем = ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьУникальноеИмяСПутем(ИмяКаталога, ИмяФайла, ОбщегоНазначенияКлиентПовтИсп.ТипПлатформыКлиента());
		КонецЕсли;		
	КонецЕсли;
	
	Если ПустаяСтрока(ИмяФайла) Тогда
		Возврат "";
	КонецЕсли;
	
	// Запишем в регистр имя файла
	НаЧтение = Истина;
	ВРабочемКаталогеВладельца = ДанныеФайла.РабочийКаталогВладельца <> "";
	РаботаСФайламиСлужебныйВызовСервера.ЗаписатьИмяФайлаСПутемВРегистр(ДанныеФайла.Версия, ИмяФайлаСПутем, НаЧтение, ВРабочемКаталогеВладельца);
	
	Если ДанныеФайла.РабочийКаталогВладельца = "" Тогда
		ПутьДляВозврата = ИмяКаталога + ИмяФайлаСПутем;
	Иначе
		ПутьДляВозврата = ИмяФайлаСПутем;
	КонецЕсли;
	
	Возврат ПутьДляВозврата;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработчики служебных событий подсистем БСП

// Доопределяет список предупреждений пользователю перед завершением работы системы.
//
// Параметры:
//  Предупреждения - Массив, в который можно добавить элементы типа Структура с полями:
//    ТекстФлажка      - Строка - текст флажка.
//    ПоясняющийТекст  - Строка - текст, выводимый в форме сверху
//                       управляющего элемента (флажок или гиперссылка).
//    ТекстГиперссылки - Строка - текст гиперссылки.
//    ДействиеПриУстановленномФлажке - Структура с полями:
//      Форма          - путь к открываемой форме.
//      ПараметрыФормы - произвольная структура параметров формы Форма. 
//    ДействиеПриНажатииГиперссылки - Структура с полями:
//      Форма          - Строка    - путь к форме, которая должна открываться по нажатию на гиперссылку.
//      ПараметрыФормы - Структура - произвольная структура параметров для вышеописанной формы.
//      ПрикладнаяФормаПредупреждения - Строка - путь к форме, которая должна открываться сразу
//                                      вместо универсальной формы в случае, когда в списке 
//                                      предупреждений оказывается только одно данное предупреждение.
//      ПараметрыПрикладнойФормыПредупреждения - Структура - произвольная структура
//                                               параметров для вышеописанной формы.
//
Процедура ПриПолученииСпискаПредупрежденийЗавершенияРаботы(Предупреждения) Экспорт
	
	ПриЗавершенииРаботыСистемы(Предупреждения);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функция для работы со сканером

// Инициализация компоненты сканирования.
Функция ПроинициализироватьКомпоненту() Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЭтоLinuxКлиент() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если КомпонентаTwain = Неопределено Тогда
		
		КодВозврата = ПодключитьВнешнююКомпоненту(
			"ОбщийМакет.КомпонентаTWAIN", "twain", ТипВнешнейКомпоненты.Native);
		
		Если Не КодВозврата Тогда
			Возврат Ложь;
		КонецЕсли;
		
		КомпонентаTwain = Новый("AddIn.twain.AddInNativeExtension");	
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Установка компоненты сканирования.
Процедура УстановитьКомпоненту() Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЭтоLinuxКлиент() Тогда
		Возврат;
	КонецЕсли;
	
	ТекстСостояния = НСтр("ru = 'Компонента сканирования уже установлена.'");
	
	Если КомпонентаTwain = Неопределено Тогда
		
		КомпонентаПодключена = ПодключитьВнешнююКомпоненту(
			"ОбщийМакет.КомпонентаTWAIN", "twain", ТипВнешнейКомпоненты.Native);
		
		Если КомпонентаПодключена Тогда
			Состояние(ТекстСостояния);
		Иначе
			УстановитьВнешнююКомпоненту("ОбщийМакет.КомпонентаTWAIN");
			
			КомпонентаПодключена = ПодключитьВнешнююКомпоненту(
				"ОбщийМакет.КомпонентаTWAIN", "twain", ТипВнешнейКомпоненты.Native);
			
			Если КомпонентаПодключена Тогда
				РаботаСФайламиСлужебныйВызовСервера.ОчиститьНастройкиФормНовогоФайла();
				Оповестить("КомпонентаСканированияУстановлена");
			КонецЕсли;
		КонецЕсли;

		КомпонентаTwain = Новый("AddIn.twain.AddInNativeExtension");
	Иначе
		Состояние(ТекстСостояния);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает версию компоненты сканирования.
Функция ВерсияКомпонентыСканирования() Экспорт
	
	Если Не ПроинициализироватьКомпоненту() Тогда
		Возврат НСтр("ru= 'Компонента сканирования не установлена'");
	КонецЕсли;
	
	Возврат КомпонентаTwain.Версия();
	
КонецФункции

// Возвращает устройства TWAIN (массив строк).
Функция ПолучитьУстройства() Экспорт
	
	Массив = Новый Массив;
	
	Если Не ПроинициализироватьКомпоненту() Тогда
		Возврат Массив;
	КонецЕсли;
	
	СтрокаУстройств = КомпонентаTwain.ПолучитьУстройства();
	
	Для Индекс = 1 По СтрЧислоСтрок(СтрокаУстройств) Цикл
		Строка = СтрПолучитьСтроку(СтрокаУстройств, Индекс);
		Массив.Добавить(Строка);
	КонецЦикла;
	
	Возврат Массив;
	
КонецФункции

// Открывает диалог сканирования и просмотра картинки.
Процедура СканироватьИПоказатьДиалогПросмотра(
			ВладелецФайла,
			УникальныйИдентификатор,
			ЭтаФорма,
			НеОткрыватьКарточкуПослеСозданияИзФайла = Неопределено) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЭтоLinuxКлиент() Тогда
		Возврат;
	КонецЕсли;
	
	СистемнаяИнформация = Новый СистемнаяИнформация();
	ИдентификаторКлиента = СистемнаяИнформация.ИдентификаторКлиента;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВладелецФайла", ВладелецФайла);
	ПараметрыФормы.Вставить("ИдентификаторКлиента", ИдентификаторКлиента);
	
	ПараметрыФормы.Вставить(
		"НеОткрыватьКарточкуПослеСозданияИзФайла", НеОткрыватьКарточкуПослеСозданияИзФайла);
	
	ОткрытьФорму("Справочник.Файлы.Форма.РезультатСканирования", ПараметрыФормы);
	
КонецПроцедуры

// Проверяет установлена ли компонента сканирования и есть ли хоть один сканер.
Функция ДоступнаКомандаСканировать() Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЭтоLinuxКлиент() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не ПроинициализироватьКомпоненту() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если КомпонентаTwain.ЕстьУстройства() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Возвращает настройку сканера по имени.
//
// Параметры:
//  ИмяУстройства  - Строка - Имя сканера
//
//  ИмяНастройки   - Строка - имя настройки, например "XRESOLUTION" или
//                   "PIXELTYPE" или "ROTATION" или "SUPPORTEDSIZES".
//
// Возвращаемое значение:
//   Число - значение настройки сканера.
//
Функция ПолучитьНастройку(ИмяУстройства, ИмяНастройки) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЭтоLinuxКлиент() Тогда
		Возврат -1;
	КонецЕсли;
	
	Попытка
		Возврат КомпонентаTwain.ПолучитьНастройку(ИмяУстройства, ИмяНастройки);
	Исключение
		Возврат -1;
	КонецПопытки;
	
КонецФункции

// Сохраняет в настройках цветность и разрешение.
Процедура СохранитьВНастройкахПараметрыСканера(Разрешение, Цветность, Поворот, РазмерБумаги) Экспорт
	
	МассивСтруктур = Новый Массив;
	
	СистемнаяИнформация = Новый СистемнаяИнформация();
	ИдентификаторКлиента = СистемнаяИнформация.ИдентификаторКлиента;
	
	Элемент = Новый Структура;
	Элемент.Вставить("Объект", "НастройкиСканирования/Разрешение");
	Элемент.Вставить("Настройка", ИдентификаторКлиента);
	Элемент.Вставить("Значение", Разрешение);
	МассивСтруктур.Добавить(Элемент);
	
	Элемент = Новый Структура;
	Элемент.Вставить("Объект", "НастройкиСканирования/Цветность");
	Элемент.Вставить("Настройка", ИдентификаторКлиента);
	Элемент.Вставить("Значение", Цветность);
	МассивСтруктур.Добавить(Элемент);
	
	Элемент = Новый Структура;
	Элемент.Вставить("Объект", "НастройкиСканирования/Поворот");
	Элемент.Вставить("Настройка", ИдентификаторКлиента);
	Элемент.Вставить("Значение", Поворот);
	МассивСтруктур.Добавить(Элемент);
	
	Элемент = Новый Структура;
	Элемент.Вставить("Объект", "НастройкиСканирования/РазмерБумаги");
	Элемент.Вставить("Настройка", ИдентификаторКлиента);
	Элемент.Вставить("Значение", РазмерБумаги);
	МассивСтруктур.Добавить(Элемент);
	
	ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранитьМассив(МассивСтруктур);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Пометка файла как занятого для редактирования
// Параметры
//  ДанныеФайла  - структура с данными файла
Процедура ЗанятьФайл(ДанныеФайла)
	
	ОбщегоНазначенияКлиент.ПредложитьУстановкуРасширенияРаботыСФайлами();
	
	СтрокаОшибки = "";
	Если РаботаСФайламиКлиентСервер.МожноЛиЗанятьФайл(ДанныеФайла, СтрокаОшибки) Тогда
		
		РасширениеПодключено = ПодключитьРасширениеРаботыСФайлами();
	
		СтрокаОшибки = "";
		Если Не РаботаСФайламиСлужебныйВызовСервера.ЗанятьФайл(ДанныеФайла, СтрокаОшибки) Тогда 
			Предупреждение(СтрокаОшибки);
			Возврат;
		КонецЕсли;	
		
		Если РасширениеПодключено Тогда
			НаЧтение = Ложь;
			ВРабочемКаталогеВладельца = ДанныеФайла.РабочийКаталогВладельца <> "";
			ПеререгистрироватьФайлВРабочемКаталоге(ДанныеФайла, НаЧтение, ВРабочемКаталогеВладельца);
		КонецЕсли;

		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Редактирование файла'"),
			ДанныеФайла.НавигационнаяСсылка,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Файл ""%1""
				           |занят для редактирования.'"),
				Строка(ДанныеФайла.Ссылка)),
			БиблиотекаКартинок.Информация32);
		
	Иначе
		Предупреждение(СтрокаОшибки);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

// Покажет напоминание - если стоит настройка
Процедура ПоказатьНапоминаниеПередПоместитьФайл()
	
	Если ФайловыеФункцииСлужебныйКлиентСервер.ПерсональныеНастройкиРаботыСФайлами(
	       ).ПоказыватьПодсказкиПриРедактированииФайлов = Истина Тогда
		
		РасширениеПодключено = ПодключитьРасширениеРаботыСФайлами();
		Если НЕ РасширениеПодключено Тогда
			// Кешируем форму на клиенте
			Форма = РаботаСФайламиСлужебныйКлиентПовтИсп.ПолучитьФормуНапоминанияПередПоместитьФайл();
			БольшеНеПоказывать = Форма.ОткрытьМодально();
			
			Если БольшеНеПоказывать = Истина Тогда
				ПоказыватьПодсказкиПриРедактированииФайлов = Ложь;
				ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранитьИОбновитьПовторноИспользуемыеЗначения("НастройкиПрограммы", "ПоказыватьПодсказкиПриРедактированииФайлов", ПоказыватьПодсказкиПриРедактированииФайлов);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

// Находится ли в рабочем каталоге Файл для данной версии
// Параметры
//  ДанныеФайла  - структура с данными файла
//
// Возвращаемое значение:
//  Булево  - файл находится в рабочем каталоге
//  ТекущаяВерсия  - СправочникСсылка.ВерсииФайлов - версия файла
//  ИмяФайлаСПутем - Строка - имя файла с путем
//  ВРабочемКаталогеНаЧтение - Булево - файл помещен на чтение
//  ВРабочемКаталогеВладельца - Булево - файл в рабочем каталоге владельца (а не в основном рабочем каталоге)
Функция ФайлНаходитсяВЛокальномКэшеФайлов(ДанныеФайла, ТекущаяВерсия, ИмяФайлаСПутем, ВРабочемКаталогеНаЧтение, ВРабочемКаталогеВладельца)
	ИмяФайлаСПутем = "";
	
	// Если это активная версия - берем из ДанныеФайла
	Если ДанныеФайла <> Неопределено И ДанныеФайла.ТекущаяВерсия = ТекущаяВерсия Тогда
		ИмяФайлаСПутем = ДанныеФайла.ИмяФайлаСПутемВРабочемКаталоге;
		ВРабочемКаталогеНаЧтение = ДанныеФайла.ВРабочемКаталогеНаЧтение;
	Иначе
		ВРабочемКаталогеНаЧтение = Истина;
		ИмяКаталога = ФайловыеФункцииСлужебныйКлиент.РабочийКаталогПользователя();
		// Пытаемся найти такую запись в регистре сведений
		ИмяФайлаСПутем = РаботаСФайламиСлужебныйВызовСервера.ПолучитьИмяФайлаСПутемИзРегистра(ТекущаяВерсия, ИмяКаталога, ВРабочемКаталогеНаЧтение, ВРабочемКаталогеВладельца);
	КонецЕсли;
	
	Если ИмяФайлаСПутем <> "" Тогда
		// Тут надо еще на наличие на диске проверять 
		ФайлНаДиске = Новый Файл(ИмяФайлаСПутем);
		Если ФайлНаДиске.Существует() Тогда
			Возврат Истина;	
		Иначе
			ИмяФайлаСПутем = "";
			// Тут же удалим из регистра - т.к. в регистре есть, а на диске нет
			РаботаСФайламиСлужебныйВызовСервера.УдалитьИзРегистра(ТекущаяВерсия);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции

// Освободить место для помещения файла - если место есть, ничего не делает
// Параметры
//  РеквизитыВерсии  - структура с реквизитами версии
Процедура ОсвободитьМестоВРабочемКаталоге(РеквизитыВерсии)

#Если НЕ ВебКлиент Тогда
	
	МаксРазмер = ФайловыеФункцииСлужебныйКлиентСервер.ПерсональныеНастройкиРаботыСФайлами(
		).МаксимальныйРазмерЛокальногоКэшаФайлов;
	
	// Если размер РабочийКаталог установлен равным 0,
	// то считается, что никакого ограничения нет и умолчание в 10 Мб не используется.
	Если МаксРазмер = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКаталога = ФайловыеФункцииСлужебныйКлиент.РабочийКаталогПользователя();
	
	МассивФайлов = НайтиФайлы(ИмяКаталога, "*.*");
	
	РазмерФайловВРабочемКаталоге = 0;
	КоличествоСуммарное = 0;
	// Вычисление полного размера файлов в рабочем каталоге.
	ФайловыеФункцииСлужебныйКлиент.ОбходФайловРазмер(ИмяКаталога, МассивФайлов, РазмерФайловВРабочемКаталоге, КоличествоСуммарное);
	
	Размер = РеквизитыВерсии.Размер;
	Если РазмерФайловВРабочемКаталоге + Размер > МаксРазмер Тогда
		ОчиститьРабочийКаталог(РазмерФайловВРабочемКаталоге, Размер, Ложь); // ОчищатьВсе = Ложь.
	КонецЕсли;
	
#КонецЕсли

КонецПроцедуры

// Выбрать путь к рабочему каталогу
// Параметры
//  ИмяКаталога  - Строка - прежнее имя каталога
//  Заголовок  - Строка - заголовок формы выбора пути каталога
//  РабочийКаталогВладельца - Строка-  Рабочий каталог владельца
//
// Возвращаемое значение:
//   Булево  - успешно ли выполнена операция
Функция ВыбратьПутьКРабочемуКаталогу(ИмяКаталога, Заголовок, РабочийКаталогВладельца) Экспорт
	
		Режим = РежимДиалогаВыбораФайла.ВыборКаталога;
		ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим);
		ДиалогОткрытияФайла.ПолноеИмяФайла = "";
		ДиалогОткрытияФайла.Каталог = ИмяКаталога;
		ДиалогОткрытияФайла.МножественныйВыбор = Ложь;
		ДиалогОткрытияФайла.Заголовок = Заголовок;
		Если ДиалогОткрытияФайла.Выбрать() Тогда
			
			ИмяКаталога = ДиалогОткрытияФайла.Каталог;
			ИмяКаталога = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ИмяКаталога, ОбщегоНазначенияКлиентПовтИсп.ТипПлатформыКлиента());
			
			// Создать каталог для файлов
			Попытка
				СоздатьКаталог(ИмяКаталога);
				ИмяКаталогаТестовое = ИмяКаталога + "ПроверкаДоступа\";
				СоздатьКаталог(ИмяКаталогаТестовое);
				УдалитьФайлы(ИмяКаталогаТестовое);
			Исключение
				// нет прав на создание каталога, или такой путь отсутствует
				
				ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Неверный путь или отсутствуют права на запись в каталог
					           |""%1"".'"),
					ИмяКаталога);
				Предупреждение(ТекстОшибки);
				Возврат Ложь;
			КонецПопытки;
			
			Если РабочийКаталогВладельца = Ложь Тогда
#Если Не ВебКлиент Тогда
				МассивФайловВКаталоге = НайтиФайлы(ИмяКаталога, "*.*");
				Если МассивФайловВКаталоге.Количество() <> 0 Тогда
					ТекстОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'В выбранном рабочем каталоге
						           |""%1""
						           |уже есть файлы.
						           |
						           |Выберите другой каталог.'"),
						ИмяКаталога);
					Предупреждение(ТекстОшибки);
					Возврат Ложь;
				КонецЕсли;
#КонецЕсли
			КонецЕсли;
			
			Возврат Истина;
		КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции	


// Копирует все файлы в указанном каталоге в другой каталог
// Параметры
//  ИмяКаталогаПрежнееЗначение  - Строка - прежнее имя каталога
//  ИмяКаталога  - Строка - новое имя каталога
//  СкопированныеФайлыИПапки - Массив - массив строк - файлов и папок
//  ОригинальныеФайлыИПапки - Массив - массив строк - файлов и папок
//
// Возвращаемое значение:
//   Булево  - успешно ли выполнена операция
Функция СкопироватьСодержимоеКаталога(ИмяКаталогаПрежнееЗначение, ИмяКаталога, 
	СкопированныеФайлыИПапки, ОригинальныеФайлыИПапки)
	
	ТекущийПутьНазначения = ИмяКаталога;
	ТекущийПутьНазначения = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ТекущийПутьНазначения, ОбщегоНазначенияКлиентПовтИсп.ТипПлатформыКлиента());
	ТекущийПутьИсточника = ИмяКаталогаПрежнееЗначение;
	ТекущийПутьИсточника = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ТекущийПутьИсточника, ОбщегоНазначенияКлиентПовтИсп.ТипПлатформыКлиента());
	
	МассивФайловВКаталоге = НайтиФайлы(ТекущийПутьИсточника, "*.*");
	
	Для Каждого ВыбранныйФайл Из МассивФайловВКаталоге Цикл
		
		Если ВыбранныйФайл.ЭтоКаталог() Тогда
			
			НовыйПутьНазначения = ТекущийПутьНазначения + Строка(ВыбранныйФайл.Имя);
			НовыйПутьИсточника = ТекущийПутьИсточника + Строка(ВыбранныйФайл.Имя);
			
			СоздатьКаталог(НовыйПутьНазначения);
			СкопированныеФайлыИПапки.Добавить(НовыйПутьНазначения);
			ОригинальныеФайлыИПапки.Добавить(ВыбранныйФайл.ПолноеИмя);
			
			Если НЕ СкопироватьСодержимоеКаталога(НовыйПутьИсточника, НовыйПутьНазначения, СкопированныеФайлыИПапки, ОригинальныеФайлыИПапки) Тогда
				Возврат Ложь;
			КонецЕсли;	
			
		Иначе // это файл
			
			ПолноеИмяФайлаНазначения = ТекущийПутьНазначения + Строка(ВыбранныйФайл.Имя);  			
			ОригинальныеФайлыИПапки.Добавить(ВыбранныйФайл.ПолноеИмя);
			
			ФайлНазначения = Новый Файл(ПолноеИмяФайлаНазначения);
			Если ФайлНазначения.Существует() Тогда  // это нужно для обратного копирования - в этом случае файлы могут уже быть
				СкопированныеФайлыИПапки.Добавить(ПолноеИмяФайлаНазначения);
				Продолжить;
			КонецЕсли;	
			
			Пока Истина Цикл
				
				Попытка
					КопироватьФайл(ВыбранныйФайл.ПолноеИмя, ПолноеИмяФайлаНазначения);
					СкопированныеФайлыИПапки.Добавить(ПолноеИмяФайлаНазначения);
					Прервать;
				Исключение
					// тут даем Вопрос - повторить или нет
					
					ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Не удалось скопировать файл
						           |""%1"".
						           |Возможно он занят другим приложением.
						           |
						           |Повторить операцию?'"),
						ВыбранныйФайл.ПолноеИмя);
					Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
					Если Ответ = КодВозвратаДиалога.Нет Тогда
						Возврат Ложь;
					КонецЕсли;	
					
				КонецПопытки;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;	
	
	Возврат Истина;
	
КонецФункции

// Удаляет все файлы и папки из переданного массива - идем с конца
// Параметры
//  СкопированныеФайлыИПапки - Массив - массив строк - файлов и папок
//
// Возвращаемое значение:
//   Булево  - успешно ли выполнена операция
Функция УдалитьСодержимоеКаталога(СкопированныеФайлыИПапки)
	
	Количество = СкопированныеФайлыИПапки.Количество();
	Для Индекс = 0 По Количество - 1 Цикл
		
		Путь = СкопированныеФайлыИПапки[Количество - 1 - Индекс];
		Файл = Новый Файл(Путь);
		Если НЕ Файл.Существует() Тогда
			Продолжить; // например временный файл Word ~aaa.doc мог быть удален при закрытии Word
		КонецЕсли;	
		
		Пока Истина Цикл
			
			Попытка
				
				Если Файл.ЭтоФайл() И Файл.ПолучитьТолькоЧтение() Тогда
					Файл.УстановитьТолькоЧтение(Ложь);
				КонецЕсли;	
				
				УдалитьФайлы(Путь);
				
				Прервать;
				
			Исключение
				// тут даем Вопрос - повторить или нет
				
				ТекстВопроса =
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Не удалось удалить файл
					           |""%1"".
					           |Возможно он занят другим приложением.
					           |
					           |Повторить операцию?'"),
					Путь);
				Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
				Если Ответ = КодВозвратаДиалога.Нет Тогда
					Возврат Ложь;
				КонецЕсли;	
				
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЦикла;	
	
	Возврат Истина;
	
КонецФункции

// Переносит все файлы в рабочем каталоге в другой каталог (в том числе и взятые на редактирование)
// Параметры
//  ИмяКаталогаПрежнееЗначение  - Строка - прежнее имя каталога
//  ИмяКаталога  - Строка - новое имя каталога
//
// Возвращаемое значение:
//   Булево  - успешно ли выполнена операция
Функция ПеренестиСодержимоеРабочегоКаталога(ИмяКаталогаПрежнееЗначение, ИмяКаталога) Экспорт
	
	// новый путь является подмножеством старого - это запрещено - приведет к зацикливанию
	Если Найти(ИмяКаталога, ИмяКаталогаПрежнееЗначение) <> 0 Тогда
		
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Выбранный рабочий каталог
			           |""%1""
			           |входит в старый рабочий каталог
			           |""%2"".'"),
			ИмяКаталога, ИмяКаталогаПрежнееЗначение);
		Предупреждение(ТекстСообщения);
		Возврат Ложь;
	КонецЕсли;
	
	// рекурсивно обходим файлы и подкаталоги
	// сперва копируем в новый путь
	
	// 1.  фаза копирования
	СкопированныеФайлыИПапки = Новый Массив; // массив строк - путей
	ОригинальныеФайлыИПапки = Новый Массив; // массив строк - путей в старом пути рабочего каталога
	Если НЕ СкопироватьСодержимоеКаталога(ИмяКаталогаПрежнееЗначение, ИмяКаталога, СкопированныеФайлыИПапки, ОригинальныеФайлыИПапки) Тогда
		// очищаем  то, что успели скопировать
		УдалитьСодержимоеКаталога(СкопированныеФайлыИПапки);
		Возврат Ложь;
	КонецЕсли;	
	
	// 2. Если  все удачно скопировали, то удаляем  исходный каталог. 
	Если НЕ УдалитьСодержимоеКаталога(ОригинальныеФайлыИПапки) Тогда
		// возвращаем обратно в исходный каталог  все, что скопировали
		
		СкопированныеФайлыИПапкиВторойПроход = Новый Массив; // массив строк - путей
		ОригинальныеФайлыИПапкиВторойПроход = Новый Массив; // массив строк - путей в старом пути рабочего каталога
		Если НЕ СкопироватьСодержимоеКаталога(ИмяКаталога, ИмяКаталогаПрежнееЗначение, СкопированныеФайлыИПапкиВторойПроход, ОригинальныеФайлыИПапкиВторойПроход) Тогда
			
			// Если  и  тут  произошла  ошибка,  то  выдаем  предупреждение
			Предупреждение(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Не удалось скопировать обратно содержимое каталога
				           |""%1""
				           |в каталог
				           |""%2"".'"),
				ИмяКаталога,
				ИмяКаталогаПрежнееЗначение));
			Возврат Ложь;
			
		КонецЕсли;
		
	КонецЕсли;

	Возврат Истина;
	
КонецФункции

// Получить Файл с сервера и зарегистрировать в локальном кеше
// Параметры
//  ДанныеФайла  - структура с данными файла
//  ПолноеИмяФайлаВРабочемКаталоге - Строка - здесь возвращается полное имя файла
//  ДатаФайлаВБазе - Дата - дата файла в базе
//  НаЧтение - Булево - файл помещен на чтение
//  ИдентификаторФормы - уникальный идентификатор формы
//
// Возвращаемое значение:
//   Булево  - успешно ли выполнена операция
Функция ПолучитьССервераИЗарегистрироватьВЛокальномКэшеФайлов(
	ДанныеФайла,
	ИмяФайлаСПутем,
	ВремяИзмененияУниверсальное,
	НаЧтение,
	ИдентификаторФормы = Неопределено,
	ДополнительныеПараметры = Неопределено)
	
	ВРабочемКаталогеВладельца = ДанныеФайла.РабочийКаталогВладельца <> "";
	
	Если ИмяФайлаСПутем = "" Тогда
		ИмяКаталога = ФайловыеФункцииСлужебныйКлиент.РабочийКаталогПользователя();
		ИмяКаталогаПрежнееЗначение = ИмяКаталога;
		
		// Формирование имени файла с расширением
		ИмяФайла = ДанныеФайла.ПолноеНаименованиеВерсии;
		Если НЕ ПустаяСтрока(ДанныеФайла.Расширение) Тогда 
			
			ИмяФайла = ОбщегоНазначенияКлиентСервер.ПолучитьИмяСРасширением(
				ИмяФайла, ДанныеФайла.Расширение);
		КонецЕсли;
		
		ИмяФайлаСПутем = "";
		Если НЕ ПустаяСтрока(ИмяФайла) Тогда
			ИмяФайлаСПутем = ИмяКаталога + ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьУникальноеИмяСПутем(
				ИмяКаталога, ИмяФайла, ОбщегоНазначенияКлиентПовтИсп.ТипПлатформыКлиента());
		КонецЕсли;
		
		Если ПустаяСтрока(ИмяФайла) Тогда
			Возврат Ложь;
		КонецЕсли;
		
		МаксимальнаяДлинаПолногоПути = 260;
		Если НРег(ДанныеФайла.Расширение) = "xls" ИЛИ НРег(ДанныеФайла.Расширение) = "xlsx" Тогда
			МаксимальнаяДлинаПолногоПути = 218; // Excel Длина имени файла вместе с путем не должна превышать 218 знака
		КонецЕсли;	
		
		МаксимальнаяДлинаИмениФайла = МаксимальнаяДлинаПолногоПути - 5; // 5 - минимум для "C:\1\"
		
		Если ВРабочемКаталогеВладельца = Ложь Тогда
#Если Не ВебКлиент Тогда
			
			Если СтрДлина(ИмяФайлаСПутем) > МаксимальнаяДлинаПолногоПути Тогда
				
				ТекстСообщения =
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Длина полного пути к файлу (рабочий каталог плюс имя файла) превышает %1 символов
					           |%2'"),
					МаксимальнаяДлинаПолногоПути,
					ИмяФайлаСПутем);
			
				ПутьКаталогаПользователя = КаталогДанныхПользователя();
				МаксимальнаяДлинаИмениФайла = МаксимальнаяДлинаПолногоПути - СтрДлина(ПутьКаталогаПользователя);
				
				// если  имя  файла плюс 5 превышает 260 - пишем "Измените имя  файла на более короткое. ОК" и выходим.
				Если СтрДлина(ИмяФайла) > МаксимальнаяДлинаИмениФайла Тогда
					ТекстСообщения = ТекстСообщения + Символы.ВК + Символы.ВК
						+ НСтр("ru = 'Измените имя файла на более короткое.'");
					Предупреждение(ТекстСообщения);
					Возврат Ложь;
				КонецЕсли;
				
				Пока Истина Цикл
					
					ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Длина полного пути к файлу (рабочий каталог плюс имя файла) превышает %1 символов
						           |%2'"),
						МаксимальнаяДлинаПолногоПути,
						ИмяФайлаСПутем);
					
					ТекстВопроса = ТекстСообщения + Символы.ВК + Символы.ВК
						+ НСтр("ru = 'Выбрать другой основной рабочий каталог?'");
					Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
					Если Ответ = КодВозвратаДиалога.Нет Тогда
						Возврат Ложь;
					КонецЕсли;	
					
					// выбираем другой путь к рабочему каталогу
					Заголовок = НСтр("ru = 'Выберите другой основной рабочий каталог'");
					Если Не ВыбратьПутьКРабочемуКаталогу(ИмяКаталога, Заголовок, Ложь) Тогда
						Возврат Ложь;
					КонецЕсли;
					
					ИмяФайлаСПутем = ИмяКаталога + ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьУникальноеИмяСПутем(
						ИмяКаталога, ИмяФайла, ОбщегоНазначенияКлиентПовтИсп.ТипПлатформыКлиента());
					
					Если СтрДлина(ИмяФайлаСПутем) <= МаксимальнаяДлинаПолногоПути Тогда // уложились в 260 символов
						
						Если ПеренестиСодержимоеРабочегоКаталога(ИмяКаталогаПрежнееЗначение, ИмяКаталога) Тогда
							ФайловыеФункцииСлужебныйКлиент.УстановитьРабочийКаталогПользователя(ИмяКаталога);
						Иначе
							Возврат Ложь;
						КонецЕсли;
						
						Прервать;
					КонецЕсли;
					
				КонецЦикла;
			
			КонецЕсли;
			
#КонецЕсли
		КонецЕсли;
		
	КонецЕсли;
	
	
	Если ВРабочемКаталогеВладельца = Ложь Тогда
		#Если Не ВебКлиент Тогда // в веб клиенте нельзя определить количество свободного места на диске
			ОсвободитьМестоВРабочемКаталоге(ДанныеФайла);
		#КонецЕсли
	КонецЕсли;		

	РазмерФайла = 0;
	
	
	// Запись Файл в каталог
	Попытка
		
		АдресФайла = ДанныеФайла.НавигационнаяСсылкаТекущейВерсии;
		
		ИмяФайла = ОбщегоНазначенияКлиентСервер.ПолучитьИмяСРасширением(
			ДанныеФайла.ПолноеНаименованиеВерсии, ДанныеФайла.Расширение);
		
		РазмерВМб = ДанныеФайла.Размер / (1024 * 1024);
		
		ФайлНаДискеПоИмени = Новый Файл(ИмяФайлаСПутем);
		ИмяИРасширениеВПути = ФайлНаДискеПоИмени.Имя;
		Позиция = Найти(ИмяФайлаСПутем, ИмяИРасширениеВПути);
		ПутьКФайлу = "";
		Если Позиция <> 0 Тогда
			ПутьКФайлу = Лев(ИмяФайлаСПутем, Позиция - 1); // -1 - вычет слеша
		КонецЕсли;
		
		//ПутьКФайлу = ФайлНаДискеПоИмени.Путь;
		ПутьКФайлу = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(ПутьКФайлу, ОбщегоНазначенияКлиентПовтИсп.ТипПлатформыКлиента());
		ИмяФайлаСПутем = ПутьКФайлу + ИмяФайла; // могло смениться расширение
		
		ТекстПояснения =
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Выполняется передача файла ""%1"" (%2 Мб)...
			          |Пожалуйста, подождите.'"),
			ИмяФайла,
			ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерВМб));
		
		Состояние(ТекстПояснения);
		
		Если ДанныеФайла.Свойство("ПутьОбновленияИзФайлаНаДиске") Тогда
			
			КопироватьФайл(ДанныеФайла.ПутьОбновленияИзФайлаНаДиске, ИмяФайлаСПутем);
			
		Иначе
			
			Если ДанныеФайла.Версия <> ДанныеФайла.ТекущаяВерсия Тогда
				АдресФайла = РаботаСФайламиСлужебныйВызовСервера.ПолучитьНавигационнуюСсылкуДляОткрытия(
					ДанныеФайла.Версия, ИдентификаторФормы);
			КонецЕсли;
			
			ПередаваемыеФайлы = Новый Массив;
			Описание = Новый ОписаниеПередаваемогоФайла(ИмяФайла, АдресФайла);
			ПередаваемыеФайлы.Добавить(Описание);
			
			#Если ВебКлиент Тогда
				Если ДополнительныеПараметры <> Неопределено И ДополнительныеПараметры.Свойство("ОткрытьФайл") Тогда
					
				МассивОпераций = Новый Массив;
				
				ОписаниеВызова = Новый Массив;
				ОписаниеВызова.Добавить("ПолучитьФайлы");
				ОписаниеВызова.Добавить(ПередаваемыеФайлы);
				ОписаниеВызова.Добавить(Неопределено);  // Не используется.
				ОписаниеВызова.Добавить(ПутьКФайлу);
				ОписаниеВызова.Добавить(Ложь);          // Интерактивно = Ложь.
				МассивОпераций.Добавить(ОписаниеВызова);
				
				ОписаниеВызова = Новый Массив;
				ОписаниеВызова.Добавить("ЗапуститьПриложение");
				ОписаниеВызова.Добавить(ИмяФайлаСПутем);
				МассивОпераций.Добавить(ОписаниеВызова);
				
				Если НЕ ЗапроситьРазрешениеПользователя(МассивОпераций) Тогда
					// Пользователь не дал разрешения.
					ИмяФайлаСПутем = "";
					Возврат Ложь;
				КонецЕсли;
				
				КонецЕсли;
			#КонецЕсли
			
			Если НЕ ПолучитьФайлы(ПередаваемыеФайлы,, ПутьКФайлу, Ложь) Тогда
				Возврат Ложь;
			КонецЕсли;
			
			// Для варианта с хранением файлов на диске (на сервере)
			// файл удаляется из временного хранилища после получения.
			Если ЭтоАдресВременногоХранилища(АдресФайла) Тогда
				УдалитьИзВременногоХранилища(АдресФайла);
			КонецЕсли;
		КонецЕсли;
		
		Состояние();
		
		Если ДанныеФайла.Зашифрован Тогда
			
			ПредставленияСертификатов = "";
			Для Каждого СтруктураСертификата Из ДанныеФайла.МассивСертификатовШифрования Цикл
				
				Отпечаток = СтруктураСертификата.Отпечаток;
				
				ТолькоВЛичномХранилище = Истина;
				Сертификат = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьСертификатПоОтпечатку(Отпечаток, ТолькоВЛичномХранилище);
				Если Сертификат <> Неопределено Тогда // тут собираем только личные сертификаты - с закрытым ключом - для расшифровки
					Если НЕ ПустаяСтрока(ПредставленияСертификатов) Тогда
						ПредставленияСертификатов = ПредставленияСертификатов + Символы.ПС;
					КонецЕсли;
					ПредставленияСертификатов = ПредставленияСертификатов + СтруктураСертификата.Представление;
				КонецЕсли;
				
			КонецЦикла;	
			
			Пароль = "";
			Заголовок = НСтр("ru = 'Введите пароль для расшифровки'");
			ПараметрыФормы = Новый Структура("Заголовок, ПредставленияСертификатов, Файл", 
				Заголовок, ПредставленияСертификатов, ДанныеФайла.Ссылка);
			КодВозврата = ОткрытьФормуМодально("ОбщаяФорма.ВводПароляСОписаниями", ПараметрыФормы);
			Если ТипЗнч(КодВозврата) = Тип("Строка") Тогда
				Пароль = КодВозврата;
			Иначе
				УдалитьФайлы(ИмяФайлаСПутем);
				ИмяФайлаСПутем = "";
				Возврат Ложь;
			КонецЕсли;
			
			Попытка
				МенеджерКриптографии = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьМенеджерКриптографии();
				МенеджерКриптографии.ПарольДоступаКЗакрытомуКлючу = Пароль;
				
				ИмяФайлаСПутемРасшифрованное = ИмяФайлаСПутем + ".dec";
				МенеджерКриптографии.Расшифровать(ИмяФайлаСПутем, ИмяФайлаСПутемРасшифрованное);
				
				УдалитьФайлы(ИмяФайлаСПутем);
				ПереместитьФайл(ИмяФайлаСПутемРасшифрованное, ИмяФайлаСПутем);
			Исключение
				УдалитьФайлы(ИмяФайлаСПутем);
				ВызватьИсключение;
			КонецПопытки;
			
		КонецЕсли;	
		
		// Установим время изменения файла таким, как оно стоит в текущей версии
		ФайлНаДиске = Новый Файл(ИмяФайлаСПутем);
		ФайлНаДиске.УстановитьУниверсальноеВремяИзменения(ВремяИзмененияУниверсальное);
		
		РазмерФайла = ФайлНаДиске.Размер(); // Т.к. размер на диске может отличаться от размера в базе (при добавлении из веб клиента)
		
		ФайлНаДиске.УстановитьТолькоЧтение(НаЧтение);
		
	Исключение
		Предупреждение(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
		Возврат Ложь;
	КонецПопытки;
	
	ИмяКаталога = ФайловыеФункцииСлужебныйКлиент.РабочийКаталогПользователя();
	
	РаботаСФайламиСлужебныйВызовСервера.ЗанестиИнформациюФайлаВРегистр(
		ДанныеФайла.Версия,
		ИмяФайлаСПутем,
		ИмяКаталога,
		НаЧтение,
		РазмерФайла,
		ВРабочемКаталогеВладельца);
	
	Если ДанныеФайла.Размер <> РазмерФайла Тогда
		// При обновлении из файла на диске коррекция не нужна.
		Если НЕ ДанныеФайла.Свойство("ПутьОбновленияИзФайлаНаДиске") Тогда
			
			РаботаСФайламиСлужебныйВызовСервера.ОбновитьРазмерФайлаИВерсии(
				ДанныеФайла, РазмерФайла, ИдентификаторФормы);
			
			ОповеститьОбИзменении(ДанныеФайла.Ссылка);
			ОповеститьОбИзменении(ДанныеФайла.Версия);
			
			Оповестить("Запись_Файл",
			           Новый Структура("Событие", "ДанныеФайлаИзменены"),
			           ДанныеФайла.Ссылка);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Перерегистрировать В рабочем каталоге с другим флагом НаЧтение
// Параметры
//  ТекущаяВерсия  - СправочникСсылка.ВерсииФайлов - версия файла
//  ИмяФайлаСПутем - Строка - полное имя файла
//  НаЧтение - Булево - файл помещен на чтение
//  ВРабочемКаталогеВладельца - Булево - файл в рабочем каталоге владельца (а не в основном рабочем каталоге)
Процедура ПеререгистрироватьВРабочемКаталоге(ТекущаяВерсия, ИмяФайлаСПутем, НаЧтение, ВРабочемКаталогеВладельца)
	
	ИмяКаталога = ФайловыеФункцииСлужебныйКлиент.РабочийКаталогПользователя();
	
	РаботаСФайламиСлужебныйВызовСервера.ЗанестиИнформациюФайлаВРегистр(ТекущаяВерсия, ИмяФайлаСПутем, ИмяКаталога, НаЧтение, 0, ВРабочемКаталогеВладельца);	
	Файл = Новый Файл(ИмяФайлаСПутем);
	Файл.УстановитьТолькоЧтение(НаЧтение);
	
КонецПроцедуры

// Импорт - с вспомогательными операциями типа проверки предельного размера и впоследствии удаления файлов и показа ошибок
//   при импорте только одной папки - вернет на нее ссылку
//
// Параметры
//  ПапкаДляДобавления - СправочникСсылка.ПапкиФайлов - Папка для добавления
//  ВыбранныеФайлы - Массив - массив объектов "Файл"
//  Комментарий - Строка - Комментарий
//  ХранитьВерсии - Булево - Хранить версии
//  УдалятьФайлыПослеДобавления - Булево - Удалять файлы после добавления
//  Рекурсивно - Булево - Рекурсивно обходить подкаталоги
//  ИдентификаторФормы - уникальный идентификатор формы
//  ПсевдоФайловаяСистема - Соответствие - эмуляция файловой системы - для строки (каталога) возвращает массив строк (подкаталоги и файлы)
//  ДобавленныеФайлы - Массив - Добавленные файлы
//  РежимЗагрузки - Булево - Режим загрузки (из фонового задания ЗагрузкаФайлов)
//
// Возвращаемое значение:
//   СправочникСсылка.ПапкиФайлов - Папка для добавления
Функция ИмпортФайловВыполнить(
	ПапкаДляДобавления, 
	ВыбранныеФайлы, 
	Комментарий, 
	ХранитьВерсии, 
	УдалятьФайлыПослеДобавления, 
	Рекурсивно, 
	ИдентификаторФормы,
	Знач ПсевдоФайловаяСистема,
	ДобавленныеФайлы,
	РежимЗагрузки = Ложь,
	Кодировка = Неопределено) Экспорт
	
	Перем ПерваяПапкаСТакимЖеИменем;
	Перем ПапкаДляДобавленияТекущая;

	ВыбранКаталог = Ложь;
	Путь = "";
	
	КоличествоСуммарное = 0;
	Если ПроверитьПредельныйРазмерФайлов(ВыбранныеФайлы, Рекурсивно, КоличествоСуммарное, ПсевдоФайловаяСистема, РежимЗагрузки) = Ложь Тогда
		Состояние();
		Возврат Неопределено;
	КонецЕсли;

	Состояние();
	
	Если КоличествоСуммарное = 0 Тогда
		
		Если Не РежимЗагрузки Тогда
			Предупреждение(НСтр("ru = 'Нет файлов для добавления'"));
		КонецЕсли;
		
		Возврат Неопределено;
	КонецЕсли;
	
	Индикатор = 0;
	
	МассивФайлов = Новый Массив;
	Счетчик = 0;
	МассивИменФайловСОшибками = Новый Массив;
	МассивСтруктурВсехФайлов = Новый Массив;
	МассивВсехПапок = Новый Массив;
	
	ПапкаДляДобавленияТекущая = Неопределено;
	
	Для Каждого ИмяФайла Из ВыбранныеФайлы Цикл
		ВыбранныйФайл = Новый Файл(ИмяФайла.Значение);
		
		ВыбранКаталог = Ложь;
		Если ВыбранныйФайл.Существует() Тогда
			ВыбранКаталог = ВыбранныйФайл.ЭтоКаталог();
		КонецЕсли;
		
		Если ВыбранКаталог Тогда
			Путь = ИмяФайла.Значение;
			МассивФайловЭтогоКаталога = ФайловыеФункцииСлужебныйКлиентСервер.НайтиФайлыПсевдо(ПсевдоФайловаяСистема, Путь);
			
			ИмяПапки = ВыбранныйФайл.Имя;
			
			ПапкаУжеНайдена = Ложь;
			
			Если РаботаСФайламиСлужебныйВызовСервера.ЕстьПапкаСТакимИменем(ИмяПапки, ПапкаДляДобавления, ПерваяПапкаСТакимЖеИменем) Тогда
				
				Если РежимЗагрузки Тогда
					ПапкаУжеНайдена = Истина;
					ПапкаДляДобавленияТекущая = ПерваяПапкаСТакимЖеИменем;
				Иначе	
				
					ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Папка ""%1"" уже существует.
						           |
						           |Продолжить импорт папки?'"),
						ИмяПапки);
						
					КодВозврата = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);

					Если КодВозврата = КодВозвратаДиалога.Нет Тогда
						Продолжить;
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
			
			Если Не ПапкаУжеНайдена Тогда
				ПапкаДляДобавленияТекущая = РаботаСФайламиСлужебныйВызовСервера.СправочникиПапкиСоздатьЭлемент(ИмяПапки, ПапкаДляДобавления);
			КонецЕсли;
			
			// Собственно импорт 
			РаботаСФайламиКлиент.ИмпортФайлов(
				ПапкаДляДобавленияТекущая, 
				МассивФайловЭтогоКаталога, 
				Индикатор, 
				МассивИменФайловСОшибками, 
				МассивСтруктурВсехФайлов, 
				Комментарий, 
				ХранитьВерсии, 
				Рекурсивно, 
				КоличествоСуммарное, 
				Счетчик,
				ИдентификаторФормы,
				ПсевдоФайловаяСистема,
				ДобавленныеФайлы,
				МассивВсехПапок,
				РежимЗагрузки,
				Кодировка);
			МассивВсехПапок.Добавить(Путь);	
				
		Иначе
			МассивФайлов.Добавить(ВыбранныйФайл);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивФайлов.Количество() <> 0 Тогда
		// Собственно импорт 
		РаботаСФайламиКлиент.ИмпортФайлов(
			ПапкаДляДобавления, 
			МассивФайлов, 
			Индикатор, 
			МассивИменФайловСОшибками, 
			МассивСтруктурВсехФайлов, 
			Комментарий, 
			ХранитьВерсии, 
			Рекурсивно, 
			КоличествоСуммарное, 
			Счетчик,
			ИдентификаторФормы,
			ПсевдоФайловаяСистема,
			ДобавленныеФайлы,
			МассивВсехПапок,
			РежимЗагрузки,
			Кодировка);
	КонецЕсли;
	
	Если МассивСтруктурВсехФайлов.Количество() > 1 Тогда
		
		ТекстСостояния = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Импорт файлов завершен. Импортировано %1 файлов'"), Строка(МассивСтруктурВсехФайлов.Количество()) );
			
		Если РежимЗагрузки Тогда
			ТекстСостояния = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Загрузка файлов завершена. Загружено %1 файлов'"), Строка(МассивСтруктурВсехФайлов.Количество()) );
		КонецЕсли;
		
		Состояние(ТекстСостояния);
	Иначе
		Состояние();
	КонецЕсли;
	
	Если УдалятьФайлыПослеДобавления = Истина Тогда
		ФайловыеФункцииСлужебныйКлиентСервер.УдалитьФайлыПослеДобавления(
			МассивСтруктурВсехФайлов, МассивВсехПапок, РежимЗагрузки);
	КонецЕсли;
	
	Если МассивСтруктурВсехФайлов.Количество() = 1 Тогда
		Элемент0 = МассивСтруктурВсехФайлов[0];
		Ссылка = ПолучитьНавигационнуюСсылку(элемент0.Файл);
		ПоказатьОповещениеПользователя(
			НСтр("ru = 'Изменение:'"),
			ссылка,
			Элемент0.Файл,
			БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
	// Вывод сообщений об ошибках
	Если МассивИменФайловСОшибками.Количество() <> 0 Тогда
		
		Параметры = Новый Структура;
		Параметры.Вставить("МассивИменФайловСОшибками", МассивИменФайловСОшибками);
		Если РежимЗагрузки Тогда
			Параметры.Вставить("Заголовок", "Отчет о загрузке файлов");
		КонецЕсли;
		
		ОткрытьФорму("Справочник.Файлы.Форма.ФормаОтчета", Параметры);
	КонецЕсли;
	
	Если ВыбранныеФайлы.Количество() <> 1 Тогда
		ПапкаДляДобавленияТекущая = Неопределено;
	КонецЕсли;	
	
	Возврат ПапкаДляДобавленияТекущая;
КонецФункции

// Проверить Предельный Размер Файлов - вернет Ложь, если есть файлы, превышающие предельный размер,
//   и пользователь в диалоге предупреждения о наличии таких файлов выбрал "Отмена"
// Параметры
//  ВыбранныеФайлы - Массив - массив объектов "Файл"
//  Рекурсивно - Булево - Рекурсивно обходить подкаталоги
//  КоличествоСуммарное - Число - Количество суммарное импортированных файлов
//  ПсевдоФайловаяСистема - Соответствие - эмуляция файловой системы - для строки (каталога) возвращает массив строк (подкаталоги и файлы)
//  РежимЗагрузки - Булево - Режим загрузки (из фонового задания ЗагрузкаФайлов)
//
// Возвращаемое значение:
//   Булево  - успешно ли выполнена операция
Функция ПроверитьПредельныйРазмерФайлов(ВыбранныеФайлы, Рекурсивно, КоличествоСуммарное, 
	Знач ПсевдоФайловаяСистема, РежимЗагрузки = Ложь) Экспорт
	
	МассивСлишкомБольшихФайлов = Новый Массив;
	
	Путь = "";
	
	МассивФайлов = Новый Массив;
	КоличествоСуммарное = 0;
	
	Для Каждого ИмяФайла Из ВыбранныеФайлы Цикл
		
		Путь = ИмяФайла.Значение;
		ВыбранныйФайл = Новый Файл(Путь);

		ВыбранныйФайл = Новый Файл(ИмяФайла.Значение);
		ВыбранКаталог = Ложь;
		
		Если ВыбранныйФайл.Существует() Тогда
			ВыбранКаталог = ВыбранныйФайл.ЭтоКаталог();
		КонецЕсли;
		
		Если ВыбранКаталог Тогда
			Состояние(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Идет сбор информации о каталоге
				           |""%1"".
				           |Пожалуйста, подождите.'"),
				Путь));
			
			МассивФайловЭтогоКаталога = ФайловыеФункцииСлужебныйКлиентСервер.НайтиФайлыПсевдо(ПсевдоФайловаяСистема, Путь);
			ОбходФайловДляПроверкиПредельногоРазмера(МассивФайловЭтогоКаталога, МассивСлишкомБольшихФайлов, Рекурсивно, КоличествоСуммарное, ПсевдоФайловаяСистема);
		Иначе
			МассивФайлов.Добавить(ВыбранныйФайл);
		КонецЕсли;
	КонецЦикла;
	
	Если МассивФайлов.Количество() <> 0 Тогда
		ОбходФайловДляПроверкиПредельногоРазмера(МассивФайлов, МассивСлишкомБольшихФайлов, Рекурсивно, КоличествоСуммарное, ПсевдоФайловаяСистема);
	КонецЕсли;
	
	// Был хоть один слишком большой файл
	Если МассивСлишкомБольшихФайлов.Количество() <> 0 Тогда 
		
		ФайлыБольшие = Новый СписокЗначений;
		Параметры = Новый Структура;
		
		Для Каждого Файл Из МассивСлишкомБольшихФайлов Цикл
			БольшойФайл = Новый Файл(Файл);
			РазмерФайлаВМб = Цел(БольшойФайл.Размер() / (1024 * 1024));
			ТекстСтроки = Строка(Файл) + " (" + Строка(РазмерФайлаВМб) + " " + НСтр("ru = 'МБ)'");
			ФайлыБольшие.Добавить(ТекстСтроки);
		КонецЦикла;
		
		Параметры.Вставить("ФайлыБольшие", ФайлыБольшие);
		Параметры.Вставить("РежимЗагрузки", РежимЗагрузки);
		Параметры.Вставить("Заголовок", "Предупреждение при загрузке файлов");
		
		Результат = ОткрытьФормуМодально("Справочник.Файлы.Форма.ВопросПриИмпортеФайлов", Параметры);
		
		Возврат Результат = КодВозвратаДиалога.ОК;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Обход Файлов рекурсивный - для определения размера файлов
// Параметры
//  МассивФайлов - Массив - массив объектов "Файл"
//  МассивСлишкомБольшихФайлов - Массив - массив файлов
//  Рекурсивно - Булево - Рекурсивно обходить подкаталоги
//  КоличествоСуммарное - Число - Количество суммарное импортированных файлов
//  ПсевдоФайловаяСистема - Соответствие - эмуляция файловой системы - для строки (каталога) возвращает массив строк (подкаталоги и файлы)
Процедура ОбходФайловДляПроверкиПредельногоРазмера(
				МассивФайлов,
				МассивСлишкомБольшихФайлов,
				Рекурсивно,
				КоличествоСуммарное,
				Знач ПсевдоФайловаяСистема) Экспорт
	
	МаксРазмерФайла = ФайловыеФункцииСлужебныйКлиентСервер.ОбщиеНастройкиРаботыСФайлами(
		).МаксимальныйРазмерФайла;
	
	Для Каждого ВыбранныйФайл Из МассивФайлов Цикл
		
		Если ВыбранныйФайл.Существует() Тогда
			
			Если ВыбранныйФайл.Расширение = ".lnk" Тогда
				ВыбранныйФайл = РазыменоватьLnkФайл(ВыбранныйФайл);
			КонецЕсли;
			
			Если ВыбранныйФайл.ЭтоКаталог() Тогда
				
				Если Рекурсивно Тогда
					НовыйПуть = Строка(ВыбранныйФайл.Путь);
					НовыйПуть = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(НовыйПуть, ОбщегоНазначенияКлиентПовтИсп.ТипПлатформыКлиента());
					НовыйПуть = НовыйПуть + Строка(ВыбранныйФайл.Имя);
					МассивФайловВКаталоге = ФайловыеФункцииСлужебныйКлиентСервер.НайтиФайлыПсевдо(ПсевдоФайловаяСистема, НовыйПуть);
					
					// Рекурсия
					Если МассивФайловВКаталоге.Количество() <> 0 Тогда
						ОбходФайловДляПроверкиПредельногоРазмера(МассивФайловВКаталоге, МассивСлишкомБольшихФайлов, Рекурсивно, КоличествоСуммарное, ПсевдоФайловаяСистема);
					КонецЕсли;
				КонецЕсли;
			
				Продолжить;
			КонецЕсли;
			
			КоличествоСуммарное = КоличествоСуммарное + 1;
			
			// Размер файла слишком большой
			Если ВыбранныйФайл.Размер() > МаксРазмерФайла Тогда
				МассивСлишкомБольшихФайлов.Добавить(ВыбранныйФайл.ПолноеИмя);
				Продолжить;
			КонецЕсли;
		
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Разыменовать lnk файл
// Параметры
//  ВыбранныйФайл - Файл - объект типа Файл
//
// Возвращаемое значение:
//   Строка - на что ссылается lnk  файл
Функция РазыменоватьLnkФайл(ВыбранныйФайл) Экспорт
	
#Если Не ВебКлиент Тогда
	Если НЕ СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().ЭтоБазоваяВерсияКонфигурации Тогда
		ShellApp = Новый COMОбъект("shell.application");
		FolderObj = ShellApp.NameSpace(ВыбранныйФайл.Путь);			// полный (только) путь на lnk-файл
		FolderObjItem = FolderObj.items().item(ВыбранныйФайл.Имя); 	// только имя lnk-файла
		Link = FolderObjItem.GetLink();
		Возврат Новый Файл(Link.path);
	КонецЕсли;
#КонецЕсли
	
	Возврат ВыбранныйФайл;
	
КонецФункции

// Покажет напоминание - если стоит настройка
Процедура ПоказатьИнформациюФайлНеБылИзменен()
	
	Если ФайловыеФункцииСлужебныйКлиентСервер.ПерсональныеНастройкиРаботыСФайлами(
	       ).ПоказыватьИнформациюЧтоФайлНеБылИзменен = Истина Тогда
		
		БольшеНеПоказывать = ОткрытьФормуМодально("Справочник.Файлы.Форма.ИнформацияФайлНеБылИзменен");
		
		Если БольшеНеПоказывать = Истина Тогда
			ПоказыватьИнформациюЧтоФайлНеБылИзменен = Ложь;
			
			ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранитьИОбновитьПовторноИспользуемыеЗначения(
				"НастройкиПрограммы",
				"ПоказыватьИнформациюЧтоФайлНеБылИзменен",
				ПоказыватьИнформациюЧтоФайлНеБылИзменен);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Открыть диалог выбора сертификатов с отмеченным своим сертификатом
Функция ВыбратьСертификатыДляШифрования(ДанныеФайла) Экспорт
	
	МассивСтруктурСертификатов =
		ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьМассивСтруктурСертификатов(Ложь);
	
	ОтпечатокЛичногоСертификатаДляШифрования
		= ФайловыеФункцииСлужебныйКлиентСервер.ПерсональныеНастройкиРаботыСФайлами(
			).ОтпечатокЛичногоСертификатаДляШифрования;
	
	// отпечаток сохраненный в ХранилищеНастроек мог устареть - сертификат могли уже удалить
	Если ОтпечатокЛичногоСертификатаДляШифрования <> Неопределено И НЕ ПустаяСтрока(ОтпечатокЛичногоСертификатаДляШифрования) Тогда
		Сертификат = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьСертификатПоОтпечатку(ОтпечатокЛичногоСертификатаДляШифрования, Истина); // ТолькоЛичные
		Если Сертификат = Неопределено Тогда        
			ОтпечатокЛичногоСертификатаДляШифрования = "";
		КонецЕсли;
	КонецЕсли;
	
	Если ОтпечатокЛичногоСертификатаДляШифрования = Неопределено ИЛИ ПустаяСтрока(ОтпечатокЛичногоСертификатаДляШифрования) Тогда
		
		МассивСтруктурЛичныхСертификатов = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьМассивСтруктурСертификатов(Истина); // ТолькоЛичные
		
		ПараметрыФормы = Новый Структура("МассивСтруктурСертификатов", МассивСтруктурЛичныхСертификатов);        
		СтруктураВозврата = ОткрытьФормуМодально("ОбщаяФорма.ВыборСертификата", ПараметрыФормы);
		Если ТипЗнч(СтруктураВозврата) = Тип("Структура") Тогда
			ОтпечатокЛичногоСертификатаДляШифрования = СтруктураВозврата.Отпечаток;
			ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить("ЭЦП", "ОтпечатокЛичногоСертификатаДляШифрования", ОтпечатокЛичногоСертификатаДляШифрования);
			ОбновитьПовторноИспользуемыеЗначения();
		Иначе
			Предупреждение(НСтр("ru = 'Не выбран персональный сертификат для шифрования.'"));
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("МассивСтруктурСертификатов", МассивСтруктурСертификатов);
	ПараметрыФормы.Вставить("ФайлСсылка",                 ДанныеФайла.Ссылка);
	
	ПараметрыФормы.Вставить("ОтпечатокЛичногоСертификатаДляШифрования",
		ОтпечатокЛичногоСертификатаДляШифрования);
	
	СтруктураВозврата = ОткрытьФормуМодально("ОбщаяФорма.ВыборСертификатовШифрования", ПараметрыФормы);
	
	Возврат СтруктураВозврата;
	
КонецФункции

// Записывает сертификаты шифрования в табличную часть Файла
Процедура ЗаписатьСертификатыВТабличнуюЧасть(ФайлСсылка, МассивСертификатов, УникальныйИдентификатор)
    
    МассивОтпечатков = Новый Массив;
    Для Каждого Сертификат Из МассивСертификатов Цикл
        Отпечаток = Base64Строка(Сертификат.Отпечаток);
        Представление = ЭлектроннаяЦифроваяПодписьКлиентСервер.ПолучитьПредставлениеПользователя(Сертификат.Субъект);
        ДвоичныеДанныеСертификата = Сертификат.Выгрузить();
        
        ОтпечатокСтруктура = Новый Структура("Отпечаток, Представление, Сертификат", Отпечаток, Представление, ДвоичныеДанныеСертификата);
        МассивОтпечатков.Добавить(ОтпечатокСтруктура);
    КонецЦикла;
    
    РаботаСФайламиСлужебныйВызовСервера.ЗанестиИнформациюОСертификатахШифрования(ФайлСсылка, МассивОтпечатков, УникальныйИдентификатор);
    
    Оповестить("Запись_Файл", Новый Структура("Событие", "ОбновленаИнформацияОСертификатахШифрования"), ФайлСсылка);
    
КонецПроцедуры    

// Функция предназначена для открытия файла соответствующим приложением
//
// Параметры
//  ИмяОткрываемогоФайла - Строка - полное имя файла
Процедура ВыполнитьЗапускПриложения(ИмяОткрываемогоФайла) Экспорт
	
	РасширениеПодключено = ПодключитьРасширениеРаботыСФайлами();
	Если РасширениеПодключено Тогда
		// Открыть Файл
		СистемнаяИнфо = Новый СистемнаяИнформация;
		Если СистемнаяИнфо.ТипПлатформы = ТипПлатформы.Windows_x86 ИЛИ СистемнаяИнфо.ТипПлатформы = ТипПлатформы.Windows_x86_64 Тогда
			ИмяОткрываемогоФайла = СтрЗаменить(ИмяОткрываемогоФайла, "/", "\");
		КонецЕсли;
		
		ЗапуститьПриложение(ИмяОткрываемогоФайла);
	КонецЕсли;
	
КонецПроцедуры

// Сравнивает 2 файла (txt doc doc odt) с помощью MS Office или OpenOffice
Процедура СравнитьФайлы(ПутьКФайлу1, ПутьКФайлу2, СпособСравненияВерсийФайлов) Экспорт
	
	Попытка
		
		Если СпособСравненияВерсийФайлов = "MicrosoftOfficeWord" Тогда
			ОбъектWord = Новый COMОбъект("Word.Application");
			ОбъектWord.Visible = 0;

			Документ = ОбъектWord.Documents.Open(ПутьКФайлу1);
			
			Документ.Merge(ПутьКФайлу2, 0, 0, 0); // MergeTarget:=wdMergeTargetSelected, DetectFormatChanges:=False, UseFormattingFrom:=wdFormattingFromCurrent
			
			ОбъектWord.Visible = 1;
			ОбъектWord.Activate(); 	
			
			Документ.Close();
		ИначеЕсли СпособСравненияВерсийФайлов = "OpenOfficeOrgWriter" Тогда 
			
			// снимем readonly - иначе не сработает
			Файл1 = Новый Файл(ПутьКФайлу1);
			Файл1.УстановитьТолькоЧтение(Ложь);
			
			Файл2 = Новый Файл(ПутьКФайлу2);
			Файл2.УстановитьТолькоЧтение(Ложь);
			
			// Открыть OpenOffice
			ServiceManager = Новый COMОбъект("com.sun.star.ServiceManager");
			Reflection = ServiceManager.createInstance("com.sun.star.reflection.CoreReflection");
			Desktop = ServiceManager.createInstance("com.sun.star.frame.Desktop");
			Dispatcher = ServiceManager.createInstance("com.sun.star.frame.DispatchHelper");
			
			// Открыть документ OpenOffice
			Args = Новый COMSafeArray("VT_DISPATCH", 1);
			OOДокумент = Desktop.loadComponentFromURL(ПреобразоватьВURL(ПутьКФайлу2), "_blank", 0, Args);
			
			frame = Desktop.getCurrentFrame();
			
			// установить показ изменений
			ПараметрыСравнения = Новый COMSafeArray("VT_VARIANT", 1);
			ПараметрыСравнения.SetValue(0, ПрисвоитьЗначениеСвойству(ServiceManager, "ShowTrackedChanges", Истина));
			dispatcher.executeDispatch(frame, ".uno:ShowTrackedChanges", "", 0, ПараметрыСравнения);

			// сравнить с документом
			ПараметрыВызова = Новый COMSafeArray("VT_VARIANT", 1);
			ПараметрыВызова.SetValue(0, ПрисвоитьЗначениеСвойству(ServiceManager, "URL", ПреобразоватьВURL(ПутьКФайлу1)));
			dispatcher.executeDispatch(frame, ".uno:CompareDocuments", "", 0, ПараметрыВызова);
			
			OOДокумент = Неопределено;
		КонецЕсли;
		
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке() ));
	КонецПопытки;
	
КонецПроцедуры

// Функция преобразует Windows имя файла в URL OpenOffice
Функция ПреобразоватьВURL(ИмяФайла)
	Возврат "file:///" + СтрЗаменить(ИмяФайла, "\", "/");
КонецФункции

// создание структуры для параметров OpenOffice
Функция ПрисвоитьЗначениеСвойству(Объект, ИмяСвойства, ЗначениеСвойства)
    Свойства = Объект.Bridge_GetStruct("com.sun.star.beans.PropertyValue");
    Свойства.Name = ИмяСвойства;
    Свойства.Value = ЗначениеСвойства;
    
    Возврат Свойства;
КонецФункции

// Возвращает каталог данных пользователя внутри стандартного каталога данных приложения.
//   Этот каталог может использоваться для хранения файлов, захваченных текущим пользователем.
//   Для работы метода на веб-клиенте под 8.3 необходимо предварительно подключить расширение работы с файлами.
//
Функция КаталогДанныхПользователя()
	
	#Если ВебКлиент Тогда
		Если ОбщегоНазначенияКлиентСервер.ЭтоПлатформа83БезРежимаСовместимости() Тогда
			Возврат Вычислить("РабочийКаталогДанныхПользователя()");
		Иначе
			Возврат "";
		КонецЕсли;
	#Иначе
		Если ОбщегоНазначенияКлиентСервер.ЭтоLinuxКлиент() Тогда
			Возврат Вычислить("РабочийКаталогДанныхПользователя()");
		Иначе
			Оболочка = Новый COMОбъект("WScript.Shell");
			КаталогДанныхПользователя = Оболочка.ExpandEnvironmentStrings("%APPDATA%");
			Возврат ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(КаталогДанныхПользователя);
		КонецЕсли;
	#КонецЕсли
	
КонецФункции
