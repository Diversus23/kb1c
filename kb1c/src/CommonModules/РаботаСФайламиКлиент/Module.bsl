////////////////////////////////////////////////////////////////////////////////
// Подсистема "Работа с файлами".
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функция для работы со сканером

// Открывает форму настройки сканирования.
Процедура ОткрытьФормуНастройкиСканирования() Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЭтоLinuxКлиент() Тогда
		ТекстСообщения = НСтр("ru = 'Сканирование не поддерживается в клиенте под управлением ОС Linux.'");
		Предупреждение(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	КомпонентаУстановлена = РаботаСФайламиСлужебныйКлиент.ПроинициализироватьКомпоненту();
	
	СистемнаяИнформация = Новый СистемнаяИнформация();
	ИдентификаторКлиента = СистемнаяИнформация.ИдентификаторКлиента;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("КомпонентаУстановлена", КомпонентаУстановлена);
	ПараметрыФормы.Вставить("ИдентификаторКлиента",  ИдентификаторКлиента);
	
	ОткрытьФорму("Справочник.Файлы.Форма.НастройкаСканирования", ПараметрыФормы);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Команды работы с файлами

// Сохраняет отредактированный файл в ИБ и снимает с него блокировку
Процедура ЗакончитьРедактирование(
	ПараметрКоманды,
	ИдентификаторФормы,
	Знач ХранитьВерсии = Неопределено,
	Знач РедактируетТекущийПользователь = Неопределено,
	Знач Редактирует = Неопределено,
	Знач АвторТекущейВерсии = Неопределено,
	Знач Кодировка = Неопределено) Экспорт
	
	Если ПараметрКоманды = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ПараметрКоманды) = Тип("Массив") Тогда
		
		МассивОбработанных = ЗакончитьРедактированиеПоСсылкам(
			ПараметрКоманды, 
			ИдентификаторФормы); 
			
		ОповеститьОбИзменении(Тип("СправочникСсылка.Файлы"));
		
		Для Каждого ФайлСсылка Из МассивОбработанных Цикл
			Оповестить("Запись_Файл", Новый Структура("Событие", "ЗаконченоРедактирование"), ФайлСсылка);
			Оповестить("Запись_Файл", Новый Структура("Событие", "ДанныеФайлаИзменены"), ФайлСсылка);
			Оповестить("Запись_Файл", Новый Структура("Событие", "ВерсияСохранена"), ФайлСсылка);
		КонецЦикла;
		
	Иначе
		РедактированиеЗакончено = РаботаСФайламиСлужебныйКлиент.ЗакончитьРедактирование(
			ПараметрКоманды,
			ИдентификаторФормы,
			ХранитьВерсии,
			РедактируетТекущийПользователь,
			Редактирует,
			АвторТекущейВерсии,
			"",           //ПереданныйПолныйПутьКФайлу
			Неопределено, //СоздатьНовуюВерсию
			Неопределено, //КомментарийКВерсии
			Истина,       //ПоказыватьОповещение
			Ложь,         //ПрименитьКоВсем
			Истина,       //ОсвобождатьФайлы
			Кодировка);
			
		Если РедактированиеЗакончено Тогда
			Оповестить("Запись_Файл", Новый Структура("Событие", "ЗаконченоРедактирование"), ПараметрКоманды);
			ОповеститьОбИзменении(ПараметрКоманды);
			Оповестить("Запись_Файл", Новый Структура("Событие", "ДанныеФайлаИзменены"), ПараметрКоманды);
			Оповестить("Запись_Файл", Новый Структура("Событие", "ВерсияСохранена"), ПараметрКоманды);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Блокирует файл для редактирования и открывает его
Процедура Редактировать(ОбъектСсылка,
                        УникальныйИдентификатор = Неопределено,
                        РабочийКаталогВладельца = Неопределено) Экспорт
	
	Если ОбъектСсылка = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ФайлОтредактирован = РаботаСФайламиСлужебныйКлиент.РедактироватьФайлПоСсылке(
		ОбъектСсылка, УникальныйИдентификатор, РабочийКаталогВладельца);
	
	Если ФайлОтредактирован Тогда
	
		ОповеститьОбИзменении(ОбъектСсылка);
		Оповестить("Запись_Файл", Новый Структура("Событие", "ДанныеФайлаИзменены"), ОбъектСсылка);
		Оповестить("Запись_Файл", Новый Структура("Событие", "ФайлРедактировался"), ОбъектСсылка);
	КонецЕсли;
	
КонецПроцедуры

// Выполняет блокировку файла или нескольких файлов
// ПараметрКоманды - либо ссылка на файл, либо массив ссылок на файлы
Процедура Занять(ПараметрКоманды, УникальныйИдентификатор = Неопределено) Экспорт
	
	Если ПараметрКоманды = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ПараметрКоманды) = Тип("Массив") Тогда
		
		РаботаСФайламиСлужебныйКлиент.ЗанятьФайлыПоСсылкам(ПараметрКоманды);
		
		ОповеститьОбИзменении(Тип("СправочникСсылка.Файлы"));
		Для Каждого ФайлСсылка Из ПараметрКоманды Цикл
			Оповестить("Запись_Файл", Новый Структура("Событие", "ДанныеФайлаИзменены"), ФайлСсылка);
		КонецЦикла;
		
	Иначе
		
		Если РаботаСФайламиСлужебныйКлиент.ЗанятьФайлПоСсылке(ПараметрКоманды, УникальныйИдентификатор) Тогда
			ОповеститьОбИзменении(ПараметрКоманды);
			Оповестить("Запись_Файл", Новый Структура("Событие", "ДанныеФайлаИзменены"), ПараметрКоманды);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Освобождает занятый ранее файл.
Процедура ОсвободитьФайл(
	ПараметрКоманды,
	Знач ХранитьВерсии = Неопределено,
	Знач РедактируетТекущийПользователь = Неопределено,
	Знач Редактирует = Неопределено,
	УникальныйИдентификатор = Неопределено) Экспорт

	Если ПараметрКоманды = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ПараметрКоманды) = Тип("Массив") Тогда
		
		РаботаСФайламиСлужебныйКлиент.ОсвободитьФайлыПоСсылкам(ПараметрКоманды);
		
		ОповеститьОбИзменении(Тип("СправочникСсылка.Файлы"));
		Для Каждого ФайлСсылка Из ПараметрКоманды Цикл
			Оповестить("Запись_Файл", Новый Структура("Событие", "ДанныеФайлаИзменены"), ФайлСсылка);
		КонецЦикла;
		
	Иначе
		
		Если РаботаСФайламиСлужебныйКлиент.ОсвободитьФайл(
			ПараметрКоманды, 
			ХранитьВерсии,
			РедактируетТекущийПользователь,
			Редактирует,
			УникальныйИдентификатор) Тогда
			
			ОповеститьОбИзменении(ПараметрКоманды);
			Оповестить("Запись_Файл", Новый Структура("Событие", "ДанныеФайлаИзменены"), ПараметрКоманды);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Открывает файл для просмотра.
Процедура Открыть(ДанныеФайла) Экспорт
	
	ОткрытьФайл(ДанныеФайла);
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Событие", "ФайлОткрыт");
	Оповестить("ФайлОткрыт", ПараметрыОповещения, ДанныеФайла.Ссылка);
	
КонецПроцедуры

// Сохраняет файл в информационной базе, но не освобождает его.
Процедура ОпубликоватьФайл(ПараметрКоманды, ИдентификаторФормы) Экспорт
	
	Если ПараметрКоманды = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ПараметрКоманды) = Тип("Массив") Тогда
		
		РаботаСФайламиСлужебныйКлиент.ОпубликоватьФайлыПоСсылкам(ПараметрКоманды, ИдентификаторФормы);
		
		Для Каждого ФайлСсылка Из ПараметрКоманды Цикл
			Оповестить("Запись_Файл", Новый Структура("Событие", "ДанныеФайлаИзменены"), ФайлСсылка);
			Оповестить("Запись_Файл", Новый Структура("Событие", "ВерсияСохранена"), ФайлСсылка);
		КонецЦикла;
		
	Иначе
		
		Если РаботаСФайламиСлужебныйКлиент.ОпубликоватьФайл(ПараметрКоманды, ИдентификаторФормы) Тогда
			Оповестить("Запись_Файл", Новый Структура("Событие", "ДанныеФайлаИзменены"), ПараметрКоманды);
			Оповестить("Запись_Файл", Новый Структура("Событие", "ВерсияСохранена"), ПараметрКоманды);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Открывает каталог на локальном компьютере в котором размещен этот файл.
Процедура ОткрытьКаталогФайла(ДанныеФайла) Экспорт
	
	РаботаСФайламиСлужебныйКлиент.КаталогФайла(ДанныеФайла);
	
КонецПроцедуры

// Сохраняет текущую версию файла в выбранный каталог на жестком или сетевом диске.
Процедура СохранитьКак(ДанныеФайла, УникальныйИдентификатор = Неопределено) Экспорт
	
	РаботаСФайламиСлужебныйКлиент.СохранитьКак(ДанныеФайла, УникальныйИдентификатор);
	
КонецПроцедуры

// Выбирает на  диске файл и создает из него новую версию.
Процедура ОбновитьИзФайлаНаДиске(ДанныеФайла, ИдентификаторФормы) Экспорт
	
	РасширениеПодключено = ПодключитьРасширениеРаботыСФайлами();
	Если РасширениеПодключено Тогда
		
		Если РаботаСФайламиСлужебныйКлиент.ОбновитьИзФайлаНаДиске(ДанныеФайла, ИдентификаторФормы) Тогда
			ОповеститьОбИзменении(ДанныеФайла.Ссылка);
			Оповестить("Запись_Файл", Новый Структура("Событие", "ДанныеФайлаИзменены"), ДанныеФайла.Ссылка);
			Оповестить("Запись_Файл", Новый Структура("Событие", "ВерсияСохранена"), ДанныеФайла.Ссылка);
		КонецЕсли;
	
	Иначе
		ФайловыеФункцииСлужебныйКлиент.ПредупредитьОНеобходимостиРасширенияРаботыСФайлами();
	КонецЕсли;
	
КонецПроцедуры

// Формирует электронную подпись.
Функция СформироватьПодписьФайла(ДанныеФайла, ДанныеПодписи) Экспорт
	
	Если НЕ ДанныеФайла.Редактирует.Пустая() Тогда
		Предупреждение(ФайловыеФункцииСлужебныйКлиентСервер.СтрокаСообщенияОНедопустимостиПодписанияЗанятогоФайла());
		Возврат Ложь;
	КонецЕсли;
	
	Если ДанныеФайла.Зашифрован Тогда
		Предупреждение(ФайловыеФункцииСлужебныйКлиентСервер.СтрокаСообщенияОНедопустимостиПодписанияЗашифрованногоФайла());
		Возврат Ложь;
	КонецЕсли;
	
	ТолькоЛичные = Истина;
	МассивСтруктурСертификатов = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьМассивСтруктурСертификатов(ТолькоЛичные);
	ПараметрыФормы = Новый Структура("МассивСтруктурСертификатов, ОбъектСсылка", МассивСтруктурСертификатов, ДанныеФайла.Ссылка);
	
	СтруктураПараметровПодписи = ОткрытьФормуМодально("ОбщаяФорма.УстановкаПодписиЭЦП", ПараметрыФормы);
	
	Если ТипЗнч(СтруктураПараметровПодписи) = Тип("Структура") Тогда
		
		СтруктураВозврата = РаботаСФайламиСлужебныйВызовСервера.ПолучитьДанныеФайлаИДвоичныеДанные(ДанныеФайла.Ссылка);
		
		МенеджерКриптографии = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьМенеджерКриптографии();
		
		ДанныеПодписи = ЭлектроннаяЦифроваяПодписьКлиент.СформироватьДанныеПодписи(
			МенеджерКриптографии, ДанныеФайла.Ссылка, 
			СтруктураВозврата.ДвоичныеДанные, СтруктураПараметровПодписи);
			
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Зашифровать файл.
Функция Зашифровать(ДанныеФайла,
                    УникальныйИдентификатор,
                    МассивДанныхДляЗанесенияВБазу,
                    МассивОтпечатков) Экспорт
	
	Если ДанныеФайла.Зашифрован Тогда
		
		Предупреждение(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Файл ""%1"" уже зашифрован.'"),
			Строка(ДанныеФайла.Ссылка) ));
		
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ДанныеФайла.Редактирует.Пустая() Тогда
		Предупреждение(НСтр("ru = 'Нельзя зашифровать занятый файл.'"));
		Возврат Ложь;
	КонецЕсли;
	
	МассивСтруктурСертификатов =
		ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьМассивСтруктурСертификатов(Ложь);
	
	ОтпечатокЛичногоСертификатаДляШифрования =
		ФайловыеФункцииСлужебныйКлиентСервер.ПерсональныеНастройкиРаботыСФайлами(
			).ОтпечатокЛичногоСертификатаДляШифрования;
	
	// отпечаток сохраненный в ХранилищеНастроек мог устареть - сертификат могли уже удалить
	Если ОтпечатокЛичногоСертификатаДляШифрования <> Неопределено
	   И НЕ ПустаяСтрока(ОтпечатокЛичногоСертификатаДляШифрования) Тогда
		
		Сертификат = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьСертификатПоОтпечатку(
			ОтпечатокЛичногоСертификатаДляШифрования, Истина); // ТолькоЛичные
		
		Если Сертификат = Неопределено Тогда
			ОтпечатокЛичногоСертификатаДляШифрования = "";
		КонецЕсли;
		
	Иначе
		МассивСтруктурЛичныхСертификатов =
			ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьМассивСтруктурСертификатов(Истина); // ТолькоЛичные
		
		ПараметрыФормы = Новый Структура("МассивСтруктурСертификатов", МассивСтруктурЛичныхСертификатов);
		СтруктураВозврата = ОткрытьФормуМодально("ОбщаяФорма.ВыборСертификата", ПараметрыФормы);
		Если ТипЗнч(СтруктураВозврата) = Тип("Структура") Тогда
			ОтпечатокЛичногоСертификатаДляШифрования = СтруктураВозврата.Отпечаток;
			ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранитьИОбновитьПовторноИспользуемыеЗначения(
				"ЭЦП",
				"ОтпечатокЛичногоСертификатаДляШифрования",
				ОтпечатокЛичногоСертификатаДляШифрования);
		Иначе
			Предупреждение(НСтр("ru = 'Не выбран персональный сертификат для шифрования.'"));
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("МассивСтруктурСертификатов",               МассивСтруктурСертификатов);
	ПараметрыФормы.Вставить("ФайлСсылка",                               ДанныеФайла.Ссылка);
	ПараметрыФормы.Вставить("ОтпечатокЛичногоСертификатаДляШифрования", ОтпечатокЛичногоСертификатаДляШифрования);
	
	СтруктураВозврата = ОткрытьФормуМодально("ОбщаяФорма.ВыборСертификатовШифрования", ПараметрыФормы);
	
	Если ТипЗнч(СтруктураВозврата) = Тип("Массив") Тогда
		
		Возврат РаботаСФайламиСлужебныйКлиент.Зашифровать(
			ДанныеФайла.Ссылка,
			СтруктураВозврата,
			УникальныйИдентификатор,
			ДанныеФайла,
			МассивДанныхДляЗанесенияВБазу,
			МассивОтпечатков);
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Расшифровать файл.
Функция Расшифровать(ДанныеФайла, УникальныйИдентификатор, МассивДанныхДляЗанесенияВБазу) Экспорт
	
	Возврат РаботаСФайламиСлужебныйКлиент.Расшифровать(
		ДанныеФайла.Ссылка,
		УникальныйИдентификатор,
		ДанныеФайла,
		МассивДанныхДляЗанесенияВБазу);
	
КонецФункции

// Добавить ЭЦП из файла.
Функция ДобавитьЭЦПИзФайла(ДанныеФайла, УникальныйИдентификатор = Неопределено) Экспорт
	
	#Если НЕ ВебКлиент Тогда
	
		МассивФайловПодписей = ОткрытьФормуМодально("ОбщаяФорма.ДобавлениеПодписиИзФайла");
		
		Если ТипЗнч(МассивФайловПодписей) <> Тип("Массив") ИЛИ МассивФайловПодписей.Количество() = 0 Тогда
			Возврат Ложь;
		КонецЕсли;
		
		МассивДанныхДляЗанесенияВБазу = ЭлектроннаяЦифроваяПодписьКлиент.СформироватьПодписиДляЗанесениюВБазу(ДанныеФайла.Ссылка, МассивФайловПодписей, УникальныйИдентификатор);
		
		Если МассивДанныхДляЗанесенияВБазу.Количество() > 0 Тогда
			РаботаСФайламиСлужебныйКлиент.ЗанестиИнформациюОПодписях(
				ДанныеФайла.Ссылка,
				ДанныеФайла.Владелец,
				МассивДанныхДляЗанесенияВБазу,
				УникальныйИдентификатор);
		КонецЕсли;
		
		Возврат Истина;
		
	#Иначе
		Предупреждение(НСтр("ru = 'В Веб-клиенте добавление ЭЦП из файла не поддерживается.'"));
		Возврат Ложь;
	#КонецЕсли
	
КонецФункции

// СохранитьКак вместе с ЭЦП.
Процедура СохранитьВместеСЭЦП(ДанныеФайла, УникальныйИдентификатор) Экспорт
	
	РасширениеПодключено = ПодключитьРасширениеРаботыСФайлами();
	Если РасширениеПодключено Тогда
		
		Настройка = ЭлектроннаяЦифроваяПодписьКлиент.ПолучитьПерсональныеНастройкиРаботыСЭЦП().ДействияПриСохраненииСЭЦП;
		
		Если Настройка = "Спрашивать" Тогда
			ПараметрыФормы = Новый Структура("Объект, УникальныйИдентификатор", ДанныеФайла.ТекущаяВерсия, УникальныйИдентификатор);
			МассивСтруктурПодписей = ОткрытьФормуМодально("ОбщаяФорма.ВыборПодписей", ПараметрыФормы);
		ИначеЕсли Настройка = "СохранятьВсеПодписи" Тогда
			МассивСтруктурПодписей = РаботаСФайламиСлужебныйВызовСервера.ПолучитьВсеПодписи(ДанныеФайла.Ссылка, УникальныйИдентификатор);
		КонецЕсли;
		
		Если ТипЗнч(МассивСтруктурПодписей) = Тип("Массив") И МассивСтруктурПодписей.Количество() > 0 Тогда
			
			ПолноеИмяФайла = РаботаСФайламиСлужебныйКлиент.СохранитьКак(
				ДанныеФайла, УникальныйИдентификатор);
			
			Если ПолноеИмяФайла = "" Тогда
				Возврат; // пользователь нажал Отмена или это веб клиент без расширения
			КонецЕсли;
			
			ЭлектроннаяЦифроваяПодписьКлиент.СохранитьПодписи(ДанныеФайла.Ссылка, ПолноеИмяФайла, УникальныйИдентификатор, МассивСтруктурПодписей);
		КонецЕсли;
	
	Иначе
		ФайловыеФункцииСлужебныйКлиент.ПредупредитьОНеобходимостиРасширенияРаботыСФайлами();
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Дополнительные процедуры и функции для работы с файлами

// Открывает форму для настройки рабочего каталога.
Процедура ОткрытьФормуНастройкиРабочегоКаталога() Экспорт
	
	ОткрытьФорму("ОбщаяФорма.НастройкаОсновногоРабочегоКаталога");
	
КонецПроцедуры

// На основе переданного пути к файлу на диске создает Файл его и открывает карточку
//
// Параметры:
//  ПолноеИмяФайла - Строка - полный путь к файлу.
//  ВладелецФайла  - ЛюбаяСсылка - владелец файла.
//  ФормаВладелец  - УправляемаяФорма из которой вызвано создание файла.
//
//  НеОткрыватьКарточкуПослеСозданияИзФайла - Булево, когда Истина
//                   карточка файла не открывается после создания.
//
//  ИмяСоздаваемогоФайла - Строка - явно заданное имя файла
//                   (по умолчанию имя берется из ПолноеИмяФайла).
//
Процедура СоздатьДокументНаОсновеФайла(ПолноеИмяФайла,
                                       ВладелецФайла,
                                       ФормаВладелец,
                                       НеОткрыватьКарточкуПослеСозданияИзФайла = Неопределено,
                                       ИмяСоздаваемогоФайла = Неопределено) Экспорт
	
	// Здесь не нужно ПредложитьУстановкуРасширенияРаботыСФайлами(),
	// т.к. вызов может придти только с тонкого клиента (не с веб).
	
	// Здесь создается Файл ...
	Файл = Новый Файл(ПолноеИмяФайла);
	
	ФайловыеФункцииСлужебныйКлиентСервер.ПроверитьВозможностьЗагрузкиФайла(Файл);
	
	ОбщиеНастройки = ФайловыеФункцииСлужебныйКлиентСервер.ОбщиеНастройкиРаботыСФайлами();
	
	Если НЕ ОбщиеНастройки.ИзвлекатьТекстыФайловНаСервере Тогда
		АдресВременногоХранилищаТекста =
			ФайловыеФункцииСлужебныйКлиентСервер.ИзвлечьТекстВоВременноеХранилище(
				Файл.ПолноеИмя, ФормаВладелец.УникальныйИдентификатор);
	Иначе
		АдресВременногоХранилищаТекста = "";
	КонецЕсли;
	
	ВремяИзменения = Файл.ПолучитьВремяИзменения();
	ВремяИзмененияУниверсальное = Файл.ПолучитьУниверсальноеВремяИзменения();
	
	ИмяСоздания = Файл.ИмяБезРасширения;
	Если ИмяСоздаваемогоФайла <> Неопределено Тогда
		ИмяСоздания = ИмяСоздаваемогоФайла;
	КонецЕсли;	
	
	ИмяФайла = ИмяСоздания + Файл.Расширение;
	РазмерВМб = Файл.Размер() / (1024 * 1024);
	
	ТекстПояснения =
	СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Идет сохранение файла ""%1"" (%2 Мб).
		           |Пожалуйста, подождите...'"),
		ИмяФайла,
		ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерВМб));
	
	Состояние(ТекстПояснения);
	
	
	// Помещение файла во временное хранилище.
	АдресВременногоХранилищаФайла = "";
	
	ПомещаемыеФайлы = Новый Массив;
	Описание = Новый ОписаниеПередаваемогоФайла(Файл.ПолноеИмя, "");
	ПомещаемыеФайлы.Добавить(Описание);
	
	ПомещенныеФайлы = Новый Массив;

	Если НЕ ПоместитьФайлы(ПомещаемыеФайлы,
	                       ПомещенныеФайлы,
	                       ,
	                       Ложь,
	                       ФормаВладелец.УникальныйИдентификатор) Тогда
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка при помещении файла
			           |""%1""
			           |во временное хранилище.'"),
			Файл.ПолноеИмя);
	КонецЕсли;
	
	Если ПомещенныеФайлы.Количество() = 1 Тогда
		АдресВременногоХранилищаФайла = ПомещенныеФайлы[0].Хранение;
	КонецЕсли;
	
	// Создание карточки Файла в БД.
	Док = РаботаСФайламиСлужебныйВызовСервера.СоздатьФайлСВерсией(
		ВладелецФайла,
		ИмяСоздания,
		ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(Файл.Расширение),
		ВремяИзменения,
		ВремяИзмененияУниверсальное,
		Файл.Размер(),
		АдресВременногоХранилищаФайла,
		АдресВременногоХранилищаТекста,
		Ложь,         // Это не Веб-клиент.
		Неопределено, // Пользователь.
		"",           // Комментарий.
		Истина); // ЗаписатьВИсторию.

	Состояние();
	
	ПараметрыОповещения = Новый Структура;
	ПараметрыОповещения.Вставить("Владелец", ВладелецФайла);
	ПараметрыОповещения.Вставить("Файл", Док);
	ПараметрыОповещения.Вставить("Событие", "СозданФайл");
	Оповестить("Запись_Файл", ПараметрыОповещения);
	
	НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(Док);
	ПоказатьОповещениеПользователя(
		НСтр("ru = 'Создание:'"),
		НавигационнаяСсылка,
		Док,
		БиблиотекаКартинок.Информация32);
	
	Если НеОткрыватьКарточкуПослеСозданияИзФайла <> Истина Тогда
		Параметры = Новый Структура;
		Параметры.Вставить("Ключ", Док);
		Параметры.Вставить("КарточкаОткрытаПослеСозданияФайла", Истина);
		
		ОткрытьФорму("Справочник.Файлы.ФормаОбъекта", Параметры, ФормаВладелец);
	КонецЕсли;
	
КонецПроцедуры

// Вернет Истина, если можно закрыть форму. 
// Параметры
//  ОбъектСсылка  - ЛюбаяСсылка - владелец файла
//
// Возвращаемое значение:
//   Булево  - Истина, если можно закрыть форму. 
Функция МожноЗакрытьФормуСФайлами(ОбъектСсылка) Экспорт
	
	МожноЗакрыть = Истина;
	
	Количество = РаботаСФайламиСлужебныйВызовСервера.КоличествоФайловЗанятыхТекущимПользователем(ОбъектСсылка);
	
	Если Количество <> 0 Тогда
		
		Результат = Вопрос(
			НСтр("ru = 'Один или несколько файлов заняты вами для редактирования.
			           |
			           |Продолжить?'"),
			РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
			
		Если Результат = КодВозвратаДиалога.Нет Тогда
			МожноЗакрыть = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат МожноЗакрыть;
	
КонецФункции

// Выбрать режим открытия файла и начать редактирование
Функция ВыбратьРежимИРедактироватьФайл(ДанныеФайла, ДоступностьКомандыРедактировать) Экспорт
	
	РедактированиеВоВстроенномРедакторе = Ложь;
	ПерсональныеНастройкиРаботыСФайлами = ФайловыеФункцииСлужебныйКлиентСервер.ПерсональныеНастройкиРаботыСФайлами();
	
	ТекстовыеФайлыСпособОткрытия = ПерсональныеНастройкиРаботыСФайлами.ТекстовыеФайлыСпособОткрытия;
	Если ТекстовыеФайлыСпособОткрытия = ПредопределенноеЗначение("Перечисление.СпособыОткрытияФайлаНаПросмотр.ВоВстроенномРедакторе") Тогда
		
		ТекстовыеФайлыРасширение = ПерсональныеНастройкиРаботыСФайлами.ТекстовыеФайлыРасширение;
		
		Если ФайловыеФункцииСлужебныйКлиентСервер.РасширениеФайлаВСписке(
		       ТекстовыеФайлыРасширение, ДанныеФайла.Расширение) Тогда
			
			РедактированиеВоВстроенномРедакторе = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	ГрафическиеСхемыСпособОткрытия = ПерсональныеНастройкиРаботыСФайлами.ГрафическиеСхемыСпособОткрытия;
	Если ГрафическиеСхемыСпособОткрытия = ПредопределенноеЗначение("Перечисление.СпособыОткрытияФайлаНаПросмотр.ВоВстроенномРедакторе") Тогда
		
		ГрафическиеСхемыРасширение = ПерсональныеНастройкиРаботыСФайлами.ГрафическиеСхемыРасширение;
		Если ФайловыеФункцииСлужебныйКлиентСервер.РасширениеФайлаВСписке(ГрафическиеСхемыРасширение, ДанныеФайла.Расширение) Тогда
			РедактированиеВоВстроенномРедакторе = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Если РедактированиеВоВстроенномРедакторе Тогда
		Возврат "Открыть";
	КонецЕсли;
	
	// Если уже занят для редактирования, то не спрашивать - сразу открывать
	Если ДанныеФайла.Редактирует.Пустая() Тогда
		СпрашиватьРежимРедактированияПриОткрытииФайла = ПерсональныеНастройкиРаботыСФайлами.СпрашиватьРежимРедактированияПриОткрытииФайла;
		Если СпрашиватьРежимРедактированияПриОткрытииФайла = Истина Тогда
			
			КакОткрывать = Неопределено;
			
			Если Не ДоступностьКомандыРедактировать Тогда
				КакОткрывать = 0; // Просмотр
			Иначе
				
				Результат = ОткрытьФормуМодально("Справочник.Файлы.Форма.ФормаВыбораРежимаОткрытия");
				Если ТипЗнч(Результат) <> Тип("Структура") Тогда
					Возврат "Отмена";
				КонецЕсли;
				
				БольшеНеСпрашивать = Результат.БольшеНеСпрашивать;
				Если БольшеНеСпрашивать = Истина Тогда
					ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить("НастройкиОткрытияФайлов", "СпрашиватьРежимРедактированияПриОткрытииФайла", Ложь);
					ОбновитьПовторноИспользуемыеЗначения();
				КонецЕсли;
				
				КакОткрывать = Результат.КакОткрывать;
			КонецЕсли;
			
			Если КакОткрывать = 1 Тогда
				РаботаСФайламиСлужебныйКлиент.РедактироватьФайл(ДанныеФайла);
				ОповеститьОбИзменении(ДанныеФайла.Ссылка);
				Возврат "Редактировать";
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат "Открыть";
	
КонецФункции

// Открывает файл.
//
// Параметры:
//  ДанныеФайла             - Структура с данными файла.
//  УникальныйИдентификатор - УникальныйИдентификатор формы.
//
Процедура ОткрытьФайл(ДанныеФайла, УникальныйИдентификатор = Неопределено) Экспорт
	
	ОбщегоНазначенияКлиент.ПредложитьУстановкуРасширенияРаботыСФайлами();
	
	// Если Файл без файла, тогда открыть карточку.
	Если ДанныеФайла.Версия.Пустая() Тогда 
		ОткрытьЗначение(ДанныеФайла.Ссылка);
		Возврат;
	КонецЕсли;
	
	РасширениеПодключено = ПодключитьРасширениеРаботыСФайлами();
	
	Если РасширениеПодключено Тогда
		ПолноеИмяФайла = "";
		ДополнительныеПараметры = Новый Структура("ОткрытьФайл", Истина);
		
		Результат = РаботаСФайламиСлужебныйКлиент.ПолучитьФайлВерсииВРабочийКаталог(
			ДанныеФайла, ПолноеИмяФайла, УникальныйИдентификатор, ДополнительныеПараметры);
		
		Если Результат Тогда
			РаботаСФайламиСлужебныйКлиент.ОткрытьФайлПриложением(ДанныеФайла, ПолноеИмяФайла);
		КонецЕсли;
	Иначе
		Если ДанныеФайла.РедактируетТекущийПользователь Тогда
			ФайловыеФункцииСлужебныйКлиент.ПоказатьНапоминаниеПриРедактировании();
		КонецЕсли;
		
		ИмяФайла = ОбщегоНазначенияКлиентСервер.ПолучитьИмяСРасширением(
			ДанныеФайла.ПолноеНаименованиеВерсии, ДанныеФайла.Расширение);
		
		ПолучитьФайл(ДанныеФайла.НавигационнаяСсылкаТекущейВерсии, ИмяФайла, Истина);
		
		// При хранении файлов на диске (на сервере) файл удаляется из временного хранилища не сразу:
		// - удаляется, либо при следующем вызове ПолучитьДанныеФайлаДляОткрытия, либо не удаляется;
		// - удаляется при закрытии формы автоматически.
	КонецЕсли;
	
КонецПроцедуры

// Рекурсивная функция импорта файлов с диска - принимает массив файлов (или каталогов)
// - если файл, просто добавляет его,   если каталог - создает группу и рекурсивно вызывает саму себя
//
// Параметры
//  Владелец   - ЛюбаяСсылка - владелец файла
//  ФайлыАргумент - Массив - массив объектов "Файл"
//  Индикатор  - Число - число от 0 до 100 - прогресс выполнения
//  МассивИменФайловСОшибками - Массив - Массив имен файлов с ошибками
//  МассивСтруктурВсехФайлов - Массив - Массив структур всех файлов
//  Комментарий - Строка - Комментарий
//  ХранитьВерсии - Булево - Хранить версии
//  Рекурсивно - Булево - Рекурсивно обходить подкаталоги
//  КоличествоСуммарное - Число - Количество суммарное импортированных файлов
//  Счетчик - Число - Счетчик обработанных файлов (не обязательно файл будет загружен)
//  ИдентификаторФормы - уникальный идентификатор формы
//  ПсевдоФайловаяСистема - Соответствие - эмуляция файловой системы - для строки (каталога) возвращает массив строк (подкаталоги и файлы)
//  ДобавленныеФайлы - Массив - Добавленные файлы
//  МассивВсехПапок - Массив - Массив всех папок
//  РежимЗагрузки - Булево - Режим загрузки (из фонового задания ЗагрузкаФайлов)
Процедура ИмпортФайлов(
	Владелец,
	ФайлыАргумент,
	Индикатор,
	МассивИменФайловСОшибками,
	МассивСтруктурВсехФайлов,
	Комментарий,
	ХранитьВерсии,
	Рекурсивно,
	КоличествоСуммарное,
	Счетчик,
	ИдентификаторФормы,
	Знач ПсевдоФайловаяСистема,
	ДобавленныеФайлы,
	МассивВсехПапок,
	РежимЗагрузки = Ложь,
	Кодировка = Неопределено) Экспорт
	
	Перем ПерваяПапкаСТакимЖеИменем;
	Перем ДокГруппаСсылка;
	
	Для Каждого ВыбранныйФайл Из ФайлыАргумент Цикл
		Попытка
			Если ВыбранныйФайл.Существует() Тогда
			
				Если ВыбранныйФайл.Расширение = ".lnk" Тогда
					ВыбранныйФайл = РаботаСФайламиСлужебныйКлиент.РазыменоватьLnkФайл(ВыбранныйФайл);
				КонецЕсли;
				
				Если ВыбранныйФайл.ЭтоКаталог() Тогда
					
					Если Рекурсивно = Истина Тогда
						НовыйПуть = Строка(ВыбранныйФайл.Путь);
						НовыйПуть = ОбщегоНазначенияКлиентСервер.ДобавитьКонечныйРазделительПути(НовыйПуть, ОбщегоНазначенияКлиентПовтИсп.ТипПлатформыКлиента());
						НовыйПуть = НовыйПуть + Строка(ВыбранныйФайл.Имя);
						МассивФайлов = ФайловыеФункцииСлужебныйКлиентСервер.НайтиФайлыПсевдо(ПсевдоФайловаяСистема, НовыйПуть);
						
						// Создаем группу в справочнике - эквивалент папки на диске.
						Если МассивФайлов.Количество() <> 0 Тогда
							ИмяФайла = ВыбранныйФайл.Имя;
							
							ПапкаУжеНайдена = Ложь;
							
							Если РаботаСФайламиСлужебныйВызовСервера.ЕстьПапкаСТакимИменем(ИмяФайла, Владелец, ПерваяПапкаСТакимЖеИменем) Тогда
								
								Если РежимЗагрузки Тогда
									ПапкаУжеНайдена = Истина;
									ДокГруппаСсылка = ПерваяПапкаСТакимЖеИменем;
								Иначе
									
									ТекстВопроса = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
										НСтр("ru = 'Папка ""%1"" уже существует.
										           |Продолжить импорт папки?'"),
										ИмяФайла);
									
									КодВозврата = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
									
									Если КодВозврата = КодВозвратаДиалога.Нет Тогда
										Продолжить;
									КонецЕсли;
									
								КонецЕсли;
							КонецЕсли;
							
							Если Не ПапкаУжеНайдена Тогда
								ДокГруппаСсылка = РаботаСФайламиСлужебныйВызовСервера.СправочникиПапкиСоздатьЭлемент(ИмяФайла, Владелец);
							КонецЕсли;
							
							ИмпортФайлов(
								ДокГруппаСсылка,
								МассивФайлов,
								Индикатор,
								МассивИменФайловСОшибками,
								МассивСтруктурВсехФайлов,
								Комментарий,
								ХранитьВерсии,
								Рекурсивно,
								КоличествоСуммарное,
								Счетчик,
								ИдентификаторФормы,
								ПсевдоФайловаяСистема,
								ДобавленныеФайлы,
								МассивВсехПапок,
								РежимЗагрузки,
								Кодировка);
								
							МассивВсехПапок.Добавить(НовыйПуть);
						КонецЕсли;
					КонецЕсли;
					
					Продолжить;
				КонецЕсли;
				
				Если Не ФайловыеФункцииСлужебныйКлиентСервер.ПроверитьВозможностьЗагрузкиФайла(
				          ВыбранныйФайл, Ложь, МассивИменФайловСОшибками) Тогда
					Продолжить;
				КонецЕсли;
				
				// Обновим индикатор прогресса
				Счетчик = Счетчик + 1;
				Индикатор = Счетчик * 100 / КоличествоСуммарное; // Считаем проценты
				РазмерВМб = ВыбранныйФайл.Размер() / (1024 * 1024);
				НадписьПодробнее =
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Обрабатывается файл ""%1"" (%2 Мб)...'"),
					ВыбранныйФайл.Имя, 
					ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьСтрокуСРазмеромФайла(РазмерВМб));
					
				ТекстСостояния = НСтр("ru = 'Импорт файлов с диска...'");
				Если РежимЗагрузки Тогда
					ТекстСостояния = НСтр("ru = 'Загрузка файлов с диска...'");
				КонецЕсли;
				
				Состояние(
					ТекстСостояния,
					Индикатор,
					НадписьПодробнее,
					БиблиотекаКартинок.Информация32);
				
				// Создаем Элемент справочника Файлы
				ИмяБезРасширения = ВыбранныйФайл.ИмяБезРасширения;
				Расширение = ВыбранныйФайл.Расширение;
				
				Если РежимЗагрузки Тогда
					Если РаботаСФайламиСлужебныйВызовСервера.ЕстьФайлСТакимИменем(ИмяБезРасширения, Владелец) Тогда
						Запись = Новый Структура;
						Запись.Вставить("ИмяФайла", ВыбранныйФайл.ПолноеИмя);
						Запись.Вставить("Ошибка", НСтр("ru = 'Файл с таким именем уже есть в хранилище файлов.'"));
						МассивИменФайловСОшибками.Добавить(Запись);
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				АдресВременногоХранилищаФайла = "";
				
				ПомещаемыеФайлы = Новый Массив;
				Описание = Новый ОписаниеПередаваемогоФайла(ВыбранныйФайл.ПолноеИмя, "");
				ПомещаемыеФайлы.Добавить(Описание);
				
				ПомещенныеФайлы = Новый Массив;
				
				Если Не ПоместитьФайлы(ПомещаемыеФайлы, ПомещенныеФайлы, , Ложь, ИдентификаторФормы) Тогда
					ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Ошибка помещения файла
						           |""%1""
						           |во временное хранилище.'"),
						ВыбранныйФайл.ПолноеИмя);
				КонецЕсли;
				
				Если ПомещенныеФайлы.Количество() = 1 Тогда
					АдресВременногоХранилищаФайла = ПомещенныеФайлы[0].Хранение;
				КонецЕсли;
				
				Если НЕ ФайловыеФункцииСлужебныйКлиентСервер.ОбщиеНастройкиРаботыСФайлами(
				          ).ИзвлекатьТекстыФайловНаСервере Тогда
				
					АдресВременногоХранилищаТекста =
						ФайловыеФункцииСлужебныйКлиентСервер.ИзвлечьТекстВоВременноеХранилище(
							ВыбранныйФайл.ПолноеИмя, ИдентификаторФормы, , Кодировка);
				Иначе
					АдресВременногоХранилищаТекста = "";
				КонецЕсли;
				
				// Создаем элемент справочника Файлы
				РаботаСФайламиКлиентСервер.СоздатьЭлементСправочникаФайлы(ВыбранныйФайл, МассивСтруктурВсехФайлов,
					Владелец, ИдентификаторФормы, Комментарий, ХранитьВерсии, ДобавленныеФайлы,
					АдресВременногоХранилищаФайла, АдресВременногоХранилищаТекста,
					Неопределено,
					Кодировка);
				
			Иначе
				Запись = Новый Структура;
				Запись.Вставить("ИмяФайла", ВыбранныйФайл.ПолноеИмя);
				Запись.Вставить("Ошибка", НСтр("ru = 'Файл отсутствует на диске.'"));
				МассивИменФайловСОшибками.Добавить(Запись);
			КонецЕсли;
			
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			
			СообщениеОбОшибке = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОбОшибке);
			
			Запись = Новый Структура;
			Запись.Вставить("ИмяФайла", ВыбранныйФайл.ПолноеИмя);
			Запись.Вставить("Ошибка", СообщениеОбОшибке);
			МассивИменФайловСОшибками.Добавить(Запись);
			
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

// Создает новый файл.
//
// Параметры:
//  РежимСоздания - Число:
//                  1 - создать из шаблона;
//                  2 - создать из файла;
//                  3 - создать пустую карточку.
//
//  ВладелецФайла - ЛюбаяСсылка - владелец файла.
//
//  ФормаВладелец - УправляемаяФорма из которой вызвано создание файла.
//
//  НеОткрыватьКарточкуПослеСозданияИзФайла - Булево, когда Истина
//                   карточка файла не открывается после создания.
//
Процедура СоздатьФайл(РежимСоздания,
                      ВладелецФайла,
                      ФормаВладелец,
                      НеОткрыватьКарточкуПослеСозданияИзФайла = Неопределено) Экспорт
	
	ОбщегоНазначенияКлиент.ПредложитьУстановкуРасширенияРаботыСФайлами();
	
	Если РежимСоздания = 1 Тогда
		
		// Создание из шаблона.
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("ВыборШаблона", Истина);
		ПараметрыФормы.Вставить("ТекущаяСтрока", ПредопределенноеЗначение("Справочник.ПапкиФайлов.Шаблоны"));
		Результат = ОткрытьФормуМодально("Справочник.Файлы.Форма.ФормаВыбора", ПараметрыФормы);
		
		Если Результат = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Параметры = Новый Структура;
		Параметры.Вставить("ФайлОснование", Результат);
		Параметры.Вставить("ВладелецФайла", ВладелецФайла);
		Параметры.Вставить("РежимСоздания", "ИзШаблона");
		
		ОткрытьФорму("Справочник.Файлы.ФормаОбъекта", Параметры, ФормаВладелец);
		
	ИначеЕсли РежимСоздания = 2 Тогда
		
		// Создание из файла.
		ПолноеИмяФайла = "";
		
		РасширениеПодключено = ПодключитьРасширениеРаботыСФайлами();
		Если РасширениеПодключено Тогда
			ВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
			ВыборФайла.МножественныйВыбор = Ложь;
			ВыборФайла.Заголовок = НСтр("ru = 'Выбор файла'");
			ВыборФайла.Фильтр = НСтр("ru = 'Все файлы (*.*)|*.*'");
			
			РабочийКаталог = РаботаСФайламиСлужебныйВызовСервера.РабочийКаталогПапки(ВладелецФайла);
			ВыборФайла.Каталог = РабочийКаталог;

			Результат = ВыборФайла.Выбрать();
			ПолноеИмяФайла = ВыборФайла.ПолноеИмяФайла;
		
			Если НЕ Результат Тогда
				Возврат;
			КонецЕсли;
			
			СоздатьДокументНаОсновеФайла(
				ПолноеИмяФайла,
				ВладелецФайла,
				ФормаВладелец,
				НеОткрыватьКарточкуПослеСозданияИзФайла);
			
		Иначе // Веб-клиент.
			
			ВремяИзменения = Дата('00010101'); // Т.к. невозможно получить дату изменения файла на диске.
			ВремяИзмененияУниверсальное = Дата('00010101');
			Размер = 0; // Т.к. невозможно получить размер файла на диске.
			ИмяБезРасширения = "";
			Расширение = "";
			АдресВременногоХранилищаТекста = "";

			// Помещение файла во временное хранилище.
			АдресВременногоХранилищаФайла = "";
			ИмяФайла = "";
			Если НЕ ПоместитьФайл(АдресВременногоХранилищаФайла,
			                      ИмяФайла,
			                      ИмяФайла,
			                      Истина,
			                      ФормаВладелец.УникальныйИдентификатор) Тогда
				Возврат;
			КонецЕсли;

			СтрокиПути = ОбщегоНазначенияКлиентСервер.РазложитьСтрокуПоТочкамИСлэшам(ИмяФайла);
			Если СтрокиПути.Количество() >= 2 Тогда
				Расширение = СтрокиПути[СтрокиПути.Количество()-1];
				ИмяБезРасширения = СтрокиПути[СтрокиПути.Количество()-2];
			Иначе
				ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Ошибка при помещении файла
					           |""%1""
					           |во временное хранилище.'"),
					ИмяФайла);
			КонецЕсли;
			
			// Создание карточки файла в БД.
			Док = РаботаСФайламиСлужебныйВызовСервера.СоздатьФайлСВерсией(
				ВладелецФайла,
				ИмяБезРасширения,
				ОбщегоНазначенияКлиентСервер.РасширениеБезТочки(Расширение),
				ВремяИзменения,
				ВремяИзмененияУниверсальное,
				Размер,
				АдресВременногоХранилищаФайла,
				АдресВременногоХранилищаТекста,
				Истина); // Это Веб-клиент.
				
			ПараметрыОповещения = Новый Структура;
			ПараметрыОповещения.Вставить("Владелец", ВладелецФайла);
			ПараметрыОповещения.Вставить("Файл", Док);
			ПараметрыОповещения.Вставить("Событие", "СозданФайл");
			Оповестить("Запись_Файл", ПараметрыОповещения);
			
			НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(Док);
			ПоказатьОповещениеПользователя(
				НСтр("ru = 'Создание:'"),
				НавигационнаяСсылка,
				Док,
				БиблиотекаКартинок.Информация32);
				
			Если НеОткрыватьКарточкуПослеСозданияИзФайла <> Истина Тогда
				Параметры = Новый Структура;
				Параметры.Вставить("Ключ", Док);
				
				ОткрытьФорму("Справочник.Файлы.ФормаОбъекта", Параметры, ФормаВладелец);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли РежимСоздания = 3 Тогда
		// Со сканера.
		РаботаСФайламиСлужебныйКлиент.СканироватьИПоказатьДиалогПросмотра(
			ВладелецФайла,
			ФормаВладелец.УникальныйИдентификатор,
			ФормаВладелец,
			НеОткрыватьКарточкуПослеСозданияИзФайла);
	Иначе
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Неверный режим создания файла: ""%1"".'"),
			РежимСоздания);
	КонецЕсли;
	
КонецПроцедуры

// Создает новый файл интерактивно.
// Происходит вызов диалога выбора режима создания Файла.
//
// Параметры:
//  ВладелецФайла - определяет группу, в которой создается Элемент, если
//                  группа неизвестна в момент вызова этого метода - там будет Неопределено.
//
//  ФормаВладелец - УправляемаяФорма из которой вызвано создание файла.
//
// РежимСоздания - Число:
//                 1 - создать из шаблона,
//                 2 - создать из файла,
//                 3 - создать пустую карточку.
//
//  НеОткрыватьКарточкуПослеСозданияИзФайла - Булево, когда Истина
//                   карточка файла не открывается после создания.
//
Процедура СозданиеНовогоФайла(ВладелецФайла,
                              ФормаВладелец,
                              РежимСоздания = 1,
                              НеОткрыватьКарточкуПослеСозданияИзФайла = Неопределено) Экспорт
	
	Форма = РаботаСФайламиСлужебныйКлиентПовтИсп.ПолучитьФормуВыбораВариантаСозданияНовогоФайла();
	Форма.УстановитьПараметрыИспользования(РежимСоздания);
	РежимСозданияРезультат = Форма.ОткрытьМодально();
	
	Если ТипЗнч(РежимСозданияРезультат) = Тип("Число") Тогда
		
		СоздатьФайл(
			РежимСозданияРезультат,
			ВладелецФайла,
			ФормаВладелец,
			НеОткрыватьКарточкуПослеСозданияИзФайла);
	КонецЕсли;
	
КонецПроцедуры

// Копирует существующий файл.
//
// Параметры:
//  ВладелецФайла - ЛюбаяСсылка - владелец файла.
//  ФайлОснование - СправочникСсылка - откуда копируется Файл.
//
Процедура СкопироватьФайл(ВладелецФайла, ФайлОснование) Экспорт
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ФайлОснование", ФайлОснование);
	ПараметрыФормы.Вставить("ВладелецФайла", ВладелецФайла);
	
	ОткрытьФорму("Справочник.Файлы.ФормаОбъекта", ПараметрыФормы);
	
КонецПроцедуры

// Обработчик события Перетаскивание в формах объектов - владельцев Файл (кроме формы ХранилищеФайлов)
//
// Параметры
//  ПараметрыПеретаскивания  - Параметры перетаскивания
//  ВладелецФайлаСписка   - ЛюбаяСсылка - владелец файла
//  ЭтаФорма - Форма - форма, в которую делается перетаскивание
//  НеОткрыватьКарточкуПослеСозданияИзФайла - Булево - не открывает карточку файла после создания, если Истина
Процедура ОбработкаПеретаскиванияВЛинейныйСписок(ПараметрыПеретаскивания, ВладелецФайлаСписка, ЭтаФорма,
	НеОткрыватьКарточкуПослеСозданияИзФайла = Неопределено) Экспорт
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Файл") И ПараметрыПеретаскивания.Значение.ЭтоФайл() = Истина Тогда
		
		СоздатьДокументНаОсновеФайла(ПараметрыПеретаскивания.Значение.ПолноеИмя, ВладелецФайлаСписка, ЭтаФорма, НеОткрыватьКарточкуПослеСозданияИзФайла);
		
	ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Файл") И ПараметрыПеретаскивания.Значение.ЭтоФайл() = Ложь Тогда
		
		Предупреждение(НСтр("ru = 'Выберите только файлы без каталогов.'"));
		Возврат;
		
	ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("СправочникСсылка.Файлы") Тогда
		
		РаботаСФайламиСлужебныйКлиент.ПеренестиФайлВПриложенныеФайлы(
			ПараметрыПеретаскивания.Значение, ВладелецФайлаСписка);
		
	ИначеЕсли ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив") Тогда
		
		Если ПараметрыПеретаскивания.Значение.Количество() >= 1 И ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("Файл") Тогда
			Для Каждого ФайлПринятый Из ПараметрыПеретаскивания.Значение Цикл
				Если Не ФайлПринятый.ЭтоФайл() Тогда // только файлы, но не каталоги
					Предупреждение(Нстр("ru = 'Выберите только файлы без каталогов.'"));
					Возврат;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ПараметрыПеретаскивания.Значение.Количество() >= 1
		   И ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("Файл") Тогда
			
			Для Каждого ФайлПринятый Из ПараметрыПеретаскивания.Значение Цикл
				НеОткрыватьКарточкуПослеСозданияИзФайла = Истина;
				СоздатьДокументНаОсновеФайла(ФайлПринятый.ПолноеИмя, ВладелецФайлаСписка, ЭтаФорма, НеОткрыватьКарточкуПослеСозданияИзФайла);
			КонецЦикла;
		КонецЕсли;
		
		Если ПараметрыПеретаскивания.Значение.Количество() >= 1
		   И ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("СправочникСсылка.Файлы") Тогда
			
			РаботаСФайламиСлужебныйКлиент.ПеренестиФайлыВПриложенныеФайлы(
				ПараметрыПеретаскивания.Значение, ВладелецФайлаСписка);
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

// По окончании Расшифровать нотифицирует
// Параметры
//  ВладелецФайла  - ЛюбаяСсылка - владелец файла
//  ФайлСсылка  - СправочникСсылка.Файлы - файл
Процедура ИнформироватьОРасшифровке(ВладелецФайла, ФайлСсылка) Экспорт
	
	ОповеститьОбИзменении(ФайлСсылка);
	Оповестить("Запись_Файл", Новый Структура("Событие", "ПрисоединенныйФайлЗашифрован"), ВладелецФайла);
	Оповестить("Запись_Файл", Новый Структура("Событие", "ДанныеФайлаИзменены"), ФайлСсылка);
	
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Файл ""%1"" расшифрован'"),
		ФайлСсылка);
	Состояние(ТекстСообщения);
	
КонецПроцедуры

// По окончании Зашифровать нотифицирует
// Параметры
//  МассивФайловВРабочемКаталогеДляУдаления - Массив - массив строк - путей к файлам
//  ВладелецФайла  - ЛюбаяСсылка - владелец файла
//  ФайлСсылка  - СправочникСсылка.Файлы - файл
Процедура ИнформироватьОШифровании(МассивФайловВРабочемКаталогеДляУдаления,
                                   ВладелецФайла,
                                   ФайлСсылка) Экспорт
	
	ОповеститьОбИзменении(ФайлСсылка);
	Оповестить("Запись_Файл", Новый Структура("Событие", "ПрисоединенныйФайлЗашифрован"), ВладелецФайла);
	Оповестить("Запись_Файл", Новый Структура("Событие", "ДанныеФайлаИзменены"), ФайлСсылка);
	
	// удаляем из рабочего каталога все версии файла
	Для Каждого ПутьФайла Из МассивФайловВРабочемКаталогеДляУдаления Цикл
		РаботаСФайламиСлужебныйКлиент.УдалитьФайл(ПутьФайла, Ложь); // не задавать вопрос
	КонецЦикла;
	
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Файл ""%1"" зашифрован'"),
		ФайлСсылка);
	Состояние(ТекстСообщения);
	
КонецПроцедуры

// Закончить редактирование файлов.
//
// Параметры:
//  МассивФайлов       - Массив - массив файлов.
//  ИдентификаторФормы - УникальныйИдентификатор управляемой формы.
//
Функция ЗакончитьРедактированиеПоСсылкам(Знач МассивФайлов, ИдентификаторФормы) Экспорт
	
	ОбщегоНазначенияКлиент.ПредложитьУстановкуРасширенияРаботыСФайлами();
	
	// Получение массива данных файлов.
	ДанныеФайлов = Новый Массив;
	РаботаСФайламиСлужебныйВызовСервера.ПолучитьДанныеДляМассиваФайлов(МассивФайлов, ДанныеФайлов);
	ВГраницаМассива  = ДанныеФайлов.ВГраница();
	
	Для Инд = 0 По ВГраницаМассива Цикл
		ДанныеФайла = ДанныеФайлов[ВГраницаМассива - Инд];
		
		// Проверка возможности освобождения файла.
		СтрокаОшибки = "";
		Если НЕ РаботаСФайламиСлужебныйКлиент.ВозможностьОсвободитьФайл(
		            ДанныеФайла.Ссылка,
		            ДанныеФайла.РедактируетТекущийПользователь,
		            ДанныеФайла.Редактирует,
		            СтрокаОшибки) Тогда
			
			ДанныеФайлов.Удалить(ВГраницаМассива - Инд);
		КонецЕсли;
		
	КонецЦикла;
	
	РасширениеПодключено = ПодключитьРасширениеРаботыСФайлами();
	
	ФормаВозврата = РаботаСФайламиСлужебныйКлиентПовтИсп.ПолучитьФормуВозвратаФайла();
	
	СоздатьНовуюВерсию = Истина;
	СоздатьНовуюВерсиюДоступность = Истина;

	ВозвратМассив = Новый Массив;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ФайлСсылка",                    Неопределено);
	СтруктураПараметров.Вставить("КомментарийКВерсии",            "");
	СтруктураПараметров.Вставить("СоздатьНовуюВерсию",            СоздатьНовуюВерсию);
	СтруктураПараметров.Вставить("СоздатьНовуюВерсиюДоступность", СоздатьНовуюВерсиюДоступность);
	
	ФормаВозврата.УстановитьПараметрыИспользования(СтруктураПараметров);
	
	Результат = ФормаВозврата.ОткрытьМодально();
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат ВозвратМассив;
	КонецЕсли;
	
	КодВозврата = Результат.КодВозврата;
	Если КодВозврата <> КодВозвратаДиалога.ОК Тогда
		Возврат ВозвратМассив;
	КонецЕсли;
	
	СоздатьНовуюВерсию = Результат.СоздатьНовуюВерсию;
	КомментарийКВерсии = Результат.КомментарийКВерсии;
	
	ПрименитьКоВсем = Ложь;
	ОсвобождатьФайлы = Истина;
	
	// Занять файлы.
	Для Каждого Данные Из ДанныеФайлов Цикл
		ПоказыватьОповещение = Ложь;
		
		РедактированиеЗакончено = РаботаСФайламиСлужебныйКлиент.ЗакончитьРедактирование(
			Данные.Ссылка,
			ИдентификаторФормы,
			Данные.ХранитьВерсии,
			Данные.РедактируетТекущийПользователь,
			Данные.Редактирует,
			Данные.АвторТекущейВерсии,
			"",
			СоздатьНовуюВерсию,
			КомментарийКВерсии,
			ПоказыватьОповещение,
			ПрименитьКоВсем,
			ОсвобождатьФайлы);
			
		Если РедактированиеЗакончено Тогда
			ВозвратМассив.Добавить(Данные.Ссылка);
		КонецЕсли;
		
	КонецЦикла;
	
	ПоказатьОповещениеПользователя(  
		НСтр("ru = 'Закончить редактирование файлов'"),
		,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Закончено редактирование файлов (%1 из %2).'"),
			ВозвратМассив.Количество(),
			МассивФайлов.Количество()),
		БиблиотекаКартинок.Информация32);
	
	Возврат ВозвратМассив;
	
КонецФункции
