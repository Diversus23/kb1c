////////////////////////////////////////////////////////////////////////////////
// Подсистема "Управление доступом".
// 
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Содержит сохраненные параметры, используемые подсистемой.
Функция Параметры() Экспорт
	
	СохраненныеПараметры = ОбновлениеИнформационнойБазы.ПараметрыРаботыПрограммы(
		"ПараметрыОграниченияДоступа");
	
	ПредставлениеПараметра = "";
	
	Если НЕ СохраненныеПараметры.Свойство("ВсеПустыеСсылки") Тогда
		ПредставлениеПараметра = НСтр("ru = 'Общие параметры'");
		
	ИначеЕсли НЕ СохраненныеПараметры.Свойство("ВозможныеПраваПоЗначениямДоступа") Тогда
		ПредставлениеПараметра = НСтр("ru = 'Возможные права по значениям доступа'");
		
	ИначеЕсли НЕ СохраненныеПараметры.Свойство("ПоставляемыеПрофилиГруппДоступа") Тогда
		ПредставлениеПараметра = НСтр("ru = 'Поставляемые профили групп доступа'");
		
	ИначеЕсли НЕ СохраненныеПараметры.Свойство("ПредопределенныеПрофилиГруппДоступа") Тогда
		ПредставлениеПараметра = НСтр("ru = 'Предопределенные профили групп доступа'");
		
	ИначеЕсли НЕ СохраненныеПараметры.Свойство("СвойстваВидовДоступа") Тогда
		ПредставлениеПараметра = НСтр("ru = 'Свойства видов доступа'");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПредставлениеПараметра) Тогда
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Ошибка обновления информационной базы.
			           |Не заполнен параметр ограничения доступа:
			           |""%1"".'")
			+ СтандартныеПодсистемыСервер.УточнениеОшибкиПараметровРаботыПрограммыДляРазработчика(),
			ПредставлениеПараметра);
	КонецЕсли;
	
	Возврат СохраненныеПараметры;
	
КонецФункции

// Возвращает таблицу значений, содержащую вид ограничений доступа по каждому праву
// объектов метаданных.
//  Если записи по праву нет, значит ограничений по праву нет.
//  Таблица содержит только виды доступа, заданные разработчиком,
// исходя из их применения в текстах ограничений.
//  Для получения всех видов доступа, включая используемые в наборах
// значений доступа может быть использовано
// текущее состояние регистра сведений НаборыЗначенийДоступа.
//
// Возвращаемое значение:
//  ТаблицаЗначений:
//    Таблица    - Строка - имя таблицы объекта метаданных, например, Справочник.Файлы
//    Право      - Строка: "Чтение", "Добавление", "Изменение", "Удаление"
//    ВидДоступа - ПланВидовХарактеристикСсылка.ВидыДоступа
//    ТаблицаОбъекта - Строка - имя таблицы объекта метаданных, через который ограничивается
//                 доступ, используя наборы значений доступа, например, Справочник.ПапкиФайлов
//                 Непустая строка, если ВидДоступа пустая ссылка, что
//                 в данном случае соответствует виду доступа Объект.
//
Функция ПостоянныеВидыОграниченийПравОбъектовМетаданных() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВидыДоступаПрав = Новый ТаблицаЗначений;
	ВидыДоступаПрав.Колонки.Добавить("Таблица",        Новый ОписаниеТипов("СправочникСсылка.ИдентификаторыОбъектовМетаданных"));
	ВидыДоступаПрав.Колонки.Добавить("Право",          Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(20)));
	ВидыДоступаПрав.Колонки.Добавить("ВидДоступа",     Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ВидыДоступа"));
	ВидыДоступаПрав.Колонки.Добавить("ТаблицаОбъекта", Новый ОписаниеТипов("СправочникСсылка.ИдентификаторыОбъектовМетаданных"));
	
	ПредопределенныеВидыДоступа = Новый Соответствие;
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВидыДоступа.Ссылка КАК Ссылка,
	|	НЕОПРЕДЕЛЕНО КАК ИмяПредопределенныхДанных
	|ИЗ
	|	ПланВидовХарактеристик.ВидыДоступа КАК ВидыДоступа
	|ГДЕ
	|	ВидыДоступа.Предопределенный = ИСТИНА";
	Если СтандартныеПодсистемыПовтИсп.ЭтоПлатформа83БезРежимаСовместимости() Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "НЕОПРЕДЕЛЕНО", "ВидыДоступа.ИмяПредопределенныхДанных");
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если СтандартныеПодсистемыПовтИсп.ЭтоПлатформа83БезРежимаСовместимости() Тогда
			ИмяВидаДоступа = Выборка.ИмяПредопределенныхДанных;
		Иначе
			ИмяВидаДоступа = ПланыВидовХарактеристик.ВидыДоступа.ПолучитьИмяПредопределенного(Выборка.Ссылка);
		КонецЕсли;
		ПредопределенныеВидыДоступа.Вставить(ИмяВидаДоступа, Выборка.Ссылка);
	КонецЦикла;
	
	ОграниченияПрав = "";
	
	ОбработчикиСобытия = ОбщегоНазначения.ОбработчикиСлужебногоСобытия(
		"СтандартныеПодсистемы.УправлениеДоступом\ПриЗаполненииВидовОграниченийПравОбъектовМетаданных");
	
	Для каждого Обработчик Из ОбработчикиСобытия Цикл
		Обработчик.Модуль.ПриЗаполненииВидовОграниченийПравОбъектовМетаданных(ОграниченияПрав);
	КонецЦикла;
	
	УправлениеДоступомПереопределяемый.ЗаполнитьВидыОграниченийПравОбъектовМетаданных(ОграниченияПрав);
	
	Для НомерСтроки = 1 По СтрЧислоСтрок(ОграниченияПрав) Цикл
		ТекущаяСтрока = СтрПолучитьСтроку(ОграниченияПрав, НомерСтроки);
		Если ЗначениеЗаполнено(ТекущаяСтрока) Тогда
			ПояснениеОшибки = "";
			Если СтрЧислоВхождений(ТекущаяСтрока, ".") <> 3 И СтрЧислоВхождений(ТекущаяСтрока, ".") <> 5 Тогда
				ПояснениеОшибки = НСтр("ru = 'Строка должна быть в формате ""<Полное имя таблицы>.<Имя права>.<Имя вида доступа>[.Таблица объекта]"".'");
			Иначе
				ПозицияПрава = Найти(ТекущаяСтрока, ".");
				ПозицияПрава = Найти(Сред(ТекущаяСтрока, ПозицияПрава + 1), ".") + ПозицияПрава;
				Таблица = Лев(ТекущаяСтрока, ПозицияПрава - 1);
				ПозицияВидаДоступа = Найти(Сред(ТекущаяСтрока, ПозицияПрава + 1), ".") + ПозицияПрава;
				Право = Сред(ТекущаяСтрока, ПозицияПрава + 1, ПозицияВидаДоступа - ПозицияПрава - 1);
				Если СтрЧислоВхождений(ТекущаяСтрока, ".") = 3 Тогда
					ВидДоступа = Сред(ТекущаяСтрока, ПозицияВидаДоступа + 1);
					ТаблицаОбъекта = "";
				Иначе
					ПозицияТаблицыОбъекта = Найти(Сред(ТекущаяСтрока, ПозицияВидаДоступа + 1), ".") + ПозицияВидаДоступа;
					ВидДоступа = Сред(ТекущаяСтрока, ПозицияВидаДоступа + 1, ПозицияТаблицыОбъекта - ПозицияВидаДоступа - 1);
					ТаблицаОбъекта = Сред(ТекущаяСтрока, ПозицияТаблицыОбъекта + 1);
				КонецЕсли;
				Если Метаданные.НайтиПоПолномуИмени(Таблица) = Неопределено Тогда
					ПояснениеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Не найдена таблица ""%1"".'"),
						Таблица);
				ИначеЕсли Право <> "Чтение"
				        И Право <> "Добавление"
				        И Право <> "Изменение"
				        И Право <> "Удаление" Тогда
					ПояснениеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Не найдено право ""%1"".'"),
						Право);
				ИначеЕсли ВРег(ВидДоступа) = ВРег("Объект") Тогда
					Если Метаданные.НайтиПоПолномуИмени(ТаблицаОбъекта) = Неопределено Тогда
						ПояснениеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
							НСтр("ru = 'Не найдена таблица объекта ""%1"".'"),
							ТаблицаОбъекта);
					КонецЕсли;
				ИначеЕсли ПредопределенныеВидыДоступа.Получить(ВидДоступа) = Неопределено Тогда
					ПояснениеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Не найден вид доступа ""%1"".'"),
						ВидДоступа);
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ПояснениеОшибки) Тогда
				ВызватьИсключение(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
						НСтр("ru = 'Ошибка в строке описания вида ограничений права объекта метаданных:
						           |""%1"".
						           |
						           |'"), ТекущаяСтрока) + ПояснениеОшибки);
			Иначе
				НовоеОписание = ВидыДоступаПрав.Добавить();
				НовоеОписание.Таблица        = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Таблица);
				НовоеОписание.Право          = Право;
				НовоеОписание.ВидДоступа     = ПредопределенныеВидыДоступа.Получить(ВидДоступа);
				Если ЗначениеЗаполнено(ТаблицаОбъекта) Тогда
					НовоеОписание.ТаблицаОбъекта = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТаблицаОбъекта);
				Иначе
					НовоеОписание.ТаблицаОбъекта = Справочники.ИдентификаторыОбъектовМетаданных.ПустаяСсылка();
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВидыДоступаПрав;
	
КонецФункции

// Только для внутреннего использования.
Функция ОписаниеКлючаЗаписи(ТипИлиПолноеИмя) Экспорт
	
	ОписаниеКлюча = Новый Структура("МассивПолей, СтрокаПолей", Новый Массив, "");
	
	Если ТипЗнч(ТипИлиПолноеИмя) = Тип("Тип") Тогда
		ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипИлиПолноеИмя);
	Иначе
		ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ТипИлиПолноеИмя);
	КонецЕсли;
	Менеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ОбъектМетаданных.ПолноеИмя());
	
	Для каждого Колонка Из Менеджер.СоздатьНаборЗаписей().Выгрузить().Колонки Цикл
		
		Если ОбъектМетаданных.Ресурсы.Найти(Колонка.Имя) = Неопределено
		   И ОбъектМетаданных.Реквизиты.Найти(Колонка.Имя) = Неопределено Тогда
			// Если поля нет в ресурсах и реквизитах, значит это поле - измерение
			ОписаниеКлюча.МассивПолей.Добавить(Колонка.Имя);
			ОписаниеКлюча.СтрокаПолей = ОписаниеКлюча.СтрокаПолей + Колонка.Имя + ",";
		КонецЕсли;
	КонецЦикла;
	
	ОписаниеКлюча.СтрокаПолей = Лев(ОписаниеКлюча.СтрокаПолей, СтрДлина(ОписаниеКлюча.СтрокаПолей)-1);
	
	Возврат ОбщегоНазначения.ФиксированныеДанные(ОписаниеКлюча);
	
КонецФункции

// Только для внутреннего использования.
Функция ТипыПоляТаблицы(Таблица, ГруппаПолей, Поле) Экспорт
	
	ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(Таблица);
	
	ТипыПоля = Новый Соответствие;
	
	Для каждого Тип Из ОбъектМетаданных[ГруппаПолей][Поле].Тип.Типы() Цикл
		ТипыПоля.Вставить(Тип, Истина);
	КонецЦикла;
	
	Возврат ТипыПоля;
	
КонецФункции

// Возвращает типы объектов и ссылок в указанных подписках на события.
// 
// Параметры:
//  ИменаПодписок - Строка - многострочная строка, содержащая
//                  строки начала имени подписки.
//
Функция ТипыОбъектовВПодпискахНаСобытия(ИменаПодписок) Экспорт
	
	ТипыОбъектов = Новый Соответствие;
	
	Для каждого Подписка Из Метаданные.ПодпискиНаСобытия Цикл
		
		Для НомерСтроки = 1 По СтрЧислоСтрок(ИменаПодписок) Цикл
			
			НачалоИмени = СтрПолучитьСтроку(ИменаПодписок, НомерСтроки);
			Если ВРег(Лев(Подписка.Имя, СтрДлина(НачалоИмени))) = ВРег(НачалоИмени) Тогда
				
				Для каждого Тип Из Подписка.Источник.Типы() Цикл
					ТипыОбъектов.Вставить(Тип, Истина);
				КонецЦикла;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат Новый ФиксированноеСоответствие(ТипыОбъектов);
	
КонецФункции
