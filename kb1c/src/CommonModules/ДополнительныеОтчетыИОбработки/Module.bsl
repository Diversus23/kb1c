////////////////////////////////////////////////////////////////////////////////
// Подсистема "Дополнительные отчеты и обработки"
// 
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Подключает внешнюю обработку (отчет). После подключения
//   обработка (отчет) регистрируется в программе под определенным именем,
//   используя которое можно создавать объект или открывать формы обработки (отчета).
//
// Параметры:
//   Ссылка (СправочникСсылка.ДополнительныеОтчетыИОбработки) Подключаемая обработка.
//
// Возвращаемое значение: 
//   (Строка)       Имя подключенной обработки (отчета).
//   (Неопределено) Если передана некорректная ссылка.
//
// Важно:
//   Проверка функциональной опции "ИспользоватьДополнительныеОтчетыИОбработки"
//     должна выполняться вызывающим кодом.
//
Функция ПодключитьВнешнююОбработку(Ссылка) Экспорт
	
	// Проверка корректности переданных параметров
	Если ТипЗнч(Ссылка) <> Тип("СправочникСсылка.ДополнительныеОтчетыИОбработки") 
		ИЛИ Ссылка = Справочники.ДополнительныеОтчетыИОбработки.ПустаяСсылка() Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПроверитьВозможностьВыполнения(Ссылка);
	
	// Подключение
	#Если ТолстыйКлиентОбычноеПриложение Тогда
		ИмяОбработки = ПолучитьИмяВременногоФайла();
		ДвоичныеДанные = Ссылка.ХранилищеОбработки.Получить();
		ДвоичныеДанные.Записать(ИмяОбработки);
		Возврат ИмяОбработки;
	#КонецЕсли
	
	Если Ссылка.Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.Отчет
		ИЛИ Ссылка.Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительныйОтчет Тогда
		Менеджер = ВнешниеОтчеты;
	Иначе
		Менеджер = ВнешниеОбработки;
	КонецЕсли;
	
	ПараметрыЗапуска = ОпределитьПараметрыЗапуска(Ссылка);
	АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ПараметрыЗапуска.ХранилищеОбработки.Получить());
	
	ИмяОбработки = Менеджер.Подключить(АдресВоВременномХранилище, , ПараметрыЗапуска.БезопасныйРежим);
	
	Возврат ИмяОбработки;
	
КонецФункции

// Создает и возвращает объект внешней обработки (отчета).
//
// Параметры:
//   Ссылка (СправочникСсылка.ДополнительныеОтчетыИОбработки) Подключаемая обработка.
//
// Возвращаемое значение: 
//   (ВнешняяОбработкаОбъект.*) Объект подключенной обработки.
//   (ВнешнийОтчетОбъект.*)     Объект подключенного отчета.
//   (Неопределено)             Если передана некорректная ссылка.
//
// Важно:
//   Проверка функциональной опции "ИспользоватьДополнительныеОтчетыИОбработки"
//     должна выполняться вызывающим кодом.
//
Функция ПолучитьОбъектВнешнейОбработки(Ссылка) Экспорт
	
	// Подключение
	ИмяОбработки = ПодключитьВнешнююОбработку(Ссылка);
	
	// Проверка корректности переданных параметров
	Если ИмяОбработки = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	// Получение экземпляра объекта
	Если Ссылка.Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.Отчет
		ИЛИ Ссылка.Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительныйОтчет Тогда
		Менеджер = ВнешниеОтчеты;
	Иначе
		Менеджер = ВнешниеОбработки;
	КонецЕсли;
	
	Возврат Менеджер.Создать(ИмяОбработки);
	
КонецФункции

// Установка параметров функциональных опций формы (требуется для формирования
//   командного интерфейса формы)
//
// Параметры:
//   ЭтаФорма (УправляемаяФорма)
//   ТипФормы (Строка) Необязательный. "ФормаСписка" для форм списков и "ФормаОбъекта" для форм элементов.
//       см. также функции ТипФормыСписка() и ТипФормыОбъекта() общего модуля ДополнительныеОтчетыИОбработкиКлиентСервер.
//
Процедура ПриСозданииНаСервере(ЭтаФорма, ТипФормы = Неопределено) Экспорт
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеОтчетыИОбработки") Тогда
		Возврат;
	КонецЕсли;
	
	// Установка параметров формы для команд вызова дополнительных отчетов и обработок.
	Параметры = ДополнительныеОтчетыИОбработкиПовтИсп.ПараметрыФормыНазначаемогоОбъекта(ЭтаФорма.ИмяФормы);
	Если ТипЗнч(Параметры) <> Тип("ФиксированнаяСтруктура") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФункциональныхОпций = Новый Структура;
	ПараметрыФункциональныхОпций.Вставить("ДополнительныеОтчетыИОбработкиОбъектНазначения", Параметры.СсылкаРодителя);
	ПараметрыФункциональныхОпций.Вставить("ДополнительныеОтчетыИОбработкиТипФормы",         ?(ТипФормы = Неопределено, Параметры.ТипФормы, ТипФормы));
	
	ЭтаФорма.УстановитьПараметрыФункциональныхОпцийФормы(ПараметрыФункциональныхОпций);
	
	Если Параметры.ВыводитьПодменюЗаполнениеОбъекта Тогда
		СформироватьПодменюКомандЗаполнения(ЭтаФорма, Параметры);
	КонецЕсли;
	
КонецПроцедуры

// Формирует печатную форму по внешнему источнику
//
// Параметры:
//   Ссылка (СправочникСсылка.ДополнительныеОтчетыИОбработки) Внешняя обработка
//   ПараметрыИсточника (Структура)
//       |- ИдентификаторКоманды (Строка) Список макетов, перечисленных через запятую
//       |- ОбъектыНазначения    (Массив)
//   КоллекцияПечатныхФорм (ТаблицаЗначений) см. описание процедуры Печать() в документации.
//   ОбъектыПечати         (СписокЗначений)  см. описание процедуры Печать() в документации.
//   ПараметрыВывода       (Структура)       см. описание процедуры Печать() в документации.
//
Процедура ПечатьПоВнешнемуИсточнику(Ссылка, ПараметрыИсточника, КоллекцияПечатныхФорм,
	ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеОтчетыИОбработки") Тогда
		Возврат;
	КонецЕсли;
	
	КоллекцияПечатныхФорм = УправлениеПечатью.ПодготовитьКоллекциюПечатныхФорм(ПараметрыИсточника.ИдентификаторКоманды);
	
	ПараметрыВывода = УправлениеПечатью.ПодготовитьСтруктуруПараметровВывода();
	
	ОбъектыПечати = Новый СписокЗначений;
	
	ВнешняяОбработкаОбъект = ПолучитьОбъектВнешнейОбработки(Ссылка);
	
	Если ВнешняяОбработкаОбъект = Неопределено Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Внешняя обработка ""%1"" (тип ""%2"") не обслуживается подсистемой ""Дополнительные отчеты и обработки""'"),
			Строка(Ссылка),
			Строка(ТипЗнч(Ссылка)));
	КонецЕсли;
	
	ВнешняяОбработкаОбъект.Печать(
		ПараметрыИсточника.ОбъектыНазначения,
		КоллекцияПечатныхФорм,
		ОбъектыПечати,
		ПараметрыВывода);
	
	// Проверим, все ли макеты были сформированы
	Для Каждого Стр Из КоллекцияПечатныхФорм Цикл
		Если Стр.ТабличныйДокумент = Неопределено Тогда
			ТекстСообщенияОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В обработчике печати не был сформирован табличный документ для: %1'"),
				Стр.ИмяМакета);
			ВызватьИсключение(ТекстСообщенияОбОшибке);
		КонецЕсли;
		
		Стр.ТабличныйДокумент.КоличествоЭкземпляров = Стр.Экземпляров;
	КонецЦикла;

КонецПроцедуры

// Формирует шаблон структуры сведений о внешнем отчете или обработке для последующего заполнения.
//
// Параметры:
//   ВерсияБСП (Строка) Версия библиотеки стандартных подсистем, на которую рассчитывают механизмы внешнего объекта.
//       Подробнее - см. СтандартныеПодсистемыСервер.ВерсияБиблиотеки().
//
// Возвращаемое значение: 
//   ПараметрыРегистрации (Структура) Параметры внешнего объекта.
//       |- Вид (Строка) Вид внешнего объекта. Соответствует реквизиту "Вид" (ПеречислениеСсылка.ВидыДополнительныхОтчетовИОбработок).
//           Для определения вида можно использовать функции "Вид*" общего модуля ДополнительныеОтчетыИОбработкиКлиентСервер,
//           или указать вид явно:
//           |- "ПечатнаяФорма"
//           |- "ЗаполнениеОбъекта"
//           |- "СозданиеСвязанныхОбъектов"
//           |- "Отчет"
//           |- "ДополнительнаяОбработка"
//           |- "ДополнительныйОтчет"
//       |- Версия (Строка) Версия объекта.
//           Задается в формате: "<Старший номер>.<Младший номер>".
//       |- Назначение (Массив) из (Строка) Необязательный. Имена объектов конфигурации, для которых предназначен этот объект.
//           Задается в формате: "<ИмяКлассаОбъектаМетаданного>.[*|<ИмяОбъектаМетаданных>]"
//       |- Наименование (Строка) Необязательный. Представление для администратора (наименование элемента справочника).
//           Если не заполнено, то берется представление объекта метаданных внешнего объекта.
//       |- БезопасныйРежим (Булево) Необязательный. Признак подключения внешней обработки в безопасном режиме.
//           Значение по умолчанию Истина (обработка будет выполняться безопасно).
//           Подробнее - см. разделы справки "ВнешниеОтчетыМенеджер.Подключить" и "ВнешниеОбработкиМенеджер.Подключить".
//       |- Информация (Строка) Необязательный. Краткая информация по внешнему объекту.
//           В этом параметре для администратора рекомендуется указать описание возможностей внешнего объекта.
//           Если не заполнено, то берется комментарий объекта метаданных внешнего объекта.
//       |- ВерсияБСП (Строка) Необязательный. Версия библиотеки, на которую рассчитывают механизмы внешнего объекта.
//           Подробнее - см. СтандартныеПодсистемыСервер.ВерсияБиблиотеки().
//       |- Команды (ТаблицаЗначений) Необязательный для отчетов. Таблица команд, поставляемых внешним объектом.
//           Типы колонок соответствуют типам табличной части Команды справочника ДополнительныеОтчетыИОбработки.
//           |- Идентификатор (Строка) Имя команды. Для печатной формы - список макетов.
//           |- Использование (Строка) Тип команды. Соответствует реквизиту "ВариантЗапуска" (ПеречислениеСсылка.СпособыВызоваДополнительныхОбработок).
//               |- "ВызовКлиентскогоМетода"
//               |- "ВызовСерверногоМетода"
//               |- "ЗаполнениеФормы"
//               |- "ОткрытиеФормы"
//               |- "СценарийВБезопасномРежиме"
//           |- Представление (Строка) Представление команды для конечного пользователя.
//           |- ПоказыватьОповещение (Булево) Истина = при запуске команды будет показано стандартное оповещение.
//               Не работает для команд "ОткрытиеФормы".
//           |- Модификатор (Строка) Вспомогательный модификатор команды.
//               |- "ПечатьMXL" для печатных форм на основе макетов MXL.
//           |- Скрыть (Булево) Истина если команду необходимо скрывать в форме элемента.
//       |- Разрешения (Массив(ОбъектXDTO {http://www.1c.ru/1cFresh/ApplicationExtensions/Permissions/a.b.c.d}PermissionBase))
//           Необязательный. Массив разрешений, предоставленных дополнительному отчету или обработке при работе в безопасном
//           режиме.
//
Функция СведенияОВнешнейОбработке(ВерсияБСП = "") Экспорт
	ПараметрыРегистрации = Новый Структура;
	
	ПараметрыРегистрации.Вставить("Вид", "");
	ПараметрыРегистрации.Вставить("Версия", "0.0");
	ПараметрыРегистрации.Вставить("Назначение", Новый Массив);
	ПараметрыРегистрации.Вставить("Наименование", Неопределено);
	ПараметрыРегистрации.Вставить("БезопасныйРежим", Истина);
	ПараметрыРегистрации.Вставить("Информация", Неопределено);
	ПараметрыРегистрации.Вставить("ВерсияБСП", ВерсияБСП);
	
	РеквизитыТабличнойЧасти = Метаданные.Справочники.ДополнительныеОтчетыИОбработки.ТабличныеЧасти.Команды.Реквизиты;
	
	ТаблицаКоманд = Новый ТаблицаЗначений;
	ТаблицаКоманд.Колонки.Добавить("Представление", РеквизитыТабличнойЧасти.Представление.Тип);
	ТаблицаКоманд.Колонки.Добавить("Идентификатор", РеквизитыТабличнойЧасти.Идентификатор.Тип);
	ТаблицаКоманд.Колонки.Добавить("Использование", Новый ОписаниеТипов("Строка"));
	ТаблицаКоманд.Колонки.Добавить("ПоказыватьОповещение", РеквизитыТабличнойЧасти.ПоказыватьОповещение.Тип);
	ТаблицаКоманд.Колонки.Добавить("Модификатор", РеквизитыТабличнойЧасти.Модификатор.Тип);
	ТаблицаКоманд.Колонки.Добавить("Скрыть",      РеквизитыТабличнойЧасти.Скрыть.Тип);
	
	ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
	ПараметрыРегистрации.Вставить("Разрешения", Новый Массив);
	
	Возврат ПараметрыРегистрации;
КонецФункции

// Выполняет назначаемую команду контекстно из формы объекта назначения.
//
// Параметры:
//   ЭтаФорма (УправляемаяФорма) Форма, из которой вызвана команда.
//   ИмяЭлемента (Строка) Имя команды формы, которая была нажата.
//   РезультатВыполнения (Структура) См. СтандартныеПодсистемыКлиентСервер.НовыйРезультатВыполнения().
//
// Описание:
//   Предназначена для вызова кодом этой подсистемы из формы элемента назначаемого объекта (например, справочника или документа).
//
// Важно:
//   Проверка функциональной опции "ИспользоватьДополнительныеОтчетыИОбработки"
//     должна выполняться вызывающим кодом.
//
Процедура ВыполнитьНазначаемуюКомандуНаСервере(ЭтаФорма, ИмяЭлемента, РезультатВыполнения) Экспорт
	
	Найденные = ЭтаФорма.КомандыДополнительныхОбработок.НайтиСтроки(Новый Структура("ИмяЭлемента", ИмяЭлемента));
	Если Найденные.Количество() = 0 Тогда
		ВызватьИсключение НСтр("ru = 'Команда не найдена'");
	КонецЕсли;
	
	СтрокаТаблицы = Найденные[0];
	
	ВнешнийОбъект = ПолучитьОбъектВнешнейОбработки(СтрокаТаблицы.Ссылка);
	ИдентификаторКоманды = СтрокаТаблицы.Идентификатор;
	
	ПараметрыКоманды = Новый Структура;
	ПараметрыКоманды.Вставить("ЭтаФорма", ЭтаФорма);
	
	РезультатВыполнения = ВыполнитьКомандуВнешнегоОбъекта(ВнешнийОбъект, ИдентификаторКоманды, ПараметрыКоманды, Неопределено);
	
КонецПроцедуры

// Выполняет команду обработки и возвращает результат ее выполнения.
//
// Параметры:
//   ПараметрыКоманды (Структура) Параметры, с которыми выполняется команда.
//       |- ДополнительнаяОбработкаСсылка (СправочникСсылка.ДополнительныеОтчетыИОбработки) Элемент справочника.
//       |- ИдентификаторКоманды (Строка) Имя выполняемой команды.
//       |- ОбъектыНазначения (Массив) из (*) Ссылки объектов, для которых выполняется обработка. Обязательный для назначаемых обработок.
//       |- РезультатВыполнения (*) Необязательный. Используется для передачи результата работы на клиент.
//   АдресРезультата (Строка) Необязательный. Адрес временного хранилища по которому будет размещен результат выполнения.
//
// Возвращаемое значение:
//   ПараметрыКоманды.РезультатВыполнения (*) см. ПараметрыКоманды. Если был передан АдресРезультата, то возвращается Неопределено.
//
// Важно:
//   Проверка функциональной опции "ИспользоватьДополнительныеОтчетыИОбработки"
//     должна выполняться вызывающим кодом.
//
Функция ВыполнитьКоманду(ПараметрыКоманды, АдресРезультата = Неопределено) Экспорт
	
	ВнешнийОбъект = ПолучитьОбъектВнешнейОбработки(ПараметрыКоманды.ДополнительнаяОбработкаСсылка);
	ИдентификаторКоманды = ПараметрыКоманды.ИдентификаторКоманды;
	
	РезультатВыполнения = ВыполнитьКомандуВнешнегоОбъекта(ВнешнийОбъект, ИдентификаторКоманды, ПараметрыКоманды, АдресРезультата);
	
	Возврат РезультатВыполнения;
	
КонецФункции

// Выполняет команду обработки напрямую из формы внешнего объекта и возвращает результат ее выполнения.
//   Пример использования - см. ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьКомандуВФоне().
//
// Параметры:
//   ИдентификаторКоманды (Строка) Имя команды как оно задано в функции СведенияОВнешнейОбработке() модуля объекта.
//   ПараметрыКоманды (Структура) Параметры выполнения команды. См. ДополнительныеОтчетыИОбработкиКлиент.ВыполнитьКомандуВФоне().
//   ЭтаФорма (УправляемаяФорма) Форма, в которую необходимо вернуть результат.
//
// Возвращаемое значение:
//   РезультатВыполнения (Структура) См. СтандартныеПодсистемыКлиентСервер.НовыйРезультатВыполнения().
//
// Важно:
//   Проверка функциональной опции "ИспользоватьДополнительныеОтчетыИОбработки"
//     должна выполняться вызывающим кодом.
//
Функция ВыполнитьКомандуИзФормыВнешнегоОбъекта(ИдентификаторКоманды, ПараметрыКоманды, ЭтаФорма) Экспорт
	
	ВнешнийОбъект = ЭтаФорма.РеквизитФормыВЗначение("Объект");
	
	РезультатВыполнения = ВыполнитьКомандуВнешнегоОбъекта(ВнешнийОбъект, ИдентификаторКоманды, ПараметрыКоманды, Неопределено);
	
	Возврат РезультатВыполнения;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры используемые при обмене данными

// Переопределяет стандартное поведение при загрузке данных.
// Реквизит РегламентноеЗаданиеGUID табличной части Команды не переносится,
// т.к. связан с регламентным заданием текущей базы.
//
Процедура ПриПолученииДополнительнойОбработки(ЭлементДанных, ПолучениеЭлемента) Экспорт
	
	Если ПолучениеЭлемента = ПолучениеЭлементаДанных.Игнорировать Тогда
		
		// Стандартную обработку не переопределяем
		
	ИначеЕсли ТипЗнч(ЭлементДанных) = Тип("СправочникОбъект.ДополнительныеОтчетыИОбработки")
		И ЭлементДанных.Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительнаяОбработка Тогда
		
		// Таблица уникальных идентификаторов регламентных заданий
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	Команды.Ссылка КАК Ссылка,
		|	Команды.Идентификатор КАК Идентификатор,
		|	Команды.РегламентноеЗаданиеGUID КАК РегламентноеЗаданиеGUID
		|ИЗ
		|	Справочник.ДополнительныеОтчетыИОбработки.Команды КАК Команды
		|ГДЕ
		|	Команды.Ссылка = &Ссылка";
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.Параметры.Вставить("Ссылка", ЭлементДанных.Ссылка);
		
		ИдентификаторыРегламентныхЗаданий = Запрос.Выполнить().Выгрузить();
		
		// Заполнение идентификаторов регламентных заданий в таблице команд из данных текущей БД
		Для Каждого СтрокаКоманда Из ЭлементДанных.Команды Цикл
			Найденные = ИдентификаторыРегламентныхЗаданий.НайтиСтроки(Новый Структура("Идентификатор", СтрокаКоманда.Идентификатор));
			Если Найденные.Количество() = 0 Тогда
				СтрокаКоманда.РегламентноеЗаданиеGUID = Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000");
			Иначе
				СтрокаКоманда.РегламентноеЗаданиеGUID = Найденные[0].РегламентноеЗаданиеGUID;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС

////////////////////////////////////////////////////////////////////////////////
// Добавление обработчиков служебных событий (подписок)

// См. описание этой же процедуры в модуле СтандартныеПодсистемыСервер.
Процедура ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики) Экспорт
	
	// СЕРВЕРНЫЕ ОБРАБОТЧИКИ.
	
	СерверныеОбработчики["СтандартныеПодсистемы.ОбновлениеВерсииИБ\ПриДобавленииОбработчиковОбновления"].Добавить(
		"ДополнительныеОтчетыИОбработки");
	
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриПолученииДанныхОтПодчиненного"].Добавить(
		"ДополнительныеОтчетыИОбработки");
	
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриПолученииДанныхОтГлавного"].Добавить(
		"ДополнительныеОтчетыИОбработки");
	
КонецПроцедуры

// Дополняет список команд печати внешними печатными формами.
//
// Параметры:
//  КомандыПечати - ТаблицаЗначений - описание см. в УправлениеПечатью.СоздатьКоллекциюКомандПечати().
//  ИмяФормы      - Строка          - полное имя формы, для которой необходимо получить список команд печати.
//
Процедура ПриПолученииКомандПечати(КомандыПечати, ИмяФормы) Экспорт
	
	Если НЕ ПравоДоступа("Чтение", Метаданные.Справочники.ДополнительныеОтчетыИОбработки) Тогда
		Возврат;
	КонецЕсли;
	
	ПолноеИмяОбъектаМетаданных = Метаданные.НайтиПоПолномуИмени(ИмяФормы).Родитель().ПолноеИмя();
	Запрос = НовыйЗапросПоДоступнымКомандам(Перечисления.ВидыДополнительныхОтчетовИОбработок.ПечатнаяФорма, ПолноеИмяОбъектаМетаданных);
	ТаблицаКоманд = Запрос.Выполнить().Выгрузить();
	
	Если ТаблицаКоманд.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ТаблицаКоманд Цикл
		КомандаПечати = КомандыПечати.Найти(СтрокаТаблицы.Идентификатор, "Идентификатор"); // подмена встроенной команды на внешнюю
		Если КомандаПечати = Неопределено Тогда
			КомандаПечати = КомандыПечати.Добавить();
		КонецЕсли;
		// Обязательные параметры.
		ЗаполнитьЗначенияСвойств(КомандаПечати, СтрокаТаблицы, "Идентификатор, Представление");
		// Параметры, идентифицирующие подсистему.
		КомандаПечати.МенеджерПечати = "СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки";
		
		// Дополнительные параметры.
		КомандаПечати.ДополнительныеПараметры = Новый Структура("Ссылка, Модификатор, ВариантЗапуска, ПоказыватьОповещение");
		ЗаполнитьЗначенияСвойств(КомандаПечати.ДополнительныеПараметры, СтрокаТаблицы);
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики служебных событий

// Добавляет процедуры-обработчики обновления, необходимые данной подсистеме.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                  общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "1.0.7.1";
	Обработчик.Процедура = "ДополнительныеОтчетыИОбработки.ОбновитьПользовательскиеНастройкиДоступаКОбработкам";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.0.1.4";
	Обработчик.Процедура = "ДополнительныеОтчетыИОбработки.ЗаполнитьИменаОбъектов";
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.3.2";
	Обработчик.Процедура = "ДополнительныеОтчетыИОбработки.ЗаменитьИменаОбъектовМетаданныхНаСсылки";
	
	Если НЕ ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		Обработчик = Обработчики.Добавить();
		Обработчик.ВыполнятьВГруппеОбязательных = Истина;
		Обработчик.ОбщиеДанные                  = Истина;
		Обработчик.УправлениеОбработчиками      = Ложь;
		Обработчик.МонопольныйРежим             = Истина;
		Обработчик.Версия    = "2.1.3.22";
		Обработчик.Процедура = "ДополнительныеОтчетыИОбработки.ВключитьФункциональнуюОпцию";
	КонецЕсли;
	
КонецПроцедуры

// Процедура является обработчиком одноименного события, возникающего при обмене данными в распределенной информационной базе.
//
// Параметры:
// см. описание обработчика события ПриПолученииДанныхОтПодчиненного() в синтаксис-помощнике.
// 
Процедура ПриПолученииДанныхОтПодчиненного(ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад, Отправитель) Экспорт
	
	ПриПолученииДополнительнойОбработки(ЭлементДанных, ПолучениеЭлемента);
	
КонецПроцедуры

// Процедура является обработчиком одноименного события, возникающего при обмене данными в распределенной информационной базе.
//
// Параметры:
// см. описание обработчика события ПриПолученииДанныхОтГлавного() в синтаксис-помощнике.
// 
Процедура ПриПолученииДанныхОтГлавного(ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад, Отправитель) Экспорт
	
	ПриПолученииДополнительнойОбработки(ЭлементДанных, ПолучениеЭлемента);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики условных вызовов

// Получает ссылку дополнительного отчета, если он подключен к хранилищу подсистемы Варианты отчетов.
//
// Параметры:
//   ОтчетИнформация (Структура) см. ВариантыОтчетов.СформироватьИнформациюОбОтчетеПоПолномуИмени()
//
Процедура ПриОпределенииТипаИСсылкиЕслиОтчетДополнительный(ОтчетИнформация) Экспорт
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеОтчетыИОбработки") Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Таблица.Ссылка
	|ИЗ
	|	Справочник.ДополнительныеОтчетыИОбработки КАК Таблица
	|ГДЕ
	|	Таблица.ИмяОбъекта = &ИмяОбъекта
	|	И Таблица.ПометкаУдаления = ЛОЖЬ
	|	И Таблица.Вид = &ВидДополнительныйОтчет
	|	И Таблица.ИспользуетХранилищеВариантов = ИСТИНА
	|	И Таблица.Публикация = &ПубликацияИспользуется";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИмяОбъекта", ОтчетИнформация.ОтчетИмя);
	Запрос.УстановитьПараметр("ВидДополнительныйОтчет", Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительныйОтчет);
	Запрос.УстановитьПараметр("ПубликацияИспользуется", Перечисления.ВариантыПубликацииДополнительныхОтчетовИОбработок.Используется);
	Если ОтчетИнформация.ПодключеныВсеОтчеты Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И Таблица.ИспользуетХранилищеВариантов = ИСТИНА", "");
	КонецЕсли;
	Запрос.Текст = ТекстЗапроса;
	
	УстановитьПривилегированныйРежим(Истина); // Необходим для целостности формируемых данных. Права доступа будут применяться на этапе их использования.
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ОтчетИнформация.Отчет = Выборка.Ссылка;
		ОтчетИнформация.Вставить("ОтчетДополнительный");
	КонецЕсли;
	
КонецПроцедуры

// Дополняет массив ссылкам дополнительных отчетов, доступных текущему пользователю.
//
// Параметры:
//   Результат (Массив) из (*) см. тип реквизита Отчет справочника ВариантыОтчетов.
//       Ссылки отчетов, доступных текущему пользователю.
//
Процедура ПриДобавленииДополнительныхОтчетовДоступныхТекущемуПользователю(ДоступныеОтчеты) Экспорт
	Если НЕ ПравоДоступа("Чтение", Метаданные.Справочники.ДополнительныеОтчетыИОбработки)
		Или Не ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеОтчетыИОбработки") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Таблица.Ссылка
	|ИЗ
	|	Справочник.ДополнительныеОтчетыИОбработки КАК Таблица
	|ГДЕ
	|	Таблица.ИспользуетХранилищеВариантов
	|	И Таблица.Вид = &ВидДополнительныйОтчет
	|	И НЕ Таблица.Ссылка В (&ДоступныеОтчеты)";
	
	Запрос.УстановитьПараметр("ДоступныеОтчеты", ДоступныеОтчеты);
	Запрос.УстановитьПараметр("ВидДополнительныйОтчет", Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительныйОтчет);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДоступныеОтчеты.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
КонецПроцедуры

// Подключает отчет подсистемы "Дополнительные отчеты и обработки".
//   Обработка исключений производится управляющим кодом.
// 
// Параметры:
//   ДопОтчет        (СправочникСсылка.ДополнительныеОтчетыИОбработки) Отчет, который необходимо инициализировать
//   ПараметрыОтчета (Структура) Набор параметров, получаемый в процессе проверки и подключения отчета
//                               см. описание функции "ИнициализироватьОтчет" модуля "РассылкаОтчетов"
//   Результат       (Булево, Неопределено)
//     |- Истина       - Удалось подключить дополнительный отчет
//     |- Ложь         - Не удалось подключить дополнительный отчет
//     |- Неопределено - По умолчанию. Подсистема доп. отчетов недоступна.
//
Процедура ПриПодключенииДопОтчета(ДопОтчет, ПараметрыОтчета, Результат) Экспорт
	Если Не ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеОтчетыИОбработки") Тогда
		ПараметрыОтчета.Ошибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Элемент ""%1"" не подключен, потому что подсистема ""%2"" отключена в настройках программы.
			|Для включения подсистемы обратитесь к администратору программы.'"),
			"'"+ Строка(ДопОтчет) +"'",
			ДополнительныеОтчетыИОбработкиКлиентСервер.НаименованиеПодсистемы(Неопределено));
		Возврат;
	КонецЕсли;
	
	Если ДопОтчет.Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.Отчет
		ИЛИ ДопОтчет.Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительныйОтчет Тогда
		
		ПараметрыОтчета.Имя = ПодключитьВнешнююОбработку(ДопОтчет);
		ПараметрыОтчета.Объект = ВнешниеОтчеты.Создать(ПараметрыОтчета.Имя);
		ПараметрыОтчета.Метаданные = ПараметрыОтчета.Объект.Метаданные();
		
		Результат = Истина;
		
	Иначе
		
		ПараметрыОтчета.Ошибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Элемент %1 не является дополнительным отчетом'"), 
			"'"+ Строка(ДопОтчет) +"'");
		
		Результат = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет список печатных форм из внешних источников.
//
// Параметры:
//  ВнешниеПечатныеФормы - СписокЗначений:
//                                         Значение      - Строка - идентификатор печатной формы;
//                                         Представление - Строка - название печатной формы.
//  ПолноеИмяОбъектаМетаданных - Строка - полное имя объекта метаданных, для которого требуется получить список печатных форм.
//
Процедура ПриПолученииСпискаВнешнихПечатныхФорм(ВнешниеПечатныеФормы, ПолноеИмяОбъектаМетаданных) Экспорт
	Если НЕ ПравоДоступа("Чтение", Метаданные.Справочники.ДополнительныеОтчетыИОбработки)
		Или Не ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеОтчетыИОбработки") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = НовыйЗапросПоДоступнымКомандам(Перечисления.ВидыДополнительныхОтчетовИОбработок.ПечатнаяФорма, ПолноеИмяОбъектаМетаданных);
	
	ТаблицаКоманд = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Команда Из ТаблицаКоманд Цикл
		Если Найти(Команда.Идентификатор, ",") = 0 Тогда // кроме "комплектов"
			ВнешниеПечатныеФормы.Добавить(Команда.Идентификатор, Команда.Представление);
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

// Возвращает ссылку на объект внешней печатной формы.
//
Процедура ПриПолученииВнешнейПечатнойФормы(Идентификатор, ПолноеИмяОбъектаМетаданных, ВнешняяПечатнаяФормаСсылка) Экспорт
	Если НЕ ПравоДоступа("Чтение", Метаданные.Справочники.ДополнительныеОтчетыИОбработки)
		Или Не ПолучитьФункциональнуюОпцию("ИспользоватьДополнительныеОтчетыИОбработки") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = НовыйЗапросПоДоступнымКомандам(Перечисления.ВидыДополнительныхОтчетовИОбработок.ПечатнаяФорма, ПолноеИмяОбъектаМетаданных);
	
	ТаблицаКоманд = Запрос.Выполнить().Выгрузить();
	
	Команда = ТаблицаКоманд.Найти(Идентификатор, "Идентификатор");
	Если Команда <> Неопределено Тогда 
		ВнешняяПечатнаяФормаСсылка = Команда.Ссылка;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Обновление информационной базы

// Процедура обновления записей о доступности дополнительных обработок
//
Процедура ОбновитьПользовательскиеНастройкиДоступаКОбработкам() Экспорт
	
	ПользователиСДопОбработками = ПолучитьМассивПользователейСДоступомКДополнительнымОбработкам();
	
	ТаблицаЗаписей = ПолучитьТаблицуЗаписей(ПользователиСДопОбработками);
	
	Для Каждого Пользователь Из ПользователиСДопОбработками Цикл
		НаборЗаписей = РегистрыСведений.ПользовательскиеНастройкиДоступаКОбработкам.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Пользователь.Установить(Пользователь);
		ЗаписиПоБыстромуДоступу = ТаблицаЗаписей.НайтиСтроки(Новый Структура("Пользователь,Доступно", Пользователь, Истина));
		Для Каждого ЗаписьБыстрогоДоступа Из ЗаписиПоБыстромуДоступу Цикл
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.ДополнительныйОтчетИлиОбработка = ЗаписьБыстрогоДоступа.Обработка;
			НоваяЗапись.ИдентификаторКоманды			= ЗаписьБыстрогоДоступа.Идентификатор;
			НоваяЗапись.Пользователь					= Пользователь;
			НоваяЗапись.Доступно						= Истина;
		КонецЦикла;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
	КонецЦикла;
	
КонецПроцедуры

// Заполнение реквизита "ИмяОбъекта". Данный реквизит отвечает за имя,
//   под которыми дополнительный отчет или обработка регистрируется в системе. 
// Для объектов с вариантом Публикации "Используется" дополнительно проводится 
//   контроль уникальности Имени объекта. В случае нахождения отчетов или обработок 
//   с неуникальными Именами объектов для всех элементов, кроме первого, 
//   вариант Публикации изменяется с "Используется" на "Режим отладки".
//
Процедура ЗаполнитьИменаОбъектов() Экспорт
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДопОтчеты.Ссылка,
	|	ДопОтчеты.ИмяОбъекта,
	|	ДопОтчеты.ХранилищеОбработки,
	|	ВЫБОР
	|		КОГДА ДопОтчеты.Вид В (&ВидыДопОтчетов)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЭтоОтчет,
	|	ВЫБОР
	|		КОГДА ДопОтчеты.Публикация = ЗНАЧЕНИЕ(Перечисление.ВариантыПубликацииДополнительныхОтчетовИОбработок.Используется)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Публикуется,
	|	ВЫБОР
	|		КОГДА ДопОтчеты.ИмяОбъекта = """"
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ТребуетсяЗаполнитьИмяОбъекта
	|ИЗ
	|	Справочник.ДополнительныеОтчетыИОбработки КАК ДопОтчеты
	|ГДЕ
	|	ДопОтчеты.ЭтоГруппа = ЛОЖЬ
	|	И НЕ ДопОтчеты.ХранилищеОбработки ЕСТЬ NULL ";
	
	ВидыДопОтчетов = Новый Массив;
	ВидыДопОтчетов.Добавить(Перечисления.ВидыДополнительныхОтчетовИОбработок.Отчет);
	ВидыДопОтчетов.Добавить(Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительныйОтчет);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидыДопОтчетов", ВидыДопОтчетов);
	Запрос.Текст = ТекстЗапроса;
	
	ВсеДопОтчеты = Запрос.Выполнить().Выгрузить();
	
	ПоискДублей = Новый Структура("ИмяОбъекта, ЭтоОтчет, Публикуется");
	ПоискДублей.Публикуется = Истина;
	
	// Дополнительные отчеты и обработки, для которых необходимо заполнить имя объекта
	ДопОтчетыДляЗаполнения = ВсеДопОтчеты.НайтиСтроки(Новый Структура("ТребуетсяЗаполнитьИмяОбъекта", Истина));
	Для Каждого СтрокаТаблицы Из ДопОтчетыДляЗаполнения Цикл
		
		// Помещение двоичных данных отчета (обработки) во временное хранилище
		АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(СтрокаТаблицы.ХранилищеОбработки.Получить());
		
		// Определение менеджера
		Менеджер = ?(СтрокаТаблицы.ЭтоОтчет, ВнешниеОтчеты, ВнешниеОбработки);
		
		// Получение экземпляра объекта
		Объект = СтрокаТаблицы.Ссылка.ПолучитьОбъект();
		
		// Установка имени объекта
		Объект.ИмяОбъекта = СокрЛП(Менеджер.Подключить(АдресВоВременномХранилище, , Истина));
		
		// Если имя отчета (обработки) уже используется другим опубликованным отчетом (обработкой),
		// то данный объект является дублем - необходимо сменить его вариант публикации на режим отладки (или отключить).
		Если СтрокаТаблицы.Публикуется Тогда
			ПоискДублей.ИмяОбъекта = Объект.ИмяОбъекта;
			ПоискДублей.ЭтоОтчет   = СтрокаТаблицы.ЭтоОтчет;
			Если ВсеДопОтчеты.НайтиСтроки(ПоискДублей).Количество() > 0 Тогда
				Объект.Публикация = ДополнительныеОтчетыИОбработкиПовтИсп.ВидПубликацииДляКонфликтующихОбработок();
			КонецЕсли;
		КонецЕсли;
		
		// Регистрация использованного имени объекта в таблице для контроля дублей
		СтрокаТаблицы.ИмяОбъекта = Объект.ИмяОбъекта;
		
		// Запись объекта
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
		
	КонецЦикла;
	
КонецПроцедуры

// Замена имен рабочих мест на идентификаторы разделов.
// 
// Параметры:
//   ИменаРазделовИИдентификаторы (Соответствие) 
//       |- Ключ (Строка) Имя рабочего места (команды), которое ранее указывалось в процедуре
//                        ПолучитьОбщиеКомандыДополнительныхОбработок или ПолучитьОбщиеКомандыДополнительныхОтчетов
//                        общего модуля ДополнительныеОтчетыИОбработкиПереопределяемый
//       |- Значение (ОбъектМетаданных) Раздел командного интерфейса (подсистема первого уровня), 
//                                      в котором размещается данное рабочее место (команда)
// 
Процедура ЗаменитьИменаРазделовНаИдентификаторы(ИменаРазделовИИдентификаторы) Экспорт
	ИдентификаторРабочегоСтола = ДополнительныеОтчетыИОбработкиКлиентСервер.ИдентификаторРабочегоСтола();
	
	МассивИменРазделов = Новый Массив;
	Для Каждого КлючИЗначение Из ИменаРазделовИИдентификаторы Цикл
		Если КлючИЗначение.Значение = ИдентификаторРабочегоСтола Тогда
			ИменаРазделовИИдентификаторы.Вставить(КлючИЗначение.Ключ, Справочники.ИдентификаторыОбъектовМетаданных.ПустаяСсылка());
		Иначе
			ИменаРазделовИИдентификаторы.Вставить(КлючИЗначение.Ключ, ОбщегоНазначения.ИдентификаторОбъектаМетаданных(КлючИЗначение.Значение));
		КонецЕсли;
		МассивИменРазделов.Добавить(КлючИЗначение.Ключ);
	КонецЦикла; 
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТЧРазделы.Ссылка
	|ИЗ
	|	Справочник.ДополнительныеОтчетыИОбработки.Разделы КАК ТЧРазделы
	|ГДЕ
	|	ТЧРазделы.УдалитьИмяРаздела В (&МассивИменРазделов)";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МассивИменРазделов", МассивИменРазделов);
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		// Получение экземпляра объекта
		Объект = Выборка.Ссылка.ПолучитьОбъект();
		
		Для Каждого СтрокаРаздел Из Объект.Разделы Цикл
			ИОМ = ИменаРазделовИИдентификаторы.Получить(СтрокаРаздел.УдалитьИмяРаздела);
			Если ИОМ = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			СтрокаРаздел.Раздел = ИОМ;
			СтрокаРаздел.УдалитьИмяРаздела = "";
		КонецЦикла; 
		
		// Запись объекта
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
	КонецЦикла;
КонецПроцедуры

// Замена имен рабочих мест на идентификаторы разделов.
// 
// Параметры:
//   ИменаРазделовИИдентификаторы (Соответствие) 
//       |- Ключ (Строка) Имя рабочего места (команды), которое ранее указывалось в процедуре
//                        ПолучитьОбщиеКомандыДополнительныхОбработок или ПолучитьОбщиеКомандыДополнительныхОтчетов
//                        общего модуля ДополнительныеОтчетыИОбработкиПереопределяемый
//       |- Значение (ОбъектМетаданных) Раздел командного интерфейса (подсистема первого уровня), 
//                                      в котором размещается данное рабочее место (команда)
// 
Процедура ЗаменитьИменаОбъектовМетаданныхНаСсылки() Экспорт
	
	НачатьТранзакцию();
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТаблицаНазначение.Ссылка КАК СправочникСсылка,
	|	ТаблицаНазначение.НомерСтроки КАК НомерСтроки,
	|	СправочникИОМ.Ссылка КАК ОбъектНазначения
	|ИЗ
	|	Справочник.ДополнительныеОтчетыИОбработки.Назначение КАК ТаблицаНазначение
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИдентификаторыОбъектовМетаданных КАК СправочникИОМ
	|		ПО ТаблицаНазначение.УдалитьПолноеИмяОбъектаМетаданных = СправочникИОМ.ПолноеИмя
	|ИТОГИ ПО
	|	СправочникСсылка";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	ВыборкаСсылок = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаСсылок.Следующий() Цикл
		СправочникОбъект = ВыборкаСсылок.СправочникСсылка.ПолучитьОбъект();
		МассивСтрокДляУдаления = Новый Массив;
		ВыборкаСтрок = ВыборкаСсылок.Выбрать();
		Пока ВыборкаСтрок.Следующий() Цикл
			СтрокаТабличнойЧасти = СправочникОбъект.Назначение.Получить(ВыборкаСтрок.НомерСтроки - 1);
			СтрокаТабличнойЧасти.ОбъектНазначения = ВыборкаСтрок.ОбъектНазначения;
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ОбъектНазначения) Тогда
				СтрокаТабличнойЧасти.УдалитьПолноеИмяОбъектаМетаданных = "";
			Иначе
				МассивСтрокДляУдаления.Добавить(СтрокаТабличнойЧасти);
			КонецЕсли;
		КонецЦикла;
		Для Каждого СтрокаТабличнойЧасти Из МассивСтрокДляУдаления Цикл
			СправочникОбъект.Назначение.Удалить(СтрокаТабличнойЧасти);
		КонецЦикла;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(СправочникОбъект);
	КонецЦикла;
	
	РегистрыСведений.НазначениеДополнительныхОбработок.Обновить(Истина);
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

// Включение функциональной опции ИспользоватьДополнительныеОтчетыИОбработки.
//   Используется только для локального режима.
//
Процедура ВключитьФункциональнуюОпцию() Экспорт
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	Константы.ИспользоватьДополнительныеОтчетыИОбработки.Установить(Истина);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Регламентные задания

// Обработчик экземпляра регламентного задания ЗапускОбработок.
// Запускает обработчик глобальной обработки по регламентному заданию,
// с указанным идентификатором команды.
//
// Параметры
// ВнешняяОбработка		- СправочникСсылка.ДополнительныеОтчетыИОбработки
// ИдентификаторКоманды - Строка - идентификатор выполняемой команды
//
Процедура ВыполнитьОбработкуПоРегламентномуЗаданию(ВнешняяОбработка, ИдентификаторКоманды) Экспорт
	
	Если ПустаяСтрока(ИмяПользователя()) Тогда
		УстановитьПривилегированныйРежим(Истина);
	КонецЕсли;
	
	// Запись журнала регистрации
	ЗаписатьИнформацию(ВнешняяОбработка, НСтр("ru = 'Команда %1: Запуск.'"), ИдентификаторКоманды);
	
	// Выполнение команды
	Попытка
		ВыполнитьКоманду(Новый Структура("ДополнительнаяОбработкаСсылка, ИдентификаторКоманды", ВнешняяОбработка, ИдентификаторКоманды), Неопределено);
	Исключение
		ЗаписатьОшибку(
			ВнешняяОбработка,
			НСтр("ru = 'Команда %1: Ошибка выполнения:%2'"),
			ИдентификаторКоманды,
			Символы.ПС + ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
	// Запись журнала регистрации
	ЗаписатьИнформацию(ВнешняяОбработка, НСтр("ru = 'Команда %1: Завершение.'"), ИдентификаторКоманды);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Условные вызовы в друге подсистемы

// Формирует ссылку варианта дополнительного отчета.
// 
// Параметры:
//   Отчет (СправочникСсылка.ДополнительныеОтчетыИОбработки)
//   КлючВарианта (Строка)
//   Результат (*) См. описание вызываемых процедур и функций.
// 
Процедура ПриОпределенииСсылкиВариантаДополнительногоОтчета(Отчет, КлючВарианта, Результат) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.ВариантыОтчетов") Тогда
		МодульВариантыОтчетов = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ВариантыОтчетов");
		Результат = МодульВариантыОтчетов.ПолучитьСсылку(Отчет, КлючВарианта);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Экспортные служебные процедуры и функции

// Формирует запрос для получения таблицы команд дополнительных отчетов или обработок
// 
// Параметры:
//   ВидОбработок (ПеречислениеСсылка.ВидыДополнительныхОтчетовИОбработок) Вид обработки
//   ПолноеИмяИлиСсылкаРодителяИлиРаздела (...) Справочник или документ для назначаемых обработок, подсистема для глобальных обработок
//       |- (Строка) Полное имя объекта метаданных.
//       |- (СправочникСсылка.ИдентификаторыОбъектовМетаданных) Ссылка объекта метаданных.
//   ЭтоФормаОбъекта (Булево) Необязательный. Истина - для формы объекта, Ложь - для формы списка.
// 
// Возвращаемое значение: 
//   (ТаблицаЗначений) 
//       |- Ссылка               (СправочникСсылка.ДополнительныеОтчетыИОбработки)
//       |- Идентификатор        (Строка) Идентификатор команды, как он задан разработчиком дополнительного объекта.
//       |- ВариантЗапуска       (ПеречислениеСсылка.СпособыВызоваДополнительныхОбработок) Способ вызова команды дополнительного объекта.
//       |- Представление        (Строка) Представление команды для конечного пользователя.
//       |- ПоказыватьОповещение (Булево) Показывать оповещение пользователю после выполнения
//       |- Модификатор          (Строка) Модификатор команды
//
Функция НовыйЗапросПоДоступнымКомандам(ВидОбработок, ПолноеИмяИлиСсылкаРодителяИлиРаздела, ЭтоФормаОбъекта = Неопределено) Экспорт
	ЭтоГлобальныеОбработки = (
		ВидОбработок = Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительныйОтчет
		ИЛИ ВидОбработок = Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительнаяОбработка);
	
	Если ТипЗнч(ПолноеИмяИлиСсылкаРодителяИлиРаздела) = Тип("СправочникСсылка.ИдентификаторыОбъектовМетаданных") Тогда
		СсылкаРодителяИлиРаздела = ПолноеИмяИлиСсылкаРодителяИлиРаздела;
	Иначе
		СсылкаРодителяИлиРаздела = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ПолноеИмяИлиСсылкаРодителяИлиРаздела);
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	// Запросы принципиально отличаются для глобальных обработок и назначаемых.
	Если ЭтоГлобальныеОбработки Тогда
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	БыстрыйДоступ.ДополнительныйОтчетИлиОбработка КАК Ссылка,
		|	БыстрыйДоступ.ИдентификаторКоманды
		|ПОМЕСТИТЬ втБыстрыйДоступ
		|ИЗ
		|	РегистрСведений.ПользовательскиеНастройкиДоступаКОбработкам КАК БыстрыйДоступ
		|ГДЕ
		|	БыстрыйДоступ.Пользователь = &ТекущийПользователь
		|	И БыстрыйДоступ.Доступно = ИСТИНА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаБыстрыйДоступ.Ссылка,
		|	ТаблицаБыстрыйДоступ.ИдентификаторКоманды
		|ПОМЕСТИТЬ втСсылкиИКоманды
		|ИЗ
		|	втБыстрыйДоступ КАК ТаблицаБыстрыйДоступ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДополнительныеОтчетыИОбработки КАК ДопОтчетыИОбработки
		|		ПО ТаблицаБыстрыйДоступ.Ссылка = ДопОтчетыИОбработки.Ссылка
		|			И (ДопОтчетыИОбработки.ПометкаУдаления = ЛОЖЬ)
		|			И (ДопОтчетыИОбработки.Вид = &Вид)
		|			И (ДопОтчетыИОбработки.Публикация = &Публикация)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДополнительныеОтчетыИОбработки.Разделы КАК ТаблицаРазделы
		|		ПО ТаблицаБыстрыйДоступ.Ссылка = ТаблицаРазделы.Ссылка
		|			И (ТаблицаРазделы.Раздел = &СсылкаРаздела)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаКоманды.Ссылка,
		|	ТаблицаКоманды.Идентификатор,
		|	ТаблицаКоманды.ВариантЗапуска,
		|	ТаблицаКоманды.Представление КАК Представление,
		|	ТаблицаКоманды.ПоказыватьОповещение,
		|	ТаблицаКоманды.Модификатор
		|ИЗ
		|	втСсылкиИКоманды КАК ТаблицаСсылкиИКоманды
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДополнительныеОтчетыИОбработки.Команды КАК ТаблицаКоманды
		|		ПО ТаблицаСсылкиИКоманды.Ссылка = ТаблицаКоманды.Ссылка
		|			И ТаблицаСсылкиИКоманды.ИдентификаторКоманды = ТаблицаКоманды.Идентификатор
		|			И (ТаблицаКоманды.Скрыть = ЛОЖЬ)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Представление";
		
		Запрос.УстановитьПараметр("СсылкаРаздела", СсылкаРодителяИлиРаздела);
		
	Иначе
		
		ТекстЗапроса =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТаблицаНазначение.Ссылка
		|ПОМЕСТИТЬ втСсылки
		|ИЗ
		|	Справочник.ДополнительныеОтчетыИОбработки.Назначение КАК ТаблицаНазначение
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДополнительныеОтчетыИОбработки КАК ДопОтчетыИОбработки
		|		ПО (ТаблицаНазначение.ОбъектНазначения = &СсылкаРодителя)
		|			И ТаблицаНазначение.Ссылка = ДопОтчетыИОбработки.Ссылка
		|			И (ДопОтчетыИОбработки.ПометкаУдаления = ЛОЖЬ)
		|			И (ДопОтчетыИОбработки.Вид = &Вид)
		|			И (ДопОтчетыИОбработки.Публикация = &Публикация)
		|			И (ДопОтчетыИОбработки.ИспользоватьДляФормыСписка = ИСТИНА)
		|			И (ДопОтчетыИОбработки.ИспользоватьДляФормыОбъекта = ИСТИНА)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаКоманды.Ссылка,
		|	ТаблицаКоманды.Идентификатор,
		|	ТаблицаКоманды.ВариантЗапуска,
		|	ТаблицаКоманды.Представление КАК Представление,
		|	ТаблицаКоманды.ПоказыватьОповещение,
		|	ТаблицаКоманды.Модификатор
		|ИЗ
		|	втСсылки КАК ТаблицаСсылки
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДополнительныеОтчетыИОбработки.Команды КАК ТаблицаКоманды
		|		ПО ТаблицаСсылки.Ссылка = ТаблицаКоманды.Ссылка
		|			И (ТаблицаКоманды.Скрыть = ЛОЖЬ)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Представление";
		
		Запрос.УстановитьПараметр("СсылкаРодителя", СсылкаРодителяИлиРаздела);
		
		// Отключение отборов по форме списка и объекта
		Если ЭтоФормаОбъекта <> Истина Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И (ДопОтчетыИОбработки.ИспользоватьДляФормыОбъекта = ИСТИНА)", "");
		КонецЕсли;
		Если ЭтоФормаОбъекта <> Ложь Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И (ДопОтчетыИОбработки.ИспользоватьДляФормыСписка = ИСТИНА)", "");
		КонецЕсли;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Вид", ВидОбработок);
	Если Пользователи.РолиДоступны("ДобавлениеИзменениеДополнительныхОтчетовИОбработок") Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Публикация = &Публикация", "Публикация <> &Публикация");
		Запрос.УстановитьПараметр("Публикация", Перечисления.ВариантыПубликацииДополнительныхОтчетовИОбработок.Отключена);
	Иначе
		Запрос.УстановитьПараметр("Публикация", Перечисления.ВариантыПубликацииДополнительныхОтчетовИОбработок.Используется);
	КонецЕсли;
	Запрос.УстановитьПараметр("ТекущийПользователь", Пользователи.ТекущийПользователь());
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос;
КонецФункции

// Функция возвращает таблицу значений со списком объектов метаданных,
// к которым может быть применена обработка переданного вида.
// Список объектов метаданных берется из общий команд, соответствующих
// виду обработки. Для глобальных обработок возвращается пустой набор.
// Параметры
// Вид - Перечисление.ВидыДополнительныхОтчетовИОбработок - вид внешней обработки
// Возвращаемое значение
// ТаблицаЗначений с колонками
//		ПолноеИмяОбъектаМетаданных - строка - полное имя объекта метаданных, например "Справочник.Валюты"
//		Класс	  - строка - класс метаданных, например "Справочник"
//		Объект	  - строка - имя объекта метаданных, например "Валюты"
//
Функция НазначаемыеОбъектыМетаданныхПоВидуВнешнегоОбъекта(Вид) Экспорт
	Назначение = Новый ТаблицаЗначений;
	Назначение.Колонки.Добавить("ОбъектМетаданных");
	Назначение.Колонки.Добавить("ПолноеИмяОбъектаМетаданных", Новый ОписаниеТипов("Строка"));
	Назначение.Колонки.Добавить("ОбъектНазначения", Новый ОписаниеТипов("СправочникСсылка.ИдентификаторыОбъектовМетаданных"));
	Назначение.Колонки.Добавить("ВидОбъектаМетаданных", Новый ОписаниеТипов("Строка"));
	Назначение.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));
	Назначение.Колонки.Добавить("ПолноеПредставление", Новый ОписаниеТипов("Строка"));
	
	МассивТиповИлиМетаданных = Новый Массив;
	
	Если Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.ЗаполнениеОбъекта Тогда
		
		МассивТиповИлиМетаданных = Метаданные.ОбщиеКоманды.ДополнительныеОтчетыИОбработкиЗаполнениеОбъекта.ТипПараметраКоманды.Типы();
		
	ИначеЕсли Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.Отчет Тогда
		
		МассивТиповИлиМетаданных = Метаданные.ОбщиеКоманды.ДополнительныеОтчетыИОбработкиОтчеты.ТипПараметраКоманды.Типы();
		
	ИначеЕсли Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.ПечатнаяФорма Тогда
		
		МассивТиповИлиМетаданных = Метаданные.ОбщиеКоманды.ДополнительныеОтчетыИОбработкиПечатныеФормы.ТипПараметраКоманды.Типы();
		
	ИначеЕсли Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.СозданиеСвязанныхОбъектов Тогда
		
		МассивТиповИлиМетаданных = Метаданные.ОбщиеКоманды.ДополнительныеОтчетыИОбработкиСозданиеСвязанныхОбъектов.ТипПараметраКоманды.Типы();
		
	ИначеЕсли Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительнаяОбработка Тогда
		
		ДополнительныеОтчетыИОбработкиПереопределяемый.ОпределитьРазделыСДополнительнымиОбработками(МассивТиповИлиМетаданных);
		
	ИначеЕсли Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительныйОтчет Тогда
		
		ДополнительныеОтчетыИОбработкиПереопределяемый.ОпределитьРазделыСДополнительнымиОтчетами(МассивТиповИлиМетаданных);
		
	Иначе
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Для Каждого ТипИлиМетаданные Из МассивТиповИлиМетаданных Цикл
		Если ТипЗнч(ТипИлиМетаданные) = Тип("Тип") Тогда
			ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипИлиМетаданные);
			Если ОбъектМетаданных = Неопределено Тогда
				Продолжить;
			КонецЕсли;
		Иначе
			ОбъектМетаданных = ТипИлиМетаданные;
		КонецЕсли;
		
		НовоеНазначение = Назначение.Добавить();
		
		Если ОбъектМетаданных = ДополнительныеОтчетыИОбработкиКлиентСервер.ИдентификаторРабочегоСтола() Тогда
			НовоеНазначение.ПолноеИмяОбъектаМетаданных = ДополнительныеОтчетыИОбработкиКлиентСервер.ИдентификаторРабочегоСтола();
			НовоеНазначение.ОбъектНазначения = Справочники.ИдентификаторыОбъектовМетаданных.ПустаяСсылка();
			НовоеНазначение.ВидОбъектаМетаданных = "Подсистема";
			НовоеНазначение.Представление = НСтр("ru = 'Рабочий стол'");
		Иначе
			НовоеНазначение.ПолноеИмяОбъектаМетаданных = ОбъектМетаданных.ПолноеИмя();
			НовоеНазначение.ОбъектНазначения = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ОбъектМетаданных);
			НовоеНазначение.ВидОбъектаМетаданных = Лев(НовоеНазначение.ПолноеИмяОбъектаМетаданных, Найти(НовоеНазначение.ПолноеИмяОбъектаМетаданных, ".") - 1);
			НовоеНазначение.Представление = ОбъектМетаданных.Представление();
		КонецЕсли;
		
		НовоеНазначение.ПолноеПредставление = НовоеНазначение.Представление + " (" + НовоеНазначение.ВидОбъектаМетаданных + ")";
	КонецЦикла;
	
	Возврат Назначение;
КонецФункции

// Проверяет, что обработка относится к категории глобальных.
// Параметры
// Вид - ПеречислениеСсылка.ВидыДополнительныхОтчетовИОбработок - вид обработки
// Возвращаемое значение
//	Истина - обработка относится к категории глобальных
//	Ложь   - обработка относится к категории назначаемых
//
Функция ПроверитьГлобальнаяОбработка(Вид) Экспорт
	
	Возврат Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительнаяОбработка
		ИЛИ Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительныйОтчет;
	
КонецФункции

// Возвращает вид обработки по строковому представлению
// Параметры
// СтроковоеПредставление - Строка - строковое представление вида обработки
// Возвращаемое значение
// ПеречислениеСсылка.ВидыДополнительныхОтчетовИОбработок - вид обработки
//
Функция ПолучитьВидОбработкиПоСтроковомуПредставлениюВида(СтроковоеПредставление) Экспорт
	
	Если СтроковоеПредставление = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиЗаполнениеОбъекта() Тогда
		Возврат Перечисления.ВидыДополнительныхОтчетовИОбработок.ЗаполнениеОбъекта;
	ИначеЕсли СтроковоеПредставление = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиОтчет() Тогда
		Возврат Перечисления.ВидыДополнительныхОтчетовИОбработок.Отчет;
	ИначеЕсли СтроковоеПредставление = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиПечатнаяФорма() Тогда
		Возврат Перечисления.ВидыДополнительныхОтчетовИОбработок.ПечатнаяФорма;
	ИначеЕсли СтроковоеПредставление = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиСозданиеСвязанныхОбъектов() Тогда
		Возврат Перечисления.ВидыДополнительныхОтчетовИОбработок.СозданиеСвязанныхОбъектов;
	ИначеЕсли СтроковоеПредставление = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка() Тогда
		Возврат Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительнаяОбработка;
	ИначеЕсли СтроковоеПредставление = ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительныйОтчет() Тогда
		Возврат Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительныйОтчет;
	КонецЕсли;
	
КонецФункции

// Преобразует ссылку вида в строковую константу.
//
Функция ВидВСтроку(СсылкаВида) Экспорт
	
	Если СсылкаВида = Перечисления.ВидыДополнительныхОтчетовИОбработок.ЗаполнениеОбъекта Тогда
		Возврат ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиЗаполнениеОбъекта();
		
	ИначеЕсли СсылкаВида = Перечисления.ВидыДополнительныхОтчетовИОбработок.Отчет Тогда
		Возврат ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиОтчет();
		
	ИначеЕсли СсылкаВида = Перечисления.ВидыДополнительныхОтчетовИОбработок.ПечатнаяФорма Тогда
		Возврат ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиПечатнаяФорма();
		
	ИначеЕсли СсылкаВида = Перечисления.ВидыДополнительныхОтчетовИОбработок.СозданиеСвязанныхОбъектов Тогда
		Возврат ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиСозданиеСвязанныхОбъектов();
		
	ИначеЕсли СсылкаВида = Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительнаяОбработка Тогда
		Возврат ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительнаяОбработка();
		
	ИначеЕсли СсылкаВида = Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительныйОтчет Тогда
		Возврат ДополнительныеОтчетыИОбработкиКлиентСервер.ВидОбработкиДополнительныйОтчет();
		
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

// Возвращает имя рабочего места команды
//
Функция ПредставлениеРаздела(Раздел) Экспорт
	Если Раздел = ДополнительныеОтчетыИОбработкиКлиентСервер.ИдентификаторРабочегоСтола()
		ИЛИ Раздел = Справочники.ИдентификаторыОбъектовМетаданных.ПустаяСсылка() Тогда
		Возврат НСтр("ru = 'Рабочий стол'");
	КонецЕсли;
	
	Если ТипЗнч(Раздел) = Тип("СправочникСсылка.ИдентификаторыОбъектовМетаданных") Тогда
		ПредставлениеРаздела = Раздел.Синоним;
	ИначеЕсли ТипЗнч(Раздел) = Тип("ОбъектМетаданных") Тогда
		ПредставлениеРаздела = Раздел.Представление();
	Иначе
		ПредставлениеРаздела = Метаданные.Подсистемы.Найти(Раздел).Представление();
	КонецЕсли;
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru = 'Раздел ""%1""'"), 
		ПредставлениеРаздела);
КонецФункции

// Функция для добавления команд дополнительных обработок в список "своих"
//
Процедура ДобавитьКомандыВСписокСвоих(МассивКоманд) Экспорт
	
	Для Каждого ЭлементСтрока Из МассивКоманд Цикл
		Запись = РегистрыСведений.ПользовательскиеНастройкиДоступаКОбработкам.СоздатьМенеджерЗаписи();
		
		Запись.ДополнительныйОтчетИлиОбработка  = ЭлементСтрока.Обработка;
		Запись.ИдентификаторКоманды             = ЭлементСтрока.Идентификатор;
		Запись.Пользователь                     = Пользователи.ТекущийПользователь();
		Запись.Доступно                         = Истина;
		
		Запись.Записать(Истина);
	КонецЦикла;
	
КонецПроцедуры

// Функция для исключения команд дополнительных обработок из списока "своих"
//
Процедура УдалитьКомандыИзСпискаСвоих(МассивКоманд) Экспорт
	
	Для Каждого ЭлементСтрока Из МассивКоманд Цикл
		
		Запись = РегистрыСведений.ПользовательскиеНастройкиДоступаКОбработкам.СоздатьМенеджерЗаписи();
		
		Запись.ДополнительныйОтчетИлиОбработка  = ЭлементСтрока.Обработка;
		Запись.ИдентификаторКоманды             = ЭлементСтрока.Идентификатор;
		Запись.Пользователь                     = Пользователи.ТекущийПользователь();
		
		Запись.Прочитать();
		
		Запись.Удалить();
		
	КонецЦикла;
	
КонецПроцедуры

// Проверяет интегрирована ли конфигурация с подсистемой хранилищем вариантов отчетов
//
Функция ИспользуетсяИнтеграцияСВариантамиОтчетов() Экспорт
	Возврат Метаданные.ХранилищаНастроек.Найти("ХранилищеВариантовОтчетов") <> Неопределено;
КонецФункции

// Проверяет наличие права добавления дополнительных отчетов и обработок.
//
Функция ПравоДобавления(Знач ДополнительнаяОбработка = Неопределено) Экспорт
	
	Результат = Ложь;
	СтандартнаяОбработка = Истина;
	
	ОбработчикиУсловныхВызовов = ДополнительныеОтчетыИОбработкиПовтИсп.ОбработчикиИнтеграции();
	Для Каждого ОбработчикУсловныхВызовов Из ОбработчикиУсловныхВызовов Цикл
		
		Модуль = ОбщегоНазначенияКлиентСервер.ОбщийМодуль(ОбработчикУсловныхВызовов);
		Модуль.ПриПроверкеПраваДобавления(ДополнительнаяОбработка, Результат, СтандартнаяОбработка);
		
		Если Не СтандартнаяОбработка Тогда
			Возврат Результат;
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтандартнаяОбработка Тогда
		
		Если ОбщегоНазначенияПовтИсп.РазделениеВключено() И ОбщегоНазначения.ИспользованиеРазделителяСеанса() Тогда
			Результат = Пользователи.ЭтоПолноправныйПользователь(, Истина);
		Иначе
			Результат = Пользователи.РолиДоступны("ДобавлениеИзменениеДополнительныхОтчетовИОбработок, ПолныеПрава");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Получает список настроек дополнительных отчетов и обработок у переданного пользователя справочника
//
// Параметры:
//  ПользовательСсылка     - СправочникСсылка.Пользователи - пользователь, у которого нужно получить настройки.
//  Настройки              - Структура - прочие пользовательские настройки.
//     |-НазваниеНастройки - Строка - название, которое будет отображаться в дереве настроек обработки.
//     |-КартинкаНастройки - Картинка - картинка, которая будет отображаться в дереве обработки.
//     |-СписокНастроек    - СписокЗначений - список полученных настроек
//
Процедура ПолучитьНастройкиДополнительныхОтчетовИОбработок(ПользовательСсылка, Настройки) Экспорт
	
	// Название строки настроек, отображаемое в дереве настроек обработки
	НазваниеНастройки = НСтр("ru='Настройки быстрого доступа к дополнительным отчетам и обработкам'");
	
	// Картинка строки настроек
	КартинкаНастройки = "";
	
	// Список дополнительных отчетов и обработок, находящихся в быстром доступе у пользователя
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПользовательскиеНастройкиДоступаКОбработкам.ДополнительныйОтчетИлиОбработка КАК Объект,
	|	ПользовательскиеНастройкиДоступаКОбработкам.ИдентификаторКоманды КАК Идентификатор,
	|	ПользовательскиеНастройкиДоступаКОбработкам.Пользователь КАК Пользователь
	|ИЗ
	|	РегистрСведений.ПользовательскиеНастройкиДоступаКОбработкам КАК ПользовательскиеНастройкиДоступаКОбработкам
	|ГДЕ
	|	Пользователь = &Пользователь";
	
	Запрос.Параметры.Вставить("Пользователь", ПользовательСсылка);
	
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	
	Настройки = Новый Структура;
	Настройки.Вставить("НазваниеНастройки", НазваниеНастройки);
	Настройки.Вставить("КартинкаНастройки", КартинкаНастройки);
	Настройки.Вставить("СписокНастроек", РезультатЗапроса);
	
КонецПроцедуры

// Сохраняет команды дополнительных отчетов и обработок переданным пользователям справочника
//
// Параметры:
//  Настройки              - СписокЗначений - список ключей сохраняемых настроек
//  ПользователиПолучатели - Массив - элемент массива - СправочникСсылка.Пользователи - пользователи,
//                           которым нужно скопировать настройки
//
Процедура ДобавитьКомандыВСписокБыстрогоДоступа(Настройки, ПользователиПолучатели) Экспорт
	
	Для Каждого ПользовательПриемник Из ПользователиПолучатели Цикл
		
		Для Каждого ЭлементСтрока Из Настройки Цикл
			Запись = РегистрыСведений.ПользовательскиеНастройкиДоступаКОбработкам.СоздатьМенеджерЗаписи();
			
			Запись.ДополнительныйОтчетИлиОбработка  = ЭлементСтрока.Значение;
			Запись.ИдентификаторКоманды             = ЭлементСтрока.Представление;
			Запись.Пользователь                     = ПользовательПриемник;
			Запись.Доступно                         = Истина;
			
			Запись.Записать(Истина);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

// Очищает команды дополнительных отчетов и обработок переданному пользователю справочника
//
// Параметры:
//  СписокКлючей           - СписокЗначений - список ключей очищаемых настроек
//  ОчищаемыйПользователь  - СправочникСсылка.Пользователи - пользователь, у
//                           которого нужно очистить настройки
//
Процедура УдалитьКомандыИзСпискаБыстрогоДоступа(СписокКлючей, ОчищаемыйПользователь) Экспорт
	
	Для Каждого ЭлементСтрока Из СписокКлючей Цикл
		
		Запись = РегистрыСведений.ПользовательскиеНастройкиДоступаКОбработкам.СоздатьМенеджерЗаписи();
		
		Запись.ДополнительныйОтчетИлиОбработка  = ЭлементСтрока.Значение;
		Запись.ИдентификаторКоманды             = ЭлементСтрока.Представление;
		Запись.Пользователь                     = ОчищаемыйПользователь;
		
		Запись.Прочитать();
		
		Запись.Удалить();
		
	КонецЦикла;
	
КонецПроцедуры

// Функция возвращает признак возможности выгрузки уже существующей в ИБ дополнительной обработки
//  в файл
//
// Параметры:
//  Обработка - СправочникСсылка.ДополнительныеОтчетыИОбработки.
//
// Возвращаемое значение: булево.
//
Функция ВозможнаВыгрузкаОбработкиВФайл(Знач Обработка) Экспорт
	
	Результат = Ложь;
	СтандартнаяОбработка = Истина;
	
	ОбработчикиУсловныхВызовов = ДополнительныеОтчетыИОбработкиПовтИсп.ОбработчикиИнтеграции();
	Для Каждого ОбработчикУсловныхВызовов Из ОбработчикиУсловныхВызовов Цикл
		
		Модуль = ОбщегоНазначенияКлиентСервер.ОбщийМодуль(ОбработчикУсловныхВызовов);
		Модуль.ПриПроверкеВозможностиЗагрузкиОбработкиИзФайла(Обработка, Результат, СтандартнаяОбработка);
		
		Если Не СтандартнаяОбработка Тогда
			Возврат Результат;
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтандартнаяОбработка Тогда
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Функция возвращает признак возможности загрузки уже существующей в ИБ дополнительной обработки
//  из файла
//
// Параметры:
//  Обработка - СправочникСсылка.ДополнительныеОтчетыИОбработки.
//
// Возвращаемое значение: булево.
//
Функция ВозможнаЗагрузкаОбработкиИзФайла(Знач Обработка) Экспорт
	
	Результат = Ложь;
	СтандартнаяОбработка = Истина;
	
	ОбработчикиУсловныхВызовов = ДополнительныеОтчетыИОбработкиПовтИсп.ОбработчикиИнтеграции();
	Для Каждого ОбработчикУсловныхВызовов Из ОбработчикиУсловныхВызовов Цикл
		
		Модуль = ОбщегоНазначенияКлиентСервер.ОбщийМодуль(ОбработчикУсловныхВызовов);
		Модуль.ПриПроверкеВозможностиВыгрузкиОбработкиВФайл(Обработка, Результат, СтандартнаяОбработка);
		
		Если Не СтандартнаяОбработка Тогда
			Возврат Результат;
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтандартнаяОбработка Тогда
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Функция возвращает флаг отображения пользователю расширенной информации о дополнительном
// отчете или обработке.
//
// Параметры:
//  Обработка - СправочникСсылка.ДополнительныеОтчетыИОбработки,
//
// Возвращаемое значение: Булево.
//
Функция ОтображатьРасширеннуюИнформацию(Знач Обработка) Экспорт
	
	Результат = Ложь;
	СтандартнаяОбработка = Истина;
	
	ОбработчикиУсловныхВызовов = ДополнительныеОтчетыИОбработкиПовтИсп.ОбработчикиИнтеграции();
	Для Каждого ОбработчикУсловныхВызовов Из ОбработчикиУсловныхВызовов Цикл
		
		Модуль = ОбщегоНазначенияКлиентСервер.ОбщийМодуль(ОбработчикУсловныхВызовов);
		Модуль.ПриПроверкеНеобходимостиОтображенияРасширеннойИнформации(Обработка, Результат, СтандартнаяОбработка);
		
		Если Не СтандартнаяОбработка Тогда
			Возврат Результат;
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтандартнаяОбработка Тогда
		Возврат Истина;
	КонецЕсли;
	
КонецФункции

// Возвращает виды публикации дополнительных отчетов и обработок, недоступные для использования
// в текущей модели информационной базы.
//
Функция НедоступныеВидыПубликации() Экспорт
	
	Результат = Новый Массив;
	
	ОбработчикиУсловныхВызовов = ДополнительныеОтчетыИОбработкиПовтИсп.ОбработчикиИнтеграции();
	Для Каждого ОбработчикУсловныхВызовов Из ОбработчикиУсловныхВызовов Цикл
		
		Модуль = ОбщегоНазначенияКлиентСервер.ОбщийМодуль(ОбработчикУсловныхВызовов);
		НедоступныеВидыПубликации = Модуль.НедоступныеВидыПубликации();
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат, НедоступныеВидыПубликации, Истина);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Процедура должна вызываться из события ПередЗаписью справочника
//  ДополнительныеОтчетыИОбработки, выполняет проверку правомерности изменения реквизитов
//  элементов данного справочника для дополнительных обработок, полученных из
//  каталога дополнительных обработок менеджера сервиса.
//
// Параметры:
//  Источник - СправочникОбъект.ДополнительныеОтчетыИОбработки,
//  Отказ - булево, флаг отказа от выполнения записи элемента справочника.
//
Процедура ПередЗаписьюДополнительнойОбработки(Источник, Отказ) Экспорт
	
	ОбработчикиУсловныхВызовов = ДополнительныеОтчетыИОбработкиПовтИсп.ОбработчикиИнтеграции();
	Для Каждого ОбработчикУсловныхВызовов Из ОбработчикиУсловныхВызовов Цикл
		
		Модуль = ОбщегоНазначенияКлиентСервер.ОбщийМодуль(ОбработчикУсловныхВызовов);
		Модуль.ПередЗаписьюДополнительнойОбработки(Источник, Отказ);
		
	КонецЦикла;
	
КонецПроцедуры


// Процедура должна вызываться из события ПередУдалением справочника
//  ДополнительныеОтчетыИОбработки.
//
// Параметры:
//  Источник - СправочникОбъект.ДополнительныеОтчетыИОбработки,
//  Отказ - булево, флаг отказа от выполнения удаления элемента справочника из информационной базы.
//
Процедура ПередУдалениемДополнительнойОбработки(Источник, Отказ) Экспорт
	
	ОбработчикиУсловныхВызовов = ДополнительныеОтчетыИОбработкиПовтИсп.ОбработчикиИнтеграции();
	Для Каждого ОбработчикУсловныхВызовов Из ОбработчикиУсловныхВызовов Цикл
		
		Модуль = ОбщегоНазначенияКлиентСервер.ОбщийМодуль(ОбработчикУсловныхВызовов);
		Модуль.ПередУдалениемДополнительнойОбработки(Источник, Отказ);
		
	КонецЦикла;
	
КонецПроцедуры

// Запись ошибки в журнал регистрации по дополнительному отчету или обработке.
//
Процедура ЗаписатьОшибку(Ссылка, ТекстСообщения, Реквизит1 = Неопределено, Реквизит2 = Неопределено, Реквизит3 = Неопределено) Экспорт
	ЗаписьЖурналаРегистрации(
		ДополнительныеОтчетыИОбработкиКлиентСервер.НаименованиеПодсистемы(Неопределено),
		УровеньЖурналаРегистрации.Ошибка,
		Метаданные.Справочники.ДополнительныеОтчетыИОбработки,
		Ссылка,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстСообщения,
			Строка(Реквизит1),
			Строка(Реквизит2),
			Строка(Реквизит3)));
КонецПроцедуры

// Запись ошибки в журнал регистрации по дополнительному отчету или обработке.
//
Процедура ЗаписатьИнформацию(Ссылка, ТекстСообщения, Реквизит1 = Неопределено, Реквизит2 = Неопределено, Реквизит3 = Неопределено) Экспорт
	ЗаписьЖурналаРегистрации(
		ДополнительныеОтчетыИОбработкиКлиентСервер.НаименованиеПодсистемы(Неопределено),
		УровеньЖурналаРегистрации.Информация,
		Метаданные.Справочники.ДополнительныеОтчетыИОбработки,
		Ссылка,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ТекстСообщения,
			Строка(Реквизит1),
			Строка(Реквизит2),
			Строка(Реквизит3)));
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Локальные служебные процедуры и функции

// Вывод команд заполнения в формах объектов.
Процедура СформироватьПодменюКомандЗаполнения(ЭтаФорма, Параметры)
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДополнительныеОтчетыИОбработкиНазначение.Ссылка
	|ПОМЕСТИТЬ втСсылки
	|ИЗ
	|	Справочник.ДополнительныеОтчетыИОбработки.Назначение КАК ДополнительныеОтчетыИОбработкиНазначение
	|ГДЕ
	|	ДополнительныеОтчетыИОбработкиНазначение.ОбъектНазначения = &ОбъектНазначения
	|	И ДополнительныеОтчетыИОбработкиНазначение.Ссылка.Вид = &Вид
	|	И ДополнительныеОтчетыИОбработкиНазначение.Ссылка.ИспользоватьДляФормыОбъекта = ИСТИНА
	|	И ДополнительныеОтчетыИОбработкиНазначение.Ссылка.Публикация = &Публикация
	|	И ДополнительныеОтчетыИОбработкиНазначение.Ссылка.ПометкаУдаления = ЛОЖЬ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДополнительныеОтчетыИОбработкиКоманды.Ссылка,
	|	ДополнительныеОтчетыИОбработкиКоманды.Идентификатор,
	|	ДополнительныеОтчетыИОбработкиКоманды.ВариантЗапуска,
	|	ДополнительныеОтчетыИОбработкиКоманды.Представление КАК Представление,
	|	ДополнительныеОтчетыИОбработкиКоманды.ПоказыватьОповещение,
	|	ДополнительныеОтчетыИОбработкиКоманды.Модификатор,
	|	ДополнительныеОтчетыИОбработкиКоманды.Ссылка.Вид
	|ИЗ
	|	втСсылки КАК втСсылки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДополнительныеОтчетыИОбработки.Команды КАК ДополнительныеОтчетыИОбработкиКоманды
	|		ПО втСсылки.Ссылка = ДополнительныеОтчетыИОбработкиКоманды.Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Представление";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОбъектНазначения", Параметры.СсылкаРодителя);
	Запрос.УстановитьПараметр("Вид", Перечисления.ВидыДополнительныхОтчетовИОбработок.ЗаполнениеОбъекта);
	Запрос.УстановитьПараметр("ВариантЗапуска", Перечисления.СпособыВызоваДополнительныхОбработок.ЗаполнениеФормы);
	Если Пользователи.РолиДоступны("ДобавлениеИзменениеДополнительныхОтчетовИОбработок") Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Публикация = &Публикация", "Публикация <> &Публикация");
		Запрос.УстановитьПараметр("Публикация", Перечисления.ВариантыПубликацииДополнительныхОтчетовИОбработок.Отключена);
	Иначе
		Запрос.УстановитьПараметр("Публикация", Перечисления.ВариантыПубликацииДополнительныхОтчетовИОбработок.Используется);
	КонецЕсли;
	Запрос.Текст = ТекстЗапроса;
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	// Определение группы, в которую будут добавлены команды.
	Элементы = ЭтаФорма.Элементы;
	
	ПредустановленныеКоманды = Новый Массив;
	Подменю = Элементы.Найти("ПодменюДополнительныхОбработокЗаполнения");
	Если Подменю = Неопределено Тогда
		Подменю = Элементы.Вставить("ПодменюДополнительныхОбработокЗаполнения", Тип("ГруппаФормы"), ЭтаФорма.КоманднаяПанель);
	Иначе
		Для Каждого Элемент Из Подменю.ПодчиненныеЭлементы Цикл
			ПредустановленныеКоманды.Добавить(Элемент);
		КонецЦикла;
	КонецЕсли;
	Подменю.Заголовок = НСтр("ru = 'Заполнить'");
	Подменю.Вид = ВидГруппыФормы.Подменю;
	Подменю.Картинка = БиблиотекаКартинок.ЗаполнитьФорму;
	Подменю.Отображение = ОтображениеКнопки.КартинкаИТекст;
	
	// Реквизиты
	ДобавляемыеРеквизиты = Новый Массив;
	
	ИмяТаблицы = "КомандыДополнительныхОбработок";
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИмяТаблицы, Новый ОписаниеТипов("ТаблицаЗначений")));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Ссылка", Новый ОписаниеТипов("СправочникСсылка.ДополнительныеОтчетыИОбработки"), ИмяТаблицы));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ВариантЗапуска", Новый ОписаниеТипов("ПеречислениеСсылка.СпособыВызоваДополнительныхОбработок"), ИмяТаблицы));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ИмяЭлемента", Новый ОписаниеТипов("Строка"), ИмяТаблицы));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ПоказыватьОповещение", Новый ОписаниеТипов("Булево"), ИмяТаблицы));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Представление", Новый ОписаниеТипов("Строка"), ИмяТаблицы));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("Идентификатор", Новый ОписаниеТипов("Строка"), ИмяТаблицы));
	ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы("ЭтоОтчет", Новый ОписаниеТипов("Булево"), ИмяТаблицы));
	
	ЭтаФорма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	// Добавление команд и элементов под команды.
	НомерЭлемента = 0;
	
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		НомерЭлемента = НомерЭлемента + 1;
		ИмяЭлемента = "КомандаДополнительнойОбработки" + Формат(НомерЭлемента, "ЧГ=");
		
		СтрокаТаблицы = ЭтаФорма.КомандыДополнительныхОбработок.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка);
		СтрокаТаблицы.ИмяЭлемента = ИмяЭлемента;
		
		Команда = ЭтаФорма.Команды.Добавить(ИмяЭлемента);
		Команда.Действие  = "Подключаемый_ВыполнитьНазначаемуюКоманду";
		Команда.Заголовок = СтрокаТаблицы.Представление;
		
		Элемент = ЭтаФорма.Элементы.Добавить(ИмяЭлемента, Тип("КнопкаФормы"), Подменю);
		Элемент.ИмяКоманды = ИмяЭлемента;
		Элемент.ТолькоВоВсехДействиях = Ложь;
	КонецЦикла;
	
	Для Каждого Элемент Из ПредустановленныеКоманды Цикл
		Элементы.Переместить(Элемент, Подменю);
	КонецЦикла;
	
КонецПроцедуры

// Для внутреннего использования
// 
Функция ПолучитьТаблицуЗаписей(ПользователиСДопОбработками)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДополнительныеОтчетыИОбработки.Ссылка КАК Обработка,
	|	КомандыДополнительныхОтчетовИОбработок.Идентификатор КАК Идентификатор
	|ИЗ
	|	Справочник.ДополнительныеОтчетыИОбработки КАК ДополнительныеОтчетыИОбработки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДополнительныеОтчетыИОбработки.Команды КАК КомандыДополнительныхОтчетовИОбработок
	|		ПО (КомандыДополнительныхОтчетовИОбработок.Ссылка = ДополнительныеОтчетыИОбработки.Ссылка)";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	ОбработкиСКомандами = Запрос.Выполнить().Выгрузить();
	
	ТаблицаЗаписей = Новый ТаблицаЗначений;
	ТаблицаЗаписей.Колонки.Добавить("Обработка",     Новый ОписаниеТипов("СправочникСсылка.ДополнительныеОтчетыИОбработки"));
	ТаблицаЗаписей.Колонки.Добавить("Идентификатор", Новый ОписаниеТипов("Строка"));
	ТаблицаЗаписей.Колонки.Добавить("Пользователь",  Новый ОписаниеТипов("СправочникСсылка.Пользователи"));
	ТаблицаЗаписей.Колонки.Добавить("Доступно",      Новый ОписаниеТипов("Булево"));
	
	Для Каждого ОбработкаКоманда Из ОбработкиСКомандами Цикл
		Для Каждого Пользователь Из ПользователиСДопОбработками Цикл
			НоваяСтрока = ТаблицаЗаписей.Добавить();
			НоваяСтрока.Обработка     = ОбработкаКоманда.Обработка;
			НоваяСтрока.Идентификатор = ОбработкаКоманда.Идентификатор;
			НоваяСтрока.Пользователь  = Пользователь;
			НоваяСтрока.Доступно   = Истина;
		КонецЦикла;
	КонецЦикла;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ДополнительныеОтчетыИОбработки.Ссылка КАК Обработка,
	|	КомандыДополнительныхОтчетовИОбработок.Идентификатор КАК Идентификатор,
	|	Пользователи.Ссылка КАК Пользователь,
	|	ПользовательскиеНастройкиДоступаКОбработкам.Доступно КАК Доступно
	|ИЗ
	|	Справочник.ДополнительныеОтчетыИОбработки КАК ДополнительныеОтчетыИОбработки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДополнительныеОтчетыИОбработки.Команды КАК КомандыДополнительныхОтчетовИОбработок
	|		ПО (КомандыДополнительныхОтчетовИОбработок.Ссылка = ДополнительныеОтчетыИОбработки.Ссылка)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПользовательскиеНастройкиДоступаКОбработкам КАК ПользовательскиеНастройкиДоступаКОбработкам
	|		ПО (ПользовательскиеНастройкиДоступаКОбработкам.ДополнительныйОтчетИлиОбработка = ДополнительныеОтчетыИОбработки.Ссылка)
	|			И (ПользовательскиеНастройкиДоступаКОбработкам.ИдентификаторКоманды = КомандыДополнительныхОтчетовИОбработок.Идентификатор)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Пользователи КАК Пользователи
	|		ПО (Пользователи.Ссылка = ПользовательскиеНастройкиДоступаКОбработкам.Пользователь)";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	ИсключенияПерсональногоДоступа = Запрос.Выполнить().Выгрузить();
	
	ПоискСтрок = Новый Структура("Обработка, Идентификатор, Пользователь");
	Для Каждого ИсключениеПерсональногоДоступа Из ИсключенияПерсональногоДоступа Цикл
		ЗаполнитьЗначенияСвойств(ПоискСтрок, ИсключениеПерсональногоДоступа);
		Найденные = ТаблицаЗаписей.НайтиСтроки(ПоискСтрок);
		Для Каждого СтрокаТаблицы Из Найденные Цикл
			СтрокаТаблицы.Доступно = НЕ ИсключениеПерсональногоДоступа.Доступно; // инвертируем исключением доступа
		КонецЦикла; 
	КонецЦикла;
	
	Возврат ТаблицаЗаписей;
	
КонецФункции

// Для внутреннего использования
// 
Функция ПолучитьМассивПользователейСДоступомКДополнительнымОбработкам()
	
	Результат = Новый Массив;
	
	ПроверяемыеРоли = "ИспользованиеДополнительныхОтчетовИОбработок, ДобавлениеИзменениеДополнительныхОтчетовИОбработок";
	
	Запрос = Новый Запрос("ВЫБРАТЬ Ссылка ИЗ Справочник.Пользователи");
	ВсеПользователи = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Для Каждого Пользователь Из ВсеПользователи Цикл
		Если Пользователи.РолиДоступны(ПроверяемыеРоли, Пользователь) Тогда
			Результат.Добавить(Пользователь);
		КонецЕсли;
	КонецЦикла;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НастройкиДоступа.Пользователь
	|ИЗ
	|	РегистрСведений.ПользовательскиеНастройкиДоступаКОбработкам КАК НастройкиДоступа
	|ГДЕ
	|	НЕ НастройкиДоступа.Пользователь В (&УжеДобавленныеПользователи)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.Параметры.Вставить("УжеДобавленныеПользователи", Результат);
	ПользователиВРегистре = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Пользователь");
	
	Для Каждого Пользователь Из ПользователиВРегистре Цикл
		Результат.Добавить(Пользователь);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Для внутреннего использования
// 
Процедура ВыполнитьКомандуДополнительногоОтчетаИлиОбработки(ВнешнийОбъект, Знач ИдентификаторКоманды, ПараметрыКоманды, Знач СценарийВБезопасномРежиме = Ложь)
	
	Если СценарийВБезопасномРежиме Тогда
		
		ВыполнитьСценарийВБезопасномРежиме(ВнешнийОбъект, ПараметрыКоманды);
		
	Иначе
		
		Если ПараметрыКоманды = Неопределено Тогда
			
			ВнешнийОбъект.ВыполнитьКоманду(ИдентификаторКоманды);
			
		Иначе
			
			ВнешнийОбъект.ВыполнитьКоманду(ИдентификаторКоманды, ПараметрыКоманды);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Для внутреннего использования
// 
Процедура ВыполнитьНазначаемуюКомандуДополнительногоОтчетаИлиОбработки(ВнешнийОбъект, Знач ИдентификаторКоманды, ПараметрыКоманды, ОбъектыНазначения, Знач СценарийВБезопасномРежиме = Ложь)
	
	Если СценарийВБезопасномРежиме Тогда
		
		ВыполнитьСценарийВБезопасномРежиме(ВнешнийОбъект, ПараметрыКоманды, ОбъектыНазначения);
		
	Иначе
		
		Если ПараметрыКоманды = Неопределено Тогда
			ВнешнийОбъект.ВыполнитьКоманду(ИдентификаторКоманды, ОбъектыНазначения);
		Иначе
			ВнешнийОбъект.ВыполнитьКоманду(ИдентификаторКоманды, ОбъектыНазначения, ПараметрыКоманды);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Для внутреннего использования
// 
Процедура ВыполнитьКомандуСозданияСвязанныхОбъектов(ВнешнийОбъект, Знач ИдентификаторКоманды, ПараметрыКоманды, ОбъектыНазначения, ИзмененныеОбъекты, Знач СценарийВБезопасномРежиме = Ложь)
	
	Если СценарийВБезопасномРежиме Тогда
		
		ПараметрыКоманды.Вставить("ИзмененныеОбъекты", ИзмененныеОбъекты);
		
		ВыполнитьСценарийВБезопасномРежиме(ВнешнийОбъект, ПараметрыКоманды, ОбъектыНазначения);
		
	Иначе
		
		Если ПараметрыКоманды = Неопределено Тогда
			ВнешнийОбъект.ВыполнитьКоманду(ИдентификаторКоманды, ОбъектыНазначения, ИзмененныеОбъекты);
		Иначе
			ВнешнийОбъект.ВыполнитьКоманду(ИдентификаторКоманды, ОбъектыНазначения, ИзмененныеОбъекты, ПараметрыКоманды);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Для внутреннего использования
// 
Процедура ВыполнитьКомандуФормированияПечатнойФормы(ВнешнийОбъект, Знач ИдентификаторКоманды, ПараметрыКоманды, ОбъектыНазначения, Знач СценарийВБезопасномРежиме = Ложь)
	
	Если СценарийВБезопасномРежиме Тогда
		
		ВыполнитьСценарийВБезопасномРежиме(ВнешнийОбъект, ПараметрыКоманды, ОбъектыНазначения);
		
	Иначе
		
		Если ПараметрыКоманды = Неопределено Тогда
			ВнешнийОбъект.Печать(ИдентификаторКоманды, ОбъектыНазначения);
		Иначе
			ВнешнийОбъект.Печать(ИдентификаторКоманды, ОбъектыНазначения, ПараметрыКоманды);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Выполняет команду дополнительного отчета или обработки из объекта.
//
Функция ВыполнитьКомандуВнешнегоОбъекта(ВнешнийОбъект, ИдентификаторКоманды, ПараметрыКоманды, АдресРезультата)
	
	СведенияОВнешнемОбъекте = ВнешнийОбъект.СведенияОВнешнейОбработке();
	
	ВидОбработки = ПолучитьВидОбработкиПоСтроковомуПредставлениюВида(СведенияОВнешнемОбъекте.Вид);
	
	ПередаватьПараметры = (
		СведенияОВнешнемОбъекте.Свойство("ВерсияБСП")
		И ОбщегоНазначенияКлиентСервер.СравнитьВерсии(СведенияОВнешнемОбъекте.ВерсияБСП, "1.2.1.4") >= 0);
	
	Если НЕ ПараметрыКоманды.Свойство("РезультатВыполнения") ИЛИ ТипЗнч(ПараметрыКоманды.РезультатВыполнения) <> Тип("Структура") Тогда
		ПараметрыКоманды.Вставить("РезультатВыполнения", СтандартныеПодсистемыКлиентСервер.НовыйРезультатВыполнения());
	КонецЕсли;
	
	ОписаниеКоманды = СведенияОВнешнемОбъекте.Команды.Найти(ИдентификаторКоманды, "Идентификатор");
	Если ОписаниеКоманды = Неопределено Тогда
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Команда %1 не обнаружена!'"), ИдентификаторКоманды);
		
	КонецЕсли;
	ЭтоСценарийВБезопасномРежиме = (ОписаниеКоманды.Использование = "СценарийВБезопасномРежиме");
	
	ИзмененныеОбъекты = Неопределено;
	
	Если ВидОбработки = Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительнаяОбработка
		ИЛИ ВидОбработки = Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительныйОтчет Тогда
		
		ВыполнитьКомандуДополнительногоОтчетаИлиОбработки(
			ВнешнийОбъект, ИдентификаторКоманды,
			?(ПередаватьПараметры, ПараметрыКоманды, Неопределено),
			ЭтоСценарийВБезопасномРежиме);
		
	ИначеЕсли ВидОбработки = Перечисления.ВидыДополнительныхОтчетовИОбработок.СозданиеСвязанныхОбъектов Тогда
		
		ИзмененныеОбъекты = Новый Массив;
		ВыполнитьКомандуСозданияСвязанныхОбъектов(
			ВнешнийОбъект, ИдентификаторКоманды,
			?(ПередаватьПараметры, ПараметрыКоманды, Неопределено),
			ПараметрыКоманды.ОбъектыНазначения,
			ИзмененныеОбъекты,
			ЭтоСценарийВБезопасномРежиме);
		
	ИначеЕсли ВидОбработки = Перечисления.ВидыДополнительныхОтчетовИОбработок.ЗаполнениеОбъекта
		ИЛИ ВидОбработки = Перечисления.ВидыДополнительныхОтчетовИОбработок.Отчет
		ИЛИ ВидОбработки = Перечисления.ВидыДополнительныхОтчетовИОбработок.ПечатнаяФорма Тогда
		
		ОбъектыНазначения = Неопределено;
		ПараметрыКоманды.Свойство("ОбъектыНазначения", ОбъектыНазначения);
		
		Если ВидОбработки = Перечисления.ВидыДополнительныхОтчетовИОбработок.ПечатнаяФорма Тогда
			
			// Здесь только произвольная печать. Печать в MXL выполняется средствами подсистемы Печать.
			ВыполнитьКомандуФормированияПечатнойФормы(
				ВнешнийОбъект, ИдентификаторКоманды,
				?(ПередаватьПараметры, ПараметрыКоманды, Неопределено),
				ОбъектыНазначения,
				ЭтоСценарийВБезопасномРежиме);
			
		Иначе
			
			ВыполнитьНазначаемуюКомандуДополнительногоОтчетаИлиОбработки(
				ВнешнийОбъект, ИдентификаторКоманды,
				?(ПередаватьПараметры, ПараметрыКоманды, Неопределено),
				ОбъектыНазначения,
				ЭтоСценарийВБезопасномРежиме);
			
			Если ВидОбработки = Перечисления.ВидыДополнительныхОтчетовИОбработок.ЗаполнениеОбъекта Тогда
				ИзмененныеОбъекты = ОбъектыНазначения;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	СтандартныеПодсистемыКлиентСервер.ПодготовитьОповещениеДинамическихСписков(ИзмененныеОбъекты, ПараметрыКоманды.РезультатВыполнения);
	
	Если ТипЗнч(АдресРезультата) = Тип("Строка") И ЭтоАдресВременногоХранилища(АдресРезультата) Тогда
		ПоместитьВоВременноеХранилище(ПараметрыКоманды.РезультатВыполнения, АдресРезультата);
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат ПараметрыКоманды.РезультатВыполнения;
	
КонецФункции

// Для внутреннего использования
// 
Процедура ВыполнитьСценарийВБезопасномРежиме(ВнешнийОбъект, ПараметрыКоманды, ОбъектыНазначения = Неопределено)
	
	РасширениеБезопасногоРежима = ДополнительныеОтчетыИОбработкиВБезопасномРежимеСлужебный;
	
	ВнешнийОбъект = ПолучитьОбъектВнешнейОбработки(ПараметрыКоманды.ДополнительнаяОбработкаСсылка);
	ИдентификаторКоманды = ПараметрыКоманды.ИдентификаторКоманды;
	
	Сценарий = ВнешнийОбъект.СформироватьСценарий(ИдентификаторКоманды, ПараметрыКоманды);
	КлючСессии = ДополнительныеОтчетыИОбработкиВБезопасномРежимеСлужебный.СформироватьКлючСессииРасширенияБезопасногоРежима(
		ПараметрыКоманды.ДополнительнаяОбработкаСсылка);
	
	РасширениеБезопасногоРежима.ВыполнитьСценарийБезопасногоРежима(
		КлючСессии, Сценарий, ВнешнийОбъект, ПараметрыКоманды, Неопределено, ОбъектыНазначения);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Другие

// Для внутреннего использования
//
Функция ЗарегистрироватьОбработку(Знач Объект, Знач ПараметрыРегистрации) Экспорт
	
	ВидДополнительнаяОбработка = Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительнаяОбработка;
	ВидДополнительныйОтчет     = Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительныйОтчет;
	ВидОтчет                   = Перечисления.ВидыДополнительныхОтчетовИОбработок.Отчет;
	
	// Получает файл обработки из временного хранилища, пытается создать объект
	// обработки (внешнего отчета) и получает информацию из объекта внешней обработки (отчета)
	
	Если ПараметрыРегистрации.ОтключатьКонфликтующие = Истина Тогда
		Для Каждого ЭлементСписка Из ПараметрыРегистрации.Конфликтующие Цикл
			КонфликтующийОбъект = ЭлементСписка.Значение.ПолучитьОбъект();
			КонфликтующийОбъект.Публикация = ДополнительныеОтчетыИОбработкиПовтИсп.ВидПубликацииДляКонфликтующихОбработок();
			КонфликтующийОбъект.Записать();
		КонецЦикла;
	КонецЕсли;
	
	Результат = Новый Структура("ИмяОбъекта, СтароеИмяОбъекта, Успешно, ИмяОбъектаЗанято, Конфликтующие, КраткоеПредставлениеОшибки");
	Результат.ИмяОбъектаЗанято = Ложь;
	Результат.Успешно = Ложь;
	Результат.СтароеИмяОбъекта = ?(Объект.ЭтоНовый(), Объект.ИмяОбъекта, Объект.Ссылка.ИмяОбъекта);
	
	РегистрационныеДанные = ПолучитьРегистрационныеДанные(Объект, ПараметрыРегистрации, Результат);
	Если РегистрационныеДанные = Неопределено Тогда
		Возврат Результат;
	КонецЕсли;
	
	// Если отчет публикуется, то необходим контроль уникальности имени объекта, 
	//     под которым дополнительный отчет регистрируется в системе
	Если Объект.Публикация = Перечисления.ВариантыПубликацииДополнительныхОтчетовИОбработок.Используется Тогда
		// Проверка имени
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ТаблицаСправочника.Ссылка,
		|	ТаблицаСправочника.Представление
		|ИЗ
		|	Справочник.ДополнительныеОтчетыИОбработки КАК ТаблицаСправочника
		|ГДЕ
		|	ТаблицаСправочника.ИмяОбъекта = &ИмяОбъекта
		|	И &УсловиеДопОтчет
		|	И ТаблицаСправочника.Публикация = ЗНАЧЕНИЕ(Перечисление.ВариантыПубликацииДополнительныхОтчетовИОбработок.Используется)
		|	И ТаблицаСправочника.ПометкаУдаления = ЛОЖЬ
		|	И ТаблицаСправочника.Ссылка <> &Ссылка";
		
		ВидыДопОтчетов = Новый Массив;
		ВидыДопОтчетов.Добавить(ВидДополнительныйОтчет);
		ВидыДопОтчетов.Добавить(ВидОтчет);
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ИмяОбъекта",     Результат.ИмяОбъекта);
		Запрос.УстановитьПараметр("ВидыДопОтчетов", ВидыДопОтчетов);
		Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
		
		Если ПараметрыРегистрации.ЭтоОтчет Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеДопОтчет", "ТаблицаСправочника.Вид В (&ВидыДопОтчетов)");
		Иначе
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&УсловиеДопОтчет", "НЕ ТаблицаСправочника.Вид В (&ВидыДопОтчетов)");
		КонецЕсли;
		
		Запрос.Текст = ТекстЗапроса;
		
		УстановитьПривилегированныйРежим(Истина);
		Конфликтующие = Запрос.Выполнить().Выгрузить();
		УстановитьПривилегированныйРежим(Ложь);
		
		Если Конфликтующие.Количество() > 0 Тогда
			Результат.ИмяОбъектаЗанято = Истина;
			Результат.Конфликтующие = Новый СписокЗначений;
			Для Каждого СтрокаТаблицы Из Конфликтующие Цикл
				Результат.Конфликтующие.Добавить(СтрокаТаблицы.Ссылка, СтрокаТаблицы.Представление);
			КонецЦикла; 
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	Если РегистрационныеДанные.БезопасныйРежим
		ИЛИ Пользователи.ЭтоПолноправныйПользователь(, Истина) Тогда
		// ничего не делаем
	Иначе
		Результат.КраткоеПредставлениеОшибки = НСтр("ru = 'Для добавления обработок запускаемых в небезопасном режиме требуются полные права.'");
		Возврат Результат;
	КонецЕсли;
	
	Если НЕ Объект.ЭтоНовый() И РегистрационныеДанные.Вид <> Объект.Вид Тогда
		Результат.КраткоеПредставлениеОшибки = НСтр("ru = 'Невозможно сменить вид существующего дополнительного отчета или обработки.'");
		Возврат Результат;
	ИначеЕсли ПараметрыРегистрации.ЭтоОтчет <> (РегистрационныеДанные.Вид = ВидДополнительныйОтчет ИЛИ РегистрационныеДанные.Вид = ВидОтчет) Тогда
		Результат.КраткоеПредставлениеОшибки = НСтр("ru = 'Вид обработки, указанный в сведениях о внешней обработке, не соответствует её расширению.'");
		Возврат Результат;
	КонецЕсли;
	
	Объект.Наименование    = РегистрационныеДанные.Наименование;
	Объект.Версия          = РегистрационныеДанные.Версия;
	Объект.БезопасныйРежим = РегистрационныеДанные.БезопасныйРежим;
	Объект.Информация      = РегистрационныеДанные.Информация;
	Объект.ИмяФайла        = ПараметрыРегистрации.ИмяФайла;
	Объект.ИмяОбъекта      = Результат.ИмяОбъекта;
	
	Объект.ИспользуетХранилищеВариантов = Ложь;
	Если (РегистрационныеДанные.Вид = ВидДополнительныйОтчет) ИЛИ (РегистрационныеДанные.Вид = ВидОтчет) Тогда
		Если РегистрационныеДанные.ХранилищеВариантов = "ХранилищеВариантовОтчетов"
			ИЛИ (Метаданные.ХранилищеВариантовОтчетов <> Неопределено
				И Метаданные.ХранилищеВариантовОтчетов.Имя = "ХранилищеВариантовОтчетов") Тогда
			Объект.ИспользуетХранилищеВариантов = Истина;
		КонецЕсли;
	КонецЕсли;
	
	// Загружена другая обработка (изменилось имя объекта или вид обработки)
	Если Объект.ЭтоНовый() ИЛИ Объект.ИмяОбъекта <> Результат.ИмяОбъекта ИЛИ Объект.Вид <> РегистрационныеДанные.Вид Тогда
		Объект.Назначение.Очистить();
		Объект.Разделы.Очистить();
		Объект.Вид = РегистрационныеДанные.Вид;
	КонецЕсли;
	
	// Если не заполнено назначение - устанавливаем назначение из обработки
	Если Объект.Назначение.Количество() = 0
		И Объект.Вид <> ВидДополнительныйОтчет
		И Объект.Вид <> ВидДополнительнаяОбработка Тогда
		
		Если РегистрационныеДанные.Свойство("Назначение") Тогда
			НазначаемыеОбъектыМетаданных = НазначаемыеОбъектыМетаданныхПоВидуВнешнегоОбъекта(Объект.Вид);
			
			Для Каждого ПолноеИмяОбъектаМетаданных Из РегистрационныеДанные.Назначение Цикл
				ПозицияТочки = Найти(ПолноеИмяОбъектаМетаданных, ".");
				Если Сред(ПолноеИмяОбъектаМетаданных, ПозицияТочки + 1) = "*" Тогда
					Поиск = Новый Структура("ВидОбъектаМетаданных", Лев(ПолноеИмяОбъектаМетаданных, ПозицияТочки - 1));
				Иначе
					Поиск = Новый Структура("ПолноеИмяОбъектаМетаданных", ПолноеИмяОбъектаМетаданных);
				КонецЕсли;
				
				Найденные = НазначаемыеОбъектыМетаданных.НайтиСтроки(Поиск);
				Для Каждого СтрокаТаблицы Из Найденные Цикл
					СтрокаНазначение = Объект.Назначение.Добавить();
					СтрокаНазначение.ОбъектНазначения = СтрокаТаблицы.ОбъектНазначения;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
		
		Объект.Назначение.Свернуть("ОбъектНазначения", "");
		
	КонецЕсли;
	
	Объект.Команды.Очистить();
	
	// Инициализация команд
	
	Для Каждого КомандаОписание Из РегистрационныеДанные.Команды Цикл
		
		Если НЕ ЗначениеЗаполнено(КомандаОписание.ВариантЗапуска) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				СтрЗаменить(НСтр("ru = 'Для команды ""%1"" не определен способ запуска.'"), "%1", КомандаОписание.Представление));
		КонецЕсли;
		
		Команда = Объект.Команды.Добавить();
		ЗаполнитьЗначенияСвойств(Команда, КомандаОписание);
		
	КонецЦикла;
	
	// Чтение разрешений, запрашиваемых дополнительной обработкой
	Объект.Разрешения.Очистить();
	Разрешения = Неопределено;
	Если РегистрационныеДанные.Свойство("Разрешения", Разрешения) Тогда
		
		Для Каждого Разрешение Из Разрешения Цикл
			
			ТипXDTO = Разрешение.Тип();
			
			СтрокаТЧ = Объект.Разрешения.Добавить();
			СтрокаТЧ.ВидРазрешения = ТипXDTO.Имя;
			
			Параметры = Новый Структура();
			
			Для Каждого СвойствоXDTO Из ТипXDTO.Свойства Цикл
				
				Контейнер = Разрешение.ПолучитьXDTO(СвойствоXDTO.Имя);
				
				Если Контейнер <> Неопределено Тогда
					Параметры.Вставить(СвойствоXDTO.Имя, Контейнер.Значение);
				Иначе
					Параметры.Вставить(СвойствоXDTO.Имя);
				КонецЕсли;
				
			КонецЦикла;
			
			СтрокаТЧ.Параметры = Новый ХранилищеЗначения(Параметры);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Объект.Ответственный = Пользователи.ТекущийПользователь();
	
	Результат.Успешно = Истина;
	
	Возврат Результат;
	
КонецФункции

// Для внутреннего использования
//
Функция ПолучитьРегистрационныеДанные(Знач Объект, Знач ПараметрыРегистрации, Знач ПараметрыОбработки)
	
	Результат = Новый Структура;
	
	СтандартнаяОбработка = Истина;
	
	ОбработчикиУсловныхВызовов = ДополнительныеОтчетыИОбработкиПовтИсп.ОбработчикиИнтеграции();
	Для Каждого ОбработчикУсловныхВызовов Из ОбработчикиУсловныхВызовов Цикл
		
		Модуль = ОбщегоНазначенияКлиентСервер.ОбщийМодуль(ОбработчикУсловныхВызовов);
		Модуль.ПриПолученииРегистрационныхДанных(Объект, Результат, СтандартнаяОбработка);
		
		Если Не СтандартнаяОбработка Тогда
			Возврат Результат;
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтандартнаяОбработка Тогда
		
		// Подключение и получение имени, под которым объект будет подключаться
		Менеджер = ?(ПараметрыРегистрации.ЭтоОтчет, ВнешниеОтчеты, ВнешниеОбработки);
		ПараметрыОбработки.ИмяОбъекта = СокрЛП(Менеджер.Подключить(ПараметрыРегистрации.АдресДанныхОбработки, , Истина));
		
		// Получение сведений о внешней обработке
		ВнешнийОбъект = Менеджер.Создать(ПараметрыОбработки.ИмяОбъекта);
		ВнешнийОбъектМетаданные = ВнешнийОбъект.Метаданные();
		
		РегистрационныеДанные = ВнешнийОбъект.СведенияОВнешнейОбработке();
		Если РегистрационныеДанные.Наименование = Неопределено ИЛИ РегистрационныеДанные.Информация = Неопределено Тогда
			Если РегистрационныеДанные.Наименование = Неопределено Тогда
				РегистрационныеДанные.Наименование = ВнешнийОбъектМетаданные.Представление();
			КонецЕсли;
			Если РегистрационныеДанные.Информация = Неопределено Тогда
				РегистрационныеДанные.Информация = ВнешнийОбъектМетаданные.Комментарий;
			КонецЕсли;
		КонецЕсли;
		
		Если ТипЗнч(РегистрационныеДанные.Вид) <> Тип("ПеречислениеСсылка.ВидыДополнительныхОтчетовИОбработок") Тогда
			РегистрационныеДанные.Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок[РегистрационныеДанные.Вид];
		КонецЕсли;
		
		РегистрационныеДанные.Вставить("ХранилищеВариантов");
		Если РегистрационныеДанные.Вид = Перечисления.ВидыДополнительныхОтчетовИОбработок.ДополнительныйОтчет Тогда
			Если ВнешнийОбъектМетаданные.ХранилищеВариантов <> Неопределено Тогда
				РегистрационныеДанные.ХранилищеВариантов = ВнешнийОбъектМетаданные.ХранилищеВариантов.Имя;
			КонецЕсли;
		КонецЕсли;
		
		РегистрационныеДанные.Команды.Колонки.Добавить("ВариантЗапуска");
		
		Для Каждого КомандаОписание Из РегистрационныеДанные.Команды Цикл
			КомандаОписание.ВариантЗапуска = Перечисления.СпособыВызоваДополнительныхОбработок[КомандаОписание.Использование];
		КонецЦикла;
		
		Возврат РегистрационныеДанные;
		
	КонецЕсли;
	
КонецФункции

// Процедура вызывается для выполнения проверки возможности выполнения дополнительной обработки
//
Процедура ПроверитьВозможностьВыполнения(Ссылка)
	
	ОбработчикиУсловныхВызовов = ДополнительныеОтчетыИОбработкиПовтИсп.ОбработчикиИнтеграции();
	Для Каждого ОбработчикУсловныхВызовов Из ОбработчикиУсловныхВызовов Цикл
		Модуль = ОбщегоНазначенияКлиентСервер.ОбщийМодуль(ОбработчикУсловныхВызовов);
		Модуль.ПроверитьВозможностьВыполнения(Ссылка);
	КонецЦикла;
	
КонецПроцедуры

// Функция возвращает параметры, которые должны использоваться для подключения внешней обработки
//  к информационной базе и ее выполнения.
//
// Параметры:
//  Ссылка - СправочникСсылка.ДополнительныеОтчетыИОбработки.
//
// Возвращаемое значение:
//  Структура, ключи:
//    БезопасныйРежим - булево, флаг подключения дополнительной обработки в безопасном режиме,
//    ХранилищеОбработки - ХранилищеЗначения, содержащее ДвоичныеДанные, содержащие файл
//      дополнительной обработки.
//
Функция ОпределитьПараметрыЗапуска(Ссылка) Экспорт
	
	СтандартнаяОбработка = Истина;
	Свойства = ДополнительныеОтчетыИОбработкиПовтИсп.ПараметрыЗапуска();
	Результат = Новый Структура(Свойства);
	
	ОбработчикиУсловныхВызовов = ДополнительныеОтчетыИОбработкиПовтИсп.ОбработчикиИнтеграции();
	Для Каждого ОбработчикУсловныхВызовов Из ОбработчикиУсловныхВызовов Цикл
		
		Модуль = ОбщегоНазначенияКлиентСервер.ОбщийМодуль(ОбработчикУсловныхВызовов);
		Модуль.ОпределениеПараметровЗапуска(Ссылка, Результат, СтандартнаяОбработка);
		
		Если Не СтандартнаяОбработка Тогда
			Возврат Результат;
		КонецЕсли;
		
	КонецЦикла;
	
	Если СтандартнаяОбработка Тогда
		
		ЗаполнитьЗначенияСвойств(Результат, ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Ссылка, Свойства));
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции
