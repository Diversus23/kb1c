////////////////////////////////////////////////////////////////////////////////
// ОбменДаннымиВМоделиСервиса: механизм обмена данными.
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС

// См. описание этой же процедуры в модуле СтандартныеПодсистемыСервер.
Процедура ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики) Экспорт
	
	// КЛИЕНТСКИЕ ОБРАБОТЧИКИ.
	
	КлиентскиеОбработчики[
		"СтандартныеПодсистемы.БазоваяФункциональность\ПриНачалеРаботыСистемы"].Добавить(
			"ОбменДаннымиВМоделиСервисаКлиент");
	
	КлиентскиеОбработчики[
		"СтандартныеПодсистемы.БазоваяФункциональность\ПриПолученииСпискаПредупрежденийЗавершенияРаботы"].Добавить(
			"ОбменДаннымиВМоделиСервисаКлиент");
	
	// СЕРВЕРНЫЕ ОБРАБОТЧИКИ.
	
	СерверныеОбработчики["СтандартныеПодсистемы.ОбновлениеВерсииИБ\ПриДобавленииОбработчиковОбновления"].Добавить(
		"ОбменДаннымиВМоделиСервиса");
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменСообщениями") Тогда
		СерверныеОбработчики["СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменСообщениями\ПриОпределенииОбработчиковКаналовСообщений"].Добавить(
			"ОбменДаннымиВМоделиСервиса");
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса.ОчередьЗаданий") Тогда
		СерверныеОбработчики["СтандартныеПодсистемы.РаботаВМоделиСервиса.ОчередьЗаданий\ПриОпределенииПсевдонимовОбработчиков"].Добавить(
			"ОбменДаннымиВМоделиСервиса");
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		СерверныеОбработчики[
			"СтандартныеПодсистемы.РаботаВМоделиСервиса\ПриЗаполненииТаблицыПараметровИБ"].Добавить(
				"ОбменДаннымиВМоделиСервиса");
	КонецЕсли;
	
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриОтправкеДанныхГлавному"].Добавить(
		"ОбменДаннымиВМоделиСервиса");
	
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриПолученииДанныхОтПодчиненного"].Добавить(
		"ОбменДаннымиВМоделиСервиса");
	
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриОпределенииПоддерживаемыхВерсийПрограммныхИнтерфейсов"].Добавить(
		"ОбменДаннымиВМоделиСервиса");
	
	СерверныеОбработчики[
		"СтандартныеПодсистемы.БазоваяФункциональность\ПриДобавленииПараметровРаботыКлиентскойЛогикиСтандартныхПодсистемПриЗавершении"].Добавить(
		"ОбменДаннымиВМоделиСервиса");
	
	СерверныеОбработчики[
		"СтандартныеПодсистемы.БазоваяФункциональность\ПриДобавленииПараметровРаботыКлиентскойЛогикиСтандартныхПодсистемПриЗапуске"].Добавить(
		"ОбменДаннымиВМоделиСервиса");
	
	СерверныеОбработчики[
		"СтандартныеПодсистемы.БазоваяФункциональность\ПриДобавленииПараметровРаботыКлиентскойЛогикиСтандартныхПодсистем"].Добавить(
		"ОбменДаннымиВМоделиСервиса");
	
	СерверныеОбработчики[
		"СтандартныеПодсистемы.РаботаВМоделиСервиса.ВыгрузкаЗагрузкаДанных\ПриОпределенииОбъектовМетаданныхИсключаемыхИзВыгрузкиЗагрузки"].Добавить(
			"ОбменДаннымиВМоделиСервиса");
			
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриПолученииОбязательныхОбъектовПланаОбмена"].Добавить(
		"ОбменДаннымиВМоделиСервиса");
	
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриПолученииОбъектовИсключенийПланаОбмена"].Добавить(
		"ОбменДаннымиВМоделиСервиса");
	
	СерверныеОбработчики["СтандартныеПодсистемы.БазоваяФункциональность\ПриПолученииОбъектовНачальногоОбразаПланаОбмена"].Добавить(
		"ОбменДаннымиВМоделиСервиса");
	
	СерверныеОбработчики["СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменСообщениями\РегистрацияИнтерфейсовПринимаемыхСообщений"].Добавить(
		"ОбменДаннымиВМоделиСервиса");
	
	СерверныеОбработчики["СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменСообщениями\РегистрацияИнтерфейсовОтправляемыхСообщений"].Добавить(
		"ОбменДаннымиВМоделиСервиса");
	
КонецПроцедуры

// Устанавливает константу-признак изменения данных
// и отсылает менеджеру сервиса сообщение об изменении с номером текущей области.
//
Процедура УстановитьПризнакИзмененияДанных() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ОбластьДанных = ОбщегоНазначения.ЗначениеРазделителяСеанса();
	
	НачатьТранзакцию();
	Попытка
		ОбменСообщениями.ОтправитьСообщение("ОбменДанными\УправляющееПриложение\ПризнакИзмененияДанных",
						Новый Структура("КодУзла", ОбменДаннымиСервер.КодУзлаПланаОбменаСтрокой(ОбластьДанных)),
						РаботаВМоделиСервисаПовтИсп.КонечнаяТочкаМенеджераСервиса());
		
		Константы.ЗарегистрированыИзмененияДанных.Установить(Истина);
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Добавляет параметры работы клиентской логики для подсистемы обмена данными в модели сервиса
//
Процедура ДобавитьПараметрыРаботыКлиента(Параметры) Экспорт
	
КонецПроцедуры

// Заполняет структуру параметров, необходимых для работы клиентского кода
// конфигурации при завершении работы.
//
// Параметры:
//   Параметры   - Структура - структура параметров.
//
Процедура ДобавитьПараметрыРаботыКлиентаПриЗавершении(Параметры) Экспорт
	
	Параметры.Вставить("ПараметрыАвтономнойРаботы", ПараметрыАвтономнойРаботыПриЗавершенииРаботы());
	
КонецПроцедуры

// Заполняет переданный массив общими модулями, которые являются обработчиками интерфейсов
//  принимаемых сообщений
//
// Параметры:
//  МассивОбработчиков - массив
//
Процедура РегистрацияИнтерфейсовПринимаемыхСообщений(МассивОбработчиков) Экспорт
	
	МассивОбработчиков.Добавить(СообщенияАдминистрированиеОбменаДаннымиКонтрольИнтерфейс);
	МассивОбработчиков.Добавить(СообщенияАдминистрированиеОбменаДаннымиУправлениеИнтерфейс);
	МассивОбработчиков.Добавить(СообщенияОбменаДаннымиКонтрольИнтерфейс);
	МассивОбработчиков.Добавить(СообщенияОбменаДаннымиУправлениеИнтерфейс);
	
КонецПроцедуры

// Заполняет переданный массив общими модулями, которые являются обработчиками интерфейсов
//  отправляемых сообщений
//
// Параметры:
//  МассивОбработчиков - массив
//
Процедура РегистрацияИнтерфейсовОтправляемыхСообщений(МассивОбработчиков) Экспорт
	
	МассивОбработчиков.Добавить(СообщенияАдминистрированиеОбменаДаннымиКонтрольИнтерфейс);
	МассивОбработчиков.Добавить(СообщенияАдминистрированиеОбменаДаннымиУправлениеИнтерфейс);
	МассивОбработчиков.Добавить(СообщенияОбменаДаннымиКонтрольИнтерфейс);
	МассивОбработчиков.Добавить(СообщенияОбменаДаннымиУправлениеИнтерфейс);
	
КонецПроцедуры

// Обработчики обновления ИБ

// Добавляет процедуры-обработчики обновления, необходимые данной подсистеме.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                  общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "*";
		Обработчик.ОбщиеДанные = Истина;
		Обработчик.МонопольныйРежим = Ложь;
		Обработчик.Процедура = "ОбменДаннымиВМоделиСервиса.ЗаблокироватьКонечныеТочки";
		
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "*";
		Обработчик.МонопольныйРежим = Ложь;
		Обработчик.Процедура = "ОбменДаннымиВМоделиСервиса.УстановитьКодыПредопределенныхУзлов";
		
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "2.1.2.0";
		Обработчик.Процедура = "ОбменДаннымиВМоделиСервиса.ПеренестиНастройкиОбменаВСтруктуруДанных_2_1_2_0";
		
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "2.1.2.12";
		Обработчик.ОбщиеДанные = Истина;
		Обработчик.Процедура = "ОбменДаннымиВМоделиСервиса.УстановитьПризнакРегистрироватьИзмененияДляВсехОбластейДанных";
		
		Обработчик = Обработчики.Добавить();
		Обработчик.Версия = "2.1.3.22";
		Обработчик.ОбщиеДанные = Истина;
		Обработчик.Процедура = "ОбменДаннымиВМоделиСервиса.ПеренестиДанныеСостоянийОбменаДанными";
		
	КонецЕсли;
	
КонецПроцедуры

// Для каждого из используемых в модели сервиса планов обмена
// определяет и устанавливает код и наименование предопределенного узла.
// Код генерируется на основании значения разделителя.
// Наименование  - либо по заголовку приложения, либо, если он пустой, 
// по представлению текущей области данных из регистра РегистрСведений.ОбластиДанных.
//
Процедура УстановитьКодыПредопределенныхУзлов() Экспорт
	
	Для Каждого ПланОбмена Из Метаданные.ПланыОбмена Цикл
		
		Если ОбменДаннымиВМоделиСервисаПовтИсп.ЭтоПланОбменаСинхронизацииДанных(ПланОбмена.Имя) Тогда
			
			ЭтотУзел = ПланыОбмена[ПланОбмена.Имя].ЭтотУзел();
			
			Если ПустаяСтрока(ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ЭтотУзел, "Код")) Тогда
				
				ЭтотУзелОбъект = ЭтотУзел.ПолучитьОбъект();
				ЭтотУзелОбъект.Код = КодУзлаПланаОбменаВСервисе(РаботаВМоделиСервиса.ЗначениеРазделителяСеанса());
				ЭтотУзелОбъект.Наименование = СокрЛП(СформироватьНаименованиеПредопределенногоУзла());
				ЭтотУзелОбъект.Записать();
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Выполняет перенос настроек транспорта сообщений обмена из формата БСП 2.0.0 в формат БСП 2.1.2
//
Процедура ПеренестиНастройкиОбменаВСтруктуруДанных_2_1_2_0() Экспорт
	
	КонечныеТочкиКорреспондентов = КонечныеТочкиКорреспондентовСтруктурыДанных_2_1_2_0();
	
	Запрос = Новый Запрос;
	
	ТекстЗапроса2 =
	"ВЫБРАТЬ
	|	НастройкиТранспортаОбмена.FILEКаталогОбменаИнформацией КАК FILEКаталогОбменаИнформацией,
	|	НастройкиТранспортаОбмена.WSURLВебСервиса КАК Адрес
	|ИЗ
	|	РегистрСведений.НастройкиТранспортаОбмена КАК НастройкиТранспортаОбмена
	|ГДЕ
	|	НастройкиТранспортаОбмена.Узел = &Узел";
	
	Запрос2 = Новый Запрос;
	Запрос2.Текст = ТекстЗапроса2;
	
	НачатьТранзакцию();
	Попытка
		
		Для Каждого ИмяПланаОбмена Из ОбменДаннымиПовтИсп.РазделенныеПланыОбменаБСП() Цикл
			
			ТекстЗапроса =
			"ВЫБРАТЬ
			|	ПланОбмена.Ссылка КАК Узел
			|ИЗ
			|	ПланОбмена.[ИмяПланаОбмена] КАК ПланОбмена
			|ГДЕ
			|	ПланОбмена.Ссылка <> &ЭтотУзел";
			
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ИмяПланаОбмена]", ИмяПланаОбмена);
			
			Запрос.УстановитьПараметр("ЭтотУзел", ПланыОбмена[ИмяПланаОбмена].ЭтотУзел());
			Запрос.Текст = ТекстЗапроса;
			
			РезультатЗапроса = Запрос.Выполнить();
			
			Если Не РезультатЗапроса.Пустой() Тогда
				
				Выборка = РезультатЗапроса.Выбрать();
				
				Пока Выборка.Следующий() Цикл
					
					Блокировка = Новый БлокировкаДанных;
					ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.НастройкиТранспортаОбмена");
					ЭлементБлокировки.УстановитьЗначение("Узел", Выборка.Узел);
					Блокировка.Заблокировать();
					
					Запрос2.УстановитьПараметр("Узел", Выборка.Узел);
					
					РезультатЗапроса2 = Запрос2.Выполнить();
					
					Если Не РезультатЗапроса2.Пустой() Тогда
						
						Выборка2 = РезультатЗапроса2.Выбрать();
						
						Если Выборка2.Следующий() Тогда
							
							КонечнаяТочкаКорреспондента = КонечныеТочкиКорреспондентов[Выборка2.Адрес];
							
							Если КонечнаяТочкаКорреспондента = Неопределено Тогда
								
								ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru = 'Не определена конечная точка корреспондента для адреса ""%1"".'"),
									Выборка2.Адрес);
							КонецЕсли;
							
							Запись = Новый Структура;
							Запись.Вставить("Корреспондент", Выборка.Узел);
							Запись.Вставить("КонечнаяТочкаКорреспондента", КонечнаяТочкаКорреспондента);
							Запись.Вставить("КаталогОбменаИнформацией", ОтносительныйКаталогОбменаИнформацией(Выборка2.FILEКаталогОбменаИнформацией));
							
							РегистрыСведений.НастройкиТранспортаОбменаОбластиДанных.ДобавитьЗапись(Запись);
							
							ОбменДаннымиСервер.УдалитьНаборЗаписейВРегистреСведений(Новый Структура("Узел", Выборка.Узел), "НастройкиТранспортаОбмена");
							
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Устанавливает признак "РегистрироватьИзменения" для всех узлов разделенных планов обмена БСП, кроме предопределенных
// для всех областей данных
//
// Параметры:
//  Нет.
// 
Процедура УстановитьПризнакРегистрироватьИзмененияДляВсехОбластейДанных() Экспорт
	
	РазделенныеПланыОбменаБСП = ОбменДаннымиПовтИсп.РазделенныеПланыОбменаБСП();
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ОбластиДанных.ОбластьДанныхВспомогательныеДанные КАК ОбластьДанных
	|ИЗ
	|	РегистрСведений.ОбластиДанных КАК ОбластиДанных
	|ГДЕ
	|	ОбластиДанных.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыОбластейДанных.Используется)";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ОбщегоНазначения.УстановитьРазделениеСеанса(Истина, Выборка.ОбластьДанных);
		
		Для Каждого ИмяПланаОбмена Из РазделенныеПланыОбменаБСП Цикл
			
			ТекстЗапроса2 =
			"ВЫБРАТЬ
			|	ПланОбмена.Ссылка КАК Ссылка
			|ИЗ
			|	ПланОбмена.[ИмяПланаОбмена] КАК ПланОбмена
			|ГДЕ
			|	Не ПланОбмена.РегистрироватьИзменения
			|	И ПланОбмена.Ссылка <> &ЭтотУзел";
			
			ТекстЗапроса2 = СтрЗаменить(ТекстЗапроса2, "[ИмяПланаОбмена]", ИмяПланаОбмена);
			
			Запрос2 = Новый Запрос;
			Запрос2.УстановитьПараметр("ЭтотУзел", ПланыОбмена[ИмяПланаОбмена].ЭтотУзел());
			Запрос2.Текст = ТекстЗапроса2;
			
			РезультатЗапроса2 = Запрос2.Выполнить();
			
			Если Не РезультатЗапроса2.Пустой() Тогда
				
				Выборка2 = РезультатЗапроса2.Выбрать();
				
				Пока Выборка2.Следующий() Цикл
					
					Узел = Выборка2.Ссылка.ПолучитьОбъект();
					Узел.РегистрироватьИзменения = Истина;
					Узел.ДополнительныеСвойства.Вставить("Загрузка");
					Узел.Записать();
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ОбщегоНазначения.УстановитьРазделениеСеанса(Ложь);
	
КонецПроцедуры

// Блокирует все конечные точки кроме конечной точки менеджера сервиса.
//
Процедура ЗаблокироватьКонечныеТочки() Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ОбменСообщениями.Ссылка КАК Ссылка
	|ИЗ
	|	ПланОбмена.ОбменСообщениями КАК ОбменСообщениями
	|ГДЕ
	|	ОбменСообщениями.Ссылка <> &ЭтотУзел
	|	И ОбменСообщениями.Ссылка <> &КонечнаяТочкаМенеджераСервиса
	|	И Не ОбменСообщениями.Заблокирована";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЭтотУзел", ОбменСообщениямиВнутренний.ЭтотУзел());
	Запрос.УстановитьПараметр("КонечнаяТочкаМенеджераСервиса", РаботаВМоделиСервисаПовтИсп.КонечнаяТочкаМенеджераСервиса());
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		КонечнаяТочка = Выборка.Ссылка.ПолучитьОбъект();
		КонечнаяТочка.Заблокирована = Истина;
		КонечнаяТочка.Записать();
		
	КонецЦикла;
	
КонецПроцедуры

// Выполняет перенос данных регистров СостоянияОбменовДанными и СостоянияУспешныхОбменовДанными
// в соответствующие регистры СостоянияОбменовДаннымиОбластейДанных и СостоянияУспешныхОбменовДаннымиОбластейДанных
// при обновлении ИБ.
//
Процедура ПеренестиДанныеСостоянийОбменаДанными() Экспорт
	
	Если ОбменДаннымиПовтИсп.РазделенныеПланыОбменаБСП().Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Обработка регистров СостоянияОбменовДанными и СостоянияОбменовДаннымиОбластейДанных
	НачатьТранзакцию();
	Попытка
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	СостоянияОбменовДанными.УзелИнформационнойБазы,
		|	СостоянияОбменовДанными.ДействиеПриОбмене,
		|	СостоянияОбменовДанными.РезультатВыполненияОбмена,
		|	СостоянияОбменовДанными.ДатаНачала,
		|	СостоянияОбменовДанными.ДатаОкончания,
		|	СостоянияОбменовДанными.УзелИнформационнойБазы.ОбластьДанныхОсновныеДанные КАК ОбластьДанных
		|ИЗ
		|	РегистрСведений.СостоянияОбменовДанными КАК СостоянияОбменовДанными
		|ГДЕ
		|	НЕ СостоянияОбменовДанными.УзелИнформационнойБазы.ОбластьДанныхОсновныеДанные ЕСТЬ NULL";
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			// Удаляем запись в РС.СостоянияОбменовДанными
			СтруктураЗаписи = Новый Структура("УзелИнформационнойБазы, ДействиеПриОбмене, РезультатВыполненияОбмена, ДатаНачала, ДатаОкончания");
			ЗаполнитьЗначенияСвойств(СтруктураЗаписи, Выборка);
			РегистрыСведений.СостоянияОбменовДанными.УдалитьЗапись(СтруктураЗаписи);
			
			// Добавляем запись в РС.СостоянияОбменовДаннымиОбластейДанных
			СтруктураЗаписи.Вставить("ОбластьДанныхВспомогательныеДанные", Выборка.ОбластьДанных);
			РегистрыСведений.СостоянияОбменовДаннымиОбластейДанных.ДобавитьЗапись(СтруктураЗаписи);
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	// Обработка регистров СостоянияУспешныхОбменовДанными и СостоянияУспешныхОбменовДаннымиОбластейДанных
	НачатьТранзакцию();
	Попытка
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	СостоянияУспешныхОбменовДанными.УзелИнформационнойБазы,
		|	СостоянияУспешныхОбменовДанными.ДействиеПриОбмене,
		|	СостоянияУспешныхОбменовДанными.ДатаОкончания,
		|	СостоянияУспешныхОбменовДанными.УзелИнформационнойБазы.ОбластьДанныхОсновныеДанные КАК ОбластьДанных
		|ИЗ
		|	РегистрСведений.СостоянияУспешныхОбменовДанными КАК СостоянияУспешныхОбменовДанными
		|ГДЕ
		|	НЕ СостоянияУспешныхОбменовДанными.УзелИнформационнойБазы.ОбластьДанныхОсновныеДанные ЕСТЬ NULL";
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			// Удаляем запись в РС.СостоянияУспешныхОбменовДанными
			СтруктураЗаписи = Новый Структура("УзелИнформационнойБазы, ДействиеПриОбмене, ДатаОкончания");
			ЗаполнитьЗначенияСвойств(СтруктураЗаписи, Выборка);
			РегистрыСведений.СостоянияУспешныхОбменовДанными.УдалитьЗапись(СтруктураЗаписи);
			
			// Добавляем запись в РС.СостоянияУспешныхОбменовДаннымиОбластейДанных
			СтруктураЗаписи.Вставить("ОбластьДанныхВспомогательныеДанные", Выборка.ОбластьДанных);
			РегистрыСведений.СостоянияУспешныхОбменовДаннымиОбластейДанных.ДобавитьЗапись(СтруктураЗаписи);
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Функция КонечныеТочкиКорреспондентовСтруктурыДанных_2_1_2_0()
	
	Результат = Новый Соответствие;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	НастройкиТранспортаОбмена.Узел КАК КонечнаяТочкаКорреспондента,
	|	НастройкиТранспортаОбмена.WSURLВебСервиса КАК Адрес
	|ИЗ
	|	РегистрСведений.НастройкиТранспортаОбмена КАК НастройкиТранспортаОбмена
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(НастройкиТранспортаОбмена.Узел) В (&Типы)";
	
	Типы = Новый Массив;
	Типы.Добавить(Тип("ПланОбменаСсылка.ОбменСообщениями"));
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Типы", Типы);
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Результат.Вставить(Выборка.Адрес, Выборка.КонечнаяТочкаКорреспондента);
		
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

Функция ОтносительныйКаталогОбменаИнформацией(Знач Каталог)
	
	Если ПустаяСтрока(Каталог) Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Неправильный формат каталога обмена информацией ""%1"".'"),
			Каталог);
	КонецЕсли;
	
	Разделитель = "/";
	
	Если Найти(Каталог, Разделитель) = 0 Тогда
		
		Разделитель = "\";
		
		Если Найти(Каталог, Разделитель) = 0 Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Неправильный формат каталога обмена информацией ""%1"".'"),
				Каталог);
		КонецЕсли;
		
	КонецЕсли;
	
	Каталоги = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Каталог, Разделитель);
	
	Если Каталоги.Количество() = 0 Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Неправильный формат каталога обмена информацией ""%1"".'"),
			Каталог);
	КонецЕсли;
	
	Результат = Каталоги[Каталоги.ВГраница()];
	
	Если ПустаяСтрока(Результат) Тогда
		
		Если Каталоги.Количество() = 1 Тогда
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Неправильный формат каталога обмена информацией ""%1"".'"),
				Каталог);
		КонецЕсли;
		
		Результат = Каталоги[Каталоги.ВГраница() - 1];
		
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

//

// Для внутреннего использования
//
Процедура ПриОтправкеДанныхПодчиненному(ЭлементДанных, ОтправкаЭлемента, Знач СозданиеНачальногоОбраза, Получатель) Экспорт
	
	Если Получатель = Неопределено Тогда
		
		//
		
	ИначеЕсли ОтправкаЭлемента = ОтправкаЭлементаДанных.Удалить
		ИЛИ ОтправкаЭлемента = ОтправкаЭлементаДанных.Игнорировать Тогда
		
		// Стандартную обработку не переопределяем
		
	ИначеЕсли СозданиеНачальногоОбраза
		И ОбщегоНазначенияПовтИсп.РазделениеВключено()
		И АвтономнаяРаботаСлужебный.ЭтоУзелАвтономногоРабочегоМеста(Получатель.Ссылка)
		И ОбщегоНазначения.ЭтоРазделенныйОбъектМетаданных(ЭлементДанных.Метаданные(),
			ОбщегоНазначенияПовтИсп.РазделительОсновныхДанных()) Тогда
		
		ОтправкаЭлемента = ОтправкаЭлементаДанных.Игнорировать;
		
		ЗаписатьXML(Получатель.ДополнительныеСвойства.ВыгруженныеДанные, ЭлементДанных);
		
	КонецЕсли;
	
КонецПроцедуры

// Для внутреннего использования
//
Процедура ПриОтправкеДанныхГлавному(ЭлементДанных, ОтправкаЭлемента, Получатель) Экспорт
	
	Если ОтправкаЭлемента = ОтправкаЭлементаДанных.Игнорировать Тогда
		//
	ИначеЕсли АвтономнаяРаботаСлужебный.ЭтоАвтономноеРабочееМесто() Тогда
		
		Если ТипЗнч(ЭлементДанных) = Тип("УдалениеОбъекта") Тогда
			
			ОбъектМетаданных = ЭлементДанных.Ссылка.Метаданные();
			
		Иначе
			
			ОбъектМетаданных = ЭлементДанных.Метаданные();
			
		КонецЕсли;
		
		Если Не ОбщегоНазначения.ЭтоРазделенныйОбъектМетаданных(ОбъектМетаданных,
				ОбщегоНазначенияПовтИсп.РазделительОсновныхДанных()) Тогда
			
			ОтправкаЭлемента = ОтправкаЭлементаДанных.Игнорировать;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Для внутреннего использования
//
Процедура ПриПолученииДанныхОтПодчиненного(ЭлементДанных, ПолучениеЭлемента, ОтправкаНазад, Отправитель) Экспорт
	
	Если ПолучениеЭлемента = ПолучениеЭлементаДанных.Игнорировать Тогда
		//
	ИначеЕсли ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		
		Если ТипЗнч(ЭлементДанных) = Тип("УдалениеОбъекта") Тогда
			
			ОбъектМетаданных = ЭлементДанных.Ссылка.Метаданные();
			
		Иначе
			
			ОбъектМетаданных = ЭлементДанных.Метаданные();
			
		КонецЕсли;
		
		Если Не ОбщегоНазначения.ЭтоРазделенныйОбъектМетаданных(ОбъектМетаданных,
				ОбщегоНазначенияПовтИсп.РазделительОсновныхДанных()) Тогда
			
			ПолучениеЭлемента = ПолучениеЭлементаДанных.Игнорировать;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

//

// Обработчик снятия константы ИспользоватьСинхронизациюДанных.
//
//  Параметры:
// Отказ – Булево. Флаг отказа отключения синхронизации данных.
// Если установить в значение Истина, то синхронизация отключена не будет.
//
Процедура ПриОтключенииСинхронизацииДанных(Отказ) Экспорт
	
	Константы.ИспользоватьАвтономнуюРаботуВМоделиСервиса.Установить(Ложь);
	Константы.ИспользоватьСинхронизациюДанныхВМоделиСервисаСЛокальнойПрограммой.Установить(Ложь);
	Константы.ИспользоватьСинхронизациюДанныхВМоделиСервисаСПриложениемВИнтернете.Установить(Ложь);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий подсистем БСП

// Заполняет структуру параметров, необходимых для работы клиентского кода
// при завершении работы конфигурации, т.е. в обработчиках:
// - ПередЗавершениемРаботыСистемы,
// - ПриЗавершенииРаботыСистемы
//
// Параметры:
//   Параметры   - Структура - структура параметров.
//
Процедура ПриДобавленииПараметровРаботыКлиентскойЛогикиСтандартныхПодсистемПриЗавершении(Параметры) Экспорт
	
	ДобавитьПараметрыРаботыКлиентаПриЗавершении(Параметры);
	
КонецПроцедуры

// Заполняет соответствие имен методов их псевдонимам для вызова из очереди заданий
//
// Параметры:
//  СоответствиеИменПсевдонимам - Соответствие
//   Ключ - Псевдоним метода, например ОчиститьОбластьДанных
//   Значение - Имя метода для вызова, например РаботаВМоделиСервиса.ОчиститьОбластьДанных
//    В качестве значения можно указать Неопределено, в этом случае считается что имя 
//    совпадает с псевдонимом
//
Процедура ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам) Экспорт
	
	СоответствиеИменПсевдонимам.Вставить("ОбменДаннымиВМоделиСервиса.УстановитьПризнакИзмененияДанных"); 
	СоответствиеИменПсевдонимам.Вставить("ОбменДаннымиВМоделиСервиса.ВыполнитьОбменДанными");
	СоответствиеИменПсевдонимам.Вставить("ОбменДаннымиВМоделиСервиса.ВыполнитьДействиеСценарияОбменаДаннымиВПервойИнформационнойБазе");
	СоответствиеИменПсевдонимам.Вставить("ОбменДаннымиВМоделиСервиса.ВыполнитьДействиеСценарияОбменаДаннымиВоВторойИнформационнойБазе");
	
КонецПроцедуры

// Формирует список параметров ИБ.
//
// Параметры:
// ТаблицаПараметров - ТаблицаЗначений - таблица описания параметров.
// Описание состав колонок - см. РаботаВМоделиСервиса.ПолучитьТаблицуПараметровИБ()
//
Процедура ПриЗаполненииТаблицыПараметровИБ(Знач ТаблицаПараметров) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		МодульРаботаВМоделиСервиса = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("РаботаВМоделиСервиса");
		МодульРаботаВМоделиСервиса.ДобавитьКонстантуВТаблицуПараметровИБ(ТаблицаПараметров, "АдресДляВосстановленияПароляУчетнойЗаписи");
	КонецЕсли;
	
КонецПроцедуры

// Обработчик "После определения получателей".
// Вызывается при регистрации объектов в плане обмена.
// Устанавливает константу-признак изменения данных
// и отсылает менеджеру сервиса сообщение об изменении с номером текущей области.
//
// Параметры:
// Данные - СправочникОбъект или ДокументОбъект - Объект для получения значений реквизитов и других свойств.
// Получатели - Массив - Массив элементов типа ПланОбменаСсылка.<Имя> - Узлы плана обмена.
// ИмяПланаОбмена - Строка.
//
Процедура ПослеОпределенияПолучателей(Данные, Получатели, ИмяПланаОбмена) Экспорт
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		
		Если Данные.ОбменДанными.Загрузка Тогда
			Возврат;
		КонецЕсли;
		
		Если Получатели.Количество() > 0
			И ОбменДаннымиВМоделиСервисаПовтИсп.ЭтоПланОбменаСинхронизацииДанных(ИмяПланаОбмена)
			И Не ПолучитьФункциональнуюОпцию("ЗарегистрированыИзмененияДанных") Тогда
			
			Если ОбщегоНазначенияПовтИсп.СеансЗапущенБезРазделителей() Тогда
				
				УстановитьПризнакИзмененияДанных();
			Иначе
				
				Попытка
					ФоновыеЗадания.Выполнить("ОбменДаннымиВМоделиСервиса.УстановитьПризнакИзмененияДанных",, "1");
				Исключение
					// Дополнительная обработка исключения не требуется
					// ожидаемое исключение - дублирование задание с таким же ключом
				КонецПопытки;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		// Выгружаем в сервис изменения только для прикладных данных (разделенных
		// разделителем ОбластьДанныхОсновныеДанные)
		Если АвтономнаяРаботаСлужебный.ЭтоАвтономноеРабочееМесто()
			И Не ОбщегоНазначения.ЭтоРазделенныйОбъектМетаданных(Данные.Метаданные(),
				ОбщегоНазначенияПовтИсп.РазделительОсновныхДанных()) Тогда
			
			ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Получатели, АвтономнаяРаботаСлужебный.ПриложениеВСервисе());
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Заполняет структуру массивами поддерживаемых версий всех подлежащих версионированию подсистем,
// используя в качестве ключей названия подсистем.
// Обеспечивает функциональность Web-сервиса InterfaceVersion.
// При внедрении надо поменять тело процедуры так, чтобы она возвращала актуальные наборы версий (см. пример.ниже).
//
// Параметры:
// СтруктураПоддерживаемыхВерсий - Структура: 
//	- Ключи = Названия подсистем. 
//	- Значения = Массивы названий поддерживаемых версий.
//
// Пример реализации:
//
//	// СервисПередачиФайлов
//	МассивВерсий = Новый Массив;
//	МассивВерсий.Добавить("1.0.1.1");	
//	МассивВерсий.Добавить("1.0.2.1"); 
//	СтруктураПоддерживаемыхВерсий.Вставить("СервисПередачиФайлов", МассивВерсий);
//	// Конец СервисПередачиФайлов
//
Процедура ПриОпределенииПоддерживаемыхВерсийПрограммныхИнтерфейсов(Знач СтруктураПоддерживаемыхВерсий) Экспорт
	
	МассивВерсий = Новый Массив;
	МассивВерсий.Добавить("2.0.1.6");
	МассивВерсий.Добавить("2.1.1.7");
	МассивВерсий.Добавить("2.1.2.1");
	МассивВерсий.Добавить("2.1.5.17");
	МассивВерсий.Добавить("2.1.6.1");
	СтруктураПоддерживаемыхВерсий.Вставить("ОбменДаннымиВМоделиСервиса", МассивВерсий);
	
КонецПроцедуры

// Получает список обработчиков сообщений, которые обрабатывают подсистемы библиотеки.
// 
// Параметры:
//  Обработчики - ТаблицаЗначений - состав полей см. в ОбменСообщениями.НоваяТаблицаОбработчиковСообщений
// 
Процедура ПриОпределенииОбработчиковКаналовСообщений(Обработчики) Экспорт
	
	СообщенияОбменаДаннымиОбработчикСообщения.ПолучитьОбработчикиКаналовСообщений(Обработчики);
	
КонецПроцедуры

// Добавляет параметры работы клиентской логики при запуске системы для подсистемы обмена данными в модели сервиса
//
Процедура ПриДобавленииПараметровРаботыКлиентскойЛогикиСтандартныхПодсистемПриЗапуске(Параметры) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Параметры.Вставить("ЭтоАвтономноеРабочееМесто",
		АвтономнаяРаботаСлужебный.ЭтоАвтономноеРабочееМесто());
	Параметры.Вставить("СинхронизироватьДанныеСПриложениемВИнтернетеПриНачалеРаботы",
		АвтономнаяРаботаСлужебный.СинхронизироватьДанныеСПриложениемВИнтернетеПриНачалеРаботы());
	Параметры.Вставить("СинхронизироватьДанныеСПриложениемВИнтернетеПриЗавершенииРаботы",
		АвтономнаяРаботаСлужебный.СинхронизироватьДанныеСПриложениемВИнтернетеПриЗавершенииРаботы());
	Параметры.Вставить("ОткрытьПомощникНастройкиАвтономногоРабочегоМеста",
		АвтономнаяРаботаСлужебный.ОткрытьПомощникНастройкиАвтономногоРабочегоМеста());
КонецПроцедуры

// Заполняет структуру параметров, необходимых для работы клиентского кода
// конфигурации.
//
// Параметры:
//   Параметры   - Структура - структура параметров.
//
Процедура ПриДобавленииПараметровРаботыКлиентскойЛогикиСтандартныхПодсистем(Параметры) Экспорт
	
	ДобавитьПараметрыРаботыКлиента(Параметры);
	
КонецПроцедуры

// Обработчик, вызываемый при определении объектов метаданных, не переносящихся между моделями при выгрузке / загрузке данных.
//
// Параметры
//  Объекты - Массив(ОбъектМетаданных).
//
Процедура ПриОпределенииОбъектовМетаданныхИсключаемыхИзВыгрузкиЗагрузки(Объекты) Экспорт
	
	Объекты.Добавить(Метаданные.Константы.ДатаОбновленияПовторноИспользуемыхЗначенийМРО);
	Объекты.Добавить(Метаданные.Константы.ЗарегистрированыИзмененияДанных);
	Объекты.Добавить(Метаданные.Константы.НастройкиПодчиненногоУзлаРИБ);
	Объекты.Добавить(Метаданные.Константы.ПрефиксПоследнегоАвтономногоРабочегоМеста);
	Объекты.Добавить(Метаданные.Константы.ПрефиксУзлаРаспределеннойИнформационнойБазы);
	
	Объекты.Добавить(Метаданные.РегистрыСведений.ИзмененияОбщихДанныхУзлов);
	Объекты.Добавить(Метаданные.РегистрыСведений.НастройкиТранспортаОбменаОбластиДанных);
	Объекты.Добавить(Метаданные.РегистрыСведений.ОбщиеНастройкиУзловИнформационныхБаз);
	Объекты.Добавить(Метаданные.РегистрыСведений.РезультатыОбменаДанными);
	Объекты.Добавить(Метаданные.РегистрыСведений.СессииОбменаСообщениямиСистемы);
	Объекты.Добавить(Метаданные.РегистрыСведений.СоответствияОбъектовИнформационныхБаз);
	
КонецПроцедуры

// Выполняет удаление файлов сообщений обмена, которые не были удалены из-за сбоев в работе системы.
// Удалению подлежат файлы с датой размещения более суток от текущей универсальной даты.
// Анализируется РС.СообщенияОбменаДаннымиОбластейДанных
//
// Параметры:
// Нет.
//
Процедура ПриУдаленииНеактуальныхСообщенийОбмена() Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СообщенияОбменаДанными.ИдентификаторСообщения КАК ИдентификаторСообщения,
	|	СообщенияОбменаДанными.ИмяФайлаСообщения КАК ИмяФайла
	|ИЗ
	|	РегистрСведений.СообщенияОбменаДаннымиОбластейДанных КАК СообщенияОбменаДанными
	|ГДЕ
	|	СообщенияОбменаДанными.ДатаЗакладкиСообщения < &ДатаАктуальности";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаАктуальности", ТекущаяУниверсальнаяДата() - 60 * 60 * 24);
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ПолноеИмяФайлаСообщения = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(ОбщегоНазначенияПовтИсп.КаталогВременногоХранилищаФайлов(), Выборка.ИмяФайла);
		
		ФайлСообщения = Новый Файл(ПолноеИмяФайлаСообщения);
		
		Если ФайлСообщения.Существует() Тогда
			
			Попытка
				УдалитьФайлы(ФайлСообщения.ПолноеИмя);
			Исключение
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Обмен данными'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Ошибка,,, ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				Продолжить;
			КонецПопытки;
		КонецЕсли;
		
		// Удаляем информацию о файле сообщения обмена из хранилища
		СтруктураЗаписи = Новый Структура;
		СтруктураЗаписи.Вставить("ИдентификаторСообщения", Строка(Выборка.ИдентификаторСообщения));
		РегистрыСведений.СообщенияОбменаДаннымиОбластейДанных.УдалитьЗапись(СтруктураЗаписи);
		
	КонецЦикла;
	
КонецПроцедуры

// Получение имени файла по его идентификатору из хранилища.
// Если файла с указанным идентификатором нет, то вызывается исключение.
// Если файл найден, то возвращается его имя, при этом удаляется информация об этом файле из хранилища.
//
// Параметры:
//	ИдентификаторФайла - УникальныйИдентификатор - идентификатор получаемого файла.
//	ИмяФайла           - Строка - имя файла, из хранилища.
//
Процедура ПриПолученииФайлаИзХранилища(Знач ИдентификаторФайла, ИмяФайла) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	СообщенияОбменаДанными.ИмяФайлаСообщения КАК ИмяФайла
	|ИЗ
	|	РегистрСведений.СообщенияОбменаДаннымиОбластейДанных КАК СообщенияОбменаДанными
	|ГДЕ
	|	СообщенияОбменаДанными.ИдентификаторСообщения = &ИдентификаторСообщения";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ИдентификаторСообщения", Строка(ИдентификаторФайла));
	Запрос.Текст = ТекстЗапроса;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		Описание = НСтр("ru = 'Файл с идентификатором %1 не обнаружен.'");
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Описание, Строка(ИдентификаторФайла));
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	ИмяФайла = Выборка.ИмяФайла;
	
	// Удаляем информацию о файле сообщения обмена из хранилища
	СтруктураЗаписи = Новый Структура;
	СтруктураЗаписи.Вставить("ИдентификаторСообщения", Строка(ИдентификаторФайла));
	РегистрыСведений.СообщенияОбменаДаннымиОбластейДанных.УдалитьЗапись(СтруктураЗаписи);
	
КонецПроцедуры

// Помещение файла в хранилище
//
Процедура ПриПомещенииФайлаВХранилище(Знач СтруктураЗаписи) Экспорт
	
	РегистрыСведений.СообщенияОбменаДаннымиОбластейДанных.ДобавитьЗапись(СтруктураЗаписи);
	
КонецПроцедуры

// Используется для получения объектов метаданных обязательных для плана обмена.
// Если подсистема имеет объекты метаданных обязательные для включения в состав плана обмена,
// то в параметр <Объект> необходимо добавить эти объекты метаданных.
//
// Параметры:
// Объекты – Массив. Массив объектов метаданных конфигурации, которые необходимо включить в состав плана обмена.
// РаспределеннаяИнформационнаяБаза (только чтение) – Булево. Признак получения объектов для плана обмена РИБ.
// Истина – требуется получить список объектов плана обмена РИБ;
// Ложь – требуется получить список для плана обмена НЕ РИБ.
//
Процедура ПриПолученииОбязательныхОбъектовПланаОбмена(Объекты, Знач РаспределеннаяИнформационнаяБаза) Экспорт
	
КонецПроцедуры

// Используется для получения объектов метаданных, которые не следует включать в состав плана обмена.
// Если подсистема имеет объекты метаданных, которые не следует включать в состав плана обмена,
// то в параметр <Объект> необходимо добавить эти объекты метаданных.
//
// Параметры:
// Объекты – Массив. Массив объектов метаданных конфигурации, которые не следует включать в состав плана обмена.
// РаспределеннаяИнформационнаяБаза (только чтение) – Булево. Признак получения объектов для плана обмена РИБ.
// Истина – требуется получить список объектов-исключений плана обмена РИБ;
// Ложь – требуется получить список для плана обмена НЕ РИБ.
//
Процедура ПриПолученииОбъектовИсключенийПланаОбмена(Объекты, Знач РаспределеннаяИнформационнаяБаза) Экспорт
	
	Если РаспределеннаяИнформационнаяБаза Тогда
		
		Объекты.Добавить(Метаданные.Константы.ЗарегистрированыИзмененияДанных);
		Объекты.Добавить(Метаданные.Константы.ИспользоватьАвтономнуюРаботуВМоделиСервиса);
		Объекты.Добавить(Метаданные.Константы.ИспользоватьСинхронизациюДанныхВМоделиСервисаСЛокальнойПрограммой);
		Объекты.Добавить(Метаданные.Константы.ИспользоватьСинхронизациюДанныхВМоделиСервисаСПриложениемВИнтернете);
		Объекты.Добавить(Метаданные.Константы.НастройкаАвтономногоРабочегоМестаЗавершена);
		Объекты.Добавить(Метаданные.Константы.ПрефиксПоследнегоАвтономногоРабочегоМеста);
		Объекты.Добавить(Метаданные.Константы.СинхронизироватьДанныеСПриложениемВИнтернетеПриЗавершенииРаботыПрограммы);
		Объекты.Добавить(Метаданные.Константы.СинхронизироватьДанныеСПриложениемВИнтернетеПриНачалеРаботыПрограммы);
		
		Объекты.Добавить(Метаданные.РегистрыСведений.НастройкиТранспортаОбменаОбластейДанных);
		Объекты.Добавить(Метаданные.РегистрыСведений.НастройкиТранспортаОбменаОбластиДанных);
		Объекты.Добавить(Метаданные.РегистрыСведений.СессииОбменаСообщениямиСистемы);
		Объекты.Добавить(Метаданные.РегистрыСведений.СостоянияОбменовДаннымиОбластейДанных);
		Объекты.Добавить(Метаданные.РегистрыСведений.СостоянияУспешныхОбменовДаннымиОбластейДанных);
		Объекты.Добавить(Метаданные.РегистрыСведений.СообщенияОбменаДаннымиОбластейДанных);
		
	КонецЕсли;
	
КонецПроцедуры

// Используется для получения объектов метаданных, которые должны входить в состав плана обмена
// и НЕ должны входить в состав подписок на события регистрации изменений для этого плана обмена.
// Эти объекты метаданных используются только в момент создания начального образа подчиненного узла
// и не мигрируют в процессе обмена.
// Если подсистема имеет объекты метаданных, которые участвуют только в создании начального образа подчиненного узла,
// то в параметр <Объект> необходимо добавить эти объекты метаданных.
//
// Параметры:
// Объекты – Массив. Массив объектов метаданных конфигурации.
//
Процедура ПриПолученииОбъектовНачальногоОбразаПланаОбмена(Объекты) Экспорт
	
	Объекты.Добавить(Метаданные.Константы.АдресДляВосстановленияПароляУчетнойЗаписи);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Экспортные служебные процедуры и функции

// Выполняет выгрузку данных в обмене между областями данных.
//
// Параметры:
//  Отказ         - Булево - флаг отказа; поднимается в случае возникновения ошибки при выгрузке данных
//  Корреспондент – ПланОбменаСсылка – узел плана обмена, для которого выполняется выгрузка данных
// 
Процедура ВыполнитьВыгрузкуДанных(Отказ, Знач Корреспондент) Экспорт
	
	ОбменДаннымиСервер.ВыполнитьДействиеОбменаДляУзлаИнформационнойБазы(
		Отказ, Корреспондент, Перечисления.ДействияПриОбмене.ВыгрузкаДанных);
КонецПроцедуры

// Выполняет загрузку данных в обмене между областями данных.
//
// Параметры:
//  Отказ         - Булево - флаг отказа; поднимается в случае возникновения ошибки при загрузке данных
//  Корреспондент – ПланОбменаСсылка – узел плана обмена, для которого выполняется загрузка данных
// 
Процедура ВыполнитьЗагрузкуДанных(Отказ, Знач Корреспондент) Экспорт
	
	ОбменДаннымиСервер.ВыполнитьДействиеОбменаДляУзлаИнформационнойБазы(
		Отказ, Корреспондент, Перечисления.ДействияПриОбмене.ЗагрузкаДанных);
КонецПроцедуры

//

// Инициирует обмен данными между двумя ИБ.
//
// Параметры:
// СценарийОбменаДанными - ТаблицаЗначений.
//
Процедура ВыполнитьОбменДанными(СценарийОбменаДанными) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Сбрасываем признак кумулятивного изменения данных для обмена
	Константы.ЗарегистрированыИзмененияДанных.Установить(Ложь);
	
	Если СценарийОбменаДанными.Количество() > 0 Тогда
		
		// Запускаем выполнение сценария
		ВыполнитьДействиеСценарияОбменаДаннымиВПервойИнформационнойБазе(0, СценарийОбменаДанными);
		
	КонецЕсли;
	
КонецПроцедуры

// Выполнить действие сценария обмена, заданное строкой таблицы значений, для первой из двух обменивающихся ИБ.
//
// Параметры:
// ИндексСтрокиСценария - Число - Индекс строки в таблице СценарийОбменаДанными.
// СценарийОбменаДанными - ТаблицаЗначений.
//
Процедура ВыполнитьДействиеСценарияОбменаДаннымиВПервойИнформационнойБазе(ИндексСтрокиСценария, СценарийОбменаДанными) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ИндексСтрокиСценария > СценарийОбменаДанными.Количество() - 1 Тогда
		Возврат; // Завершение выполнения сценария
	КонецЕсли;
	
	СтрокаСценария = СценарийОбменаДанными[ИндексСтрокиСценария];
	
	Если СтрокаСценария.НомерИнформационнойБазы = 1 Тогда
		
		УзелИнформационнойБазы = НайтиУзелИнформационнойБазы(СтрокаСценария.ИмяПланаОбмена, СтрокаСценария.КодУзлаИнформационнойБазы);
		
		Если СтрокаСценария.ВыполняемоеДействие = "ЗагрузкаДанных" Тогда
			
			ВыполнитьЗагрузкуДанных(Ложь, УзелИнформационнойБазы);
			
		ИначеЕсли СтрокаСценария.ВыполняемоеДействие = "ВыгрузкаДанных" Тогда
			
			ВыполнитьВыгрузкуДанных(Ложь, УзелИнформационнойБазы);
			
		Иначе
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Неизвестное действие ""%1"" при обмене данными между областями данных.'"),
				СтрокаСценария.ВыполняемоеДействие);
		КонецЕсли;
		
		// Переходим к следующему шагу сценария
		ВыполнитьДействиеСценарияОбменаДаннымиВПервойИнформационнойБазе(ИндексСтрокиСценария + 1, СценарийОбменаДанными);
		
	ИначеЕсли СтрокаСценария.НомерИнформационнойБазы = 2 Тогда
		
		УзелИнформационнойБазы = НайтиУзелИнформационнойБазы(СтрокаСценария.ИмяПланаОбмена, СтрокаСценария.КодЭтогоУзла);
		
		ВерсииКорреспондента = ВерсииКорреспондента(УзелИнформационнойБазы);
		
		Если ВерсииКорреспондента.Найти("2.0.1.6") <> Неопределено Тогда
			
			WSПрокси = ОбменДаннымиВМоделиСервисаПовтИсп.ПолучитьWSПроксиКорреспондента_2_0_1_6(УзелИнформационнойБазы);
			
			Если WSПрокси = Неопределено Тогда
				
				// Переходим к следующему шагу сценария
				ВыполнитьДействиеСценарияОбменаДаннымиВПервойИнформационнойБазе(ИндексСтрокиСценария + 1, СценарийОбменаДанными);
				Возврат;
			КонецЕсли;
			
			WSПрокси.StartExchangeExecutionInSecondDataBase(ИндексСтрокиСценария, СериализаторXDTO.ЗаписатьXDTO(СценарийОбменаДанными));
			
		Иначе
			
			WSПрокси = ОбменДаннымиВМоделиСервисаПовтИсп.ПолучитьWSПроксиКорреспондента(УзелИнформационнойБазы);
			
			Если WSПрокси = Неопределено Тогда
				
				// Переходим к следующему шагу сценария
				ВыполнитьДействиеСценарияОбменаДаннымиВПервойИнформационнойБазе(ИндексСтрокиСценария + 1, СценарийОбменаДанными);
				Возврат;
			КонецЕсли;
			
			WSПрокси.StartExchangeExecutionInSecondDataBase(ИндексСтрокиСценария, ЗначениеВСтрокуВнутр(СценарийОбменаДанными));
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Выполнить действие сценария обмена, заданное строкой таблицы значений, для второй из двух обменивающихся ИБ.
//
// Параметры:
// ИндексСтрокиСценария - Число - Индекс строки в таблице СценарийОбменаДанными.
// СценарийОбменаДанными - ТаблицаЗначений.
//
Процедура ВыполнитьДействиеСценарияОбменаДаннымиВоВторойИнформационнойБазе(ИндексСтрокиСценария, СценарийОбменаДанными) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтрокаСценария = СценарийОбменаДанными[ИндексСтрокиСценария];
	
	УзелИнформационнойБазы = НайтиУзелИнформационнойБазы(СтрокаСценария.ИмяПланаОбмена, СтрокаСценария.КодУзлаИнформационнойБазы);
	
	Если СтрокаСценария.ПорядковыйНомерВыполнения = 1 Тогда
		// Сбрасываем признак кумулятивного изменения данных для обмена
		Константы.ЗарегистрированыИзмененияДанных.Установить(Ложь);
	КонецЕсли;
	
	Если СтрокаСценария.ВыполняемоеДействие = "ЗагрузкаДанных" Тогда
		
		ВыполнитьЗагрузкуДанных(Ложь, УзелИнформационнойБазы);
		
	ИначеЕсли СтрокаСценария.ВыполняемоеДействие = "ВыгрузкаДанных" Тогда
		
		ВыполнитьВыгрузкуДанных(Ложь, УзелИнформационнойБазы);
		
	Иначе
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Неизвестное действие ""%1"" при обмене данными между областями данных.'"),
			СтрокаСценария.ВыполняемоеДействие);
	КонецЕсли;
	
	// Завершение выполнения сценария
	Если ИндексСтрокиСценария = СценарийОбменаДанными.Количество() - 1 Тогда
		
		// Отмечаем выполнение обмена в управляющем приложении
		WSПроксиСервиса = ОбменДаннымиВМоделиСервисаПовтИсп.ПолучитьWSПроксиСервисаОбмена();
		WSПроксиСервиса.CommitExchange(СериализаторXDTO.ЗаписатьXDTO(СценарийОбменаДанными));
		Возврат;
	КонецЕсли;
	
	ВерсииКорреспондента = ВерсииКорреспондента(УзелИнформационнойБазы);
	
	Если ВерсииКорреспондента.Найти("2.0.1.6") <> Неопределено Тогда
		
		WSПрокси = ОбменДаннымиВМоделиСервисаПовтИсп.ПолучитьWSПроксиКорреспондента_2_0_1_6(УзелИнформационнойБазы);
		
		Если WSПрокси <> Неопределено Тогда
			
			WSПрокси.StartExchangeExecutionInFirstDataBase(ИндексСтрокиСценария + 1, СериализаторXDTO.ЗаписатьXDTO(СценарийОбменаДанными));
			
		КонецЕсли;
		
	Иначе
		
		WSПрокси = ОбменДаннымиВМоделиСервисаПовтИсп.ПолучитьWSПроксиКорреспондента(УзелИнформационнойБазы);
		
		Если WSПрокси <> Неопределено Тогда
			
			WSПрокси.StartExchangeExecutionInFirstDataBase(ИндексСтрокиСценария + 1, ЗначениеВСтрокуВнутр(СценарийОбменаДанными));
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Определяет, выполняется ли обмен в настоящее время.
// Для этого посылается запрос к менеджеру сервиса, установлена ли блокировка обмена.
//
// Возвращаемое значение:
// Булево. 
//
Функция ВСистемеВыполняетсяОбменДанными() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	WSПроксиСервиса = ОбменДаннымиВМоделиСервисаПовтИсп.ПолучитьWSПроксиСервисаОбмена();
	
	Возврат WSПроксиСервиса.ExchangeBlockIsSet(ОбщегоНазначения.ЗначениеРазделителяСеанса());
	
КонецФункции

// Возвращает дату последней успешной загрузки текущей области данных для всех узлов ИБ.
// Если синхронизация данных еще не выполнялась, возвращает Неопределено.
//
// Возвращаемое значение:
// Дата; Неопределено. 
//
Функция ДатаПоследнейУспешнойЗагрузкиДляВсехУзловИнформационнойБазы() Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	МИНИМУМ(СостоянияУспешныхОбменовДанными.ДатаОкончания) КАК ДатаОкончания
	|ИЗ
	|	РегистрСведений.СостоянияУспешныхОбменовДаннымиОбластейДанных КАК СостоянияУспешныхОбменовДанными
	|ГДЕ
	|	СостоянияУспешныхОбменовДанными.ДействиеПриОбмене = ЗНАЧЕНИЕ(Перечисление.ДействияПриОбмене.ЗагрузкаДанных)
	|	И СостоянияУспешныхОбменовДанными.УзелИнформационнойБазы.ОбластьДанныхОсновныеДанные = &ОбластьДанных
	|	И СостоянияУспешныхОбменовДанными.УзелИнформационнойБазы.Код ПОДОБНО ""S%""";
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ОбластьДанных", РаботаВМоделиСервиса.ЗначениеРазделителяСеанса());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат ?(ЗначениеЗаполнено(Выборка.ДатаОкончания), Выборка.ДатаОкончания, Неопределено);
	
КонецФункции

// Возвращает статусы синхронизации данных для приложений в модели сервиса
//
Функция СтатусыСинхронизацииДанных() Экспорт
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	СостоянияОбменовДанными.УзелИнформационнойБазы КАК УзелИнформационнойБазы,
	|	ВЫБОР
	|		КОГДА СостоянияОбменовДанными.РезультатВыполненияОбмена = ЗНАЧЕНИЕ(Перечисление.РезультатыВыполненияОбмена.Выполнено)
	|			ИЛИ СостоянияОбменовДанными.РезультатВыполненияОбмена = ЗНАЧЕНИЕ(Перечисление.РезультатыВыполненияОбмена.ВыполненоСПредупреждениями)
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Статус
	|ПОМЕСТИТЬ СостоянияОбменовДаннымиЗагрузка
	|ИЗ
	|	РегистрСведений.СостоянияОбменовДаннымиОбластейДанных КАК СостоянияОбменовДанными
	|ГДЕ
	|	СостоянияОбменовДанными.ДействиеПриОбмене = ЗНАЧЕНИЕ(Перечисление.ДействияПриОбмене.ЗагрузкаДанных)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СостоянияОбменовДанными.УзелИнформационнойБазы КАК УзелИнформационнойБазы,
	|	ВЫБОР
	|		КОГДА СостоянияОбменовДанными.РезультатВыполненияОбмена = ЗНАЧЕНИЕ(Перечисление.РезультатыВыполненияОбмена.Выполнено)
	|			ИЛИ СостоянияОбменовДанными.РезультатВыполненияОбмена = ЗНАЧЕНИЕ(Перечисление.РезультатыВыполненияОбмена.ВыполненоСПредупреждениями)
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Статус
	|ПОМЕСТИТЬ СостоянияОбменовДаннымиВыгрузка
	|ИЗ
	|	РегистрСведений.СостоянияОбменовДаннымиОбластейДанных КАК СостоянияОбменовДанными
	|ГДЕ
	|	СостоянияОбменовДанными.ДействиеПриОбмене = ЗНАЧЕНИЕ(Перечисление.ДействияПриОбмене.ВыгрузкаДанных)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РезультатыОбменаДанными.УзелИнформационнойБазы КАК УзелИнформационнойБазы,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ РезультатыОбменаДанными.ПроблемныйОбъект) КАК Количество
	|ПОМЕСТИТЬ ПроблемыОбменаДанными
	|ИЗ
	|	РегистрСведений.РезультатыОбменаДанными КАК РезультатыОбменаДанными
	|ГДЕ
	|	НЕ РезультатыОбменаДанными.Пропущена
	|СГРУППИРОВАТЬ ПО
	|	РезультатыОбменаДанными.УзелИнформационнойБазы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СостоянияОбменовДаннымиВыгрузка.УзелИнформационнойБазы КАК Приложение,
	|	ЕСТЬNULL(ПроблемыОбменаДанными.Количество, 0)          КАК КоличествоПроблем,
	|	ВЫБОР
	|		КОГДА СостоянияОбменовДаннымиВыгрузка.Статус = 1 ИЛИ СостоянияОбменовДаннымиЗагрузка.Статус = 1
	|			ТОГДА 1 // Ошибка
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ЕСТЬNULL(ПроблемыОбменаДанными.Количество, 0) > 0
	|					ТОГДА 2 // Проблемы обмена
	|				ИНАЧЕ 3 // Нет ошибок и нет проблем обмена
	|			КОНЕЦ
	|	КОНЕЦ КАК Статус
	|ИЗ
	|	СостоянияОбменовДаннымиВыгрузка КАК СостоянияОбменовДаннымиВыгрузка
	|		ЛЕВОЕ СОЕДИНЕНИЕ СостоянияОбменовДаннымиЗагрузка КАК СостоянияОбменовДаннымиЗагрузка
	|		ПО СостоянияОбменовДаннымиВыгрузка.УзелИнформационнойБазы = СостоянияОбменовДаннымиЗагрузка.УзелИнформационнойБазы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПроблемыОбменаДанными КАК ПроблемыОбменаДанными
	|		ПО СостоянияОбменовДаннымиВыгрузка.УзелИнформационнойБазы = ПроблемыОбменаДанными.УзелИнформационнойБазы";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

// Генерирует код узла плана обмена для заданной области данных.
//
// Параметры:
// НомерОбласти - Число - Значение разделителя. 
//
// Возвращаемое значение:
// Строка - Код узла плана обмена для заданной области. 
//
Функция КодУзлаПланаОбменаВСервисе(Знач НомерОбласти) Экспорт
	
	Если ТипЗнч(НомерОбласти) <> Тип("Число") Тогда
		ВызватьИсключение НСтр("ru = 'Неправильный тип параметра номер [1].'");
	КонецЕсли;
	
	Результат = "S0[НомерОбласти]";
	
	Возврат СтрЗаменить(Результат, "[НомерОбласти]", Формат(НомерОбласти, "ЧЦ=7; ЧВН=; ЧГ=0"));
	
КонецФункции

// Формирует имя приложения в сервисе
//
Функция СформироватьНаименованиеПредопределенногоУзла() Экспорт
	
	ИмяПриложения = РаботаВМоделиСервиса.ПолучитьИмяПриложения();
	
	Возврат ?(ПустаяСтрока(ИмяПриложения), НСтр("ru = 'Приложение в Интернете'"), ИмяПриложения);
КонецФункции

// Получает конечную точку для корреспондента.
// Если конечная точка для корреспондента не задана то вызывает исключение.
//
//  Параметры:
// Корреспондент. Тип: ПланОбменаСсылка. Корреспондент, для которого необходимо получить конечную точку.
//
//  Возвращаемое значение:
// Тип: ПланОбменаСсылка.ОбменСообщениями. Конечная точка корреспондента.
//
Функция КонечнаяТочкаКорреспондента(Знач Корреспондент) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	НастройкиТранспортаОбменаОбластиДанных.КонечнаяТочкаКорреспондента КАК КонечнаяТочкаКорреспондента
	|ИЗ
	|	РегистрСведений.НастройкиТранспортаОбменаОбластиДанных КАК НастройкиТранспортаОбменаОбластиДанных
	|ГДЕ
	|	НастройкиТранспортаОбменаОбластиДанных.Корреспондент = &Корреспондент";
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Корреспондент", Корреспондент);
	Запрос.Текст = ТекстЗапроса;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		СтрокаСообщения = НСтр("ru = 'Не назначена конечная точка корреспондента для ""%1"".'");
		СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, Строка(Корреспондент));
		ВызватьИсключение СтрокаСообщения;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.КонечнаяТочкаКорреспондента;
КонецФункции

Функция ИмяКаталогаСообщенийОбмена(Знач Код1, Знач Код2)
	
	Возврат СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Exchange %1-%2", Код1, Код2);
	
КонецФункции

//

// Отправляет сообщение
//
// Параметры:
//	Сообщение - ОбъектXDTO - сообщение
//
Функция ОтправитьСообщение(Знач Сообщение) Экспорт
	
	Сообщение.Body.Zone = ОбщегоНазначения.ЗначениеРазделителяСеанса();
	Сообщение.Body.SessionId = РегистрыСведений.СессииОбменаСообщениямиСистемы.НоваяСессия();
	
	СообщенияВМоделиСервиса.ОтправитьСообщение(Сообщение, РаботаВМоделиСервисаПовтИсп.КонечнаяТочкаМенеджераСервиса(), Истина);
	
	Возврат Сообщение.Body.SessionId;
КонецФункции

//

// Для внутреннего использования
//
Процедура СоздатьНастройкуОбмена(
			Знач ИмяПланаОбмена,
			Знач КодКорреспондента,
			Знач НаименованиеКорреспондента,
			Знач КонечнаяТочкаКорреспондента,
			Знач Настройки,
			Корреспондент = Неопределено,
			ЭтоКорреспондент = Ложь,
			РежимСовместимостиСБСП_2_0_0 = Ложь,
			Знач Префикс = ""
	) Экспорт
	
	НачатьТранзакцию();
	Попытка
		
		КодЭтогоУзла = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПланыОбмена[ИмяПланаОбмена].ЭтотУзел(), "Код");
		
		// Проверяем, что для текущего узла задан код
		Если ПустаяСтрока(КодЭтогоУзла) Тогда
			
			// Код узла задается в обработчике обновления ИБ
			СтрокаСообщения = НСтр("ru = 'Для предопределенного узла плана обмена ""%1"" не задан код.'");
			СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, ИмяПланаОбмена);
			ВызватьИсключение СтрокаСообщения;
		КонецЕсли;
		
		// Проверяем префикс этой ИБ
		Если ПустаяСтрока(ПолучитьФункциональнуюОпцию("ПрефиксИнформационнойБазы")) Тогда
			
			Если ПустаяСтрока(Префикс) Тогда
				ВызватьИсключение НСтр("ru = 'В Менеджере сервиса не установлен префикс для этого приложения.'");
			КонецЕсли;
			
			ОбменДаннымиСервер.УстановитьПрефиксИнформационнойБазы(Префикс);
			
		КонецЕсли;
		
		// Создаем/обновляем узел корреспондента
		Корреспондент = ПланыОбмена[ИмяПланаОбмена].НайтиПоКоду(КодКорреспондента);
		
		ПроверитьКод = Ложь;
		
		Если Корреспондент.Пустая() Тогда
			КорреспондентОбъект = ПланыОбмена[ИмяПланаОбмена].СоздатьУзел();
			КорреспондентОбъект.Код = КодКорреспондента;
			ПроверитьКод = Истина;
		Иначе
			КорреспондентОбъект = Корреспондент.ПолучитьОбъект();
		КонецЕсли;
		
		КорреспондентОбъект.Наименование = НаименованиеКорреспондента;
		
		ОбменДаннымиСобытия.УстановитьЗначенияОтборовНаУзле(КорреспондентОбъект, Настройки);
		
		КорреспондентОбъект.НомерОтправленного = 0;
		КорреспондентОбъект.НомерПринятого     = 0;
		
		КорреспондентОбъект.РегистрироватьИзменения = Истина;
		
		КорреспондентОбъект.ДополнительныеСвойства.Вставить("Загрузка");
		КорреспондентОбъект.Записать();
		
		Корреспондент = КорреспондентОбъект.Ссылка;
		
		ФактическийКодКорреспондента = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Корреспондент, "Код");
		
		Если ПроверитьКод И КодКорреспондента <> ФактическийКодКорреспондента Тогда
			
			СтрокаСообщения = НСтр("ru = 'Ошибка назначения кода узла корреспондента.
				|Назначенное значение ""%1""
				|Фактическое значение ""%2"".'");
			СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, КодКорреспондента, ФактическийКодКорреспондента);
			ВызватьИсключение СтрокаСообщения;
		КонецЕсли;
		
		// Работа с настройками транспорта сообщений обмена
		Если ЭтоКорреспондент Тогда
			ОтносительныйКаталогОбменаИнформацией = ИмяКаталогаСообщенийОбмена(КодКорреспондента, КодЭтогоУзла);
		Иначе
			ОтносительныйКаталогОбменаИнформацией = ИмяКаталогаСообщенийОбмена(КодЭтогоУзла, КодКорреспондента);
		КонецЕсли;
		
		НастройкиТранспорта = РегистрыСведений.НастройкиТранспортаОбменаОбластейДанных.НастройкиТранспорта(КонечнаяТочкаКорреспондента);
		
		Если НастройкиТранспорта.ВидТранспортаСообщенийОбменаПоУмолчанию = Перечисления.ВидыТранспортаСообщенийОбмена.FILE Тогда
			
			// Обмен через сетевой каталог
			
			FILEОбщийКаталогОбменаИнформацией = СокрЛП(НастройкиТранспорта.FILEКаталогОбменаИнформацией);
			
			Если ПустаяСтрока(FILEОбщийКаталогОбменаИнформацией) Тогда
				
				СтрокаСообщения = НСтр("ru = 'Не задан каталог обмена информацией для конечной точки ""%1"".'");
				СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, Строка(КонечнаяТочкаКорреспондента));
				ВызватьИсключение СтрокаСообщения;
			КонецЕсли;
			
			ОбщийКаталог = Новый Файл(FILEОбщийКаталогОбменаИнформацией);
			
			Если Не ОбщийКаталог.Существует() Тогда
				
				СтрокаСообщения = НСтр("ru = 'Каталог обмена информацией ""%1"" не существует.'");
				СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения, FILEОбщийКаталогОбменаИнформацией);
				ВызватьИсключение СтрокаСообщения;
			КонецЕсли;
			
			Если Не РежимСовместимостиСБСП_2_0_0 Тогда
				
				FILEАбсолютныйКаталогОбменаИнформацией = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(
					FILEОбщийКаталогОбменаИнформацией,
					ОтносительныйКаталогОбменаИнформацией
				);
				
				// Создаем каталог обмена сообщениями
				АбсолютныйКаталог = Новый Файл(FILEАбсолютныйКаталогОбменаИнформацией);
				Если Не АбсолютныйКаталог.Существует() Тогда
					СоздатьКаталог(АбсолютныйКаталог.ПолноеИмя);
				КонецЕсли;
				
				// Сохраняем настройки транспорта сообщений обмена для текущей области данных
				СтруктураЗаписи = Новый Структура;
				СтруктураЗаписи.Вставить("Корреспондент", Корреспондент);
				СтруктураЗаписи.Вставить("КонечнаяТочкаКорреспондента", КонечнаяТочкаКорреспондента);
				СтруктураЗаписи.Вставить("КаталогОбменаИнформацией", ОтносительныйКаталогОбменаИнформацией);
				
				РегистрыСведений.НастройкиТранспортаОбменаОбластиДанных.ОбновитьЗапись(СтруктураЗаписи);
			КонецЕсли;
			
		ИначеЕсли НастройкиТранспорта.ВидТранспортаСообщенийОбменаПоУмолчанию = Перечисления.ВидыТранспортаСообщенийОбмена.FTP Тогда
			
			// Обмен через FTP-сервер
			
			НастройкиFTP = ОбменДаннымиСервер.FTPНастройкиСоединения();
			НастройкиFTP.Сервер              = НастройкиТранспорта.FTPСервер;
			НастройкиFTP.Порт                = НастройкиТранспорта.FTPСоединениеПорт;
			НастройкиFTP.ИмяПользователя     = НастройкиТранспорта.FTPСоединениеПользователь;
			НастройкиFTP.ПарольПользователя  = НастройкиТранспорта.FTPСоединениеПароль;
			НастройкиFTP.ПассивноеСоединение = НастройкиТранспорта.FTPСоединениеПассивноеСоединение;
			
			FTPСоединение = ОбменДаннымиСервер.FTPСоединение(НастройкиFTP);
			
			АбсолютныйКаталогОбменаИнформацией = ОбщегоНазначенияКлиентСервер.ПолучитьПолноеИмяФайла(
				НастройкиТранспорта.FTPПуть,
				ОтносительныйКаталогОбменаИнформацией
			);
			Если Не ОбменДаннымиСервер.FTPКаталогСуществует(АбсолютныйКаталогОбменаИнформацией, ОтносительныйКаталогОбменаИнформацией, FTPСоединение) Тогда
				FTPСоединение.СоздатьКаталог(АбсолютныйКаталогОбменаИнформацией);
			КонецЕсли;
			
			// Сохраняем настройки транспорта сообщений обмена для текущей области данных
			СтруктураЗаписи = Новый Структура;
			СтруктураЗаписи.Вставить("Корреспондент", Корреспондент);
			СтруктураЗаписи.Вставить("КонечнаяТочкаКорреспондента", КонечнаяТочкаКорреспондента);
			СтруктураЗаписи.Вставить("КаталогОбменаИнформацией", ОтносительныйКаталогОбменаИнформацией);
			
			РегистрыСведений.НастройкиТранспортаОбменаОбластиДанных.ОбновитьЗапись(СтруктураЗаписи);
			
		Иначе
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Вид транспорта сообщений обмена ""%1"" для конечной точки %2 не поддерживается.'"),
				Строка(НастройкиТранспорта.ВидТранспортаСообщенийОбменаПоУмолчанию),
				Строка(КонечнаяТочкаКорреспондента)
				);
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

// Обновляет настройки и устанавливает значения по умолчанию на узле
//
Процедура ОбновитьНастройкуОбмена(
		Знач Корреспондент,
		Знач ЗначенияПоУмолчаниюНаУзле
	) Экспорт
	
	КорреспондентОбъект = Корреспондент.ПолучитьОбъект();
	
	// установка значений по умолчанию 
	ОбменДаннымиСобытия.УстановитьЗначенияПоУмолчаниюНаУзле(КорреспондентОбъект, ЗначенияПоУмолчаниюНаУзле);
	
	КорреспондентОбъект.ДополнительныеСвойства.Вставить("ПолучениеСообщенияОбмена");
	КорреспондентОбъект.Записать();
	
КонецПроцедуры

//

// Сохраняет данные сессии и отмечает успешное выполнение сессии
//
Процедура СохранитьДанныеСессии(Знач Сообщение, Знач Представление = "") Экспорт
	
	Если Не ПустаяСтрока(Представление) Тогда
		Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = ' {%1}'"), Представление);
	КонецЕсли;
	
	СтрокаСообщения = НСтр("ru = 'Сессия обмена сообщениями системы ""%1"" успешно завершена.%2'",
		ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения,
		Строка(Сообщение.Body.SessionId), Представление);
	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииСессииОбменаСообщениямиСистемы(),
		УровеньЖурналаРегистрации.Информация,,, СтрокаСообщения);
	РегистрыСведений.СессииОбменаСообщениямиСистемы.СохранитьДанныеСессии(Сообщение.Body.SessionId, Сообщение.Body.Data);
	
КонецПроцедуры

// Отмечает успешное выполнение сессии
//
Процедура ЗафиксироватьУспешноеВыполнениеСессии(Знач Сообщение, Знач Представление = "") Экспорт
	
	Если Не ПустаяСтрока(Представление) Тогда
		Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = ' {%1}'"), Представление);
	КонецЕсли;
	
	СтрокаСообщения = НСтр("ru = 'Сессия обмена сообщениями системы ""%1"" успешно завершена.%2'",
		ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения,
		Строка(Сообщение.Body.SessionId), Представление);
	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииСессииОбменаСообщениямиСистемы(),
		УровеньЖурналаРегистрации.Информация,,, СтрокаСообщения);
	РегистрыСведений.СессииОбменаСообщениямиСистемы.ЗафиксироватьУспешноеВыполнениеСессии(Сообщение.Body.SessionId);
	
КонецПроцедуры

// Отмечает неуспешное выполнение сессии
//
Процедура ЗафиксироватьНеуспешноеВыполнениеСессии(Знач Сообщение, Знач Представление = "") Экспорт
	
	Если Не ПустаяСтрока(Представление) Тогда
		Представление = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = ' {%1}'"), Представление);
	КонецЕсли;
	
	СтрокаСообщения = НСтр("ru = 'Ошибка выполнения сессии обмена сообщениями системы ""%1"".%2
		|Описание ошибки из корреспондента: %3'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	СтрокаСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаСообщения,
		Строка(Сообщение.Body.SessionId), Представление, Сообщение.Body.ErrorDescription);
	ЗаписьЖурналаРегистрации(СобытиеЖурналаРегистрацииСессииОбменаСообщениямиСистемы(),
		УровеньЖурналаРегистрации.Ошибка,,, СтрокаСообщения);
	РегистрыСведений.СессииОбменаСообщениямиСистемы.ЗафиксироватьНеуспешноеВыполнениеСессии(Сообщение.Body.SessionId);
	
КонецПроцедуры

//

// Выполняет вход в область и действие сценария обмена, заданное строкой таблицы значений, для первой из двух обменивающихся ИБ.
//
// Параметры:
// ИндексСтрокиСценария - Число - Индекс строки в таблице СценарийОбменаДанными.
// СценарийОбменаДанными - ТаблицаЗначений.
//
Процедура ВыполнитьДействиеСценарияОбменаДаннымиВПервойИнформационнойБазеИзНеразделенногоСеанса(
																		ИндексСтрокиСценария,
																		СценарийОбменаДанными,
																		ОбластьДанных
	) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ОбщегоНазначения.УстановитьРазделениеСеанса(Истина, ОбластьДанных);
	УстановитьПривилегированныйРежим(Ложь);
	
	ВыполнитьДействиеСценарияОбменаДаннымиВПервойИнформационнойБазе(ИндексСтрокиСценария, СценарийОбменаДанными);
	
	УстановитьПривилегированныйРежим(Истина);
	ОбщегоНазначения.УстановитьРазделениеСеанса(Ложь);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Выполняет вход в область и действие сценария обмена, заданное строкой таблицы значений, для второй из двух обменивающихся ИБ.
//
// Параметры:
// ИндексСтрокиСценария - Число - Индекс строки в таблице СценарийОбменаДанными.
// СценарийОбменаДанными - ТаблицаЗначений.
//
Процедура ВыполнитьДействиеСценарияОбменаДаннымиВоВторойИнформационнойБазеИзНеразделенногоСеанса(
																		ИндексСтрокиСценария,
																		СценарийОбменаДанными,
																		ОбластьДанных
	) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	ОбщегоНазначения.УстановитьРазделениеСеанса(Истина, ОбластьДанных);
	УстановитьПривилегированныйРежим(Ложь);
	
	ВыполнитьДействиеСценарияОбменаДаннымиВоВторойИнформационнойБазе(ИндексСтрокиСценария, СценарийОбменаДанными);
	
	УстановитьПривилегированныйРежим(Истина);
	ОбщегоНазначения.УстановитьРазделениеСеанса(Ложь);
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

// Возвращает минимально необходимую версию платформы
//
Функция ТребуемаяВерсияПлатформы() Экспорт
	
	ВерсияПлатформы = "";
	
	ВерсияПлатформы = ОбменДаннымиВМоделиСервисаПереопределяемый.ТребуемаяВерсияПриложения();
	Если Не ПустаяСтрока(ВерсияПлатформы) Тогда
		Возврат ВерсияПлатформы;
	КонецЕсли;
	
	СистемнаяИнформация = Новый СистемнаяИнформация;
	ВерсияПлатформы = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СистемнаяИнформация.ВерсияПриложения, ".");
	
	// Удаляем из номера версии дополнительный номер релиза (последний номер)
	ВерсияПлатформы.Удалить(3);
	Возврат СтроковыеФункцииКлиентСервер.ПолучитьСтрокуИзМассиваПодстрок(ВерсияПлатформы, ".");
	
КонецФункции

// Событие для журнала регистрации настройки синхронизации данных
//
Функция СобытиеЖурналаРегистрацииНастройкаСинхронизацииДанных() Экспорт
	
	Возврат НСтр("ru = 'Обмен данными в модели сервиса.Настройка синхронизации данных'",
		ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

// Событие для журнала регистрации монитора синхронизации данных
//
Функция СобытиеЖурналаРегистрацииМониторСинхронизацииДанных() Экспорт
	
	Возврат НСтр("ru = 'Обмен данными в модели сервиса.Монитор синхронизации данных'",
		ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

Функция СобытиеЖурналаРегистрацииСессииОбменаСообщениямиСистемы()
	
	Возврат НСтр("ru = 'Обмен данными в модели сервиса.Сессии обмена сообщениями системы'",
		ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции монитора обмена данными

// Для внутреннего использования
// 
Функция ТаблицаМонитораОбменаДанными(Знач ПланыОбменаМетода, Знач ДополнительныеСвойстваПланаОбмена = "", Знач ТолькоНеуспешные = Ложь) Экспорт
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	СостоянияОбменовДанными.УзелИнформационнойБазы КАК УзелИнформационнойБазы,
	|	СостоянияОбменовДанными.ДатаОкончания КАК ДатаОкончания,
	|	ВЫБОР
	|		КОГДА СостоянияОбменовДанными.РезультатВыполненияОбмена = ЗНАЧЕНИЕ(Перечисление.РезультатыВыполненияОбмена.Выполнено)
	|			ИЛИ СостоянияОбменовДанными.РезультатВыполненияОбмена = ЗНАЧЕНИЕ(Перечисление.РезультатыВыполненияОбмена.ВыполненоСПредупреждениями)
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК РезультатВыполненияОбмена
	|ПОМЕСТИТЬ СостоянияОбменовДаннымиЗагрузка
	|ИЗ
	|	РегистрСведений.СостоянияОбменовДаннымиОбластейДанных КАК СостоянияОбменовДанными
	|ГДЕ
	|	СостоянияОбменовДанными.ДействиеПриОбмене = ЗНАЧЕНИЕ(Перечисление.ДействияПриОбмене.ЗагрузкаДанных)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СостоянияОбменовДанными.УзелИнформационнойБазы КАК УзелИнформационнойБазы,
	|	СостоянияОбменовДанными.ДатаОкончания КАК ДатаОкончания,
	|	ВЫБОР
	|		КОГДА СостоянияОбменовДанными.РезультатВыполненияОбмена = ЗНАЧЕНИЕ(Перечисление.РезультатыВыполненияОбмена.Выполнено)
	|			ИЛИ СостоянияОбменовДанными.РезультатВыполненияОбмена = ЗНАЧЕНИЕ(Перечисление.РезультатыВыполненияОбмена.ВыполненоСПредупреждениями)
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК РезультатВыполненияОбмена
	|ПОМЕСТИТЬ СостоянияОбменовДаннымиВыгрузка
	|ИЗ
	|	РегистрСведений.СостоянияОбменовДаннымиОбластейДанных КАК СостоянияОбменовДанными
	|ГДЕ
	|	СостоянияОбменовДанными.ДействиеПриОбмене = ЗНАЧЕНИЕ(Перечисление.ДействияПриОбмене.ВыгрузкаДанных)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СостоянияУспешныхОбменовДанными.УзелИнформационнойБазы КАК УзелИнформационнойБазы,
	|	СостоянияУспешныхОбменовДанными.ДатаОкончания КАК ДатаОкончания
	|ПОМЕСТИТЬ СостоянияУспешныхОбменовДаннымиЗагрузка
	|ИЗ
	|	РегистрСведений.СостоянияУспешныхОбменовДаннымиОбластейДанных КАК СостоянияУспешныхОбменовДанными
	|ГДЕ
	|	СостоянияУспешныхОбменовДанными.ДействиеПриОбмене = ЗНАЧЕНИЕ(Перечисление.ДействияПриОбмене.ЗагрузкаДанных)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СостоянияУспешныхОбменовДанными.УзелИнформационнойБазы КАК УзелИнформационнойБазы,
	|	СостоянияУспешныхОбменовДанными.ДатаОкончания КАК ДатаОкончания
	|ПОМЕСТИТЬ СостоянияУспешныхОбменовДаннымиВыгрузка
	|ИЗ
	|	РегистрСведений.СостоянияУспешныхОбменовДаннымиОбластейДанных КАК СостоянияУспешныхОбменовДанными
	|ГДЕ
	|	СостоянияУспешныхОбменовДанными.ДействиеПриОбмене = ЗНАЧЕНИЕ(Перечисление.ДействияПриОбмене.ВыгрузкаДанных)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПланыОбмена.ИмяПланаОбмена КАК ИмяПланаОбмена,
	|	ПланыОбмена.УзелИнформационнойБазы КАК УзелИнформационнойБазы,
	|	ПланыОбмена.УзелИнформационнойБазы.ОбластьДанныхОсновныеДанные КАК ОбластьДанных,
	|
	|	[ДополнительныеСвойстваПланаОбмена]
	|
	|	ЕСТЬNULL(СостоянияОбменовДаннымиВыгрузка.РезультатВыполненияОбмена, 0) КАК РезультатПоследнейВыгрузкиДанных,
	|	ЕСТЬNULL(СостоянияОбменовДаннымиЗагрузка.РезультатВыполненияОбмена, 0) КАК РезультатПоследнейЗагрузкиДанных,
	|	СостоянияОбменовДаннымиЗагрузка.ДатаОкончания КАК ДатаПоследнейЗагрузки,
	|	СостоянияОбменовДаннымиВыгрузка.ДатаОкончания КАК ДатаПоследнейВыгрузки,
	|	СостоянияУспешныхОбменовДаннымиЗагрузка.ДатаОкончания КАК ДатаПоследнейУспешнойЗагрузки,
	|	СостоянияУспешныхОбменовДаннымиВыгрузка.ДатаОкончания КАК ДатаПоследнейУспешнойВыгрузки
	|ИЗ
	|	ПланыОбменаКонфигурации КАК ПланыОбмена
	|		ЛЕВОЕ СОЕДИНЕНИЕ СостоянияОбменовДаннымиЗагрузка КАК СостоянияОбменовДаннымиЗагрузка
	|		ПО ПланыОбмена.УзелИнформационнойБазы = СостоянияОбменовДаннымиЗагрузка.УзелИнформационнойБазы
	|		ЛЕВОЕ СОЕДИНЕНИЕ СостоянияОбменовДаннымиВыгрузка КАК СостоянияОбменовДаннымиВыгрузка
	|		ПО ПланыОбмена.УзелИнформационнойБазы = СостоянияОбменовДаннымиВыгрузка.УзелИнформационнойБазы
	|		ЛЕВОЕ СОЕДИНЕНИЕ СостоянияУспешныхОбменовДаннымиЗагрузка КАК СостоянияУспешныхОбменовДаннымиЗагрузка
	|		ПО ПланыОбмена.УзелИнформационнойБазы = СостоянияУспешныхОбменовДаннымиЗагрузка.УзелИнформационнойБазы
	|		ЛЕВОЕ СОЕДИНЕНИЕ СостоянияУспешныхОбменовДаннымиВыгрузка КАК СостоянияУспешныхОбменовДаннымиВыгрузка
	|		ПО ПланыОбмена.УзелИнформационнойБазы = СостоянияУспешныхОбменовДаннымиВыгрузка.УзелИнформационнойБазы
	|
	|[Отбор]
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПланыОбмена.ИмяПланаОбмена,
	|	ПланыОбмена.Наименование";
	
	УстановитьПривилегированныйРежим(Истина);
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ПолучитьТаблицуПлановОбменаДляМонитора(МенеджерВременныхТаблиц, ПланыОбменаМетода, ДополнительныеСвойстваПланаОбмена);
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ДополнительныеСвойстваПланаОбмена]",
		ПолучитьДополнительныеСвойстваПланаОбменаСтрокой(ДополнительныеСвойстваПланаОбмена));
	
	Если ТолькоНеуспешные Тогда
		Отбор = "
			|ГДЕ
			|	    ЕСТЬNULL(СостоянияОбменовДаннымиВыгрузка.РезультатВыполненияОбмена, 0) <> 0
			|	ИЛИ ЕСТЬNULL(СостоянияОбменовДаннымиЗагрузка.РезультатВыполненияОбмена, 0) <> 0"
		;
	Иначе
		Отбор = "";
	КонецЕсли;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[Отбор]", Отбор);
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	НастройкиСинхронизации = Запрос.Выполнить().Выгрузить();
	НастройкиСинхронизации.Колонки.Добавить("ПредставлениеДатыПоследнейЗагрузки");
	НастройкиСинхронизации.Колонки.Добавить("ПредставлениеДатыПоследнейВыгрузки");
	НастройкиСинхронизации.Колонки.Добавить("ПредставлениеДатыПоследнейУспешнойЗагрузки");
	НастройкиСинхронизации.Колонки.Добавить("ПредставлениеДатыПоследнейУспешнойВыгрузки");
	
	Для Каждого НастройкаСинхронизации Из НастройкиСинхронизации Цикл
		
		НастройкаСинхронизации.ПредставлениеДатыПоследнейЗагрузки         = ОбменДаннымиСервер.ОтносительнаяДатаСинхронизации(НастройкаСинхронизации.ДатаПоследнейЗагрузки);
		НастройкаСинхронизации.ПредставлениеДатыПоследнейВыгрузки         = ОбменДаннымиСервер.ОтносительнаяДатаСинхронизации(НастройкаСинхронизации.ДатаПоследнейВыгрузки);
		НастройкаСинхронизации.ПредставлениеДатыПоследнейУспешнойЗагрузки = ОбменДаннымиСервер.ОтносительнаяДатаСинхронизации(НастройкаСинхронизации.ДатаПоследнейУспешнойЗагрузки);
		НастройкаСинхронизации.ПредставлениеДатыПоследнейУспешнойВыгрузки = ОбменДаннымиСервер.ОтносительнаяДатаСинхронизации(НастройкаСинхронизации.ДатаПоследнейУспешнойВыгрузки);
		
	КонецЦикла;
	
	Возврат НастройкиСинхронизации;
КонецФункции

// Для внутреннего использования
// 
Функция ПолучитьДополнительныеСвойстваПланаОбменаСтрокой(Знач СвойстваСтрокой)
	
	Результат = "";
	
	Шаблон = "ПланыОбмена.[СвойствоСтрокой] КАК [СвойствоСтрокой]";
	
	СвойстваМассив = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СвойстваСтрокой);
	
	Для Каждого СвойствоСтрокой Из СвойстваМассив Цикл
		
		СвойствоСтрокойВЗапросе = СтрЗаменить(Шаблон, "[СвойствоСтрокой]", СвойствоСтрокой);
		
		Результат = Результат + СвойствоСтрокойВЗапросе + ", ";
		
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

// Для внутреннего использования
// 
Процедура ПолучитьТаблицуПлановОбменаДляМонитора(Знач МенеджерВременныхТаблиц, Знач ПланыОбменаМетода, Знач ДополнительныеСвойстваПланаОбмена)
	
	ДополнительныеСвойстваПланаОбменаСтрокой = ?(ПустаяСтрока(ДополнительныеСвойстваПланаОбмена), "", ДополнительныеСвойстваПланаОбмена + ", ");
	
	Запрос = Новый Запрос;
	
	ШаблонЗапроса = "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|//////////////////////////////////////////////////////// {[ИмяПланаОбмена]}
	|ВЫБРАТЬ
	|
	|	[ДополнительныеСвойстваПланаОбмена]
	|
	|	Ссылка                      КАК УзелИнформационнойБазы,
	|	Наименование                КАК Наименование,
	|	""[ИмяПланаОбменаСиноним]"" КАК ИмяПланаОбмена
	|ИЗ
	|	ПланОбмена.[ИмяПланаОбмена]
	|ГДЕ
	|	РегистрироватьИзменения
	|	И НЕ ПометкаУдаления
	|";
	
	ТекстЗапроса = "";
	
	Если ПланыОбменаМетода.Количество() > 0 Тогда
		
		Для Каждого ИмяПланаОбмена ИЗ ПланыОбменаМетода Цикл
			
			ТекстЗапросаДляПланаОбмена = СтрЗаменить(ШаблонЗапроса,              "[ИмяПланаОбмена]",        ИмяПланаОбмена);
			ТекстЗапросаДляПланаОбмена = СтрЗаменить(ТекстЗапросаДляПланаОбмена, "[ИмяПланаОбменаСиноним]", Метаданные.ПланыОбмена[ИмяПланаОбмена].Синоним);
			ТекстЗапросаДляПланаОбмена = СтрЗаменить(ТекстЗапросаДляПланаОбмена, "[ДополнительныеСвойстваПланаОбмена]", ДополнительныеСвойстваПланаОбменаСтрокой);
			
			// удаляем литерал объединения для первой таблицы
			Если ПустаяСтрока(ТекстЗапроса) Тогда
				
				ТекстЗапросаДляПланаОбмена = СтрЗаменить(ТекстЗапросаДляПланаОбмена, "ОБЪЕДИНИТЬ ВСЕ", "");
				
			КонецЕсли;
			
			ТекстЗапроса = ТекстЗапроса + ТекстЗапросаДляПланаОбмена;
			
		КонецЦикла;
		
	Иначе
		
		ДополнительныеСвойстваБезИсточникаДанныхСтрокой = "";
		
		Если Не ПустаяСтрока(ДополнительныеСвойстваПланаОбмена) Тогда
			
			ДополнительныеСвойства = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ДополнительныеСвойстваПланаОбмена);
			
			ДополнительныеСвойстваБезИсточникаДанных = Новый Массив;
			
			Для Каждого Свойство Из ДополнительныеСвойства Цикл
				
				ДополнительныеСвойстваБезИсточникаДанных.Добавить(СтрЗаменить("Неопределено КАК [Свойство]", "[Свойство]", Свойство));
				
			КонецЦикла;
			
			ДополнительныеСвойстваБезИсточникаДанныхСтрокой = СтроковыеФункцииКлиентСервер.ПолучитьСтрокуИзМассиваПодстрок(ДополнительныеСвойстваБезИсточникаДанных) + ", ";
			
		КонецЕсли;
		
		ТекстЗапроса = "
		|ВЫБРАТЬ
		|
		|	[ДополнительныеСвойстваБезИсточникаДанныхСтрокой]
		|
		|	Неопределено КАК УзелИнформационнойБазы,
		|	Неопределено КАК Наименование,
		|	Неопределено КАК ИмяПланаОбмена
		|";
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ДополнительныеСвойстваБезИсточникаДанныхСтрокой]", ДополнительныеСвойстваБезИсточникаДанныхСтрокой);
		
	КонецЕсли;
	
	ТекстЗапросаРезультат = "
	|//////////////////////////////////////////////////////// {ПланыОбменаКонфигурации}
	|ВЫБРАТЬ
	|
	|	[ДополнительныеСвойстваПланаОбмена]
	|
	|	УзелИнформационнойБазы,
	|	Наименование,
	|	ИмяПланаОбмена
	|ПОМЕСТИТЬ ПланыОбменаКонфигурации
	|ИЗ
	|	(
	|	[ТекстЗапроса]
	|	) КАК ВложенныйЗапрос
	|;
	|";
	
	ТекстЗапросаРезультат = СтрЗаменить(ТекстЗапросаРезультат, "[ТекстЗапроса]", ТекстЗапроса);
	ТекстЗапросаРезультат = СтрЗаменить(ТекстЗапросаРезультат, "[ДополнительныеСвойстваПланаОбмена]", ДополнительныеСвойстваПланаОбменаСтрокой);
	
	Запрос.Текст = ТекстЗапросаРезультат;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.Выполнить();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Локальные служебные процедуры и функции

Функция НайтиУзелИнформационнойБазы(Знач ИмяПланаОбмена, Знач КодУзла)
	
	КодУзлаСПрефиксом = КодУзлаПланаОбменаВСервисе(Число(КодУзла));
	
	// Поиск узла по формату кода узла "S00000123"
	Результат = ОбменДаннымиПовтИсп.НайтиУзелПланаОбменаПоКоду(ИмяПланаОбмена, КодУзлаСПрефиксом);
	
	Если Результат = Неопределено Тогда
		
		// Поиск узла по формату кода узла "0000123" (старый формат)
		Результат = ОбменДаннымиПовтИсп.НайтиУзелПланаОбменаПоКоду(ИмяПланаОбмена, КодУзла);
		
	КонецЕсли;
	
	Если Результат = Неопределено Тогда
		Сообщение = НСтр("ru = 'Не найден узел плана обмена. Имя плана обмена %1; код узла %2 или %3'");
		Сообщение = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Сообщение, ИмяПланаОбмена, КодУзла, КодУзлаСПрефиксом);
		ВызватьИсключение Сообщение;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция ВерсииКорреспондента(Знач УзелИнформационнойБазы)
	
	СтруктураНастроек = РегистрыСведений.НастройкиТранспортаОбменаОбластиДанных.НастройкиТранспортаWS(УзелИнформационнойБазы);
	
	ПараметрыПодключения = Новый Структура;
	ПараметрыПодключения.Вставить("URL",      СтруктураНастроек.WSURLВебСервиса);
	ПараметрыПодключения.Вставить("UserName", СтруктураНастроек.WSИмяПользователя);
	ПараметрыПодключения.Вставить("Password", СтруктураНастроек.WSПароль);
	
	Возврат ОбщегоНазначения.ПолучитьВерсииИнтерфейса(ПараметрыПодключения, "ОбменДаннымиВМоделиСервиса");
КонецФункции

// Возвращает параметры подсистемы ОбменДаннымиВМоделиСервиса, которые необходимы при завершении работы
// пользователей.
//
// Возвращаемое значение:
//	Структура - параметры.
//
Функция ПараметрыАвтономнойРаботыПриЗавершенииРаботы()
	
	ПараметрыПриЗавершении = Новый Структура;
	
	Если АвтономнаяРаботаСлужебный.ЭтоАвтономноеРабочееМесто() Тогда
		
		ПараметрыФормыВыполненияОбменаДанными = АвтономнаяРаботаСлужебный.ПараметрыФормыВыполненияОбменаДанными();
		СинхронизацияССервисомДавноНеВыполнялась = АвтономнаяРаботаСлужебный.СинхронизацияССервисомДавноНеВыполнялась();
		
	Иначе
		
		ПараметрыФормыВыполненияОбменаДанными = Новый Структура;
		СинхронизацияССервисомДавноНеВыполнялась = Ложь;
		
	КонецЕсли;
	
	ПараметрыПриЗавершении.Вставить("ПараметрыФормыВыполненияОбменаДанными", ПараметрыФормыВыполненияОбменаДанными);
	ПараметрыПриЗавершении.Вставить("СинхронизацияССервисомДавноНеВыполнялась", СинхронизацияССервисомДавноНеВыполнялась);
	
	Возврат ПараметрыПриЗавершении;
КонецФункции

Процедура ПередЗаписьюОбщихДанных(Объект, Отказ)
	
	Если Объект.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ТолькоПросмотр = Ложь;
	АвтономнаяРаботаСлужебный.ОпределитьВозможностьИзмененияДанных(Объект.Метаданные(), ТолькоПросмотр);
	
	Если ТолькоПросмотр Тогда
		СтрокаОшибки = НСтр("ru = 'Изменение неразделенных данных (%1), загружаемых из приложения, в Автономном рабочем месте запрещено.
		|Обратитесь к администратору.'");
		СтрокаОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СтрокаОшибки, Строка(Объект));
		ВызватьИсключение СтрокаОшибки;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики подписок на события

Процедура ОтключитьАвтоматическуюСинхронизациюДанныхСПриложениемВИнтернетеПриЗаписи(Источник, Отказ, Замещение) Экспорт
	
	ОтключитьАвтоматическуюСинхронизацию = Ложь;
	
	Для Каждого СтрокаНабора Из Источник Цикл
		
		Если СтрокаНабора.ВидТранспортаСообщенийОбменаПоУмолчанию = Перечисления.ВидыТранспортаСообщенийОбмена.WS
			И Не СтрокаНабора.WSЗапомнитьПароль Тогда
			
			ОтключитьАвтоматическуюСинхронизацию = Истина;
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ОтключитьАвтоматическуюСинхронизацию Тогда
		
		АвтономнаяРаботаСлужебный.ОтключитьАвтоматическуюСинхронизациюДанныхСПриложениемВИнтернете();
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Подписки на события для Автономного рабочего места

// Проверяет возможность записи неразделенных данных в Автономном рабочем месте.
// Подробное описание см. в АвтономнаяРаботаСлужебный.ОпределитьВозможностьИзмененияДанных
//
Процедура АвтономнаяРаботаПроверитьВозможностьЗаписиОбщихДанных(Источник, Отказ) Экспорт
	
	ПередЗаписьюОбщихДанных(Источник, Отказ);
	
КонецПроцедуры

// Проверяет возможность записи неразделенных данных в Автономном рабочем месте.
// Подробное описание см. в АвтономнаяРаботаСлужебный.ОпределитьВозможностьИзмененияДанных
//
Процедура АвтономнаяРаботаПроверитьВозможностьЗаписиОбщихДанныхДокумент(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	ПередЗаписьюОбщихДанных(Источник, Отказ);
	
КонецПроцедуры

// Проверяет возможность записи неразделенных данных в Автономном рабочем месте.
// Подробное описание см. в АвтономнаяРаботаСлужебный.ОпределитьВозможностьИзмененияДанных
//
Процедура АвтономнаяРаботаПроверитьВозможностьЗаписиОбщихДанныхКонстанта(Источник, Отказ) Экспорт
	
	ПередЗаписьюОбщихДанных(Источник, Отказ);
	
КонецПроцедуры

// Проверяет возможность записи неразделенных данных в Автономном рабочем месте.
// Подробное описание см. в АвтономнаяРаботаСлужебный.ОпределитьВозможностьИзмененияДанных
//
Процедура АвтономнаяРаботаПроверитьВозможностьЗаписиОбщихДанныхНаборЗаписей(Источник, Отказ, Замещение) Экспорт
	
	ПередЗаписьюОбщихДанных(Источник, Отказ);
	
КонецПроцедуры

// Проверяет возможность записи неразделенных данных в Автономном рабочем месте.
// Подробное описание см. в АвтономнаяРаботаСлужебный.ОпределитьВозможностьИзмененияДанных
//
Процедура АвтономнаяРаботаПроверитьВозможностьЗаписиОбщихДанныхНаборЗаписейРасчета(Источник, Отказ, Замещение, ТолькоЗапись, ЗаписьФактическогоПериодаДействия, ЗаписьПерерасчетов) Экспорт
	
	ПередЗаписьюОбщихДанных(Источник, Отказ);
	
КонецПроцедуры
