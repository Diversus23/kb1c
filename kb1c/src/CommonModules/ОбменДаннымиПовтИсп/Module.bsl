////////////////////////////////////////////////////////////////////////////////
// Подсистема "Обмен данными"
// 
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС

////////////////////////////////////////////////////////////////////////////////
// Механизм регистрации объектов на узлах планов обмена (МРО)

// Получает имя этой информационной базы из константы или из синонима конфигурации
// (Только для внутреннего использования)
//
Функция ИмяЭтойИнформационнойБазы() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Результат = Константы.ЗаголовокСистемы.Получить();
	
	Если ПустаяСтрока(Результат) Тогда
		
		Результат = Метаданные.Синоним;
		
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Получает код предопределенного узла плана обмена
//
// Параметры:
//  ИмяПланаОбмена - Строка - имя плана обмена как оно задано в конфигураторе
// 
// Возвращаемое значение:
//  Строка - код предопределенного узла плана обмена
//
Функция ПолучитьКодЭтогоУзлаДляПланаОбмена(ИмяПланаОбмена) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПолучитьЭтотУзелПланаОбмена(ИмяПланаОбмена), "Код");
	
КонецФункции

// Получает наименование предопределенного узла плана обмена
//
// Параметры:
//  УзелИнформационнойБазы – ПланОбменаСсылка – узел плана обмена
// 
// Возвращаемое значение:
//  Строка - наименование предопределенного узла плана обмена
//
Функция НаименованиеЭтогоУзла(Знач УзелИнформационнойБазы) Экспорт
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ПолучитьЭтотУзелПланаОбмена(ПолучитьИмяПланаОбмена(УзелИнформационнойБазы)), "Наименование");
	
КонецФункции

// Получает массив имен планов обмена конфигурации, которые используют функционал БСП.
//
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
// Массив – массив элементов имен планов обмена
//
Функция ПланыОбменаБСП() Экспорт
	
	Возврат СписокПлановОбменаБСП().ВыгрузитьЗначения();
	
КонецФункции

// Устарело. В будущем необходимо использовать "УстановитьВнешнееСоединениеСБазой"
//
Функция УстановитьВнешнееСоединение(ПараметрыВнешнегоСоединения, СтрокаСообщенияОбОшибке = "") Экспорт
    
    Результат = ОбщегоНазначения.УстановитьВнешнееСоединениеСБазой(ПараметрыВнешнегоСоединения);
    СтрокаСообщенияОбОшибке = Результат.ПодробноеОписаниеОшибки;
    
	Возврат Результат.Соединение;
КонецФункции

// Устанавливает внешнее соединение с информационной базой и возвращает указатель на это соединение
// (Только для внутреннего использования)
//
Функция УстановитьВнешнееСоединениеСБазой(ПараметрыВнешнегоСоединения) Экспорт
    Возврат ОбщегоНазначения.УстановитьВнешнееСоединениеСБазой(ПараметрыВнешнегоСоединения);
КонецФункции


// Возвращает признак предопределенного узла этой информационной базы по переданному значению ссылки
//
// Параметры:
//  УзелПланаОбмена - ПланОбменаСсылка - любой узел плана обмена
// 
// Возвращаемое значение:
//  Булево - признак предопределенного узла этой информационной базы
//
Функция ЭтоПредопределенныйУзелПланаОбмена(УзелПланаОбмена) Экспорт
	
	Если Не ЗначениеЗаполнено(УзелПланаОбмена) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат ПолучитьЭтотУзелПланаОбменаПоСсылке(УзелПланаОбмена) = УзелПланаОбмена;
	
КонецФункции

//

// Определяет, используется ли план обмена, идентифицируемый именем, в модели сервиса.
// Чтобы дать возможность это определить, все планы обмена на уровне модуля менеджера 
// определяют функцию ПланОбменаИспользуетсяВМоделиСервиса(), 
// явно возвращающую значение Истина или Ложь.
//
// Параметры:
// ИмяПланаОбмена - Строка.
//
// Возвращаемое значение:
// Булево.
//
Функция ПланОбменаИспользуетсяВМоделиСервиса(Знач ИмяПланаОбмена) Экспорт
	
	Результат = Ложь;
	
	Если ПланыОбменаБСП().Найти(ИмяПланаОбмена) <> Неопределено Тогда
		
		Результат = ПланыОбмена[ИмяПланаОбмена].ПланОбменаИспользуетсяВМоделиСервиса();
		
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

//

// Для внутреннего использования
//
Функция АвтономнаяРаботаПоддерживается() Экспорт
	
	Возврат ПланыОбменаАвтономнойРаботы().Количество() = 1;
	
КонецФункции

// Для внутреннего использования
//
Функция ПланОбменаАвтономнойРаботы() Экспорт
	
	Результат = ПланыОбменаАвтономнойРаботы();
	
	Если Результат.Количество() = 0 Тогда
		
		ВызватьИсключение НСтр("ru = 'Автономная работа в системе не предусмотрена.'");
		
	ИначеЕсли Результат.Количество() > 1 Тогда
		
		ВызватьИсключение НСтр("ru = 'Создано более одного плана обмена для автономной работы.'");
		
	КонецЕсли;
	
	Возврат Результат[0];
КонецФункции

// Для внутреннего использования
//
Функция ЭтоАвтономноеРабочееМесто() Экспорт
	
	Возврат АвтономнаяРаботаПоддерживается()
			И ОбменДаннымиСервер.ГлавныйУзел() <> Неопределено
			И ОбменДаннымиСервер.ГлавныйУзел().Метаданные().Имя = ПланОбменаАвтономнойРаботы();
	
КонецФункции

// Определяет, является ли переданный узел плана обмена автономным рабочим местом.
//
Функция ЭтоУзелАвтономногоРабочегоМеста(Знач УзелИнформационнойБазы) Экспорт
	
	Возврат АвтономнаяРаботаПоддерживается()
		И УзелИнформационнойБазы.Метаданные().Имя = ПланОбменаАвтономнойРаботы()
	;
КонецФункции

//

// Для внутреннего использования
//
Функция НайтиУзелПланаОбменаПоКоду(ИмяПланаОбмена, КодУзла) Экспорт
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ПланОбмена.Ссылка КАК Ссылка
	|ИЗ
	|	ПланОбмена.[ИмяПланаОбмена] КАК ПланОбмена
	|ГДЕ
	|	ПланОбмена.Код = &Код";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "[ИмяПланаОбмена]", ИмяПланаОбмена);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Код", КодУзла);
	Запрос.Текст = ТекстЗапроса;
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если РезультатЗапроса.Пустой() Тогда
		
		Возврат Неопределено;
		
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Ссылка;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

////////////////////////////////////////////////////////////////////////////////
// Механизм регистрации объектов на узлах планов обмена (МРО)

// Получает таблицу правил регистрации объектов для плана обмена.
//
// Параметры:
//  ИмяПланаОбмена - Строка - имя плана обмена как оно задано в конфигураторе,
//                    для которого необходимо получить правила регистрации.
// 
// Возвращаемое значение:
// Таблица значений - таблица правил регистрации для текущего плана обмена
//
Функция ПравилаРегистрацииОбъектовПланаОбмена(Знач ИмяПланаОбмена) Экспорт
	
	ПравилаРегистрацииОбъектов = ОбменДаннымиВызовСервера.ПараметрыСеансаПравилаРегистрацииОбъектов().Получить();
	
	Возврат ПравилаРегистрацииОбъектов.Скопировать(Новый Структура("ИмяПланаОбмена", ИмяПланаОбмена));
КонецФункции

// Получает таблицу правил регистрации объекта для заданного плана обмена.
//
// Параметры:
//  ИмяПланаОбмена   - Строка - имя плана обмена как оно задано в конфигураторе
//  ПолноеИмяОбъекта - Строка - полное имя объекта метаданных,
//                   для которого необходимо получить правила регистрации
// 
// Возвращаемое значение:
// Таблица значений - таблица правил регистрации объекта по заданному плану обмена
//
Функция ПравилаРегистрацииОбъекта(Знач ИмяПланаОбмена, Знач ПолноеИмяОбъекта) Экспорт
	
	ПравилаРегистрацииОбъектовПланаОбмена = ОбменДаннымиСобытия.ПравилаРегистрацииОбъектовПланаОбмена(ИмяПланаОбмена);
	
	Возврат ПравилаРегистрацииОбъектовПланаОбмена.Скопировать(Новый Структура("ОбъектМетаданныхИмя", ПолноеИмяОбъекта));
	
КонецФункции

// Возвращает признак того, что существуют правила регистрации для объекта по заданному плану обмена.
//
// Параметры:
//  ИмяПланаОбмена   - Строка - имя плана обмена как оно задано в конфигураторе
//  ПолноеИмяОбъекта - Строка - полное имя объекта метаданных,
//                   для которого необходимо определить признак наличия правил регистрации.
// 
//  Возвращаемое значение:
//  Истина – правила регистрации для объекта существуют; Ложь – нет.
//
Функция ПравилаРегистрацииОбъектаСуществуют(Знач ИмяПланаОбмена, Знач ПолноеИмяОбъекта) Экспорт
	
	Возврат ОбменДаннымиСобытия.ПравилаРегистрацииОбъекта(ИмяПланаОбмена, ПолноеИмяОбъекта).Количество() <> 0;
	
КонецФункции

// Определяет признак авторегистрации объекта метаданных в составе плана обмена.
//
// Параметры:
//  ИмяПланаОбмена   – Строка – имя плана обмена, как оно задано в конфигураторе, в состав которого входит объект метаданных.
//  ПолноеИмяОбъекта – Строка - полное имя объекта метаданных, для которого требуется получить признак авторегистрации.
//
//  Возвращаемое значение:
//  Тип: Булево.
//   Истина – объект метаданных имеет признак авторегистрации "Разрешена" в составе плана обмена;
//   Ложь – объект метаданных имеет признак авторегистрации "Запрещена" в составе плана обмена
//          или объект метаданных не входит в состав плана обмена.
//
Функция АвтоРегистрацияРазрешена(Знач ИмяПланаОбмена, Знач ПолноеИмяОбъекта) Экспорт
	
	ЭлементСоставаПланаОбмена = Метаданные.ПланыОбмена[ИмяПланаОбмена].Состав.Найти(Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъекта));
	
	Если ЭлементСоставаПланаОбмена = Неопределено Тогда
		Возврат Ложь; // объект метаданных не входит в состав плана обмена
	КонецЕсли;
	
	Возврат ЭлементСоставаПланаОбмена.АвтоРегистрация = АвтоРегистрацияИзменений.Разрешить;
КонецФункции

// Определяет признак вхождения объекта метаданных в состав плана обмена.
//
// Параметры:
//  ИмяПланаОбмена   – Строка – имя плана обмена, как оно задано в конфигураторе.
//  ПолноеИмяОбъекта – Строка - полное имя объекта метаданных, для которого требуется получить признак.
// 
//  Возвращаемое значение:
//  Тип: Булево. Истина – объект входит в состав плана обмена; Ложь – не входит.
//
Функция ПланОбменаСодержитОбъект(Знач ИмяПланаОбмена, Знач ПолноеИмяОбъекта) Экспорт
	
	ЭлементСоставаПланаОбмена = Метаданные.ПланыОбмена[ИмяПланаОбмена].Состав.Найти(Метаданные.НайтиПоПолномуИмени(ПолноеИмяОбъекта));
	
	Возврат ЭлементСоставаПланаОбмена <> Неопределено;
КонецФункции

// Возвращает признак использования плана обмена в обмене данными.
// Если план обмена содержит хотя бы один узел кроме предопределенного,
// то считается, что он используется.
//
// Параметры:
//  ИмяПланаОбмена – Строка – имя плана обмена, как оно задано в конфигураторе.
//
// Возвращаемое значение:
// Тип: Булево. Истина – план обмена используется, Ложь – нет.
//
Функция ОбменДаннымиВключен(Знач ИмяПланаОбмена) Экспорт
	
	Возврат ПараметрыСеанса.ИспользуемыеПланыОбмена.Найти(ИмяПланаОбмена) <> Неопределено;
	
КонецФункции

// Возвращает состав плана обмена, заданный пользователем.
// Пользовательский состав плана обмена определяется правилами регистрации объектов
// и настройками узла, которые задал пользователь.
//
//  Параметры:
// Получатель – ПланОбменаСсылка – ссылка на узел плана обмена,
// для которого требуется получить пользовательский состав плана обмена.
//
//  Возвращаемое значение:
// Тип: Соответствие.
//  Ключ - Строка - Полное имя объекта метаданных входящего в состав плана обмена;
//  Значение - ПеречислениеСсылка.РежимыВыгрузкиОбъектовОбмена - режим выгрузки объекта.
//
Функция ПользовательскийСоставПланаОбмена(Знач Получатель) Экспорт
	
	Результат = Новый Соответствие;
	
	СвойстваПолучателя = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Получатель,
		ОбщегоНазначения.ИменаРеквизитовПоТипу(Получатель, Тип("ПеречислениеСсылка.РежимыВыгрузкиОбъектовОбмена"))
	);
	
	Приоритеты = ПриоритетыРежимовВыгрузкиОбъектов();
	
	ИмяПланаОбмена = Получатель.Метаданные().Имя;
	
	Правила = ОбменДаннымиПовтИсп.ПравилаРегистрацииОбъектовПланаОбмена(ИмяПланаОбмена);
	
	Для Каждого Элемент Из Метаданные.ПланыОбмена[ИмяПланаОбмена].Состав Цикл
		
		ИмяОбъекта = Элемент.Метаданные.ПолноеИмя();
		
		ПравилаОбъекта = Правила.НайтиСтроки(Новый Структура("ОбъектМетаданныхИмя", ИмяОбъекта));
		
		РежимВыгрузки = Неопределено;
		
		Если ПравилаОбъекта.Количество() = 0 Тогда // правила регистрации не заданы
			
			РежимВыгрузки = Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьВсегда;
			
		Иначе // заданы правила регистрации
			
			Для Каждого ПРО Из ПравилаОбъекта Цикл
				
				Если ЗначениеЗаполнено(ПРО.ИмяРеквизитаФлага) Тогда
					
					РежимВыгрузки = МаксимальныйРежимВыгрузкиОбъекта(СвойстваПолучателя[ПРО.ИмяРеквизитаФлага], РежимВыгрузки, Приоритеты);
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если РежимВыгрузки = Неопределено
				ИЛИ РежимВыгрузки = Перечисления.РежимыВыгрузкиОбъектовОбмена.ПустаяСсылка() Тогда
				
				РежимВыгрузки = Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьПоУсловию;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Результат.Вставить(ИмяОбъекта, РежимВыгрузки);
		
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

// Возвращает режим выгрузки объекта на основании пользовательского состава плана обмена (настроек пользователя).
//
//  Параметры:
// ИмяОбъекта - Полное имя объекта метаданных, для которого требуется получить режим выгрузки;
// Получатель - ПланОбменаСсылка – ссылка на узел плана обмена, пользовательский состав которого будет использоваться.
//
//  Возвращаемое значение:
// Тип: ПеречислениеСсылка.РежимыВыгрузкиОбъектовОбмена – режим выгрузки объекта
//
Функция РежимВыгрузкиОбъекта(Знач ИмяОбъекта, Знач Получатель) Экспорт
	
	Результат = ОбменДаннымиПовтИсп.ПользовательскийСоставПланаОбмена(Получатель).Получить(ИмяОбъекта);
	
	Возврат ?(Результат = Неопределено, Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьВсегда, Результат);
КонецФункции

Функция МаксимальныйРежимВыгрузкиОбъекта(Знач РежимВыгрузки1, Знач РежимВыгрузки2, Знач Приоритеты)
	
	Если Приоритеты.Найти(РежимВыгрузки1) < Приоритеты.Найти(РежимВыгрузки2) Тогда
		
		Возврат РежимВыгрузки1;
		
	Иначе
		
		Возврат РежимВыгрузки2;
		
	КонецЕсли;
	
КонецФункции

Функция ПриоритетыРежимовВыгрузкиОбъектов()
	
	Результат = Новый Массив;
	Результат.Добавить(Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьВсегда);
	Результат.Добавить(Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьВручную);
	Результат.Добавить(Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьПоУсловию);
	Результат.Добавить(Перечисления.РежимыВыгрузкиОбъектовОбмена.ПустаяСсылка());
	Результат.Добавить(Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьПриНеобходимости);
	Результат.Добавить(Перечисления.РежимыВыгрузкиОбъектовОбмена.НеВыгружать);
	Результат.Добавить(Неопределено);
	
	Возврат Результат;
КонецФункции

//

// Получает таблицу реквизитов регистрации объектов для механизма выборочной регистрации объектов
//
// Параметры:
//  ИмяОбъекта     - Строка - полное имя объекта метаданного, например, "Справочник.Номенклатура"
//  ИмяПланаОбмена - Строка - имя плана обмена как оно задано в конфигураторе
//
// Возвращаемое значение:
//  ТаблицаРеквизитовРегистрации - таблица значений - таблица реквизитов регистрации, 
//  упорядоченная по полю "Порядок", для заданного объекта метаданного
//
Функция ПолучитьТаблицуРеквизитовРегистрации(ИмяОбъекта, ИмяПланаОбмена) Экспорт
	
	ТаблицаРеквизитовРегистрацииОбъектов = ОбменДаннымиСервер.ПолучитьПравилаВыборочнойРегистрацииОбъектовПС();
	
	Отбор = Новый Структура;
	Отбор.Вставить("ИмяПланаОбмена", ИмяПланаОбмена);
	Отбор.Вставить("ИмяОбъекта",     ИмяОбъекта);
	
	ТаблицаРеквизитовРегистрации = ТаблицаРеквизитовРегистрацииОбъектов.Скопировать(Отбор);
	
	ТаблицаРеквизитовРегистрации.Сортировать("Порядок Возр");
	
	Возврат ТаблицаРеквизитовРегистрации;
	
КонецФункции

// Получает таблицу правил выборочной регистрации объектов из параметров сеанса.
//
// Параметры:
// Нет.
// 
// Возвращаемое значение:
// Таблица значений - таблица реквизитов регистрации для всех объектов метаданных
//
Функция ПолучитьПравилаВыборочнойРегистрацииОбъектовПС() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат ПараметрыСеанса.ПравилаВыборочнойРегистрацииОбъектов.Получить();
	
КонецФункции

// Получает предопределенный узел плана обмена
//
// Параметры:
//  ИмяПланаОбмена - Строка - имя плана обмена как оно задано в конфигураторе
// 
// Возвращаемое значение:
//  ЭтотУзел - ПланОбменаСсылка - предопределенный узел плана обмена
//
Функция ПолучитьЭтотУзелПланаОбмена(ИмяПланаОбмена) Экспорт
	
	Возврат ПланыОбмена[ИмяПланаОбмена].ЭтотУзел()
	
КонецФункции

// Получает предопределенный узел плана обмена по ссылке на узел плана обмена
//
// Параметры:
//  УзелПланаОбмена - ПланОбменаСсылка - любой узел плана обмена
// 
// Возвращаемое значение:
//  ЭтотУзел - ПланОбменаСсылка - предопределенный узел плана обмена
//
Функция ПолучитьЭтотУзелПланаОбменаПоСсылке(УзелПланаОбмена) Экспорт
	
	Возврат ПолучитьЭтотУзелПланаОбмена(ПолучитьИмяПланаОбмена(УзелПланаОбмена));
	
КонецФункции

// Возвращает признак принадлежности узла к плану обмена РИБ
//
// Параметры:
//  УзелИнформационнойБазы – ПланОбменаСсылка – узел плана обмена, для которого требуется получить значение функции
// 
//  Возвращаемое значение:
//  Тип: Булево. Истина – узел принадлежит плану обмена РИБ; Ложь – нет.
//
Функция ЭтоУзелРаспределеннойИнформационнойБазы(Знач УзелИнформационнойБазы) Экспорт
	
	Возврат УзелИнформационнойБазы.Метаданные().РаспределеннаяИнформационнаяБаза;
	
КонецФункции

// Возвращает признак принадлежности узла к плану обмена стандартного обмена (без правил конвертации)
//
// Параметры:
//  УзелИнформационнойБазы – ПланОбменаСсылка – узел плана обмена, для которого требуется получить значение функции
// 
//  Возвращаемое значение:
//  Тип: Булево. Истина – узел принадлежит плану обмена стандартного обмена; Ложь – нет.
//
Функция ЭтоУзелСтандартногоОбменаДанными(УзелИнформационнойБазы) Экспорт
	
	Возврат Не ЭтоУзелРаспределеннойИнформационнойБазы(УзелИнформационнойБазы)
		  И Не ЕстьМакетПланаОбмена(ПолучитьИмяПланаОбмена(УзелИнформационнойБазы), "ПравилаОбмена");
	//
КонецФункции

// Возвращает признак принадлежности узла к плану обмена универсального обмена (по правилам конвертации)
//
// Параметры:
//  УзелИнформационнойБазы – ПланОбменаСсылка – узел плана обмена, для которого требуется получить значение функции
// 
//  Возвращаемое значение:
//  Тип: Булево. Истина – узел принадлежит плану обмена универсального обмена; Ложь – нет.
//
Функция ЭтоУзелУниверсальногоОбменаДанными(УзелИнформационнойБазы) Экспорт
	
	Возврат Не ЭтоУзелРаспределеннойИнформационнойБазы(УзелИнформационнойБазы)
		И ЕстьМакетПланаОбмена(ПолучитьИмяПланаОбмена(УзелИнформационнойБазы), "ПравилаОбмена");
	//
КонецФункции

// Возвращает признак принадлежности узла к плану обмена, который использует функционал обмена БСП
//
// Параметры:
//  УзелИнформационнойБазы – ПланОбменаСсылка, ПланОбменаОбъект – узел плана обмена, для которого требуется получить значение функции
// 
//  Возвращаемое значение:
//  Тип: Булево. Истина – узел принадлежит плану обмена, использующего функционал БСП; Ложь – нет.
//
Функция ЭтоУзелОбменаДаннымиБСП(Знач УзелИнформационнойБазы) Экспорт
	
	Возврат ПланыОбменаБСП().Найти(ПолучитьИмяПланаОбмена(УзелИнформационнойБазы)) <> Неопределено;
	
КонецФункции

// Возвращает признак принадлежности узла к разделенному плану обмена, который использует функционал обмена БСП
//
// Параметры:
//  УзелИнформационнойБазы – ПланОбменаСсылка – узел плана обмена, для которого требуется получить значение функции
// 
//  Возвращаемое значение:
//  Тип: Булево. Истина – узел принадлежит разделенному плану обмена, использующего функционал БСП; Ложь – нет.
//
Функция ЭтоУзелРазделенногоОбменаДаннымиБСП(УзелИнформационнойБазы) Экспорт
	
	Возврат РазделенныеПланыОбменаБСП().Найти(ПолучитьИмяПланаОбмена(УзелИнформационнойБазы)) <> Неопределено;
	
КонецФункции

// Возвращает признак принадлежности плана обмена к плану обмена РИБ
//
// Параметры:
//  ИмяПланаОбмена - Строка - имя плана обмена, как оно задано в конфигураторе
// 
//  Возвращаемое значение:
//  Тип: Булево. Истина – план обмена принадлежит плану обмена РИБ; Ложь – нет.
//
Функция ЭтоПланОбменаРаспределеннойИнформационнойБазы(ИмяПланаОбмена) Экспорт
	
	Возврат Метаданные.ПланыОбмена[ИмяПланаОбмена].РаспределеннаяИнформационнаяБаза;
	
КонецФункции

// Получает имя плана обмена как объекта метаданного для заданного узла
//
// Параметры:
//  УзелПланаОбмена - ПланОбменаСсылка, ПланОбменаОбъект - узел плана обмена
// 
// Возвращаемое значение:
//  Имя - Строка - имя плана обмена как объекта метаданного
//
Функция ПолучитьИмяПланаОбмена(УзелПланаОбмена) Экспорт
	
	Возврат УзелПланаОбмена.Метаданные().Имя;
	
КонецФункции

// Получает массив всех узлов для заданного плана обмена кроме предопределенного узла
//
// Параметры:
//  ИмяПланаОбмена - Строка - имя плана обмена как оно задано в конфигураторе
// 
// Возвращаемое значение:
//  МассивУзлов - Массив - массив всех узлов для заданного плана обмена кроме предопределенного узла
//
Функция ПолучитьМассивУзловПланаОбмена(ИмяПланаОбмена) Экспорт
	
	ЭтотУзел = ПланыОбмена[ИмяПланаОбмена].ЭтотУзел();
	
	ТекстЗапроса = "
	|ВЫБРАТЬ
	| ПланОбмена.Ссылка
	|ИЗ ПланОбмена." + ИмяПланаОбмена + " КАК ПланОбмена
	|ГДЕ
	|	ПланОбмена.Ссылка <> &ЭтотУзел";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ЭтотУзел", ЭтотУзел);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

// Получает список макетов типовых правил обмена из конфигурации для заданного плана обмена;
// список заполняется именами и синонимами макетов правил
// 
// Параметры:
//  ИмяПланаОбмена - Строка - имя плана обмена как оно задано в конфигураторе
// 
// Возвращаемое значение:
//  СписокПравил - список значений - список макетов типовых правил обмена
//
Функция ПолучитьСписокТиповыхПравилОбмена(ИмяПланаОбмена) Экспорт
	
	Возврат ПолучитьСписокТиповыхПравил(ИмяПланаОбмена, "ПравилаОбмена");
	
КонецФункции

// Получает список макетов типовых правил регистрации из конфигурации для плана обмена;
// список заполняется именами и синонимами макетов правил
//
// Параметры:
//  ИмяПланаОбмена - Строка - имя плана обмена как оно задано в конфигураторе
// 
// Возвращаемое значение:
//  СписокПравил - список значений - список макетов типовых правил регистрации
//
Функция ПолучитьСписокТиповыхПравилРегистрации(ИмяПланаОбмена) Экспорт
	
	Возврат ПолучитьСписокТиповыхПравил(ИмяПланаОбмена, "ПравилаРегистрации");
	
КонецФункции

// Получает список планов обмена конфигурации, которые используют функционал БСП.
// список заполняется именами и синонимами планов обмена
//
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
//  СписокПлановОбмена - список значений - список планов обмена конфигурации
//
Функция СписокПлановОбменаБСП() Экспорт
	
	// возвращаемое значение функции
	СписокПлановОбмена = Новый СписокЗначений;
	
	ПланыОбменаПодсистемы = Новый Массив;
	
	ОбменДаннымиПереопределяемый.ПолучитьПланыОбмена(ПланыОбменаПодсистемы);
	
	Для Каждого ПланОбмена ИЗ ПланыОбменаПодсистемы Цикл
		
		СписокПлановОбмена.Добавить(ПланОбмена.Имя, ПланОбмена.Синоним);
		
	КонецЦикла;
	
	Возврат СписокПлановОбмена;
КонецФункции

// Получает массив имен разделенных планов обмена конфигурации, которые используют функционал БСП.
// Если конфигурация не содержит разделителей, то все планы обмена считаются разделенными (прикладными).
//
// Параметры:
//  Нет.
// 
// Возвращаемое значение:
// Массив – массив элементов имен разделенных планов обмена
//
Функция РазделенныеПланыОбменаБСП() Экспорт
	
	Результат = Новый Массив;
	
	Для Каждого ИмяПланаОбмена Из ПланыОбменаБСП() Цикл
		
		Если ОбщегоНазначенияПовтИсп.ЭтоРазделеннаяКонфигурация() Тогда
			
			Если ОбщегоНазначенияПовтИсп.ЭтоРазделенныйОбъектМетаданных("ПланОбмена." + ИмяПланаОбмена,
					ОбщегоНазначенияПовтИсп.РазделительОсновныхДанных()) Тогда
				
				Результат.Добавить(ИмяПланаОбмена);
				
			КонецЕсли;
			
		Иначе
			
			Результат.Добавить(ИмяПланаОбмена);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

// Для внутреннего использования
//
Функция ОбщиеДанныеУзлов(Знач УзелИнформационнойБазы) Экспорт
	
	Возврат ОбменДаннымиСервер.ОбщиеДанныеУзлов(ПолучитьИмяПланаОбмена(УзелИнформационнойБазы),
		РегистрыСведений.ОбщиеНастройкиУзловИнформационныхБаз.ВерсияКорреспондента(УзелИнформационнойБазы)
	);
КонецФункции

// Для внутреннего использования
//
Функция ТабличныеЧастиПланаОбмена(Знач ИмяПланаОбмена, Знач ВерсияКорреспондента = "") Экспорт
	
	ТаблицыОбщие             = Новый Массив;
	ТаблицыЭтойБазы          = Новый Массив;
	ТаблицыКорреспондента    = Новый Массив;
	ВсеТаблицыЭтойБазы       = Новый Массив;
	ВсеТаблицыКорреспондента = Новый Массив;
	
	ОбщиеДанныеУзлов = ОбменДаннымиСервер.ОбщиеДанныеУзлов(ИмяПланаОбмена, ВерсияКорреспондента);
	
	ТабличныеЧасти = ОбменДаннымиСобытия.ТабличныеЧастиОбъекта(Метаданные.ПланыОбмена[ИмяПланаОбмена]);
	
	Если Не ПустаяСтрока(ОбщиеДанныеУзлов) Тогда
		
		Для Каждого ТабличнаяЧасть Из ТабличныеЧасти Цикл
			
			Если Найти(ОбщиеДанныеУзлов, ТабличнаяЧасть) <> 0 Тогда
				
				ТаблицыОбщие.Добавить(ТабличнаяЧасть);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	НастройкиЭтойБазы = ОбменДаннымиСервер.НастройкаОтборовНаУзле(ИмяПланаОбмена, ВерсияКорреспондента);
	
	НастройкиЭтойБазы = ОбменДаннымиСобытия.КлючиСтруктурыВСтроку(НастройкиЭтойБазы);
	
	Если ПустаяСтрока(ОбщиеДанныеУзлов) Тогда
		
		Для Каждого ТабличнаяЧасть Из ТабличныеЧасти Цикл
			
			Если Найти(НастройкиЭтойБазы, ТабличнаяЧасть) <> 0 Тогда
				
				ТаблицыЭтойБазы.Добавить(ТабличнаяЧасть);
				
				ВсеТаблицыЭтойБазы.Добавить(ТабличнаяЧасть);
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Для Каждого ТабличнаяЧасть Из ТабличныеЧасти Цикл
			
			Если Найти(НастройкиЭтойБазы, ТабличнаяЧасть) <> 0 Тогда
				
				ВсеТаблицыЭтойБазы.Добавить(ТабличнаяЧасть);
				
				Если Найти(ОбщиеДанныеУзлов, ТабличнаяЧасть) = 0 Тогда
					
					ТаблицыЭтойБазы.Добавить(ТабличнаяЧасть);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	НастройкиКорреспондента = ОбменДаннымиСервер.НастройкаОтборовНаУзлеБазыКорреспондента(ИмяПланаОбмена, ВерсияКорреспондента);
	
	Если ПустаяСтрока(ОбщиеДанныеУзлов) Тогда
		
		Для Каждого НастройкаКорреспондента Из НастройкиКорреспондента Цикл
			
			Если ТипЗнч(НастройкаКорреспондента.Значение) = Тип("Структура") Тогда
				
				ТаблицыКорреспондента.Добавить(ТабличнаяЧасть);
				
				ВсеТаблицыКорреспондента.Добавить(ТабличнаяЧасть);
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Для Каждого НастройкаКорреспондента Из НастройкиКорреспондента Цикл
			
			Если ТипЗнч(НастройкаКорреспондента.Значение) = Тип("Структура") Тогда
				
				ВсеТаблицыКорреспондента.Добавить(ТабличнаяЧасть);
				
				Если Найти(ОбщиеДанныеУзлов, НастройкаКорреспондента.Ключ) = 0 Тогда
					
					ТаблицыКорреспондента.Добавить(ТабличнаяЧасть);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Результат = Новый Структура;
	Результат.Вставить("ТаблицыОбщие",             ТаблицыОбщие);
	Результат.Вставить("ТаблицыЭтойБазы",          ТаблицыЭтойБазы);
	Результат.Вставить("ТаблицыКорреспондента",    ТаблицыКорреспондента);
	Результат.Вставить("ВсеТаблицыЭтойБазы",       ВсеТаблицыЭтойБазы);
	Результат.Вставить("ВсеТаблицыКорреспондента", ВсеТаблицыКорреспондента);
	
	Возврат Результат;
КонецФункции

// Получает менеджер плана обмена по имени плана обмена
//
// Параметры:
//  ИмяПланаОбмена - Строка - имя плана обмена как оно задано в конфигураторе
//
// Возвращаемое значение:
//  ПланОбменаМенеджер - менеджер плана обмена
//
Функция ПолучитьМенеджерПланаОбменаПоИмени(ИмяПланаОбмена) Экспорт
	
	Возврат ПланыОбмена[ИмяПланаОбмена];
	
КонецФункции

// Получает менеджер плана обмена по имени объекта метаданных плана обмена
//
// Параметры:
//  УзелПланаОбмена – ПланОбменаСсылка – узел плана обмена, для которого требуется получить менеджер
// 
Функция ПолучитьМенеджерПланаОбмена(УзелПланаОбмена) Экспорт
	
	Возврат ПолучитьМенеджерПланаОбменаПоИмени(ПолучитьИмяПланаОбмена(УзелПланаОбмена));
	
КонецФункции

// Функция-обертка одноименной функции
//
Функция ПолучитьДеревоМетаданныхКонфигурации(Отбор) Экспорт
	
	Для Каждого ЭлементОтбора Из Отбор Цикл
		
		Отбор[ЭлементОтбора.Ключ] = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ЭлементОтбора.Значение);
		
	КонецЦикла;
	
	Возврат ОбщегоНазначения.ПолучитьДеревоМетаданныхКонфигурации(Отбор);
	
КонецФункции

// Функция-обертка одноименной функции модуля ОбменДаннымиСервер
//
Функция ОбработкаДляЗагрузкиДанных(Отказ, Знач УзелИнформационнойБазы, Знач ИмяФайлаСообщенияОбмена) Экспорт
	
	Возврат ОбменДаннымиСервер.ОбработкаДляЗагрузкиДанных(Отказ, УзелИнформационнойБазы, ИмяФайлаСообщенияОбмена);
	
КонецФункции

// Определяет наличие макета у плана обмена
//
// Параметры:
//  ИмяПланаОбмена - Строка - имя плана обмена, как оно задано в конфигураторе
//  ИмяМакета – Строка – имя макета, наличие которого следует определить
// 
//  Возвращаемое значение:
//  Тип: Булево. Истина – план обмена содержит заданный макет; Ложь – нет.
//
Функция ЕстьМакетПланаОбмена(Знач ИмяПланаОбмена, Знач ИмяМакета) Экспорт
	
	Возврат Метаданные.ПланыОбмена[ИмяПланаОбмена].Макеты.Найти(ИмяМакета) <> Неопределено;
	
КонецФункции

// Функция-обертка одноименной функции модуля ОбменДаннымиСобытия
//
Функция МассивУзловПоЗначениямСвойств(ЗначенияСвойств, ТекстЗапроса, ИмяПланаОбмена, ИмяРеквизитаФлага, Знач Выгрузка = Ложь) Экспорт
	
	#Если ВнешнееСоединение ИЛИ ТолстыйКлиентОбычноеПриложение Тогда
		
		Возврат ОбменДаннымиВызовСервера.МассивУзловПоЗначениямСвойств(ЗначенияСвойств, ТекстЗапроса, ИмяПланаОбмена, ИмяРеквизитаФлага, Выгрузка);
		
	#Иначе
		
		УстановитьПривилегированныйРежим(Истина);
		Возврат ОбменДаннымиСобытия.МассивУзловПоЗначениямСвойств(ЗначенияСвойств, ТекстЗапроса, ИмяПланаОбмена, ИмяРеквизитаФлага, Выгрузка);
		
	#КонецЕсли
	
КонецФункции

// Возвращает коллекцию транспортов сообщений обмена, которые могут быть использованы для заданного узла плана обмена
//
// Параметры:
//  УзелИнформационнойБазы – ПланОбменаСсылка – узел плана обмена, для которого требуется получить значение функции
// 
//  Возвращаемое значение:
//  Тип: Массив. Используемые транспорты сообщений обмена для узла
//
Функция ИспользуемыеТранспортыСообщенийОбмена(УзелИнформационнойБазы) Экспорт
	
	Результат = ПланыОбмена[ПолучитьИмяПланаОбмена(УзелИнформационнойБазы)].ИспользуемыеТранспортыСообщенийОбмена();
	
	// Для базовых версий конфигураций обмен через COM-соединение и Веб-сервис не поддерживаем
	Если СтандартныеПодсистемыСервер.ЭтоБазоваяВерсияКонфигурации() Тогда
		
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Результат, Перечисления.ВидыТранспортаСообщенийОбмена.COM);
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Результат, Перечисления.ВидыТранспортаСообщенийОбмена.WS);
		
	КонецЕсли;
		
	// Для обмена в РИБ обмен через COM-соединение не поддерживаем
	Если ЭтоУзелРаспределеннойИнформационнойБазы(УзелИнформационнойБазы) Тогда
		
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Результат, Перечисления.ВидыТранспортаСообщенийОбмена.COM);
		
	КонецЕсли;
	
	// Для Стандартного обмена (без использования правил конвертации) обмен через COM-соединение не поддерживаем
	Если ЭтоУзелСтандартногоОбменаДанными(УзелИнформационнойБазы) Тогда
		
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Результат, Перечисления.ВидыТранспортаСообщенийОбмена.COM);
		
	КонецЕсли;
	
	// Если сервер 1С запущен на ОС Linux, то обмен через COM-соединение не поддерживается
	Если ОбщегоНазначения.ЭтоLinuxСервер() Тогда
		
		ОбщегоНазначенияКлиентСервер.УдалитьЗначениеИзМассива(Результат, Перечисления.ВидыТранспортаСообщенийОбмена.COM);
		
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Устанавливает внешнее соединение с информационной базой и возвращает указатель на это соединение
// 
// Параметры:
//  УзелИнформационнойБазы (обязательный) - ПланОбменаСсылка. Узел плана обмена, для которого необходимо получить внешнее соединение
//  СтрокаСообщенияОбОшибке (необязательный) – Строка – если в процессе установки внешнего соединения возникает ошибка,
// то подробное описание ошибки помещается в этот параметр.
//
// Возвращаемое значение:
//  Тип: COM-объект, Неопределенно.
//  в случае успешной установки внешнего соединения возвращается указатель на COM-объект соединения;
//  в случае ошибки возвращается Неопределенно.
//
Функция ПолучитьВнешнееСоединениеДляУзлаИнформационнойБазы(УзелИнформационнойБазы, СтрокаСообщенияОбОшибке = "") Экспорт
    
    Результат = ВнешнееСоединениеДляУзлаИнформационнойБазы(УзелИнформационнойБазы);
    
    СтрокаСообщенияОбОшибке = Результат.ПодробноеОписаниеОшибки;
	Возврат Результат.Соединение;
	
КонецФункции

// Устанавливает внешнее соединение с информационной базой и возвращает указатель на это соединение
// 
// Параметры:
//  УзелИнформационнойБазы (обязательный) - ПланОбменаСсылка. Узел плана обмена, для которого необходимо получить внешнее соединение
//  СтрокаСообщенияОбОшибке (необязательный) – Строка – если в процессе установки внешнего соединения возникает ошибка,
// то подробное описание ошибки помещается в этот параметр.
//
// Возвращаемое значение:
//  Тип: COM-объект, Неопределенно.
//  в случае успешной установки внешнего соединения возвращается указатель на COM-объект соединения;
//  в случае ошибки возвращается Неопределенно.
//
Функция ВнешнееСоединениеДляУзлаИнформационнойБазы(УзелИнформационнойБазы) Экспорт
	
	Возврат ОбменДаннымиСервер.УстановитьВнешнееСоединениеСБазой(
        РегистрыСведений.НастройкиТранспортаОбмена.НастройкиТранспорта(
            УзелИнформационнойБазы, Перечисления.ВидыТранспортаСообщенийОбмена.COM));
	
КонецФункции

// Определяет возможность передачи файлов между двумя базами через локальную сеть
//
// Параметры:
//  УзелИнформационнойБазы       – ПланОбменаСсылка – узел плана обмена, для которого выполняется получение сообщения обмена
//  Пароль                       - Строка - Пароль для WS соединения
//
Функция ОбменВыполняетсяВОднойЛокальнойСети(Знач УзелИнформационнойБазы, Знач ПараметрыАутентификации = Неопределено) Экспорт
	
	Возврат ОбменДаннымиСервер.ОбменВыполняетсяВОднойЛокальнойСети(УзелИнформационнойБазы, ПараметрыАутентификации);
	
КонецФункции

// Только для внутреннего использования. Устарело, будет удалено в следующей версии.
//
Функция ПолучитьЭлементыИерархическогоСправочникаИерархияГруппИЭлементов(ПолноеИмяТаблицы) Экспорт
	Возврат ОбменДаннымиСервер.ЭлементыИерархическогоСправочникаИерархияГруппИЭлементов(ПолноеИмяТаблицы);
КонецФункции

// Только для внутреннего использования. Устарело, будет удалено в следующей версии.
//
Функция ПолучитьЭлементыИерархическогоСправочникаИерархияЭлементов(ПолноеИмяТаблицы) Экспорт
	Возврат ОбменДаннымиСервер.ЭлементыИерархическогоСправочникаИерархияЭлементов(ПолноеИмяТаблицы);
КонецФункции

// Только для внутреннего использования. Устарело, будет удалено в следующей версии.
//
Функция ПолучитьЭлементыНеиерархическогоСправочника(ПолноеИмяТаблицы) Экспорт
	Возврат ОбменДаннымиСервер.ЭлементыНеиерархическогоСправочника(ПолноеИмяТаблицы);
КонецФункции

// Возвращает признак доступности использования плана обмена.
// Признак вычисляется по составу всех функциональных опций конфигурации.
// Если план обмена не входит в состав ни одной функциональной опции, то возвращается Истина.
// Если план обмена входит в состав функциональных опций, то возвращается Истина,если хотя бы одна функциональная опция включена.
// В противном случае функция возвращает Ложь.
//
// Параметры:
//  ИмяПланаОбмена – Строка. Имя плана обмена, для которого необходимо вычислить признак использования.
//
// Возвращаемое значение. Тип: Булево.
//  Истина – доступно использование плана обмена. Ложь – использование не доступно.
//
Функция ДоступноИспользованиеПланаОбмена(Знач ИмяПланаОбмена) Экспорт
	
	ОбъектВходитВСоставФункциональныхОпций = Ложь;
	
	Для Каждого ФункциональнаяОпция Из Метаданные.ФункциональныеОпции Цикл
		
		Если ФункциональнаяОпция.Состав.Содержит(Метаданные.ПланыОбмена[ИмяПланаОбмена]) Тогда
			
			ОбъектВходитВСоставФункциональныхОпций = Истина;
			
			Если ПолучитьФункциональнуюОпцию(ФункциональнаяОпция.Имя) = Истина Тогда
				
				Возврат Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если Не ОбъектВходитВСоставФункциональныхОпций Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции

// Возвращает массив номеров версий, поддерживаемых интерфейсом корреспондента для подсистемы ОбменДанными.
// 
// Параметры:
// Корреспондент – Структура, ПланОбменаСсылка. Узел плана обмена, который соответствует информационной базе-корреспонденту.
//
// Возвращаемое значение:
// Массив номеров версий, поддерживаемых интерфейсом корреспондента.
//
Функция ВерсииКорреспондента(Знач Корреспондент) Экспорт
	
	Если ТипЗнч(Корреспондент) = Тип("Структура") Тогда
		СтруктураНастроек = Корреспондент;
	Иначе
		СтруктураНастроек = РегистрыСведений.НастройкиТранспортаОбмена.НастройкиТранспортаWS(Корреспондент);
	КонецЕсли;
	
	ПараметрыПодключения = Новый Структура;
	ПараметрыПодключения.Вставить("URL",      СтруктураНастроек.WSURLВебСервиса);
	ПараметрыПодключения.Вставить("UserName", СтруктураНастроек.WSИмяПользователя);
	ПараметрыПодключения.Вставить("Password", СтруктураНастроек.WSПароль);
	
	Возврат ОбщегоНазначения.ПолучитьВерсииИнтерфейса(ПараметрыПодключения, "ОбменДанными");
КонецФункции

// Возвращает массив всех ссылочных типов, определенных в конфигурации
//
Функция ВсеСсылочныеТипыКонфигурации() Экспорт
	
	Результат = Новый Массив;
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат, Справочники.ТипВсеСсылки().Типы());
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат, Документы.ТипВсеСсылки().Типы());
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат, БизнесПроцессы.ТипВсеСсылки().Типы());
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат, ПланыВидовХарактеристик.ТипВсеСсылки().Типы());
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат, ПланыСчетов.ТипВсеСсылки().Типы());
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат, ПланыВидовРасчета.ТипВсеСсылки().Типы());
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат, Задачи.ТипВсеСсылки().Типы());
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат, ПланыОбмена.ТипВсеСсылки().Типы());
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Результат, Перечисления.ТипВсеСсылки().Типы());
	
	Возврат Результат;
КонецФункции

Функция ПланыОбменаАвтономнойРаботы()
	
	// План обмена для организации автономной работы в модели сервиса должен:
	// - быть разделенным
	// - быть планом обмена распределенной ИБ
	// - использоваться для обмена в модели сервиса (ПланОбменаИспользуетсяВМоделиСервиса = Истина)
	
	Результат = Новый Массив;
	
	Для Каждого ПланОбмена Из Метаданные.ПланыОбмена Цикл
		
		Если ОбменДаннымиСервер.ЭтоРазделенныйПланОбменаБСП(ПланОбмена.Имя)
			И ПланОбмена.РаспределеннаяИнформационнаяБаза
			И ПланОбменаИспользуетсяВМоделиСервиса(ПланОбмена.Имя) Тогда
			
			Результат.Добавить(ПланОбмена.Имя);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Инициализация структуры настроек обмена данными

// Выполняет инициализацию подсистемы обмена данными для выполнения процесса обмена
//
// Параметры:
// 
// Возвращаемое значение:
//  СтруктураНастроекОбмена - Структура - структура со всеми необходимыми данными и объектами для выполнения обмена
//
Функция ПолучитьСтруктуруНастроекОбменаДляУзлаИнформационнойБазы(
	УзелИнформационнойБазы,
	ДействиеПриОбмене,
	ВидТранспортаСообщенийОбмена,
	ИспользоватьНастройкиТранспорта = Истина
	) Экспорт
	
	Возврат ОбменДаннымиСервер.ПолучитьСтруктуруНастроекОбменаДляУзлаИнформационнойБазы(
		УзелИнформационнойБазы,
		ДействиеПриОбмене,
		ВидТранспортаСообщенийОбмена,
		ИспользоватьНастройкиТранспорта);
КонецФункции

// Выполняет инициализацию подсистемы обмена данными для выполнения процесса обмена
//
// Параметры:
// 
// Возвращаемое значение:
//  СтруктураНастроекОбмена - Структура - структура со всеми необходимыми данными и объектами для выполнения обмена
//
Функция ПолучитьСтруктуруНастроекОбмена(НастройкаВыполненияОбмена, НомерСтроки) Экспорт
	
	Возврат ОбменДаннымиСервер.ПолучитьСтруктуруНастроекОбмена(НастройкаВыполненияОбмена, НомерСтроки);
	
КонецФункции

// Получает структуру настроек транспорта для выполнения обмена данными
//
Функция ПолучитьСтруктуруНастроекТранспорта(УзелИнформационнойБазы, ВидТранспортаСообщенийОбмена) Экспорт
	
	Возврат ОбменДаннымиСервер.ПолучитьСтруктуруНастроекТранспорта(УзелИнформационнойБазы, ВидТранспортаСообщенийОбмена);
	
КонецФункции

// Получает список макетов типовых правил для обмена данными из конфигурации для заданного плана обмена;
// список заполняется именами и синонимами макетов правил
// 
// Параметры:
//  ИмяПланаОбмена - Строка - имя плана обмена как оно задано в конфигураторе
// 
// Возвращаемое значение:
//  СписокПравил - список значений - список макетов типовых правил для обмена данными
//
Функция ПолучитьСписокТиповыхПравил(ИмяПланаОбмена, ЛитералИмениМакета)
	
	СписокПравил = Новый СписокЗначений;
	
	Если ПустаяСтрока(ИмяПланаОбмена) Тогда
		Возврат СписокПравил;
	КонецЕсли;
	
	Для Каждого Макет ИЗ Метаданные.ПланыОбмена[ИмяПланаОбмена].Макеты Цикл
		
		Если Найти(Макет.Имя, ЛитералИмениМакета) <> 0 Тогда
			
			СписокПравил.Добавить(Макет.Имя, Макет.Синоним);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СписокПравил;
КонецФункции

//
//  Возвращает таблицу состава узла (только ссылочный тип)
//
//  Параметры:
//      УзелОбмена:    ссылка на анализируемый узел обмена
//      Периодические: флаг того, что надо включать в результат объекты с датой (документы и т.п.)
//      Справочные:    флаг того, что надо включать в результат  нормативно-справочные объекты
//
//  Колонки результата:
//      ПолноеИмяМетаданных: полное имя метаданных (имя таблицы для запроса)
//      ПредставлениеСписка: представление списка для таблицы
//      Представление:       представление объекта для таблицы
//      ИндексКартинки:      индекс картинки согласно "БиблиотекаКартинок.КоллекцияОбъектыМетаданных"
//      Тип:                 соответствующий тип
//      ВыборПериода:        флаг того, что к объекту можно применить выбор по периода
//
Функция СсылочныеТаблицыСоставаУзла(УзелОбмена, Периодические=Истина, Справочные=Истина) Экспорт
	
	ТаблицаРезультата = Новый ТаблицаЗначений;
	Для Каждого КлючЗначение Из (Новый Структура("ПолноеИмяМетаданных, Представление, ПредставлениеСписка, ИндексКартинки, Тип, ВыборПериода")) Цикл
		ТаблицаРезультата.Колонки.Добавить(КлючЗначение.Ключ);
	КонецЦикла;
	Для Каждого КлючЗначение Из (Новый Структура("ПолноеИмяМетаданных, Представление, ПредставлениеСписка, Тип")) Цикл
		ТаблицаРезультата.Индексы.Добавить(КлючЗначение.Ключ);
	КонецЦикла;
	
	Если УзелОбмена=Неопределено Тогда
		Возврат ТаблицаРезультата;
	КонецЕсли;
	
	// Все регистрируемое на узле
	Для Каждого ЭлементСостава Из УзелОбмена.Метаданные().Состав Цикл
		Мета = ЭлементСостава.Метаданные;
		Описание = ОписаниеОбъектаМетаданных(Мета);
		Если Описание.ИндексКартинки>=0 Тогда
			// Наш ссылочный тип
			Если Не Периодические И Описание.Периодический Тогда 
				Продолжить;
			ИначеЕсли Не Справочные И Описание.Справочный Тогда 
				Продолжить;
			КонецЕсли;
			
			Строка = ТаблицаРезультата.Добавить();
			ЗаполнитьЗначенияСвойств(Строка, Описание);
			Строка.ВыборПериода        = Описание.Периодический;
			Строка.ПолноеИмяМетаданных = Мета.ПолноеИмя();
			Строка.ПредставлениеСписка = ОбменДаннымиСервер.ПредставлениеСпискаОбъектов(Мета);
			Строка.Представление       = ОбменДаннымиСервер.ПредставлениеОбъекта(Мета);
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаРезультата.Сортировать("ПредставлениеСписка");
	Возврат ТаблицаРезультата;
КонецФункции

Функция ОписаниеОбъектаМетаданных(Мета)
	Рез = Новый Структура("ИндексКартинки, Периодический, Справочный, Тип", -1, Ложь, Ложь);
	
	Если Метаданные.Справочники.Содержит(Мета) Тогда
		Рез.ИндексКартинки = 3;
		Рез.Справочный = Истина;
		Рез.Тип = Тип("СправочникСсылка." + Мета.Имя);
		
	ИначеЕсли Метаданные.Документы.Содержит(Мета) Тогда
		Рез.ИндексКартинки = 7;
		Рез.Периодический = Истина;
		Рез.Тип = Тип("ДокументСсылка." + Мета.Имя);
		
	ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(Мета) Тогда
		Рез.ИндексКартинки = 9;
		Рез.Справочный = Истина;
		Рез.Тип = Тип("ПланВидовХарактеристикСсылка." + Мета.Имя);
		
	ИначеЕсли Метаданные.ПланыСчетов.Содержит(Мета) Тогда
		Рез.ИндексКартинки = 11;
		Рез.Справочный = Истина;
		Рез.Тип = Тип("ПланСчетовСсылка." + Мета.Имя);
		
	ИначеЕсли Метаданные.ПланыВидовРасчета.Содержит(Мета) Тогда
		Рез.ИндексКартинки = 13;
		Рез.Справочный = Истина;
		Рез.Тип = Тип("ПланВидовРасчетаСсылка." + Мета.Имя);
		
	ИначеЕсли Метаданные.БизнесПроцессы.Содержит(Мета) Тогда
		Рез.ИндексКартинки = 23;
		Рез.Периодический = Истина;
		Рез.Тип = Тип("БизнесПроцессСсылка." + Мета.Имя);
		
	ИначеЕсли Метаданные.Задачи.Содержит(Мета) Тогда
		Рез.ИндексКартинки = 25;
		Рез.Периодический  = Истина;
		Рез.Тип = Тип("ЗадачаСсылка." + Мета.Имя);
		
	КонецЕсли;
	
	Возврат Рез;
КонецФункции

// Определяет используется ли версионирование
//
// Параметры:
//	Отправитель - ПланОбменаСсылка - Если параметр передается, то определяет необходимо
//		ли использовать создание версий объектов для переданного узла
//
Функция ИспользуетсяВерсионирование(Отправитель = Неопределено, ПроверятьПраваДоступа = Ложь) Экспорт
	
	Используется = Ложь;
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.ВерсионированиеОбъектов") Тогда
		
		Используется = ?(Отправитель <> Неопределено, ЭтоУзелОбменаДаннымиБСП(Отправитель), Истина);
		
		Если Используется И ПроверятьПраваДоступа Тогда
			
			МодульВерсионированиеОбъектов = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ВерсионированиеОбъектов");
			Используется = МодульВерсионированиеОбъектов.ЕстьПравоНаЧтениеВерсийОбъектов();
			
		КонецЕсли;
			
	КонецЕсли;
	
	Возврат Используется;
	
КонецФункции