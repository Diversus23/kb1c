////////////////////////////////////////////////////////////////////////////////
// Подсистема "Дополнительные отчеты и обработки в модели сервиса"
// 
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Процедура предназначена для синхронизации значений констант, регулирующих
//  использование дополнительных отчетов и обработок в модели сервиса. Процедура
//  должна вызываться при любом изменении любой из констант, регулирующих
//  использование дополнительных отчетов и обработок.
//
// Параметры:
//  Константа - строка, имя измененной константы, как оно задано в метаданных,
//  Значение - булево, новое значение измененной константы
//
Процедура СинхронизацияЗначенийРегулирующихКонстант(Знач Константа, Знач Значение) Экспорт
	
	СостояниеИспользования = Ложь;
	
	РегулирующиеКонстанты = ДополнительныеОтчетыИОбработкиВМоделиСервисаПовтИсп.РегулирующиеКонстанты();
	
	Для Каждого РегулирующаяКонстанта Из РегулирующиеКонстанты Цикл
		
		Если РегулирующаяКонстанта = Константа Тогда
			ЗначениеКонстанты = Значение;
		Иначе
			ЗначениеКонстанты = Константы[РегулирующаяКонстанта].Получить();
		КонецЕсли;
		
		Если ЗначениеКонстанты Тогда
			СостояниеИспользования = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Константы.ИспользоватьДополнительныеОтчетыИОбработки.Установить(СостояниеИспользования);
	
КонецПроцедуры

// Функция проверяет, является ли переданная дополнительная обработка экземпляром
//  поставляемой дополнительной обработки.
//
// Параметры:
// ИспользуемаяОбработка - СправочникСсылка.ДополнительныеОтчетыИОбработки.
//
// Возвращаемое значение:
//  Булево.
//
Функция ЭтоПоставляемаяОбработка(ИспользуемаяОбработка) Экспорт
	
	ПоставляемаяОбработка = ПоставляемаяОбработка(ИспользуемаяОбработка);
	Возврат ЗначениеЗаполнено(ПоставляемаяОбработка);
	
КонецФункции

// Функция возвращает поставляемую обработку, соответствующую используемой обработке.
//
// Параметры:
// ИспользуемаяОбработка - СправочникСсылка.ДополнительныеОтчетыИОбработки.
//
// Возвращаемое значение:
//  СправочникСсылка.ПоставляемыеДополнительныеОтчетыИОбработки.
//
Функция ПоставляемаяОбработка(ИспользуемаяОбработка) Экспорт
	
	Если Не ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
		
		ВызватьИсключение НСтр("ru = 'Использование функции ДополнительныеОтчетыИОбработкиВМоделиСервиса.ПоставляемаяОбработка()
                                |доступно только сеансов с установленным разделением данных!'");
		
	КонецЕсли;
	
	ТекстЗапроса = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	Инсталляции.ПоставляемаяОбработка КАК ПоставляемаяОбработка
	               |ИЗ
	               |	РегистрСведений.ИспользованиеПоставляемыхДополнительныхОтчетовИОбработокВОбластяхДанных КАК Инсталляции
	               |ГДЕ
	               |	Инсталляции.ИспользуемаяОбработка = &ИспользуемаяОбработка";
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ИспользуемаяОбработка", ИспользуемаяОбработка);
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.ПоставляемаяОбработка;
	КонецЕсли;
	
КонецФункции

// Функция возвращает используемую обработку, соответствующую поставляемой обработке для текущего значения разделителя ОбластьДанных.
//
// Параметры:
//  ПоставляемаяОбработка - СправочникСсылка.ПоставляемыеДополнительныеОтчетыИОбработки.
//
// Возвращаемое значение:
//  СправочникСсылка.ДополнительныеОтчетыИОбработки.
//
Функция ИспользуемаяОбработка(ПоставляемаяОбработка) Экспорт
	
	Если Не ОбщегоНазначенияПовтИсп.ДоступноИспользованиеРазделенныхДанных() Тогда
		
		ВызватьИсключение НСтр("ru = 'Использование функции ДополнительныеОтчетыИОбработкиВМоделиСервиса.ИспользуемаяОбработка()
                                |доступно только сеансов с установленным разделением данных!'");
		
	КонецЕсли;
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	Инсталляции.ИспользуемаяОбработка КАК ИспользуемаяОбработка
	               |ИЗ
	               |	РегистрСведений.ИспользованиеПоставляемыхДополнительныхОтчетовИОбработокВОбластяхДанных КАК Инсталляции
	               |ГДЕ
	               |	Инсталляции.ПоставляемаяОбработка = &ПоставляемаяОбработка";
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ОбластьДанных", ОбщегоНазначения.ЗначениеРазделителяСеанса());
	Запрос.УстановитьПараметр("ПоставляемаяОбработка", ПоставляемаяОбработка);
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий();
		Возврат Выборка.ИспользуемаяОбработка;
	КонецЕсли;
	
КонецФункции

// Функция возвращает перечень инсталляций поставляемой дополнительной обработки в области данных.
//
// Параметры:
//  ПоставляемаяОбработка - СправочникСсылка.ПоставляемыеДополнительныеОтчетыИОбработки.
//
// Возвращаемое значение:
//  ТаблицаЗначений, колонки:
//    ОбластьДанных - число (7,0),
//    ИспользуемаяОбработка - СправочникСсылка.ДополнительныеОтчетыИОбработки.
//
Функция ПереченьИнсталляций(Знач ПоставляемаяОбработка) Экспорт
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Инсталляции.ОбластьДанныхВспомогательныеДанные КАК ОбластьДанных,
		|	Инсталляции.ИспользуемаяОбработка КАК ИспользуемаяОбработка
		|ИЗ
		|	РегистрСведений.ИспользованиеПоставляемыхДополнительныхОтчетовИОбработокВОбластяхДанных КАК Инсталляции
		|ГДЕ
		|	Инсталляции.ПоставляемаяОбработка = &ПоставляемаяОбработка";
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ПоставляемаяОбработка", ПоставляемаяОбработка);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Функция возвращает очередь инсталляций поставляемой дополнительной обработки в области данных.
//
// Параметры:
//  ПоставляемаяОбработка - СправочникСсылка.ПоставляемыеДополнительныеОтчетыИОбработки.
//
// Возвращаемое значение:
//  ТаблицаЗначений, колонки:
//    ОбластьДанных - число (7,0),
//    ПараметрыУстановки - ХранилищеЗначения.
//
Функция ОчередьИнсталляций(Знач ПоставляемаяОбработка) Экспорт
	
	ТекстЗапроса =
		"ВЫБРАТЬ
		|	Очередь.ОбластьДанныхВспомогательныеДанные КАК ОбластьДанных,
		|	Очередь.ПараметрыИнсталляции КАК ПараметрыИнсталляции
		|ИЗ
		|	РегистрСведений.ОчередьИнсталляцииПоставляемыхДополнительныхОтчетовИОбработокВОбластиДанных КАК Очередь
		|ГДЕ
		|	Очередь.ПоставляемаяОбработка = &ПоставляемаяОбработка";
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("ПоставляемаяОбработка", ПоставляемаяОбработка);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Выполняет установку поставляемой дополнительной обработки в текущую область данных.
//
// Параметры:
//  ОписаниеИнсталляции - Структура, ключи:
//    Идентификатор - УникальныйИдентификатор, уникальный идентификатор ссылки
//      элемента справочника ПоставляемыеДополнительныеОтчетыИОбработки,
//    Представление - строка, представление инсталляции поставляемой дополнительной
//      обработки (будет использоваться в качестве наименования элемента справочника
//      ДополнительныеОтчетыИОбработки),
//    Инсталляция - УникальныйИдентификатор, уникальный идентификатор инсталляции
//      поставляемой дополнительной обработки (будет использоваться в качестве
//      уникального идентификатора ссылки справочника ДополнительныеОтчетыИОбработки),
//  БыстрыйДоступ - ТаблицаЗначений, содержащая настройки включения команд дополнительной
//     обработки в быстрый доступ пользователей приложения, колонки:
//    ИдентификаторКоманды - строка, идентификатор команды,
//    Пользователь - СправочникСсылка.Пользователь,
//  Задания - ТаблицаЗначений, содержащая настройку выполнения команд дополнительной обработки
//      в качестве регламентных заданий, колонки:
//    Идентификатор - строка, идентификатор команды,
//    РегламентноеЗаданиеРасписание - СписокЗначений, содержащий один элемент типа
//       РасписаниеРегламентногоЗадания,
//    РегламентноеЗаданиеИспользование - булево, признак включения выполнения команды
//      в качестве регламентного задания,
//  Разделы - ТаблицаЗначений, содержащая настройки включения команд для инсталляции
//      поставляемой дополнительной обработки в разделы командного интерфейса, колонки:
//    Раздел - СправочникСсылка.ИдентификаторыОбъектовМетаданных,
//  СправочникиИДокументы - ТаблицаЗначений, содержащая настройки включения команд для инсталляции
//      поставляемой дополнительной обработки в интерфейс форм список и элементов, колонки:
//    ОбъектНазначения - СправочникСсылка.ИдентификаторыОбъектовМетаданных,
//  ВариантыДополнительногоОтчета - Массив(Строка), массив, содержащий ключи вариантов отчетов
//    дополнительного отчета,
//  Ответственный - СправочникСсылка.Пользователи.
//
Процедура УстановитьПоставляемуюОбработкуВОбластьДанных(Знач ОписаниеИнсталляции, Знач БыстрыйДоступ, Знач Задания, Знач Разделы, Знач СправочникиИДокументы, Знач НастройкиРасположенияКоманд, Знач ВариантыДополнительногоОтчета, Знач Ответственный) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	
	ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Поставляемые дополнительные отчеты и обработки.Инициирована установка поставляемой обработки в область данных'",
		ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Информация,
		,
		Строка(ОписаниеИнсталляции.Идентификатор),
		Строка(ОписаниеИнсталляции.Инсталляция));
	
	Попытка
		
		ПоставляемаяОбработка = Справочники.ПоставляемыеДополнительныеОтчетыИОбработки.ПолучитьСсылку(ОписаниеИнсталляции.Идентификатор);
		
		Набор = РегистрыСведений.ОчередьИнсталляцииПоставляемыхДополнительныхОтчетовИОбработокВОбластиДанных.СоздатьНаборЗаписей();
		Набор.Отбор.ПоставляемаяОбработка.Установить(ПоставляемаяОбработка);
		Набор.Записать();
		
		Если ОбщегоНазначения.СсылкаСуществует(ПоставляемаяОбработка) Тогда
			
			Попытка
				
				АктуальныеКоманды = ПоставляемаяОбработка.Команды.Выгрузить();
				АктуальныеКоманды.Колонки.Добавить("РегламентноеЗаданиеРасписание", Новый ОписаниеТипов("СписокЗначений"));
				АктуальныеКоманды.Колонки.Добавить("РегламентноеЗаданиеИспользование", Новый ОписаниеТипов("Булево"));
				АктуальныеКоманды.Колонки.Добавить("РегламентноеЗаданиеGUID", Новый ОписаниеТипов("УникальныйИдентификатор"));
				
				Для Каждого АктуальнаяКоманда Из АктуальныеКоманды Цикл
					
					НастройкаЗадания = Задания.Найти(АктуальнаяКоманда.Идентификатор, "Идентификатор");
					Если НастройкаЗадания <> Неопределено Тогда
						ЗаполнитьЗначенияСвойств(АктуальнаяКоманда, НастройкаЗадания, "РегламентноеЗаданиеРасписание,РегламентноеЗаданиеИспользование");
					КонецЕсли;
					
				КонецЦикла;
				
				// Создается элемент справочника ДополнительныеОтчетыИОбработки, выступающий в роли используемой обработки
				ИспользуемаяОбработкаСсылка = ИспользуемаяОбработка(ПоставляемаяОбработка);
				Если ЗначениеЗаполнено(ИспользуемаяОбработкаСсылка) Тогда
					ИспользуемаяОбработка = ИспользуемаяОбработкаСсылка.ПолучитьОбъект();
				Иначе
					ИспользуемаяОбработка = Справочники.ДополнительныеОтчетыИОбработки.СоздатьЭлемент();
				КонецЕсли;
				
				ЗаполнитьНастройкиИспользуемойОбработки(
					ИспользуемаяОбработка, ПоставляемаяОбработка);
				
				Если ЗначениеЗаполнено(Разделы) И Разделы.Количество() > 0 Тогда
					ИспользуемаяОбработка.Разделы.Загрузить(Разделы);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(СправочникиИДокументы) И СправочникиИДокументы.Количество() > 0 Тогда
					
					ИспользуемаяОбработка.Назначение.Загрузить(СправочникиИДокументы);
					ИспользуемаяОбработка.ИспользоватьДляФормыСписка = НастройкиРасположенияКоманд.ИспользоватьДляФормыСписка;
					ИспользуемаяОбработка.ИспользоватьДляФормыОбъекта = НастройкиРасположенияКоманд.ИспользоватьДляФормыОбъекта;
					
				КонецЕсли;
				
				ИспользуемаяОбработка.Наименование = ОписаниеИнсталляции.Представление;
				ИспользуемаяОбработка.Ответственный = Ответственный;
				
				ИспользуемаяОбработка.ДополнительныеСвойства.Вставить("БыстрыйДоступ", БыстрыйДоступ);
				ИспользуемаяОбработка.ДополнительныеСвойства.Вставить("АктуальныеКоманды", АктуальныеКоманды);
				
				Если ИспользуемаяОбработка.ЭтоНовый() Тогда
					ИспользуемаяОбработка.УстановитьСсылкуНового(
						Справочники.ДополнительныеОтчетыИОбработки.ПолучитьСсылку(
							ОписаниеИнсталляции.Инсталляция));
				КонецЕсли;
				
				// Устанавливается связь между поставляемой и используемой обработкой
				НаборЗаписей = РегистрыСведений.ИспользованиеПоставляемыхДополнительныхОтчетовИОбработокВОбластяхДанных.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.ПоставляемаяОбработка.Установить(ПоставляемаяОбработка);
				Запись = НаборЗаписей.Добавить();
				Запись.ПоставляемаяОбработка = ПоставляемаяОбработка;
				Если ИспользуемаяОбработка.ЭтоНовый() Тогда
					Запись.ИспользуемаяОбработка = ИспользуемаяОбработка.ПолучитьСсылкуНового();
				Иначе
					Запись.ИспользуемаяОбработка = ИспользуемаяОбработка.Ссылка;
				КонецЕсли;
				НаборЗаписей.Записать();
				
				ИспользуемаяОбработка.Записать();
				
				// Размещение вариантов дополнительного отчета в разделах, которые выбрал пользователь
				// при установке (или разработчик при создании манифеста, если пользователь не
				// изменял настройки по-умолчанию.
				Для Каждого ВариантДополнительногоОтчета Из ВариантыДополнительногоОтчета Цикл
					
					ВариантСсылка = Неопределено;
					КлючВарианта = ВариантДополнительногоОтчета.Ключ;
					ДополнительныеОтчетыИОбработки.ПриОпределенииСсылкиВариантаДополнительногоОтчета(ИспользуемаяОбработка.Ссылка, КлючВарианта, ВариантСсылка);
					Если ВариантСсылка <> Неопределено Тогда
						
						Вариант = ВариантСсылка.ПолучитьОбъект();
						Вариант.Размещение.Очистить();
						
						Для Каждого ЭлементРазмещения Из ВариантДополнительногоОтчета.Размещение Цикл
							
							РазмещениеВарианта = Вариант.Размещение.Добавить();
							РазмещениеВарианта.Использование = Истина;
							РазмещениеВарианта.РазделИлиГруппа = ЭлементРазмещения.Раздел;
							РазмещениеВарианта.Важный = ЭлементРазмещения.Важный;
							РазмещениеВарианта.СмТакже = ЭлементРазмещения.СмТакже;
							
						КонецЦикла;
						
						Вариант.Записать();
						
					КонецЕсли;
					
				КонецЦикла;
				
				// Отправляется сообщение в МС об успешной установке обработки в области данных
				Сообщение = СообщенияВМоделиСервиса.НовоеСообщение(
					СообщенияКонтрольДополнительныхОтчетовИОбработокИнтерфейс.СообщениеДополнительныйОтчетИлиОбработкаУстановлена());
				
				Сообщение.Body.Zone = ОбщегоНазначения.ЗначениеРазделителяСеанса();
				Сообщение.Body.Extension = ПоставляемаяОбработка.УникальныйИдентификатор();
				Сообщение.Body.Installation = ОписаниеИнсталляции.Инсталляция;
				
				СообщенияВМоделиСервиса.ОтправитьСообщение(
					Сообщение,
					РаботаВМоделиСервисаПовтИсп.КонечнаяТочкаМенеджераСервиса(),
					Истина);
				
				ЗаписьЖурналаРегистрации(НСтр("ru = 'Поставляемые дополнительные отчеты и обработки.Установка в область данных'",
					ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Информация,
					,
					ПоставляемаяОбработка,
					Строка(ОписаниеИнсталляции.Инсталляция));
				
			Исключение
				
				ТекстИсключения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
				
				ОбработатьОшибкуУстановкиДополнительнойОбработкиВОбластьДанных(
					ПоставляемаяОбработка, ОписаниеИнсталляции.Инсталляция, ТекстИсключения);
				
			КонецПопытки;
			
		Иначе
			
			// Поставляемая обработка еще не синхронизировалась через поставляемые данные.
			// Она будет записана в очередь инсталляции и обработана после окончания синхронизации
			// поставляемых данных.
			
			Контекст = Новый Структура(
				"БыстрыйДоступ,Задания,Разделы,СправочникиИДокументы,НастройкиРасположенияКоманд,ВариантыДополнительногоОтчета,Ответственный,Представление,Инсталляция",
				БыстрыйДоступ,
				Задания,
				Разделы,
				СправочникиИДокументы,
				НастройкиРасположенияКоманд,
				ВариантыДополнительногоОтчета,
				Ответственный,
				ОписаниеИнсталляции.Представление,
				ОписаниеИнсталляции.Инсталляция);
			
			Менеджер = РегистрыСведений.ОчередьИнсталляцииПоставляемыхДополнительныхОтчетовИОбработокВОбластиДанных.СоздатьМенеджерЗаписи();
			Менеджер.ПоставляемаяОбработка = ПоставляемаяОбработка;
			Менеджер.ПараметрыИнсталляции = Новый ХранилищеЗначения(Контекст);
			Менеджер.Записать();
			
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Поставляемые дополнительные отчеты и обработки.Установка в область данных отложена'",
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Информация,
				,
				Строка(ОписаниеИнсталляции.Идентификатор),
				Строка(ОписаниеИнсталляции.Инсталляция));
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
		ОбменСообщениями.ДоставитьСообщения();
		
	Исключение
		
		ОтменитьТранзакцию();
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

// Выполняет удаление поставляемой дополнительной обработки из текущей области данных.
//
// Параметры:
//  ПоставляемаяОбработка - СправочникСсылка.ПоставляемыеДополнительныеОтчетыИОбработки,
//  ИдентификаторИспользуемойОбработки - УникальныйИдентификатор, GUID существующего в области
//    данных элемента справочника ДополнительныеОтчетыИОбработки.
//
Процедура УдалитьПоставляемуюОбработкуИзОбластиДанных(Знач ПоставляемаяОбработка, Знач ИдентификаторИспользуемойОбработки) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		УстановитьПривилегированныйРежим(Истина);
		
		Попытка
			
			ИспользуемаяОбработка = Справочники.ДополнительныеОтчетыИОбработки.ПолучитьСсылку(
				ИдентификаторИспользуемойОбработки);
			
			// Очистим связь между поставляемой и используемой обработкой
			НаборЗаписей = РегистрыСведений.ИспользованиеПоставляемыхДополнительныхОтчетовИОбработокВОбластяхДанных.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ПоставляемаяОбработка.Установить(ПоставляемаяОбработка);
			
			// Удалим используемую обработку
			ОбъектОбработки = ИспользуемаяОбработка.ПолучитьОбъект();
			Если ОбъектОбработки <> Неопределено Тогда
				ОбъектОбработки.ОбменДанными.Загрузка = Истина;
				ОбъектОбработки.Удалить();
			КонецЕсли;
			
			НаборЗаписей.Записать();
			
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Поставляемые дополнительные отчеты и обработки.Удаление из области данных'",
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Информация,
				,
				ПоставляемаяОбработка,
				Строка(ИдентификаторИспользуемойОбработки));
			
		Исключение
			
			ТекстИсключения = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Поставляемые дополнительные отчеты и обработки.Ошибка удаления из область данных'",
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,
				,
				ПоставляемаяОбработка,
				Строка(ИдентификаторИспользуемойОбработки) + Символы.ПС + Символы.ВК + ТекстИсключения);
			
			// Отправляется сообщение в МС об ошибке установки обработки в области данных
			Сообщение = СообщенияВМоделиСервиса.НовоеСообщение(
				СообщенияКонтрольДополнительныхОтчетовИОбработокИнтерфейс.СообщениеОшибкаУдаленияДополнительногоОтчетаИлиОбработки());
			
			Сообщение.Body.Zone = ОбщегоНазначения.ЗначениеРазделителяСеанса();
			Сообщение.Body.Extension = ПоставляемаяОбработка.УникальныйИдентификатор();
			Сообщение.Body.Installation = ИдентификаторИспользуемойОбработки;
			Сообщение.Body.ErrorDescription = ТекстИсключения;
			
			СообщенияВМоделиСервиса.ОтправитьСообщение(
				Сообщение,
				РаботаВМоделиСервисаПовтИсп.КонечнаяТочкаМенеджераСервиса());
			
		КонецПопытки;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

// Выполняет удаление поставляемой дополнительной обработки из всех областей данных
//  текущей информационной базы.
//
// Параметры:
//  ПоставляемаяОбработка - СправочникСсылка.ПоставляемыеДополнительныеОтчетыИОбработки.
//
Процедура ОтозватьПоставляемуюДополнительнуюОбработку(Знач ПоставляемаяОбработка) Экспорт
	
	НачатьТранзакцию();
	
	Попытка
		
		Инсталляции = ПереченьИнсталляций(ПоставляемаяОбработка);
		Для Каждого Инсталляция Из Инсталляции Цикл
			
			ПараметрыМетода = Новый Массив;
			ПараметрыМетода.Добавить(ПоставляемаяОбработка);
			ПараметрыМетода.Добавить(Инсталляция.ИспользуемаяОбработка.УникальныйИдентификатор());
			
			ПараметрыЗадания = Новый Структура;
			ПараметрыЗадания.Вставить("ИмяМетода"    , "ДополнительныеОтчетыИОбработкиВМоделиСервиса.УдалитьПоставляемуюОбработкуИзОбластиДанных");
			ПараметрыЗадания.Вставить("Параметры"    , ПараметрыМетода);
			ПараметрыЗадания.Вставить("КоличествоПовторовПриАварийномЗавершении", 3);
			ПараметрыЗадания.Вставить("ОбластьДанных", Инсталляция.ОбластьДанных);
			
			ОчередьЗаданий.ДобавитьЗадание(ПараметрыЗадания);
			
		КонецЦикла;
		
		ОбъектОбработки = ПоставляемаяОбработка.ПолучитьОбъект();
		ОбъектОбработки.ОбменДанными.Загрузка = Истина;
		ОбъектОбработки.Удалить();
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

// Выполняет обработку ошибки при установки дополнительной обработки в область данных.
//
// Параметры:
//  ПоставляемаяОбработка - СправочникСсылка.ПоставляемыеДополнительныеОтчетыИОбработки,
//  ИдентификаторИнсталляции - УникальныйИдентификатор,
//  ТекстИсключения - Строка, текст исключения.
//
Процедура ОбработатьОшибкуУстановкиДополнительнойОбработкиВОбластьДанных(Знач ПоставляемаяОбработка, Знач ИдентификаторИнсталляции, Знач ТекстИсключения) Экспорт
	
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Поставляемые дополнительные отчеты и обработки.Ошибка установки в область данных'",
		ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Ошибка,
		,
		ПоставляемаяОбработка,
		Строка(ИдентификаторИнсталляции) + Символы.ПС + Символы.ВК + ТекстИсключения);
	
	// Отправляется сообщение в МС об ошибке установки обработки в области данных
	Сообщение = СообщенияВМоделиСервиса.НовоеСообщение(
		СообщенияКонтрольДополнительныхОтчетовИОбработокИнтерфейс.СообщениеОшибкаУстановкиДополнительногоОтчетаИлиОбработки());
	
	Сообщение.Body.Zone = ОбщегоНазначения.ЗначениеРазделителяСеанса();
	Сообщение.Body.Extension = ПоставляемаяОбработка.УникальныйИдентификатор();
	Сообщение.Body.Installation = ИдентификаторИнсталляции;
	Сообщение.Body.ErrorDescription = ТекстИсключения;
	
	СообщенияВМоделиСервиса.ОтправитьСообщение(
		Сообщение,
		РаботаВМоделиСервисаПовтИсп.КонечнаяТочкаМенеджераСервиса(),
		Истина);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Вызывается при определении наличия у текущего пользователя права на добавление дополнительного
// отчета или обработки в область данных.
//
// Параметры:
//  ДополнительнаяОбработка - СправочникОбъект.ДополнительныеОтчетыИОбработки, элемент справочника,
//    который записывается пользователем.
//  Результат - Булево, в этот параметр в данной процедуре устанавливается флаг наличия права,
//  СтандартнаяОбработка - Булево, в этот параметр в данной процедуре устанавливается флаг выполнения
//    стандартной обработки проверки права.
//
Процедура ПриПроверкеПраваДобавления(Знач ДополнительнаяОбработка, Результат, СтандартнаяОбработка) Экспорт
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		
		Если Не Константы.НезависимоеИспользованиеДополнительныхОтчетовИОбработокВМоделиСервиса.Получить() Тогда
			
			Если ДополнительнаяОбработка <> Неопределено Тогда
				
				Если ДополнительнаяОбработка.ЭтоНовый() Тогда
					СсылкаОбработки = ДополнительнаяОбработка.ПолучитьСсылкуНового();
				Иначе
					СсылкаОбработки = ДополнительнаяОбработка.Ссылка;
				КонецЕсли;
				
				Результат = ЭтоПоставляемаяОбработка(СсылкаОбработки);
				СтандартнаяОбработка = Ложь;
				
			Иначе
				
				Результат = Ложь;
				СтандартнаяОбработка = Ложь;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при проверке возможности загрузки дополнительного отчета или обработки из файла
//
// Параметры:
//  ДополнительнаяОбработка - СправочникСсылка.ДополнительныеОтчетыИОбработки,
//  Результат - Булево, в этот параметр в данной процедуре устанавливается флаг наличия возможности
//    загрузки дополнительного отчета или обработки из файла,
//  СтандартнаяОбработка - Булево, в этот параметр в данной процедуре устанавливается флаг выполнения
//    стандартной обработки проверки возможности загрузки дополнительного отчета или обработки из файла.
//
Процедура ПриПроверкеВозможностиЗагрузкиОбработкиИзФайла(Знач ДополнительнаяОбработка, Результат, СтандартнаяОбработка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		
		Результат = (Константы.НезависимоеИспользованиеДополнительныхОтчетовИОбработокВМоделиСервиса.Получить()) 
			И (Не ЭтоПоставляемаяОбработка(ДополнительнаяОбработка));
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при проверке возможности выгрузки дополнительного отчета или обработки в файл
//
// Параметры:
//  ДополнительнаяОбработка - СправочникСсылка.ДополнительныеОтчетыИОбработки,
//  Результат - Булево, в этот параметр в данной процедуре устанавливается флаг наличия возможности
//    выгрузки дополнительного отчета или обработки в файл,
//  СтандартнаяОбработка - Булево, в этот параметр в данной процедуре устанавливается флаг выполнения
//    стандартной обработки проверки возможности выгрузки дополнительного отчета или обработки в файл.
//
Процедура ПриПроверкеВозможностиВыгрузкиОбработкиВФайл(Знач ДополнительнаяОбработка, Результат, СтандартнаяОбработка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		
		Результат = Не ЭтоПоставляемаяОбработка(ДополнительнаяОбработка);
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при проверке необходимости отображения расширенной информации о дополнительных
// отчетах и обработках в пользовательском интерфейсе.
//
// Параметры:
//  ДополнительнаяОбработка - СправочникСсылка.ДополнительныеОтчетыИОбработки,
//  Результат - Булево, в этот параметр в данной процедуре устанавливается флаг наличия необходимости
//    отображения расширенной информации о дополнительных отчетах и обработках в пользовательском
//    интерфейсе.
//  СтандартнаяОбработка - Булево, в этот параметр в данной процедуре устанавливается флаг выполнения
//    стандартной обработки проверки наличия необходимости отображения расширенной информации о
//    дополнительных отчетах и обработках в пользовательском интерфейсе.
//
Процедура ПриПроверкеНеобходимостиОтображенияРасширеннойИнформации(Знач ДополнительнаяОбработка, Результат, СтандартнаяОбработка) Экспорт
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		Результат = Не ЭтоПоставляемаяОбработка(ДополнительнаяОбработка);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Возвращает виды публикации дополнительных отчетов и обработок, недоступные для использования
// в текущей модели информационной базы.
//
Функция НедоступныеВидыПубликации() Экспорт
	
	Результат = Новый Массив;
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		Результат.Добавить("РежимОтладки");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Вызывается при получении регистрационных данных для нового дополнительного отчета
// или обработки.
//
Процедура ПриПолученииРегистрационныхДанных(Объект, РегистрационныеДанные, СтандартнаяОбработка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не Объект.ЭтоНовый() И ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		
		ПоставляемаяОбработка = ПоставляемаяОбработка(Объект.Ссылка);
		Если ЗначениеЗаполнено(ПоставляемаяОбработка) Тогда
			
			РегистрационныеДанные = ПолучитьРегистрационныеДанные(ПоставляемаяОбработка);
			СтандартнаяОбработка = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при определении параметров запуска для дополнительного отчета или обработки.
//
Функция ОпределениеПараметровЗапуска(Ссылка, Результат, СтандартнаяОбработка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() И ЭтоПоставляемаяОбработка(Ссылка) Тогда
		
		Результат = ПолучитьПараметрыЗапускаОбработки(Ссылка);
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
	
КонецФункции

// Вызывается при проверке возможности выполнения дополнительного отчета или обработки.
//
Процедура ПроверитьВозможностьВыполнения(Ссылка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		
		Если ЭтоПоставляемаяОбработка(Ссылка) Тогда
			
			ПроверкаВозможностиВыполнения(Ссылка);
			
		Иначе
			
			Если Не Константы.НезависимоеИспользованиеДополнительныхОтчетовИОбработокВМоделиСервиса.Получить() Тогда
				
				ВызватьИсключение НСтр("ru = 'Этот дополнительный отчет или обработка не может быть использован в сервисе!'");
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура выполняет перезаполнение элемента справочника ДополнительныеОтчетыИОбработки
//  по элементу справочника ПоставляемыеДополнительныеОтчетыИОбработки.
//
Процедура ЗаполнитьНастройкиИспользуемойОбработки(ИспользуемаяОбработка, ПоставляемаяОбработка)
	
	ЗаполнитьЗначенияСвойств(ИспользуемаяОбработка, ПоставляемаяОбработка, , "ХранилищеОбработки,Владелец,Родитель");
	
	КомандыИспользуемойОбработки = ИспользуемаяОбработка.Команды.Выгрузить();
	КомандыПоставляемойОбработки = ПоставляемаяОбработка.Команды.Выгрузить();
	
	// Синхронизируем команды используемой обработки по командам поставляемой обработки
	Для Каждого КомандаПоставляемойОбработки Из КомандыПоставляемойОбработки Цикл
		
		КомандаИспользуемойОбработки = КомандыИспользуемойОбработки.Найти(
			КомандаПоставляемойОбработки.Идентификатор, "Идентификатор");
		
		Если КомандаИспользуемойОбработки = Неопределено Тогда
			КомандаИспользуемойОбработки = КомандыИспользуемойОбработки.Добавить();
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(КомандаИспользуемойОбработки, КомандаПоставляемойОбработки,
			"Идентификатор,ВариантЗапуска,Представление,ПоказыватьОповещение,Модификатор,Скрыть");
		
	КонецЦикла;
	
	// Удаляем команды используемой обработки, которые были удалены из новой версии
	// поставляемой обработки
	УдаляемыеКоманды = Новый Массив();
	Для Каждого КомандаИспользуемойОбработки Из КомандыИспользуемойОбработки Цикл
		
		КомандаПоставляемойОбработки = КомандыИспользуемойОбработки.Найти(
			КомандаИспользуемойОбработки.Идентификатор, "Идентификатор");
		
		Если КомандаПоставляемойОбработки = Неопределено Тогда
			УдаляемыеКоманды.Добавить(КомандаИспользуемойОбработки);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого УдаляемаяКоманда Из УдаляемыеКоманды Цикл
		КомандыИспользуемойОбработки.Удалить(УдаляемаяКоманда);
	КонецЦикла;
	
	ИспользуемаяОбработка.Команды.Загрузить(КомандыИспользуемойОбработки);
	
	ИспользуемаяОбработка.Разрешения.Загрузить(ПоставляемаяОбработка.Разрешения.Выгрузить());
	
КонецПроцедуры

// См. описание этой же процедуры в модуле СтандартныеПодсистемыСервер.
Процедура ПриДобавленииОбработчиковСлужебныхСобытий(КлиентскиеОбработчики, СерверныеОбработчики) Экспорт
	
	// СЕРВЕРНЫЕ ОБРАБОТЧИКИ.
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса.ОчередьЗаданий") Тогда
		СерверныеОбработчики[
			"СтандартныеПодсистемы.РаботаВМоделиСервиса.ОчередьЗаданий\ПриОпределенииПсевдонимовОбработчиков"].Добавить(
				"ДополнительныеОтчетыИОбработкиВМоделиСервиса");
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		СерверныеОбработчики[
			"СтандартныеПодсистемы.РаботаВМоделиСервиса\ПриЗаполненииТаблицыПараметровИБ"].Добавить(
				"ДополнительныеОтчетыИОбработкиВМоделиСервиса");
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса.ПоставляемыеДанные") Тогда
		СерверныеОбработчики[
			"СтандартныеПодсистемы.РаботаВМоделиСервиса.ПоставляемыеДанные\ПриОпределенииОбработчиковПоставляемыхДанных"].Добавить(
				"ДополнительныеОтчетыИОбработкиВМоделиСервиса");
	КонецЕсли;
	
	СерверныеОбработчики[
		"СтандартныеПодсистемы.БазоваяФункциональность\ПриДобавленииИсключенийПоискаСсылок"].Добавить(
			"ДополнительныеОтчетыИОбработкиВМоделиСервиса");
	
	СерверныеОбработчики[
		"СтандартныеПодсистемы.ОбновлениеВерсииИБ\ПриДобавленииОбработчиковОбновления"].Добавить(
			"ДополнительныеОтчетыИОбработкиВМоделиСервиса");
	
	СерверныеОбработчики[
		"СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменСообщениями\РегистрацияИнтерфейсовПринимаемыхСообщений"].Добавить(
			"ДополнительныеОтчетыИОбработкиВМоделиСервиса");
	
	СерверныеОбработчики[
		"СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменСообщениями\РегистрацияИнтерфейсовОтправляемыхСообщений"].Добавить(
			"ДополнительныеОтчетыИОбработкиВМоделиСервиса");
	
	СерверныеОбработчики[
		"СтандартныеПодсистемы.РаботаВМоделиСервиса.ОбменСообщениями\ПриОпределенииВерсииИнтерфейсаКорреспондента"].Добавить(
			"ДополнительныеОтчетыИОбработкиВМоделиСервиса");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики событий подсистем БСП

// Формирует список параметров ИБ.
//
// Параметры:
// ТаблицаПараметров - ТаблицаЗначений - таблица описания параметров.
// Описание состав колонок - см. РаботаВМоделиСервиса.ПолучитьТаблицуПараметровИБ()
//
Процедура ПриЗаполненииТаблицыПараметровИБ(Знач ТаблицаПараметров) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаВМоделиСервиса") Тогда
		МодульРаботаВМоделиСервиса = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("РаботаВМоделиСервиса");
		МодульРаботаВМоделиСервиса.ДобавитьКонстантуВТаблицуПараметровИБ(ТаблицаПараметров, "ИспользованиеКаталогаДополнительныхОтчетовИОбработокВМоделиСервиса");
		МодульРаботаВМоделиСервиса.ДобавитьКонстантуВТаблицуПараметровИБ(ТаблицаПараметров, "МинимальныйИнтервалРегламентныхЗаданийДополнительныхОтчетовИОбработокВМоделиСервиса");
		МодульРаботаВМоделиСервиса.ДобавитьКонстантуВТаблицуПараметровИБ(ТаблицаПараметров, "НезависимоеИспользованиеДополнительныхОтчетовИОбработокВМоделиСервиса");
		МодульРаботаВМоделиСервиса.ДобавитьКонстантуВТаблицуПараметровИБ(ТаблицаПараметров, "РазрешитьВыполнениеДополнительныхОтчетовИОбработокРегламентнымиЗаданиямиВМоделиСервиса");
	КонецЕсли;
	
КонецПроцедуры

// Зарегистрировать обработчики поставляемых данных
//
// При получении уведомления о доступности новых общих данных, вызывается процедуры
// ДоступныНовыеДанные модулей, зарегистрированных через ПолучитьОбработчикиПоставляемыхДанных.
// В процедуру передается Дескриптор - ОбъектXDTO Descriptor.
// 
// В случае, если ДоступныНовыеДанные устанавливает аргумент Загружать в значение Истина, 
// данные загружаются, дескриптор и путь к файлу с данными передаются в процедуру 
// ОбработатьНовыеДанные. Файл будет автоматически удален после завершения процедуры.
// Если в менеджере сервиса не был указан файл - значение аргумента равно Неопределено.
//
// Параметры: 
//   Обработчики, ТаблицаЗначений - таблица для добавления обработчиков. 
//       Колонки:
//        ВидДанных, строка - код вида данных, обрабатываемый обработчиком
//        КодОбработчика, строка(20) - будет использоваться при восстановлении обработки данных после сбоя
//        Обработчик,  ОбщийМодуль - модуль, содержащий следующие процедуры:
//          ДоступныНовыеДанные(Дескриптор, Загружать) Экспорт  
//          ОбработатьНовыеДанные(Дескриптор, ПутьКФайлу) Экспорт
//          ОбработкаДанныхОтменена(Дескриптор) Экспорт
//
Процедура ПриОпределенииОбработчиковПоставляемыхДанных(Обработчики) Экспорт
	
	ЗарегистрироватьОбработчикиПоставляемыхДанных(Обработчики);
	
КонецПроцедуры

// Заполняет массив списком имен объектов метаданных, данные которых могут содержать ссылки на различные объекты метаданных,
// но при этом эти ссылки не должны учитываться в бизнес-логике приложения.
//
// Параметры:
//  Массив       - массив строк, например, "РегистрСведений.ВерсииОбъектов".
//
Процедура ПриДобавленииИсключенийПоискаСсылок(Массив) Экспорт
	
	Массив.Добавить(
		Метаданные.РегистрыСведений.ИспользованиеПоставляемыхДополнительныхОтчетовИОбработокВОбластяхДанных.ПолноеИмя());
	
КонецПроцедуры

// Обработчик события ПриОпределенииПсевдонимовОбработчиков.
//
// Заполняет соответствие имен методов их псевдонимам для вызова из очереди заданий
//
// Параметры:
//  СоответствиеИменПсевдонимам - Соответствие
//   Ключ - Псевдоним метода, например ОчиститьОбластьДанных
//   Значение - Имя метода для вызова, например РаботаВМоделиСервиса.ОчиститьОбластьДанных
//    В качестве значения можно указать Неопределено, в этом случае считается что имя 
//    совпадает с псевдонимом
//
Процедура ПриОпределенииПсевдонимовОбработчиков(СоответствиеИменПсевдонимам) Экспорт
	
	СоответствиеИменПсевдонимам.Вставить("ДополнительныеОтчетыИОбработкиВМоделиСервиса.АктуализацияНастроекИспользуемойОбработки");
	СоответствиеИменПсевдонимам.Вставить("ДополнительныеОтчетыИОбработкиВМоделиСервиса.УстановитьПоставляемуюОбработкуВОбластьДанных");
	СоответствиеИменПсевдонимам.Вставить("ДополнительныеОтчетыИОбработкиВМоделиСервиса.УдалитьПоставляемуюОбработкуИзОбластиДанных");
	СоответствиеИменПсевдонимам.Вставить(Метаданные.РегламентныеЗадания.ЗапускДополнительныхОбработок.ИмяМетода);
	
КонецПроцедуры

// Добавляет процедуры-обработчики обновления, необходимые данной подсистеме.
//
// Параметры:
//  Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                  общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ПриДобавленииОбработчиковОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "2.1.5.2";
	Обработчик.Процедура = "ДополнительныеОтчетыИОбработкиВМоделиСервиса.ЗаполнитьРазрешенияИспользуемыхОбработок";
	
КонецПроцедуры

// Заполняет переданный массив общими модулями, которые являются обработчиками интерфейсов
//  принимаемых сообщений
//
// Параметры:
//  МассивОбработчиков - массив
//
Процедура РегистрацияИнтерфейсовПринимаемыхСообщений(МассивОбработчиков) Экспорт
	
	МассивОбработчиков.Добавить(СообщенияУправленияДополнительнымиОтчетамиИОбработкамиИнтерфейс);
	
КонецПроцедуры

// Заполняет переданный массив общими модулями, которые являются обработчиками интерфейсов
//  отправляемых сообщений
//
// Параметры:
//  МассивОбработчиков - массив
//
Процедура РегистрацияИнтерфейсовОтправляемыхСообщений(МассивОбработчиков) Экспорт
	
	МассивОбработчиков.Добавить(СообщенияКонтрольДополнительныхОтчетовИОбработокИнтерфейс);
	
КонецПроцедуры

// Вызывается при определении версии интерфейса сообщений, поддерживаемой как ИБ-корреспондентом,
//  так и текущей ИБ. В данной процедуре предполагается реализовывать механизмы поддержки обратной совместимости
//  со старыми версиями ИБ-корреспондентов
//
// Параметры:
//  ИнтерфейсСообщения - строка, название программного интерфейса сообщения, для которого определяется версия
//  ПараметрыПодключения - структура, параметры подключения к ИБ-корреспонденту
//  ПредставлениеПолучателя - строка, представление ИБ-корреспондента
//  Результат - строка, определяемая версия. Значение данного параметра может быть изменено в данной процедуре.
//
Процедура ПриОпределенииВерсииИнтерфейсаКорреспондента(Знач ИнтерфейсСообщения, Знач ПараметрыПодключения, Знач ПредставлениеПолучателя, Результат) Экспорт
	
	// Совместимость с версиями МС, в которых интерфейс ApplicationExtensionsControl являлся
	// составной частью интерфейса RemoteAdministrationControl
	
	Если Результат = Неопределено И ИнтерфейсСообщения = СообщенияКонтрольДополнительныхОтчетовИОбработокИнтерфейс.ПрограммныйИнтерфейс() Тогда
		
		ПроверяемыйИнтерфейс = СообщенияКонтрольУдаленногоАдминистрированияИнтерфейс.ПрограммныйИнтерфейс();
		ВерсияИнтерфейсаКонтроляУдаленногоАдминистрирования = ИнтерфейсыСообщенийВМоделиСервиса.ВерсияИнтерфейсаКорреспондента(
			ПроверяемыйИнтерфейс, ПараметрыПодключения, ПредставлениеПолучателя);
		
		Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии(ВерсияИнтерфейсаКонтроляУдаленногоАдминистрирования, "1.0.2.4") >= 0 Тогда
			Результат = "1.0.0.1";
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики условных вызовов в другие подсистемы

// Дополнительные отчеты и обработки

// Процедура должна вызываться из события ПередЗаписью справочника
//  ДополнительныеОтчетыИОбработки, выполняет проверку правомерности изменения реквизитов
//  элементов данного справочника для дополнительных обработок, полученных из
//  каталога дополнительных обработок менеджера сервиса.
//
// Параметры:
//  Источник - СправочникОбъект.ДополнительныеОтчетыИОбработки,
//  Отказ - булево, флаг отказа от выполнения записи элемента справочника.
//
Процедура ПередЗаписьюДополнительнойОбработки(Источник, Отказ) Экспорт
	
	Если Источник.ЭтоНовый() Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	Если ОбщегоНазначенияПовтИсп.СеансЗапущенБезРазделителей() Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭтоПоставляемаяОбработка(Источник.Ссылка) Тогда
		
		КонтролируемыеРеквизиты = ДополнительныеОтчетыИОбработкиВМоделиСервисаПовтИсп.КонтролируемыеРеквизиты();
		СтарыеЗначения = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Источник.Ссылка, КонтролируемыеРеквизиты);
		
		Для Каждого КонтролируемыйРеквизит Из КонтролируемыеРеквизиты Цикл
			
			ИсходныйРеквизит = Неопределено;
			РезультирующийРеквизит = Неопределено;
			
			Если ТипЗнч(Источник[КонтролируемыйРеквизит]) = Тип("ХранилищеЗначения") Тогда
				ИсходныйРеквизит = Источник[КонтролируемыйРеквизит].Получить();
			Иначе
				ИсходныйРеквизит = Источник[КонтролируемыйРеквизит];
			КонецЕсли;
			
			Если ТипЗнч(СтарыеЗначения[КонтролируемыйРеквизит]) = Тип("ХранилищеЗначения") Тогда
				РезультирующийРеквизит = СтарыеЗначения[КонтролируемыйРеквизит].Получить();
			Иначе
				РезультирующийРеквизит = СтарыеЗначения[КонтролируемыйРеквизит];
			КонецЕсли;
			
			Если ИсходныйРеквизит <> РезультирующийРеквизит Тогда
				
				ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Недопустимая попытка изменения значения реквизита %1 для дополнительной обработки %2, полученной из каталога дополнительных обработок менеджера сервиса!'"), 
					КонтролируемыйРеквизит, Источник.Наименование);
				
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура должна вызываться из события ПередУдалением справочника
//  ДополнительныеОтчетыИОбработки.
//
// Параметры:
//  Источник - СправочникОбъект.ДополнительныеОтчетыИОбработки,
//  Отказ - булево, флаг отказа от выполнения удаления элемента справочника из информационной базы.
//
Процедура ПередУдалениемДополнительнойОбработки(Источник, Отказ) Экспорт
	
	Если Не ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	НачатьТранзакцию();
	
	Попытка
		
		// Определим поставляемую обработку
		ПоставляемаяОбработка = ПоставляемаяОбработка(Источник.Ссылка);
		
		Если ЗначениеЗаполнено(ПоставляемаяОбработка) Тогда
			
			// Очистим сопоставление используемой обработки с поставляемой
			НаборЗаписей = РегистрыСведений.ИспользованиеПоставляемыхДополнительныхОтчетовИОбработокВОбластяхДанных.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ПоставляемаяОбработка.Установить(ПоставляемаяОбработка);
			НаборЗаписей.Записать();
			
			// Отправим в МС сообщение об удалении обработки из области данных
			Сообщение = СообщенияВМоделиСервиса.НовоеСообщение(
				СообщенияКонтрольДополнительныхОтчетовИОбработокИнтерфейс.СообщениеДополнительныйОтчетИлиОбработкаУдалена());
			
			Сообщение.Body.Zone = ОбщегоНазначения.ЗначениеРазделителяСеанса();
			Сообщение.Body.Extension = ПоставляемаяОбработка.УникальныйИдентификатор();
			Сообщение.Body.Installation = Источник.Ссылка.УникальныйИдентификатор();
			
			СообщенияВМоделиСервиса.ОтправитьСообщение(
				Сообщение,
				РаботаВМоделиСервисаПовтИсп.КонечнаяТочкаМенеджераСервиса());
			
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		ВызватьИсключение;
		
	КонецПопытки;
	
КонецПроцедуры

// Выполняет получение регистрационных данных для регистрируемой обработке по поставляемой обработке
//
// Параметры:
//  ПоставляемаяОбработка - СправочникСсылка.ПоставляемыеДополнительныеОтчетыИОбработки
//
// Возвращаемое значение - структура, аналогичная структуре, возвращаемой экспортируемой функцией
//  СведенияОВнешнейОбработке() внешних обработок.
//
Функция ПолучитьРегистрационныеДанные(Знач ПоставляемаяОбработка) Экспорт
	
	Результат = Новый Структура("Вид, Наименование, Версия, БезопасныйРежим, Информация, ВерсияБСП, ХранилищеВариантов");
	
	УстановитьПривилегированныйРежим(Истина);
	Обработка = ПоставляемаяОбработка.ПолучитьОбъект();
	ЗаполнитьЗначенияСвойств(Результат, Обработка);
	
	// Назначение
	Назначение = Новый Массив();
	Для Каждого ЭлементНазначения Из Обработка.Назначение Цикл
		Назначение.Вставить(ЭлементНазначения.ОбъектНазначения);
	КонецЦикла;
	Результат.Вставить("Назначение", Назначение);
	
	// Команды
	Результат.Вставить("Команды", Обработка.Команды.Выгрузить(
		, "Представление, Идентификатор, Модификатор, ПоказыватьОповещение, Использование"));
	
	Возврат Результат;
	
КонецФункции

// Функция возвращает параметры подключения дополнительной обработки к информационной базе
//
// Параметры:
//  ИспользуемаяОбработка - СправочникСсылка.ДополнительныеОтчетыИОбработки.
//
// Возвращаемое значение - структура, ключи:
//  БезопасныйРежим - булево,
//  ХранилищеОбработки - ХранилищеЗначения.
//
Функция ПолучитьПараметрыЗапускаОбработки(Знач ИспользуемаяОбработка) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПоставляемаяОбработка = ПоставляемаяОбработка(ИспользуемаяОбработка);
	Если ЗначениеЗаполнено(ПоставляемаяОбработка) Тогда
		
		Свойства = ДополнительныеОтчетыИОбработкиПовтИсп.ПараметрыЗапуска();
		Результат = Новый Структура(Свойства);
		ЗаполнитьЗначенияСвойств(Результат, ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПоставляемаяОбработка, Свойства));
		Возврат Результат;
		
	КонецЕсли;
	
КонецФункции

// Процедура вызывается для проверки возможности выполнения кода дополнительной обработки
//  в информационной базе.
//
Процедура ПроверкаВозможностиВыполнения(Знач ИспользуемаяОбработка) Экспорт
	
	ПараметрыПубликацииИспользуемойОбработки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ИспользуемаяОбработка, "Публикация, Версия");
	Если ПараметрыПубликацииИспользуемойОбработки.Публикация = Перечисления.ВариантыПубликацииДополнительныхОтчетовИОбработок.Отключена Тогда
		ВызватьИсключение НСтр(
			"ru = 'Использование дополнительной обработки в вашем приложении запрещено! Обратитесь за помощью к пользователю, обладающего правами администратора в данном приложении.'");
	КонецЕсли;
	
	ОписанияПричинБлокировки = ДополнительныеОтчетыИОбработкиВМоделиСервисаПовтИсп.РасширенныеОписанияПричинБлокировки();
	
	УстановитьПривилегированныйРежим(Истина);
	ПоставляемаяОбработка = ПоставляемаяОбработка(ИспользуемаяОбработка);
	Если ЗначениеЗаполнено(ПоставляемаяОбработка) Тогда
		
		ПараметрыПубликацииПоставляемойОбработки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПоставляемаяОбработка, "Публикация, ПричинаОтключения, Версия");
		
		// Проверка публикации поставляемой обработки
		Если ПараметрыПубликацииПоставляемойОбработки.Публикация = Перечисления.ВариантыПубликацииДополнительныхОтчетовИОбработок.Отключена Тогда
			
			ВызватьИсключение ОписанияПричинБлокировки[ПараметрыПубликацииПоставляемойОбработки.ПричинаОтключения];
			
		КонецЕсли;
		
		// Проверка на выполнение обновления версии обработки
		Если ПараметрыПубликацииИспользуемойОбработки.Версия <> ПараметрыПубликацииПоставляемойОбработки.Версия Тогда
			ВызватьИсключение НСтр(
				"ru = 'Использование дополнительной обработки временно недоступно по причине выполнения её обновления. Данный процесс может занять несколько минут. Приносим извинения на доставленные неудобства.'");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Очередь заданий

// Процедура вызывается в качестве регламентного задания после получения новой версии дополнительной
//  обработки из каталога дополнительных отчетов и обработок менеджера сервиса.
//
// Параметры:
//  Ссылка - СправочникСсылка.ДополнительныеОтчетыИОбработки.
//
Процедура АктуализацияНастроекИспользуемойОбработки(Знач Ссылка) Экспорт
	
	ПоставляемаяОбработка = ПоставляемаяОбработка(Ссылка);
	
	Если ЗначениеЗаполнено(ПоставляемаяОбработка) Тогда
		
		ИспользуемаяОбработка = Ссылка.ПолучитьОбъект();
		ЗаполнитьНастройкиИспользуемойОбработки(ИспользуемаяОбработка,
			ПоставляемаяОбработка.ПолучитьОбъект());
		ИспользуемаяОбработка.Записать();
		
	Иначе
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Дополнительная обработка с идентификатором %1 не является поставляемой!'"),
			Строка(Ссылка.УникальныйИдентификатор()));
		
	КонецЕсли;
	
КонецПроцедуры

// Обновление информационной базы

// Добавляет в список Обработчики процедуры-обработчики обновления,
// необходимые данной подсистеме.
//
// Параметры:
//   Обработчики - ТаблицаЗначений - см. описание функции НоваяТаблицаОбработчиковОбновления
//                                   общего модуля ОбновлениеИнформационнойБазы.
// 
Процедура ЗарегистрироватьОбработчикиОбновления(Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.Процедура = "ДополнительныеОтчетыИОбработкиВМоделиСервиса.ЗаблокироватьДополнительныеОтчетыИОбработкиДляОбновления";
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.МонопольныйРежим = Ложь;
	
	Обработчик = Обработчики.Добавить();
	Обработчик.Версия = "*";
	Обработчик.Процедура = "ДополнительныеОтчетыИОбработкиВМоделиСервиса.ЗапроситьОбновлениеДополнительныхОтчетовИОбработок";
	Обработчик.ОбщиеДанные = Истина;
	Обработчик.МонопольныйРежим = Ложь;
	
КонецПроцедуры

// Блокирует дополнительные отчеты и обработки в областях данных для
// получения новых версий из менеджера сервиса.
//
Процедура ЗаблокироватьДополнительныеОтчетыИОбработкиДляОбновления() Экспорт
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		
		ТекстЗапроса =
		"ВЫБРАТЬ
		|	ПоставляемыеДополнительныеОтчетыИОбработки.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ПоставляемыеДополнительныеОтчетыИОбработки КАК ПоставляемыеДополнительныеОтчетыИОбработки
		|ГДЕ
		|	НЕ ПоставляемыеДополнительныеОтчетыИОбработки.Ссылка В
		|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|					ПоставляемыеДополнительныеОтчетыИОбработкиСовместимость.Ссылка
		|				ИЗ
		|					Справочник.ПоставляемыеДополнительныеОтчетыИОбработки.Совместимость КАК ПоставляемыеДополнительныеОтчетыИОбработкиСовместимость
		|				ГДЕ
		|					ПоставляемыеДополнительныеОтчетыИОбработкиСовместимость.Версия = &Версия)
		|	И ПоставляемыеДополнительныеОтчетыИОбработки.КонтролироватьСовместимостьСВерсиямиКонфигурации = ИСТИНА";
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.УстановитьПараметр("Версия", Метаданные.Версия);
		БлокируемыеОбработки = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		
		Для Каждого БлокируемаяОбработка Из БлокируемыеОбработки Цикл
			
			ПоставляемаяОбработка = БлокируемаяОбработка.ПолучитьОбъект();
			ПоставляемаяОбработка.Публикация = Перечисления.ВариантыПубликацииДополнительныхОтчетовИОбработок.Отключена;
			ПоставляемаяОбработка.ПричинаОтключения = Перечисления.ПричиныОтключенияДополнительныхОтчетовИОбработокВМоделиСервиса.ОбновлениеВерсииКонфигурации;
			ПоставляемаяОбработка.Записать();
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Запрашивает обновления поставляемых дополнительных отчетов и обработок из
// менеджера сервиса.
//
Процедура ЗапроситьОбновлениеДополнительныхОтчетовИОбработок() Экспорт
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		
		НачатьТранзакцию();
		ПоставляемыеДанные.ЗапроситьВсеДанные();
		ЗафиксироватьТранзакцию();
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ПОЛУЧЕНИЯ ПОСТАВЛЯЕМЫХ ДАННЫХ

// Регистрирует обработчики поставляемых данных за день и за все время
//
Процедура ЗарегистрироватьОбработчикиПоставляемыхДанных(Знач Обработчики) Экспорт
	
	Обработчик = Обработчики.Добавить();
	Обработчик.ВидДанных = ИдентификаторВидаПоставляемыхДанных();
	Обработчик.КодОбработчика = ИдентификаторВидаПоставляемыхДанных();
	Обработчик.Обработчик = ДополнительныеОтчетыИОбработкиВМоделиСервиса;
	
КонецПроцедуры

// Вызывается при получении уведомления о новых данных.
// В теле следует проверить, необходимы ли эти данные приложению, 
// и если да - установить флажок Загружать
// 
// Параметры:
//   Дескриптор   - ОбъектXDTO Descriptor.
//   Загружать    - булево, возвращаемое
//
Процедура ДоступныНовыеДанные(Знач Дескриптор, Загружать) Экспорт
	
	Если Дескриптор.DataType = ИдентификаторВидаПоставляемыхДанных() Тогда
		
		ОписаниеПоставляемойОбработки = РазобратьДескрипторПоставляемыхДанных(Дескриптор);
		
		Чтение = Новый ЧтениеXML();
		Чтение.УстановитьСтроку(ОписаниеПоставляемойОбработки.Совместимость);
		ТаблицаСовместимостиXDTO = ФабрикаXDTO.ПрочитатьXML(Чтение,
			ДополнительныеОтчетыИОбработкиВМоделиСервисаСовместимостьИнтерфейс.ТипТаблицаСовместимости());
		ТаблицаСовместимости = ДополнительныеОтчетыИОбработкиВМоделиСервисаСовместимость.ПрочитатьТаблицуСовместимости(
			ТаблицаСовместимостиXDTO);
		
		Если ПроверитьСовместимостьПоставляемойОбработки(ТаблицаСовместимости) Тогда // Если обработка совместима с ИБ
			
			Загружать = Истина;
			
		Иначе
			
			Загружать = Ложь;
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Поставляемые дополнительные отчеты и обработки.Загрузка поставляемой обработки отменена'", 
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Информация,
				,
				,
				НСтр("ru = 'Поставляемая обработка несовместима с данной конфигурацией'") + Символы.ПС + Символы.ВК + ОписаниеПоставляемойОбработки.Совместимость);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Вызывается после вызова ДоступныНовыеДанные, позволяет разобрать данные.
//
// Параметры:
//   Дескриптор   - ОбъектXDTO Дескриптор.
//   ПутьКФайлу   - Строка или Неопределено. Полное имя извлеченного файла. Файл будет автоматически удален 
//                  после завершения процедуры. Если в менеджере сервиса не был
//                  указан файл - значение аргумента равно Неопределено.
//
Процедура ОбработатьНовыеДанные(Знач Дескриптор, Знач ПутьКФайлу) Экспорт
	
	Если Дескриптор.DataType = ИдентификаторВидаПоставляемыхДанных() Тогда
		ОбработатьПоставляемыеДополнительныеОтчетыИОбработки(Дескриптор, ПутьКФайлу);
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при отмене обработки данных в случае сбоя
//
Процедура ОбработкаДанныхОтменена(Знач Дескриптор) Экспорт 
	
КонецПроцедуры

Функция ОписаниеПоставляемойОбработки()
	
	Возврат Новый Структура("Идентификатор, Версия, Манифест, Совместимость");
	
КонецФункции

Функция РазобратьДескрипторПоставляемыхДанных(Дескриптор)
	
	ОписаниеПоставляемойОбработки = ОписаниеПоставляемойОбработки();
	
	Для Каждого ХарактеристикаПоставляемыхДанных Из Дескриптор.Properties.Property Цикл
		
		ОписаниеПоставляемойОбработки[ХарактеристикаПоставляемыхДанных.Code] = ХарактеристикаПоставляемыхДанных.Value;
		
	КонецЦикла;
	
	Возврат ОписаниеПоставляемойОбработки;
	
КонецФункции

// Контроль совместимости с текущей версией конфигурации информационной базы
Функция ПроверитьСовместимостьПоставляемойОбработки(Знач ТаблицаСовместимости)
	
	Для Каждого ДекларацияСовместимости Из ТаблицаСовместимости Цикл
		
		Если ПустаяСтрока(ДекларацияСовместимости.VersionNumber) Тогда
			
			Если ДекларацияСовместимости.ConfigarationName = Метаданные.Имя Тогда
				Возврат Истина;
			КонецЕсли;
			
		Иначе
			
			Если ДекларацияСовместимости.ConfigarationName = Метаданные.Имя И ДекларацияСовместимости.VersionNumber = Метаданные.Версия Тогда
				Возврат Истина;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Процедура ОбработатьПоставляемыеДополнительныеОтчетыИОбработки(Дескриптор, ПутьКФайлу)
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Прочитаем характеристики экземпляра поставляемых данных
	ОписаниеПоставляемойОбработки = РазобратьДескрипторПоставляемыхДанных(Дескриптор);
	
	Чтение = Новый ЧтениеXML();
	Чтение.УстановитьСтроку(ОписаниеПоставляемойОбработки.Манифест);
	МанифестДополнительнойОбработки = ФабрикаXDTO.ПрочитатьXML(Чтение,
		ДополнительныеОтчетыИОбработкиВМоделиСервисаМанифестИнтерфейс.ТипМанифест());
	
	Чтение = Новый ЧтениеXML();
	Чтение.УстановитьСтроку(ОписаниеПоставляемойОбработки.Совместимость);
	ТаблицаСовместимостиXDTO = ФабрикаXDTO.ПрочитатьXML(Чтение,
		ДополнительныеОтчетыИОбработкиВМоделиСервисаСовместимостьИнтерфейс.ТипТаблицаСовместимости());
	ТаблицаСовместимости = ДополнительныеОтчетыИОбработкиВМоделиСервисаСовместимость.ПрочитатьТаблицуСовместимости(
		ТаблицаСовместимостиXDTO);
	
	ЗаписьЖурналаРегистрации(НСтр("ru = 'Поставляемые дополнительные отчеты и обработки.Загрузка поставляемой обработки'", 
		ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
		УровеньЖурналаРегистрации.Информация,
		,
		,
		НСтр("ru = 'Инициирована загрузка поставляемой обработки'") + Символы.ПС + Символы.ВК + ОписаниеПоставляемойОбработки.Манифест);
	
	// Получим СправочникОбъект.ПоставляемыеДополнительныеОтчетыИОбработки
	СсылкаПоставляемойОбработки = Справочники.ПоставляемыеДополнительныеОтчетыИОбработки.ПолучитьСсылку(
		Новый УникальныйИдентификатор(ОписаниеПоставляемойОбработки.Идентификатор));
	Если ОбщегоНазначения.СсылкаСуществует(СсылкаПоставляемойОбработки) Тогда
		ПоставляемаяОбработка = СсылкаПоставляемойОбработки.ПолучитьОбъект();
	Иначе
		ПоставляемаяОбработка = Справочники.ПоставляемыеДополнительныеОтчетыИОбработки.СоздатьЭлемент();
		ПоставляемаяОбработка.УстановитьСсылкуНового(СсылкаПоставляемойОбработки);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПоставляемаяОбработка.ПричинаОтключения) Тогда
		Если ПоставляемаяОбработка.ПричинаОтключения = Перечисления.ПричиныОтключенияДополнительныхОтчетовИОбработокВМоделиСервиса.ОбновлениеВерсииКонфигурации Тогда
			ПоставляемаяОбработка.Публикация = Перечисления.ВариантыПубликацииДополнительныхОтчетовИОбработок.Используется;
			ПоставляемаяОбработка.ПричинаОтключения = Перечисления.ПричиныОтключенияДополнительныхОтчетовИОбработокВМоделиСервиса.ПустаяСсылка();
		КонецЕсли;
	Иначе
		ПоставляемаяОбработка.Публикация = Перечисления.ВариантыПубликацииДополнительныхОтчетовИОбработок.Используется;
	КонецЕсли;
	
	Если ПоставляемаяОбработка.ВерсияGUID <> ОписаниеПоставляемойОбработки.Версия Тогда
		
		// Заполним СправочникОбъект.ПоставляемыеДополнительныеОтчетыИОбработки
		ВариантыОтчетовПоставляемойОбработки = Неопределено;
		ДополнительныеОтчетыИОбработкиВМоделиСервисаМанифест.ПрочитатьМанифест(
			МанифестДополнительнойОбработки, ПоставляемаяОбработка, ПоставляемаяОбработка,
			ВариантыОтчетовПоставляемойОбработки);
		
		// В качестве значения реквизита ХранилищеОбработки записывает файл поставляемых данных
		ДвоичныеДанныеОбработки = Новый ДвоичныеДанные(ПутьКФайлу);
		ПоставляемаяОбработка.ХранилищеОбработки = Новый ХранилищеЗначения(
			ДвоичныеДанныеОбработки, Новый СжатиеДанных(9));
		
		// Таблица совместимости с версиями конфигураций
		ПоставляемаяОбработка.КонтролироватьСовместимостьСВерсиямиКонфигурации = Истина;
		ПоставляемаяОбработка.Совместимость.Очистить();
		Для Каждого ИнформацияОСовместимости Из ТаблицаСовместимости Цикл
			
			Если ИнформацияОСовместимости.ConfigarationName = Метаданные.Имя Тогда
				
				Если ПустаяСтрока(ИнформацияОСовместимости.VersionNumber) Тогда
					
					ПоставляемаяОбработка.КонтролироватьСовместимостьСВерсиямиКонфигурации = Ложь;
					Прервать;
					
				Иначе
					
					СтрокаТЧ = ПоставляемаяОбработка.Совместимость.Добавить();
					СтрокаТЧ.Версия = ИнформацияОСовместимости.VersionNumber;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Запишем СправочникОбъект.ПоставляемыеДополнительныеОтчетыИОбработки
		ПоставляемаяОбработка.ВерсияGUID = ОписаниеПоставляемойОбработки.Версия;
		ПоставляемаяОбработка.Записать();
		
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Поставляемые дополнительные отчеты и обработки.Загрузка поставляемой обработки завершена'",
			ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Информация,
			,
			ПоставляемаяОбработка.Ссылка,
			НСтр("ru = 'Завершена загрузка поставляемой обработки'") + Символы.ПС + Символы.ВК + ОписаниеПоставляемойОбработки.Манифест);
		
		// Планирование актуализации настроек используемых обработок
		ИспользуемыеОбработки = ПереченьИнсталляций(ПоставляемаяОбработка.Ссылка);
		Для Каждого ИнсталляцияОбработки Из ИспользуемыеОбработки Цикл
			
			ПараметрыМетода = Новый Массив;
			ПараметрыМетода.Добавить(ИнсталляцияОбработки.ИспользуемаяОбработка);
			
			ПараметрыЗадания = Новый Структура;
			ПараметрыЗадания.Вставить("ИмяМетода"    , "ДополнительныеОтчетыИОбработкиВМоделиСервиса.АктуализацияНастроекИспользуемойОбработки");
			ПараметрыЗадания.Вставить("Параметры"    , ПараметрыМетода);
			ПараметрыЗадания.Вставить("КоличествоПовторовПриАварийномЗавершении", 3);
			ПараметрыЗадания.Вставить("ОбластьДанных", ИнсталляцияОбработки.ОбластьДанных);
			
			ОчередьЗаданий.ДобавитьЗадание(ПараметрыЗадания);
			
			ЗаписьЖурналаРегистрации(НСтр("ru = 'Поставляемые дополнительные отчеты и обработки.Запланирована актуализация настроек поставляемой обработки'",
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Информация,
				,
				ПоставляемаяОбработка.Ссылка,
				НСтр("ru = 'Область данных:'") + ИнсталляцияОбработки.ОбластьДанных);
			
		КонецЦикла;
		
		// Планирование инсталляции поставляемой обработки в области, которые ее ожидают
		ОчередьИнсталляций = ОчередьИнсталляций(ПоставляемаяОбработка.Ссылка);
		Для Каждого ЭлементОчереди Из ОчередьИнсталляций Цикл
			
			Контекст = ЭлементОчереди.ПараметрыИнсталляции.Получить();
			
			ОписаниеИнсталляции = Новый Структура(
				"Идентификатор,Представление,Инсталляция",
				ПоставляемаяОбработка.Ссылка.УникальныйИдентификатор(),
				Контекст.Представление,
				Контекст.Инсталляция);
			
			ПараметрыМетода = Новый Массив;
			ПараметрыМетода.Добавить(ОписаниеИнсталляции);
			ПараметрыМетода.Добавить(Контекст.БыстрыйДоступ);
			ПараметрыМетода.Добавить(Контекст.Задания);
			ПараметрыМетода.Добавить(Контекст.Разделы);
			ПараметрыМетода.Добавить(Контекст.СправочникиИДокументы);
			ПараметрыМетода.Добавить(Контекст.НастройкиРасположенияКоманд);
			ПараметрыМетода.Добавить(Контекст.ВариантыДополнительногоОтчета);
			ПараметрыМетода.Добавить(Контекст.Ответственный);
			
			ПараметрыЗадания = Новый Структура;
			ПараметрыЗадания.Вставить("ИмяМетода"    , "ДополнительныеОтчетыИОбработкиВМоделиСервиса.УстановитьПоставляемуюОбработкуВОбластьДанных");
			ПараметрыЗадания.Вставить("Параметры"    , ПараметрыМетода);
			ПараметрыЗадания.Вставить("КоличествоПовторовПриАварийномЗавершении", 1);
			ПараметрыЗадания.Вставить("ОбластьДанных", ЭлементОчереди.ОбластьДанных);
			
			ОчередьЗаданий.ДобавитьЗадание(ПараметрыЗадания);
			
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Поставляемые дополнительные отчеты и обработки.Запланирована отложенная установка поставляемой обработки в область данных'",
				ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Информация,
				,
				ПоставляемаяОбработка.Ссылка,
				НСтр("ru = 'Область данных:'") + ЭлементОчереди.ОбластьДанных);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает идентификатор вида поставляемых данных для дополнительных отчетов
// и обработок
//
// Возвращаемое значение: Строка.
Функция ИдентификаторВидаПоставляемыхДанных() Экспорт
	
	Возврат "ДОиО"; // Не локализуется
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработчики обновления ИБ.

// Вызывается при обновлении до БСП 2.1.5.2.
//
Процедура ЗаполнитьРазрешенияИспользуемыхОбработок() Экспорт
	
	Если Не ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = Справочники.ДополнительныеОтчетыИОбработки.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ПоставляемаяОбработка = ПоставляемаяОбработка(Выборка.Ссылка);
		
		Если ЗначениеЗаполнено(ПоставляемаяОбработка) Тогда
			
			ИспользуемаяОбработка = Выборка.ПолучитьОбъект();
			ИспользуемаяОбработка.Разрешения.Загрузить(ПоставляемаяОбработка.Разрешения.Выгрузить());
			ИспользуемаяОбработка.Записать();
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

