////////////////////////////////////////////////////////////////////////////////
// ВыгрузкаЗагрузкаДанных: Экспорт области данных в файл/Импорт области данных из файла.
//                         Доступно только администратору ИБ/Области данных.
//  
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Выгружает данные текущей области данных в zip архив с XML файлами.
//
// Параметры:
//  БезДеленияПоФайлам - Булево - Истина - выгружать все данные в один файл,
//   Ложь - отдельно выгружать данные требующие замены ссылок при загрузке.
//  СохранятьПаролиПользователей - Булево - выгружать вместе с пользователями
//   сохраняемые значения паролей.
//
// Возвращаемое значение:
//  Строка - полное имя файла с выгрузкой.
//
Функция ВыгрузитьТекущуюОбластьВАрхив() Экспорт
	
	НачалоВыполнения = ТекущаяУниверсальнаяДата();
	
	Если НЕ Пользователи.ЭтоПолноправныйПользователь() Тогда
		ВызватьИсключение(НСтр("ru = 'Нарушение прав доступа'"));
	КонецЕсли;
	УстановитьПривилегированныйРежим(Истина);
	
	КаталогВыгрузки = ПолучитьИмяВременногоФайла();
	СоздатьКаталог(КаталогВыгрузки);
	
	КаталогВыгрузки = КаталогВыгрузки + "/";
	
	Попытка
		
		ЗаписатьИнформациюОВыгрузкеВXML(КаталогВыгрузки, Ложь);
		
		ЗаписатьДанныеВXMLСУказаниемТипов(КаталогВыгрузки, ПолучитьМассивТиповТребующихПодменыСсылок());
		
		ЗаписатьПользователейВXML(КаталогВыгрузки, Ложь);
		
		Справочники.ИдентификаторыОбъектовМетаданных.ВыгрузитьДанныеСправочника(КаталогВыгрузки);
		
		ОбработчикиСобытия = ОбщегоНазначения.ОбработчикиСлужебногоСобытия(
			"СтандартныеПодсистемы.РаботаВМоделиСервиса.ВыгрузкаЗагрузкаДанных\ПослеВыгрузкиОбласти");
		Для Каждого Обработчик Из ОбработчикиСобытия Цикл
			Обработчик.Модуль.ПослеВыгрузкиОбласти(КаталогВыгрузки);
		КонецЦикла;
		ВыгрузкаЗагрузкаДанныхПереопределяемый.ПослеВыгрузкиОбласти(КаталогВыгрузки);
		
	Исключение
		
		ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		УдалитьКаталог(КаталогВыгрузки);
		ВызватьИсключение ПредставлениеОшибки;
		
	КонецПопытки;
	
	ИмяАрхива = ПолучитьИмяВременногоФайла("zip");
	
	Архиватор = Новый ЗаписьZipФайла(ИмяАрхива, , , , УровеньСжатияZIP.Максимальный);
	Архиватор.Добавить(КаталогВыгрузки + "*");
	Архиватор.Записать();
	
	УдалитьКаталог(КаталогВыгрузки);
	
	ОписаниеАрхива = Новый Файл(ИмяАрхива);
	
	ЗаписатьСобытиеВЖурнал(
		НСтр("ru = 'Выгрузка'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
		ОписаниеАрхива.Размер(),
		ТекущаяУниверсальнаяДата() - НачалоВыполнения);
	
	Возврат ИмяАрхива;
	
КонецФункции

// Загружает данные текущей области данных из zip архива с XML файлами.
//
// Параметры:
//  ИмяАрхива - Строка - полное имя файла архива с данными
//  ЗагружатьПользователей - Булево - загружать информацию о пользователях ИБ
//
Функция ЗагрузитьТекущуюОбластьИзАрхива(Знач ИмяАрхива, Знач ЗагружатьПользователей = Ложь) Экспорт
	
	НачалоВыполнения = ТекущаяУниверсальнаяДата();
	
	КаталогВыгрузки = РаспаковатьАрхив(ИмяАрхива);
	
	Попытка
		ВыполнитьЗагрузкуДанных(КаталогВыгрузки, ЗагружатьПользователей);
	Исключение
		ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		УдалитьКаталог(КаталогВыгрузки);
		ВызватьИсключение ПредставлениеОшибки;
	КонецПопытки;
	
	УдалитьКаталог(КаталогВыгрузки);
	
	ОписаниеАрхива = Новый Файл(ИмяАрхива);
	
	ЗаписатьСобытиеВЖурнал(
		НСтр("ru = 'Загрузка'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
		ОписаниеАрхива.Размер(),
		ТекущаяУниверсальнаяДата() - НачалоВыполнения);
	
КонецФункции

// Выполняет загрузку данных в область из zip архива с XML файлами в рамках подготовки новой области данных.
//
// Параметры:
//  ИмяАрхива - Строка - полное имя файла архива с данными
//  ЗагружатьПользователей - Булево - загружать информацию о пользователях ИБ
//
// Возвращаемое значение:
//  Булево, Истина - если область загружена из архива, Ложь - если требуется конвертация файла data_dump.zip
//
Функция ПодготовитьТекущуюОбластьИзАрхива(Знач ИмяАрхива, Знач ЗагружатьПользователей = Ложь) Экспорт
	
	НачалоВыполнения = ТекущаяУниверсальнаяДата();
	
	КаталогВыгрузки = РаспаковатьАрхив(ИмяАрхива);
	
	ИнформацияОВыгрузке = ПолучитьИнформациюОВыгрузке(КаталогВыгрузки);
	Если ИнформацияОВыгрузке.Configuration.Name <> Метаданные.Имя ИЛИ ИнформацияОВыгрузке.Configuration.Version <> Метаданные.Версия Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Попытка
		ВыполнитьЗагрузкуДанных(КаталогВыгрузки, ЗагружатьПользователей);
	Исключение
		ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		УдалитьКаталог(КаталогВыгрузки);
		ВызватьИсключение ПредставлениеОшибки;
	КонецПопытки;
	
	УдалитьКаталог(КаталогВыгрузки);
	
	ОписаниеАрхива = Новый Файл(ИмяАрхива);
	
	ЗаписатьСобытиеВЖурнал(
		НСтр("ru = 'Загрузка'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
		ОписаниеАрхива.Размер(),
		ТекущаяУниверсальнаяДата() - НачалоВыполнения);
	
	Возврат Истина;
	
КонецФункции

// Выгружает данные текущей области данных во временное хранилище по переданному адресу
//
// Параметры:
//  АдресХранилища - Строка - адрес временного хранилища в которое нужно поместить данные.
//
Процедура ВыгрузитьТекущуюОбластьВоВременноеХранилище(Знач АдресХранилища) Экспорт
	
	Если НЕ Пользователи.ЭтоПолноправныйПользователь() Тогда
		
		ВызватьИсключение(НСтр("ru = 'Операция может быть выполнена только администратором области данных.'"));
		
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	НачатьТранзакцию();
	Попытка
		РаботаВМоделиСервиса.ЗаблокироватьТекущуюОбластьДанных(, Истина);
		
		ИмяАрхива = ВыгрузитьТекущуюОбластьВАрхив();
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	ДанныеВыгрузки = Новый ДвоичныеДанные(ИмяАрхива);
	
	ПоместитьВоВременноеХранилище(ДанныеВыгрузки, АдресХранилища);
	
	ДанныеВыгрузки = Неопределено;
	Попытка
		УдалитьФайлы(ИмяАрхива);
	Исключение
		// При неудаче система удалит временный файл автоматически
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Выполнение операции удаления временного файла'", 
			ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

// Выгружает указанную область данных во временное хранилище по переданному адресу
//
// Параметры:
//  ОбластьДанных - Число - значения разделителя области данных, которую требуется выгрузить.
//  АдресХранилища - Строка - адрес временного хранилища в которое нужно поместить данные.
//
Процедура ВыгрузитьОбластьВоВременноеХранилище(Знач ОбластьДанных, Знач АдресХранилища) Экспорт
	
	Если НЕ ОбщегоНазначенияПовтИсп.СеансЗапущенБезРазделителей()
		ИЛИ НЕ Пользователи.ЭтоПолноправныйПользователь(, Истина) Тогда
		
		ВызватьИсключение(НСтр("ru = 'Операция может быть выполнена только администратором информационной базы.'"));
	КонецЕсли;
	
	ОбщегоНазначения.УстановитьРазделениеСеанса(Истина, ОбластьДанных);
	
	ВыгрузитьТекущуюОбластьВоВременноеХранилище(АдресХранилища);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Объявляет события подсистемы РаботаВМоделиСервиса.ВыгрузкаЗагрузкаДанных:
//
// Серверные события:
//   ПриЗаполненииВидовОграниченийПравОбъектовМетаданных,
//   ПриДополненииСловаряЗаменПоОбщимДанным,
//   ПриЗаполненииСоответствияОбъектовМетаданныхВЛокальномРежимеИМоделиСервиса,
//   ПриОпределенииОбъектовМетаданныхИсключаемыхИзВыгрузкиЗагрузки,
//   ПослеВыгрузкиОбласти,
//   ПриФормированииСловаряЗаменПоКаталогуВыгрузки.
//
// См. описание этой же процедуры в модуле СтандартныеПодсистемыСервер.
Процедура ПриДобавленииСлужебныхСобытий(КлиентскиеСобытия, СерверныеСобытия) Экспорт
	
	// СЕРВЕРНЫЕ СОБЫТИЯ.
	
	// Заполняет массив типов неразделенных данных. Он используется при обновлении ссылок
	// при загрузке-выгрузке конфигурации
	// 
	// Параметры:
	//  МассивТипов - массив
	//
	// Синтаксис:
	// Процедура ПриОпределенииСтандартныхТиповОбщихДанных(Знач МассивТипов) Экспорт
	//
	// (То же, что ВыгрузкаЗагрузкаДанныхПереопределяемый.ТипыОбщихДанных).
	//
	СерверныеСобытия.Добавить(
		"СтандартныеПодсистемы.РаботаВМоделиСервиса.ВыгрузкаЗагрузкаДанных\ПриОпределенииСтандартныхТиповОбщихДанных");
	
	// Обработчик, вызываемый перед стандартным формирования словаря замен
	// по очередному файлу общих данных.
	//
	// Параметры
	//  СловарьЗамен - таблица значений, колонки:
	//    Тип - Тип - Тип значения заменяемой ссылки
	//    СоответствиеСсылок - Соответствие - соответствие новой ссылки исходной
	//     Ключ - Идентификатор новой ссылки (на которую требуется заменить)
	//     Значение - Идентификатор исходной ссылки (требующая замены)
	//    СтандартнаяОбработка - Булево, Неопределено - выполнять стандартную замену ссылок
	//     Неопределено - замена будет выполняться если СоответствиеСсылок не содержит записей
	//  ИмяФайлаОбщихДанных - Строка - имя текущего обрабатываемого файла выгрузки
	//   общих данных
	//
	// Синтаксис:
	// Процедура ПриДополненииСловаряЗаменПоОбщимДанным(Знач СловарьЗамен, Знач ИмяФайлаОбщихДанных) Экспорт
	//
	// (То же, что ВыгрузкаЗагрузкаДанныхПереопределяемый.ДополнитьСловарьЗаменПоОбщимДанным).
	//
	СерверныеСобытия.Добавить(
		"СтандартныеПодсистемы.РаботаВМоделиСервиса.ВыгрузкаЗагрузкаДанных\ПриДополненииСловаряЗаменПоОбщимДанным");
	
	// Обработчик, вызываемый при заполнении таблицы соответствия объектов метаданных, используемых в локальном
	//  режиме и в модели сервиса.
	//
	// Параметры
	//  ТаблицаСоответствия - ТаблицаЗначений, колонки:
	//    ОбъектВЛокальномРежиме - ОбъектМетаданных, объект метаданных, используемый в локальном режиме,
	//    ОбъектВМоделиСервиса - ОбъектМетаданных, объект метаданных, используемый в модели сервиса.
	//
	// Синтаксис:
	// Процедура ПриЗаполненииСоответствияОбъектовМетаданныхВЛокальномРежимеИМоделиСервиса(ТаблицаСоответствия) Экспорт
	//
	// (То же, что ВыгрузкаЗагрузкаДанныхПереопределяемый.ЗаполнитьСоответствиеТиповМетаданныхВЛокальномРежимеИМоделиСервиса).
	//
	СерверныеСобытия.Добавить(
		"СтандартныеПодсистемы.РаботаВМоделиСервиса.ВыгрузкаЗагрузкаДанных\ПриЗаполненииСоответствияОбъектовМетаданныхВЛокальномРежимеИМоделиСервиса");
	
	// Обработчик, вызываемый при определении объектов метаданных, не переносящихся между моделями при выгрузке / загрузке данных.
	//
	// Параметры
	//  Объекты - Массив(ОбъектМетаданных).
	//
	// Синтаксис:
	// Процедура ПриОпределенииОбъектовМетаданныхИсключаемыхИзВыгрузкиЗагрузки(Объекты) Экспорт
	//
	// (То же, что ВыгрузкаЗагрузкаДанныхПереопределяемый.ЗаполнитьСоответствиеТиповМетаданныхВЛокальномРежимеИМоделиСервиса).
	//
	СерверныеСобытия.Добавить(
		"СтандартныеПодсистемы.РаботаВМоделиСервиса.ВыгрузкаЗагрузкаДанных\ПриОпределенииОбъектовМетаданныхИсключаемыхИзВыгрузкиЗагрузки");
		
	// Обработчик, вызываемый после выгрузки области в файлы.
	//
	// Параметры
	//  КаталогВыгрузки - Строка - имя каталога с файлами выгрузки области. В каталог можно поместить 
	//   дополнительные файлы, они будут доступны в некоторых событиях загрузки.
	//
	// Синтаксис:
	// Процедура ПослеВыгрузкиОбласти(Знач КаталогВыгрузки) Экспорт
	//
	// (То же, что ВыгрузкаЗагрузкаДанныхПереопределяемый.ПослеВыгрузкиОбласти).
	//
	СерверныеСобытия.Добавить(
		"СтандартныеПодсистемы.РаботаВМоделиСервиса.ВыгрузкаЗагрузкаДанных\ПослеВыгрузкиОбласти");
		
	// Обработчик, вызываемый при окончании стандартного формирования словаря замен
	// по очередному файлу общих данных.
	//
	// Параметры
	//  СловарьЗамен - таблица значений, колонки:
	//    Тип - Тип - Тип значения заменяемой ссылки
	//    СоответствиеСсылок - Соответствие - соответствие новой ссылки исходной
	//     Ключ - Идентификатор новой ссылки (на которую требуется заменить)
	//     Значение - Идентификатор исходной ссылки (требующая замены)
	//    СтандартнаяОбработка - Булево, Неопределено - выполнять стандартную замену ссылок
	//     Неопределено - замена будет выполняться если СоответствиеСсылок не содержит записей
	//  КаталогВыгрузки - Строка - имя каталога с файлами выгрузки области
	//
	// Синтаксис:
	// Процедура ПриФормированииСловаряЗаменПоКаталогуВыгрузки(Знач СловарьЗамен, Знач КаталогВыгрузки) Экспорт
	//
	// (То же, что ВыгрузкаЗагрузкаДанныхПереопределяемый.ПриФормированииСловаряЗаменПоКаталогуВыгрузки).
	//
	СерверныеСобытия.Добавить(
		"СтандартныеПодсистемы.РаботаВМоделиСервиса.ВыгрузкаЗагрузкаДанных\ПриФормированииСловаряЗаменПоКаталогуВыгрузки");
	
КонецПроцедуры

Процедура УдалитьКаталог(Знач Каталог)
	
	Попытка
		УдалитьФайлы(Каталог);
	Исключение
		// При неудаче система удалит временный файл автоматически
		ЗаписьЖурналаРегистрации(НСтр("ru = 'Выполнение операции удаления временного файла'", 
			ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,,,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
	
КонецПроцедуры

// Возвращает массив типов неразделенных данных. Он используется при обновлении ссылок 
// при загрузке-выгрузке конфигурации
// 
// Возвращаемое значение:
//  Массив Типов данных
//
Функция ТипыОбщихДанных()
	Перем Результат;
	
	Результат = Новый Массив;
	
	ОбработчикиСобытия = ОбщегоНазначения.ОбработчикиСлужебногоСобытия(
		"СтандартныеПодсистемы.РаботаВМоделиСервиса.ВыгрузкаЗагрузкаДанных\ПриОпределенииСтандартныхТиповОбщихДанных");
	
	Для каждого Обработчик Из ОбработчикиСобытия Цикл
		Обработчик.Модуль.ПриОпределенииСтандартныхТиповОбщихДанных(Результат);
	КонецЦикла;
	
	ВыгрузкаЗагрузкаДанныхПереопределяемый.ТипыОбщихДанных(Результат);
	
	Возврат Результат;
	
КонецФункции

Функция РаспаковатьАрхив(Знач ИмяФайла)
	
	КаталогВыгрузки = ПолучитьИмяВременногоФайла();
	СоздатьКаталог(КаталогВыгрузки);
	
	КаталогВыгрузки = КаталогВыгрузки + "/";
	
	Разархиватор = Новый ЧтениеZipФайла(ИмяФайла);
	Разархиватор.ИзвлечьВсе(КаталогВыгрузки, РежимВосстановленияПутейФайловZIP.НеВосстанавливать);	
	
	Возврат КаталогВыгрузки;
	
КонецФункции

Функция ПолучитьИнформациюОВыгрузке(КаталогВыгрузки)
	
	Чтение = Новый ЧтениеXML;
	Чтение.ОткрытьФайл(КаталогВыгрузки + "DumpInfo.xml");
	Чтение.ПерейтиКСодержимому();
	
	Если Чтение.ТипУзла <> ТипУзлаXML.НачалоЭлемента
		ИЛИ Чтение.Имя <> "Info" Тогда
		
		ВызватьИсключение(НСтр("ru = 'Ошибка чтения XML. Неверный формат файла. Ожидается начало элемента Info.'"));
	КонецЕсли;
	
	Если НЕ Чтение.Прочитать() Тогда
		ВызватьИсключение(НСтр("ru = 'Ошибка чтения XML. Обнаружено завершение файла.'"));
	КонецЕсли;
	
	ТипDumpInfo = ФабрикаXDTO.Тип("http://v8.1c.ru/misc/datadump/1.0.1.1", "DumpInfo");
	ИнформацияОВыгрузке = ФабрикаXDTO.ПрочитатьXML(Чтение, ТипDumpInfo);
	
	Чтение.Закрыть();
	
	Возврат ИнформацияОВыгрузке;
	
КонецФункции

Процедура ВыполнитьЗагрузкуДанных(КаталогВыгрузки, ЗагружатьПользователей)
	
	// Очистим все данные текущей области
	РаботаВМоделиСервиса.ОчиститьДанныеОбласти(ЗагружатьПользователей);
	
	// Загрузим данные из файла
	ЗагрузитьДанныеСПодменойСсылок(КаталогВыгрузки);
	
	ОбработчикиСобытия = ОбщегоНазначения.ОбработчикиСлужебногоСобытия(
		"СтандартныеПодсистемы.РаботаВМоделиСервиса\ПослеЗагрузкиДанныхИзДругойМодели");
	
	Для каждого Обработчик Из ОбработчикиСобытия Цикл
		Обработчик.Модуль.ПослеЗагрузкиДанныхИзДругойМодели();
	КонецЦикла;
	
	Если ЗагружатьПользователей Тогда
		СоответствиеИдентификаторов = СоздатьПользователейИзXML(КаталогВыгрузки);
		ОбработатьПользователейПослеЗагрузкиИзДругойМодели(СоответствиеИдентификаторов);
	Иначе
		ОчиститьИдентификаторыПользователей(КаталогВыгрузки);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОшибкаОпределенияТипаПриЧтении(Знач Чтение)
	
	Запись = Новый ЗаписьXML;
	Запись.УстановитьСтроку();
	Запись.ЗаписатьТекущий(Чтение);
	ТекущийЭлемент = Запись.Закрыть();
	
	ШаблонТекста = НСтр("ru = 'Ошибка при чтении XML. Не удалось определить тип данных на основе элемента:
		|%1'");
	
	ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекста, ТекущийЭлемент);
	ВызватьИсключение(ТекстСообщения);
	
КонецПроцедуры

Функция ПолучитьФабрикуСУказаниемТипов(Знач Типы = Неопределено)
	
	НаборСхем = ФабрикаXDTO.ЭкспортСхемыXML("http://v8.1c.ru/8.1/data/enterprise/current-config");
	Схема = НаборСхем[0];
	Схема.ОбновитьЭлементDOM();
	
	ЗаписьDOM = Новый ЗаписьDOM;
	
	КорневойУзел = Схема.ДокументDOM.ДочерниеУзлы[0];
	
	ИгнорироватьТипы = Новый Массив;
	ИгнорироватьТипы.Добавить("AccountingRegisterExtDimensions");
	ИгнорироватьТипы.Добавить("CatalogTabularSectionRow");
	ИгнорироватьТипы.Добавить("ChartOfAccountsExtDimensionTypesRow");
	ИгнорироватьТипы.Добавить("LeadingCalculationTypesRow");
	ИгнорироватьТипы.Добавить("DocumentTabularSectionRow");
	ИгнорироватьТипы.Добавить("AccountingRegisterRecord");
	ИгнорироватьТипы.Добавить("AccumulationRegisterRecord");
	ИгнорироватьТипы.Добавить("InformationRegisterRecord");
	ИгнорироватьТипы.Добавить("EnumRef");
	
	Если Типы = Неопределено Тогда
		ТолькоУказанныеТипы = Ложь;
	Иначе
		ТолькоУказанныеТипы = Истина;
		
		УказанныеТипы = Новый Соответствие;
		Для каждого Тип Из Типы Цикл
			УказанныеТипы.Вставить(СериализаторXDTO.XMLТип(Тип).ИмяТипа, Истина);
		КонецЦикла;
	КонецЕсли;
	
	Для каждого Узел Из КорневойУзел.ДочерниеУзлы Цикл
		ДобавитьТипККоду = Ложь;
		
		Если Узел.ЛокальноеИмя <> "complexType" Тогда
			Продолжить;
		КонецЕсли;
		
		Если Узел.ДочерниеУзлы.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СодержимоеУзла = Узел.ДочерниеУзлы[0];
		
		Если СодержимоеУзла.ЛокальноеИмя <> "sequence" Тогда
			Продолжить;
		КонецЕсли;
		
		Для каждого УзелПоля Из СодержимоеУзла.ДочерниеУзлы Цикл
			Если УзелПоля.ЛокальноеИмя <> "element" Тогда
				Продолжить;
			КонецЕсли;
			
			АтрибутИмя = УзелПоля.Атрибуты.ПолучитьИменованныйЭлемент("name");
			Если ДобавитьТипККоду
				И АтрибутИмя <> Неопределено И АтрибутИмя.ТекстовоеСодержимое = "Code" Тогда
				УзелПоля.УстановитьАтрибут("nillable", "true");
				УзелПоля.УдалитьАтрибут("type");
				Продолжить;
			КонецЕсли;
			
			АтрибутТип = УзелПоля.Атрибуты.ПолучитьИменованныйЭлемент("type");
			Если АтрибутТип <> Неопределено Тогда
				Если Найти(АтрибутТип.ТекстовоеСодержимое, "tns:") = 1 Тогда
					
					ТипБезNSПрефикса = Сред(АтрибутТип.ТекстовоеСодержимое, СтрДлина("tns:") + 1);
					
					Если ТолькоУказанныеТипы Тогда
						Если УказанныеТипы.Получить(ТипБезNSПрефикса) = Неопределено Тогда
							Продолжить;
						КонецЕсли;
					Иначе
						Пропустить = Ложь;
						Для каждого ПрефиксТипа Из ИгнорироватьТипы Цикл
							Если Найти(ТипБезNSПрефикса, ПрефиксТипа) = 1 Тогда
								Пропустить = Истина;
								Прервать;
							КонецЕсли;
						КонецЦикла;
						Если Пропустить Тогда
							Продолжить;
						КонецЕсли;
					КонецЕсли;
					
					Если АтрибутИмя <> Неопределено И АтрибутИмя.ТекстовоеСодержимое = "Ref" Тогда
						ДобавитьТипККоду = Истина;
					КонецЕсли;
					
					УзелПоля.УстановитьАтрибут("nillable", "true");
					УзелПоля.УдалитьАтрибут("type");
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ЗаписьXML = Новый ЗаписьXML;
	ИмяФайлаСхемы = ПолучитьИмяВременногоФайла("xsd");
	ЗаписьXML.ОткрытьФайл(ИмяФайлаСхемы);
	ЗаписьDOM.Записать(Схема.ДокументDOM, ЗаписьXML);
	ЗаписьXML.Закрыть();
	
	Фабрика = СоздатьФабрикуXDTO(ИмяФайлаСхемы);
	
	Попытка
		УдалитьФайлы(ИмяФайлаСхемы);
	Исключение
		
	КонецПопытки;
	
	Возврат Фабрика;
	
КонецФункции

Процедура ЗаписатьПользователейВXML(КаталогВыгрузки, СохранятьПароли)
	
	Запись = Новый ЗаписьXML;
	Запись.ОткрытьФайл(КаталогВыгрузки + "users.xml",
		Новый ПараметрыЗаписиXML(,,,Истина));
	Запись.ЗаписатьОбъявлениеXML();
	
	Запись.ЗаписатьНачалоЭлемента("Users");
	Запись.ЗаписатьСоответствиеПространстваИмен("xs", "http://www.w3.org/2001/XMLSchema");
	Запись.ЗаписатьСоответствиеПространстваИмен("xsi", "http://www.w3.org/2001/XMLSchema-instance");
	Запись.ЗаписатьСоответствиеПространстваИмен("ns1", "http://v8.1c.ru/8.1/data/core");
	Запись.ЗаписатьСоответствиеПространстваИмен("dd", "http://v8.1c.ru/misc/datadump/1.0.1.1");
	
	Для каждого Пользователь Из ПользователиИнформационнойБазы.ПолучитьПользователей() Цикл
		ФабрикаXDTO.ЗаписатьXML(Запись, ЗаписатьПользователяВXDTO(Пользователь, СохранятьПароли));
	КонецЦикла;
	
	Запись.ЗаписатьКонецЭлемента();
	
	Запись.Закрыть();
	
КонецПроцедуры

Процедура ЗаписатьИнформациюОВыгрузкеВXML(КаталогВыгрузки, БезДеленияПоФайлам)
	
	Запись = Новый ЗаписьXML;
	Запись.ОткрытьФайл(КаталогВыгрузки + "DumpInfo.xml",
		Новый ПараметрыЗаписиXML(,,,Истина));
	Запись.ЗаписатьОбъявлениеXML();
	
	Запись.ЗаписатьНачалоЭлемента("Info");
	Запись.ЗаписатьСоответствиеПространстваИмен("xs", "http://www.w3.org/2001/XMLSchema");
	Запись.ЗаписатьСоответствиеПространстваИмен("xsi", "http://www.w3.org/2001/XMLSchema-instance");
	
	ТипDumpInfo = ФабрикаXDTO.Тип("http://v8.1c.ru/misc/datadump/1.0.1.1", "DumpInfo");
	ТипConfigurationInfo = ФабрикаXDTO.Тип("http://v8.1c.ru/misc/datadump/1.0.1.1", "ConfigurationInfo");
	
	ИнформацияОВыгрузке = ФабрикаXDTO.Создать(ТипDumpInfo);
	Если БезДеленияПоФайлам Тогда
		ИнформацияОВыгрузке.Type = "Solid";
	Иначе
		ИнформацияОВыгрузке.Type = "Split";
	КонецЕсли;
	ИнформацияОВыгрузке.Created = ТекущаяДатаСеанса();
	
	ИнформацияОКонфигурации = ФабрикаXDTO.Создать(ТипConfigurationInfo);
	ИнформацияОКонфигурации.Name = Метаданные.Имя;
	ИнформацияОКонфигурации.Version = Метаданные.Версия;
	ИнформацияОКонфигурации.Vendor = Метаданные.Поставщик;
	ИнформацияОКонфигурации.Presentation = Метаданные.Представление();
	
	ИнформацияОВыгрузке.Configuration = ИнформацияОКонфигурации;
	
	ФабрикаXDTO.ЗаписатьXML(Запись, ИнформацияОВыгрузке);
	
	Запись.ЗаписатьКонецЭлемента();
	
	Запись.Закрыть();
	
КонецПроцедуры

Функция ПолучитьМассивТиповТребующихПодменыСсылок()
	
	Типы = ПолучитьМассивТиповПоставляемыхСправочников();
	
	Типы.Добавить(Тип("СправочникСсылка.ИдентификаторыОбъектовМетаданных"));
	
	Возврат Типы;
	
КонецФункции

Функция ПолучитьМассивТиповПоставляемыхСправочников()
	
	Типы = Новый Массив;
	Для каждого ТипОбщихДанных Из ТипыОбщихДанных() Цикл 
		Если НЕ Справочники.ТипВсеСсылки().СодержитТип(ТипОбщихДанных) Тогда
			Продолжить;
		КонецЕсли;
		Типы.Добавить(ТипОбщихДанных);
	КонецЦикла;
	
	Возврат Типы;
	
КонецФункции

Функция ФорматНомеров(Знач Значение)
	
	Возврат Формат(Значение, "ЧЦ=4; ЧН=0000; ЧВН=; ЧГ=");
	
КонецФункции

Процедура ОткрытьЗаписьXML(ПараметрыЗаписи)
	
	ПараметрыЗаписи.Запись = Новый ЗаписьXML;
	Если ПараметрыЗаписи.НомерЧасти = Неопределено Тогда
		ПараметрыЗаписи.НомерЧасти = 1;
	Иначе
		ПараметрыЗаписи.НомерЧасти = ПараметрыЗаписи.НомерЧасти + 1;
	КонецЕсли;
	ПараметрыЗаписи.РазмерЧасти = 0;
	
	НомерЧастиСтрокой = ФорматНомеров(ПараметрыЗаписи.НомерЧасти);
	ИмяФайлаВыгрузки = 
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ПараметрыЗаписи.ШаблонИмени, НомерЧастиСтрокой);
		
	ПараметрыЗаписи.Запись.ОткрытьФайл(ИмяФайлаВыгрузки);
	ПараметрыЗаписи.Запись.ЗаписатьОбъявлениеXML();
	
	ПараметрыЗаписи.Запись.ЗаписатьНачалоЭлемента("DataDumpPart");
	ПараметрыЗаписи.Запись.ЗаписатьСоответствиеПространстваИмен("xs", "http://www.w3.org/2001/XMLSchema");
	ПараметрыЗаписи.Запись.ЗаписатьСоответствиеПространстваИмен("xsi", "http://www.w3.org/2001/XMLSchema-instance");
	ПараметрыЗаписи.Запись.ЗаписатьСоответствиеПространстваИмен("ns1", "http://v8.1c.ru/8.1/data/core");
	ПараметрыЗаписи.Запись.ЗаписатьСоответствиеПространстваИмен("ns2", "http://v8.1c.ru/8.1/data/enterprise");
	ПараметрыЗаписи.Запись.ЗаписатьСоответствиеПространстваИмен("v8", "http://v8.1c.ru/8.1/data/enterprise/current-config");
	
	ПараметрыЗаписи.Запись.ЗаписатьНачалоЭлемента("Data");
	
КонецПроцедуры

Процедура ЗакрытьЗаписьXML(ПараметрыЗаписи, ЕстьПродолжение = Ложь)
	
	ПараметрыЗаписи.Запись.ЗаписатьКонецЭлемента();
	
	ПараметрыЗаписи.Запись.ЗаписатьНачалоЭлемента("PartInfo");
	ПараметрыЗаписи.Запись.ЗаписатьАтрибут("LastPart", XMLСтрока(НЕ ЕстьПродолжение));
	ПараметрыЗаписи.Запись.ЗаписатьКонецЭлемента();
	
	ПараметрыЗаписи.Запись.ЗаписатьКонецЭлемента();
	
	ПараметрыЗаписи.Запись.Закрыть();
	
КонецПроцедуры

Процедура ЗаписатьВXML(Значение, МетаданныеЗначения, Размер, Сериализатор, ПараметрыЗаписи_ЗаменяемыеТипы,
	ПараметрыЗаписи_ПрочиеДанные, ИменаМетаданныхЗаменяемыхТипов, МаксимальныйРазмерЧасти)
	
	Если ИменаМетаданныхЗаменяемыхТипов.Получить(МетаданныеЗначения.ПолноеИмя()) = Неопределено Тогда
		ПараметрыЗаписи = ПараметрыЗаписи_ПрочиеДанные;
	Иначе
		ПараметрыЗаписи = ПараметрыЗаписи_ЗаменяемыеТипы;
	КонецЕсли;
		
	Если ПараметрыЗаписи.РазмерЧасти >= МаксимальныйРазмерЧасти Тогда
		ЗакрытьЗаписьXML(ПараметрыЗаписи, Истина);
		ОткрытьЗаписьXML(ПараметрыЗаписи);
	КонецЕсли;
	
	ПараметрыЗаписи.РазмерЧасти = ПараметрыЗаписи.РазмерЧасти + Размер;
	
	ПередВыгрузкойДанных(Значение);
	Сериализатор.ЗаписатьXML(ПараметрыЗаписи.Запись, Значение);
	
КонецПроцедуры

Функция ОценитьРазмерОбъекта(МДОбъекта, Объект)
	
	Размер = 1;
	Для каждого МДТабличнойЧасти Из МДОбъекта.ТабличныеЧасти Цикл
		Размер = Размер + Объект[МДТабличнойЧасти.Имя].Количество();
	КонецЦикла;
	
	Возврат Размер;
	
КонецФункции

Функция ОценитьРазмерНабораЗаписей(МДНабора, Набор)
	
	Возврат Набор.Количество();
	
КонецФункции

Процедура СортироватьВыгружаемыеДанные(Знач ВыгружаемыеДанные)
	
	Для каждого СтрокаОбъекта Из ВыгружаемыеДанные Цикл
		ИмяОбъектаМетаданных = СтрокаОбъекта.ВыгружаемыйОбъект.ПолноеИмя;
		
		Если РаботаВМоделиСервиса.ЭтоПолноеИмяКонстанты(ИмяОбъектаМетаданных) Тогда
			СтрокаОбъекта.Приоритет = 0;
		ИначеЕсли РаботаВМоделиСервиса.ЭтоПолноеИмяОбъектаСсылочногоТипа(ИмяОбъектаМетаданных) Тогда
			СтрокаОбъекта.Приоритет = 1;
		ИначеЕсли РаботаВМоделиСервиса.ЭтоПолноеИмяРегистра(ИмяОбъектаМетаданных)
			ИЛИ РаботаВМоделиСервиса.ЭтоПолноеИмяПоследовательности(ИмяОбъектаМетаданных) Тогда
			СтрокаОбъекта.Приоритет = 2;
		ИначеЕсли РаботаВМоделиСервиса.ЭтоПолноеИмяПерерасчета(ИмяОбъектаМетаданных) Тогда
			СтрокаОбъекта.Приоритет = 3;
		Иначе
			ШаблонТекста = НСтр("ru = 'Выгрузка объекта метаданных не поддерживается %1'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонТекста, ИмяОбъектаМетаданных);
			ВызватьИсключение(ТекстСообщения);
		КонецЕсли;
		
		СтрокаОбъекта.Имя = СтрокаОбъекта.ВыгружаемыйОбъект.ПолноеИмя;
	КонецЦикла;
	
	ВыгружаемыеДанные.Сортировать("Приоритет ВОЗР, Имя ВОЗР");
	
КонецПроцедуры

Функция НоваяТаблицаПредопределенных()
	
	ОписаниеXDTO = ФабрикаXDTO.Создать(ФабрикаXDTO.Тип("http://v8.1c.ru/8.1/data/core", "TypeDescription"));
	ОписаниеXDTO.TypeSet.Добавить(СериализаторXDTO.ЗаписатьXDTO(Новый РасширенноеИмяXML(
		"http://v8.1c.ru/8.1/data/enterprise/current-config",
		"AnyRef")));
	
	Предопределенные = Новый ТаблицаЗначений;
	Предопределенные.Колонки.Добавить("Ссылка", СериализаторXDTO.ПрочитатьXDTO(ОписаниеXDTO));
	Предопределенные.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(256, ДопустимаяДлина.Переменная)));
	
	Возврат Предопределенные;
	
КонецФункции

Процедура ЗаписатьДанныеВXMLСУказаниемТипов(КаталогВыгрузки, ТипыДляЗамены = Неопределено, МаксимальныйРазмерЧасти = 100000, 
	ВыгружатьСовместноРазделенныеСсылочныеОбъекты = Ложь)
	
	МодельДанных = РаботаВМоделиСервисаПовтИсп.ПолучитьМодельДанныхОбласти();
	СоответствиеЗаменяемыхОбъектов = СоответствиеОбъектовМетаданныхВЛокальномРежимеИМоделиСервиса();
	ИсключаемыеОбъекты = ПолучитьОбъектыМетаданныхИсключаемыеИзВыгрузкиЗагрузки();
	
	ВыгружаемыеДанные = Новый ТаблицаЗначений;
	ВыгружаемыеДанные.Колонки.Добавить("Приоритет", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0, ДопустимыйЗнак.Неотрицательный)));
	ВыгружаемыеДанные.Колонки.Добавить("Имя", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)));
	ВыгружаемыеДанные.Колонки.Добавить("ВыгружаемыйОбъект");
	ВыгружаемыеДанные.Колонки.Добавить("ЭмулируемыйОбъект");
	
	Для Каждого ЭлементМоделиДанных Из МодельДанных Цикл
		
		ИмяВыгружаемогоОбъекта = ЭлементМоделиДанных.Ключ;
		ИмяЭмулируемогоОбъекта = Неопределено;
		
		Если РаботаВМоделиСервиса.ЭтоПолноеИмяЖурналаДокументов(ИмяВыгружаемогоОбъекта)
			ИЛИ РаботаВМоделиСервиса.ЭтоПолноеИмяРегламентногоЗадания(ИмяВыгружаемогоОбъекта) Тогда
			
			// Журналы документов и регламентные задания не требуется обрабатывать при выгрузке данных
			Продолжить;
			
		КонецЕсли;
		
		ЭтоИсключаемыйОбъект = Ложь;
		Для Каждого ИсключаемыйОбъект Из ИсключаемыеОбъекты Цикл
			Если ИсключаемыйОбъект.ПолноеИмя() = ИмяВыгружаемогоОбъекта Тогда
				ЭтоИсключаемыйОбъект = Истина;
				Продолжить;
			КонецЕсли;
		КонецЦикла;
		Если ЭтоИсключаемыйОбъект Тогда
			Продолжить;
		КонецЕсли;
		
		ЭмулируемыйОбъект = Неопределено;
		Для Каждого ПравилоЭмуляции Из СоответствиеЗаменяемыхОбъектов Цикл
			Если ПравилоЭмуляции.Ключ.ПолноеИмя() = ИмяВыгружаемогоОбъекта Тогда
				ЭмулируемыйОбъект = ПравилоЭмуляции.Значение;
				Продолжить;
			КонецЕсли;
		КонецЦикла;
		
		СтрокаОбъекта = ВыгружаемыеДанные.Добавить();
		
		ОписаниеВыгружаемогоОбъекта = Новый Структура("ПолноеИмя,Имя,Разделитель,УсловноеРазделение", ИмяВыгружаемогоОбъекта);
		ЗаполнитьЗначенияСвойств(ОписаниеВыгружаемогоОбъекта, ЭлементМоделиДанных.Значение);
		СтрокаОбъекта.ВыгружаемыйОбъект = ОписаниеВыгружаемогоОбъекта;
		
		Если ЭмулируемыйОбъект <> Неопределено Тогда
			
			ОписаниеЭмулируемогоОбъекта = Новый Структура("ПолноеИмя,Имя", ЭмулируемыйОбъект.ПолноеИмя(), ЭмулируемыйОбъект.Имя);
			Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
				СтрокаОбъекта.ЭмулируемыйОбъект = ОписаниеЭмулируемогоОбъекта;
			Иначе
				СтрокаОбъекта.ВыгружаемыйОбъект = ОписаниеЭмулируемогоОбъекта;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ИменаМетаданныхЗаменяемыхТипов = Новый Соответствие;
	Если ТипыДляЗамены <> Неопределено Тогда
		
		Для Каждого ТипДляЗамены Из ТипыДляЗамены Цикл
			
			ИменаМетаданныхЗаменяемыхТипов.Вставить(Метаданные.НайтиПоТипу(ТипДляЗамены).ПолноеИмя(), Истина);
			
			МетаданныеТипаДляЗамены = Метаданные.НайтиПоТипу(ТипДляЗамены);
			
			СтрокаОбъекта = ВыгружаемыеДанные.Найти(МетаданныеТипаДляЗамены.ПолноеИмя());
			Если СтрокаОбъекта = Неопределено Тогда
				СтрокаОбъекта = ВыгружаемыеДанные.Добавить();
				ОписаниеВыгружаемогоОбъекта = Новый Структура(
					"ПолноеИмя,Имя,Разделитель,УсловноеРазделение",
					МетаданныеТипаДляЗамены.ПолноеИмя(),
					МетаданныеТипаДляЗамены.Имя);
				СтрокаОбъекта.ВыгружаемыйОбъект = ОписаниеВыгружаемогоОбъекта;
			КонецЕсли;
			
		КонецЦикла;
		
		Фабрика = ПолучитьФабрикуСУказаниемТипов(ТипыДляЗамены);
		Сериализатор = Новый СериализаторXDTO(Фабрика);
		
	Иначе
		
		Сериализатор = СериализаторXDTO;
		
	КонецЕсли;
	
	СортироватьВыгружаемыеДанные(ВыгружаемыеДанные);
	
	ТекущийРазмерЧасти = Неопределено;
	ТекущийНомерЧасти = 0;
	
	ПараметрыЗаписи_ЗаменяемыеТипы = Новый Структура("Запись, РазмерЧасти, ШаблонИмени, НомерЧасти");
	ПараметрыЗаписи_ЗаменяемыеТипы.ШаблонИмени = КаталогВыгрузки + "data_common%1.xml";
	
	ОткрытьЗаписьXML(ПараметрыЗаписи_ЗаменяемыеТипы);
	
	ПараметрыЗаписи_ПрочиеДанные = Новый Структура("Запись, РазмерЧасти, ШаблонИмени, НомерЧасти");
	ПараметрыЗаписи_ПрочиеДанные.ШаблонИмени = КаталогВыгрузки + "data_misc%1.xml";
	
	ОткрытьЗаписьXML(ПараметрыЗаписи_ПрочиеДанные);
	
	// Выгрузка в XML всех данных, относящихся к области
	
	ФормироватьТаблицуПредопределенных = НЕ СтандартныеПодсистемыПовтИсп.ЭтоПлатформа83БезРежимаСовместимости();
	Если ФормироватьТаблицуПредопределенных Тогда
		Предопределенные = НоваяТаблицаПредопределенных();
	КонецЕсли;
	
	Для Каждого СтрокаОбъекта Из ВыгружаемыеДанные Цикл
		
		ОписаниеВыгружаемогоОбъекта = СтрокаОбъекта.ВыгружаемыйОбъект;
		ОписаниеЭмулируемогоОбъекта = СтрокаОбъекта.ЭмулируемыйОбъект;
		
		Если РаботаВМоделиСервиса.ЭтоПолноеИмяКонстанты(ОписаниеВыгружаемогоОбъекта.ПолноеИмя) Тогда
			
			МенеджерЗначения = Константы[ОписаниеВыгружаемогоОбъекта.Имя].СоздатьМенеджерЗначения();
			МенеджерЗначения.Прочитать();
			
			Если ОписаниеЭмулируемогоОбъекта <> Неопределено Тогда
				
				МенеджерЗначения = ПодменаОбъектаМетаданныхПриВыгрузкеЗагрузкеДанных(
					МенеджерЗначения,
					ОписаниеВыгружаемогоОбъекта,
					ОписаниеЭмулируемогоОбъекта);
				
			КонецЕсли;
			
			ЗаписатьВXML(МенеджерЗначения, МенеджерЗначения.Метаданные(), 1, Сериализатор, ПараметрыЗаписи_ЗаменяемыеТипы,
				ПараметрыЗаписи_ПрочиеДанные, ИменаМетаданныхЗаменяемыхТипов, МаксимальныйРазмерЧасти)
			
		ИначеЕсли РаботаВМоделиСервиса.ЭтоПолноеИмяОбъектаСсылочногоТипа(ОписаниеВыгружаемогоОбъекта.ПолноеИмя) Тогда
			
			ЭтоПланОбмена = РаботаВМоделиСервиса.ЭтоПолноеИмяПланаОбмена(ОписаниеВыгружаемогоОбъекта.ПолноеИмя);
			Разделитель = ОписаниеВыгружаемогоОбъекта.Разделитель;
			
			Если (ЭтоПланОбмена ИЛИ Разделитель = ОбщегоНазначенияПовтИсп.РазделительВспомогательныхДанных())
					И НЕ ВыгружатьСовместноРазделенныеСсылочныеОбъекты Тогда
				Продолжить;
			КонецЕсли;
			
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ
			|	_XMLВыгрузка_Таблица.Ссылка КАК Ссылка
			|ИЗ
			|	" + ОписаниеВыгружаемогоОбъекта.ПолноеИмя + " КАК _XMLВыгрузка_Таблица";
			
			Если ЭтоПланОбмена Тогда
				
				Запрос.Текст = Запрос.Текст + " ГДЕ _XMLВыгрузка_Таблица.Ссылка <> &ЭтотУзел";
				Запрос.УстановитьПараметр("ЭтотУзел", ПланыОбмена[ОписаниеВыгружаемогоОбъекта.Имя].ЭтотУзел());
				
			КонецЕсли;
			
			Менеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ОписаниеВыгружаемогоОбъекта.ПолноеИмя);
			
			РезультатЗапроса = Запрос.Выполнить();
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				
				Объект = Выборка.Ссылка.ПолучитьОбъект();
				
				Если ОписаниеЭмулируемогоОбъекта <> Неопределено Тогда
					
					Объект = ПодменаОбъектаМетаданныхПриВыгрузкеЗагрузкеДанных(
						Объект,
						ОписаниеВыгружаемогоОбъекта,
						ОписаниеЭмулируемогоОбъекта);
					
				КонецЕсли;
					
				Если ФормироватьТаблицуПредопределенных
					И (РаботаВМоделиСервиса.ЭтоПолноеИмяСправочника(ОписаниеВыгружаемогоОбъекта.ПолноеИмя)
						ИЛИ РаботаВМоделиСервиса.ЭтоПолноеИмяПланаВидовХарактеристик(ОписаниеВыгружаемогоОбъекта.ПолноеИмя)
						ИЛИ РаботаВМоделиСервиса.ЭтоПолноеИмяПланаСчетов(ОписаниеВыгружаемогоОбъекта.ПолноеИмя)
						ИЛИ РаботаВМоделиСервиса.ЭтоПолноеИмяПланаВидовРасчета(ОписаниеВыгружаемогоОбъекта.ПолноеИмя))
					И Объект.Предопределенный Тогда
					
					СтрокаПредопределенного = Предопределенные.Добавить();
					СтрокаПредопределенного.Ссылка = Объект.Ссылка;
					СтрокаПредопределенного.Имя = Менеджер.ПолучитьИмяПредопределенного(СтрокаПредопределенного.Ссылка);
					
				КонецЕсли;
				
				Размер = ОценитьРазмерОбъекта(Объект.Метаданные(), Объект);
				ЗаписатьВXML(Объект, Объект.Метаданные(), Размер, Сериализатор, ПараметрыЗаписи_ЗаменяемыеТипы,
					ПараметрыЗаписи_ПрочиеДанные, ИменаМетаданныхЗаменяемыхТипов, МаксимальныйРазмерЧасти);
				
			КонецЦикла;
			
		ИначеЕсли РаботаВМоделиСервиса.ЭтоПолноеИмяРегистра(ОписаниеВыгружаемогоОбъекта.ПолноеИмя)
				ИЛИ РаботаВМоделиСервиса.ЭтоПолноеИмяПоследовательности(ОписаниеВыгружаемогоОбъекта.ПолноеИмя)
				ИЛИ РаботаВМоделиСервиса.ЭтоПолноеИмяПерерасчета(ОписаниеВыгружаемогоОбъекта.ПолноеИмя) Тогда
			
			ЭтоРегистрСведений = РаботаВМоделиСервиса.ЭтоПолноеИмяРегистраСведений(ОписаниеВыгружаемогоОбъекта.ПолноеИмя);
			Если ЭтоРегистрСведений Тогда
				МетаданныеРегистра = Метаданные.РегистрыСведений.Найти(ОписаниеВыгружаемогоОбъекта.Имя);
				ЭтоНезависимыйРегистрСведений = (МетаданныеРегистра.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.Независимый);
				ЭтоПерерасчет = Ложь;
			Иначе
				ЭтоНезависимыйРегистрСведений = Ложь;
				ЭтоПерерасчет = РаботаВМоделиСервиса.ЭтоПолноеИмяПерерасчета(ОписаниеВыгружаемогоОбъекта.ПолноеИмя);
			КонецЕсли;
			
			Менеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ОписаниеВыгружаемогоОбъекта.ПолноеИмя);

			
			Если ЭтоНезависимыйРегистрСведений Тогда
				
				НаборЗаписей = Менеджер.СоздатьНаборЗаписей();
				НаборЗаписей.Прочитать();
				
				Если ОписаниеЭмулируемогоОбъекта <> Неопределено Тогда
					
					НаборЗаписей = ПодменаОбъектаМетаданныхПриВыгрузкеЗагрузкеДанных(
						НаборЗаписей,
						ОписаниеВыгружаемогоОбъекта,
						ОписаниеЭмулируемогоОбъекта);
					
				КонецЕсли;
				
				Размер = ОценитьРазмерНабораЗаписей(НаборЗаписей.Метаданные(), НаборЗаписей);
				ЗаписатьВXML(НаборЗаписей, НаборЗаписей.Метаданные(), Размер, Сериализатор, ПараметрыЗаписи_ЗаменяемыеТипы,
					ПараметрыЗаписи_ПрочиеДанные, ИменаМетаданныхЗаменяемыхТипов, МаксимальныйРазмерЧасти);
				
			Иначе
				
				ПараметрыВыборки = РаботаВМоделиСервиса.ПараметрыВыборки(ОписаниеВыгружаемогоОбъекта.ПолноеИмя);
				ИмяПоляРегистратор = ПараметрыВыборки.ИмяПоляРегистратор;
				
				Запрос = Новый Запрос;
				Запрос.Текст =
				"ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	_XMLВыгрузка_Таблица.Регистратор КАК Регистратор
				|ИЗ
				|	" + ПараметрыВыборки.Таблица + " КАК _XMLВыгрузка_Таблица";
				
				Если ИмяПоляРегистратор <> "Регистратор" Тогда
					Запрос.Текст = СтрЗаменить(Запрос.Текст, "Регистратор", ИмяПоляРегистратор);
				КонецЕсли;
				
				РезультатЗапроса = Запрос.Выполнить();
				Выборка = РезультатЗапроса.Выбрать();
				Пока Выборка.Следующий() Цикл
					
					НаборЗаписей = Менеджер.СоздатьНаборЗаписей();
					НаборЗаписей.Отбор[ИмяПоляРегистратор].Установить(Выборка[ИмяПоляРегистратор]);
					НаборЗаписей.Прочитать();
					
					Если ОписаниеЭмулируемогоОбъекта <> Неопределено Тогда
						
						НаборЗаписей = ПодменаОбъектаМетаданныхПриВыгрузкеЗагрузкеДанных(
							НаборЗаписей,
							ОписаниеВыгружаемогоОбъекта,
							ОписаниеЭмулируемогоОбъекта);
						
					КонецЕсли;
					
					Размер = ОценитьРазмерНабораЗаписей(НаборЗаписей.Метаданные(), НаборЗаписей);
					ЗаписатьВXML(НаборЗаписей, НаборЗаписей.Метаданные(), Размер, Сериализатор, ПараметрыЗаписи_ЗаменяемыеТипы,
						ПараметрыЗаписи_ПрочиеДанные, ИменаМетаданныхЗаменяемыхТипов, МаксимальныйРазмерЧасти);
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗакрытьЗаписьXML(ПараметрыЗаписи_ЗаменяемыеТипы);
	ЗакрытьЗаписьXML(ПараметрыЗаписи_ПрочиеДанные);
	
	Если ФормироватьТаблицуПредопределенных Тогда
		Запись = Новый ЗаписьXML;
		Запись.ОткрытьФайл(КаталогВыгрузки + "PredefinedDataNames.xml");
		Запись.ЗаписатьОбъявлениеXML();
		Запись.ЗаписатьНачалоЭлемента("Data");
		Запись.ЗаписатьСоответствиеПространстваИмен("xs", "http://www.w3.org/2001/XMLSchema");
		Запись.ЗаписатьСоответствиеПространстваИмен("xsi", "http://www.w3.org/2001/XMLSchema-instance");
		Запись.ЗаписатьСоответствиеПространстваИмен("ns1", "http://v8.1c.ru/8.1/data/core");
		Запись.ЗаписатьСоответствиеПространстваИмен("ns2", "http://v8.1c.ru/8.1/data/enterprise");
		Запись.ЗаписатьСоответствиеПространстваИмен("v8", "http://v8.1c.ru/8.1/data/enterprise/current-config");
		
		Сериализатор.ЗаписатьXML(Запись, Предопределенные);
		Запись.ЗаписатьКонецЭлемента();
		Запись.Закрыть();
	КонецЕсли;
	
КонецПроцедуры

// Возвращает таблицу с правилами замен
//
// Возвращаемое значение:
//  ТаблицаЗначений с колонками
//   ИмяТипаXML - строка, XMLТип(Тип).ИмяТипа
//   Тип - Тип, возвращаемый вызовом ТипыОбщихДанных() из подмножества Справочники.ТипВсеСсылки()
//   ОбщиеДанные - всегда Истина, не используется
//   СоответствиеСсылок - Соответствие
//   ОбратноеСоответствие - Соответствие
//   ТекстЗапроса - строка запроса, возвращающего для текущего типа 3 колонки: 		
//		Коды.Ссылка КАК ИсходнаяСсылка,
//		Коды.Код КАК Код,
//		ТаблицаСправочника.Ссылка КАК ОбщаяСсылка
//
Функция ПодготовитьСловарьЗамен()
	
	СловарьЗамен = Новый ТаблицаЗначений;
	СловарьЗамен.Колонки.Добавить("ИмяТипаXML", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(255, ДопустимаяДлина.Переменная)));
	СловарьЗамен.Колонки.Добавить("Тип", Новый ОписаниеТипов("Тип"));
	СловарьЗамен.Колонки.Добавить("ОбщиеДанные", Новый ОписаниеТипов("Булево"));
	СловарьЗамен.Колонки.Добавить("СоответствиеСсылок", Новый ОписаниеТипов("Соответствие"));
	СловарьЗамен.Колонки.Добавить("ОбратноеСоответствие", Новый ОписаниеТипов("Соответствие"));
	СловарьЗамен.Колонки.Добавить("ТекстЗапроса", Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(0, ДопустимаяДлина.Переменная)));
	СловарьЗамен.Колонки.Добавить("ОбщиеСсылки", Новый ОписаниеТипов("Массив"));
	СловарьЗамен.Колонки.Добавить("СтандартнаяОбработка");
	
	Для каждого ТипОбщихДанных Из ТипыОбщихДанных() Цикл
		Если НЕ Справочники.ТипВсеСсылки().СодержитТип(ТипОбщихДанных) Тогда
			Продолжить;
		КонецЕсли;
		
		ДобавитьТипЗамены(СловарьЗамен, ТипОбщихДанных);
	КонецЦикла;

	Возврат СловарьЗамен;
	
КонецФункции

Процедура ДобавитьТипЗамены(Знач СловарьЗамен, Знач ТипОбщихДанных)
			
	ОписаниеТипаЗамены = СловарьЗамен.Добавить();
	
	ОписаниеТипаЗамены.ОбщиеДанные = Истина;
	ОписаниеТипаЗамены.Тип = ТипОбщихДанных;
	
	ОписаниеТипаЗамены.ИмяТипаXML = СериализаторXDTO.XMLТип(ОписаниеТипаЗамены.Тип).ИмяТипа;
	
	МетаданныеТипа = Метаданные.НайтиПоТипу(ОписаниеТипаЗамены.Тип);
	МетаданныеОбщегоТипа = Метаданные.НайтиПоТипу(ТипОбщихДанных);
	
	Если МетаданныеОбщегоТипа.Иерархический 
		И МетаданныеОбщегоТипа.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов Тогда
		
		УсловиеНаГруппы = Символы.ПС + Символы.Таб + Символы.Таб + "И Коды.ЭтоГруппа = ТаблицаСправочника.ЭтоГруппа";
		
	Иначе
		
		УсловиеНаГруппы = "";
		
	КонецЕсли;
	
	ОписаниеТипаЗамены.ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Коды.Ссылка КАК ИсходнаяСсылка,
	|	Коды.Код КАК Код,
	|	ТаблицаСправочника.Ссылка КАК ОбщаяСсылка
	|ИЗ
	|	Коды КАК Коды
	|		ЛЕВОЕ СОЕДИНЕНИЕ " + МетаданныеОбщегоТипа.ПолноеИмя() + " КАК ТаблицаСправочника
	|		ПО Коды.Код = ТаблицаСправочника.Код" + УсловиеНаГруппы + "
	|ГДЕ
	|	Коды.Ссылка ССЫЛКА " + МетаданныеТипа.ПолноеИмя();
		
КонецПроцедуры

// Возвращает пустую ТаблицуЗначений
//
// Возвращаемое значение:
//  ТаблицаЗначений с колонками
//    Тип
//    СоответствиеСсылок
Функция ПодготовитьФрагментСловаряЗамен()
	
	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("Тип", Новый ОписаниеТипов("Тип"));
	Результат.Колонки.Добавить("СоответствиеСсылок", Новый ОписаниеТипов("Соответствие"));
	Результат.Колонки.Добавить("СтандартнаяОбработка");
	
	Возврат Результат;
	
КонецФункции

Процедура ДобавитьФрагментВСловарьЗамен(Знач СловарьЗамен, Знач Фрагмент)
	
	ПустойУИД = СериализаторXDTO.XMLСтрока(Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	
	Для каждого СтрокаФрагмента Из Фрагмент Цикл
		СтрокаСловаря = СловарьЗамен.Найти(СтрокаФрагмента.Тип, "Тип");
		Если СтрокаСловаря = Неопределено Тогда
			СтрокаСловаря = СловарьЗамен.Добавить();
			СтрокаСловаря.Тип = СтрокаФрагмента.Тип;
			СтрокаСловаря.ИмяТипаXML = СериализаторXDTO.XMLТип(СтрокаСловаря.Тип).ИмяТипа;
			СтрокаСловаря.ОбщиеДанные = Истина;
		КонецЕсли;
		
		СтрокаСловаря.СоответствиеСсылок = СтрокаФрагмента.СоответствиеСсылок;
		СтрокаСловаря.СтандартнаяОбработка = СтрокаФрагмента.СтандартнаяОбработка;
			
		СтрокаСловаря.ОбратноеСоответствие = Новый Соответствие;
		СтрокаСловаря.ОбратноеСоответствие.Вставить(ПустойУИД, ПустойУИД);
		
		Для каждого КлючИЗначение Из СтрокаСловаря.СоответствиеСсылок Цикл
			ИсходнаяСсылкаXML = СериализаторXDTO.XMLСтрока(КлючИЗначение.Значение);
			НайденнаяСсылкаXML = СериализаторXDTO.XMLСтрока(КлючИЗначение.Ключ);
			СтрокаСловаря.ОбратноеСоответствие.Вставить(ИсходнаяСсылкаXML, НайденнаяСсылкаXML);
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗагрузитьДанныеСПодменойСсылок(Знач КаталогВыгрузки)
	
	СловарьЗамен = ПодготовитьСловарьЗамен();
	
	// Заполняем подстановки для Справочник.ИдентификаторыОбъектовМетаданных
	ФрагментСловаряЗамен = ПодготовитьФрагментСловаряЗамен();
	Справочники.ИдентификаторыОбъектовМетаданных.ДополнитьСловарьЗаменСсылокИдентификаторовТекущихИЗагружаемыхДанных(ФрагментСловаряЗамен, КаталогВыгрузки);
	
	ОбработчикиСобытия = ОбщегоНазначения.ОбработчикиСлужебногоСобытия(
		"СтандартныеПодсистемы.РаботаВМоделиСервиса.ВыгрузкаЗагрузкаДанных\ПриФормированииСловаряЗаменПоКаталогуВыгрузки");
	Для Каждого Обработчик Из ОбработчикиСобытия Цикл
		Обработчик.Модуль.ПриФормированииСловаряЗаменПоКаталогуВыгрузки(ФрагментСловаряЗамен, КаталогВыгрузки);
	КонецЦикла;
	ВыгрузкаЗагрузкаДанныхПереопределяемый.ПриФормированииСловаряЗаменПоКаталогуВыгрузки(ФрагментСловаряЗамен, КаталогВыгрузки);
	
	ДобавитьФрагментВСловарьЗамен(СловарьЗамен, ФрагментСловаряЗамен);
	
	ПустойУИД = СериализаторXDTO.XMLСтрока(Новый УникальныйИдентификатор("00000000-0000-0000-0000-000000000000"));
	
	Коллизии = Новый ТаблицаЗначений;
	Коллизии.Колонки.Добавить("ИсходнаяСсылка", Справочники.ТипВсеСсылки());
	Коллизии.Колонки.Добавить("Код", Новый ОписаниеТипов("Число, Строка", 
		Новый КвалификаторыЧисла(20, 0, ДопустимыйЗнак.Неотрицательный), Новый КвалификаторыСтроки(50, ДопустимаяДлина.Переменная)));
	Коллизии.Колонки.Добавить("НайденнаяСсылка", Справочники.ТипВсеСсылки());
	Коллизии.Индексы.Добавить("ИсходнаяСсылка, НайденнаяСсылка");
	
	РазорванныеСсылки = Новый ТаблицаЗначений;
	РазорванныеСсылки.Колонки.Добавить("ИсходнаяСсылка", Справочники.ТипВсеСсылки());
	РазорванныеСсылки.Колонки.Добавить("Код", Новый ОписаниеТипов("Число, Строка", 
		Новый КвалификаторыЧисла(20, 0, ДопустимыйЗнак.Неотрицательный), Новый КвалификаторыСтроки(50, ДопустимаяДлина.Переменная)));
		
	ТекстЗапросаСозданияТаблицыКодов =
	"ВЫБРАТЬ
	|	Коды.Ссылка КАК Ссылка,
	|	Коды.Код КАК Код,
	|	Коды.ЭтоГруппа КАК ЭтоГруппа
	|ПОМЕСТИТЬ Коды
	|ИЗ
	|	&ТаблицаКодов КАК Коды
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка";
	
	ФайлыОбщихДанных = НайтиФайлы(КаталогВыгрузки, "data_common*.xml", Ложь);
	Для каждого ФайлОбщихДанных Из ФайлыОбщихДанных Цикл
		
		// Дополнительные замены прикладных конфигураций
		ФрагментСловаряЗамен = ПодготовитьФрагментСловаряЗамен();
		
		ОбработчикиСобытия = ОбщегоНазначения.ОбработчикиСлужебногоСобытия(
			"СтандартныеПодсистемы.РаботаВМоделиСервиса.ВыгрузкаЗагрузкаДанных\ПриДополненииСловаряЗаменПоОбщимДанным");
		Для Каждого Обработчик Из ОбработчикиСобытия Цикл
			Обработчик.Модуль.ПриДополненииСловаряЗаменПоОбщимДанным(ФрагментСловаряЗамен, ФайлОбщихДанных.ПолноеИмя);
		КонецЦикла;
		ВыгрузкаЗагрузкаДанныхПереопределяемый.ДополнитьСловарьЗаменПоОбщимДанным(ФрагментСловаряЗамен, ФайлОбщихДанных.ПолноеИмя);
		
		ДобавитьФрагментВСловарьЗамен(СловарьЗамен, ФрагментСловаряЗамен);
		
		ТаблицаКодов = ПолучитьТаблицуКодовОбщихДанных(ФайлОбщихДанных.ПолноеИмя);
		
		МенеджерВТ = Новый МенеджерВременныхТаблиц;
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
		Запрос.Текст = ТекстЗапросаСозданияТаблицыКодов;
		Запрос.УстановитьПараметр("ТаблицаКодов", ТаблицаКодов);
		Запрос.Выполнить();
		
		Для каждого ОписаниеТипаЗамены Из СловарьЗамен Цикл
			Если ПустаяСтрока(ОписаниеТипаЗамены.ТекстЗапроса)
				ИЛИ ОписаниеТипаЗамены.СтандартнаяОбработка = Ложь
				ИЛИ ОписаниеТипаЗамены.СоответствиеСсылок.Количество() > 0 Тогда
				
				Продолжить;
			КонецЕсли;
			
			ОписаниеТипаЗамены.СоответствиеСсылок = Новый Соответствие;
			
			ОписаниеТипаЗамены.ОбратноеСоответствие = Новый Соответствие;
			ОписаниеТипаЗамены.ОбратноеСоответствие.Вставить(ПустойУИД, ПустойУИД);
			
			СсылкиДляПодбора = Новый Массив;
			
			Запрос.Текст = ОписаниеТипаЗамены.ТекстЗапроса;
			Результат = Запрос.Выполнить();
			Выборка = Результат.Выбрать();
			Пока Выборка.Следующий() Цикл
				ИсходнаяСсылкаXML = СериализаторXDTO.XMLСтрока(Выборка.ИсходнаяСсылка.УникальныйИдентификатор());
				
				Если Выборка.ОбщаяСсылка = NULL Тогда
					СтрокаОшибки = РазорванныеСсылки.Добавить();
					СтрокаОшибки.ИсходнаяСсылка = Выборка.ИсходнаяСсылка;
					СтрокаОшибки.Код = Выборка.Код;
					
					ОписаниеТипаЗамены.ОбратноеСоответствие.Вставить(
						ИсходнаяСсылкаXML, ИсходнаяСсылкаXML);
				Иначе
					НайденнаяСсылкаXML = СериализаторXDTO.XMLСтрока(Выборка.ОбщаяСсылка.УникальныйИдентификатор());
					
					СуществующееЗначение = ОписаниеТипаЗамены.СоответствиеСсылок.Получить(Выборка.ОбщаяСсылка);
					Если СуществующееЗначение <> Неопределено Тогда
						Если Коллизии.НайтиСтроки(Новый Структура("ИсходнаяСсылка, НайденнаяСсылка", 
							СуществующееЗначение, Выборка.ОбщаяСсылка)).Количество() = 0 Тогда
							
							Коллизия = Коллизии.Добавить();
							Коллизия.ИсходнаяСсылка = СуществующееЗначение;
							Коллизия.Код = Выборка.Код;
							Коллизия.НайденнаяСсылка = Выборка.ОбщаяСсылка;
						КонецЕсли;
						
						Коллизия = Коллизии.Добавить();
						Коллизия.ИсходнаяСсылка = Выборка.ИсходнаяСсылка;
						Коллизия.Код = Выборка.Код;
						Коллизия.НайденнаяСсылка = Выборка.ОбщаяСсылка;
					Иначе
						ОписаниеТипаЗамены.СоответствиеСсылок.Вставить(Выборка.ОбщаяСсылка, Выборка.ИсходнаяСсылка);
						ОписаниеТипаЗамены.ОбратноеСоответствие.Вставить(ИсходнаяСсылкаXML, НайденнаяСсылкаXML);
						
						ОписаниеТипаЗамены.ОбщиеСсылки.Добавить(Выборка.ОбщаяСсылка);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
		
		МаскаПоиска = "data_*.xml";
		ВсеФайлыДанных = НайтиФайлы(КаталогВыгрузки, МаскаПоиска, Ложь);
		Для каждого ФайлДанных Из ВсеФайлыДанных Цикл
			
			// Замена ссылок
			
			Чтение = Новый ЧтениеТекста(ФайлДанных.ПолноеИмя);
			ИмяОбработанногоФайла = ПолучитьИмяВременногоФайла();
			Запись = Новый ЗаписьТекста(ИмяОбработанногоФайла);
			
			// Константы для разбора текста
			НачалоТипа = "xsi:type=""v8:";
			ДлинаНачалаТипа = СтрДлина(НачалоТипа);
			КонецТипа = """>";
			ДлинаКонцаТипа = СтрДлина(КонецТипа);
			
			ИсходнаяСтрока = Чтение.ПрочитатьСтроку();
			Пока ИсходнаяСтрока <> Неопределено Цикл
				
				ОстатокСтроки = Неопределено;
				
				ТекущаяПозиция = 1;
				ПозицияТипа = Найти(ИсходнаяСтрока, НачалоТипа);
				Пока ПозицияТипа > 0 Цикл
					
					Запись.Записать(Сред(ИсходнаяСтрока, ТекущаяПозиция, ПозицияТипа - 1 + ДлинаНачалаТипа));
					
					ТекущаяПозиция = ТекущаяПозиция + ПозицияТипа + ДлинаНачалаТипа;
					
					Если ОстатокСтроки = Неопределено Тогда
						ОстатокСтроки = Сред(ИсходнаяСтрока, ПозицияТипа + ДлинаНачалаТипа);
					Иначе
						ОстатокСтроки = Сред(ОстатокСтроки, ПозицияТипа + ДлинаНачалаТипа);
					КонецЕсли;
					ПозицияТипа = Найти(ОстатокСтроки, НачалоТипа);
					
					ПозицияКонцаТипа = Найти(ОстатокСтроки, КонецТипа);
					Если ПозицияКонцаТипа = 0 Тогда
						Прервать;
					КонецЕсли;
					
					ИмяТипа = Лев(ОстатокСтроки, ПозицияКонцаТипа - 1);
					ОписаниеТипаЗамены = СловарьЗамен.Найти(ИмяТипа, "ИмяТипаXML");
					Если ОписаниеТипаЗамены = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
					Запись.Записать(ИмяТипа);
					Запись.Записать(КонецТипа);
					
					ИсходнаяСсылкаXML = Сред(ОстатокСтроки, ПозицияКонцаТипа + ДлинаКонцаТипа, 36);
					НайденнаяСсылкаXML = ОписаниеТипаЗамены.ОбратноеСоответствие.Получить(ИсходнаяСсылкаXML);
					Если НайденнаяСсылкаXML = Неопределено Тогда
						Запись.Записать(ИсходнаяСсылкаXML);
					Иначе
						Запись.Записать(НайденнаяСсылкаXML);
					КонецЕсли;
					
					ТекущаяПозиция = ТекущаяПозиция + ПозицияКонцаТипа - 1 + ДлинаКонцаТипа + 36;
					ОстатокСтроки = Сред(ОстатокСтроки, ПозицияКонцаТипа + ДлинаКонцаТипа + 36);
					ПозицияТипа = Найти(ОстатокСтроки, НачалоТипа);
					
				КонецЦикла;
				
				Если ОстатокСтроки <> Неопределено Тогда
					Запись.ЗаписатьСтроку(ОстатокСтроки);
				Иначе
					Запись.ЗаписатьСтроку(Сред(ИсходнаяСтрока, ТекущаяПозиция));
				КонецЕсли;
				
				ИсходнаяСтрока = Чтение.ПрочитатьСтроку();
			КонецЦикла;
			
			Чтение.Закрыть();
			
			Запись.Закрыть();
			
			УдалитьФайлы(ФайлДанных.ПолноеИмя);
			ПереместитьФайл(ИмяОбработанногоФайла, ФайлДанных.ПолноеИмя);
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Загрузка данных
	ЗагрузитьДанныеЧерезXDTOСериализатор(КаталогВыгрузки);
	
КонецПроцедуры

Процедура ЗагрузитьДанныеЧерезXDTOСериализатор(Знач КаталогВыгрузки, Знач МаскаПоиска = Неопределено)
	
	МодельДанных = РаботаВМоделиСервисаПовтИсп.ПолучитьМодельДанныхОбласти();
	СоответствиеЗаменяемыхОбъектов = СоответствиеОбъектовМетаданныхВЛокальномРежимеИМоделиСервиса();
	ИсключаемыеОбъекты = ПолучитьОбъектыМетаданныхИсключаемыеИзВыгрузкиЗагрузки();
	
	ЗагружаемыеДанные = Новый Соответствие();
	
	Для Каждого ЭлементМоделиДанных Из МодельДанных Цикл
		
		ИмяЗагружаемогоОбъекта = ЭлементМоделиДанных.Ключ;
		
		ВыгруженныйОбъект = Неопределено;
		Для Каждого ПравилоЭмуляции Из СоответствиеЗаменяемыхОбъектов Цикл
			Если ПравилоЭмуляции.Ключ.ПолноеИмя() = ИмяЗагружаемогоОбъекта Тогда
				
				ВыгруженныйОбъект = ПравилоЭмуляции.Значение;
				Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
					ЗагружаемыйОбъект = ПравилоЭмуляции.Ключ;
				Иначе
					ЗагружаемыйОбъект = ПравилоЭмуляции.Значение;
				КонецЕсли;
				
				Прервать;
				
			КонецЕсли;
		КонецЦикла;
		
		Если ВыгруженныйОбъект <> Неопределено Тогда
			
			ЭлементЗагружаемыхДанных = Новый Структура("ВыгружаемыйОбъект,ЗагружаемыйОбъект");
			ЭлементЗагружаемыхДанных.ВыгружаемыйОбъект = Новый Структура("ПолноеИмя,Имя", ВыгруженныйОбъект.ПолноеИмя(), ВыгруженныйОбъект.Имя);
			ЭлементЗагружаемыхДанных.ЗагружаемыйОбъект = Новый Структура("ПолноеИмя,Имя", ЗагружаемыйОбъект.ПолноеИмя(), ЗагружаемыйОбъект.Имя);
			
			ЗагружаемыеДанные.Вставить(
				ЭлементЗагружаемыхДанных.ВыгружаемыйОбъект.ПолноеИмя,
				ЭлементЗагружаемыхДанных);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ПланыОбменаКонфигурации = Новый Соответствие();
	Для каждого МетаданныеПланаОбмена Из Метаданные.ПланыОбмена Цикл
		
		Если МодельДанных.Получить(МетаданныеПланаОбмена.ПолноеИмя()) <> Неопределено Тогда
			ПланыОбменаКонфигурации.Вставить(МетаданныеПланаОбмена, Истина);
		КонецЕсли;
		
	КонецЦикла;
	
	Если МаскаПоиска = Неопределено Тогда
		МаскаПоиска = "data_*.xml";
	КонецЕсли;
	
	ИспользоватьИменаПредопределенных = СтандартныеПодсистемыПовтИсп.ЭтоПлатформа83БезРежимаСовместимости();
	Если ИспользоватьИменаПредопределенных Тогда
		ФайлСоответствия = Новый Файл(КаталогВыгрузки + "PredefinedDataNames.xml");
		Если ФайлСоответствия.Существует() Тогда
			Чтение = Новый ЧтениеXML;
			Чтение.ОткрытьФайл(ФайлСоответствия.ПолноеИмя);
			Чтение.ПерейтиКСодержимому();
			
			Если Чтение.ТипУзла <> ТипУзлаXML.НачалоЭлемента
				ИЛИ Чтение.Имя <> "Data" Тогда
				
				ВызватьИсключение(НСтр("ru = 'Ошибка чтения XML. Неверный формат файла. Ожидается начало элемента Data.'"));
			КонецЕсли;
			
			Чтение.Прочитать();
			
			Предопределенные = СериализаторXDTO.ПрочитатьXML(Чтение);
			
			Чтение.Закрыть();
			Чтение = Неопределено;
			
			ЗагруженыИменаПредопределенных = Истина;
		Иначе
			Предопределенные = НоваяТаблицаПредопределенных();
			
			ЗагруженыИменаПредопределенных = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ОбластьДанных = ОбщегоНазначения.ЗначениеРазделителяСеанса();
	
	ВсеФайлыДанных = НайтиФайлы(КаталогВыгрузки, МаскаПоиска, Ложь);
	
	РежимОтладки = Ложь;
	
	Пока Истина Цикл
		
		Попытка
		
			Для каждого ФайлДанных Из ВсеФайлыДанных Цикл
				Чтение = Новый ЧтениеXML;
				Чтение.ОткрытьФайл(ФайлДанных.ПолноеИмя);
				Чтение.ПерейтиКСодержимому();
				
				Если Чтение.ТипУзла <> ТипУзлаXML.НачалоЭлемента
					ИЛИ Чтение.Имя <> "DataDumpPart" Тогда
					
					ВызватьИсключение(НСтр("ru = 'Ошибка чтения XML. Неверный формат файла. Ожидается начало элемента DataDumpPart.'"));
				КонецЕсли;
				
				Если РежимОтладки Тогда
					СоответствияПространствИмен = Чтение.КонтекстПространствИмен.СоответствияПространствИмен();
				КонецЕсли;
				
				Если НЕ Чтение.Прочитать() Тогда
					ВызватьИсключение(НСтр("ru = 'Ошибка чтения XML. Обнаружено завершение файла.'"));
				КонецЕсли;
				
				Если Чтение.ТипУзла <> ТипУзлаXML.НачалоЭлемента
					ИЛИ Чтение.Имя <> "Data" Тогда
					
					ВызватьИсключение(НСтр("ru = 'Ошибка чтения XML. Неверный формат файла. Ожидается начало элемента Data.'"));
				КонецЕсли;
				
				Если НЕ Чтение.Прочитать() Тогда
					ВызватьИсключение(НСтр("ru = 'Ошибка чтения XML. Обнаружено завершение файла.'"));
				КонецЕсли;
				
				Пока Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента Цикл
					Если НЕ СериализаторXDTO.ВозможностьЧтенияXML(Чтение) Тогда
						ОшибкаОпределенияТипаПриЧтении(Чтение);
					КонецЕсли;
					
					Если РежимОтладки Тогда
						ЗаписьФрагмента = Новый ЗаписьXML;
						ЗаписьФрагмента.УстановитьСтроку();
						
						ИмяУзлаФрагмента = Чтение.Имя;
						
						КорневойУзел = Истина;
						
						Пока НЕ (Чтение.ТипУзла = ТипУзлаXML.КонецЭлемента
								И Чтение.Имя = ИмяУзлаФрагмента) Цикл
								
							ЗаписьФрагмента.ЗаписатьТекущий(Чтение);
							
							Если КорневойУзел Тогда
								ПрефиксыФрагмента = ЗаписьФрагмента.КонтекстПространствИмен.СоответствияПространствИмен();
								Для каждого ПрефиксИПространство Из СоответствияПространствИмен Цикл
									Если ПрефиксыФрагмента.Получить(ПрефиксИПространство.Ключ) = Неопределено Тогда
										ЗаписьФрагмента.ЗаписатьСоответствиеПространстваИмен(ПрефиксИПространство.Ключ, ПрефиксИПространство.Значение);
									КонецЕсли;
								КонецЦикла;
								КорневойУзел = Ложь;
							КонецЕсли;
							
							Чтение.Прочитать();
						КонецЦикла;
						ЗаписьФрагмента.ЗаписатьТекущий(Чтение);
						Чтение.Прочитать();
						
						Фрагмент = ЗаписьФрагмента.Закрыть();
						
						ЧтениеФрагмента = Новый ЧтениеXML;
						ЧтениеФрагмента.УстановитьСтроку(Фрагмент);
						Попытка
							Данные = СериализаторXDTO.ПрочитатьXML(ЧтениеФрагмента);
						Исключение
							
							ЗаписьЖурналаРегистрации(
								НСтр("ru = 'ВыгрузкаЗагрузкаДанных.ОшибкаЧтенияXML'", 
									ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
								УровеньЖурналаРегистрации.Ошибка,
								,
								,
								СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru = '%1
	                                      |
	                                      |Фрагмент файла выгрузки, который не удается прочитать через СериализаторXDTO:
	                                      |%2'"),
									ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()),
									Фрагмент));
							
							ВызватьИсключение;
							
						КонецПопытки;
					Иначе
						Данные = СериализаторXDTO.ПрочитатьXML(Чтение);
					КонецЕсли;
					
					// В платформе 8.3.2 и ниже не допускается наличие помеченных на удаление предопределенных элементов
					Если Не ИспользоватьИменаПредопределенных И 
						(Метаданные.Справочники.Содержит(Данные.Метаданные()) Или
						Метаданные.ПланыВидовХарактеристик.Содержит(Данные.Метаданные()) Или
						Метаданные.ПланыСчетов.Содержит(Данные.Метаданные()) Или
						Метаданные.ПланыВидовРасчета.Содержит(Данные.Метаданные()))
						И Данные.Предопределенный И Данные.ПометкаУдаления Тогда
						
						Продолжить;
						
					КонецЕсли;
					
					МетаданныеЗагруженногоЗначения = Данные.Метаданные();
					
					Если ИсключаемыеОбъекты.Найти(МетаданныеЗагруженногоЗначения) <> Неопределено Тогда
						Продолжить;
					КонецЕсли;
					
					ОписаниеЗагруженныхДанных = МодельДанных.Получить(МетаданныеЗагруженногоЗначения.ПолноеИмя());
					Если ОписаниеЗагруженныхДанных <> Неопределено Тогда
						Разделитель = ОписаниеЗагруженныхДанных.Разделитель;
					Иначе
						Разделитель = Неопределено;
					КонецЕсли;
					
					ПравилоПодменыОбъектовПриЗаписи = ЗагружаемыеДанные.Получить(МетаданныеЗагруженногоЗначения.ПолноеИмя());
					Если ПравилоПодменыОбъектовПриЗаписи <> Неопределено Тогда
						
						Данные = ПодменаОбъектаМетаданныхПриВыгрузкеЗагрузкеДанных(
							Данные,
							ПравилоПодменыОбъектовПриЗаписи.ВыгружаемыйОбъект,
							ПравилоПодменыОбъектовПриЗаписи.ЗагружаемыйОбъект);
						МетаданныеЗагруженногоЗначения = Данные.Метаданные();
						ОписаниеЗагруженныхДанных = МодельДанных.Получить(МетаданныеЗагруженногоЗначения.ПолноеИмя());
						Если ОписаниеЗагруженныхДанных <> Неопределено Тогда
							Разделитель = ОписаниеЗагруженныхДанных.Разделитель;
						Иначе
							Разделитель = Неопределено;
						КонецЕсли;
						
					Иначе
						
						Если ОбщегоНазначенияПовтИсп.РазделениеВключено() И Разделитель = Неопределено Тогда
							Продолжить;
						КонецЕсли;
						
					КонецЕсли;
					
					ЭтоПланОбмена = (ПланыОбменаКонфигурации.Получить(МетаданныеЗагруженногоЗначения) <> Неопределено);
					
					Если ЭтоПланОбмена Или Разделитель = ОбщегоНазначенияПовтИсп.РазделительВспомогательныхДанных() Тогда
						
						Если ОбщегоНазначения.ЭтоРегистр(МетаданныеЗагруженногоЗначения) Тогда
							
							Данные.Отбор[Разделитель].Установить(ОбластьДанных);
							
							Для Каждого ЗаписьНабораЗаписей Из Данные Цикл
								
								ЗаписьНабораЗаписей[Разделитель] = ОбластьДанных;
								
							КонецЦикла;
							
							
						Иначе
							
							Данные[Разделитель] = ОбластьДанных;
							
						КонецЕсли;
						
					КонецЕсли;
					
					Если НЕ ЭтоПланОбмена Тогда
						
						Данные.ОбменДанными.Загрузка = Истина;
						
						Если ИспользоватьИменаПредопределенных Тогда
							
							Если РаботаВМоделиСервиса.ЭтоПолноеИмяСправочника(МетаданныеЗагруженногоЗначения.ПолноеИмя())
									ИЛИ РаботаВМоделиСервиса.ЭтоПолноеИмяПланаВидовХарактеристик(МетаданныеЗагруженногоЗначения.ПолноеИмя())
									ИЛИ РаботаВМоделиСервиса.ЭтоПолноеИмяПланаСчетов(МетаданныеЗагруженногоЗначения.ПолноеИмя())
									ИЛИ РаботаВМоделиСервиса.ЭтоПолноеИмяПланаВидовРасчета(МетаданныеЗагруженногоЗначения.ПолноеИмя()) Тогда
								
								Если ЗначениеЗаполнено(Данные.ИмяПредопределенныхДанных) И Данные.ЭтоНовый() Тогда
									
									Если ЗагруженыИменаПредопределенных Тогда
										ВызватьИсключение(НСтр("ru = 'Некорректный формат выгрузки данных - существует файл соответствия имен предопределенных
											|и установлено имя предопределенного в объекте.'"));
									КонецЕсли;
									
									Если МетаданныеЗагруженногоЗначения["ОбновлениеПредопределенныхДанных"] <>
											Метаданные.СвойстваОбъектов["ОбновлениеПредопределенныхДанных"]["НеОбновлятьАвтоматически"] Тогда
										
										СтрокаПредопределенного = Предопределенные.Добавить();
										СтрокаПредопределенного.Ссылка = Данные.ПолучитьСсылкуНового();
										СтрокаПредопределенного.Имя = Данные.ИмяПредопределенныхДанных;
										
										Данные.ИмяПредопределенныхДанных = "";
										
									КонецЕсли;
									
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
						
					КонецЕсли;
					
					ПередЗагрузкойДанных(Данные);
					Данные.Записать();
					
				КонецЦикла;
				
			КонецЦикла;
			
		Исключение
			
			Если НЕ РежимОтладки Тогда
				
				ТекстЖР = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'При попытке загрузки данных из файла выгрузки произошла ошибка:
                      |%1
                      |Будет предпринята попытка заргузить данные в режиме отладки'"),
				ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
				
				ЗаписьЖурналаРегистрации(НСтр("ru = 'ВыгрузкаЗагрузкаДанных.ОшибкаЧтенияXML'", 
					ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()), УровеньЖурналаРегистрации.Ошибка, , , ТекстЖР);
				
				РежимОтладки = Истина;
				Продолжить;
				
			КонецЕсли;
			
			ВызватьИсключение;
		КонецПопытки;
		
		Прервать;
		
	КонецЦикла;
	
	Если ИспользоватьИменаПредопределенных Тогда
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	Предопределенные.Ссылка КАК Ссылка,
		|	Предопределенные.Имя КАК Имя
		|ПОМЕСТИТЬ Предопределенные
		|ИЗ
		|	&Предопределенные КАК Предопределенные";
		Запрос.УстановитьПараметр("Предопределенные", Предопределенные);
		Запрос.Выполнить();
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ТИПЗНАЧЕНИЯ(Предопределенные.Ссылка) КАК Тип
		|ИЗ
		|	Предопределенные КАК Предопределенные";
		ВыборкаТипов = Запрос.Выполнить().Выбрать();
		
		Пока ВыборкаТипов.Следующий() Цикл
			
			ИмяТаблицы = Метаданные.НайтиПоТипу(ВыборкаТипов.Тип).ПолноеИмя();
			
			Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
				
				ЭтоНеразделенныйОбъект = Истина;
				
				Если ОбщегоНазначенияПовтИсп.ЭтоРазделенныйОбъектМетаданных(ИмяТаблицы, ОбщегоНазначенияПовтИсп.РазделительОсновныхДанных()) Тогда
					ЭтоНеразделенныйОбъект = Ложь;
				КонецЕсли;
				
				Если ЭтоНеразделенныйОбъект И ОбщегоНазначенияПовтИсп.ЭтоРазделенныйОбъектМетаданных(ИмяТаблицы, ОбщегоНазначенияПовтИсп.РазделительВспомогательныхДанных()) Тогда
					ЭтоНеразделенныйОбъект = Ложь;
				КонецЕсли;
				
				Если ЭтоНеразделенныйОбъект Тогда
					Продолжить;
				КонецЕсли;
				
			КонецЕсли;
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	Таблица.Ссылка КАК Ссылка,
			|	Таблица.ИмяПредопределенныхДанных КАК Имя
			|ИЗ
			|	" + ИмяТаблицы + " КАК Таблица
			|
			|ГДЕ
			|	Таблица.Предопределенный = ИСТИНА";
			
			ВыборкаСуществующих = Запрос.Выполнить().Выбрать();
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	Предопределенные.Ссылка КАК Ссылка,
			|	Предопределенные.Имя КАК Имя
			|ИЗ
			|	Предопределенные КАК Предопределенные
			|ГДЕ
			|	ТИПЗНАЧЕНИЯ(Предопределенные.Ссылка) = &Тип";
			Запрос.УстановитьПараметр("Тип", ВыборкаТипов.Тип);
			ТаблицаЗагруженных = Запрос.Выполнить().Выгрузить();
			ТаблицаЗагруженных.Индексы.Добавить("Имя");
			
			Пока ВыборкаСуществующих.Следующий() Цикл
				
				СтрокаЗагруженной = ТаблицаЗагруженных.Найти(ВыборкаСуществующих.Имя, "Имя");
				Если СтрокаЗагруженной = Неопределено Тогда
					// В файле выгрузки нет предопределенного с таким именем
					Продолжить;
				КонецЕсли;
				
				Если СтрокаЗагруженной.Ссылка = ВыборкаСуществующих.Ссылка Тогда
					// В области уже есть предопределенный с такой же ссылкой
					Продолжить;
				КонецЕсли;
				
				Удаление = Новый УдалениеОбъекта(ВыборкаСуществующих.Ссылка);
				Удаление.ОбменДанными.Загрузка = Истина;
				Удаление.Записать();
				
				Объект = СтрокаЗагруженной.Ссылка.ПолучитьОбъект();
				Объект.ИмяПредопределенныхДанных = ВыборкаСуществующих.Имя;
				Объект.ОбменДанными.Загрузка = Истина;
				Объект.Записать();
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПрочитатьТаблицуПользователей(Знач КаталогВыгрузки)
	
	Чтение = Новый ЧтениеXML;
	Чтение.ОткрытьФайл(КаталогВыгрузки + "users.xml");
	Чтение.ПерейтиКСодержимому();
		
	Если Чтение.ТипУзла <> ТипУзлаXML.НачалоЭлемента
		ИЛИ Чтение.Имя <> "Users" Тогда
		
		ВызватьИсключение(НСтр("ru = 'Ошибка чтения XML. Неверный формат файла. Ожидается начало элемента Users.'"));
	КонецЕсли;
	
	Если НЕ Чтение.Прочитать() Тогда
		ВызватьИсключение(НСтр("ru = 'Ошибка чтения XML. Обнаружено завершение файла.'"));
	КонецЕсли;
	
	ТипInfoBaseUser = ФабрикаXDTO.Тип("http://v8.1c.ru/misc/datadump/1.0.1.1", "InfoBaseUser");
	
	ТаблицаПользователей = Новый ТаблицаЗначений;
	ТаблицаПользователей.Колонки.Добавить("Пользователь");
	ТаблицаПользователей.Колонки.Добавить("Администратор", Новый ОписаниеТипов("Булево"));
	ТаблицаПользователей.Колонки.Добавить("ПользовательXDTO");
	
	Пока Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента Цикл
		ПользовательXDTO = ФабрикаXDTO.ПрочитатьXML(Чтение, ТипInfoBaseUser);
		
		Пользователь = ОбновитьПользователяИзXDTO(ПользовательXDTO);
		
		Если НЕ ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
			Пользователь.ПоказыватьВСпискеВыбора = Истина;
		КонецЕсли;
		
		ОбработатьРолиПользователяПриЗагрузкеИзДругойМодели(Пользователь);
		
		СтрокаПользователя = ТаблицаПользователей.Добавить();
		СтрокаПользователя.Пользователь = Пользователь;
		СтрокаПользователя.Администратор = Пользователь.Роли.Содержит(Метаданные.Роли.ПолныеПрава);
		СтрокаПользователя.ПользовательXDTO = ПользовательXDTO;
	КонецЦикла;
	
	Чтение.Закрыть();
	
	Возврат ТаблицаПользователей;
	
КонецФункции

Функция СоздатьПользователейИзXML(Знач КаталогВыгрузки)
	
	ТаблицаПользователей = ПрочитатьТаблицуПользователей(КаталогВыгрузки);
	
	СоответствиеИдентификаторов = Новый Соответствие;
	
	ТаблицаПользователей.Сортировать("Администратор УБЫВ");
	Если ТаблицаПользователей.Количество() > 0 Тогда
		Если НЕ ОбщегоНазначенияПовтИсп.РазделениеВключено()
			И НЕ ТаблицаПользователей[0].Администратор Тогда
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("ru = 'В списке пользователей нет ни одного администратора. Загрузка списка пользователей не выполнена.'"));
		Иначе
				
			Для каждого СтрокаПользователя Из ТаблицаПользователей Цикл
				ПользователиСлужебный.ЗаписатьПользователяИнформационнойБазы(СтрокаПользователя.Пользователь);
				СоответствиеИдентификаторов.Вставить(СтрокаПользователя.ПользовательXDTO.UUID,
					СтрокаПользователя.Пользователь.УникальныйИдентификатор);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СоответствиеИдентификаторов;
	
КонецФункции

Функция ПолучитьТаблицуКодовОбщихДанных(Знач ИмяФайлаОбщихДанных)
	
	ИмяФайлыТаблицыКодов = ПолучитьИмяВременногоФайла("xml");
	
	ЗаписьТаблицы = Новый ЗаписьXML;
	ЗаписьТаблицы.ОткрытьФайл(ИмяФайлыТаблицыКодов);
	
	Преобразование = ОбщегоНазначенияПовтИсп.ПолучитьПреобразованиеXSLИзОбщегоМакета("ИзвлечениеКодовОбщихДанных");
	Преобразование.ПреобразоватьИзФайла(ИмяФайлаОбщихДанных, ЗаписьТаблицы);
	
	ЗаписьТаблицы.Закрыть();
	
	Чтение = Новый ЧтениеXML;
	Чтение.ОткрытьФайл(ИмяФайлыТаблицыКодов);
	Чтение.ПерейтиКСодержимому();
	
	Если Чтение.ТипУзла <> ТипУзлаXML.НачалоЭлемента
		ИЛИ Чтение.Имя <> "Data" Тогда
		
		ВызватьИсключение(НСтр("ru = 'Ошибка чтения XML. Неверный формат файла. Ожидается начало элемента Data.'"));
	КонецЕсли;
	
	Если НЕ Чтение.Прочитать() Тогда
		ВызватьИсключение(НСтр("ru = 'Ошибка чтения XML. Обнаружено завершение файла.'"));
	КонецЕсли;
	
	ТаблицаКодов = СериализаторXDTO.ПрочитатьXML(Чтение);
	
	Чтение.Закрыть();
	
	Попытка
		УдалитьФайлы(ИмяФайлыТаблицыКодов);
	Исключение
		
	КонецПопытки;
	
	Возврат ТаблицаКодов;
	
КонецФункции

Процедура ОбработатьРолиПользователяПриЗагрузкеИзДругойМодели(Пользователь)
	
	Если ОбщегоНазначенияПовтИсп.РазделениеВключено() Тогда
		// Удаление недоступных ролей.
		НедоступныеРоли = ПользователиСлужебный.НедоступныеРолиПоТипуПользователей(
			Перечисления.ТипыПользователей.ПользовательОбластиДанных);
		
		Для каждого КлючИЗначение Из НедоступныеРоли Цикл
			Роль = Метаданные.Роли.Найти(КлючИЗначение.Ключ);
			
			Если Роль <> Неопределено
			   И Пользователь.Роли.Содержит(Роль) Тогда
				
				Пользователь.Роли.Удалить(Роль);
			КонецЕсли;
		КонецЦикла;
	Иначе
		// Добавление роли АдминистраторСистемы пользователю с ролью ПолныеПрава.
		Если Пользователь.Роли.Содержит(Метаданные.Роли.ПолныеПрава) Тогда
			Пользователь.Роли.Добавить(Метаданные.Роли.АдминистраторСистемы);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчиститьИдентификаторыПользователей(КаталогВыгрузки)
	
	ТаблицаПользователей = ПрочитатьТаблицуПользователей(КаталогВыгрузки);
	
	Идентификаторы = Новый Массив;
	Для каждого СтрокаПользователя Из ТаблицаПользователей Цикл
		Идентификаторы.Добавить(СтрокаПользователя.ПользовательXDTO.UUID);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Ссылка,
	|	Пользователи.ИдентификаторПользователяИБ КАК ИдентификаторПользователяИБ
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.ИдентификаторПользователяИБ В(&Идентификаторы)";
	Запрос.УстановитьПараметр("Идентификаторы", Идентификаторы);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		ПользовательОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ПользовательОбъект.ОбменДанными.Загрузка = Истина;
		ПользовательОбъект.ИдентификаторПользователяСервиса = Неопределено;
		ПользовательОбъект.ИдентификаторПользователяИБ = Неопределено;
		ПользовательОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьПользователейПослеЗагрузкиИзДругойМодели(Знач СоответствиеИдентификаторов)
	
	СтарыеИдентификаторы = Новый Массив;
	Для каждого КлючИЗначение Из СоответствиеИдентификаторов Цикл
		СтарыеИдентификаторы.Добавить(КлючИЗначение.Ключ);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Пользователи.Ссылка КАК Ссылка,
	|	Пользователи.ИдентификаторПользователяИБ КАК ИдентификаторПользователяИБ
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.ИдентификаторПользователяИБ В(&СтарыеИдентификаторы)";
	Запрос.УстановитьПараметр("СтарыеИдентификаторы", СтарыеИдентификаторы);
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		ПользовательОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ПользовательОбъект.ОбменДанными.Загрузка = Истина;
		ПользовательОбъект.ИдентификаторПользователяСервиса = Неопределено;
		ПользовательОбъект.ИдентификаторПользователяИБ = СоответствиеИдентификаторов.Получить(Выборка.ИдентификаторПользователяИБ);
		ПользовательОбъект.Записать();
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписатьСобытиеВЖурнал(Знач Событие,
	Знач Размер,
	Знач Длительность)
	
	ДанныеСобытия = Новый Структура;
	ДанныеСобытия.Вставить("Размер", Размер);
	ДанныеСобытия.Вставить("Длительность", Длительность);
	
	ЗаписьЖурналаРегистрации(
		НСтр("ru = 'Выгрузка / загрузка областей'", 
		ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()) + "." + Событие,
		УровеньЖурналаРегистрации.Информация,
		,
		,
		ОбщегоНазначения.ЗначениеВСтрокуXML(ДанныеСобытия));
		
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Запись / чтение пользователей ИБ в / из XML

Функция ЗаписатьПользователяВXDTO(Знач Пользователь, Знач СохранятьПароль = Ложь, Знач СохранятьРазделение = Ложь)
	
	ТипInfoBaseUser = ФабрикаXDTO.Тип("http://v8.1c.ru/misc/datadump/1.0.1.1", "InfoBaseUser");
	ТипUserRoles = ФабрикаXDTO.Тип("http://v8.1c.ru/misc/datadump/1.0.1.1", "UserRoles");
	
	ПользовательXDTO = ФабрикаXDTO.Создать(ТипInfoBaseUser);
	ПользовательXDTO.OSAuthentication = Пользователь.АутентификацияОС;
	ПользовательXDTO.StandardAuthentication = Пользователь.АутентификацияСтандартная;
	ПользовательXDTO.CannotChangePassword = Пользователь.ЗапрещеноИзменятьПароль;
	ПользовательXDTO.Name = Пользователь.Имя;
	Если Пользователь.ОсновнойИнтерфейс <> Неопределено Тогда
		ПользовательXDTO.DefaultInterface = Пользователь.ОсновнойИнтерфейс.Имя;
	Иначе
		ПользовательXDTO.DefaultInterface = "";
	КонецЕсли;
	ПользовательXDTO.PasswordIsSet = Пользователь.ПарольУстановлен;
	ПользовательXDTO.ShowInList = Пользователь.ПоказыватьВСпискеВыбора;
	ПользовательXDTO.FullName = Пользователь.ПолноеИмя;
	ПользовательXDTO.OSUser = Пользователь.ПользовательОС;
	Если СохранятьРазделение Тогда
		ПользовательXDTO.DataSeparation = СериализаторXDTO.ЗаписатьXDTO(Пользователь.РазделениеДанных);
	Иначе
		ПользовательXDTO.DataSeparation = Неопределено;
	КонецЕсли;
	ПользовательXDTO.RunMode = РежимЗапускаСтрокой(Пользователь.РежимЗапуска);
	ПользовательXDTO.Roles = ФабрикаXDTO.Создать(ТипUserRoles);
	Для каждого Роль Из Пользователь.Роли Цикл
		ПользовательXDTO.Roles.Role.Добавить(Роль.Имя);
	КонецЦикла;
	Если СохранятьПароль Тогда
		ПользовательXDTO.StoredPasswordValue = Пользователь.СохраняемоеЗначениеПароля;
	Иначе
		ПользовательXDTO.StoredPasswordValue = Неопределено;
	КонецЕсли;
	ПользовательXDTO.UUID = Пользователь.УникальныйИдентификатор;
	Если Пользователь.Язык <> Неопределено Тогда
		ПользовательXDTO.Language = Пользователь.Язык.Имя;
	Иначе
		ПользовательXDTO.Language = "";
	КонецЕсли;
	
	Возврат ПользовательXDTO;
	
КонецФункции

Функция ОбновитьПользователяИзXDTO(Знач ПользовательXDTO, Знач ВосстанавливатьПароль = Ложь, Знач ВосстанавливатьРазделение = Ложь)
	
	Пользователь = ПользователиИнформационнойБазы.НайтиПоУникальномуИдентификатору(ПользовательXDTO.UUID);
	Если Пользователь = Неопределено Тогда
		Пользователь = ПользователиИнформационнойБазы.СоздатьПользователя();
	КонецЕсли;
	
	Пользователь.АутентификацияОС = ПользовательXDTO.OSAuthentication;
	Пользователь.АутентификацияСтандартная = ПользовательXDTO.StandardAuthentication;
	Пользователь.ЗапрещеноИзменятьПароль = ПользовательXDTO.CannotChangePassword;
	Пользователь.Имя = ПользовательXDTO.Name;
	Если ПустаяСтрока(ПользовательXDTO.DefaultInterface) Тогда
		Пользователь.ОсновнойИнтерфейс = Неопределено;
	Иначе
		Пользователь.ОсновнойИнтерфейс = Метаданные.Интерфейсы.Найти(ПользовательXDTO.DefaultInterface);
	КонецЕсли;
	Пользователь.ПоказыватьВСпискеВыбора = ПользовательXDTO.ShowInList;
	Пользователь.ПолноеИмя = ПользовательXDTO.FullName;
	Пользователь.ПользовательОС = ПользовательXDTO.OSUser;
	Если ВосстанавливатьРазделение Тогда
		Если ПользовательXDTO.DataSeparation = Неопределено Тогда
			Пользователь.РазделениеДанных = Новый Структура;
		Иначе
			Пользователь.РазделениеДанных = СериализаторXDTO.ПрочитатьXDTO(ПользовательXDTO.DataSeparation);
		КонецЕсли;
	Иначе
		Пользователь.РазделениеДанных = Новый Структура;
	КонецЕсли;
	Пользователь.РежимЗапуска = РежимЗапускаКлиентскогоПриложения[ПользовательXDTO.RunMode];
	Пользователь.Роли.Очистить();
	Для каждого ИмяРоли Из ПользовательXDTO.Roles.Role Цикл
		Роль = Метаданные.Роли.Найти(ИмяРоли);
		Если Роль <> Неопределено Тогда
			Пользователь.Роли.Добавить(Роль);
		КонецЕсли;
	КонецЦикла;
	Если ВосстанавливатьПароль Тогда
		Пользователь.СохраняемоеЗначениеПароля = ПользовательXDTO.StoredPasswordValue;
	Иначе
		Пользователь.СохраняемоеЗначениеПароля = "";
	КонецЕсли;
	Если ПустаяСтрока(ПользовательXDTO.Language) Тогда
		Пользователь.Язык = Неопределено;
	Иначе
		Пользователь.Язык = Метаданные.Языки[ПользовательXDTO.Language];
	КонецЕсли;
	
	Возврат Пользователь;
	
КонецФункции

Функция РежимЗапускаСтрокой(Знач РежимЗапуска)
	
	Если РежимЗапуска = Неопределено Тогда
		Возврат "";
	ИначеЕсли РежимЗапуска = РежимЗапускаКлиентскогоПриложения.Авто Тогда
		Возврат "Auto";
	ИначеЕсли РежимЗапуска = РежимЗапускаКлиентскогоПриложения.ОбычноеПриложение Тогда
		Возврат "OrdinaryApplication";
	ИначеЕсли РежимЗапуска = РежимЗапускаКлиентскогоПриложения.УправляемоеПриложение Тогда
		Возврат "ManagedApplication";
	Иначе
		ШаблонСообщения = НСтр("ru = 'Неизвестный режим запуска клиентского приложения %1'");
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, РежимЗапуска);
		ВызватьИсключение(ТекстСообщения);
	КонецЕсли;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с данными, для хранения которых в локальном режиме и модели сервиса
//  используются разные объекты метаданных.

// Только для внутреннего использования.
//
// ИсходныйОбъект:
//  - Для констант - МенеджерЗначения;
//  - Для значений ссылочного типа - Объект;
//  - Для регистров - НаборЗаписей;
//
Функция ПодменаОбъектаМетаданныхПриВыгрузкеЗагрузкеДанных(Знач ИсходныйОбъект, Знач ОписаниеИсходногоОбъектаМетаданных, Знач ОписаниеЭмулируемогоОбъектаМетаданных)
	
	Если РаботаВМоделиСервиса.ЭтоПолноеИмяКонстанты(ОписаниеИсходногоОбъектаМетаданных.ПолноеИмя) Тогда
		
		ЗначениеКонстанты = ИсходныйОбъект.Значение;
		МенеджерЗначения = Константы[ОписаниеЭмулируемогоОбъектаМетаданных.Имя].СоздатьМенеджерЗначения();
		МенеджерЗначения.Значение = ЗначениеКонстанты;
		Возврат МенеджерЗначения;
		
	ИначеЕсли РаботаВМоделиСервиса.ЭтоПолноеИмяОбъектаСсылочногоТипа(ОписаниеИсходногоОбъектаМетаданных.ПолноеИмя) Тогда
		
		ИсключенияЗаполненияСвойств = Новый Массив();
		Если РаботаВМоделиСервиса.ЭтоПолноеИмяСправочника(ОписаниеЭмулируемогоОбъектаМетаданных.ПолноеИмя) Тогда
			ЭмулируемыйОбъектМетаданных = Метаданные.Справочники.Найти(ОписаниеЭмулируемогоОбъектаМетаданных.Имя);
			Если ЭмулируемыйОбъектМетаданных.Владельцы.Количество() = 0 Тогда
				ИсключенияЗаполненияСвойств.Добавить("Владелец");
			КонецЕсли;
			Если ЭмулируемыйОбъектМетаданных.Иерархический Тогда
				ИсключенияЗаполненияСвойств.Добавить("Родитель");
			КонецЕсли;
		КонецЕсли;
		Если РаботаВМоделиСервиса.ЭтоПолноеИмяПланаВидовХарактеристик(ОписаниеЭмулируемогоОбъектаМетаданных.ПолноеИмя) Тогда
			ЭмулируемыйОбъектМетаданных = Метаданные.ПланыВидовХарактеристик.Найти(ОписаниеЭмулируемогоОбъектаМетаданных.Имя);
			Если Не ЭмулируемыйОбъектМетаданных.Иерархический Тогда
				ИсключенияЗаполненияСвойств.Добавить("Родитель");
			КонецЕсли;
		КонецЕсли;
		
		Менеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ОписаниеЭмулируемогоОбъектаМетаданных.ПолноеИмя);
		Если РаботаВМоделиСервиса.ЭтоПолноеИмяСправочника(ОписаниеЭмулируемогоОбъектаМетаданных.ПолноеИмя) ИЛИ
				РаботаВМоделиСервиса.ЭтоПолноеИмяПланаВидовХарактеристик(ОписаниеЭмулируемогоОбъектаМетаданных.ПолноеИмя)Тогда
			
			Если ИсходныйОбъект.ЭтоГруппа Тогда
				ПодменаОбъекта = Менеджер.СоздатьГруппу();
			Иначе
				ПодменаОбъекта = Менеджер.СоздатьЭлемент();
			КонецЕсли;
			
		ИначеЕсли РаботаВМоделиСервиса.ЭтоПолноеИмяДокумента(ОписаниеЭмулируемогоОбъектаМетаданных.ПолноеИмя) Тогда
			
			ПодменаОбъекта = Менеджер.СоздатьДокумент();
			
		ИначеЕсли РаботаВМоделиСервиса.ЭтоПолноеИмяБизнесПроцесса(ОписаниеЭмулируемогоОбъектаМетаданных.ПолноеИмя) Тогда
			
			ПодменаОбъекта = Менеджер.СоздатьБизнесПроцесс();
			
		ИначеЕсли РаботаВМоделиСервиса.ЭтоПолноеИмяЗадачи(ОписаниеЭмулируемогоОбъектаМетаданных.ПолноеИмя) Тогда
			
			ПодменаОбъекта = Менеджер.СоздатьЗадачу();
			
		ИначеЕсли РаботаВМоделиСервиса.ЭтоПолноеИмяПланаСчетов(ОписаниеЭмулируемогоОбъектаМетаданных.ПолноеИмя) Тогда
			
			ПодменаОбъекта = Менеджер.СоздатьСчет();
			
		ИначеЕсли РаботаВМоделиСервиса.ЭтоПолноеИмяПланаОбмена(ОписаниеЭмулируемогоОбъектаМетаданных.ПолноеИмя) Тогда
			
			ПодменаОбъекта = Менеджер.СоздатьУзел();
			
		ИначеЕсли РаботаВМоделиСервиса.ЭтоПолноеИмяПланаВидовРасчета(ОписаниеЭмулируемогоОбъектаМетаданных.ПолноеИмя) Тогда
			
			ПодменаОбъекта = Менеджер.СоздатьВидРасчета();
			
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(
			ПодменаОбъекта, ИсходныйОбъект, ,
			СтроковыеФункцииКлиентСервер.ПолучитьСтрокуИзМассиваПодстрок(
				ИсключенияЗаполненияСвойств));
		
		ИсходныйОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ОписаниеИсходногоОбъектаМетаданных.ПолноеИмя);
		ЭмулируемыйОбъектМетаданных = ПодменаОбъекта.Метаданные();
		
		Для Каждого ПодменяемаяТабличнаяЧасть Из ЭмулируемыйОбъектМетаданных.ТабличныеЧасти Цикл
			
			ИсходнаяТабличнаяЧасть = ИсходныйОбъектМетаданных.ТабличныеЧасти.Найти(ПодменяемаяТабличнаяЧасть.Имя);
			Если ИсходнаяТабличнаяЧасть <> Неопределено Тогда
				
				ПодменаОбъекта[ПодменяемаяТабличнаяЧасть.Имя].Загрузить(
					ИсходныйОбъект[ПодменяемаяТабличнаяЧасть.Имя].Выгрузить());
				
			КонецЕсли;
			
		КонецЦикла;
		
		Возврат ПодменаОбъекта;
		
	ИначеЕсли РаботаВМоделиСервиса.ЭтоПолноеИмяРегистра(ОписаниеИсходногоОбъектаМетаданных.ПолноеИмя)
			ИЛИ РаботаВМоделиСервиса.ЭтоПолноеИмяПоследовательности(ОписаниеИсходногоОбъектаМетаданных.ПолноеИмя)
			ИЛИ РаботаВМоделиСервиса.ЭтоПолноеИмяПерерасчета(ОписаниеИсходногоОбъектаМетаданных.ПолноеИмя) Тогда
		
		Менеджер = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ОписаниеЭмулируемогоОбъектаМетаданных.ПолноеИмя);
		ПодменяемыйНаборЗаписей = Менеджер.СоздатьНаборЗаписей();
		
		ПараметрыВыборки = РаботаВМоделиСервиса.ПараметрыВыборки(ОписаниеЭмулируемогоОбъектаМетаданных.ПолноеИмя);
		ИмяПоляРегистратор = ПараметрыВыборки.ИмяПоляРегистратор;
		ОтборПоРегистратору = ИсходныйОбъект.Отбор.Найти(ИмяПоляРегистратор);
		Если ОтборПоРегистратору <> Неопределено Тогда
			ПодменяемыйНаборЗаписей.Отбор[ИмяПоляРегистратор].Установить(ОтборПоРегистратору.Значение);
		КонецЕсли;
		
		ПодменяемыйНаборЗаписей.Загрузить(ИсходныйОбъект.Выгрузить());
		
		Возврат ПодменяемыйНаборЗаписей;
		
	Иначе
		
		ВызватьИсключение НСтр("ru = 'Неожиданный объект метаданных!'");
		
	КонецЕсли;
	
КонецФункции

// Возвращает соответствие объектов метаданных, используемых в локальном режиме и в модели сервиса.
//
// Возвращаемое значение: ФиксированноеСоответствие:
//  Ключ - ОбъектМетаданных, объект метаданных, используемый в модели сервиса.
//  Значение - ОбъектМетаданных, объект метаданных, используемый в локальном режиме,
//
Функция СоответствиеОбъектовМетаданныхВЛокальномРежимеИМоделиСервиса()
	
	Результат = Новый Соответствие();
	
	ТаблицаСоответствия = ЗаполнитьСоответствиеОбъектовМетаданныхВЛокальномРежимеИМоделиСервиса();
	Для Каждого ЭлементТаблицыСоответствия Из ТаблицаСоответствия Цикл
		Результат.Вставить(ЭлементТаблицыСоответствия.ОбъектВМоделиСервиса, ЭлементТаблицыСоответствия.ОбъектВЛокальномРежиме);
	КонецЦикла;
	
	Возврат Новый ФиксированноеСоответствие(Результат);
	
КонецФункции

// Возвращает таблицу соответствия объектов метаданных, используемых в локальном режиме и в модели сервиса.
//
// Возвращаемое значение: ТаблицаЗначений, колонки:
//  ОбъектВЛокальномРежиме - ОбъектМетаданных, объект метаданных, используемый в локальном режиме,
//  ОбъектВМоделиСервиса - ОбъектМетаданных, объект метаданных, используемый в модели сервиса.
//
Функция ЗаполнитьСоответствиеОбъектовМетаданныхВЛокальномРежимеИМоделиСервиса()
	
	Результат = Новый ТаблицаЗначений();
	Результат.Колонки.Добавить("ОбъектВЛокальномРежиме", Новый ОписаниеТипов("ОбъектМетаданных"));
	Результат.Колонки.Добавить("ОбъектВМоделиСервиса", Новый ОписаниеТипов("ОбъектМетаданных"));
	
	ОбработчикиСобытия = ОбщегоНазначения.ОбработчикиСлужебногоСобытия(
		"СтандартныеПодсистемы.РаботаВМоделиСервиса.ВыгрузкаЗагрузкаДанных\ПриЗаполненииСоответствияОбъектовМетаданныхВЛокальномРежимеИМоделиСервиса");
	
	Для каждого Обработчик Из ОбработчикиСобытия Цикл
		Обработчик.Модуль.ПриЗаполненииСоответствияОбъектовМетаданныхВЛокальномРежимеИМоделиСервиса(Результат);
	КонецЦикла;
	
	ВыгрузкаЗагрузкаДанныхПереопределяемый.ЗаполнитьСоответствиеОбъектовМетаданныхВЛокальномРежимеИМоделиСервиса(Результат);
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Работа с метаданными, которые не переносятся между моделями при выгрузке / загрузке данных.

// Возвращает объекты метаданных, которые не должны переноситься между моделями при
//  выгрузке / загрузке данных.
//
// Возвращаемое значение: Массив(ОбъектМетаданных).
//
Функция ПолучитьОбъектыМетаданныхИсключаемыеИзВыгрузкиЗагрузки()
	
	Результат = Новый Массив();
	
	ОбработчикиСобытия = ОбщегоНазначения.ОбработчикиСлужебногоСобытия(
		"СтандартныеПодсистемы.РаботаВМоделиСервиса.ВыгрузкаЗагрузкаДанных\ПриОпределенииОбъектовМетаданныхИсключаемыхИзВыгрузкиЗагрузки");
	
	Для каждого Обработчик Из ОбработчикиСобытия Цикл
		Обработчик.Модуль.ПриОпределенииОбъектовМетаданныхИсключаемыхИзВыгрузкиЗагрузки(Результат);
	КонецЦикла;
	
	ВыгрузкаЗагрузкаДанныхПереопределяемый.ЗаполнитьОбъектыМетаданныхИсключаемыеИзВыгрузкиЗагрузки(Результат);
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Обработчики условных вызовов в другие подсистемы

// Обработчик, вызываемый для данных перед их записью в файл при выгрузке областей.
//
// Параметры:
// ЭлементДанных - КонстантаМенеджер.<Имя>; СправочникОбъект.<Имя>; Регистр<Вид>НаборЗаписей.<Имя>.
//
Процедура ПередВыгрузкойДанных(ЭлементДанных)
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСФайлами") Тогда
		ОтправкаЭлемента = ОтправкаЭлементаДанных.Авто;
		МодульРаботаСФайламиСлужебный = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("РаботаСФайламиСлужебный");
		МодульРаботаСФайламиСлужебный.ПриОтправкеФайла(ЭлементДанных, ОтправкаЭлемента);
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.ПрисоединенныеФайлы") Тогда
		ОтправкаЭлемента = ОтправкаЭлементаДанных.Авто;
		МодульПрисоединенныеФайлыСлужебный = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ПрисоединенныеФайлыСлужебный");
		МодульПрисоединенныеФайлыСлужебный.ПриОтправкеФайла(ЭлементДанных, ОтправкаЭлемента);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик, вызываемый для считанных из файла данных перед их записью в ИБ при загрузке областей.
//
// Параметры:
// ЭлементДанных - КонстантаМенеджер.<Имя>; СправочникОбъект.<Имя>; Регистр<Вид>НаборЗаписей.<Имя>.
//
Процедура ПередЗагрузкойДанных(ЭлементДанных)
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСФайлами") Тогда
		ПолучениеЭлемента = ПолучениеЭлементаДанных.Авто;
		МодульРаботаСФайламиСлужебный = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("РаботаСФайламиСлужебный");
		МодульРаботаСФайламиСлужебный.ПриПолученииФайла(ЭлементДанных, ПолучениеЭлемента);
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.ПрисоединенныеФайлы") Тогда
		ПолучениеЭлемента = ПолучениеЭлементаДанных.Авто;
		МодульПрисоединенныеФайлыСлужебный = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("ПрисоединенныеФайлыСлужебный");
		МодульПрисоединенныеФайлыСлужебный.ПриПолученииФайла(ЭлементДанных, ПолучениеЭлемента);
	КонецЕсли;
	
КонецПроцедуры
