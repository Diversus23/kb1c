// Описание принятых условностей
//
// Гиперссылки
// Все внутренние ссылки должны выглядеть как kb://api/Команда?[Параметры],
// где: Параметры - перечисление через амперсанд имен и значений параметров
// Пример: kb://api/page?name=tag&id=xxx&category=xxx
// Значение параметров при этом должны быть закодированы в кодировке URL
// Подробное описание параметров команд есть в процедурах КонструкторСсылки_
//
// Команды:
//	page - получить HTML страницу по параметрам
//	create - создать объект базы знаний
//	edit - изменить объект базы знаний
//	subscribe - подписаться (статья, комментарий)
//  delete - удалить объект базы знаний
//	rating - оценить объект базы знаний (статьи)
//	refresh - обновить часть HTML страницы

// Формирует адрес ссылки на основании имени команды и параметров
//
// Параметры
//	ИмяКоманды - Строка
//	Параметры - Структура
//		Ключ - Строка. Имя параметра
//		Значение - Строка. Значение параметра (закодирование в кодировке URL)
//
// Возвращаемое значение
//	Строка
//
Функция АдресСсылкиУниверсальный(ИмяКоманды, Параметры) Экспорт
	БазаЗнанийВызовСервера.КодироватьПараметрыСсылки(Параметры);
	
	ДопПараметры = "";
	Для Каждого КлючИЗначение Из Параметры Цикл
		ДопПараметры = ДопПараметры + ?(ПустаяСтрока(ДопПараметры), "", "&") + 
			КлючИЗначение.Ключ + "=" + КлючИЗначение.Значение;
	КонецЦикла;
	
	Возврат "kb://api/" + ИмяКоманды + "?" + ДопПараметры;
КонецФункции

// Выполняет разбор адреса ссылки в структуру.
// Значения параметров очищаются от одинарных кавычек по краям (')
//
// Параметры
//	АдресСсылки - Строка. kb://...
//
// Возвращаемое значение
//	Структура. Ключи:
//		Команда - Строка
//		Параметры - Структура. Ключ - Имя параметра.
//
Функция РазобратьАдресСсылки(знач АдресСсылки) Экспорт
	
	АдресСсылки = СокрЛП(АдресСсылки);
	
	ОстатокСтроки		= АдресСсылки;
	ПозицияРазделителя	= Найти(ОстатокСтроки, "/");
	Пока ПозицияРазделителя > 0 Цикл
		ОстатокСтроки		= Сред(ОстатокСтроки, ПозицияРазделителя + 1);
		ПозицияРазделителя	= Найти(ОстатокСтроки, "/");
	КонецЦикла;
	
	ЗначениеСсылки	= СокрЛП(ОстатокСтроки);
	
	РазделительКоманды	= Найти(ЗначениеСсылки, "?");
	ИмяКоманды 			= Лев(ЗначениеСсылки, РазделительКоманды - 1);
	ПараметрыКоманды	= Сред(ЗначениеСсылки, РазделительКоманды + 1);
	
	СтруктураАдреса	= Новый Структура;
	СтруктураАдреса.Вставить("Ссылка"	, АдресСсылки);
	СтруктураАдреса.Вставить("Команда"	, ИмяКоманды);
	СтруктураАдреса.Вставить("Параметры", Новый Структура);
	
	ДанныеПараметров = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПараметрыКоманды, "&");
	Для Каждого Параметр Из ДанныеПараметров Цикл
		Разделитель			= Найти(Параметр, "=");
		ИмяПараметра		= Лев(Параметр, Разделитель - 1);
		ЗначениеПараметра	= Сред(Параметр, Разделитель + 1);
		
		СтруктураАдреса.Параметры.Вставить(ИмяПараметра, ЗначениеПараметра);
	КонецЦикла;
	
	БазаЗнанийВызовСервера.РаскодироватьПараметрыСсылки(СтруктураАдреса.Параметры);
	
	Возврат СтруктураАдреса;
	
КонецФункции

// Формирует адрес ссылки команды page
//
// Параметры
//	ИмяСтраницы - Строка. Допустимые значения:
//		home - главная страница
//		article - страница статьи
//			id - идентификатор статьи
//		category - страница категории
//			id - идентификатор категории
//		tag - страница по ключевому слову
//			id - идентификатор ключевого слова
//			category - идентификатор категории
//		featured_articles - рекомендуемые статьи
//			pagenum - номер страницы
//		recently_added - недавно добавленные статьи
//			pagenum - номер страницы
//		most_popular - популярные статьи
//			pagenum - номер страницы
//		top_rated - самые рейтинговые статьи
//			pagenum - номер страницы
//		user - страница профиля пользователя
//			id - идентификатор пользователя
//		news - страница новостной ленты пользователя
//			id - идентификатор пользователя
//		news_item - страница новости
//			id - идентификатор новости
//
// Возвращаемое значение
//	Строка
//
Функция КонструкторСсылки_page(знач ИмяСтраницы, знач Параметры = Неопределено) Экспорт
	Если НЕ ТипЗнч(Параметры) = Тип("Структура") Тогда
		Параметры = Новый Структура;
	КонецЕсли;
	
	Параметры.Вставить("name", ИмяСтраницы);
	
	Возврат АдресСсылкиУниверсальный("page", Параметры);
КонецФункции

// Формирует адрес ссылки команды create
//
// Параметры
//	ИмяСтраницы - Строка. Допустимые значения:
//		article - создать статью
//			category - категория статьи
//		category - создать категорию
//			parent - категория родитель
//		user - создать пользователя
//		comment - создать комментарий
//			id - идентификатор комментария для ответа
//			article - статья владелец комментария
//			user - автор комментария
//
// Возвращаемое значение
//	Строка
//
Функция КонструкторСсылки_create(знач ИмяСтраницы, знач Параметры = Неопределено) Экспорт
	Если НЕ ТипЗнч(Параметры) = Тип("Структура") Тогда
		Параметры = Новый Структура;
	КонецЕсли;
	
	Параметры.Вставить("name", ИмяСтраницы);
	
	Возврат АдресСсылкиУниверсальный("create", Параметры);
КонецФункции

// Формирует адрес ссылки команды edit
//
// Параметры
//	ИмяСтраницы - Строка. Допустимые значения:
//		article - редактирование статьи
//			id - идентификатор статьи
//		category - редактирование категории
//			id - идентификатор категории
//		user - редактирование профиля пользователя
//			id - идентификатор пользователя
//		comment - редактирование комментария
//			id - идентификатор комментария
//
// Возвращаемое значение
//	Строка
//
Функция КонструкторСсылки_edit(знач ИмяСтраницы, знач Параметры = Неопределено) Экспорт
	Если НЕ ТипЗнч(Параметры) = Тип("Структура") Тогда
		Параметры = Новый Структура;
	КонецЕсли;
	
	Параметры.Вставить("name", ИмяСтраницы);

	Возврат АдресСсылкиУниверсальный("edit", Параметры);
КонецФункции

// Формирует адрес ссылки команды delete
//
// Параметры
//	ИмяСтраницы - Строка. Допустимые значения:
//		article - удалить статью
//			id - идентификатор статьи
//		category - удалить категорий
//			id - идентификатор категории
//		user - удалить профиль пользователя
//			id - идентификатор пользователя
//		comment - удалить комментарий
//			id - идентификатор комментария
//
// Возвращаемое значение
//	Строка
//
Функция КонструкторСсылки_delete(знач ИмяСтраницы, знач Параметры = Неопределено) Экспорт
	Если НЕ ТипЗнч(Параметры) = Тип("Структура") Тогда
		Параметры = Новый Структура;
	КонецЕсли;
	
	Параметры.Вставить("name", ИмяСтраницы);

	Возврат АдресСсылкиУниверсальный("delete", Параметры);
КонецФункции

// Формирует адрес ссылки команды rating
//
// Параметры
//	ИмяСтраницы - Строка. Допустимые значения:
//		article - оценить статью
//			id - идентификатор статьи
//		comment - оценить комментарий
//			id - идентификатор комментария
//
// Возвращаемое значение
//	Строка
//
Функция КонструкторСсылки_rating(знач ИмяСтраницы, знач Параметры = Неопределено) Экспорт
	Если НЕ ТипЗнч(Параметры) = Тип("Структура") Тогда
		Параметры = Новый Структура;
	КонецЕсли;
	
	Параметры.Вставить("name", ИмяСтраницы);

	Возврат АдресСсылкиУниверсальный("rating", Параметры);
КонецФункции

// Формирует адрес ссылки команды subscribe
//
// Параметры
//	ИмяСтраницы - Строка. Допустимые значения:
//		article - подписаться на статью
//			id - идентификатор статьи
//		category - подписаться на статью
//			id - идентификатор категории
//
// Возвращаемое значение
//	Строка
//
Функция КонструкторСсылки_subscribe(знач ИмяСтраницы, знач Параметры = Неопределено) Экспорт
	Если НЕ ТипЗнч(Параметры) = Тип("Структура") Тогда
		Параметры = Новый Структура;
	КонецЕсли;
	
	Параметры.Вставить("name", ИмяСтраницы);

	Возврат АдресСсылкиУниверсальный("subscribe", Параметры);
КонецФункции

// Формирует адрес ссылки команды refresh
//
// Параметры
//	ИмяСтраницы - Строка. Допустимые значения:
//		comments - обновить комментарии
//			article - идентификатор статьи владельца
//
// Возвращаемое значение
//	Строка
//
Функция КонструкторСсылки_refresh(знач ИмяСтраницы, знач Параметры = Неопределено) Экспорт
	Если НЕ ТипЗнч(Параметры) = Тип("Структура") Тогда
		Параметры = Новый Структура;
	КонецЕсли;
	
	Параметры.Вставить("name", ИмяСтраницы);

	Возврат АдресСсылкиУниверсальный("refresh", Параметры);
КонецФункции

// Формирует адрес ссылки команды search
//
// Параметры
//	ТипПоиска - Строка. Допустимые значения:
//		text - поиск по тексту
//			text - строка поиска
//
// Возвращаемое значение
//	Строка
//
Функция КонструкторСсылки_search(знач ТипПоиска, знач Параметры = Неопределено) Экспорт
	Если НЕ ТипЗнч(Параметры) = Тип("Структура") Тогда
		Параметры = Новый Структура;
	КонецЕсли;
	
	Параметры.Вставить("type", ТипПоиска);

	Возврат АдресСсылкиУниверсальный("search", Параметры);
КонецФункции

