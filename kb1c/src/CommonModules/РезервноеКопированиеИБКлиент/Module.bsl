////////////////////////////////////////////////////////////////////////////////
// Подсистема "Резервное копирование ИБ".
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Процедура проверяет необходимость проведения резервного копирования
// или показа пользователю необходимого информационного сообщения.
Процедура ПриНачалеРаботыСистемы(Знач ОбрабатыватьПараметрыЗапуска = Ложь) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЭтоLinuxКлиент() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыРаботы = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиентаПриЗапуске();
	Если ПараметрыРаботы.РазделениеВключено Тогда
		Возврат;
	КонецЕсли;
	
	ФиксированныеПараметрыРезервногоКопированияИБ = Неопределено;
	Если НЕ ПараметрыРаботы.Свойство("РезервноеКопированиеИБ", ФиксированныеПараметрыРезервногоКопированияИБ) Тогда
		Возврат;
	КонецЕсли;
	Если ТипЗнч(ФиксированныеПараметрыРезервногоКопированияИБ) <> Тип("ФиксированнаяСтруктура") Тогда
		Возврат;
	КонецЕсли;
	
	// Заполнение глобальных переменных.
	ЗаполнитьЗначенияГлобальныхПеременных(ФиксированныеПараметрыРезервногоКопированияИБ);
	
	// Подключение глобального обработчика ожидания.
	ПодключитьОбработчикОжидания("ОбработчикДействийРезервногоКопирования", 60);
	
	// Интерактивные действия, выполняемые при запуске.
	ВариантОповещения = ФиксированныеПараметрыРезервногоКопированияИБ.ПараметрОповещения;
	Если ВариантОповещения = "Просрочено" Или ВариантОповещения = "Напомнить" Или ВариантОповещения = "ЕщеНеНастроено" Тогда
		ОповеститьПользователяОРезервномКопировании(ВариантОповещения);
	КонецЕсли;
	
	ПроверитьРезервноеКопированиеИБ(ФиксированныеПараметрыРезервногоКопированияИБ);
	
	Если ФиксированныеПараметрыРезервногоКопированияИБ.ПроведеноВосстановление Тогда
		ТекстОповещения = НСтр("ru = 'Восстановление данных проведено успешно.'");
		ПоказатьОповещениеПользователя(НСтр("ru = 'Данные восстановлены.'"), , ТекстОповещения);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Заполнение глобальных переменных.
Процедура ЗаполнитьЗначенияГлобальныхПеременных(ФиксированныеПараметрыРезервногоКопированияИБ) Экспорт
	
	ПараметрыРезервногоКопированияИБ = Новый Структура("ПроцессВыполняется, МинимальнаяДатаСледующегоАвтоматическогоРезервногоКопирования, ДатаПоследнегоРезервногоКопирования, ОтложенноеРезервноеКопирование, ПараметрОповещения");
	ЗаполнитьЗначенияСвойств(ПараметрыРезервногоКопированияИБ, ФиксированныеПараметрыРезервногоКопированияИБ);
	ПараметрыРезервногоКопированияИБ.Вставить("РасписаниеЗначение", ОбщегоНазначенияКлиентСервер.СтруктураВРасписание(ФиксированныеПараметрыРезервногоКопированияИБ.РасписаниеКопирования));
	
	ОповещатьОРезервномКопированииПриЗавершенииСеанса = Ложь;
	ДатаОтложенногоРезервногоКопирования = Дата('00010101');
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики служебных событий подсистем БСП

// Доопределяет список предупреждений пользователю перед завершением работы системы.
//
// Параметры:
//  Предупреждения - Массив, в который можно добавить элементы типа Структура с полями:
//    ТекстФлажка      - Строка - текст флажка.
//    ПоясняющийТекст  - Строка - текст, выводимый в форме сверху
//                       управляющего элемента (флажок или гиперссылка).
//    ТекстГиперссылки - Строка - текст гиперссылки.
//    ДействиеПриУстановленномФлажке - Структура с полями:
//      Форма          - путь к открываемой форме.
//      ПараметрыФормы - произвольная структура параметров формы Форма. 
//    ДействиеПриНажатииГиперссылки - Структура с полями:
//      Форма          - Строка    - путь к форме, которая должна открываться по нажатию на гиперссылку.
//      ПараметрыФормы - Структура - произвольная структура параметров для вышеописанной формы.
//      ПрикладнаяФормаПредупреждения - Строка - путь к форме, которая должна открываться сразу
//                                      вместо универсальной формы в случае, когда в списке 
//                                      предупреждений оказывается только одно данное предупреждение.
//      ПараметрыПрикладнойФормыПредупреждения - Структура - произвольная структура
//                                               параметров для вышеописанной формы.
//
Процедура ПриПолученииСпискаПредупрежденийЗавершенияРаботы(Предупреждения) Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЭтоLinuxКлиент() Тогда
		Возврат;
	КонецЕсли;
	
	ПриЗавершенииРаботыСистемы(Предупреждения);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Экспортные служебные процедуры и функции

// Проверяет необходимость запуска автоматического резервного копирования
// в процессе работы пользователя, а также повторного оповещения после игнорировании первоначального.
//
Процедура ОбработчикОжиданияЗапуска() Экспорт
	
	Если ОбщегоНазначенияКлиентСервер.ЭтоLinuxКлиент() Тогда
		Возврат;
	КонецЕсли;
	
	Если НеобходимостьАвтоматическогоРезервногоКопирования() Тогда
		ПровестиРезервноеКопирование();
	КонецЕсли;
	
	Если ПараметрыРезервногоКопированияИБ.ОтложенноеРезервноеКопирование Тогда
		ОтложенноеИнтерактивноеРезервноеКопирование();
	КонецЕсли;
	
	ВариантОповещения = ПараметрыРезервногоКопированияИБ.ПараметрОповещения;
	Если ВариантОповещения = "Просрочено" Или ВариантОповещения = "Напомнить" Или ВариантОповещения = "ЕщеНеНастроено" Тогда     
		ОповеститьПользователяОРезервномКопировании(ВариантОповещения);
	КонецЕсли;
	
КонецПроцедуры

// Проверяет необходимость проведения автоматического резервного копирования.
//
// Возвращаемое значение - Булево - Истина, если необходима, Ложь - иначе.
//
Функция НеобходимостьАвтоматическогоРезервногоКопирования() Экспорт
	Перем РасписаниеЗначение;
	
	Если ТипЗнч(ПараметрыРезервногоКопированияИБ) <> Тип("Структура") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ПараметрыРезервногоКопированияИБ.ПроцессВыполняется
		ИЛИ НЕ ПараметрыРезервногоКопированияИБ.Свойство("МинимальнаяДатаСледующегоАвтоматическогоРезервногоКопирования")
		ИЛИ НЕ ПараметрыРезервногоКопированияИБ.Свойство("РасписаниеЗначение", РасписаниеЗначение)
		ИЛИ НЕ ПараметрыРезервногоКопированияИБ.Свойство("ДатаПоследнегоРезервногоКопирования") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если РасписаниеЗначение = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДатаПроверки = ОбщегоНазначенияКлиент.ДатаСеанса();
	Если ПараметрыРезервногоКопированияИБ.МинимальнаяДатаСледующегоАвтоматическогоРезервногоКопирования > ДатаПроверки Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат РасписаниеЗначение.ТребуетсяВыполнение(ДатаПроверки, ПараметрыРезервногоКопированияИБ.ДатаПоследнегоРезервногоКопирования);
КонецФункции

// Запускает резервное копирование по расписанию.
// Состоит из двух этапов: 1 - очистка каталога с копиями, 2 - непосредственно резервное копирование.
Процедура ПровестиРезервноеКопирование() Экспорт
	
	// Очистка архива с копиями.
	ФиксированныеПараметрыРезервногоКопированияИБ = СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().РезервноеКопированиеИБ;
	КаталогХранения = ФиксированныеПараметрыРезервногоКопированияИБ.КаталогХраненияРезервныхКопий;
	
	Если ФиксированныеПараметрыРезервногоКопированияИБ.ПроизводитьУдаление И КаталогХранения <> Неопределено Тогда
		
		Попытка
			Файл = Новый Файл(КаталогХранения);
			Если НЕ Файл.ЭтоКаталог() Тогда
				Возврат;
			КонецЕсли;
			
			МассивФайлов = НайтиФайлы(КаталогХранения, "backup*.zip", Истина);
			СписокУдаляемыхФайлов = Новый СписокЗначений;
			
			// Удаление резервных копий.
			Если ФиксированныеПараметрыРезервногоКопированияИБ.УдалятьПоПериоду Тогда
				Для Каждого ЭлементФайл Из МассивФайлов Цикл
					ТекущаяДата = ОбщегоНазначенияКлиент.ДатаСеанса();
					ПараметрУдаления = ?((ТекущаяДата - ФиксированныеПараметрыРезервногоКопированияИБ.ЗначениеПараметра) > ЭлементФайл.ПолучитьВремяИзменения(), Истина, Ложь);
					Если ПараметрУдаления Тогда
						СписокУдаляемыхФайлов.Добавить(ЭлементФайл);
					КонецЕсли;
				КонецЦикла;
				
			ИначеЕсли МассивФайлов.Количество() >= ФиксированныеПараметрыРезервногоКопированияИБ.ЗначениеПараметра Тогда
				СписокФайлов = Новый СписокЗначений;
				СписокФайлов.ЗагрузитьЗначения(МассивФайлов);
				
				Для Каждого Файл Из СписокФайлов Цикл
					Файл.Значение = Файл.Значение.ПолучитьВремяИзменения();
				КонецЦикла;
				
				СписокФайлов.СортироватьПоЗначению(НаправлениеСортировки.Убыв);
				Индекс = ФиксированныеПараметрыРезервногоКопированияИБ.ЗначениеПараметра;
				ДатаПоследнегоАрхива = СписокФайлов[Индекс-1].Значение;
				
				Для Каждого ЭлементФайл Из МассивФайлов Цикл
					
					Если ЭлементФайл.ПолучитьВремяИзменения() < ДатаПоследнегоАрхива Тогда
						СписокУдаляемыхФайлов.Добавить(ЭлементФайл);
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Для Каждого УдаляемыйФайл Из СписокУдаляемыхФайлов Цикл
				УдалитьФайлы(УдаляемыйФайл.Значение.ПолноеИмя);
			КонецЦикла;
			
		Исключение
			
			ОбщегоНазначенияКлиент.ДобавитьСообщениеДляЖурналаРегистрации(СобытиеЖурналаРегистрации(),"Ошибка",
			НСтр("ru = 'Не удалось провести очистку каталога с резервными копиями.'"),,Истина);
			
		КонецПопытки;
		
	КонецЕсли;
	
	// резервное копирование
	ДатыСледующегоАвтоматическогоКопирования = РезервноеКопированиеИБВызовСервера.СформироватьДатыСледующегоАвтоматическогоКопирования();
	ЗаполнитьЗначенияСвойств(ПараметрыРезервногоКопированияИБ, ДатыСледующегоАвтоматическогоКопирования);
	
	ПараметрыФормы = Новый Структура("ТипВызова, ТекущаяСтраница", 2, "СтраницаИнформацииИВыполненияРезервногоКопирования");
	ОткрытьФорму("Обработка.РезервноеКопированиеИБ.Форма.РезервноеКопированиеИнформационнойБазы", ПараметрыФормы);
	
КонецПроцедуры

// При старте системы проверяет, первый ли это запуск после проведения резервного копирования. 
// Если да - выводит форму обработчика с результатами резервного копирования.
//
// Параметры:
//	ПараметрыРезервногоКопирования - Структура - параметры резервного копирования.
//
Процедура ПроверитьРезервноеКопированиеИБ(ФиксированныеПараметрыРезервногоКопированияИБ) Экспорт
	
	Если ФиксированныеПараметрыРезервногоКопированияИБ.ПроведеноКопирование Тогда	
		
		ПараметрыФормы = Новый Структура("ТипВызова", 2);
		НазваниеТекущейСтраницы = "";
		
		Если ФиксированныеПараметрыРезервногоКопированияИБ.РезультатКопирования Тогда
			НазваниеТекущейСтраницы = "СтраницаУспешногоВыполненияКопирования";
		Иначе
			НазваниеТекущейСтраницы = "СтраницаОшибокПриКопировании";
		КонецЕсли;
		
		ПараметрыФормы.Вставить("ТекущаяСтраница", НазваниеТекущейСтраницы);
		ПараметрыФормы.Вставить("ТекстПути",       ФиксированныеПараметрыРезервногоКопированияИБ.ИмяФайлаРезервнойКопии);
		ФормаОповещения = ОткрытьФорму("Обработка.РезервноеКопированиеИБ.Форма.РезервноеКопированиеИнформационнойБазы", ПараметрыФормы);
		
	КонецЕсли;
	
КонецПроцедуры

// По результатам анализа параметров резервного копирования выдает соответствующее оповещение.
//
// Параметры: 
//   ВариантОповещения - Строка - результат проверки на посылку оповещения
//
Процедура ОповеститьПользователяОРезервномКопировании(ВариантОповещения) Экспорт
	
	ТекстПояснения = "";
	Если ВариантОповещения = "Просрочено" Тогда
		
		ТекстПояснения = НСтр("ru = 'Автоматическое резервное копирование не было выполнено.'"); 
		ПоказатьОповещениеПользователя(НСтр("ru = 'Резервное копирование.'"),
			"e1cib/app/Обработка.РезервноеКопированиеИБ", ТекстПояснения, БиблиотекаКартинок.Предупреждение32);
		
	ИначеЕсли ВариантОповещения = "Напомнить" Тогда
		
		НастройкаОповещения = ПараметрыРезервногоКопированияИБ.ДатаПоследнегоРезервногоКопирования;
		ТекстПояснения = НСтр("ru = 'Резервное копирование не выполнялось с %1.'");
		
		МассивЗамены = Новый Массив;
		МассивЗамены.Добавить(НастройкаОповещения);
		ТекстПояснения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтрокуИзМассива(ТекстПояснения, МассивЗамены);
		
		ТекстПояснения = СтрЗаменить(ТекстПояснения,"%НастройкаОповещения%",НастройкаОповещения);
		ПоказатьОповещениеПользователя(НСтр("ru = 'Резервное копирование.'"),
			"e1cib/app/Обработка.РезервноеКопированиеИБ", ТекстПояснения, БиблиотекаКартинок.Предупреждение32);
		
	ИначеЕсли ВариантОповещения = "ЕщеНеНастроено" Тогда
		
		ТекстПояснения = НСтр("ru = 'Рекомендуется настроить резервное копирование информационной базы.'"); 
		ПоказатьОповещениеПользователя(НСтр("ru = 'Резервное копирование.'"),
			"e1cib/app/Обработка.НастройкаРезервногоКопированияИБ", ТекстПояснения, БиблиотекаКартинок.Предупреждение32);
		ТекущаяДата = ОбщегоНазначенияКлиент.ДатаСеанса();
		РезервноеКопированиеИБВызовСервера.УстановитьДатуПоследнегоНапоминания(ТекущаяДата);
	КонецЕсли;	
КонецПроцедуры

// Получает каталог файла по его имени
//
// Параметры: ПутьКФайлу - Строка, путь к указанному файлу.
//
// Возвращаемое значение: Строка, путь к каталогу с указанным файлом.
//
Функция ПолучитьКаталогФайла(Знач ПутьКФайлу) Экспорт
	ПозицияСимвола = ПолучитьНомерПоследнегоСимвола(ПутьКФайлу, "\"); 
	Если ПозицияСимвола > 1 Тогда
		Возврат Сред(ПутьКФайлу, 1, ПозицияСимвола - 1); 
	Иначе
		Возврат "";
	КонецЕсли;
КонецФункции

// Возвращает тип события журнала регистрации для данной подсистемы.
//
// Возвращаемое значение - Строка - тип события журнала регистрации.
//
Функция СобытиеЖурналаРегистрации() Экспорт
	
	Возврат НСтр("ru = 'Резервное копирование информационной базы'", ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка());
	
КонецФункции

// Возвращает параметры скрипта резервного копирования.
//
// Возвращаемое значение - Структура - структура скрипта резервного копирования.
//
Функция КлиентскиеПараметрыРезервногоКопирования() Экспорт
	#Если НЕ ВебКлиент Тогда
		
		СтруктураПараметров = Новый Структура();
		СтруктураПараметров.Вставить("ДатаВремяОбновленияУстановлена", Ложь);
		
		// Имена служебных файлов
		#Если ТонкийКлиент Тогда
			СтруктураПараметров.Вставить("ИмяФайлаПрограммы", "1cv8c.exe");
		#КонецЕсли
		
		#Если ТолстыйКлиентОбычноеПриложение Тогда
			СтруктураПараметров.Вставить("ИмяФайлаПрограммы", "1cv8.exe");
		#КонецЕсли
		
		#Если ТолстыйКлиентУправляемоеПриложение Тогда
			СтруктураПараметров.Вставить("ИмяФайлаПрограммы", "1cv8.exe");
		#КонецЕсли
		
		СтруктураПараметров.Вставить("СобытиеЖурналаРегистрации", НСтр("ru = 'Резервное копирование ИБ'"));
		
		// Определение каталога временных файлов.
		ТекущаяДата = ОбщегоНазначенияКлиент.ДатаСеанса();
		СтруктураПараметров.Вставить("КаталогВременныхФайловОбновления"	, КаталогВременныхФайлов() + "1Cv8Backup." + Формат(ТекущаяДата, "ДФ=ггММддЧЧммсс") + "\");
		
		Возврат СтруктураПараметров;
	#КонецЕсли
КонецФункции

// Формирует вопросы при завершении работы системы.
//
// Параметры:
//	Предупреждения - Массив - список предупреждений.
//
Процедура ПриЗавершенииРаботыСистемы(Предупреждения) Экспорт
	
	Если СтандартныеПодсистемыКлиентПовтИсп.ПараметрыРаботыКлиента().РазделениеВключено Тогда
		Возврат;
	КонецЕсли;
	
	Ответ = ПроверитьНаличиеРезервногоКопирования();
	ТипОтвета = ТипЗнч(Ответ);
	ИмеетсяРезервноеКопирование = Ложь;
	Если ТипОтвета = Тип("Дата") Тогда 
		ТекстФлажка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("ru = 'Завершить работу системы после резервного копирования %1'"), Ответ);
		
		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(Ответ);
		ПараметрыФормы = Новый Структура("ТипВызова, ТекущаяСтраница, ЗаголовокНадписи", 
			1, "СтраницаИнформацииИВыполненияРезервногоКопирования", 
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтрокуИзМассива(НСтр("ru = 'Резервное копирование будет произведено автоматически не позднее %1'"), 
			МассивПараметров));
		ФормаОбработки = "Обработка.РезервноеКопированиеИБ.Форма.РезервноеКопированиеИнформационнойБазы";
		
		ИмеетсяРезервноеКопирование = Истина;
	ИначеЕсли ТипОтвета = Тип("Булево") Тогда 
		ТекстФлажка 	= НСтр("ru = 'Выполнить резервное копирование'");
		ПараметрыФормы 	= Новый Структура("ТипВызова, ТекущаяСтраница", 2, "СтраницаИнформацииИВыполненияРезервногоКопирования");
		ФормаОбработки 	= "Обработка.РезервноеКопированиеИБ.Форма.РезервноеКопированиеИнформационнойБазы";
		
		ИмеетсяРезервноеКопирование = Истина;
	КонецЕсли;	
	
	Если ИмеетсяРезервноеКопирование Тогда
		ДействиеПриУстановленномФлажке = Новый Структура("Форма, ПараметрыФормы", ФормаОбработки, ПараметрыФормы);
		СтруктураПредупреждения = Новый Структура("ТекстФлажка, ДействиеПриУстановленномФлажке, Приоритет", ТекстФлажка, ДействиеПриУстановленномФлажке, 70);
		Предупреждения.Добавить(СтруктураПредупреждения);
	КонецЕсли;
	
КонецПроцедуры	

////////////////////////////////////////////////////////////////////////////////
// Локальные служебные процедуры и функции

// Обработчик ожидания выполнения резервного копирования.
//
Процедура ОтложенноеИнтерактивноеРезервноеКопирование()
	
	Если ОбщегоНазначенияКлиент.ДатаСеанса() < ДатаОтложенногоРезервногоКопирования
		И РезервноеКопированиеИБВызовСервера.ПолучитьКоличествоАктивныхПользователей() = 1 Тогда
		
		ТекстВопроса = НСтр("ru = 'В данный момент с базой больше никто не работает. Выполнить резервное копирование?'");
		ЗаголовокВопроса = Нстр("ru = 'Провести резервное копирование прямо сейчас'");
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Да, ЗаголовокВопроса, КодВозвратаДиалога.Да);
		Если Ответ = КодВозвратаДиалога.Нет Или Ответ = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ПараметрыРезервногоКопированияИБ.ОтложенноеРезервноеКопирование = Ложь;
	РезервноеКопированиеИБВызовСервера.УстановитьЗначениеНастройки("ОтложенноеРезервноеКопирование", Ложь);
	ПараметрыФормы = Новый Структура("ТипВызова, ТекущаяСтраница, ЗаголовокНадписи", 1, "СтраницаИнформацииИВыполненияРезервногоКопирования", "");
	ФормаОбработки = ОткрытьФорму("Обработка.РезервноеКопированиеИБ.Форма.РезервноеКопированиеИнформационнойБазы", ПараметрыФормы);
	
КонецПроцедуры

// Функция проверяет настройки резервного копирования.
//
// Возвращаемое значение:
//	Неопределено - если нет резервного копирования,
//	Дата - если имеется отложенное резервное копирование,
//	Булево - если имеется резервное копирование при завершении работы.
//
Функция ПроверитьНаличиеРезервногоКопирования() 
#Если ВебКлиент Тогда
	Возврат Неопределено;
#КонецЕсли

	Если Не СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиентаПриЗавершении().РезервноеКопированиеИБ.ДоступностьРолейОповещения Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОповещатьПостоянно = СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиентаПриЗавершении().РезервноеКопированиеИБ.ПроводитьРезервноеКопированиеПриЗавершенииРаботы;
	ОповещатьПостоянно = ?(ОповещатьПостоянно = Неопределено, Ложь, ОповещатьПостоянно);
	КоличествоАктивныхАдминистраторов = СтандартныеПодсистемыКлиент.ПараметрыРаботыКлиентаПриЗавершении().РезервноеКопированиеИБ.КоличествоАктивныхПользователей;
	// Переменная ОповещатьОРезервномКопированииПриЗавершенииСеанса сравнивается явно с Истина, 
	// так как может быть не проинициализирована при аварийном завершении.
	Если ОповещатьОРезервномКопированииПриЗавершенииСеанса = Истина ИЛИ (ОповещатьПостоянно И КоличествоАктивныхАдминистраторов = 1) Тогда
		Возврат Истина;
	Иначе // Если нет резервного копирования при завершении работы системы.
		// Переменная ДатаОтложенногоРезервногоКопирования может быть не проинициализирована при аварийном завершении.
		Если ДатаОтложенногоРезервногоКопирования = Неопределено Тогда
			ДатаОтложенногоРезервногоКопирования = Дата('00010101');
		КонецЕсли;
		ТекущаяДата = ОбщегоНазначенияКлиент.ДатаСеанса();
		Если ДатаОтложенногоРезервногоКопирования > ТекущаяДата Тогда
			Возврат ДатаОтложенногоРезервногоКопирования;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

// Возвращает позицию последнего передаваемого символа.
//
// Параметры:
//	ИсходнаяСтрока - Строка - строка, в которой осуществляется поиск.
//	СимволПоиска - Строка - символ поиска.
//	
// Возвращаемое значение - Число - позиция символа.
//
Функция ПолучитьНомерПоследнегоСимвола(Знач ИсходнаяСтрока, Знач СимволПоиска)
	ПозицияСимвола = СтрДлина(ИсходнаяСтрока);
	Пока ПозицияСимвола >= 1 Цикл
		
		Если Сред(ИсходнаяСтрока, ПозицияСимвола, 1) = СимволПоиска Тогда
			Возврат ПозицияСимвола; 
		КонецЕсли;
		
		ПозицияСимвола = ПозицияСимвола - 1;	
	КонецЦикла;
	Возврат 0;
КонецФункции

