////////////////////////////////////////////////////////////////////////////////
// Подсистема "Присоединенные файлы".
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

// Возвращает двоичные данные присоединенного файла.
//
// Параметры:
//  ПрисоединенныйФайл - Ссылка на присоединенный файл.
//
// Возвращаемое значение:
//  ДвоичныеДанные.
//
Функция ПолучитьДвоичныеДанныеФайла(Знач ПрисоединенныйФайл) Экспорт
	
	ФайлОбъект = ПрисоединенныйФайл.ПолучитьОбъект();
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если ФайлОбъект.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПрисоединенныеФайлы.ПрисоединенныйФайл,
		|	ПрисоединенныеФайлы.ХранимыйФайл
		|ИЗ
		|	РегистрСведений.ПрисоединенныеФайлы КАК ПрисоединенныеФайлы
		|ГДЕ
		|	ПрисоединенныеФайлы.ПрисоединенныйФайл = &ПрисоединенныйФайл";
		
		Запрос.УстановитьПараметр("ПрисоединенныйФайл", ПрисоединенныйФайл);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			Возврат Выборка.ХранимыйФайл.Получить();
		Иначе
			ВызватьИсключение ФайловыеФункцииСлужебныйКлиентСервер.ОшибкаФайлНеНайденВХранилищеФайлов(
				ФайлОбъект.Наименование + "." + ФайлОбъект.Расширение, Ложь);
		КонецЕсли;
	Иначе
		ПолныйПуть = ФайловыеФункцииСлужебный.ПолныйПутьТома(ФайлОбъект.Том) + ФайлОбъект.ПутьКФайлу;
		
		Попытка
			Возврат Новый ДвоичныеДанные(ПолныйПуть)
		Исключение
			// Запись в журнал регистрации.
			СообщениеОбОшибке = ТекстОшибкиПриПолученииФайла(ИнформацияОбОшибке(), ПрисоединенныйФайл);
			ЗаписьЖурналаРегистрации(
				НСтр("ru = 'Файлы.Получение файла из тома'",
				     ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
				УровеньЖурналаРегистрации.Ошибка,
				Метаданные.Справочники[ПрисоединенныйФайл.Метаданные().Имя],
				ПрисоединенныйФайл,
				СообщениеОбОшибке);
			
			ВызватьИсключение ФайловыеФункцииСлужебныйКлиентСервер.ОшибкаФайлНеНайденВХранилищеФайлов(
				ФайлОбъект.Наименование + "." + ФайлОбъект.Расширение);
		КонецПопытки;
	КонецЕсли;
	
КонецФункции

// Возвращает структуру данных файла.
// Используется в различных командах работы с файлами,
// и как значение параметра ДанныеФайла других процедур и функций.
//
// Параметры:
//  ПрисоединенныйФайл - Ссылка на присоединенный файл.
//
//  ИдентификаторФормы - УникальныйИдентификатор формы,
//                 используется при получении двоичных данных файла.
//
//  ПолучатьСсылкуНаДвоичныеДанные - Булево - начальное значение Истина,
//                 если передать Ложь, то ссылка на двоичные данные не будет получена,
//                 что существенно ускорит выполнение для больших двоичных данных.
//
// Возвращаемое значение:
//  Структура со свойствами:
//    СсылкаНаДвоичныеДанныеФайла        - Строка - адрес во временном хранилище.
//    ОтносительныйПуть                  - Строка.
//    ДатаМодификацииУниверсальная       - Дата.
//    ИмяФайла                           - Строка.
//    Наименование                       - Строка.
//    Расширение                         - Строка.
//    Размер                             - Число.
//    Редактирует                        - СправочникСсылка.Пользователи.
//    ПодписанЭЦП                        - Булево.
//    Зашифрован                         - Булево.
//    ФайлРедактируется                  - Булево.
//    ФайлРедактируетТекущийПользователь - Булево.
// 
Функция ПолучитьДанныеФайла(Знач ПрисоединенныйФайл,
                            Знач ИдентификаторФормы = Неопределено,
                            Знач ПолучатьСсылкуНаДвоичныеДанные = Истина) Экспорт
	
	ФайлОбъект = ПрисоединенныйФайл.ПолучитьОбъект();
	
	УстановитьПривилегированныйРежим(Истина);
	
	СсылкаНаДвоичныеДанныеФайла = Неопределено;
	
	Если ПолучатьСсылкуНаДвоичныеДанные Тогда
		
		Если ФайлОбъект.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
			ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ПрисоединенныеФайлы.ХранимыйФайл
			|ИЗ
			|	РегистрСведений.ПрисоединенныеФайлы КАК ПрисоединенныеФайлы
			|ГДЕ
			|	ПрисоединенныеФайлы.ПрисоединенныйФайл = &ПрисоединенныйФайл";
			
			Запрос = Новый Запрос(ТекстЗапроса);
			Запрос.УстановитьПараметр("ПрисоединенныйФайл", ПрисоединенныйФайл);
			
			Выборка = Запрос.Выполнить().Выбрать();
			ДвоичныеДанные = Неопределено;
			Если Выборка.Следующий() Тогда
				ДвоичныеДанные = Выборка.ХранимыйФайл.Получить();
			КонецЕсли;
		 
			Если ТипЗнч(ИдентификаторФормы) = Тип("УникальныйИдентификатор") Тогда
				СсылкаНаДвоичныеДанныеФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные, ИдентификаторФормы);
			Иначе
				СсылкаНаДвоичныеДанныеФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
			КонецЕсли;
		Иначе
			ПолныйПуть = ФайловыеФункцииСлужебный.ПолныйПутьТома(ФайлОбъект.Том) + ФайлОбъект.ПутьКФайлу;
			
			Попытка
				ДвоичныеДанные = Новый ДвоичныеДанные(ПолныйПуть);
				Если ТипЗнч(ИдентификаторФормы) = Тип("УникальныйИдентификатор") Тогда
					СсылкаНаДвоичныеДанныеФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные, ИдентификаторФормы);
				Иначе
					СсылкаНаДвоичныеДанныеФайла = ПоместитьВоВременноеХранилище(ДвоичныеДанные);
				КонецЕсли;
			Исключение
				СообщениеОбОшибке = ТекстОшибкиПриПолученииФайла(ИнформацияОбОшибке(), ПрисоединенныйФайл);
				ЗаписьЖурналаРегистрации(
					НСтр("ru = 'Файлы.Открытие файла'",
					     ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
					УровеньЖурналаРегистрации.Ошибка,
					Метаданные.Справочники[ПрисоединенныйФайл.Метаданные().Имя],
					ПрисоединенныйФайл,
					СообщениеОбОшибке);
				
			ВызватьИсключение ФайловыеФункцииСлужебныйКлиентСервер.ОшибкаФайлНеНайденВХранилищеФайлов(
				ФайлОбъект.Наименование + "." + ФайлОбъект.Расширение);
			КонецПопытки;
		КонецЕсли;
		
	КонецЕсли;
	
	ДополнительнаяИнформация = Новый Структура;
	ДополнительнаяИнформация.Вставить("СсылкаНаДвоичныеДанныеФайла",  СсылкаНаДвоичныеДанныеФайла);
	ДополнительнаяИнформация.Вставить("ОтносительныйПуть",            ПолучитьИдентификаторОбъекта(ФайлОбъект.ВладелецФайла) + "\");
	ДополнительнаяИнформация.Вставить("ДатаМодификацииУниверсальная", ФайлОбъект.ДатаМодификацииУниверсальная);
	ДополнительнаяИнформация.Вставить("ИмяФайла",                     ФайлОбъект.Наименование + "." + ФайлОбъект.Расширение);
	ДополнительнаяИнформация.Вставить("Наименование",                 ФайлОбъект.Наименование);
	ДополнительнаяИнформация.Вставить("Расширение",                   ФайлОбъект.Расширение);
	ДополнительнаяИнформация.Вставить("Размер",                       ФайлОбъект.Размер);
	ДополнительнаяИнформация.Вставить("Редактирует",                  ФайлОбъект.Редактирует);
	ДополнительнаяИнформация.Вставить("ПодписанЭЦП",                  ФайлОбъект.ПодписанЭЦП);
	ДополнительнаяИнформация.Вставить("Зашифрован",                   ФайлОбъект.Зашифрован);
	ДополнительнаяИнформация.Вставить("ФайлРедактируется",            ФайлОбъект.Редактирует <> Справочники.Пользователи.ПустаяСсылка() );
	ДополнительнаяИнформация.Вставить("ФайлРедактируетТекущийПользователь",
		?(ДополнительнаяИнформация.ФайлРедактируется, ФайлОбъект.Редактирует = Пользователи.ТекущийПользователь(), Ложь) );
	
	Если ФайлОбъект.Зашифрован Тогда
		МассивСертификатовШифрования = Новый Массив;
		Для Каждого СтрокаТЧ Из ФайлОбъект.СертификатыШифрования Цикл
			МассивСертификатовШифрования.Добавить(Новый Структура("Отпечаток, Представление", СтрокаТЧ.Отпечаток, СтрокаТЧ.Представление));
		КонецЦикла;
		ДополнительнаяИнформация.Вставить("МассивСертификатовШифрования", МассивСертификатовШифрования);
	КонецЕсли;
	
	Возврат ДополнительнаяИнформация;
	
КонецФункции

// Заполняет массив ссылками на файлы объекта.
//
// Параметры:
//  Объект       - Ссылка на объект, который может содержать присоединенные файлы.
//  МассивФайлов - Массив, в который будут добавлены ссылки на файлы объекта.
// 
Процедура ПолучитьПрикрепленныеФайлыКОбъекту(Знач Объект, Знач МассивФайлов) Экспорт
	
	ТипыВладельцев = Метаданные.РегистрыСведений.НаличиеПрисоединенныхФайлов.Измерения.ОбъектСФайлами.Тип.Типы();
	Если ТипыВладельцев.Найти(ТипЗнч(Объект)) <> Неопределено Тогда
		
		МассивФайловЛокальный = ПрисоединенныеФайлыСлужебный.ПолучитьВсеПодчиненныеФайлы(Объект);
		Для Каждого СсылкаНаФайл Из МассивФайловЛокальный Цикл
			МассивФайлов.Добавить(СсылкаНаФайл);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Создает объект в справочнике для хранения файла и заполняет его реквизиты переданными свойствами.
//
// Параметры:
//  ВладелецФайлов                 - Ссылка - объект, к которому добавляется файл.
//  ИмяБезРасширения               - Строка - имя файла без расширения.
//  РасширениеБезТочки             - Строка - расширение файла (без точки вначале).
//  ВремяИзменения                 - Дата   - (не используется) дата и время изменения файла (местное время).
//  ВремяИзмененияУниверсальное    - Дата   - дата и время изменения файла (UTC+0:00),
//                                            если не указана, тогда используется ТекущаяУниверсальнаяДата().
//  АдресФайлаВоВременномХранилище - Строка - адрес, указывающий на двоичные данные во временном хранилище.
//  АдресВременногоХранилищаТекста - Строка - адрес, указывающий на извлеченный текст из файла во временном хранилище.
//  Описание                       - Строка - текстовое описание файла.
//
//  НоваяСсылкаНаФайл              - Неопределено - создать новую ссылку на файл в стандартном справочнике
//                                   или в нестандартном, но единственном справочнике. Когда у владельца файла несколько
//                                   справочников, требуется обязательно передать ссылку, иначе будет вызвано исключение.
//                                 - Ссылка на элемент справочника хранения файлов,
//                                   которую следует использовать для добавляемого файла.
//                                   Должна соответствовать одному из типов справочников хранения файлов владельца файлов.
//
// Возвращаемое значение:
//  Ссылка - ссылка на созданный объект.
//
Функция ДобавитьФайл(Знач ВладелецФайлов,
                     Знач ИмяБезРасширения,
                     Знач РасширениеБезТочки = Неопределено,
                     Знач ВремяИзменения = Неопределено,
                     Знач ВремяИзмененияУниверсальное = Неопределено,
                     Знач АдресФайлаВоВременномХранилище,
                     Знач АдресВременногоХранилищаТекста = "",
                     Знач Описание = "",
                     Знач НоваяСсылкаНаФайл = Неопределено) Экспорт
	
	// Если расширение не задано явно, выделяем его из имени файла.
	Если РасширениеБезТочки = Неопределено Тогда
		ЧастиИмениФайла = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяБезРасширения, ".", Ложь);
		Если ЧастиИмениФайла.Количество() > 1 Тогда
			РасширениеБезТочки = ЧастиИмениФайла[ЧастиИмениФайла.Количество()-1];
			ИмяБезРасширения = Лев(ИмяБезРасширения, СтрДлина(ИмяБезРасширения) - (СтрДлина(РасширениеБезТочки)+1));
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВремяИзмененияУниверсальное)
	 ИЛИ ВремяИзмененияУниверсальное > ТекущаяУниверсальнаяДата() Тогда
		ВремяИзмененияУниверсальное = ТекущаяУниверсальнаяДата();
	КонецЕсли;
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(АдресФайлаВоВременномХранилище);
	
	ЗаголовокОшибки = НСтр("ru = 'Ошибка при добавлении присоединенного файла.'");
	
	Если НоваяСсылкаНаФайл = Неопределено Тогда
		ИмяСправочника = ПрисоединенныеФайлыСлужебный.ИмяСправочникаХраненияФайлов(
			ВладелецФайлов, "", ЗаголовокОшибки, "НоваяСсылкаНаФайл");
		
		НоваяСсылкаНаФайл = Справочники[ИмяСправочника].ПолучитьСсылку();
	Иначе
		Если НЕ Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(НоваяСсылкаНаФайл))
		 ИЛИ НЕ ЗначениеЗаполнено(НоваяСсылкаНаФайл) Тогда
			
			ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка при добавлении присоединенного файла.
				           |Ссылка на новый файл не заполнена.'"));
		КонецЕсли;
		
		ИмяСправочника = ПрисоединенныеФайлыСлужебный.ИмяСправочникаХраненияФайлов(
			ВладелецФайлов, НоваяСсылкаНаФайл.Метаданные().Имя, ЗаголовокОшибки);
	КонецЕсли;
	
	ПрисоединенныйФайл = Справочники[ИмяСправочника].СоздатьЭлемент();
	ПрисоединенныйФайл.УстановитьСсылкуНового(НоваяСсылкаНаФайл);
	
	ПрисоединенныйФайл.ВладелецФайла                = ВладелецФайлов;
	ПрисоединенныйФайл.ДатаМодификацииУниверсальная = ВремяИзмененияУниверсальное;
	ПрисоединенныйФайл.ДатаСоздания                 = ТекущаяДатаСеанса();
	ПрисоединенныйФайл.Описание                     = Описание;
	ПрисоединенныйФайл.ПодписанЭЦП                  = Ложь;
	ПрисоединенныйФайл.Наименование                 = ИмяБезРасширения;
	ПрисоединенныйФайл.Расширение                   = РасширениеБезТочки;
	ПрисоединенныйФайл.ТипХраненияФайла             = ФайловыеФункцииСлужебный.ТипХраненияФайлов();
	ПрисоединенныйФайл.Размер                       = ДвоичныеДанные.Размер();
	
	СвояТранзакцияОткрыта = Ложь;
	
	Попытка
		Если ПрисоединенныйФайл.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
			НачатьТранзакцию();
			СвояТранзакцияОткрыта = Истина;
			ПрисоединенныеФайлыСлужебный.ЗаписатьФайлВИнформационнуюБазу(НоваяСсылкаНаФайл, ДвоичныеДанные);
			ПрисоединенныйФайл.Том = Справочники.ТомаХраненияФайлов.ПустаяСсылка();
			ПрисоединенныйФайл.ПутьКФайлу = "";
		Иначе
			// Добавление в один из томов (где есть свободное место).
			ФайловыеФункцииСлужебный.ДобавитьНаДиск(
				ДвоичныеДанные,
				ПрисоединенныйФайл.ПутьКФайлу,
				ПрисоединенныйФайл.Том,
				ВремяИзмененияУниверсальное,
				"",
				ИмяБезРасширения,
				РасширениеБезТочки,
				ПрисоединенныйФайл.Размер,
				ПрисоединенныйФайл.Зашифрован);
		КонецЕсли;
		
		СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.НеИзвлечен;
		ИзвлеченныйТекст = "";
		
		Если ЭтоАдресВременногоХранилища(АдресВременногоХранилищаТекста) Тогда
			ИзвлеченныйТекст = ФайловыеФункцииСлужебный.ПолучитьСтрокуИзВременногоХранилища(АдресВременногоХранилищаТекста);
			СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.Извлечен;
			
		ИначеЕсли НЕ ФайловыеФункцииСлужебный.ИзвлекатьТекстыФайловНаСервере() Тогда
			// Тексты извлекаются сразу, а не в фоновом задании.
			СтатусИзвлеченияТекста = ПрисоединенныеФайлыСлужебный.ИзвлечьТекст(
				ДвоичныеДанные, ПрисоединенныйФайл.Расширение, ИзвлеченныйТекст);
		КонецЕсли;
		
		ПрисоединенныйФайл.СтатусИзвлеченияТекста = СтатусИзвлеченияТекста;
		ПрисоединенныйФайл.ТекстХранилище = Новый ХранилищеЗначения(ИзвлеченныйТекст);
		
		ПрисоединенныйФайл.Записать();
		
		Если СвояТранзакцияОткрыта Тогда
			ЗафиксироватьТранзакцию();
		КонецЕсли;
	
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		
		Если СвояТранзакцияОткрыта Тогда
			ОтменитьТранзакцию();
		КонецЕсли;
		
		ШаблонСообщения = НСтр("ru = 'Ошибка при добавлении присоединенного файла ""%1"":
		                             |%2'");
		КомментарийЖурналаРегистрации = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщения,
			ИмяБезРасширения + "." + РасширениеБезТочки,
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке));
		
		ЗаписьЖурналаРегистрации(
			НСтр("ru = 'Файлы.Добавление присоединенного файла'",
			     ОбщегоНазначенияКлиентСервер.КодОсновногоЯзыка()),
			УровеньЖурналаРегистрации.Ошибка,
			,
			,
			КомментарийЖурналаРегистрации);
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ШаблонСообщения,
			ИмяБезРасширения + "." + РасширениеБезТочки,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке));
	КонецПопытки;
	
	Возврат ПрисоединенныйФайл.Ссылка;
	
КонецФункции

// Возвращает новую ссылку на файл для указанного владельца,
// которую можно использовать, а затем передать в функцию ДобавитьФайл.
//
// Параметры:
//  ВладелецФайлов - Ссылка - объект, к которому добавляется файл.
//
//  ИмяСправочника - Неопределено - вычислить справочник по владельцу (допустимо,
//                   когда справочник только один, иначе будет вызвано исключение).
//
//                 - Строка - имя справочника *ПрисоединенныеФайлы, отличное
//                            от стандартного <ИмяВладельца>ПрисоединенныеФайлы.
//  
// Возвращаемое значение:
//  СправочникСсылка на новый файл.
//
Функция НоваяСсылкаНаФайл(ВладелецФайлов, ИмяСправочника = Неопределено) Экспорт
	
	ЗаголовокОшибки = НСтр("ru = 'Ошибка при получении новой ссылки на присоединенный файл.'");
	
	ИмяСправочника = ПрисоединенныеФайлыСлужебный.ИмяСправочникаХраненияФайлов(
		ВладелецФайлов, ИмяСправочника, ЗаголовокОшибки);
	
	Возврат Справочники[ИмяСправочника].ПолучитьСсылку();
	
КонецФункции

// Обновляет свойства файла - двоичные данные, текст, дату изменения,
// а также другие необязательные свойства.
//
// Параметры:
//  ИнформацияОФайле - Структура со свойствами:
//                     <обязательные>
//                       АдресФайлаВоВременномХранилище - Строка - адрес новых двоичных данных файла.
//                       АдресВременногоХранилищаТекста - Строка - адрес новых двоичных данных текста,
//                                                        извлеченного из файла.
//                     <необязательные>
//                       ДатаМодификацииУниверсальная   - Дата - дата последнего изменения файла, если
//                                                        свойство не указано или не заполнено, тогда будет
//                                                        установлена текущая дата сеанса.
//                       Расширение                     - Строка - новое расширение файла.
//                       Редактирует                    - Ссылка - новый пользователь, редактирующий файл.
//
Процедура ОбновитьПрисоединенныйФайл(Знач ПрисоединенныйФайл, Знач ИнформацияОФайле) Экспорт
	
	Перем Отказ;
	
	РеквизитыЗначения = Новый Структура;
	
	Если НЕ ИнформацияОФайле.Свойство("ДатаМодификацииУниверсальная")
	 ИЛИ НЕ ЗначениеЗаполнено(ИнформацияОФайле.ДатаМодификацииУниверсальная)
	 ИЛИ ИнформацияОФайле.ДатаМодификацииУниверсальная > ТекущаяУниверсальнаяДата() Тогда
		
		// Заполнение текущей даты в формате универсального времени.
		РеквизитыЗначения.Вставить("ДатаМодификацииУниверсальная", ТекущаяУниверсальнаяДата());
	Иначе
		РеквизитыЗначения.Вставить("ДатаМодификацииУниверсальная", ИнформацияОФайле.ДатаМодификацииУниверсальная);
	КонецЕсли;
	
	Если ИнформацияОФайле.Свойство("Редактирует") Тогда
		РеквизитыЗначения.Вставить("Редактирует", ИнформацияОФайле.Редактирует);
	КонецЕсли;
	
	Если ИнформацияОФайле.Свойство("Расширение") Тогда
		РеквизитыЗначения.Вставить("Расширение", ИнформацияОФайле.Расширение);
	КонецЕсли;
	
	ДвоичныеДанные = ПолучитьИзВременногоХранилища(ИнформацияОФайле.АдресФайлаВоВременномХранилище);
	
	РеквизитыЗначения.Вставить("СтатусИзвлеченияТекста", Перечисления.СтатусыИзвлеченияТекстаФайлов.НеИзвлечен);
	ИзвлеченныйТекст = "";
	
	Если ЭтоАдресВременногоХранилища(ИнформацияОФайле.АдресВременногоХранилищаТекста) Тогда
		
		ИзвлеченныйТекст = ФайловыеФункцииСлужебный.ПолучитьСтрокуИзВременногоХранилища(
			ИнформацияОФайле.АдресВременногоХранилищаТекста);
		
		РеквизитыЗначения.СтатусИзвлеченияТекста = Перечисления.СтатусыИзвлеченияТекстаФайлов.Извлечен;
		
	ИначеЕсли НЕ ФайловыеФункцииСлужебный.ИзвлекатьТекстыФайловНаСервере() Тогда
		// Тексты извлекаются сразу, а не в фоновом задании
		РеквизитыЗначения.СтатусИзвлеченияТекста = ПрисоединенныеФайлыСлужебный.ИзвлечьТекст(
			ДвоичныеДанные, ПрисоединенныйФайл.Расширение, ИзвлеченныйТекст);
	КонецЕсли;
	
	РеквизитыЗначения.Вставить("ТекстХранилище", Новый ХранилищеЗначения(ИзвлеченныйТекст));
	
	ПрисоединенныеФайлыСлужебный.ОбновитьДвоичныеДанныеФайлаНаСервере(
		ПрисоединенныйФайл, ДвоичныеДанные, РеквизитыЗначения);
	
КонецПроцедуры

// Возвращает имя формы объекта присоединенных файлов по владельцу.
Функция ПолучитьИмяФормыОбъектаПрисоединенныхФайловПоВладельцу(Знач ВладелецФайлов) Экспорт
	
	ЗаголовокОшибки = НСтр("ru = 'Ошибка при получении имени формы присоединенного файла.'");
	ОкончаниеОшибки = НСтр("ru = 'В этом случае получение формы невозможно.'");
	
	ИмяСправочника = ПрисоединенныеФайлыСлужебный.ИмяСправочникаХраненияФайлов(
		ВладелецФайлов, "", ЗаголовокОшибки, Неопределено, ОкончаниеОшибки);
	
	ПолноеИмяОМ = "Справочник." + ИмяСправочника;
	
	МетаданныеПрисоединенныхФайлов = Метаданные.НайтиПоПолномуИмени(ПолноеИмяОМ);
	
	Если МетаданныеПрисоединенныхФайлов.ОсновнаяФормаОбъекта = Неопределено Тогда
		ИмяФормы = ПолноеИмяОМ + ".ФормаОбъекта";
	Иначе
		ИмяФормы = МетаданныеПрисоединенныхФайлов.ОсновнаяФормаОбъекта.ПолноеИмя();
	КонецЕсли;
	
	Возврат ИмяФормы;
	
КонецФункции

// Определяет наличие хранилища присоединенных файлов у объекта.
Функция КОбъектуМожноПрисоединятьФайлы(ВладелецФайлов, ИмяСправочника = "") Экспорт
	
	ИмяСправочника = ПрисоединенныеФайлыСлужебный.ИмяСправочникаХраненияФайлов(
		ВладелецФайлов, ИмяСправочника);
		
	СправочникПрисоединенныеФайлы = Метаданные.Справочники.Найти(ИмяСправочника);
	
	ТипыХранимыхФайлов =
		Метаданные.РегистрыСведений.ПрисоединенныеФайлы.Измерения.ПрисоединенныйФайл.Тип;
	
	Возврат СправочникПрисоединенныеФайлы <> Неопределено
	      И ПравоДоступа("Добавление", СправочникПрисоединенныеФайлы)
	      И ТипыХранимыхФайлов.СодержитТип(Тип("СправочникСсылка." + ИмяСправочника));
	
КонецФункции

// Конвертирует файлы из подсистемы Работа с файлами в подсистему Присоединенные файлы.
// Требует наличия подсистемы Работа с файлами.
//
// Для использования в процедурах обновления ИБ, если выполняется переход от использования
// одной подсистемы к другой в каком-либо объекте-владельце файлов.
// Выполняется последовательно для каждого элемента объекта-владельца файлов
// (элемента справочника, ПВХ, документа и т.п.).
//
// Параметры:
//   ВладелецФайлов - Ссылка на владельца файлов.
//
Процедура СконвертироватьФайлыВПрисоединенные(Знач ВладелецФайлов, ИмяСправочника = Неопределено) Экспорт
	
	Если Не ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСФайлами") Тогда
		Возврат;
	КонецЕсли;
	
	МодульРаботаСФайламиСлужебныйВызовСервера = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("РаботаСФайламиСлужебныйВызовСервера");
	
	ЗаголовокОшибки = НСтр("ru = 'Ошибка при конвертации присоединенных файлов подсистемы Работа с файлами
	                             |в присоединенные файлы подсистемы Присоединенные файлы.'");
	
	ИмяСправочника = ПрисоединенныеФайлыСлужебный.ИмяСправочникаХраненияФайлов(
		ВладелецФайлов, ИмяСправочника, ЗаголовокОшибки);
		
	УстановитьПривилегированныйРежим(Истина);
	
	ФайлыИсточник = МодульРаботаСФайламиСлужебныйВызовСервера.ПолучитьВсеПодчиненныеФайлы(ВладелецФайлов);
	
	МенеджерПрисоединенныхФайлов = Справочники[ИмяСправочника];
	
	НачатьТранзакцию();
	
	Попытка
		
		Для Каждого ФайлИсточник Из ФайлыИсточник Цикл
			ФайлИсточникОбъект = ФайлИсточник.ПолучитьОбъект();
			ТекущаяВерсияОбъект = ФайлИсточникОбъект.ТекущаяВерсия.ПолучитьОбъект();
			
			СсылкаНового = МенеджерПрисоединенныхФайлов.ПолучитьСсылку();
			ПрисоединенныйФайл = МенеджерПрисоединенныхФайлов.СоздатьЭлемент();
			ПрисоединенныйФайл.УстановитьСсылкуНового(СсылкаНового);
			
			ПрисоединенныйФайл.ВладелецФайла                = ВладелецФайлов;
			ПрисоединенныйФайл.Наименование                 = ФайлИсточникОбъект.Наименование;
			ПрисоединенныйФайл.Автор                        = ФайлИсточникОбъект.Автор;
			ПрисоединенныйФайл.ДатаМодификацииУниверсальная = ТекущаяВерсияОбъект.ДатаМодификацииУниверсальная;
			ПрисоединенныйФайл.ДатаСоздания                 = ФайлИсточникОбъект.ДатаСоздания;
			
			ПрисоединенныйФайл.Зашифрован                   = ФайлИсточникОбъект.Зашифрован;
			ПрисоединенныйФайл.Изменил                      = ТекущаяВерсияОбъект.Автор;
			ПрисоединенныйФайл.Описание                     = ФайлИсточникОбъект.Описание;
			ПрисоединенныйФайл.ПодписанЭЦП                  = ФайлИсточникОбъект.ПодписанЭЦП;
			ПрисоединенныйФайл.Размер                       = ТекущаяВерсияОбъект.Размер;
			
			ПрисоединенныйФайл.Расширение                   = ТекущаяВерсияОбъект.Расширение;
			ПрисоединенныйФайл.Редактирует                  = ФайлИсточникОбъект.Редактирует;
			ПрисоединенныйФайл.ТекстХранилище               = ФайлИсточникОбъект.ТекстХранилище;
			ПрисоединенныйФайл.ТипХраненияФайла             = ТекущаяВерсияОбъект.ТипХраненияФайла;
			ПрисоединенныйФайл.ПометкаУдаления              = ФайлИсточникОбъект.ПометкаУдаления;
			
			// Если файл хранится на томе - делается ссылка на существующий файл.
			ПрисоединенныйФайл.Том                          = ТекущаяВерсияОбъект.Том;
			ПрисоединенныйФайл.ПутьКФайлу                   = ТекущаяВерсияОбъект.ПутьКФайлу;
			
			Для Каждого СертификатШифрованияСтрока Из ФайлИсточникОбъект.СертификатыШифрования Цикл
				НоваяСтрока = ПрисоединенныйФайл.СертификатыШифрования.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СертификатШифрованияСтрока);
			КонецЦикла;
			
			Для Каждого ЭЦПСтрока Из ТекущаяВерсияОбъект.ЭлектронныеЦифровыеПодписи Цикл
				НоваяСтрока = ПрисоединенныйФайл.ЭлектронныеЦифровыеПодписи.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭЦПСтрока);
			КонецЦикла;
			
			ПрисоединенныйФайл.Записать();
			
			Если ПрисоединенныйФайл.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВИнформационнойБазе Тогда
				
				// "Вычислить" применяется для случая, когда подсистема РаботаСФайлами отсутствует в конфигурации.
				ХранилищеФайла = Вычислить("РаботаСФайламиСлужебныйВызовСервера.ПолучитьХранилищеФайлаИзИнформационнойБазы(ТекущаяВерсияОбъект.Ссылка)");
				ДвоичныеДанные = ХранилищеФайла.Получить();
				
				МенеджерЗаписи = РегистрыСведений.ПрисоединенныеФайлы.СоздатьМенеджерЗаписи();
				МенеджерЗаписи.ПрисоединенныйФайл = СсылкаНового;
				МенеджерЗаписи.Прочитать();
				МенеджерЗаписи.ПрисоединенныйФайл = СсылкаНового;
				МенеджерЗаписи.ХранимыйФайл = Новый ХранилищеЗначения(ДвоичныеДанные, Новый СжатиеДанных(9));
				МенеджерЗаписи.Записать();
			КонецЕсли;
			
			ТекущаяВерсияОбъект.ПометкаУдаления = Истина;
			ФайлИсточникОбъект.ПометкаУдаления = Истина;
			
			// Удаление ссылок на том в старом файле, что бы при удалении, файлы остались на месте.
			Если ТекущаяВерсияОбъект.ТипХраненияФайла = Перечисления.ТипыХраненияФайлов.ВТомахНаДиске Тогда
				ТекущаяВерсияОбъект.ПутьКФайлу = "";
				ТекущаяВерсияОбъект.Том = Справочники.ТомаХраненияФайлов.ПустаяСсылка();
				ФайлИсточникОбъект.ТекущаяВерсияПутьКФайлу = "";
				ФайлИсточникОбъект.ТекущаяВерсияТом = "";
				ПометитьНаУдалениеВерсииФайла(ФайлИсточникОбъект.Ссылка, ТекущаяВерсияОбъект.Ссылка);
			КонецЕсли;
			
			ТекущаяВерсияОбъект.ДополнительныеСвойства.Вставить("КонвертацияФайлов", Истина);
			ТекущаяВерсияОбъект.Записать();
			
			ФайлИсточникОбъект.ДополнительныеСвойства.Вставить("КонвертацияФайлов", Истина);
			ФайлИсточникОбъект.Записать();
			
		КонецЦикла;
		
	Исключение
		ИнформацияОбОшибке = ИнформацияОбОшибке();
		ОтменитьТранзакцию();
		ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);
	КонецПопытки;
	
	ЗафиксироватьТранзакцию();
	
КонецПроцедуры

// Возвращает ссылки на объекты с файлами из подсистемы Работа с файлами.
// Требует наличия подсистемы Работа с файлами.
//
// Используется совместно с функцией СконвертироватьФайлыВПрисоединенные.
//
// Параметры:
//  ТаблицаВладельцевФайлов - Строка - полное имя объекта метаданных,
//                            который может владеть присоединенными файлами.
//
Функция СсылкиНаОбъектыСФайлами(Знач ТаблицаВладельцевФайлов) Экспорт
	
	Если Не ОбщегоНазначенияКлиентСервер.ПодсистемаСуществует("СтандартныеПодсистемы.РаботаСФайлами") Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	МодульРаботаСФайламиСлужебный = ОбщегоНазначенияКлиентСервер.ОбщийМодуль("РаботаСФайламиСлужебный");
	
	Возврат МодульРаботаСФайламиСлужебный.СсылкиНаОбъектыСФайлами(ТаблицаВладельцевФайлов);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры, подключаемые к событиям управляемых форм

// Обработчик подписки владельца присоединенного файла на событие "При записи на сервере".
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи, Параметры) Экспорт
	
	Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		
		ПрисоединенныеФайлыСлужебный.СкопироватьПрисоединенныеФайлы(
			Параметры.ЗначениеКопирования, ТекущийОбъект);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Операции с ЭЦП

// Заносит информацию о одной ЭЦП.
//
// Параметры:
//  ПрисоединенныйФайл - Ссылка или Объект присоединенного файла.
//  ДанныеПодписи      - Структура для заполнения в табличной части ЭлектронныеЦифровыеПодписи.
//
Процедура ЗанестиИнформациюОднойПодписи(Знач ПрисоединенныйФайл, Знач ДанныеПодписи) Экспорт
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ПрисоединенныйФайл)) Тогда
		СтруктураРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПрисоединенныйФайл, "Редактирует, Зашифрован");
		ПрисоединенныйФайлСсылка = ПрисоединенныйФайл;
	Иначе
		СтруктураРеквизитов = Новый Структура("Редактирует, Зашифрован");
		СтруктураРеквизитов.Редактирует = ПрисоединенныйФайл.Редактирует;
		СтруктураРеквизитов.Зашифрован  = ПрисоединенныйФайл.Зашифрован;
		ПрисоединенныйФайлСсылка = ПрисоединенныйФайл.Ссылка;
	КонецЕсли;
	
	Если НЕ СтруктураРеквизитов.Редактирует.Пустая() Тогда
		ВызватьИсключение ФайловыеФункцииСлужебныйКлиентСервер.СтрокаСообщенияОНедопустимостиПодписанияЗанятогоФайла(ПрисоединенныйФайлСсылка);
	КонецЕсли;
	
	Если СтруктураРеквизитов.Зашифрован Тогда
		ВызватьИсключение ФайловыеФункцииСлужебныйКлиентСервер.СтрокаСообщенияОНедопустимостиПодписанияЗашифрованногоФайла(ПрисоединенныйФайлСсылка);
	КонецЕсли;

	ЭлектроннаяЦифроваяПодпись.ЗанестиИнформациюОПодписи(
		ПрисоединенныйФайл,
		ДанныеПодписи.НоваяПодписьДвоичныеДанные,
		ДанныеПодписи.Отпечаток,
		ДанныеПодписи.ДатаПодписи,
		ДанныеПодписи.Комментарий,
		ДанныеПодписи.ИмяФайлаПодписи,
		ДанныеПодписи.КомуВыданСертификат,
		ДанныеПодписи.ДвоичныеДанныеСертификата);
	
КонецПроцедуры

// Заносит информацию о массиве ЭЦП.
//
// Параметры:
//  ПрисоединенныйФайл - Ссылка или Объект присоединенного файла.
//  МассивПодписей     - Массив Структур данных подписей для заполнения в табличной части ЭлектронныеЦифровыеПодписи.
//
Процедура ЗанестиИнформациюОПодписях(Знач ПрисоединенныйФайл,
                                     Знач МассивПодписей) Экспорт
	
	Если ОбщегоНазначения.ЭтоСсылка(ТипЗнч(ПрисоединенныйФайл)) Тогда
		ФайлОбъект = ПрисоединенныйФайл.ПолучитьОбъект();
		ФайлОбъект.Заблокировать();
		ФайлСсылка = ПрисоединенныйФайл;
	Иначе
		ФайлОбъект = ПрисоединенныйФайл;
		ФайлСсылка = ПрисоединенныйФайл.Ссылка;
	КонецЕсли;
	
	Редактирует = ФайлОбъект.Редактирует;
	Зашифрован  = ФайлОбъект.Зашифрован;

	Если НЕ Редактирует.Пустая() Тогда
		ВызватьИсключение
			ФайловыеФункцииСлужебныйКлиентСервер.СтрокаСообщенияОНедопустимостиПодписанияЗанятогоФайла(
				ФайлСсылка);
	КонецЕсли;
	
	Если Зашифрован Тогда
		ВызватьИсключение
			ФайловыеФункцииСлужебныйКлиентСервер.СтрокаСообщенияОНедопустимостиПодписанияЗашифрованногоФайла(
				ФайлСсылка);
	КонецЕсли;
		
	Для Каждого ДанныеПодписи Из МассивПодписей Цикл
		
		ЭлектроннаяЦифроваяПодпись.ЗанестиИнформациюОПодписи(
			ФайлОбъект,
			ДанныеПодписи.НоваяПодписьДвоичныеДанные,
			ДанныеПодписи.Отпечаток,
			ДанныеПодписи.ДатаПодписи,
			ДанныеПодписи.Комментарий,
			ДанныеПодписи.ИмяФайлаПодписи,
			ДанныеПодписи.КомуВыданСертификат,
			ДанныеПодписи.ДвоичныеДанныеСертификата);
	КонецЦикла;
	
	ФайлОбъект.Записать();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Обработчики подписок на события

// Обработчик подписки присоединенного файла на событие "Перед записью".
Процедура ВыполнитьДействияПередЗаписьюПрисоединенногоФайла(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Источник.ИндексКартинки = ФайловыеФункцииСлужебныйКлиентСервер.ПолучитьИндексПиктограммыФайла(Источник.Расширение);
	
	Если Источник.ЭтоНовый() Тогда
		Источник.Автор = Пользователи.ТекущийПользователь();
	КонецЕсли;
	
КонецПроцедуры

// Обработчик подписки присоединенного файла на событие "Перед удалением".
Процедура ВыполнитьДействияПередУдалениемПрисоединенногоФайла(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ПрисоединенныеФайлыСлужебный.ПередУдалениемПрисоединенногоФайлаСервер(
		Источник.Ссылка,
		Источник.ВладелецФайла,
		Источник.Том,
		Источник.ТипХраненияФайла,
		Источник.ПутьКФайлу);
	
КонецПроцедуры

// Обработчик подписки присоединенного файла на событие "При записи".
Процедура ВыполнитьДействияПриЗаписиПрисоединенногоФайла(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		ЗаписатьДанныеФайлаВРегистрПриОбмене(Источник);
		Возврат;
	КонецЕсли;
	
	ПрисоединенныеФайлыСлужебный.ПриЗаписиПрисоединенногоФайлаСервер(
		Источник.ВладелецФайла);
		
	ПрисоединенныеФайлыСлужебный.ПриОбновленииСостоянияОчередиИзвлеченияТекста(
		Источник.Ссылка, Источник.СтатусИзвлеченияТекста);
	
КонецПроцедуры

// Обработчик подписки присоединенного файла на событие "Обработка получения формы".
Процедура ПереопределитьПолучаемуюФормуПрисоединенногоФайла(Источник,
                                                      ВидФормы,
                                                      Параметры,
                                                      ВыбраннаяФорма,
                                                      ДополнительнаяИнформация,
                                                      СтандартнаяОбработка) Экспорт
	
	Если ВидФормы = "ФормаОбъекта" Тогда
		ВыбраннаяФорма = "ОбщаяФорма.ПрисоединенныйФайл";
		СтандартнаяОбработка = Ложь;
		
	ИначеЕсли ВидФормы = "ФормаСписка" Тогда
		ВыбраннаяФорма = "ОбщаяФорма.ПрисоединенныеФайлы";
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры

// Обработчик подписки владельца присоединенного файла на событие "Перед записью".
// Помечает на удаление связанные файлы.
//
// Параметры:
//  Источник - Объект - владелец присоединенного файла, кроме ДокументОбъект.
//  Отказ    - Булево - признак отказа от записи.
// 
Процедура УстановитьПометкуУдаленияПрисоединенныхФайлов(Источник, Отказ) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ПометитьНаУдалениеПрисоединенныеФайлы(Источник);
	
КонецПроцедуры

// Обработчик подписки владельца-документа присоединенного файла на событие "Перед записью".
// Помечает на удаление связанные файлы.
//
// Параметры:
//  Источник - ДокументОбъект - владелец присоединенного файла.
//  Отказ    - Булево - признак отказа от записи.
// 
Процедура УстановитьПометкуУдаленияПрисоединенныхФайловДокументов(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	
	Если Источник.ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ПометитьНаУдалениеПрисоединенныеФайлы(Источник);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры и функции

// Возвращает текст сообщения об ошибке, добавляя к нему ссылку на элемент
// справочника хранимого файла.
//
Функция ТекстОшибкиПриПолученииФайла(Знач ИнформацияОбОшибке, Знач Файл)
	
	СообщениеОбОшибке = КраткоеПредставлениеОшибки(ИнформацияОбОшибке);
	
	Если Файл <> Неопределено Тогда
		СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1
			           |
			           |Ссылка на файл: ""%2"".'"),
			СообщениеОбОшибке,
			ПолучитьНавигационнуюСсылку(Файл) );
	КонецЕсли;
	
	Возврат СообщениеОбОшибке;
	
КонецФункции

// Возвращает идентификатор владельца присоединенного файла.
Функция ПолучитьИдентификаторОбъекта(Знач ВладелецФайлов)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	НаличиеПрисоединенныхФайлов.ИдентификаторОбъекта
	|ИЗ
	|	РегистрСведений.НаличиеПрисоединенныхФайлов КАК НаличиеПрисоединенныхФайлов
	|ГДЕ
	|	НаличиеПрисоединенныхФайлов.ОбъектСФайлами = &ОбъектСФайлами";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("ОбъектСФайлами", ВладелецФайлов);
	РезультатВыполнения = Запрос.Выполнить();
	
	Если РезультатВыполнения.Пустой() Тогда
		Возврат "";
	КонецЕсли;
	
	Выборка = РезультатВыполнения.Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.ИдентификаторОбъекта;
	
КонецФункции

Процедура ПометитьНаУдалениеПрисоединенныеФайлы(Знач Источник, ИмяСправочника = Неопределено)
	
	Если Источник.ЭтоНовый() ТОгда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИсточникСсылкаПометкаУдаления = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Источник.Ссылка, "ПометкаУдаления");
	
	Если Источник.ПометкаУдаления = ИсточникСсылкаПометкаУдаления Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		ИменаСправочников = ПрисоединенныеФайлыСлужебный.ИменаСправочниковХраненияФайлов(
			ТипЗнч(Источник.Ссылка));
	Исключение
		ПредставлениеОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		ВызватьИсключение НСтр("ru = 'Ошибка при пометке на удаление присоединенных файлов.'")
			+ Символы.ПС
			+ ПредставлениеОшибки;
	КонецПопытки;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВладелецФайла", Источник.Ссылка);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Файлы.Ссылка КАК Ссылка,
	|	Файлы.Редактирует КАК Редактирует
	|ИЗ
	|	&ИмяСправочника КАК Файлы
	|ГДЕ
	|	Файлы.ВладелецФайла = &ВладелецФайла";
	
	Для каждого ОписаниеИмениСправочника Из ИменаСправочников Цикл
		
		ПолноеИмяСправочника = "Справочник." + ОписаниеИмениСправочника.Ключ;
		Запрос.Текст = СтрЗаменить(ТекстЗапроса, "&ИмяСправочника", ПолноеИмяСправочника);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Если Источник.ПометкаУдаления И Не Выборка.Редактирует.Пустая() Тогда
				ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = '""%1"" не может быть удален,
					           |т.к. содержит присоединенный файл ""%2"",
					           |занятый для редактирования.'"),
					Строка(Источник.Ссылка),
					Строка(Выборка.Ссылка));
			КонецЕсли;
			ФайлОбъект = Выборка.Ссылка.ПолучитьОбъект();
			ФайлОбъект.Заблокировать();
			ФайлОбъект.УстановитьПометкуУдаления(Источник.ПометкаУдаления);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаписатьДанныеФайлаВРегистрПриОбмене(Знач Источник)
	
	Перем ДвоичныеДанныеФайла;
	
	Если Источник.ДополнительныеСвойства.Свойство("ДвоичныеДанныеФайла", ДвоичныеДанныеФайла) Тогда
		НаборЗаписей = РегистрыСведений.ПрисоединенныеФайлы.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ПрисоединенныйФайл.Использование = Истина;
		НаборЗаписей.Отбор.ПрисоединенныйФайл.Значение = Источник.Ссылка;
		
		Запись = НаборЗаписей.Добавить();
		Запись.ПрисоединенныйФайл = Источник.Ссылка;
		Запись.ХранимыйФайл = Новый ХранилищеЗначения(ДвоичныеДанныеФайла, Новый СжатиеДанных(9));
		
		НаборЗаписей.ОбменДанными.Загрузка = Истина;
		НаборЗаписей.Записать();
		
		Источник.ДополнительныеСвойства.Удалить("ДвоичныеДанныеФайла");
	КонецЕсли;
	
КонецПроцедуры

// Переносит файлы из "Работы с файлами" в "Присоединенные файлы".
Процедура ПометитьНаУдалениеВерсииФайла(Знач ФайлСсылка, Знач ВерсияИсключение)
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ВерсииФайлов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВерсииФайлов КАК ВерсииФайлов
	|ГДЕ
	|	ВерсииФайлов.Владелец = &Владелец
	|	И НЕ ВерсииФайлов.ПометкаУдаления
	|	И ВерсииФайлов.Ссылка <> &Исключение";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Владелец", ФайлСсылка);
	Запрос.УстановитьПараметр("Исключение", ВерсияИсключение);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ВерсияОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ВерсияОбъект.ПометкаУдаления = Истина;
		ВерсияОбъект.ДополнительныеСвойства.Вставить("КонвертацияФайлов", Истина);
		ВерсияОбъект.Записать();
		
	КонецЦикла;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// УСТАРЕВШИЕ ПРОЦЕДУРЫ И ФУНКЦИИ


// Устарела. Следует использовать ВыполнитьДействияПередЗаписьюПрисоединенногоФайла.
Процедура ПередЗаписьюПрисоединенногоФайла(Источник, Отказ) Экспорт
	
	ВыполнитьДействияПередЗаписьюПрисоединенногоФайла(Источник, Отказ);
	
КонецПроцедуры

// Устарела. Следует использовать ВыполнитьДействияПередУдалениемПрисоединенногоФайла.
Процедура ПередУдалениемПрисоединенногоФайла(Источник, Отказ) Экспорт
	
	ВыполнитьДействияПередУдалениемПрисоединенногоФайла(Источник, Отказ);
	
КонецПроцедуры

// Устарела. Следует использовать ВыполнитьДействияПриЗаписиПрисоединенногоФайла.
Процедура ПриЗаписиПрисоединенногоФайла(Источник, Отказ) Экспорт
	
	ВыполнитьДействияПриЗаписиПрисоединенногоФайла(Источник, Отказ);
	
КонецПроцедуры

// Устарела. Следует использовать ПереопределитьПолучаемуюФормуПрисоединенногоФайла.
Процедура ОбработкаПолученияФормыПрисоединенногоФайла(Источник,
                                                      ВидФормы,
                                                      Параметры,
                                                      ВыбраннаяФорма,
                                                      ДополнительнаяИнформация,
                                                      СтандартнаяОбработка) Экспорт
	
	ПереопределитьПолучаемуюФормуПрисоединенногоФайла(Источник, ВидФормы, Параметры,
		ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка);

КонецПроцедуры

// Устарела. Следует использовать подписку на событие ОбработкаПолученияФормы.
// см. ПрисоединенныеФайлы.ПереопределитьПолучаемуюФормуПрисоединенногоФайла
//
// Настраивает форму присоединенного файла ПриСозданииНаСервере.
Процедура ПриСозданииНаСервереПрисоединенныйФайл(Знач Форма) Экспорт
	
	Если Форма.Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если НЕ Форма.Параметры.Свойство("Ключ", Форма.Ключ) Тогда
		Форма.Ключ = Форма.Параметры.Key;
	КонецЕсли;
	
	Форма.АвтоЗаголовок = Ложь;
	Форма.Заголовок = НСтр("ru = 'Присоединенный файл'");
	
	Команда = Форма.Команды.Добавить("ПерейтиКФормеФайла");
	Команда.Действие = "Подключаемый_ПерейтиКФормеФайла";
	
	Декорация = Форма.Элементы.Добавить("ПоясняющийТекст", Тип("ДекорацияФормы"));
	Декорация.Заголовок = НСтр("ru = 'Для того, чтобы перейти к карточке файла, нажмите на гиперссылку'");
	
	Кнопка = Форма.Элементы.Добавить("ПерейтиКФормеФайла1", Тип("КнопкаФормы"));
	Кнопка.Вид        = ВидКнопкиФормы.Гиперссылка;
	Кнопка.Заголовок  = НСтр("ru = 'Перейти к форме файла'");
	Кнопка.ИмяКоманды = "ПерейтиКФормеФайла";
	
КонецПроцедуры

// Устарела. Использовать не следует.
// Вызывает исключение в стандартной форме списка справочника присоединенных файлов.
Процедура ВызватьИсключениеОткрытияФормы(Форма) Экспорт
	
	Если Форма.Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ВызватьИсключение НСтр("ru = 'Самостоятельное использование формы не предусмотрено.'");
	
КонецПроцедуры
