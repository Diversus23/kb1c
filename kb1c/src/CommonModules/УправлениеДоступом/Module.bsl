////////////////////////////////////////////////////////////////////////////////
// Подсистема "Управление доступом".
// 
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// ПРОГРАММНЫЙ ИНТЕРФЕЙС

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции, используемые для проверки прав

// Проверяет, что у пользователя есть роль в одном из профилей
// тех групп доступа в которых он участвует, например,
// роль ПросмотрЖурналаРегистрации, роль ПечатьНепроведенныхДокументов.
//
// Если указан объект, тогда дополнительно проверяет, что группа доступа
// в профиле которой есть указанная роль также предоставляет право Чтение
// указанного объекта.
//
// Параметры:
//  Роль           - Строка - имя роли.
//
//  СсылкаНаОбъект - Ссылка на объект для которого заполняются наборы значений доступа
//                   для проверки права Чтение.
//                 - ТаблицаЗначений(НомерНабора, ВидДоступа, ЗначениеДоступа) - произвольная
//                   таблица наборов значений доступа.
//                   Пустую подготовленную таблицу можно получить с помощью функции
//                   УправлениеДоступом.ТаблицаНаборыЗначенийДоступа() - колонки
//                   Чтение, Изменение, Добавление, Удаление не заполнять.
//
//  Пользователь   - СправочникСсылка.Пользователи, СправочникСсылка.ВнешниеПользователи, Неопределено.
//                   Если не заполнено, тогда право проверяется для текущего пользователя.
//
// Возвращаемое значение:
//  Булево.
//
Функция ЕстьРоль(Знач Роль, Знач НаборыЗначенийДоступа = Неопределено, Знач Пользователь = Неопределено) Экспорт
	
	Пользователь = ?(ЗначениеЗаполнено(Пользователь), Пользователь, Пользователи.АвторизованныйПользователь());
	Если Пользователи.ЭтоПолноправныйПользователь(Пользователь) Тогда
		Возврат Истина;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("Роль",         Роль);
	
	Если НаборыЗначенийДоступа = Неопределено ИЛИ НЕ ОграничиватьДоступНаУровнеЗаписей() Тогда
		// Проверка, что роль назначается пользователю через группу доступа по профилю.
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК ЗначениеИстина
		|ИЗ
		|	Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
		|		ПО (СоставыГруппПользователей.Пользователь = &Пользователь)
		|			И (СоставыГруппПользователей.ГруппаПользователей = ГруппыДоступаПользователи.Пользователь)
		|			И (СоставыГруппПользователей.Используется)
		|			И (НЕ ГруппыДоступаПользователи.Ссылка.ПометкаУдаления)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПрофилиГруппДоступа.Роли КАК ПрофилиГруппДоступаРоли
		|		ПО ГруппыДоступаПользователи.Ссылка.Профиль = ПрофилиГруппДоступаРоли.Ссылка
		|			И (ПрофилиГруппДоступаРоли.Роль.Имя = &Роль)
		|			И (НЕ ПрофилиГруппДоступаРоли.Ссылка.ПометкаУдаления)";
	Иначе
		
		Если ТипЗнч(НаборыЗначенийДоступа) <> Тип("ТаблицаЗначений") Тогда
			СсылкаНаОбъект        = НаборыЗначенийДоступа;
			НаборыЗначенийДоступа = ТаблицаНаборыЗначенийДоступа();
			СсылкаНаОбъект.ПолучитьОбъект().ЗаполнитьНаборыЗначенийДоступа(НаборыЗначенийДоступа);
			// Выбор только наборов значений доступа предназначенных для проверки права Чтение.
			СтрокиНаборовЧтения = НаборыЗначенийДоступа.НайтиСтроки(Новый Структура("Чтение", Истина));
			НомераНаборов = Новый Соответствие;
			Для каждого Строка Из СтрокиНаборовЧтения Цикл
				НомераНаборов.Вставить(Строка.НомерНабора, Истина);
			КонецЦикла;
			Индекс = НаборыЗначенийДоступа.Количество()-1;
			Пока Индекс > 0 Цикл
				Если НомераНаборов[НаборыЗначенийДоступа[Индекс].НомерНабора] = Неопределено Тогда
					НаборыЗначенийДоступа.Удалить(Индекс);
				КонецЕсли;
				Индекс = Индекс - 1;
			КонецЦикла;
			НаборыЗначенийДоступа.ЗаполнитьЗначения(Ложь, "Чтение, Изменение, Добавление, Удаление") ;
		КонецЕсли;
		
		// Проверка, что роль назначается пользователю через группу доступа по профилю с разрешенными наборами значений доступа.
		
		Запрос.УстановитьПараметр("НаборыЗначенийДоступа", НаборыЗначенийДоступа);
		Запрос.УстановитьПараметр("СвойстваВидовДоступа",  УправлениеДоступомСлужебный.СвойстваВидаДоступа());
		Запрос.УстановитьПараметр("ВидДоступаПользователи", ?(ТипЗнч(Пользователь) = Тип("СправочникСсылка.Пользователи"),
		                                                      ПланыВидовХарактеристик.ВидыДоступа.Пользователи,
		                                                      ПланыВидовХарактеристик.ВидыДоступа.ВнешниеПользователи));
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НаборыЗначенийДоступа.НомерНабора,
		|	НаборыЗначенийДоступа.ВидДоступа,
		|	НаборыЗначенийДоступа.ЗначениеДоступа
		|ПОМЕСТИТЬ НаборыЗначенийДоступаБезСвойств
		|ИЗ
		|	&НаборыЗначенийДоступа КАК НаборыЗначенийДоступа
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	СвойстваВидовДоступа.ВидДоступа,
		|	СвойстваВидовДоступа.ВидДоступаБезГруппЗначенияДоступа,
		|	СвойстваВидовДоступа.ВидДоступаЕдинственныйДляТипаЗначенияДоступа,
		|	СвойстваВидовДоступа.ВидДоступаЧерезПраваПоЗначениямДоступа
		|ПОМЕСТИТЬ СвойстваВидовДоступа
		|ИЗ
		|	&СвойстваВидовДоступа КАК СвойстваВидовДоступа
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НаборыЗначенийДоступа.НомерНабора,
		|	НаборыЗначенийДоступа.ВидДоступа,
		|	НаборыЗначенийДоступа.ЗначениеДоступа,
		|	СвойстваВидовДоступа.ВидДоступаБезГруппЗначенияДоступа,
		|	СвойстваВидовДоступа.ВидДоступаЕдинственныйДляТипаЗначенияДоступа,
		|	СвойстваВидовДоступа.ВидДоступаЧерезПраваПоЗначениямДоступа,
		|	ВЫБОР
		|		КОГДА НаборыЗначенийДоступа.ВидДоступа В (ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.ПравоЧтения), ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.ПравоДобавления), ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.ПравоИзменения))
		|			ТОГДА ЕСТЬNULL(Идентификаторы.ЗначениеПустойСсылки, НЕОПРЕДЕЛЕНО)
		|		ИНАЧЕ НЕОПРЕДЕЛЕНО
		|	КОНЕЦ КАК ТипЗначенияДоступа,
		|	Идентификаторы.Ссылка КАК Таблица
		|ПОМЕСТИТЬ НаборыЗначенийДоступа
		|ИЗ
		|	НаборыЗначенийДоступаБезСвойств КАК НаборыЗначенийДоступа
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ИдентификаторыОбъектовМетаданных КАК Идентификаторы
		|		ПО (ТИПЗНАЧЕНИЯ(НаборыЗначенийДоступа.ЗначениеДоступа) = ТИПЗНАЧЕНИЯ(Идентификаторы.ЗначениеПустойСсылки))
		|		ЛЕВОЕ СОЕДИНЕНИЕ СвойстваВидовДоступа КАК СвойстваВидовДоступа
		|		ПО НаборыЗначенийДоступа.ВидДоступа = СвойстваВидовДоступа.ВидДоступа
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ГруппыДоступаПользователи.Ссылка КАК ГруппаДоступа
		|ПОМЕСТИТЬ ГруппыДоступа
		|ИЗ
		|	Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
		|		ПО (СоставыГруппПользователей.Пользователь = &Пользователь)
		|			И (СоставыГруппПользователей.ГруппаПользователей = ГруппыДоступаПользователи.Пользователь)
		|			И (СоставыГруппПользователей.Используется)
		|			И (НЕ ГруппыДоступаПользователи.Ссылка.ПометкаУдаления)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПрофилиГруппДоступа.Роли КАК ПрофилиГруппДоступаРоли
		|		ПО ГруппыДоступаПользователи.Ссылка.Профиль = ПрофилиГруппДоступаРоли.Ссылка
		|			И (ПрофилиГруппДоступаРоли.Роль.Имя = &Роль)
		|			И (НЕ ПрофилиГруппДоступаРоли.Ссылка.ПометкаУдаления)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИСТИНА КАК ЗначениеИстина
		|ИЗ
		|	ГруппыДоступа КАК ГруппыДоступа
		|ГДЕ
		|	ИСТИНА В
		|			(ВЫБРАТЬ ПЕРВЫЕ 1
		|				ИСТИНА
		|			ИЗ
		|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|					Наборы.НомерНабора
		|				ИЗ
		|					НаборыЗначенийДоступа КАК Наборы
		|				) КАК НомераНаборов
		|			ГДЕ
		|				НЕ ЛОЖЬ В
		|						(ВЫБРАТЬ ПЕРВЫЕ 1
		|							ЛОЖЬ
		|						ИЗ
		|							НаборыЗначенийДоступа КАК НаборыЗначений
		|						ГДЕ
		|							НаборыЗначений.НомерНабора = НомераНаборов.НомерНабора
		|							И НЕ ВЫБОР
		|									КОГДА НаборыЗначений.ВидДоступа = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.ПустаяСсылка)
		|										ТОГДА НаборыЗначений.ЗначениеДоступа <> НЕОПРЕДЕЛЕНО
		|									КОГДА НаборыЗначений.ВидДоступа = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.ПравоЧтения)
		|										ТОГДА ИСТИНА В
		|												(ВЫБРАТЬ ПЕРВЫЕ 1
		|													ИСТИНА
		|												ИЗ
		|													РегистрСведений.ТаблицыГруппДоступа КАК ТаблицыГруппДоступаПроверкаПраваНаОбъект
		|												ГДЕ
		|													ТаблицыГруппДоступаПроверкаПраваНаОбъект.ГруппаДоступа = ГруппыДоступа.ГруппаДоступа
		|													И ТИПЗНАЧЕНИЯ(ТаблицыГруппДоступаПроверкаПраваНаОбъект.ТипТаблицы) = ТИПЗНАЧЕНИЯ(НаборыЗначений.ЗначениеДоступа))
		|									КОГДА НаборыЗначений.ВидДоступа = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.ПравоДобавления)
		|										ТОГДА ИСТИНА В
		|												(ВЫБРАТЬ ПЕРВЫЕ 1
		|													ИСТИНА
		|												ИЗ
		|													РегистрСведений.ТаблицыГруппДоступа КАК ТаблицыГруппДоступаПроверкаПраваНаОбъект
		|												ГДЕ
		|													ТаблицыГруппДоступаПроверкаПраваНаОбъект.ГруппаДоступа = ГруппыДоступа.ГруппаДоступа
		|													И ТИПЗНАЧЕНИЯ(ТаблицыГруппДоступаПроверкаПраваНаОбъект.ТипТаблицы) = ТИПЗНАЧЕНИЯ(НаборыЗначений.ЗначениеДоступа)
		|													И ТаблицыГруппДоступаПроверкаПраваНаОбъект.Добавление = ИСТИНА)
		|									КОГДА НаборыЗначений.ВидДоступа = ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыДоступа.ПравоИзменения)
		|										ТОГДА ИСТИНА В
		|												(ВЫБРАТЬ ПЕРВЫЕ 1
		|													ИСТИНА
		|												ИЗ
		|													РегистрСведений.ТаблицыГруппДоступа КАК ТаблицыГруппДоступаПроверкаПраваНаОбъект
		|												ГДЕ
		|													ТаблицыГруппДоступаПроверкаПраваНаОбъект.ГруппаДоступа = ГруппыДоступа.ГруппаДоступа
		|													И ТИПЗНАЧЕНИЯ(ТаблицыГруппДоступаПроверкаПраваНаОбъект.ТипТаблицы) = ТИПЗНАЧЕНИЯ(НаборыЗначений.ЗначениеДоступа)
		|													И ТаблицыГруппДоступаПроверкаПраваНаОбъект.Изменение = ИСТИНА)
		|									КОГДА НаборыЗначений.ВидДоступаЧерезПраваПоЗначениямДоступа
		|										ТОГДА ИСТИНА В
		|													(ВЫБРАТЬ ПЕРВЫЕ 1
		|														ИСТИНА
		|													ИЗ
		|														РегистрСведений.ПраваПоЗначениямДоступа КАК ПраваПоЗначениям ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГруппыЗначенийДоступа КАК ИерархияЗначений
		|															ПО
		|																ИерархияЗначений.ИспользоватьПраваСсылки
		|																	И ИерархияЗначений.ВидДоступа = НаборыЗначений.ВидДоступа
		|																	И ИерархияЗначений.ЗначениеДоступа = НаборыЗначений.ЗначениеДоступа
		|																	И ПраваПоЗначениям.Таблица = НаборыЗначений.Таблица
		|																	И ПраваПоЗначениям.ЗначениеДоступа = ИерархияЗначений.ГруппаЗначенийДоступа
		|																	И ПраваПоЗначениям.Чтение
		|																	И ПраваПоЗначениям.РаспространяетсяВИерархии >= ИерархияЗначений.СвязьСРодителем ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
		|															ПО
		|																СоставыГруппПользователей.Пользователь = &Пользователь
		|																	И СоставыГруппПользователей.ГруппаПользователей = ПраваПоЗначениям.Пользователь
		|																	И СоставыГруппПользователей.Используется)
		|												И НЕ ЛОЖЬ В
		|														(ВЫБРАТЬ ПЕРВЫЕ 1
		|															ЛОЖЬ
		|														ИЗ
		|															РегистрСведений.ПраваПоЗначениямДоступа КАК ПраваПоЗначениям ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГруппыЗначенийДоступа КАК ИерархияЗначений
		|																ПО
		|																	ИерархияЗначений.ИспользоватьПраваСсылки
		|																		И ИерархияЗначений.ВидДоступа = НаборыЗначений.ВидДоступа
		|																		И ИерархияЗначений.ЗначениеДоступа = НаборыЗначений.ЗначениеДоступа
		|																		И ПраваПоЗначениям.Таблица = НаборыЗначений.Таблица
		|																		И ПраваПоЗначениям.ЗначениеДоступа = ИерархияЗначений.ГруппаЗначенийДоступа
		|																		И ПраваПоЗначениям.ЧтениеЗапрещено
		|																		И ПраваПоЗначениям.РаспространяетсяВИерархии >= ИерархияЗначений.СвязьСРодителем ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
		|																ПО
		|																	СоставыГруппПользователей.Пользователь = &Пользователь
		|																		И СоставыГруппПользователей.ГруппаПользователей = ПраваПоЗначениям.Пользователь
		|																		И СоставыГруппПользователей.Используется)
		|									ИНАЧЕ (НаборыЗначений.ВидДоступаЕдинственныйДляТипаЗначенияДоступа
		|											ИЛИ НЕ ИСТИНА В
		|													(ВЫБРАТЬ ПЕРВЫЕ 1
		|														ИСТИНА
		|													ИЗ
		|														РегистрСведений.ГруппыЗначенийДоступа КАК ВидыЗначений
		|													ГДЕ
		|														ВидыЗначений.ВидДоступа = НаборыЗначений.ВидДоступа
		|														И ВидыЗначений.ЗначениеДоступа = НаборыЗначений.ЗначениеДоступа
		|														И ВидыЗначений.ТолькоВидДоступа = ИСТИНА))
		|											И ВЫБОР
		|												КОГДА ВЫБОР
		|															КОГДА НаборыЗначений.ВидДоступа = &ВидДоступаПользователи
		|																ТОГДА ИСТИНА В
		|																		(ВЫБРАТЬ ПЕРВЫЕ 1
		|																			ИСТИНА
		|																		ИЗ
		|																			РегистрСведений.ГруппыЗначенийДоступа КАК ГруппыЗначенийДоступа
		|																		ГДЕ
		|																			ГруппыЗначенийДоступа.ВидДоступа = &ВидДоступаПользователи
		|																			И ГруппыЗначенийДоступа.ЗначениеДоступа = &Пользователь
		|																			И ГруппыЗначенийДоступа.ГруппаЗначенийДоступа = НаборыЗначений.ЗначениеДоступа)
		|															ИНАЧЕ ЛОЖЬ
		|														КОНЕЦ
		|														ИЛИ ВЫБОР
		|															КОГДА НаборыЗначений.ВидДоступаБезГруппЗначенияДоступа
		|																ТОГДА ВЫБОР
		|																		КОГДА ИСТИНА В
		|																				(ВЫБРАТЬ
		|																					ИСТИНА
		|																				ИЗ
		|																					РегистрСведений.ЗначенияГруппДоступа КАК Значения
		|																				ГДЕ
		|																					Значения.ГруппаДоступа = ГруппыДоступа.ГруппаДоступа
		|																					И Значения.ВидДоступа = НаборыЗначений.ВидДоступа
		|																					И Значения.ТолькоВидДоступа = ЛОЖЬ
		|																					И Значения.ЗначениеДоступа = НаборыЗначений.ЗначениеДоступа)
		|																			ТОГДА ИСТИНА
		|																		ИНАЧЕ ЛОЖЬ
		|																	КОНЕЦ
		|															ИНАЧЕ ВЫБОР
		|																	КОГДА ИСТИНА В
		|																			(ВЫБРАТЬ ПЕРВЫЕ 1
		|																				ИСТИНА
		|																			ИЗ
		|																				РегистрСведений.ГруппыЗначенийДоступа КАК ГруппыЗначений ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияГруппДоступа КАК Значения
		|																					ПО
		|																						ГруппыЗначений.ВидДоступа = НаборыЗначений.ВидДоступа
		|																							И ГруппыЗначений.ЗначениеДоступа = НаборыЗначений.ЗначениеДоступа
		|																							И Значения.ГруппаДоступа = ГруппыДоступа.ГруппаДоступа
		|																							И Значения.ВидДоступа = НаборыЗначений.ВидДоступа
		|																							И Значения.ТолькоВидДоступа = ГруппыЗначений.ТолькоВидДоступа
		|																							И Значения.ЗначениеДоступа = ГруппыЗначений.ГруппаЗначенийДоступа)
		|																		ТОГДА ИСТИНА
		|																	ИНАЧЕ ЛОЖЬ
		|																КОНЕЦ
		|														КОНЕЦ = ВЫБОР
		|															КОГДА ИСТИНА В
		|																	(ВЫБРАТЬ
		|																		ИСТИНА
		|																	ИЗ
		|																		РегистрСведений.ЗначенияГруппДоступа КАК Виды
		|																	ГДЕ
		|																		Виды.ГруппаДоступа = ГруппыДоступа.ГруппаДоступа
		|																		И Виды.ВидДоступа = НаборыЗначений.ВидДоступа
		|																		И Виды.ТолькоВидДоступа = ИСТИНА)
		|																ТОГДА ИСТИНА
		|															ИНАЧЕ ЛОЖЬ
		|														КОНЕЦ
		|													ТОГДА ИСТИНА
		|												ИНАЧЕ ЛОЖЬ
		|											КОНЕЦ
		|								КОНЕЦ))";
	КонецЕсли;
	
	Возврат НЕ Запрос.Выполнить().Пустой();
	
КонецФункции

// Проверяет, что у пользователя есть право, устанавливаемое по значению доступа.
//  Например, по папке файлов могут устанавливаться права "УправлениеПравами",
// "ЧтениеПапокФайлов", "ЧтениеФайлов", которые являются, как правами для папки файлов,
// так и правами для файлов или для двух элементов данных сразу - "ЧтениеПапокИФайлов".
//
// Параметры:
//  Право           - Строка.
//
//  ЗначениеДоступа - СправочникСсылка, ПланВидовХарактеристикСсылка, Неопределено - значение,
//                    для которого нужно проверить разрешенность права, например, ссылка на папку файлов.
//
//  Пользователь    - СправочникСсылка.Пользователи, СправочникСсылка.ВнешниеПользователи, Неопределено. Если не заполнено,
//                    тогда право проверяется для текущего пользователя.
//
// Возвращаемое значение:
//  Булево.
//
Функция ЕстьПравоПоЗначениюДоступа(Знач Право, Знач ЗначениеДоступа, Знач Пользователь = Неопределено) Экспорт
	
	Пользователь = ?(ЗначениеЗаполнено(Пользователь), Пользователь, Пользователи.АвторизованныйПользователь());
	Если Пользователи.ЭтоПолноправныйПользователь(Пользователь) Тогда
		Возврат Истина;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	Параметры = УправлениеДоступомСлужебныйПовтИсп.Параметры();
	
	// Подготовка массива ролей, хотя бы одна из которых требуется для права по значению доступа.
	ВозможныеПрава = Параметры.ВозможныеПраваПоЗначениямДоступа;
	ОписаниеПрав = ВозможныеПрава.ПоТипам.Получить(ТипЗнч(ЗначениеДоступа));
	
	Если ОписаниеПрав = Неопределено Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не найдено описание возможных прав для таблицы ""%1""'"),
			ЗначениеДоступа.Метаданные().ПолноеИмя());
	КонецЕсли;
	
	ОписаниеПрава = ОписаниеПрав.Получить(Право);
	
	Если ОписаниеПрава = Неопределено Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Не найдено описание права ""%1"" для таблицы ""%2""'"),
			Право,
			ЗначениеДоступа.Метаданные().ПолноеИмя());
	КонецЕсли;
	
	// Проверка, что хотя бы одна из ролей назначается пользователю через профиль его групп доступа.
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ГруппыДоступаПользователи.Ссылка КАК ГруппаДоступа
	|ПОМЕСТИТЬ ГруппыДоступаПользователя
	|ИЗ
	|	Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
	|		ПО (СоставыГруппПользователей.Пользователь = &Пользователь)
	|			И (СоставыГруппПользователей.ГруппаПользователей = ГруппыДоступаПользователи.Пользователь)
	|			И (СоставыГруппПользователей.Используется)
	|			И (НЕ ГруппыДоступаПользователи.Ссылка.ПометкаУдаления)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ПрофилиГруппДоступа.Роли КАК ПрофилиГруппДоступаРоли
	|		ПО ГруппыДоступаПользователи.Ссылка.Профиль = ПрофилиГруппДоступаРоли.Ссылка
	|			И (ПрофилиГруппДоступаРоли.Роль В (&Роли))
	|			И (НЕ ПрофилиГруппДоступаРоли.Ссылка.ПометкаУдаления)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ИСТИНА КАК ЗначениеИстина
	|ИЗ
	|	ГруппыДоступаПользователя КАК ГруппыДоступаПользователя");
	Запрос.УстановитьПараметр("Пользователь", Пользователь);
	Запрос.УстановитьПараметр("Роли",         ОписаниеПрава.ТребуемаяРоль);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	ЕстьПраво = НЕ Запрос.Выполнить().Пустой();
	
	Если ЕстьПраво Тогда
		// Проверка, что по виду доступа ограничение установлено в каждой группе доступа пользователя.
		
		Запрос.УстановитьПараметр("ВидДоступа",
			Параметры.СвойстваВидовДоступа.ВидыДоступаЗначенийДоступа.ПоТипам.Получить(
				ТипЗнч(ЗначениеДоступа))[0]);
		
		Запрос.Текст =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	КОЛИЧЕСТВО(ГруппыДоступаПользователя.ГруппаДоступа) КАК КоличествоГруппДоступа,
		|	СУММА(ВЫБОР
		|			КОГДА ЗначенияГруппДоступа.ГруппаДоступа ЕСТЬ NULL 
		|				ТОГДА 0
		|			ИНАЧЕ 1
		|		КОНЕЦ) КАК КоличествоВключенныхОграничений
		|ИЗ
		|	ГруппыДоступаПользователя КАК ГруппыДоступаПользователя
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияГруппДоступа КАК ЗначенияГруппДоступа
		|		ПО ГруппыДоступаПользователя.ГруппаДоступа = ЗначенияГруппДоступа.ГруппаДоступа
		|			И (ЗначенияГруппДоступа.ВидДоступа = &ВидДоступа)
		|			И (ЗначенияГруппДоступа.ТолькоВидДоступа)";
		Выборка = Запрос.Выполнить().Выбрать();
		
		Выборка.Следующий();
		
		// Проверка права пользователя по значению доступа.
		Если Выборка.КоличествоГруппДоступа = Выборка.КоличествоВключенныхОграничений
		   И ЗначениеДоступа <> Неопределено
		   И ОграничиватьДоступНаУровнеЗаписей() Тогда
			
			Запрос.Текст =
			"ВЫБРАТЬ
			|	ИСТИНА КАК ЗначениеИстина
			|ГДЕ
			|	ИСТИНА В
			|			(ВЫБРАТЬ ПЕРВЫЕ 1
			|				ИСТИНА
			|			ИЗ
			|				РегистрСведений.ПраваПоЗначениямДоступа КАК ПраваПоЗначениям ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГруппыЗначенийДоступа КАК ИерархияЗначений
			|					ПО
			|						ИерархияЗначений.ВидДоступа = &ВидДоступа
			|							И ИерархияЗначений.ЗначениеДоступа = &ЗначениеДоступа
			|							И ИерархияЗначений.ИспользоватьПраваСсылки
			|							И ПраваПоЗначениям.Право = &Право
			|							И НЕ ПраваПоЗначениям.Запрещено
			|							И ПраваПоЗначениям.ЗначениеДоступа = ИерархияЗначений.ГруппаЗначенийДоступа
			|							И ПраваПоЗначениям.РаспространяетсяВИерархии >= ИерархияЗначений.СвязьСРодителем ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
			|					ПО
			|						СоставыГруппПользователей.Пользователь = &Пользователь
			|							И СоставыГруппПользователей.ГруппаПользователей = ПраваПоЗначениям.Пользователь
			|							И СоставыГруппПользователей.Используется)
			|	И НЕ ЛОЖЬ В
			|				(ВЫБРАТЬ ПЕРВЫЕ 1
			|					ЛОЖЬ
			|				ИЗ
			|					РегистрСведений.ПраваПоЗначениямДоступа КАК ПраваПоЗначениям ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ГруппыЗначенийДоступа КАК ИерархияЗначений
			|						ПО
			|							ИерархияЗначений.ВидДоступа = &ВидДоступа
			|								И ИерархияЗначений.ЗначениеДоступа = &ЗначениеДоступа
			|								И ИерархияЗначений.ИспользоватьПраваСсылки
			|								И ПраваПоЗначениям.Право = &Право
			|								И ПраваПоЗначениям.Запрещено
			|								И ПраваПоЗначениям.ЗначениеДоступа = ИерархияЗначений.ГруппаЗначенийДоступа
			|								И ПраваПоЗначениям.РаспространяетсяВИерархии >= ИерархияЗначений.СвязьСРодителем ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей
			|						ПО
			|							СоставыГруппПользователей.Пользователь = &Пользователь
			|								И СоставыГруппПользователей.ГруппаПользователей = ПраваПоЗначениям.Пользователь
			|								И СоставыГруппПользователей.Используется)";
			Запрос.УстановитьПараметр("ЗначениеДоступа", ЗначениеДоступа);
			Запрос.УстановитьПараметр("Право",           Право);
			ЕстьПраво = НЕ Запрос.Выполнить().Пустой();
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЕстьПраво;
	
КонецФункции

// Проверяет, что у текущего пользователя есть право "УправлениеПравами",
// разрешающее изменять права заданного значения доступа для пользователей и групп пользователей
// или права различных значений доступа для заданного пользователя или группы пользователей.
//
// Параметры:
//  СсылкаНаОбъект - СправочникСсылка.Пользователи, СправочникСсылка.ГруппыПользователей,
//                   или значение доступа СправочникСсылка, ПланВидовХарактеристикСсылка,
//                   для которого нужно проверить разрешенность права, например, ссылка на папку файлов.
//
//  ОписаниеОшибки - Строка, заполнена когда разрешения нет.
//
//  ТолькоПросмотр - Булево, только для внутренних нужд - не использовать.
//
// Возвращаемое значение:
//  Булево.
//
Функция РазрешеноУправлениеПравамиПоЗначениямДоступа(Знач СсылкаНаОбъект, ОписаниеОшибки, ТолькоПросмотр = Неопределено) Экспорт
	
	Если Пользователи.ЭтоПолноправныйПользователь() Тогда
		Возврат Истина;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ЭтоЗначениеДоступа =
		НЕ (ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка.Пользователи")
		ИЛИ ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка.ГруппыПользователей")
		ИЛИ ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка.ВнешниеПользователи")
		ИЛИ ТипЗнч(СсылкаНаОбъект) = Тип("СправочникСсылка.ГруппыВнешнихПользователей") );
	
	РазрешеноУправлениеПравами = Истина;
	
	Если НЕ ЕстьПравоПоЗначениюДоступа("УправлениеПравами", СсылкаНаОбъект) Тогда
		
		ОписаниеОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = '%1 ""%2"" недоступна для управления правами.'"),
			СсылкаНаОбъект.Метаданные().ПредставлениеОбъекта,
			СсылкаНаОбъект);
		
		РазрешеноУправлениеПравами = Ложь;
	КонецЕсли;
		
	Возврат РазрешеноУправлениеПравами;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для получения общих настроек подсистемы

// Возвращает значение ПараметрСеанса.ОграничиватьДоступПоВиду,
// установленное по значению Константа.ОграничиватьДоступНаУровнеЗаписей.
//
Функция ОграничиватьДоступНаУровнеЗаписей() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Возврат ПараметрыСеанса.ОграничиватьДоступПоВиду <> "";
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции, используемые для настройки интерфейса управляемых форм.

// Настраивает форму значения доступа, которое использует группы значений доступа
// при настройке разрешенных значений в группах доступа пользователей.
//
// Поддерживается только для случая, когда:
//   ВидДоступаЕдинственныйДляТипаЗначенияДоступа = Истина и
//   ВидДоступаСОднойГруппойЗначенияДоступа       = Истина.
//
// Для элемента формы ГруппаДоступа, связанного с реквизитом ГруппаДоступа
// устанавливает список групп значений доступа в параметр выбора, которые дают
// доступ на изменение значения доступа.
//
// При создании нового значения доступа, если количество групп значений доступа
// которые дают доступ на изменение значения доступа равно нулю,
// будет вызвано исключение.
//
// Если в базе данных уже записана группа значений доступа, которая не дает
// доступ на изменение значения доступа или количество групп значений доступа,
// которые дают доступ на изменение значения доступа равно нулю,
// тогда свойство формы ТолькоПросмотр устанавливается Истина.
//
// Если ограничение на уровне записей не используется или ограничение
// по виду доступа не используется, тогда элемент формы скрывается.
//
// Параметры:
//  Форма          - УправляемаяФорма значения доступа, использующего группы
//                   для назначения разрешенных.
//
//  Реквизит       - Неопределено - означает реквизит Форма.Объект.ГруппаДоступа.
//                 - Строка - реквизит формы содержащий группу доступа.
//
//  Элементы       - Неопределено - означает элемент формы Форма.Элементы.ГруппаДоступа.
//                 - Строка,
//                 - Массив строк имен элементов формы.
//
//  ТипЗначения    - Неопределено - предполагает наличие Форма.Объект.Ссылка,
//                   по которому определяется тип значения доступа.
//                 - Тип ссылки - используется указанный тип значения доступа.
//
//  СозданиеНового - Неопределено - означает проверку НЕ ЗначениеЗаполнено(Форма.Объект.Ссылка),
//                   для определения того, что создается новое значение доступа.
//                 - Булево - используется указанное значение.
//
Процедура ПриСозданииФормыЗначенияДоступа(Форма,
                                          Реквизит       = Неопределено,
                                          Элементы       = Неопределено,
                                          ТипЗначения    = Неопределено,
                                          СозданиеНового = Неопределено) Экспорт
	
	Если ТипЗнч(СозданиеНового) <> Тип("Булево") Тогда
		СозданиеНового = НЕ ЗначениеЗаполнено(Форма.Объект.Ссылка);
	КонецЕсли;
	
	Если ТипЗнч(ТипЗначения) <> Тип("Тип") Тогда
		ТипЗначенияДоступа = ТипЗнч(Форма.Объект.Ссылка);
	Иначе
		ТипЗначенияДоступа = ТипЗначения;
	КонецЕсли;
	
	Если Элементы = Неопределено Тогда
		ЭлементыФормы = Новый Массив;
		ЭлементыФормы.Добавить("ГруппаДоступа");
		
	ИначеЕсли ТипЗнч(Элементы) <> Тип("Массив") Тогда
		ЭлементыФормы = Новый Массив;
		ЭлементыФормы.Добавить(Элементы);
	КонецЕсли;
	
	ЗаголовокОшибки =
		НСтр("ru = 'Ошибка в процедуре ФормаЗначенияДоступаПриСозданииНаСервере
		           |общего модуля УправлениеДоступом.'");
	
	СвойстваГрупп = СвойстваГруппЗначенияДоступа(ТипЗначенияДоступа, ЗаголовокОшибки);
	
	Если Реквизит = Неопределено Тогда
		ГруппаЗначенийДоступа = Форма.Объект.ГруппаДоступа;
	Иначе
		ГруппаЗначенийДоступа = Форма[Реквизит];
	КонецЕсли;
	
	Если ТипЗнч(ГруппаЗначенийДоступа) <> СвойстваГрупп.Тип Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ЗаголовокОшибки + Символы.ПС + Символы.ПС +
			НСтр("ru = 'Для значений доступа типа ""%1""
					   |используются вид доступа ""%2"" с типом значений ""%3"",
					   |заданным в плане видов характеристик ""Виды доступа"".
					   |Но этот тип не совпадает с типом ""%4"" в форме значения
					   |доступа у реквизита ГруппаДоступа.'"),
			Строка(ТипЗначенияДоступа),
			Строка(СвойстваГрупп.ВидДоступа),
			Строка(СвойстваГрупп.Тип),
			Строка(ТипЗнч(ГруппаЗначенийДоступа)));
	КонецЕсли;
	
	Если НЕ ОграничиватьДоступНаУровнеЗаписей()
	 ИЛИ НЕ УправлениеДоступомСлужебный.ВидДоступаИспользуется(СвойстваГрупп.ВидДоступа) Тогда
		
		Для каждого Элемент Из ЭлементыФормы Цикл
			Форма.Элементы[Элемент].Видимость = Ложь;
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	Если Пользователи.ЭтоПолноправныйПользователь( , , Ложь) Тогда
		Возврат;
	КонецЕсли;
	
	ГруппыЗначенийДляИзменения =
		ГруппыЗначенийДоступаРазрешающиеИзменениеЗначенийДоступа(ТипЗначенияДоступа);
	
	Если ГруппыЗначенийДляИзменения.Количество() = 0
	   И СозданиеНового Тогда
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Для добавления требуются разрешенные ""%1"".'"),
			Метаданные.НайтиПоТипу(СвойстваГрупп.Тип).Представление());
	КонецЕсли;
	
	Если ГруппыЗначенийДляИзменения.Количество() = 0
	 ИЛИ НЕ СозданиеНового
	   И ГруппыЗначенийДляИзменения.Найти(ГруппаЗначенийДоступа) = Неопределено Тогда
		
		Форма.ТолькоПросмотр = Истина;
		Возврат;
	КонецЕсли;
	
	Если СозданиеНового
	   И НЕ ЗначениеЗаполнено(ГруппаЗначенийДоступа)
	   И ГруппыЗначенийДляИзменения.Количество() = 1 Тогда
		
		Если Реквизит = Неопределено Тогда
			Форма.Объект.ГруппаДоступа = ГруппыЗначенийДляИзменения[0];
		Иначе
			Форма[Реквизит] = ГруппыЗначенийДляИзменения[0];
		КонецЕсли;
	КонецЕсли;
	
	НовыйПараметрВыбора = Новый ПараметрВыбора(
		"Отбор.Ссылка", Новый ФиксированныйМассив(ГруппыЗначенийДляИзменения));

	ПараметрыВыбора = Новый Массив;
	ПараметрыВыбора.Добавить(НовыйПараметрВыбора);
	
	Для каждого Элемент Из ЭлементыФормы Цикл
		Форма.Элементы[Элемент].ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбора);
	КонецЦикла;
	
КонецПроцедуры

// Возвращает массив групп значений доступа разрешающих изменять значения доступа.
//
// Поддерживается только для случая, когда:
//   ВидДоступаЕдинственныйДляТипаЗначенияДоступа = Истина и
//   ВидДоступаСОднойГруппойЗначенияДоступа       = Истина.
//
// Параметры:
//  ТипЗначенияДоступа - Тип ссылки.
//  ВозвращатьВсе      - Булево, если Истина, то в случае, когда нет ограничений
//                       (доступны все) будет возвращен массив всех вместо Неопределено.
//
// Возвращаемое значение:
//  Неопределено - все группы значений доступа разрешают изменять значения доступа.
//  Массив - массив найденных групп значений доступа.
//  
Функция ГруппыЗначенийДоступаРазрешающиеИзменениеЗначенийДоступа(ТипЗначенияДоступа, ВозвращатьВсе = Ложь) Экспорт
	
	ЗаголовокОшибки =
		НСтр("ru = 'Ошибка в процедуре ГруппыЗначенийДоступаРазрешающиеИзменениеЗначенийДоступа
		           |общего модуля УправлениеДоступом.'");
	
	СвойстваГрупп = СвойстваГруппЗначенияДоступа(ТипЗначенияДоступа, ЗаголовокОшибки);
	
	Если НЕ ОграничиватьДоступНаУровнеЗаписей()
	 ИЛИ НЕ УправлениеДоступомСлужебный.ВидДоступаИспользуется(СвойстваГрупп.ВидДоступа)
	 ИЛИ Пользователи.ЭтоПолноправныйПользователь( , , Ложь) Тогда
		
		Если ВозвращатьВсе Тогда
			Запрос = Новый Запрос;
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ГруппыЗначенийДоступа.Ссылка КАК Ссылка
			|ИЗ
			|	&ТаблицаГруппЗначенийДоступа КАК ГруппыЗначенийДоступа";
			Запрос.Текст = СтрЗаменить(
				Запрос.Текст, "&ТаблицаГруппЗначенийДоступа", СвойстваГрупп.Таблица);
			
			Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		КонецЕсли;
		
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидДоступа",          СвойстваГрупп.ВидДоступа);
	Запрос.УстановитьПараметр("ТекущийПользователь", Пользователи.АвторизованныйПользователь());
	
	Запрос.УстановитьПараметр("ИдентификаторЗначенийДоступа",
		ОбщегоНазначения.ИдентификаторОбъектаМетаданных(ТипЗначенияДоступа));
		
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ГруппыДоступа.Ссылка
	|ПОМЕСТИТЬ ГруппыДоступаПользователя
	|ИЗ
	|	Справочник.ГруппыДоступа КАК ГруппыДоступа
	|ГДЕ
	|	ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				РегистрСведений.ТаблицыГруппДоступа КАК ТаблицыГруппДоступа
	|			ГДЕ
	|				ТаблицыГруппДоступа.Таблица = &ИдентификаторЗначенийДоступа
	|				И ТаблицыГруппДоступа.ГруппаДоступа = ГруппыДоступа.Ссылка
	|				И ТаблицыГруппДоступа.Изменение = ИСТИНА)
	|	И ИСТИНА В
	|			(ВЫБРАТЬ ПЕРВЫЕ 1
	|				ИСТИНА
	|			ИЗ
	|				РегистрСведений.СоставыГруппПользователей КАК СоставыГруппПользователей ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ГруппыДоступа.Пользователи КАК ГруппыДоступаПользователи
	|					ПО
	|						СоставыГруппПользователей.Используется
	|							И СоставыГруппПользователей.Пользователь = &ТекущийПользователь
	|							И ГруппыДоступаПользователи.Пользователь = СоставыГруппПользователей.ГруппаПользователей
	|							И ГруппыДоступаПользователи.Ссылка = ГруппыДоступа.Ссылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ГруппыЗначенийДоступа.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ ГруппыЗначений
	|ИЗ
	|	&ТаблицаГруппЗначенийДоступа КАК ГруппыЗначенийДоступа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ГруппыДоступаПользователя КАК ГруппыДоступаПользователя
	|		ПО (ВЫБОР
	|				КОГДА ИСТИНА В
	|						(ВЫБРАТЬ ПЕРВЫЕ 1
	|							ИСТИНА
	|						ИЗ
	|							РегистрСведений.ЗначенияГруппДоступа КАК РазрешенныеЗначения
	|						ГДЕ
	|							РазрешенныеЗначения.ГруппаДоступа = ГруппыДоступаПользователя.Ссылка
	|							И РазрешенныеЗначения.ВидДоступа = &ВидДоступа
	|							И РазрешенныеЗначения.ТолькоВидДоступа = ЛОЖЬ
	|							И РазрешенныеЗначения.ЗначениеДоступа = ГруппыЗначенийДоступа.Ссылка)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ = ВЫБОР
	|				КОГДА ИСТИНА В
	|						(ВЫБРАТЬ ПЕРВЫЕ 1
	|							ИСТИНА
	|						ИЗ
	|							РегистрСведений.ЗначенияГруппДоступа КАК РазрешенныеЗначения
	|						ГДЕ
	|							РазрешенныеЗначения.ГруппаДоступа = ГруппыДоступаПользователя.Ссылка
	|							И РазрешенныеЗначения.ВидДоступа = &ВидДоступа
	|							И РазрешенныеЗначения.ТолькоВидДоступа = ИСТИНА)
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ЛОЖЬ
	|			КОНЕЦ)";
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ТаблицаГруппЗначенийДоступа", СвойстваГрупп.Таблица);
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	УстановитьПривилегированныйРежим(Истина);
	Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ГруппыЗначенийДоступа.Ссылка КАК Ссылка
	|ИЗ
	|	&ТаблицаГруппЗначенийДоступа КАК ГруппыЗначенийДоступа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ГруппыЗначений КАК ГруппыЗначений
	|		ПО ГруппыЗначенийДоступа.Ссылка = ГруппыЗначений.Ссылка";
	
	Запрос.Текст = СтрЗаменить(
		Запрос.Текст, "&ТаблицаГруппЗначенийДоступа", СвойстваГрупп.Таблица);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции для работы с наборами значений доступа

// Проверяет предусмотрена ли для объекта метаданных
// процедура заполнения наборов значений доступа.
// 
// Параметры:
//  Ссылка       - ЛюбаяСсылка.
//
// Возвращаемое значение:
//  Булево.
//
Функция ВозможноЗаполнитьНаборыЗначенийДоступа(Ссылка) Экспорт
	
	ТипОбъекта = Тип(ОбщегоНазначения.ВидОбъектаПоСсылке(Ссылка) + "Объект." + Ссылка.Метаданные().Имя);
	
	НаборыЗаполняются = УправлениеДоступомСлужебныйПовтИсп.ТипыОбъектовВПодпискахНаСобытия(
		"ЗаписатьНаборыЗначенийДоступа
		|ЗаписатьЗависимыеНаборыЗначенийДоступа").Получить(ТипОбъекта) <> Неопределено;
	
	Возврат НаборыЗаполняются;
	
КонецФункции

// Возвращает пустую таблицу, которая заполняется для передачи в функцию ЕстьРоль() и
// в процедуры ЗаполнитьНаборыЗначенийДоступа(Таблица), определенные прикладным разработчиком.
//
// Возвращаемое значение:
//  ТаблицаЗначений с колонками:
//    НомерНабора     - Число                                     (необязательно, если набор один),
//    ВидДоступа      - ПланВидовХарактеристикСсылка.ВидыДоступа, (обязательно),
//    ЗначениеДоступа - Неопределено, СправочникСсылка или др.    (обязательно),
//    Чтение          - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Добавление      - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Изменение       - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//    Удаление        - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//
Функция ТаблицаНаборыЗначенийДоступа() Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Таблица = Новый ТаблицаЗначений;
	Таблица.Колонки.Добавить("НомерНабора",     Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(4, 0, ДопустимыйЗнак.Неотрицательный)));
	Таблица.Колонки.Добавить("ВидДоступа",      Новый ОписаниеТипов("ПланВидовХарактеристикСсылка.ВидыДоступа"));
	Таблица.Колонки.Добавить("ЗначениеДоступа", Метаданные.РегистрыСведений.НаборыЗначенийДоступа.Измерения.ЗначениеДоступа.Тип);
	Таблица.Колонки.Добавить("Чтение",          Новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("Добавление",      Новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("Изменение",       Новый ОписаниеТипов("Булево"));
	Таблица.Колонки.Добавить("Удаление",        Новый ОписаниеТипов("Булево"));
	
	Возврат Таблица;
	
КонецФункции

// Заполняет наборы значений доступа объекта, используя процедуру ЗаполнитьНаборыЗначенийДоступа(Таблица),
// созданную прикладным разработчиком в модуле объекта, тип которого задан в одной из подписок на событие
// ЗаписатьНаборыЗначенийДоступа или ЗаписатьЗависимыеНаборыЗначенийДоступа.
//
// Параметры:
//  Объект       - СправочникОбъект, ДокументОбъект, ..., или СправочникСсылка, ДокументСсылка, ...
//                 Если передана ссылка, то по ней будет получен объект.
//
//  Таблица      - ТабличнаяЧасть,
//                 РегистрСведенийНаборЗаписей.НаборыЗначенийДоступа,
//                 Неопределено, тогда будет создана таблица значений
//                 УправлениеДоступом.ТаблицаНаборыЗначенийДоступа(), содержащая поля:
//                     НомерНабора     - Число                                     (необязательно, если набор один),
//                     ВидДоступа      - ПланВидовХарактеристикСсылка.ВидыДоступа, (обязательно),
//                     ЗначениеДоступа - Неопределено, СправочникСсылка или др.    (обязательно),
//                     Чтение          - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//                     Добавление      - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//                     Изменение       - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//                     Удаление        - Булево (необязательно, если набор для всех прав) устанавливается для одной строки набора,
//
//  СсылкаНаПодчиненныйОбъект - ЛюбаяСсылка, используется, когда нужно заполнить наборы значений доступа объекта-владельца
//                 для подчиненного объекта.
//
Процедура ЗаполнитьНаборыЗначенийДоступа(Знач Объект, Таблица, Знач СсылкаНаПодчиненныйОбъект = Неопределено) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Если передана ссылка, тогда получить объект.
	// Объект не изменяется, а используется для вызова метода ЗаполнитьНаборыЗначенийДоступа()
	Объект = ?(Объект = Объект.Ссылка, Объект.ПолучитьОбъект(), Объект);
	СсылкаНаОбъект = Объект.Ссылка;
	ТипЗначенияОбъект = ТипЗнч(Объект);
	
	НаборыЗаполняются = УправлениеДоступомСлужебныйПовтИсп.ТипыОбъектовВПодпискахНаСобытия(
		"ЗаписатьНаборыЗначенийДоступа
		|ЗаписатьЗависимыеНаборыЗначенийДоступа").Получить(ТипЗначенияОбъект) <> Неопределено;
	
	Если НЕ НаборыЗаполняются Тогда
		ВызватьИсключение(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Неверные параметры.
				           |Тип объекта ""%1""
				           |не найден ни в одной из подписок на события
				           |""Записать наборы значений доступа"",
				           |""Записать зависимые наборы значений доступа"".'"),
				ТипЗначенияОбъект));
	КонецЕсли;
	
	Таблица = ?(Таблица = Неопределено, ТаблицаНаборыЗначенийДоступа(), Таблица);
	Объект.ЗаполнитьНаборыЗначенийДоступа(Таблица);
	
	Если Таблица.Количество() = 0 Тогда
		// Если это условие отключить, тогда зациклится регламентное задание
		// заполнения данных для ограничения доступа.
		ВызватьИсключение(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Объект ""%1"" сформировал пустой набор значений доступа.'"),
				ТипЗначенияОбъект));
	КонецЕсли;
	
	Если СсылкаНаПодчиненныйОбъект <> Неопределено Тогда
		// Добавление наборов проверки прав Чтения, Изменения "ведущего" объекта-владельца,
		// при формировании зависимых наборов значений в процедурах,
		// подготовленных прикладным разработчиком.
		//
		// Действие не требуется при заполнении конечного набора (даже включающего зависимые наборы),
		// т.к. в стандартных шаблонах проверка прав встроена в логику работы вида доступа "Объект".
		
		// Добавление пустого набора, чтобы установить все флажки прав и упорядочить строки наборов.
		ДобавитьНаборыЗначенийДоступа(Таблица, ТаблицаНаборыЗначенийДоступа());
		
		Если НЕ Метаданные.РегистрыСведений.НаборыЗначенийДоступа.Измерения.ЗначениеДоступа.Тип.СодержитТип(ТипЗнч(СсылкаНаОбъект)) Тогда
			ВызватьИсключение(СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'В измерении ""ЗначениеДоступа"" регистра сведений ""Наборы значений доступа""
				           |не задан тип ""%1"" для значения ""%2""'"),
				Строка(ТипЗнч(СсылкаНаОбъект)),
				Строка(СсылкаНаОбъект) ));
		КонецЕсли;
		
		// Подготовка наборов объекта по отдельным правам.
		НаборыЧтения     = ТаблицаНаборыЗначенийДоступа();
		НаборыДобавления = ТаблицаНаборыЗначенийДоступа();
		НаборыИзменения  = ТаблицаНаборыЗначенийДоступа();
		Для каждого Строка Из Таблица Цикл
			Если Строка.Чтение Тогда
				НоваяСтрока = НаборыЧтения.Добавить();
				НоваяСтрока.НомерНабора     = Строка.НомерНабора + 1;
				НоваяСтрока.ВидДоступа      = Строка.ВидДоступа;
				НоваяСтрока.ЗначениеДоступа = Строка.ЗначениеДоступа;
			КонецЕсли;
			Если Строка.Добавление Тогда
				НоваяСтрока = НаборыДобавления.Добавить();
				НоваяСтрока.НомерНабора     = (Строка.НомерНабора + 1)*2;
				НоваяСтрока.ВидДоступа      = Строка.ВидДоступа;
				НоваяСтрока.ЗначениеДоступа = Строка.ЗначениеДоступа;
			КонецЕсли;
			Если Строка.Изменение Тогда
				НоваяСтрока = НаборыИзменения.Добавить();
				НоваяСтрока.НомерНабора     = (Строка.НомерНабора + 1)*3;
				НоваяСтрока.ВидДоступа      = Строка.ВидДоступа;
				НоваяСтрока.ЗначениеДоступа = Строка.ЗначениеДоступа;
			КонецЕсли;
		КонецЦикла;
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ЗависимостиПравДоступа.ПриПроверкеПраваЧтение,
		|	ЗависимостиПравДоступа.ПриПроверкеПраваДобавление,
		|	ЗависимостиПравДоступа.ПриПроверкеПраваИзменение,
		|	ЗависимостиПравДоступа.ПриПроверкеПраваУдаление,
		|	ЗависимостиПравДоступа.ОтключитьПроверкуПравВедущейТаблицы
		|ИЗ
		|	РегистрСведений.ЗависимостиПравДоступа КАК ЗависимостиПравДоступа
		|ГДЕ
		|	ЗависимостиПравДоступа.ПодчиненнаяТаблица = &ПодчиненнаяТаблица
		|	И ЗависимостиПравДоступа.ТипВедущейТаблицы = &ТипВедущейТаблицы");
		Запрос.УстановитьПараметр("ПодчиненнаяТаблица", СсылкаНаПодчиненныйОбъект.Метаданные().ПолноеИмя());
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(ТипЗнч(СсылкаНаОбъект));
		ОписаниеТипов = Новый ОписаниеТипов(МассивТипов);
		Запрос.УстановитьПараметр("ТипВедущейТаблицы", ОписаниеТипов.ПривестиЗначение(Неопределено));
		ЗависимостиПрав = Запрос.Выполнить().Выгрузить();
		
		Таблица.Очистить();
		
		Если ЗависимостиПрав.Количество() = 0 Тогда
			
			// Добавление наборов по стандартному правилу.
			
			// Проверка права Чтения "ведущего" объекта-владельца наборов
			// при проверке права Чтения "подчиненного" объекта.
			Строка = Таблица.Добавить();
			Строка.НомерНабора     = 1;
			Строка.ВидДоступа      = ПланыВидовХарактеристик.ВидыДоступа.ПравоЧтения;
			Строка.ЗначениеДоступа = СсылкаНаОбъект;
			Строка.Чтение          = Истина;
			
			// Проверка права Изменения "ведущего" объекта-владельца наборов
			// при проверке прав Добавления, Изменения, Удаления "подчиненного" объекта.
			Строка = Таблица.Добавить();
			Строка.НомерНабора     = 2;
			Строка.ВидДоступа      = ПланыВидовХарактеристик.ВидыДоступа.ПравоИзменения;
			Строка.ЗначениеДоступа = СсылкаНаОбъект;
			Строка.Добавление      = Истина;
			Строка.Изменение       = Истина;
			Строка.Удаление        = Истина;
			
			// Пометка прав, требующих проверки наборов ограничения права чтения "ведущего" объекта-владельца.
			НаборыЧтения.ЗаполнитьЗначения(Истина, "Чтение");
			// Пометка прав, требующих проверки наборов ограничения права изменения "ведущего" объекта-владельца.
			НаборыИзменения.ЗаполнитьЗначения(Истина, "Добавление, Изменение, Удаление");
			
			ДобавитьНаборыЗначенийДоступа(НаборыЧтения, НаборыИзменения);
			ДобавитьНаборыЗначенийДоступа(Таблица, НаборыЧтения, Истина);
		Иначе
			// Проверка права Чтения "ведущего" объекта-владельца наборов
			// при проверке прав "подчиненного" объекта.
			
			ЗависимостиПрав = ЗависимостиПрав[0];
			НаборыПравДляУмножения        = Таблица.Скопировать();
			НаборыОграниченийДляУмножения = Таблица.Скопировать();
			
			ОбщиеПараметры = Новый Структура;
			ОбщиеПараметры.Вставить("ЗависимостиПрав",               ЗависимостиПрав);
			ОбщиеПараметры.Вставить("Таблица",                       Таблица);
			ОбщиеПараметры.Вставить("НаборыПравДляУмножения",        НаборыПравДляУмножения);
			ОбщиеПараметры.Вставить("НаборыОграниченийДляУмножения", НаборыОграниченийДляУмножения);
			ОбщиеПараметры.Вставить("НаборыЧтения",                  НаборыЧтения);
			ОбщиеПараметры.Вставить("НаборыДобавления",              НаборыДобавления);
			ОбщиеПараметры.Вставить("НаборыИзменения",               НаборыИзменения);
			ОбщиеПараметры.Вставить("СсылкаНаОбъект",                СсылкаНаОбъект);
			
			ДобавитьНаборыДляПрава("Чтение",     ОбщиеПараметры);
			ДобавитьНаборыДляПрава("Добавление", ОбщиеПараметры);
			ДобавитьНаборыДляПрава("Изменение",  ОбщиеПараметры);
			ДобавитьНаборыДляПрава("Удаление",   ОбщиеПараметры);
			
			Если НаборыПравДляУмножения.Количество() > 0 Тогда
				
				ДобавитьНаборыЗначенийДоступа(
					НаборыПравДляУмножения, НаборыОграниченийДляУмножения, Истина);
				
				Если НаборыПравДляУмножения.Количество() > 0 Тогда
					ДобавитьНаборыЗначенийДоступа(Таблица, НаборыПравДляУмножения);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Позволяет добавить к одной таблице наборов значений доступа другую
// таблицу наборов значений доступа, либо логическим сложением, либо логическим умножением.
// Результат помещается в приемник.
//
// Параметры:
//  Приемник,
//  Источник     - ТабличнаяЧасть или ТаблицаЗначений
//                 с полями, как в таблице, возвращаемой функцией
//                 УправлениеДоступом.ТаблицаНаборыЗначенийДоступа().
//
//  Умножение    - Булево, определяет способ логического объединения наборов приемника и источника.
//
//  Упростить    - Булево, определяет требуется ли упрощение наборов после добавления.
//
Процедура ДобавитьНаборыЗначенийДоступа(Приемник, Знач Источник, Знач Умножение = Ложь, Знач Упростить = Ложь) Экспорт
	
	Если Источник.Количество() = 0 И Приемник.Количество() = 0 Тогда
		Возврат;
		
	ИначеЕсли Умножение И ( Источник.Количество() = 0 ИЛИ  Приемник.Количество() = 0 ) Тогда
		Приемник.Очистить();
		Источник.Очистить();
		Возврат;
		
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Если Приемник.Количество() = 0 Тогда
		Запрос.УстановитьПараметр("Приемник", Источник);
		Запрос.УстановитьПараметр("Источник", Приемник);
	Иначе
		Запрос.УстановитьПараметр("Приемник", Приемник);
		Запрос.УстановитьПараметр("Источник", Источник);
	КонецЕсли;
	
	// Подготовка временных таблиц приемника.
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Приемник.НомерНабора + 1 КАК НомерНабора,
	|	Приемник.ВидДоступа,
	|	Приемник.ЗначениеДоступа,
	|	Приемник.Чтение,
	|	Приемник.Добавление,
	|	Приемник.Изменение,
	|	Приемник.Удаление
	|ПОМЕСТИТЬ Приемник
	|ИЗ
	|	&Приемник КАК Приемник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПраваБезНормализации.НомерНабора,
	|	ВЫБОР
	|		КОГДА (НЕ ПраваБезНормализации.Чтение)
	|				И (НЕ ПраваБезНормализации.Добавление)
	|				И (НЕ ПраваБезНормализации.Изменение)
	|				И (НЕ ПраваБезНормализации.Удаление)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ПраваБезНормализации.Чтение
	|	КОНЕЦ КАК Чтение,
	|	ВЫБОР
	|		КОГДА (НЕ ПраваБезНормализации.Чтение)
	|				И (НЕ ПраваБезНормализации.Добавление)
	|				И (НЕ ПраваБезНормализации.Изменение)
	|				И (НЕ ПраваБезНормализации.Удаление)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ПраваБезНормализации.Добавление
	|	КОНЕЦ КАК Добавление,
	|	ВЫБОР
	|		КОГДА (НЕ ПраваБезНормализации.Чтение)
	|				И (НЕ ПраваБезНормализации.Добавление)
	|				И (НЕ ПраваБезНормализации.Изменение)
	|				И (НЕ ПраваБезНормализации.Удаление)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ПраваБезНормализации.Изменение
	|	КОНЕЦ КАК Изменение,
	|	ВЫБОР
	|		КОГДА (НЕ ПраваБезНормализации.Чтение)
	|				И (НЕ ПраваБезНормализации.Добавление)
	|				И (НЕ ПраваБезНормализации.Изменение)
	|				И (НЕ ПраваБезНормализации.Удаление)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ПраваБезНормализации.Удаление
	|	КОНЕЦ КАК Удаление,
	|	ПраваБезНормализации.ДлинаНабора
	|ПОМЕСТИТЬ ПраваНаборовПриемника
	|ИЗ
	|	(ВЫБРАТЬ
	|		Приемник.НомерНабора КАК НомерНабора,
	|		МАКСИМУМ(Приемник.Чтение) КАК Чтение,
	|		МАКСИМУМ(Приемник.Добавление) КАК Добавление,
	|		МАКСИМУМ(Приемник.Изменение) КАК Изменение,
	|		МАКСИМУМ(Приемник.Удаление) КАК Удаление,
	|		КОЛИЧЕСТВО(Приемник.НомерНабора) КАК ДлинаНабора
	|	ИЗ
	|		Приемник КАК Приемник
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Приемник.НомерНабора) КАК ПраваБезНормализации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(Приемник.НомерНабора) КАК НомерНабораПриемника
	|ПОМЕСТИТЬ Максимальный
	|ИЗ
	|	Приемник КАК Приемник";
	
	// Подготовка временных таблиц источника.
	Запрос.Текст = Запрос.Текст + ";" + Символы.ПС +
	"ВЫБРАТЬ
	|	Источник.НомерНабора + 1 КАК НомерНабора,
	|	Источник.ВидДоступа,
	|	Источник.ЗначениеДоступа,
	|	Источник.Чтение,
	|	Источник.Добавление,
	|	Источник.Изменение,
	|	Источник.Удаление
	|ПОМЕСТИТЬ Источник
	|ИЗ
	|	&Источник КАК Источник
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПраваБезНормализации.НомерНабора,
	|	ВЫБОР
	|		КОГДА (НЕ ПраваБезНормализации.Чтение)
	|				И (НЕ ПраваБезНормализации.Добавление)
	|				И (НЕ ПраваБезНормализации.Изменение)
	|				И (НЕ ПраваБезНормализации.Удаление)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ПраваБезНормализации.Чтение
	|	КОНЕЦ КАК Чтение,
	|	ВЫБОР
	|		КОГДА (НЕ ПраваБезНормализации.Чтение)
	|				И (НЕ ПраваБезНормализации.Добавление)
	|				И (НЕ ПраваБезНормализации.Изменение)
	|				И (НЕ ПраваБезНормализации.Удаление)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ПраваБезНормализации.Добавление
	|	КОНЕЦ КАК Добавление,
	|	ВЫБОР
	|		КОГДА (НЕ ПраваБезНормализации.Чтение)
	|				И (НЕ ПраваБезНормализации.Добавление)
	|				И (НЕ ПраваБезНормализации.Изменение)
	|				И (НЕ ПраваБезНормализации.Удаление)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ПраваБезНормализации.Изменение
	|	КОНЕЦ КАК Изменение,
	|	ВЫБОР
	|		КОГДА (НЕ ПраваБезНормализации.Чтение)
	|				И (НЕ ПраваБезНормализации.Добавление)
	|				И (НЕ ПраваБезНормализации.Изменение)
	|				И (НЕ ПраваБезНормализации.Удаление)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ПраваБезНормализации.Удаление
	|	КОНЕЦ КАК Удаление,
	|	ПраваБезНормализации.ДлинаНабора
	|ПОМЕСТИТЬ ПраваНаборовИсточника
	|ИЗ
	|	(ВЫБРАТЬ
	|		Источник.НомерНабора КАК НомерНабора,
	|		МАКСИМУМ(Источник.Чтение) КАК Чтение,
	|		МАКСИМУМ(Источник.Добавление) КАК Добавление,
	|		МАКСИМУМ(Источник.Изменение) КАК Изменение,
	|		МАКСИМУМ(Источник.Удаление) КАК Удаление,
	|		МАКСИМУМ(Источник.НомерНабора) КАК ДлинаНабора
	|	ИЗ
	|		Источник КАК Источник
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Источник.НомерНабора) КАК ПраваБезНормализации";
	
	// Выполнение операции логического сложения или логического умножения.
	Если Умножение Тогда
		Запрос.Текст = Запрос.Текст + ";" + Символы.ПС +
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	(Приемник.НомерНабора - 1) * Максимальный.НомерНабораПриемника + Источник.НомерНабора КАК НомерНабора,
		|	Приемник.НомерНабора КАК НомерНабораПриемника,
		|	Источник.НомерНабора КАК НомерНабораИсточника,
		|	ВЫБОР
		|		КОГДА ПраваНаборовПриемника.Чтение
		|				И ПраваНаборовИсточника.Чтение
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Чтение,
		|	ВЫБОР
		|		КОГДА ПраваНаборовПриемника.Добавление
		|				И ПраваНаборовИсточника.Добавление
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Добавление,
		|	ВЫБОР
		|		КОГДА ПраваНаборовПриемника.Изменение
		|				И ПраваНаборовИсточника.Изменение
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Изменение,
		|	ВЫБОР
		|		КОГДА ПраваНаборовПриемника.Удаление
		|				И ПраваНаборовИсточника.Удаление
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК Удаление,
		|	ПраваНаборовПриемника.ДлинаНабора + ПраваНаборовИсточника.ДлинаНабора КАК ДлинаНабора
		|ПОМЕСТИТЬ ПраваУмноженныхНаборов
		|ИЗ
		|	Приемник КАК Приемник
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПраваНаборовПриемника КАК ПраваНаборовПриемника
		|		ПО Приемник.НомерНабора = ПраваНаборовПриемника.НомерНабора
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Источник КАК Источник
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПраваНаборовИсточника КАК ПраваНаборовИсточника
		|			ПО Источник.НомерНабора = ПраваНаборовИсточника.НомерНабора
		|		ПО (ПраваНаборовПриемника.Чтение
		|					И ПраваНаборовИсточника.Чтение
		|				ИЛИ ПраваНаборовПриемника.Добавление
		|					И ПраваНаборовИсточника.Добавление
		|				ИЛИ ПраваНаборовПриемника.Изменение
		|					И ПраваНаборовИсточника.Изменение
		|				ИЛИ ПраваНаборовПриемника.Удаление
		|					И ПраваНаборовИсточника.Удаление)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Максимальный КАК Максимальный
		|		ПО (ИСТИНА)";
		Если НЕ Упростить Тогда
			Запрос.Текст = Запрос.Текст + ";" + Символы.ПС +
			"ВЫБРАТЬ
			|	ПраваУмноженныхНаборов.НомерНабора,
			|	Приемник.ВидДоступа,
			|	Приемник.ЗначениеДоступа,
			|	ПраваУмноженныхНаборов.Чтение,
			|	ПраваУмноженныхНаборов.Добавление,
			|	ПраваУмноженныхНаборов.Изменение,
			|	ПраваУмноженныхНаборов.Удаление
			|ИЗ
			|	ПраваУмноженныхНаборов КАК ПраваУмноженныхНаборов
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Приемник КАК Приемник
			|		ПО ПраваУмноженныхНаборов.НомерНабораПриемника = Приемник.НомерНабора
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ
			|	ПраваУмноженныхНаборов.НомерНабора,
			|	Источник.ВидДоступа,
			|	Источник.ЗначениеДоступа,
			|	ПраваУмноженныхНаборов.Чтение,
			|	ПраваУмноженныхНаборов.Добавление,
			|	ПраваУмноженныхНаборов.Изменение,
			|	ПраваУмноженныхНаборов.Удаление
			|ИЗ
			|	ПраваУмноженныхНаборов КАК ПраваУмноженныхНаборов
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Источник КАК Источник
			|		ПО ПраваУмноженныхНаборов.НомерНабораИсточника = Источник.НомерНабора";
		Иначе
			Запрос.Текст = Запрос.Текст + ";" + Символы.ПС +
			"ВЫБРАТЬ
			|	ПраваУмноженныхНаборов.НомерНабора,
			|	Приемник.ВидДоступа,
			|	Приемник.ЗначениеДоступа,
			|	ПраваУмноженныхНаборов.Чтение,
			|	ПраваУмноженныхНаборов.Добавление,
			|	ПраваУмноженныхНаборов.Изменение,
			|	ПраваУмноженныхНаборов.Удаление,
			|	ПраваУмноженныхНаборов.ДлинаНабора
			|ПОМЕСТИТЬ ВсеНаборы
			|ИЗ
			|	ПраваУмноженныхНаборов КАК ПраваУмноженныхНаборов
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Приемник КАК Приемник
			|		ПО ПраваУмноженныхНаборов.НомерНабораПриемника = Приемник.НомерНабора
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ
			|	ПраваУмноженныхНаборов.НомерНабора,
			|	Источник.ВидДоступа,
			|	Источник.ЗначениеДоступа,
			|	ПраваУмноженныхНаборов.Чтение,
			|	ПраваУмноженныхНаборов.Добавление,
			|	ПраваУмноженныхНаборов.Изменение,
			|	ПраваУмноженныхНаборов.Удаление,
			|	ПраваУмноженныхНаборов.ДлинаНабора
			|ИЗ
			|	ПраваУмноженныхНаборов КАК ПраваУмноженныхНаборов
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Источник КАК Источник
			|		ПО ПраваУмноженныхНаборов.НомерНабораИсточника = Источник.НомерНабора";
		КонецЕсли;
	ИначеЕсли НЕ Упростить Тогда
		Запрос.Текст = Запрос.Текст + ";" + Символы.ПС +
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Приемник.НомерНабора КАК НомерНабора,
		|	Приемник.ВидДоступа,
		|	Приемник.ЗначениеДоступа,
		|	ПраваНаборовПриемника.Чтение,
		|	ПраваНаборовПриемника.Добавление,
		|	ПраваНаборовПриемника.Изменение,
		|	ПраваНаборовПриемника.Удаление
		|ИЗ
		|	Приемник КАК Приемник
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПраваНаборовПриемника КАК ПраваНаборовПриемника
		|		ПО Приемник.НомерНабора = ПраваНаборовПриемника.НомерНабора
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	Источник.НомерНабора + Максимальный.НомерНабораПриемника,
		|	Источник.ВидДоступа,
		|	Источник.ЗначениеДоступа,
		|	ПраваНаборовИсточника.Чтение,
		|	ПраваНаборовИсточника.Добавление,
		|	ПраваНаборовИсточника.Изменение,
		|	ПраваНаборовИсточника.Удаление
		|ИЗ
		|	Источник КАК Источник
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПраваНаборовИсточника КАК ПраваНаборовИсточника
		|		ПО Источник.НомерНабора = ПраваНаборовИсточника.НомерНабора
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Максимальный КАК Максимальный
		|		ПО (ИСТИНА)";
	Иначе
		Запрос.Текст = Запрос.Текст + ";" + Символы.ПС +
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Приемник.НомерНабора КАК НомерНабора,
		|	Приемник.ВидДоступа,
		|	Приемник.ЗначениеДоступа,
		|	ПраваНаборовПриемника.Чтение,
		|	ПраваНаборовПриемника.Добавление,
		|	ПраваНаборовПриемника.Изменение,
		|	ПраваНаборовПриемника.Удаление,
		|	ПраваНаборовПриемника.ДлинаНабора
		|ПОМЕСТИТЬ ВсеНаборы
		|ИЗ
		|	Приемник КАК Приемник
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПраваНаборовПриемника КАК ПраваНаборовПриемника
		|		ПО Приемник.НомерНабора = ПраваНаборовПриемника.НомерНабора
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	Источник.НомерНабора + Максимальный.НомерНабораПриемника,
		|	Источник.ВидДоступа,
		|	Источник.ЗначениеДоступа,
		|	ПраваНаборовИсточника.Чтение,
		|	ПраваНаборовИсточника.Добавление,
		|	ПраваНаборовИсточника.Изменение,
		|	ПраваНаборовИсточника.Удаление,
		|	ПраваНаборовИсточника.ДлинаНабора
		|ИЗ
		|	Источник КАК Источник
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПраваНаборовИсточника КАК ПраваНаборовИсточника
		|		ПО Источник.НомерНабора = ПраваНаборовИсточника.НомерНабора
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Максимальный КАК Максимальный
		|		ПО (ИСТИНА)";
	КонецЕсли;
	
	Если НЕ Упростить Тогда
		
		Если ТипЗнч(Приемник) = Тип("ТаблицаЗначений") Тогда
			// Подготовка результата с избавлением от типа NULL в колонках таблицы значений.
			НаборЗаписей = РегистрыСведений.НаборыЗначенийДоступа.СоздатьНаборЗаписей();
			НаборЗаписей.Загрузить(Запрос.Выполнить().Выгрузить());
			Приемник = НаборЗаписей.Выгрузить(, "НомерНабора, ВидДоступа, ЗначениеДоступа, Чтение, Добавление, Изменение, Удаление");
		Иначе
			Приемник.Загрузить(Запрос.Выполнить().Выгрузить());
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	// Подготовка номеров всех наборов для определения копий наборов по правам.
	Запрос.Текст = Запрос.Текст + ";" + Символы.ПС +
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВсеНаборы.НомерНабора,
	|	ВсеНаборы.Чтение,
	|	ВсеНаборы.Добавление,
	|	ВсеНаборы.Изменение,
	|	ВсеНаборы.Удаление,
	|	ВсеНаборы.ДлинаНабора
	|ПОМЕСТИТЬ ВсеНомераНаборов
	|ИЗ
	|	ВсеНаборы КАК ВсеНаборы";
	
	// Определение копий наборов в пределах прав.
	// "Копии" возникают из-за правил раскрытия скобок в логических выражениях:
	//  Для наборов в пределах права и наборов разных прав:
	//     X  И  X = X,
	//     X ИЛИ X = X, где X - набор строк-аргументов.
	//  Только для наборов в пределах права:
	//     (а И б И в) ИЛИ (а И б) = (а И б), где а,б,в - строки-аргументы наборов.
	// Исходя из этих правил одинаковые строки в наборе и одинаковые наборы можно удалить.
	//
	Запрос.Текст = Запрос.Текст + ";" + Символы.ПС +
	"ВЫБРАТЬ
	|	ВсеНомераНаборов1.НомерНабора,
	|	ВсеНомераНаборов2.НомерНабора КАК НомерКопииНабора,
	|	ВсеНомераНаборов2.ДлинаНабора КАК ДлинаКопииНабора
	|ПОМЕСТИТЬ НомераКопийВсехНаборовПоПравуЧтение
	|ИЗ
	|	ВсеНомераНаборов КАК ВсеНомераНаборов1
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВсеНомераНаборов КАК ВсеНомераНаборов2
	|		ПО (ВсеНомераНаборов1.Чтение)
	|			И (ВсеНомераНаборов2.Чтение)
	|			И ((НЕ ЛОЖЬ В
	|					(ВЫБРАТЬ ПЕРВЫЕ 1
	|						ЛОЖЬ
	|					ИЗ
	|						ВсеНаборы КАК ВсеНаборы1 ЛЕВОЕ СОЕДИНЕНИЕ ВсеНаборы КАК ВсеНаборы2
	|							ПО
	|								ВсеНаборы2.НомерНабора = ВсеНомераНаборов1.НомерНабора
	|									И ВсеНаборы1.Чтение
	|									И ВсеНаборы2.Чтение
	|									И ВсеНаборы1.ВидДоступа = ВсеНаборы2.ВидДоступа
	|									И ВсеНаборы1.ЗначениеДоступа = ВсеНаборы2.ЗначениеДоступа
	|					ГДЕ
	|						ВсеНаборы1.Чтение
	|						И ВсеНаборы1.НомерНабора = ВсеНомераНаборов2.НомерНабора
	|						И ВсеНаборы2.ВидДоступа ЕСТЬ NULL )))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсеНомераНаборов1.НомерНабора,
	|	ВсеНомераНаборов2.НомерНабора КАК НомерКопииНабора,
	|	ВсеНомераНаборов2.ДлинаНабора КАК ДлинаКопииНабора
	|ПОМЕСТИТЬ НомераКопийВсехНаборовПоПравуДобавление
	|ИЗ
	|	ВсеНомераНаборов КАК ВсеНомераНаборов1
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВсеНомераНаборов КАК ВсеНомераНаборов2
	|		ПО (ВсеНомераНаборов1.Добавление)
	|			И (ВсеНомераНаборов2.Добавление)
	|			И ((НЕ ЛОЖЬ В
	|					(ВЫБРАТЬ ПЕРВЫЕ 1
	|						ЛОЖЬ
	|					ИЗ
	|						ВсеНаборы КАК ВсеНаборы1 ЛЕВОЕ СОЕДИНЕНИЕ ВсеНаборы КАК ВсеНаборы2
	|							ПО
	|								ВсеНаборы2.НомерНабора = ВсеНомераНаборов1.НомерНабора
	|									И ВсеНаборы1.Добавление
	|									И ВсеНаборы2.Добавление
	|									И ВсеНаборы1.ВидДоступа = ВсеНаборы2.ВидДоступа
	|									И ВсеНаборы1.ЗначениеДоступа = ВсеНаборы2.ЗначениеДоступа
	|					ГДЕ
	|						ВсеНаборы1.Добавление
	|						И ВсеНаборы1.НомерНабора = ВсеНомераНаборов2.НомерНабора
	|						И ВсеНаборы2.ВидДоступа ЕСТЬ NULL )))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсеНомераНаборов1.НомерНабора,
	|	ВсеНомераНаборов2.НомерНабора КАК НомерКопииНабора,
	|	ВсеНомераНаборов2.ДлинаНабора КАК ДлинаКопииНабора
	|ПОМЕСТИТЬ НомераКопийВсехНаборовПоПравуИзменение
	|ИЗ
	|	ВсеНомераНаборов КАК ВсеНомераНаборов1
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВсеНомераНаборов КАК ВсеНомераНаборов2
	|		ПО (ВсеНомераНаборов1.Изменение)
	|			И (ВсеНомераНаборов2.Изменение)
	|			И ((НЕ ЛОЖЬ В
	|					(ВЫБРАТЬ ПЕРВЫЕ 1
	|						ЛОЖЬ
	|					ИЗ
	|						ВсеНаборы КАК ВсеНаборы1 ЛЕВОЕ СОЕДИНЕНИЕ ВсеНаборы КАК ВсеНаборы2
	|							ПО
	|								ВсеНаборы2.НомерНабора = ВсеНомераНаборов1.НомерНабора
	|									И ВсеНаборы1.Изменение
	|									И ВсеНаборы2.Изменение
	|									И ВсеНаборы1.ВидДоступа = ВсеНаборы2.ВидДоступа
	|									И ВсеНаборы1.ЗначениеДоступа = ВсеНаборы2.ЗначениеДоступа
	|					ГДЕ
	|						ВсеНаборы1.Изменение
	|						И ВсеНаборы1.НомерНабора = ВсеНомераНаборов2.НомерНабора
	|						И ВсеНаборы2.ВидДоступа ЕСТЬ NULL )))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВсеНомераНаборов1.НомерНабора,
	|	ВсеНомераНаборов2.НомерНабора КАК НомерКопииНабора,
	|	ВсеНомераНаборов2.ДлинаНабора КАК ДлинаКопииНабора
	|ПОМЕСТИТЬ НомераКопийВсехНаборовПоПравуУдаление
	|ИЗ
	|	ВсеНомераНаборов КАК ВсеНомераНаборов1
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВсеНомераНаборов КАК ВсеНомераНаборов2
	|		ПО (ВсеНомераНаборов1.Удаление)
	|			И (ВсеНомераНаборов2.Удаление)
	|			И ((НЕ ЛОЖЬ В
	|					(ВЫБРАТЬ ПЕРВЫЕ 1
	|						ЛОЖЬ
	|					ИЗ
	|						ВсеНаборы КАК ВсеНаборы1 ЛЕВОЕ СОЕДИНЕНИЕ ВсеНаборы КАК ВсеНаборы2
	|							ПО
	|								ВсеНаборы2.НомерНабора = ВсеНомераНаборов1.НомерНабора
	|									И ВсеНаборы1.Удаление
	|									И ВсеНаборы2.Удаление
	|									И ВсеНаборы1.ВидДоступа = ВсеНаборы2.ВидДоступа
	|									И ВсеНаборы1.ЗначениеДоступа = ВсеНаборы2.ЗначениеДоступа
	|					ГДЕ
	|						ВсеНаборы1.Удаление
	|						И ВсеНаборы1.НомерНабора = ВсеНомераНаборов2.НомерНабора
	|						И ВсеНаборы2.ВидДоступа ЕСТЬ NULL )))";
	
	// Выбор номеров наборов копий по правам.
	Запрос.Текст = Запрос.Текст + ";" + Символы.ПС +
	"ВЫБРАТЬ
	|	МИНИМУМ(НомераМеньшихКопийВсехНаборовПоПравуЧтение.НомерКопииНабора) КАК НомерКопииНабора,
	|	ИСТИНА КАК Чтение,
	|	ЛОЖЬ КАК Добавление,
	|	ЛОЖЬ КАК Изменение,
	|	ЛОЖЬ КАК Удаление
	|ПОМЕСТИТЬ НомераКопийВсехНаборовПоПравам
	|ИЗ
	|	(ВЫБРАТЬ
	|		НомераКопийВсехНаборовПоПравуЧтение.НомерНабора КАК НомерНабора,
	|		НомераКопийВсехНаборовПоПравуЧтение.НомерКопииНабора КАК НомерКопииНабора
	|	ИЗ
	|		НомераКопийВсехНаборовПоПравуЧтение КАК НомераКопийВсехНаборовПоПравуЧтение
	|	ГДЕ
	|		(НомераКопийВсехНаборовПоПравуЧтение.НомерНабора, НомераКопийВсехНаборовПоПравуЧтение.ДлинаКопииНабора) В
	|				(ВЫБРАТЬ
	|					МинимальнаяДлинаКопий.НомерНабора,
	|					МИНИМУМ(МинимальнаяДлинаКопий.ДлинаКопииНабора) КАК МинимальнаяДлинаКопии
	|				ИЗ
	|					НомераКопийВсехНаборовПоПравуЧтение КАК МинимальнаяДлинаКопий
	|				СГРУППИРОВАТЬ ПО
	|							МинимальнаяДлинаКопий.НомерНабора)) КАК НомераМеньшихКопийВсехНаборовПоПравуЧтение
	|
	|СГРУППИРОВАТЬ ПО
	|	НомераМеньшихКопийВсехНаборовПоПравуЧтение.НомерНабора
	|
	|ИМЕЮЩИЕ
	|	(НЕ МИНИМУМ(НомераМеньшихКопийВсехНаборовПоПравуЧтение.НомерКопииНабора) ЕСТЬ NULL )
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МИНИМУМ(НомераМеньшихКопийВсехНаборовПоПравуДобавление.НомерКопииНабора),
	|	ЛОЖЬ,
	|	ИСТИНА,
	|	ЛОЖЬ,
	|	ЛОЖЬ
	|ИЗ
	|	(ВЫБРАТЬ
	|		НомераКопийВсехНаборовПоПравуДобавление.НомерНабора КАК НомерНабора,
	|		НомераКопийВсехНаборовПоПравуДобавление.НомерКопииНабора КАК НомерКопииНабора
	|	ИЗ
	|		НомераКопийВсехНаборовПоПравуДобавление КАК НомераКопийВсехНаборовПоПравуДобавление
	|	ГДЕ
	|		(НомераКопийВсехНаборовПоПравуДобавление.НомерНабора, НомераКопийВсехНаборовПоПравуДобавление.ДлинаКопииНабора) В
	|				(ВЫБРАТЬ
	|					МинимальнаяДлинаКопий.НомерНабора,
	|					МИНИМУМ(МинимальнаяДлинаКопий.ДлинаКопииНабора) КАК МинимальнаяДлинаКопии
	|				ИЗ
	|					НомераКопийВсехНаборовПоПравуДобавление КАК МинимальнаяДлинаКопий
	|				СГРУППИРОВАТЬ ПО
	|							МинимальнаяДлинаКопий.НомерНабора)) КАК НомераМеньшихКопийВсехНаборовПоПравуДобавление
	|
	|СГРУППИРОВАТЬ ПО
	|	НомераМеньшихКопийВсехНаборовПоПравуДобавление.НомерНабора
	|
	|ИМЕЮЩИЕ
	|	(НЕ МИНИМУМ(НомераМеньшихКопийВсехНаборовПоПравуДобавление.НомерКопииНабора) ЕСТЬ NULL )
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МИНИМУМ(НомераМеньшихКопийВсехНаборовПоПравуИзменение.НомерКопииНабора),
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ИСТИНА,
	|	ЛОЖЬ
	|ИЗ
	|	(ВЫБРАТЬ
	|		НомераКопийВсехНаборовПоПравуИзменение.НомерНабора КАК НомерНабора,
	|		НомераКопийВсехНаборовПоПравуИзменение.НомерКопииНабора КАК НомерКопииНабора
	|	ИЗ
	|		НомераКопийВсехНаборовПоПравуИзменение КАК НомераКопийВсехНаборовПоПравуИзменение
	|	ГДЕ
	|		(НомераКопийВсехНаборовПоПравуИзменение.НомерНабора, НомераКопийВсехНаборовПоПравуИзменение.ДлинаКопииНабора) В
	|				(ВЫБРАТЬ
	|					МинимальнаяДлинаКопий.НомерНабора,
	|					МИНИМУМ(МинимальнаяДлинаКопий.ДлинаКопииНабора) КАК МинимальнаяДлинаКопии
	|				ИЗ
	|					НомераКопийВсехНаборовПоПравуИзменение КАК МинимальнаяДлинаКопий
	|				СГРУППИРОВАТЬ ПО
	|							МинимальнаяДлинаКопий.НомерНабора)) КАК НомераМеньшихКопийВсехНаборовПоПравуИзменение
	|
	|СГРУППИРОВАТЬ ПО
	|	НомераМеньшихКопийВсехНаборовПоПравуИзменение.НомерНабора
	|
	|ИМЕЮЩИЕ
	|	(НЕ МИНИМУМ(НомераМеньшихКопийВсехНаборовПоПравуИзменение.НомерКопииНабора) ЕСТЬ NULL )
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	МИНИМУМ(НомераМеньшихКопийВсехНаборовПоПравуУдаление.НомерКопииНабора),
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	ИСТИНА
	|ИЗ
	|	(ВЫБРАТЬ
	|		НомераКопийВсехНаборовПоПравуУдаление.НомерНабора КАК НомерНабора,
	|		НомераКопийВсехНаборовПоПравуУдаление.НомерКопииНабора КАК НомерКопииНабора
	|	ИЗ
	|		НомераКопийВсехНаборовПоПравуУдаление КАК НомераКопийВсехНаборовПоПравуУдаление
	|	ГДЕ
	|		(НомераКопийВсехНаборовПоПравуУдаление.НомерНабора, НомераКопийВсехНаборовПоПравуУдаление.ДлинаКопииНабора) В
	|				(ВЫБРАТЬ
	|					МинимальнаяДлинаКопий.НомерНабора,
	|					МИНИМУМ(МинимальнаяДлинаКопий.ДлинаКопииНабора) КАК МинимальнаяДлинаКопии
	|				ИЗ
	|					НомераКопийВсехНаборовПоПравуУдаление КАК МинимальнаяДлинаКопий
	|				СГРУППИРОВАТЬ ПО
	|							МинимальнаяДлинаКопий.НомерНабора)) КАК НомераМеньшихКопийВсехНаборовПоПравуУдаление
	|
	|СГРУППИРОВАТЬ ПО
	|	НомераМеньшихКопийВсехНаборовПоПравуУдаление.НомерНабора
	|
	|ИМЕЮЩИЕ
	|	(НЕ МИНИМУМ(НомераМеньшихКопийВсехНаборовПоПравуУдаление.НомерКопииНабора) ЕСТЬ NULL )";
	
	// Подготовка номеров всех наборов для определения копий наборов между правами.
	Запрос.Текст = Запрос.Текст + ";" + Символы.ПС +
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НомераКопийВсехНаборовПоПравам.НомерКопииНабора КАК НомерНабора,
	|	НомераКопийВсехНаборовПоПравам.Чтение,
	|	НомераКопийВсехНаборовПоПравам.Добавление,
	|	НомераКопийВсехНаборовПоПравам.Изменение,
	|	НомераКопийВсехНаборовПоПравам.Удаление
	|ПОМЕСТИТЬ ВсеНомераНаборовПоПравам
	|ИЗ
	|	НомераКопийВсехНаборовПоПравам КАК НомераКопийВсехНаборовПоПравам";
	
	// Определение копий наборов.
	Запрос.Текст = Запрос.Текст + ";" + Символы.ПС +
	"ВЫБРАТЬ
	|	ВсеНомераНаборовПоПравам1.НомерНабора,
	|	МИНИМУМ(ВсеНомераНаборовПоПравам2.НомерНабора) КАК НомерКопииНабора
	|ПОМЕСТИТЬ НомераКопийВсехНаборов
	|ИЗ
	|	ВсеНомераНаборовПоПравам КАК ВсеНомераНаборовПоПравам1
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВсеНомераНаборовПоПравам КАК ВсеНомераНаборовПоПравам2
	|		ПО ((НЕ ЛОЖЬ В
	|					(ВЫБРАТЬ ПЕРВЫЕ 1
	|						ЛОЖЬ
	|					ИЗ
	|						ВсеНаборы КАК ВсеНаборы1 ЛЕВОЕ СОЕДИНЕНИЕ ВсеНаборы КАК ВсеНаборы2
	|							ПО
	|								ВсеНаборы2.НомерНабора = ВсеНомераНаборовПоПравам2.НомерНабора
	|									И ВсеНаборы1.ВидДоступа = ВсеНаборы2.ВидДоступа
	|									И ВсеНаборы1.ЗначениеДоступа = ВсеНаборы2.ЗначениеДоступа
	|					ГДЕ
	|						ВсеНаборы1.НомерНабора = ВсеНомераНаборовПоПравам1.НомерНабора
	|						И ВсеНаборы2.ВидДоступа ЕСТЬ NULL )))
	|			И ((НЕ ЛОЖЬ В
	|					(ВЫБРАТЬ ПЕРВЫЕ 1
	|						ЛОЖЬ
	|					ИЗ
	|						ВсеНаборы КАК ВсеНаборы1 ЛЕВОЕ СОЕДИНЕНИЕ ВсеНаборы КАК ВсеНаборы2
	|							ПО
	|								ВсеНаборы2.НомерНабора = ВсеНомераНаборовПоПравам1.НомерНабора
	|									И ВсеНаборы1.ВидДоступа = ВсеНаборы2.ВидДоступа
	|									И ВсеНаборы1.ЗначениеДоступа = ВсеНаборы2.ЗначениеДоступа
	|					ГДЕ
	|						ВсеНаборы1.НомерНабора = ВсеНомераНаборовПоПравам2.НомерНабора
	|						И ВсеНаборы2.ВидДоступа ЕСТЬ NULL )))
	|
	|СГРУППИРОВАТЬ ПО
	|	ВсеНомераНаборовПоПравам1.НомерНабора";
	
	// Выбор номеров наборов со сжатием по правам.
	Запрос.Текст = Запрос.Текст + ";" + Символы.ПС +
	"ВЫБРАТЬ
	|	НомераКопийВсехНаборов.НомерКопииНабора КАК НомерНабора,
	|	МАКСИМУМ(ВсеНомераНаборовПоПравам.Чтение) КАК Чтение,
	|	МАКСИМУМ(ВсеНомераНаборовПоПравам.Добавление) КАК Добавление,
	|	МАКСИМУМ(ВсеНомераНаборовПоПравам.Изменение) КАК Изменение,
	|	МАКСИМУМ(ВсеНомераНаборовПоПравам.Удаление) КАК Удаление
	|ПОМЕСТИТЬ НомераНаборовСПравами
	|ИЗ
	|	ВсеНомераНаборовПоПравам КАК ВсеНомераНаборовПоПравам
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ НомераКопийВсехНаборов КАК НомераКопийВсехНаборов
	|		ПО ВсеНомераНаборовПоПравам.НомерНабора = НомераКопийВсехНаборов.НомерНабора
	|
	|СГРУППИРОВАТЬ ПО
	|	НомераКопийВсехНаборов.НомерКопииНабора";
	
	// Выбор наборов и помещение в приемник.
	Запрос.Текст = Запрос.Текст + ";" + Символы.ПС +
	"ВЫБРАТЬ
	|	НомераНаборовСПравами.НомерНабора,
	|	ВсеНаборы.ВидДоступа,
	|	ВсеНаборы.ЗначениеДоступа,
	|	НомераНаборовСПравами.Чтение,
	|	НомераНаборовСПравами.Добавление,
	|	НомераНаборовСПравами.Изменение,
	|	НомераНаборовСПравами.Удаление
	|ИЗ
	|	НомераНаборовСПравами КАК НомераНаборовСПравами
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВсеНаборы КАК ВсеНаборы
	|		ПО НомераНаборовСПравами.НомерНабора = ВсеНаборы.НомерНабора";
	
	Если ТипЗнч(Приемник) = Тип("ТаблицаЗначений") Тогда
		// Подготовка результата с избавлением от типа NULL в колонках таблицы значений.
		НаборЗаписей = РегистрыСведений.НаборыЗначенийДоступа.СоздатьНаборЗаписей();
		НаборЗаписей.Загрузить(Запрос.Выполнить().Выгрузить());
		Приемник = НаборЗаписей.Выгрузить(, "НомерНабора, ВидДоступа, ЗначениеДоступа, Чтение, Добавление, Изменение, Удаление");
	Иначе
		Приемник.Загрузить(Запрос.Выполнить().Выгрузить());
	КонецЕсли;
	
КонецПроцедуры

// Выполняет обновление наборов значений доступа объекта, если они изменились.
//  Наборы обновляются в табличной части (если используется) и
// в регистре сведений НаборыЗначенийДоступа.
//
// Параметры:
//  СсылкаНаОбъект - СправочникСсылка, ДокументСсылка, ...
//
Процедура ОбновитьНаборыЗначенийДоступа(СсылкаНаОбъект) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	// Если передача параметра Объект производилась с клиента на сервер,
	// то передавалась ссылка, и объект требуется получить.
	Объект = СсылкаНаОбъект.ПолучитьОбъект();
	ТипЗначенияОбъект = ТипЗнч(Объект);
	
	НаборыЗаписываются = УправлениеДоступомСлужебныйПовтИсп.ТипыОбъектовВПодпискахНаСобытия(
		"ЗаписатьНаборыЗначенийДоступа").Получить(ТипЗначенияОбъект) <> Неопределено;
	
	Если НЕ НаборыЗаписываются Тогда
		ВызватьИсключение(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Неверные параметры.
				           |Тип объекта ""%1""
				           |не найден в подписке на события
				           |""Записать наборы значений доступа"".'"),
				ТипЗначенияОбъект));
	КонецЕсли;
	
	Если Метаданные.РегистрыСведений.НаборыЗначенийДоступа.Измерения.Объект.Тип.Типы().Найти(ТипЗнч(СсылкаНаОбъект)) = Неопределено Тогда
		ВызватьИсключение(
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Ошибка при записи наборов значений доступа:
				           |в регистре сведений НаборыЗначенийДоступа в измерении Объект
				           |не задан тип %1'"),
				СсылкаНаОбъект.Метаданные().ПолноеИмя()));
	КонецЕсли;
	
	Если СсылкаНаОбъект.Метаданные().ТабличныеЧасти.Найти("НаборыЗначенийДоступа") = Неопределено Тогда
		// Изменение объекта не требуется
		УправлениеДоступомСлужебный.ЗаписатьНаборыЗначенийДоступа(Объект);
	Иначе
		// Изменение объекта требуется
		Таблица = УправлениеДоступомСлужебный.ПолучитьНаборыЗначенийДоступаТабличнойЧасти(Объект);
		
		Если УправлениеДоступомСлужебный.НаборыЗначенийДоступаТабличнойЧастиИзменены(
		         СсылкаНаОбъект, Таблица) Тогда
		
			Объект.ОбменДанными.Загрузка = Истина;
			Объект.ДополнительныеСвойства.Вставить("ЗаписатьНаборыЗначенийДоступа");
			Объект.ДополнительныеСвойства.Вставить("ЗаписатьЗависимыеНаборыЗначенийДоступа");
			Объект.ДополнительныеСвойства.Вставить("НаборыЗначенийДоступаТабличнойЧастиЗаполнены");
			Объект.НаборыЗначенийДоступа.Загрузить(Таблица);
			Объект.Записать();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик подписок ЗаполнитьНаборыЗначенийДоступаТабличныхЧастей* на событие ПередЗаписью
// вызывает заполнение значений доступа табличной части объекта НаборыЗначенийДоступа,
// когда для ограничения доступа к самому объекту используется шаблон #ПоНаборамЗначений.
//  Возможен случай использования подсистемы Управление доступом, когда
// указанной подписки не существует, если для указанной цели наборы не применяются.
//
// Обработчик подписки на событие ПередЗаписью для типов:
//  СправочникОбъект
//  ДокументОбъект
//  ПланВидовХарактеристикОбъект
//  ПланСчетовОбъект
//  ПланВидовРасчетаОбъект
//  БизнесПроцессОбъект
//  ЗадачаОбъект
//  ПланОбменаОбъект
//
Процедура ЗаполнитьНаборыЗначенийДоступаТабличныхЧастей(Объект, Отказ = Неопределено, РежимЗаписи = Неопределено, РежимПроведения = Неопределено) Экспорт
	
	Если Объект.ОбменДанными.Загрузка
	   И НЕ Объект.ДополнительныеСвойства.Свойство("ЗаписатьНаборыЗначенийДоступа") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если НЕ (  ПривилегированныйРежим()
	         И Объект.ДополнительныеСвойства.Свойство(
	               "НаборыЗначенийДоступаТабличнойЧастиЗаполнены")) Тогда
		
		Объект.НаборыЗначенийДоступа.Загрузить(
			УправлениеДоступомСлужебный.ПолучитьНаборыЗначенийДоступаТабличнойЧасти(Объект));
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции, используемые в переопределяемом модуле

// Возвращает структуру для удобства описания поставляемых профилей.
//
//  Чтобы указать предустановленный вид доступа,
// нужно в представлении задать строку Предустановленный.
//
//  Чтобы добавить значение доступа нужно указать
// полное имя предопределенного элемента, например,
// "Справочник.ГруппыПользователей.ВсеПользователи".
// 
Функция НовоеОписаниеПрофиляГруппДоступа() Экспорт
	
	НовоеОписание = Новый Структура;
	НовоеОписание.Вставить("Имя",             ""); // ИмяПредопределенныхДанных используется для привязки
	                                               // поставляемых данных к предопределенному элементу.
	НовоеОписание.Вставить("Идентификатор",   ""); // ИдентификаторПоставляемыхДанных
	НовоеОписание.Вставить("Наименование",    "");
	НовоеОписание.Вставить("Описание",        "");
	НовоеОписание.Вставить("Роли",            Новый Массив);
	НовоеОписание.Вставить("ВидыДоступа",     Новый СписокЗначений);
	НовоеОписание.Вставить("ЗначенияДоступа", Новый СписокЗначений);
	
	Возврат НовоеОписание;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции, используемые при обновлении информационной базы

// Возвращает ссылку на поставляемый профиль по идентификатору.
//
// Параметры:
//  Идентификатор - Строка - имя или уникальный идентификатор поставляемого профиля.
//
Функция ПоставляемыйПрофильПоИдентификатору(Идентификатор) Экспорт
	
	Возврат Справочники.ПрофилиГруппДоступа.ПоставляемыйПрофильПоИдентификатору(Идентификатор);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции, используемые для обновления вспомогательных данных

// Обновляет список ролей пользователей информационной базы
// по их текущим принадлежностям к группам доступа.
//  Пользователи с ролью "ПолныеПрава" игнорируется.
// 
// Параметры:
//  Пользователи - СправочникСсылка.Пользователи,
//                 СправочникСсылка.ВнешниеПользователи.
//                 Массив значений указанных выше типов.
//               - Неопределено - обновить роли всех пользователей.
//               - Тип по которому будет найден объект метаданных:
//                 если будет найден Справочник.ВнешниеПользователи,
//                 то будут обновлены роли всех внешних пользователей,
//                 иначе будут обновлены роли всех пользователей.
//
//  ПарольПользователяСервиса - Строка - Пароль для авторизации в менеджере 
//                        сервиса
//
Процедура ОбновитьРолиПользователей(Знач Пользователи1 = Неопределено, Знач ПарольПользователяСервиса = Неопределено) Экспорт
	
	УправлениеДоступомСлужебный.ОбновитьРолиПользователей(Пользователи1, ПарольПользователяСервиса);
	
КонецПроцедуры

// Перезаписывает группы значения доступа и виды доступа значения доступа
// в РегистрСведений.ГруппыЗначенийДоступа.
// 
// Используется для начального заполнения иерархии папок файлов,
// например, когда ограничения по значениям доступа сделаны для старого
// справочника, который не ограничивался. Тогда требуется заполнить группы.
//
// Параметры:
//  Ссылка -  ссылка на значение доступа.
// 
Процедура ЗаписатьГруппыИВидыДоступа(Знач ЗначениеДоступа) Экспорт
	
	Если ТипЗнч(ЗначениеДоступа) = Тип("СправочникОбъект.Пользователи")
	 ИЛИ ТипЗнч(ЗначениеДоступа) = Тип("СправочникСсылка.Пользователи")
	 ИЛИ ТипЗнч(ЗначениеДоступа) = Тип("СправочникОбъект.ВнешниеПользователи")
	 ИЛИ ТипЗнч(ЗначениеДоступа) = Тип("СправочникСсылка.ВнешниеПользователи")
	 ИЛИ ТипЗнч(ЗначениеДоступа) = Тип("СправочникОбъект.ГруппыПользователей")
	 ИЛИ ТипЗнч(ЗначениеДоступа) = Тип("СправочникСсылка.ГруппыПользователей")
	 ИЛИ ТипЗнч(ЗначениеДоступа) = Тип("СправочникОбъект.ГруппыВнешнихПользователей")
	 ИЛИ ТипЗнч(ЗначениеДоступа) = Тип("СправочникСсылка.ГруппыВнешнихПользователей") Тогда
		
		РегистрыСведений.ГруппыЗначенийДоступа.ОбновитьГруппировкиПользователей();
		Возврат;
	КонецЕсли;
	
	Параметры = УправлениеДоступомСлужебныйПовтИсп.Параметры();
	ЗначенияДоступаСГруппами         = Параметры.СвойстваВидовДоступа.ЗначенияДоступаСГруппами;
	ВозможныеПраваПоЗначениямДоступа = Параметры.ВозможныеПраваПоЗначениямДоступа;
	
	Если ЗначенияДоступаСГруппами.ПоТипам.Получить(ТипЗнч(ЗначениеДоступа)) <> Неопределено Тогда
		РегистрыСведений.ГруппыЗначенийДоступа.ОбновитьГруппыЗначенийДоступа(ЗначениеДоступа);
	КонецЕсли;
	
	Если ВозможныеПраваПоЗначениямДоступа.ПоТипам.Получить(ТипЗнч(ЗначениеДоступа)) <> Неопределено Тогда
		РегистрыСведений.ГруппыЗначенийДоступа.ОбновитьИерархиюВладельцевНастроекПравОбъектов(ЗначениеДоступа);
	КонецЕсли;
	
КонецПроцедуры

// Выполняет последовательное заполнение и обновление данных, необходимых для работы
// подсистемы УправленияДоступом в режиме ограничения доступа на уровне записей.
// 
//  При включенном режиме ограничения доступа на уровне записей заполняет наборы
// значений доступа. Заполнение выполняется частями при каждом запуске, пока все
// наборы значений доступа не будут заполнены.
//  При отключении режима ограничения доступа на уровне записей наборы значений доступа
// (заполненные ранее) удаляются при перезаписи объектов, а не все сразу.
//  Независимо от режима ограничения доступа на уровне записей обновляет вторичные
// данные: группы значений доступа и дополнительные поля в существующих наборах значений доступа.
//  После завершения всех обновлений и заполнений отключает использование регламентного
// задания.
//
//  Сведения о состоянии работы записываются в журнал регистрации.
//
//  Возможно вызывать программно, например, при обновлении информационной базы.
// Также для целей обновления есть форма Справочник.ГруппыДоступа.ОбновлениеДанныхОграниченияДоступа,
// с помощью которой можно сделать интерактивное обновление данных ограничения доступа
// при обновлении информационной базы.
//
Процедура ЗаполнениеДанныхДляОграниченияДоступа(КоличествоДанных = 0) Экспорт
	
	УправлениеДоступомСлужебный.ЗаполнениеДанныхДляОграниченияДоступа(КоличествоДанных);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Устаревшие процедуры и функции для обратной совместимости,
// планируемые к удалению в новой редакции.

// Всегда возвращает Ложь (удаленный функционал).
Функция ДобавлятьРуководителямДоступПодчиненных() Экспорт
	
	Возврат Ложь;
	
КонецФункции

// Не выполняет никаких действий. Следует удалить вызовы - вместо имен ролей
// используются ссылки справочника ИдентификаторыОбъектовМетаданных, для
// которых в случае переименования подсистем и ролей реализация вписывается
// в процедуру ЗаполнитьТаблицуПереименованияОбъектовМетаданных
// общего модуля ОбщегоНазначенияПереопределяемый.
//
Процедура ОбновитьПереименованныеРоли(ПереименованныеРоли) Экспорт
	
КонецПроцедуры

// Не выполняет никаких действий. Следует удалить вызовы, а значения
// параметров, отличных от значений по умолчанию установить в параметре
// ПараметрыОбновления процедуры ЗаполнитьПоставляемыеПрофилиГруппДоступа
// общего модуля УправлениеДоступомПереопределяемый.
//
Процедура ОбновитьПоставляемыеПрофилиИГруппыДоступа(ТолькоНеИзмененные = Истина,
                                                    ОбновлятьГруппыДоступа = Истина,
                                                    УдаляемыеВидыДоступаБезНастройки = Истина) Экспорт
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// Вспомогательные процедуры и функции

Процедура ДобавитьНаборыДляПрава(Право, Параметры)
	
	// Определение права, которое требуется проверить.
	ВидДоступаПроверяемогоПрава = Неопределено;
	// Определение наборов ограничения, которые требуется использовать.
	НаборыОграничений = Неопределено;
	
	Если      Параметры.ЗависимостиПрав["ПриПроверкеПрава" + Право] = "Чтение" Тогда
		НаборыОграничений           = Параметры.НаборыЧтения;
		ВидДоступаПроверяемогоПрава = ПланыВидовХарактеристик.ВидыДоступа.ПравоЧтения;
		
	ИначеЕсли Параметры.ЗависимостиПрав["ПриПроверкеПрава" + Право] = "Добавление" Тогда
		НаборыОграничений           = Параметры.НаборыДобавления;
		ВидДоступаПроверяемогоПрава = ПланыВидовХарактеристик.ВидыДоступа.ПравоДобавления;
	
	ИначеЕсли Параметры.ЗависимостиПрав["ПриПроверкеПрава" + Право] = "Изменение" Тогда
		НаборыОграничений           = Параметры.НаборыИзменения;
		ВидДоступаПроверяемогоПрава = ПланыВидовХарактеристик.ВидыДоступа.ПравоИзменения;
	КонецЕсли;
	
	Если Параметры.ЗависимостиПрав.ОтключитьПроверкуПравВедущейТаблицы Тогда
		ВидДоступаПроверяемогоПрава = Неопределено;
	КонецЕсли;
	
	Если ВидДоступаПроверяемогоПрава <> Неопределено И НаборыОграничений <> Неопределено Тогда
		
		Строка = Параметры.НаборыПравДляУмножения.Добавить();
		Строка.НомерНабора     = Параметры.НаборыПравДляУмножения.Количество();
		Строка.ВидДоступа      = ВидДоступаПроверяемогоПрава;
		Строка.ЗначениеДоступа = Параметры.СсылкаНаВедущийОбъект;
		Строка[Право] = Истина;
		
		НовыеНаборы = НаборыОграничений.Скопировать();
		НовыеНаборы.ЗаполнитьЗначения(Истина, Право);
		ДобавитьНаборыЗначенийДоступа(Параметры.НаборыОграниченийДляУмножения, НовыеНаборы);
		
	ИначеЕсли ВидДоступаПроверяемогоПрава <> Неопределено Тогда
		
		НовыеНаборы = Параметры.НаборыПравДляУмножения.Скопировать();
		НовыеНаборы.Очистить();
		Строка.НомерНабора     = Параметры.НаборыПравДляУмножения.Количество();
		Строка.ВидДоступа      = ВидДоступаПроверяемогоПрава;
		Строка.ЗначениеДоступа = Параметры.СсылкаНаВедущийОбъект;
		Строка[Право] = Истина;
		ДобавитьНаборыЗначенийДоступа(Параметры.Таблица, НовыеНаборы);
		
	ИначеЕсли НаборыОграничений <> Неопределено Тогда
		
		НовыеНаборы = НаборыОграничений.Скопировать();
		НовыеНаборы.ЗаполнитьЗначения(Истина, Право);
		ДобавитьНаборыЗначенийДоступа(Параметры.Таблица, НовыеНаборы);
		
	КонецЕсли;
	
КонецПроцедуры

Функция СвойстваГруппЗначенияДоступа(ТипЗначенияДоступа, ЗаголовокОшибки)
	
	УстановитьПривилегированныйРежим(Истина);
	
	СвойстваГрупп = Новый Структура;
	
	СвойстваВидовДоступа = УправлениеДоступомСлужебныйПовтИсп.Параметры().СвойстваВидовДоступа;
	
	Если СвойстваВидовДоступа.ЗначенияДоступаСГруппами.ПоТипам.Получить(ТипЗначенияДоступа) = Неопределено Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ЗаголовокОшибки + Символы.ПС + Символы.ПС +
			НСтр("ru = 'Для значений доступа типа ""%1""
			           |не используются группы значений доступа.'"),
			Строка(ТипЗначенияДоступа));
	КонецЕсли;
	
	ВидыДоступа = СвойстваВидовДоступа.ВидыДоступаЗначенийДоступа.ПоТипам.Получить(ТипЗначенияДоступа);
	
	Если ВидыДоступа.Количество() > 1 Тогда
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ЗаголовокОшибки + Символы.ПС + Символы.ПС +
			НСтр("ru = 'Для значений доступа типа ""%1""
			           |используется более одного вида доступа.'"),
			Строка(ТипЗначенияДоступа));
	КонецЕсли;
	
	ВидДоступа = ВидыДоступа[0];
	
	ОписаниеТипов = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ВидДоступа, "ТипЗначения");
	
	Если ОписаниеТипов = Неопределено
	 ИЛИ ОписаниеТипов.Типы().Количество() <> 1
	 ИЛИ НЕ ОбщегоНазначения.ЭтоСсылка(ОписаниеТипов.Типы()[0]) Тогда
		
		ВызватьИсключение СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			ЗаголовокОшибки + Символы.ПС + Символы.ПС +
			НСтр("ru = 'Для значений доступа типа ""%1""
			           |используются вид доступа ""%2"",
			           |который не имеет единственного типа в
			           |плане видов характеристик ""Виды доступа"".'"),
			Строка(ТипЗначенияДоступа),
			Строка(ВидДоступа));
	КонецЕсли;
	
	ТипГруппЗначенийДоступа = ОписаниеТипов.Типы()[0];
	ТаблицаГруппЗначенийДоступа = Метаданные.НайтиПоТипу(ТипГруппЗначенийДоступа).ПолноеИмя();
	
	СвойстваГрупп.Вставить("ВидДоступа", ВидДоступа);
	СвойстваГрупп.Вставить("Тип",        ТипГруппЗначенийДоступа);
	СвойстваГрупп.Вставить("Таблица",    ТаблицаГруппЗначенийДоступа);
	
	Возврат СвойстваГрупп;
	
КонецФункции
