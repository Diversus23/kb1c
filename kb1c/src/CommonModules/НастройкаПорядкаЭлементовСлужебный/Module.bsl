////////////////////////////////////////////////////////////////////////////////
// Подсистема "Настройка порядка элементов".
//
////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Выполняет перемещение элемента вверх или вниз по списку.
//
// Параметры:
//  Ссылка              - Ссылка - ссылка на перемещаемый элемент;
//  Список              - ДинамическийСписок - список, в котором требуется переместить элемент;
//  ОтображениеСписком  - Булево - Истина, если у элемента формы, связанного со списком, включен режим отображения "Список";
//  Направление         - Строка - направление перемещения элемента: "Вверх" или "Вниз" по списку.
//
// Возвращаемое значение:
//  Строка - описание ошибки.
Функция ИзменитьПорядокЭлементов(Ссылка, Список, ОтображениеСписком, Направление) Экспорт
	
	Результат = ПроверитьВозможностьПеремещения(Ссылка, Список, ОтображениеСписком);
	
	Если ПустаяСтрока(Результат) Тогда
		ПередвинутьЭлемент(Ссылка, Список, Направление);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает структуру с информацией о метаданных объекта.
// 
// Параметры:
//  Ссылка - ссылка на объект.
//
// Возвращаемое значение:
//  Структура - информация из метаданных объекта.
Функция ПолучитьИнформациюДляПеремещения(Ссылка) Экспорт
	
	Информация = Новый Структура;
	
	МетаданныеОбъекта = Ссылка.Метаданные();
	МетаданныеРеквизита = МетаданныеОбъекта.Реквизиты.РеквизитДопУпорядочивания;
	
	Информация.Вставить("ПолноеИмя",    МетаданныеОбъекта.ПолноеИмя());
	
	ЭтоСправочник = Метаданные.Справочники.Содержит(МетаданныеОбъекта);
	ЭтоПВХ        = Метаданные.ПланыВидовХарактеристик.Содержит(МетаданныеОбъекта);
	
	Если ЭтоСправочник ИЛИ ЭтоПВХ Тогда
		
		Информация.Вставить("ЕстьГруппы",
					МетаданныеОбъекта.Иерархический И 
							?(ЭтоПВХ, Истина, МетаданныеОбъекта.ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов));
		
		Информация.Вставить("ДляГрупп",     (МетаданныеРеквизита.Использование <> Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляЭлемента));
		Информация.Вставить("ДляЭлементов", (МетаданныеРеквизита.Использование <> Метаданные.СвойстваОбъектов.ИспользованиеРеквизита.ДляГруппы));
		Информация.Вставить("ЕстьРодитель",  МетаданныеОбъекта.Иерархический);
		Информация.Вставить("ГруппыСверху", ?(НЕ Информация.ЕстьРодитель, Ложь, МетаданныеОбъекта.ГруппыСверху));
		Информация.Вставить("ЕстьВладелец", ?(ЭтоПВХ, Ложь, (МетаданныеОбъекта.Владельцы.Количество() <> 0)));
		
	Иначе
		
		Информация.Вставить("ЕстьГруппы",   Ложь);
		Информация.Вставить("ДляГрупп",     Ложь);
		Информация.Вставить("ДляЭлементов", Истина);
		Информация.Вставить("ЕстьРодитель", Ложь);
		Информация.Вставить("ЕстьВладелец", Ложь);
		Информация.Вставить("ГруппыСверху", Ложь);
		
	КонецЕсли;
	
	Возврат Информация;
	
КонецФункции

// Возвращает значение реквизита доп. упорядочивания для нового объекта.
//
// Параметры:
//  Информация - Структура - информация о метаданных объекта;
//  Родитель   - Ссылка    - ссылка на родителя объекта;
//  Владелец   - Ссылка    - ссылка на владельца объекта.
//
// Возвращаемое значение:
//  Число - значение реквизита доп. упорядочивания.
Функция ПолучитьНовоеЗначениеРеквизитаДопУпорядочивания(Информация, Родитель, Владелец) Экспорт
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос();
	
	УсловияЗапроса = Новый Массив;
	
	Если Информация.ЕстьРодитель Тогда
		УсловияЗапроса.Добавить("Таблица.Родитель = &Родитель");
		Запрос.УстановитьПараметр("Родитель", Родитель);
	КонецЕсли;
	
	Если Информация.ЕстьВладелец Тогда
		УсловияЗапроса.Добавить("Таблица.Владелец = &Владелец");
		Запрос.УстановитьПараметр("Владелец", Владелец);
	КонецЕсли;
	
	ДополнительныеУсловия = "ИСТИНА";
	Для Каждого Условие Из УсловияЗапроса Цикл
		ДополнительныеУсловия = ДополнительныеУсловия + " И " + Условие;
	КонецЦикла;
	
	ТекстЗапроса =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Таблица.РеквизитДопУпорядочивания КАК РеквизитДопУпорядочивания
	|ИЗ
	|	&Таблица КАК Таблица
	|ГДЕ
	|	&ДополнительныеУсловия
	|
	|УПОРЯДОЧИТЬ ПО
	|	РеквизитДопУпорядочивания УБЫВ";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Таблица", Информация.ПолноеИмя);
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&ДополнительныеУсловия", ДополнительныеУсловия);
	
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат ?(Не ЗначениеЗаполнено(Выборка.РеквизитДопУпорядочивания), 1, Выборка.РеквизитДопУпорядочивания + 1);
	
КонецФункции

// Меняет местами выбранный элемент списка с соседним отображаемым элементом.
Процедура ПередвинутьЭлемент(СсылкаНаОбъект, Список, Знач Направление)
	
	Информация = ПолучитьИнформациюДляПеремещения(СсылкаНаОбъект);
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	*
	|ИЗ
	|	&Таблица КАК Таблица
	|ГДЕ
	|	Таблица.РеквизитДопУпорядочивания > &РеквизитДопУпорядочивания
	|УПОРЯДОЧИТЬ ПО
	|	Таблица.РеквизитДопУпорядочивания";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "&Таблица", Список.ОсновнаяТаблица);
	Если Направление = "Вверх" Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, ">", "<");
		ТекстЗапроса = ТекстЗапроса + " УБЫВ";
	КонецЕсли;
	
	ПостроительЗапроса = Новый ПостроительЗапроса(ТекстЗапроса);
	ПостроительЗапроса.ЗаполнитьНастройки();
	
	Если Информация.ЕстьРодитель Тогда
		ДобавитьПростойОтборВПостроительЗапроса(ПостроительЗапроса, "Родитель", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект, "Родитель"));
	КонецЕсли;
	
	Если Информация.ЕстьВладелец Тогда
		ДобавитьПростойОтборВПостроительЗапроса(ПостроительЗапроса, "Владелец", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект, "Владелец"));
	КонецЕсли;
	
	Если Информация.ЕстьГруппы Тогда
		Если Информация.ДляГрупп И Не Информация.ДляЭлементов Тогда
			ДобавитьПростойОтборВПостроительЗапроса(ПостроительЗапроса, "ЭтоГруппа", Истина);
		ИначеЕсли Не Информация.ДляГрупп И Информация.ДляЭлементов Тогда
			ДобавитьПростойОтборВПостроительЗапроса(ПостроительЗапроса, "ЭтоГруппа", Ложь);
		КонецЕсли;
	КонецЕсли;
	
	СкопироватьОтборы(ПостроительЗапроса, Список);
	ПостроительЗапроса.Параметры.Вставить("РеквизитДопУпорядочивания", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СсылкаНаОбъект, "РеквизитДопУпорядочивания"));
	
	ПостроительЗапроса.Выполнить();
	
	Выборка = ПостроительЗапроса.Результат.Выбрать();
	Если Выборка.Количество() <> 1 Тогда
		Возврат;
	КонецЕсли;
	
	Выборка.Следующий();
	
	НачатьТранзакцию();

	Попытка
		ЗаблокироватьДанныеДляРедактирования(СсылкаНаОбъект);
		ЗаблокироватьДанныеДляРедактирования(Выборка.Ссылка);
		
		ПеремещаемыйЭлемент = СсылкаНаОбъект.ПолучитьОбъект();
		СоседнийЭлемент = Выборка.Ссылка.ПолучитьОбъект();
		
		ПеремещаемыйЭлемент.РеквизитДопУпорядочивания = ПеремещаемыйЭлемент.РеквизитДопУпорядочивания + СоседнийЭлемент.РеквизитДопУпорядочивания;
		СоседнийЭлемент.РеквизитДопУпорядочивания     = ПеремещаемыйЭлемент.РеквизитДопУпорядочивания - СоседнийЭлемент.РеквизитДопУпорядочивания;
		ПеремещаемыйЭлемент.РеквизитДопУпорядочивания = ПеремещаемыйЭлемент.РеквизитДопУпорядочивания - СоседнийЭлемент.РеквизитДопУпорядочивания;
	
		ПеремещаемыйЭлемент.Записать();
		СоседнийЭлемент.Записать();
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

Функция ВидСравнения(ЗначениеКоллекцииВидСравненияКомпоновкиДанных)
	
	Если ЗначениеКоллекцииВидСравненияКомпоновкиДанных = ВидСравненияКомпоновкиДанных.Больше Тогда
		Возврат ВидСравнения.Больше;
	ИначеЕсли ЗначениеКоллекцииВидСравненияКомпоновкиДанных = ВидСравненияКомпоновкиДанных.БольшеИлиРавно Тогда
		Возврат ВидСравнения.БольшеИлиРавно;
	ИначеЕсли ЗначениеКоллекцииВидСравненияКомпоновкиДанных = ВидСравненияКомпоновкиДанных.ВИерархии Тогда
		Возврат ВидСравнения.ВИерархии;
	ИначеЕсли ЗначениеКоллекцииВидСравненияКомпоновкиДанных = ВидСравненияКомпоновкиДанных.ВСписке Тогда
		Возврат ВидСравнения.ВСписке;
	ИначеЕсли ЗначениеКоллекцииВидСравненияКомпоновкиДанных = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии Тогда
		Возврат ВидСравнения.ВСпискеПоИерархии;
	ИначеЕсли ЗначениеКоллекцииВидСравненияКомпоновкиДанных = ВидСравненияКомпоновкиДанных.Меньше Тогда
		Возврат ВидСравнения.Меньше;
	ИначеЕсли ЗначениеКоллекцииВидСравненияКомпоновкиДанных = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно Тогда
		Возврат ВидСравнения.МеньшеИлиРавно;
	ИначеЕсли ЗначениеКоллекцииВидСравненияКомпоновкиДанных = ВидСравненияКомпоновкиДанных.НеВИерархии Тогда
		Возврат ВидСравнения.НеВИерархии;
	ИначеЕсли ЗначениеКоллекцииВидСравненияКомпоновкиДанных = ВидСравненияКомпоновкиДанных.НеВСписке Тогда
		Возврат ВидСравнения.НеВСписке;
	ИначеЕсли ЗначениеКоллекцииВидСравненияКомпоновкиДанных = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии Тогда
		Возврат ВидСравнения.НеВСпискеПоИерархии;
	ИначеЕсли ЗначениеКоллекцииВидСравненияКомпоновкиДанных = ВидСравненияКомпоновкиДанных.НеРавно Тогда
		Возврат ВидСравнения.НеРавно;
	ИначеЕсли ЗначениеКоллекцииВидСравненияКомпоновкиДанных = ВидСравненияКомпоновкиДанных.НеСодержит Тогда
		Возврат ВидСравнения.НеСодержит;
	ИначеЕсли ЗначениеКоллекцииВидСравненияКомпоновкиДанных = ВидСравненияКомпоновкиДанных.Равно Тогда
		Возврат ВидСравнения.Равно;
	ИначеЕсли ЗначениеКоллекцииВидСравненияКомпоновкиДанных = ВидСравненияКомпоновкиДанных.Содержит Тогда
		Возврат ВидСравнения.Содержит;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

// Копирует отборы динамического списка в построитель запроса. Недоступные в построителе поля игнорируются.
Процедура СкопироватьОтборы(ПостроительЗапроса, ДинамическийСписок)
	Отбор = ПостроительЗапроса.Отбор;
	Для Каждого ЭлементОтбораДинамическогоСписка Из ДинамическийСписок.Отбор.Элементы Цикл
		
		ИмяПоля = ЭлементОтбораДинамическогоСписка.ЛевоеЗначение;
		ЧастиИмени = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяПоля, ".", Ложь);
		
		Если ПостроительЗапроса.ДоступныеПоля.Найти(ЧастиИмени[0]) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ПравоеЗначение = ЭлементОтбораДинамическогоСписка.ПравоеЗначение;
		ВидСравненияПостроителя = ВидСравнения(ЭлементОтбораДинамическогоСписка.ВидСравнения);
		Если ВидСравненияПостроителя = Неопределено Тогда
			МетаданныеРеквизита = Метаданные.НайтиПоПолномуИмени(ДинамическийСписок.ОсновнаяТаблица).Реквизиты.Найти(ИмяПоля);
			Если МетаданныеРеквизита = Неопределено Тогда
				// поиск среди стандартных
				Для Каждого СтандартныйРеквизит Из Метаданные.НайтиПоПолномуИмени(ДинамическийСписок.ОсновнаяТаблица).СтандартныеРеквизиты Цикл
					Если СтандартныйРеквизит.Имя = ИмяПоля Тогда
						МетаданныеРеквизита = СтандартныйРеквизит;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если МетаданныеРеквизита <> Неопределено Тогда
				Если МетаданныеРеквизита.Тип = Новый ОписаниеТипов("Булево") Тогда
					Продолжить;
				КонецЕсли;
				ПравоеЗначение = Новый Массив;
				ПравоеЗначение.Добавить(Неопределено);
				ПравоеЗначение.Добавить("");
				ПравоеЗначение.Добавить(0);
				ПравоеЗначение.Добавить();
				Для Каждого Тип Из МетаданныеРеквизита.Тип.Типы() Цикл
					Если Тип <> Тип("Булево") Тогда
						Типы = Новый Массив;
						Типы.Добавить(Тип);
						ОписаниеТипов = Новый ОписаниеТипов(Типы);
						ПравоеЗначение.Добавить(ОписаниеТипов.ПривестиЗначение());
					КонецЕсли;
				КонецЦикла;
			Иначе
				Продолжить;
			КонецЕсли;
			
			Если ЭлементОтбораДинамическогоСписка.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено Тогда
				ВидСравненияПостроителя = ВидСравнения.НеВСписке;
			ИначеЕсли ЭлементОтбораДинамическогоСписка.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено Тогда
				ВидСравненияПостроителя = ВидСравнения.ВСписке;
			Иначе // неизвестный вид сравнения
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		ЭлементОтбораПостроителяЗапроса = Отбор.Добавить(ИмяПоля);
		ЭлементОтбораПостроителяЗапроса.ВидСравнения = ВидСравненияПостроителя;
		ЭлементОтбораПостроителяЗапроса.Значение = ПравоеЗначение;
		ЭлементОтбораПостроителяЗапроса.Использование = ЭлементОтбораДинамическогоСписка.Использование;
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьПростойОтборВПостроительЗапроса(ПостроительЗапроса, ИмяПоля, Значение)
	Отбор = ПостроительЗапроса.Отбор;
	ЭлементОтбораПостроителяЗапроса = Отбор.Добавить(ИмяПоля);
	ЭлементОтбораПостроителяЗапроса.ВидСравнения = ВидСравнения.Равно;
	ЭлементОтбораПостроителяЗапроса.Значение = Значение;
	ЭлементОтбораПостроителяЗапроса.Использование = Истина;
КонецПроцедуры

Функция СписокСодержитОтборПоВладельцу(Список)
	
	ОтборыПоВладельцу = Новый Массив;
	ОтборыПоВладельцу.Добавить(Новый ПолеКомпоновкиДанных("Владелец"));
	ОтборыПоВладельцу.Добавить(Новый ПолеКомпоновкиДанных("Owner"));
	
	Для Каждого Отбор Из Список.Отбор.Элементы Цикл
		Если ОтборыПоВладельцу.Найти(Отбор.ЛевоеЗначение) <> Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция СписокСодержитОтборПоРодителю(Список)
	
	ОтборыПоВладельцу = Новый Массив;
	ОтборыПоВладельцу.Добавить(Новый ПолеКомпоновкиДанных("Родитель"));
	ОтборыПоВладельцу.Добавить(Новый ПолеКомпоновкиДанных("Parent"));
	
	Для Каждого Отбор Из Список.Отбор.Элементы Цикл
		Если ОтборыПоВладельцу.Найти(Отбор.ЛевоеЗначение) <> Неопределено Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

Функция ПроверитьВозможностьПеремещения(Ссылка, Список, ОтображениеСписком)
	
	ПараметрыДоступа = ПараметрыДоступа("Изменение", Ссылка.Метаданные(), "Ссылка");
	Если Не ПараметрыДоступа.Доступность Тогда
		Возврат НСтр("ru = 'Недостаточно прав для изменения порядка элементов.'");
	КонецЕсли;
	
	Информация = ПолучитьИнформациюДляПеремещения(Ссылка);
	
	// Для иерархических справочников может быть установлен отбор по родителю, если нет,
	// то способ отображения должен быть иерархический или в виде дерева
	Если Информация.ЕстьРодитель И ОтображениеСписком И Не СписокСодержитОтборПоРодителю(Список) Тогда
		Возврат НСтр("ru = 'Для изменения порядка элементов необходимо установить режим просмотра ""Дерево"" или ""Иерархический список"".'");
	КонецЕсли;
	
	// Для подчиненных справочников должен быть установлен отбор по владельцу
	Если Информация.ЕстьВладелец И Не СписокСодержитОтборПоВладельцу(Список) Тогда
		Возврат НСтр("ru = 'Для изменения порядка элементов необходимо установить отбор по полю ""Владелец"".'");
	КонецЕсли;
	
	// Проверка признака "Использование" у реквизита РеквизитДопУпорядочивания по отношению к перемещаемому элементу.
	Если Информация.ЕстьГруппы Тогда
		ЭтоГруппа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, "ЭтоГруппа");
		Если ЭтоГруппа И Не Информация.ДляГрупп Или Не ЭтоГруппа И Не Информация.ДляЭлементов Тогда
			Возврат НСтр("ru = 'Выбранный элемент нельзя перемещать.'");
		КонецЕсли;
	КонецЕсли;
	
	Возврат "";
	
КонецФункции